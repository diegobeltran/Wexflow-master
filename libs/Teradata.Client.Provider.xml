<?xml version="1.0"?>
<doc>
    <assembly>
        <name>Teradata.Client.Provider</name>
    </assembly>
    <members>
        <member name="T:Teradata.Client.Provider.TdNumber">
            <summary>
             <para>
             The Teradata Database 14.0 and later supports a data type called NUMBER.  This data type supports
             fixed point decimal (Fixed Decimal) and floating point (Floating Decimal) numbers.  
             Fixed decimals can support up to 38 significant digits.  Floating decimals can support
             up 40 digits, however, the precision of the number is guaranteed only up to 38 digits.  
             </para>
            
             <para>
             TdNumber is the equivalent Provider Specific Type to NUMBER.  The range of TdNumber
             is +/-[1E-130 to 9.99...9E125] as well as 0.  It will also support a precision of up to 40 digits.
             </para>
             
             <para>
             TdNumber can also be used to receive and send numbers from and to the Teradata Database.
             </para>
             
             </summary>
            
             <remarks>
             
             <para>
             A number is stored in the following format:
             </para>
             
             <example>
                 X.XXXX...<strong>E</strong>YYY
             </example>
             
             <para>
             The "X.XXXX..." represents the <strong>mantissa</strong>, and the "YYY" is the exponent (as a power of 10) 
             of the number.
             </para>
             
             <para>
             TdNumber supports arithmetic, comparison, and conversion methods . 
             </para>
            
             <para>
             TdNumber is similar to TdDecimal.  The differences between these two types is that TdNumber 
             can support a precision of up to 40 digits, and floating point numbers are supported.  A 
             TdDecimal can be <strong>implicitly</strong> converted to a TdNumber.  A TdNumber must be 
             <strong>explicitly</strong> converted to a TdDecimal.
             </para>
            
             <para>
             A TdNumber value can be specified as an In, Out, or InOut parameter to a Stored Procedure.  The following
             is an example of using TdNumber as a parameter to a Store Procedure.
             </para>
            </remarks>
            
             <example>
                 The following coding example is similar to the one in <see cref="T:Teradata.Client.Provider.TdDecimal">TdDecimal</see>.  Fixed
                 point Numbers are from Teradata, modified, and then sent back to Teradata. 
                 <code lang="CS">
             public void ManipulateNumber(TdConnection cn)
             {
                 // creating commands that will be used to execute SQL statements
                 TdCommand cmd1 = cn.CreateCommand();
                 TdCommand cmd2 = cn.CreateCommand();
              
                 // query to rank the sales by region
                 //    TotalSales is defined as Number(15,4)
                 cmd1.CommandText = "select RegionId, TotalSales, Rank(TotalSales) " +
                    "from (select RegionId, sum(SalesAmt) as TotalSales " +
                            "from DetailedSales group by RegionId) as SalesByRegion";
                
              
                 // setting up command that will insert rows returned from query into
                 // the RankSalesByRegion table
                 cmd2.CommandText = "insert into RankSalesByRegion (RegionId, " +
                    "TotalSales, RegionRank) values (?, ?, ?)";
                    
                 cmd2.Parameters.Add(null, TdType.BigInt, 0, 
                    System.Data.ParameterDirection.Input, 
                    true, 0, 0, null, System.Data.DataRowVersion.Default, null);
                    
                 // Precision and Scale do get defined for NUMBER.  They are ignored by the provider.
                 cmd2.Parameters.Add(null, TdType.Number, 0, 
                    System.Data.ParameterDirection.Input, 
                    true, 0, 0, null, System.Data.DataRowVersion.Default, null);
                    
                 cmd2.Parameters.Add(null, TdType.Integer, 0, 
                    System.Data.ParameterDirection.Input,
                    true, 0, 0, null, System.Data.DataRowVersion.Default, null);
              
                 // TdNumber sumOfSales = new TdNumber(0);
                 // could also have been used
                 TdNumber sumOfSales = 0;
                 TdNumber avgSalesByRegion = 0;
              
                 TdNumber totalSales;
                 
                 TdDataReader reader;
                 
                 // Loop through the result set:
                 //   Read data returned, and set the Value property of the corresponding
                 //   TdParameter with the data returned for each column.
                 using (reader = cmd1.ExecuteReader())
                 {
                     while (true == reader.Read())
                     {
                         // Reading a BIGINT and
                         // Setting the RegionId parameter
                         cmd2.Parameters[0].Value = reader.GetInt64(0);
              
                         // Reading Number and
                         // Setting the TotalSales parameter
                         totalSales = reader.GetTdNumber(1);
                         cmd2.Parameters[1].Value = totalSales;
              
                         // Seting the RegionRank parameter
                         cmd2.Parameters[2].Value = reader.GetInt32(2);
              
                         // Summing up on the total sales
                         sumOfSales += totalSales    ;
              
                         cmd2.ExecuteNonQuery();
                     }
                 }
                 
                 // Calculating the avg sales by region
                 // The reader.RecordsReturned is explicitly converted to TdNumber
                 avgSalesByRegion = sumOfSales / (TdNumber)(reader.RecordsReturned);
              
                 cmd1.Dispose();
                 cmd2.Dispose();
             }
                 </code>
                 
             	<code lang="CS">
             public void CallCaculateSalesForRegion(TdConnection cn, Int32 RegionId)
             {
                 // Creating commands that will be used to execute SQL statements
                 TdCommand cmd1 = cn.CreateCommand();
              
                 // The CalculateSalesForRegion stored procedure has the 
                 // following parameters:
                 //     in RegionId Integer
                 //     out Rank    Integer
                 //     out SalesForRegion Number(38, 2)
                 //     out PercentOfTotalSales Number(7, 4)
                 cmd1.CommandText = "CaculateSalesForRegion";
                 cmd1.CommandType = System.Data.CommandType.StoredProcedure;
                
                 // Setting up parameters to return sales information for the 
                 // specified region
                 // 
                 // Parameter for the RegionId
                 Cmd1.Parameters.Add(null, TdType.Integer, 0, 
                    System.Data.ParameterDirection.Input, 
                    true, 0, 0, null, System.Data.DataRowVersion.Default, RegionId);
              
                 // Parameter for the Rank
                 cmd1.Parameters.Add(null, TdType.Integer, 0, 
                    System.Data.ParameterDirection.Output, 
                    true, 0, 0, null, System.Data.DataRowVersion.Default, null);
              
                 // Parameter for the SalesForRegion
                 cmd1.Parameters.Add(null, TdType.Number, 0, 
                    System.Data.ParameterDirection.Output,
                    true, 38, 2, null, System.Data.DataRowVersion.Default, null);
              
                 // Parameter for the PercentOfTotalSales
                 cmd1.Parameters.Add(null, TdType.Number, 0, 
                    System.Data.ParameterDirection.Output,
                    true, 7, 4, null, System.Data.DataRowVersion.Default, null);
              
                 // Execute the Stored Procedure
                 cmd1.ExecuteNonQuery();
              
                 // Retrieve the data for each of the out parameters
                
                 // Getting the data returned for the Rank
                 Int32 rank = cmd1.Parameters[1].Value;
              
                 // Getting the data returned for the SalesForRegion
                 TdNumber salesForRegion = cmd1.Parameters[2].ProviderSpecificValue;
              
                 // Getting the data returned for the PercentOfTotalSales
                 //    Since the parameter is defined as a Number(7,4) an
                 //    application can either retrieve the data using the
                 //    TdParameter.ProviderSpecificValue or TdParameter.Value property.  
                 //    ProviderSpecificValue will contain a TdNumber structure. 
                 //    Value will contains a System.Double structure.
                 TdNumber tdPercentOfTotalSales = cmdl.Parameters[3].ProviderSpecificValue;
                 System.Decimal sysPercentOfTotalSales = cmd1.Parameters[3].Value;
              
                 //
                 // CONTINUE PROCESSING THE DATA RETURNED FROM THE STORED PROCEDURE
                 //
              
                 cmd1.Dispose();
             }
                 </code>
             </example>
        </member>
        <member name="F:Teradata.Client.Provider.TdNumber.MaxValue">
            <summary>
            The maximum value of a TdNumber.  The value is 9.999999999999999999999999999999999999999e+125.
            </summary>
        </member>
        <member name="F:Teradata.Client.Provider.TdNumber.MinValue">
            <summary>
            The minimum value of a TdNumber.  The value is -9.999999999999999999999999999999999999999e+125.
            </summary>
        </member>
        <member name="F:Teradata.Client.Provider.TdNumber.Null">
            <summary>
            Gets a Null TdNumber instance. 
            </summary>
            <value>
            Returns a TdNumber instance that represents a <strong>Null</strong> value.
            </value>
            <remarks>
            Conceptually it is the constructor for <strong>Null</strong> TdNumber instances.
            </remarks>
            <example>
            This example shows how to send a <strong>Null</strong> value to Teradata Database.
            <code>
            TdParameter colX = new TdParameter();
            colX.TdType = TdType.Number;
            colX.Value = TdNumber.Null;
            </code>
            </example>
        </member>
        <member name="M:Teradata.Client.Provider.TdNumber.#ctor(System.Int32)">
            <summary>
            Initializes a new instance of TdNumber from the specified System.Int32 value.
            </summary>
            <param name="input">The Int32 that is to be converted to a TdNumber.</param>
        </member>
        <member name="M:Teradata.Client.Provider.TdNumber.#ctor(System.Int64)">
            <summary>
            Initializes a new instance of TdNumber from the specified System.Int64 value.
            </summary>
            <param name="input">The Int64 that will be used to intialize the new instance of TdNumber.</param>
        </member>
        <member name="M:Teradata.Client.Provider.TdNumber.#ctor(System.UInt64)">
            <summary>
            Initializes a new instance of TdNumber from the specified System.UInt64 value.
            </summary>
            <param name="input">The UInt64 that will be used to intialize the new instance of TdNumber.</param>
        </member>
        <member name="M:Teradata.Client.Provider.TdNumber.#ctor(System.Single)">
            <summary>
            Initializes a new instance of TdNumber from the specified <see cref="T:System.Single"/> value.
            </summary>
            <param name="input">The single that will be converted to a TdNumber.</param>
        </member>
        <member name="M:Teradata.Client.Provider.TdNumber.#ctor(System.Double)">
            <summary>
            Initializes a new instance of TdNumber from the specified <see cref="T:System.Double"/> value.
            </summary>
            
            <remarks>
            The TdNumber instance that results from converting the <paramref name="input"/> will represent
            a <strong>Floating</strong> decimal that has a scale of 16. 
            </remarks>
            <param name="input">The double that will be converted to a TdNumber.</param>
            <exception cref="T:System.OverflowException">The <paramref name="input"/> is too large and could not be 
            converted into a TdNumber.</exception>
        </member>
        <member name="M:Teradata.Client.Provider.TdNumber.#ctor(System.Int32[],System.Int16)">
             <summary>
             Initializes a new instance of TdNumber from an array of Int32 that represents the <strong>data components</strong>
             that defines the number.
             </summary>
             
             <remarks>
             <para>
             The <paramref name="input"/> represents the mantissa of the number.  When the components of the mantissa
             are determined, the mantissa must be converted into a <strong>scaled integer</strong>, and the exponent
             must be <strong>adjusted</strong>.  The array must contain 5 elements.  The order of the components in the array must start 
             from the least to the most significant.
             </para>
             
             <para>
             When a number is normalized, the exponent can range from -130 to 125.  However, the mantissa must
             be represented as scaled integer.  There the range of <paramref name="exponent"/> is 
             <strong>-169 to 86</strong>.
             </para>
             
             <para>
             The following is an example of setting up the array that represents the mantissa of the number, and then
             invoking this constructor:
             </para>
            
             <code>
             // Number:              90874.7443315867e+50
             // 
             // To generate the array, the scaled integer representation of the mantissa must be taken:  908747443315867.
             // The Hex Representation of the scaled integer is:  00000000 00000000 00000000 00033A80 408CA49B
             //
             // The exponent has to be adjusted to account for the scaled integer.  In this case the exponent
             // will be "e+40".
             //
             // The components in the array start with the least significant component(0x408CA49B).
             
             Int32 [] data1 = {0x408CA49B0, 0x00033A80, 0, 0, 0};
             TdNumber number1 = new TdNumber(data1, 40);
             
             // Number:              -930573624643332.32552e-65
             // Hex Representation of Scaled Integer:  FFFFFFFF FFFFFFFF FFFFFFFA F491D5E0 B2A60658
             // Adjusted Exponent:  -70
             Int32 [] data2 = {unchecked((Int32)0xB2A60658),  unchecked((Int32)0xF491D5E0), unchecked((Int32)0xFFFFFFFA), 
                     unchecked((Int32)0xFFFFFFFF), unchecked((Int32)0xFFFFFFFF)};
             TdNumber value2 = new TdNumber(data2, -70);
             </code>
             
             </remarks>
             
             <param name="input">The array that contains the components of the number.</param>
             <param name="exponent">The exponent of the Floating decimal.</param>
             
             <exception cref="T:System.ArgumentException">The array must contain 5 components.</exception>
             <exception cref="T:System.OverflowException">The number of digits in the mantissa cannot exceed 40, or
             the exponent is not between -130 and 125.</exception>
        </member>
        <member name="M:Teradata.Client.Provider.TdNumber.#ctor(System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int16)">
            <summary>
            Initializes a new instance of TdNumber from the <strong>data components</strong> that are passed
            in as several Int32 parameters.
            </summary>
            <remarks>
            Refer to <see cref="M:Teradata.Client.Provider.TdNumber.#ctor(System.Int32[],System.Int16)"/> for more information.
            </remarks>
            <param name="data1">The least significant number component.</param>
            <param name="data2">The second least significant number component.</param>
            <param name="data3">The middle number component.</param>
            <param name="data4">The second most significant number component.</param>
            <param name="data5">The most significant number component.</param>
            <param name="exponent">The exponent of the number.</param>
            <exception cref="T:System.OverflowException">The number represented by the data components is too large to 
            be represented by a TdNumber.</exception>
        </member>
        <member name="M:Teradata.Client.Provider.TdNumber.Equals(System.Object)">
            <summary>
            Compares this instance and <paramref name="obj"/> to determine whether they are equal.
            </summary>
            <returns>
            <c>true</c> is returned if the two TdNumbers are equal, <c>false</c> otherwise.
            </returns>
            <remarks>
            	<para><c>false</c> will be returned if:</para>
            	<list type="bullet">
            		<item>
                        This instance or <paramref name="obj"/> is <see cref="F:Teradata.Client.Provider.TdNumber.Null"/>.
                    </item>
            		<item>
                        This instance is not equal to <paramref name="obj"/>.
                    </item>
            		<item>
            			<paramref name="obj"/> is not of type TdNumber or <c>null</c>.
                    </item>
            	</list>
            	<para><c>true</c> will be returned if:</para>
            	<list type="bullet">
            		<item>
                        This instance and <paramref name="obj"/> are <Strong>Null</Strong>.
                    </item>
            		<item>
                        This instance is equal to <paramref name="obj"/>.
                    </item>
            	</list>
            </remarks>
            <example>
                The following code example uses various comparison methods and operators: 
             <code lang="CS">
            // The M is used to indicate that the numeric literal is a System.Decimal
            TdNumber  large = new TdNumber(32425643243167.43433M);
            Object medium = new TdNumber(89732.4543M);
             
            // The following comparison is equivalent to using
            //    false == TdNumber.Equals(large, (TdNumber) medium)
            //    large != (TdNumber) medium
            //    true == TdNumber.NotEquals(large, (TdNumber) medium)
            //    
            if (false == large.Equals(medium))
            {
               Console.WriteLine("large does not equal medium");
            }
                </code>
            </example>
            <overloads>
            Returns a value indicating whether two instances of TdNumber are equal.
            </overloads>
            <param name="obj">TdNumber instance that will be compared to this instance of TdNumber.</param>
        </member>
        <member name="M:Teradata.Client.Provider.TdNumber.Equals(Teradata.Client.Provider.TdNumber)">
            <summary>
            Compares this instance and another TdNumber to determine whether they are equal. 
            </summary>
            <returns><c>true</c> if the two TdNumbers are equal, <c>false</c> otherwise.</returns>
            <remarks>
            	<para><c>false</c> will be returned if:</para>
            	<list type="bullet">
            		<item>
                        This instance or <paramref name="other"/> is <see cref="F:Teradata.Client.Provider.TdNumber.Null"/>.
                    </item>
            		<item>
                        This instance is not equal to <paramref name="other"/>.
                    </item>
            	</list>
            	<para><c>true</c> will be returned if:</para>
            	<list type="bullet">
            		<item>
                        This instance and <paramref name="other"/> are <Strong>Null</Strong>.
                    </item>
            		<item>
                        This instance is equal to <paramref name="other"/>.
                    </item>
            	</list>
            </remarks>
            <param name="other">TdNumber instance that will be compared to this instance of TdNumber.</param>
        </member>
        <member name="M:Teradata.Client.Provider.TdNumber.CompareTo(System.Object)">
            <summary>
            Compares this instance to the specified TdNumber <paramref name="obj"/>. 
            </summary>
            <returns>
            	<para>
                    A signed number indicating how this instance compares to <paramref name="obj"/>.
                </para>
            	<para>
            		<list type="table">
            			<listheader>
            				<term>Return Value</term>
            				<description>Definition</description>
            			</listheader>
            			<item>
            				<term>Less than Zero</term>
            				<description>
            					<para>This instance is less than <paramref name="obj"/>.</para>
            					<para>-or-</para>
            					<para>This instance is <see cref="F:Teradata.Client.Provider.TdNumber.Null"/>.</para>
            				</description>
            			</item>
            			<item>
            				<term>Zero</term>
            				<description>
            					<para>
                                    This instance is equal to <paramref name="obj"/>.
                                </para>
            					<para>-or-</para>
            					<para>This instance is <Strong>Null</Strong> and <paramref name="obj"/> is 
            					<Strong>Null</Strong>.</para>
            				</description>
            			</item>
            			<item>
            				<term>Greater than Zero</term>
            				<description>
            					<para>
                                    This instance is greater than <paramref name="obj"/>.
                                </para>
            					<para>-or-</para>
            					<para>
            						<paramref name="obj"/> is <Strong>Null</Strong> or a <c>null</c> reference.
                                </para>
            				</description>
            			</item>
            		</list>
            	</para>
            </returns>
            <remarks>
              <para><paramref name="obj"/> must be an instance of TdNumber type or <c>null</c> reference.</para>
            </remarks>
            <exception cref="T:System.ArgumentException"><paramref name="obj"/> is not of type TdNumber</exception>
            <seealso cref="M:Teradata.Client.Provider.TdNumber.CompareTo(Teradata.Client.Provider.TdNumber)"/>
            <overloads>
            Compares this instance to the supplied object and returns whether it is less
            than, equal or greater than the supplied object.
            </overloads>
            <param name="obj">TdNumber instance to compare against.</param>
        </member>
        <member name="M:Teradata.Client.Provider.TdNumber.CompareTo(Teradata.Client.Provider.TdNumber)">
            <summary>
            Compares this instance to the specified TdNumber <paramref name="other"/>. 
            </summary>
            <returns>
            	<para>
                    A signed number indicating how this instance compares to
                    <paramref name="other"/>.
                </para>
            	<para>
            		<list type="table">
            			<listheader>
            				<term>Return Value</term>
            				<description>Meaning</description>
            			</listheader>
            			<item>
            				<term>Less than Zero</term>
            				<description>
            					<para>
                                    This instance is less than <paramref name="other"/>.
                                </para>
            					<para>-or-</para>
            					<para>This instance is <see cref="F:Teradata.Client.Provider.TdNumber.Null"/>.</para>
            				</description>
            			</item>
            			<item>
            				<term>Zero</term>
            				<description>
            					<para>
                                    This instance is equal to <paramref name="other"/>.
                                </para>
            					<para>-or-</para>
            					<para>This instance is <Strong>Null</Strong> and value is <Strong>Null</Strong>.</para>
            				</description>
            			</item>
            			<item>
            				<term>Greater than Zero</term>
            				<description>
            					<para>
                                    This instance is greater than
                                    <paramref name="other"/>.
                                </para>
            					<para>-or-</para>
            					<para>
            						<paramref name="other"/> is <Strong>Null</Strong>.
                                </para>
            				</description>
            			</item>
            		</list>
            	</para>
            </returns>
            <param name="other">The TdNumber to compare against.</param>
        </member>
        <member name="M:Teradata.Client.Provider.TdNumber.GetXmlSchema(System.Xml.Schema.XmlSchemaSet)">
             <summary>
             Specifies the XML Qualified name for <strong>TdNumber</strong> XML type mapping.
             </summary>
             <param name="xmlSchemaSet">Holds zero or more XML Schema definition language (XSD) schemas.</param>
             <returns>
             Returns a XmlSchemaComplexType that describes a TdNumber.
             </returns>
             <example>
             This examples shows how to use <strong>TdNumber</strong> with <see cref="T:System.Xml.Serialization.XmlSerializer"/> class.
             <see cref="T:System.Xml.Serialization.XmlElementAttribute"/> is used to indicate that the Teradata Database column can be 
             <strong>Null</strong>.
             <code>
              public class Order
              {
                  public DateTime Date;
            
                  public Int32 ProductId;
            
                  public Int32 Quantity;
            
                  public Int32? BackOrderQuantity;
            
                  [XmlElementAttribute(IsNullable = true)]        
                  public TdNumber BackOrderPrice;
              }
             
              internal class OrderWriter
              {
              
                  public static void Write()
                  {
                      // Setup the order
                      Order x = new Order();
              
                      x.Date = DateTime.Today;
                      x.ProductId = 100;
                      x.Quantity = 2000;
                      x.BackOrderQuantity = 100;
                      x.BackOrderPrice = new TdNumber(2684.87M); // This will be stored as 2.68487e+03
            
                      // Write out today's orders to the file.
                      //
                      // Open the file.
                      XmlWriterSettings settings = new XmlWriterSettings();
                      settings.Indent = true;
                      XmlWriter writer = XmlWriter.Create(@"C:\Temp\TodayOrders.XML", settings);
                      writer.WriteStartElement("TodayOrders");
                
                      // Write out the schema.
                      XmlSchemas schemas = new XmlSchemas();
                      XmlSchemaExporter schExporter = new XmlSchemaExporter(schemas);
                      schExporter.ExportTypeMapping(new XmlReflectionImporter().ImportTypeMapping(typeof(Order)));
                      schemas[0].Write(writer);
            
                      // Write out the orders.
                      XmlSerializer xml = new XmlSerializer(typeof(Order));
                      xml.Serialize(writer, x);
              
                      // Close the document.
                      writer.WriteEndDocument();
                      writer.Close();
                  }
              }
             
              /* Output is:
             
              &lt;TodayOrders&gt;
                &lt;xs:schema elementFormDefault="qualified" xmlns:xs="http://www.w3.org/2001/XMLSchema"&gt;
                  &lt;xs:element name="Order" nillable="true" type="Order" /&gt;
                  &lt;xs:complexType name="Order"&gt;
                    &lt;xs:sequence&gt;
                      &lt;xs:element minOccurs="1" maxOccurs="1" name="Date" type="xs:dateTime" /&gt;
                      &lt;xs:element minOccurs="1" maxOccurs="1" name="ProductId" type="xs:int" /&gt;
                      &lt;xs:element minOccurs="1" maxOccurs="1" name="Quantity" type="xs:int" /&gt;
                      &lt;xs:element minOccurs="1" maxOccurs="1" name="BackOrderQuantity" nillable="true" type="xs:int" /&gt;
                      &lt;xs:element minOccurs="1" maxOccurs="1" name="BackOrderPrice" nillable="true" type="Teradata.Client.Provider.TdNumber" /&gt;
                    &lt;/xs:sequence&gt;
                  &lt;/xs:complexType&gt;
                    &lt;xs:sequence&gt;
                      &lt;xs:element name="Data1" type="xs:integer" /&gt;
                      &lt;xs:element name="Data2" type="xs:integer" /&gt;
                      &lt;xs:element name="Data3" type="xs:integer" /&gt;
                      &lt;xs:element name="Data4" type="xs:integer" /&gt;
                      &lt;xs:element name="Data5" type="xs:integer" /&gt;
                      &lt;xs:element name="Exponent" type="xs:integer" /&gt;
                    &lt;/xs:sequence&gt;
                  &lt;xs:complexType name="Teradata.Client.Provider.TdNumber"&gt;
                  &lt;/xs:complexType&gt;
                &lt;/xs:schema&gt;
                &lt;Order xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xmlns:xsd="http://www.w3.org/2001/XMLSchema"&gt;
                  &lt;Date&gt;2007-02-01T00:00:00-08:00&lt;/Date&gt;
                  &lt;ProductId&gt;100&lt;/ProductId&gt;
                  &lt;Quantity&gt;2000&lt;/Quantity&gt;
                  &lt;BackOrderQuantity xsi:nil="true" /&gt;
                  &lt;BackOrderPrice/&gt;
                     &lt;Data1&gt; 0x0418C7 &lt;/Data1&gt;
                     &lt;Data2&gt; 0 &lt;/Data2&gt;
                     &lt;Data3&gt; 0 &lt;/Data3&gt;
                     &lt;Data4&gt; 0 &lt;/Data4&gt;
                     &lt;Data5&gt; 0 &lt;/Data5&gt;
                     &lt;Exponent&gt; 3 &lt;/Exponent&gt;
                  &lt;/BackOrderPrice/&gt;
                &lt;/Order&gt;
              &lt;/TodayOrders&gt;
             
              */
             </code>
             </example>
        </member>
        <member name="M:Teradata.Client.Provider.TdNumber.Compare(Teradata.Client.Provider.TdNumber,Teradata.Client.Provider.TdNumber)">
            <summary>
            Compares two instances of TdNumber and returns a value indicating whether <paramref name="left"/> is
            greater than, less than or equal to <paramref name="right"/>.
            </summary>
            <remarks>
            <para>
            The following are the values that can be returned:
            </para>
            	<list type="table">
            		<listheader>
            			<term>Return Value</term>
            			<description>Meaning</description>
            		</listheader>
            		<item>
            			<term>Less than zero</term>
            			<description>
                            <para><paramref name="left"/> is less than <paramref name="right"/>.</para> 
                            <para>-or-</para>
                            <para><paramref name="left"/> is <see cref="F:Teradata.Client.Provider.TdNumber.Null"/>.</para>
                        </description>
            		</item>
            		<item>
            			<term>Zero</term>
            			<description>
                            <para><paramref name="left"/> is equal to <paramref name="right"/>.</para>
                            <para>-or-</para>
                            <para><paramref name="left"/> and <paramref name="right"/> are <Strong>Null</Strong>.</para>
                        </description>
            		</item>
            		<item>
            			<term>Greater than zero</term>
            			<description>
                            <para><paramref name="left"/> is greater than <paramref name="right"/>.</para>
                            <para>-or-</para>
                            <para><paramref name="right"/> is <Strong>Null.</Strong></para>
                        </description>
            		</item>
            	</list>
            </remarks>
            <returns>
            Returns a value that indicates that the <paramref name="left"/> is less, greater, or equal to
            the right operand.
            </returns>
            <seealso cref="M:Teradata.Client.Provider.TdNumber.CompareTo(Teradata.Client.Provider.TdNumber)"/>
            <param name="left">An instance of TdNumber.</param>
            <param name="right">An instance of TdNumber.</param>
        </member>
        <member name="M:Teradata.Client.Provider.TdNumber.Equals(Teradata.Client.Provider.TdNumber,Teradata.Client.Provider.TdNumber)">
            <summary>
                Compares two <see cref="T:Teradata.Client.Provider.TdNumber"/> instances to determine whether they are
                equal.
            </summary>
            <remarks>
            	<para>
            		<c>true</c> if the <paramref name="left"/> is 
                    equal to the <paramref name="right"/>, <c>false</c> otherwise.
                </para>
            	<para>
            		<list type="table">
            			<listheader>
            				<term>Return Value</term>
            				<description>Description</description>
            			</listheader>
            			<item>
            				<term><c>true</c></term>
                            <description>
                                <para><paramref name="left"/> and <paramref name="right"/> are <see cref="F:Teradata.Client.Provider.TdNumber.Null"/></para> 
                                <para>-or-</para>
                                <para><paramref name="left"/> is equal to <paramref name="right"/>.</para>
                            </description>
            			</item>
            			<item>
            				<term><c>false</c></term>
                            <description>
                            <para><paramref name="left"/> or <paramref name="right"/> is <strong>Null</strong></para>
                            <para>-or-</para>
                            <para><paramref name="left"/> is not equal to <paramref name="right"/>.</para>
                            </description>
            			</item>
            		</list>
            	</para>
            </remarks>
            <returns>
            <code>true</code> operands are equal, <code>false</code> otherwise.
            </returns>
            <example>
                The following code example uses various comparison methods and operators.
                <code lang="CS">
            // The M is used to indicate that the numeric literal is a System.Decimal
            TdNumber  large = new TdNumber(32425643243167.43433M);
            TdNumber medium = new TdNumber(89732.4543M);
             
            // The following comparison methods and operators are equivalent
            if (false == TdNumber.Equals(large, medium) ||
                large != medium ||
                true == TdNumber.NotEquals(large, medium) )
            {
               Console.WriteLine("large does not equal medium");
            }
                </code>
            </example>
            <param name="left">A TdNumber instance.</param>
            <param name="right">A TdNumber instance.</param>
        </member>
        <member name="M:Teradata.Client.Provider.TdNumber.NotEquals(Teradata.Client.Provider.TdNumber,Teradata.Client.Provider.TdNumber)">
            <summary>
            Compares two TdNumbers to determine whether the <paramref name="left"/> operand is 
            not equal to the <paramref name="right"/> operand.
            </summary>
            <remarks>
            	<para>
            		<c>true</c> if the <paramref name="left"/> is 
                    not equal to the <paramref name="right"/>, <c>false</c> otherwise.
                </para>
            	<para>
            		<list type="table">
            			<listheader>
            				<term>Return Value</term>
            				<description>Description</description>
            			</listheader>
            			<item>
            				<term><c>true</c></term>
                            <description>
                                <para><paramref name="left"/> or <paramref name="right"/> is <see cref="F:Teradata.Client.Provider.TdNumber.Null"/></para> 
                                <para>-or-</para>
                                <para><paramref name="left"/> is less than or greater than <paramref name="right"/>.</para>
                            </description>
            			</item>
            			<item>
            				<term><c>false</c></term>
                            <description>
                            <para><paramref name="left"/> and <paramref name="right"/> are <strong>Null</strong></para>
                            <para>-or-</para>
                            <para><paramref name="left"/> is equal to <paramref name="right"/>.</para>
                            </description>
            			</item>
            		</list>
            	</para>
            </remarks>
            <returns>
            <code>true</code> operands are not equal, <code>false</code> otherwise.
            </returns>
            <param name="left">An instance of TdNumber.</param>
            <param name="right">An instance of TdNumber.</param>        
        </member>
        <member name="M:Teradata.Client.Provider.TdNumber.GreaterThan(Teradata.Client.Provider.TdNumber,Teradata.Client.Provider.TdNumber)">
            <summary>
            Compares two TdNumbers to determine whether the <paramref name="left"/> operand is 
            greater than the <paramref name="right"/> operand.
            </summary>
            <returns>
            	<para>
            		<c>true</c> if the <paramref name="left"/> is greater
                    than the <paramref name="right"/>, <c>false</c> otherwise.
                </para>
            	<para>
            		<list type="table">
            			<listheader>
            				<term>Return Value</term>
            				<description>Description</description>
            			</listheader>
            			<item>
            				<term><c>true</c></term>
                            <description><paramref name="left"/> and <paramref name="right"/> are not <see cref="F:Teradata.Client.Provider.TdNumber.Null"/> and
                            <paramref name="left"/> is greater than <paramref name="right"/>.
                            </description>
            			</item>
            			<item>
            				<term><c>false</c></term>
                            <description>
                            <para><paramref name="left"/> and / or <paramref name="right"/> is <strong>Null</strong> </para>
                            <para>-or-</para>
                            <para><paramref name="left"/> is less than or equal to <paramref name="right"/>.</para>
                            </description>
            			</item>
            		</list>
            	</para>
            </returns>
            <param name="left">An instance of TdNumber.</param>
            <param name="right">An instance of TdNumber.</param>
            <remarks>
            <para>Comparison operators always returns <c>false</c> if one of the operands is <strong>Null</strong>. 
            Therefore, you must not assume that the reverse condition is <c>true</c>. For example you cannot 
            assume that the left operand is less than or equal to the right operand if the <c>GreaterThan</c> 
            operator returns <c>false</c>.</para> 
            
            <para>The reverse condition is <c>true</c> when left and right operands are not 
            <strong>Null</strong>.</para>
            </remarks>
        </member>
        <member name="M:Teradata.Client.Provider.TdNumber.GreaterThanOrEqual(Teradata.Client.Provider.TdNumber,Teradata.Client.Provider.TdNumber)">
            <summary>
            Compares two TdNumbers to determine whether the <paramref name="left"/> operand is 
            greater than or equal to the <paramref name="right"/> operand.
            </summary>
            <returns>
            	<para>
            		<c>true</c> if the <paramref name="left"/> is greater
                    than or equal to the <paramref name="right"/>, <c>false</c> otherwise.
                </para>
            	<para>
            		<list type="table">
            			<listheader>
            				<term>Return Value</term>
            				<description>Description</description>
            			</listheader>
            			<item>
            				<term><c>true</c></term>
                            <description><paramref name="left"/> and <paramref name="right"/> are not 
                            <see cref="F:Teradata.Client.Provider.TdNumber.Null"/> and
                            <paramref name="left"/> is greater than or equal to <paramref name="right"/>.
                            </description>
            			</item>
            			<item>
            				<term><c>false</c></term>
                            <description>
                            <para><paramref name="left"/> and / or <paramref name="right"/> is 
                            <strong>Null</strong> </para>
                            <para>-or-</para>
                            <para><paramref name="left"/> is less than <paramref name="right"/>.</para>
                            </description>
            			</item>
            		</list>
            	</para>
            </returns>
            <param name="left">An instance of TdNumber.</param>
            <param name="right">An instance of TdNumber.</param>
            <remarks>
            <para>Comparison operators always returns <c>false</c> if one of the operands is <strong>Null</strong>. 
            Therefore, you must not assume that the reverse condition is <c>true</c>. For example you cannot 
            assume that the left operand is less than the right operand if <c>GreaterThanOrEqual</c> operator 
            returns <c>false</c>.</para> 
            
            <para>The reverse condition is <c>true</c> when left and right operands are not 
            <strong>Null</strong>.</para>
            </remarks>
        </member>
        <member name="M:Teradata.Client.Provider.TdNumber.LessThan(Teradata.Client.Provider.TdNumber,Teradata.Client.Provider.TdNumber)">
            <summary>
            Compares two TdNumbers to determine whether the <paramref name="left"/> operand is 
            less than the <paramref name="right"/> operand.
            </summary>
            <returns>
            	<para>
            		<c>true</c> if the <paramref name="left"/> is less
                    than the <paramref name="right"/>, <c>false</c> otherwise.
                </para>
            	<para>
            		<list type="table">
            			<listheader>
            				<term>Return Value</term>
            				<description>Description</description>
            			</listheader>
            			<item>
            				<term><c>true</c></term>
                            <description><paramref name="left"/> and <paramref name="right"/> are not 
                            <see cref="F:Teradata.Client.Provider.TdNumber.Null"/> and
                            <paramref name="left"/> is less than <paramref name="right"/>.
                            </description>
            			</item>
            			<item>
            				<term><c>false</c></term>
                            <description>
                            <para><paramref name="left"/> and / or <paramref name="right"/> is 
                            <strong>Null</strong></para>
                            <para>-or-</para>
                            <para><paramref name="left"/> is greater than or equal to <paramref name="right"/>.</para>
                            </description>
            			</item>
            		</list>
            	</para>
            </returns>
            <param name="left">An instance of TdNumber.</param>
            <param name="right">An instance of TdNumber.</param>
            <remarks>
            <para>Comparison operators always returns <c>false</c> if one of the operands is <strong>Null</strong>. 
            Therefore, you must not assume that the reverse condition is <c>true</c>. For example you cannot 
            assume that the left operand is greater than or equal the right operand if the <c>LessThan</c> operator 
            returns <c>false</c>.</para> 
            
            <para>The reverse condition is <c>true</c> when left and right operands are not 
            <strong>Null</strong>.</para>
            </remarks>
        </member>
        <member name="M:Teradata.Client.Provider.TdNumber.LessThanOrEqual(Teradata.Client.Provider.TdNumber,Teradata.Client.Provider.TdNumber)">
            <summary>
            Compares two TdNumbers to determine whether the <paramref name="left"/> operand is 
            less than or equal to the <paramref name="right"/> operand.
            </summary>
            <returns>
            	<para>
            		<c>true</c> if the <paramref name="left"/> is less
                    than or equal to the <paramref name="right"/>, <c>false</c> otherwise.
                </para>
            	<para>
            		<list type="table">
            			<listheader>
            				<term>Return Value</term>
            				<description>Description</description>
            			</listheader>
            			<item>
            				<term><c>true</c></term>
                            <description><paramref name="left"/> and <paramref name="right"/> are not 
                            <see cref="F:Teradata.Client.Provider.TdNumber.Null"/> and
                            <paramref name="left"/> is less than or equal to <paramref name="right"/>.
                            </description>
            			</item>
            			<item>
            				<term><c>false</c></term>
                            <description>
                            <para><paramref name="left"/> and / or <paramref name="right"/> is 
                            <strong>Null</strong></para>
                            <para>-or-</para>
                            <para><paramref name="left"/> is greater than <paramref name="right"/>.</para>
                            </description>
            			</item>
            		</list>
            	</para>
            </returns>
            <param name="left">An instance of TdNumber.</param>
            <param name="right">An instance of TdNumber.</param>
            <remarks>
            <para>Comparison operators always returns <c>false</c> if one of the operands is <strong>Null</strong>. 
            Therefore, you must not assume that the reverse condition is <c>true</c>. For example you cannot 
            assume that the left operand is greater than the right operand if the <c>LessThanOrEqual</c> operator 
            returns <c>false</c>.</para> 
            
            <para>The reverse condition is <c>true</c> when left and right operands are not 
            <strong>Null</strong>.</para>
            </remarks>
        </member>
        <member name="M:Teradata.Client.Provider.TdNumber.op_Equality(Teradata.Client.Provider.TdNumber,Teradata.Client.Provider.TdNumber)">
            <summary>
            Compares two TdNumbers to determine whether the <paramref name="left"/> operand is 
            equal to the <paramref name="right"/> operand.
            </summary>
            <returns>
            	<para>
            		<c>true</c> if the <paramref name="left"/> is 
                    equal to the <paramref name="right"/>, <c>false</c> otherwise.
                </para>
            	<para>
            		<list type="table">
            			<listheader>
            				<term>Return Value</term>
            				<description>Description</description>
            			</listheader>
            			<item>
            				<term><c>true</c></term>
                            <description>
                                <para><paramref name="left"/> and <paramref name="right"/> are 
                                <see cref="F:Teradata.Client.Provider.TdNumber.Null"/></para> 
                                <para>-or-</para>
                                <para><paramref name="left"/> is equal to <paramref name="right"/>.</para>
                            </description>
            			</item>
            			<item>
            				<term><c>false</c></term>
                            <description>
                            <para><paramref name="left"/> or <paramref name="right"/> is <strong>Null</strong></para>
                            <para>-or-</para>
                            <para><paramref name="left"/> is not equal to <paramref name="right"/>.</para>
                            </description>
            			</item>
            		</list>
            	</para>
            </returns>
            <param name="left">An instance of TdNumber.</param>
            <param name="right">An instance of TdNumber.</param>        
            <remarks>
            Unlike comparison operators, Equality operators do not always return <c>false</c> when left and 
            right operands are <strong>Null</strong>. Therefore the reverse condition can be considered 
            <c>true</c>. TdNumber implementation is very similar to the <see cref="T:System.Nullable"/> class in this regard.
            </remarks>
            <example>
            Following example shows that the Equality operator can safely be used in an if statement.
            <code>
            TdNumber x = TdNumber.Null;
            TdNumber y = new TdNumber(1.0M);
            
            if (x == y)
            {
                // x is equal to y.
                Console.WriteLine(@"X is equal to Y").
            }
            else
            {
                // x is not equal y
                Console.WriteLine(@"X is not equal to Y").
            }
            
            TdNumber y = TdNumber.Null;
            
            if (x == y)
            {
                // x is equal to y.
                Console.WriteLine(@"X is equal to Y").
            }
            else
            {
                // x is not equal y
                Console.WriteLine(@"X is not equal to Y").
            }
            </code>
            </example>
        </member>
        <member name="M:Teradata.Client.Provider.TdNumber.op_Inequality(Teradata.Client.Provider.TdNumber,Teradata.Client.Provider.TdNumber)">
            <summary>
            Compares two TdNumbers to determine whether the <paramref name="left"/> operand is 
            not equal to the <paramref name="right"/> operand.
            </summary>
            <returns>
            	<para>
            		<c>true</c> if the <paramref name="left"/> is 
                    not equal to the <paramref name="right"/>, <c>false</c> otherwise.
                </para>
            	<para>
            		<list type="table">
            			<listheader>
            				<term>Return Value</term>
            				<description>Description</description>
            			</listheader>
            			<item>
            				<term><c>true</c></term>
                            <description>
                                <para><paramref name="left"/> or <paramref name="right"/> is 
                                <see cref="F:Teradata.Client.Provider.TdNumber.Null"/></para> 
                                <para>-or-</para>
                                <para><paramref name="left"/> is less than or greater than 
                                <paramref name="right"/>.</para>
                            </description>
            			</item>
            			<item>
            				<term><c>false</c></term>
                            <description>
                            <para><paramref name="left"/> and <paramref name="right"/> are <strong>Null</strong></para>
                            <para>-or-</para>
                            <para><paramref name="left"/> is equal to <paramref name="right"/>.</para>
                            </description>
            			</item>
            		</list>
            	</para>
            </returns>
            <param name="left">An instance of TdNumber.</param>
            <param name="right">An instance of TdNumber.</param>        
        </member>
        <member name="M:Teradata.Client.Provider.TdNumber.op_GreaterThan(Teradata.Client.Provider.TdNumber,Teradata.Client.Provider.TdNumber)">
            <summary>
            Compares two TdNumbers to determine whether the <paramref name="left"/> operand is 
            greater than the <paramref name="right"/> operand.
            </summary>
            <returns>
            	<para>
            		<c>true</c> if the <paramref name="left"/> is greater
                    than the <paramref name="right"/>, <c>false</c> otherwise.
                </para>
            	<para>
            		<list type="table">
            			<listheader>
            				<term>Return Value</term>
            				<description>Description</description>
            			</listheader>
            			<item>
            				<term><c>true</c></term>
                            <description><paramref name="left"/> and <paramref name="right"/> are not 
                            <see cref="F:Teradata.Client.Provider.TdNumber.Null"/> and
                            <paramref name="left"/> is greater than <paramref name="right"/>.
                            </description>
            			</item>
            			<item>
            				<term><c>false</c></term>
                            <description>
                            <para><paramref name="left"/> and / or <paramref name="right"/> is 
                            <strong>Null</strong> </para>
                            <para>-or-</para>
                            <para><paramref name="left"/> is less than or equal to <paramref name="right"/>.</para>
                            </description>
            			</item>
            		</list>
            	</para>
            </returns>
            <param name="left">An instance of TdNumber.</param>
            <param name="right">An instance of TdNumber.</param>
            <remarks>
            <para>Comparison operators always returns <c>false</c> if one of the operands is <strong>Null</strong>. 
            Therefore, you must not assume that the reverse condition is <c>true</c>. For example you cannot 
            assume that the left operand is less than or equal to the right operand if the 
            "<c>&gt;</c>" operator returns <c>false</c>.</para> 
            
            <para>The reverse condition is <c>true</c> when left and right operands are not 
            <strong>Null</strong>.</para>
            </remarks>
        </member>
        <member name="M:Teradata.Client.Provider.TdNumber.op_GreaterThanOrEqual(Teradata.Client.Provider.TdNumber,Teradata.Client.Provider.TdNumber)">
            <summary>
            Compares two TdNumbers to determine whether the <paramref name="left"/> operand is 
            greater than or equal to the <paramref name="right"/> operand.
            </summary>
            <returns>
            	<para>
            		<c>true</c> if the <paramref name="left"/> is greater
                    than or equal to the <paramref name="right"/>, <c>false</c> otherwise.
                </para>
            	<para>
            		<list type="table">
            			<listheader>
            				<term>Return Value</term>
            				<description>Description</description>
            			</listheader>
            			<item>
            				<term><c>true</c></term>
                            <description><paramref name="left"/> and <paramref name="right"/> are not 
                            <see cref="F:Teradata.Client.Provider.TdNumber.Null"/> and
                            <paramref name="left"/> is greater than or equal to <paramref name="right"/>.
                            </description>
            			</item>
            			<item>
            				<term><c>false</c></term>
                            <description>
                            <para><paramref name="left"/> and / or <paramref name="right"/> is 
                            <strong>Null</strong> </para>
                            <para>-or-</para>
                            <para><paramref name="left"/> is less than <paramref name="right"/>.</para>
                            </description>
            			</item>
            		</list>
            	</para>
            </returns>
            <param name="left">An instance of TdNumber.</param>
            <param name="right">An instance of TdNumber.</param>
            <remarks>
            <para>Comparison operators always returns <c>false</c> if one of the operands is <strong>Null</strong>. 
            Therefore, you must not assume that the reverse condition is <c>true</c>. For example you cannot 
            assume that the left operand is less than the right operand if the "<c>&gt;=</c>" operator 
            returns <c>false</c>.</para> 
            
            <para>The reverse condition is <c>true</c> when left and right operands are not 
            <strong>Null</strong>.</para>
            </remarks>
        </member>
        <member name="M:Teradata.Client.Provider.TdNumber.op_LessThan(Teradata.Client.Provider.TdNumber,Teradata.Client.Provider.TdNumber)">
            <summary>
            Compares two TdNumbers to determine whether the <paramref name="left"/> operand is 
            less than the <paramref name="right"/> operand.
            </summary>
            <returns>
            	<para>
            		<c>true</c> if the <paramref name="left"/> is less
                    than the <paramref name="right"/>, <c>false</c> otherwise.
                </para>
            	<para>
            		<list type="table">
            			<listheader>
            				<term>Return Value</term>
            				<description>Description</description>
            			</listheader>
            			<item>
            				<term><c>true</c></term>
                            <description><paramref name="left"/> and <paramref name="right"/> are not 
                            <see cref="F:Teradata.Client.Provider.TdNumber.Null"/> and
                            <paramref name="left"/> is less than <paramref name="right"/>.
                            </description>
            			</item>
            			<item>
            				<term><c>false</c></term>
                            <description>
                            <para><paramref name="left"/> and / or <paramref name="right"/> is 
                            <strong>Null</strong></para>
                            <para>-or-</para>
                            <para><paramref name="left"/> is greater than or equal to <paramref name="right"/>.</para>
                            </description>
            			</item>
            		</list>
            	</para>
            </returns>
            <param name="left">An instance of TdNumber.</param>
            <param name="right">An instance of TdNumber.</param>
            <remarks>
            <para>Comparison operators always returns <c>false</c> if one of the operands is <strong>Null</strong>. 
            Therefore, you must not assume that the reverse condition is <c>true</c>. For example you cannot 
            assume that the left operand is greater than or equal the right operand if the 
            "<c>&lt;</c>" operator returns <c>false</c>.</para> 
            
            <para>The reverse condition is <c>true</c> when left and right operands are not 
            <strong>Null</strong>.</para>
            </remarks>
        </member>
        <member name="M:Teradata.Client.Provider.TdNumber.op_LessThanOrEqual(Teradata.Client.Provider.TdNumber,Teradata.Client.Provider.TdNumber)">
            <summary>
            Compares two TdNumbers to determine whether the <paramref name="left"/> operand is 
            less than or equal to the <paramref name="right"/> operand.
            </summary>
            <returns>
            	<para>
            		<c>true</c> if the <paramref name="left"/> is less
                    than or equal to the <paramref name="right"/>, <c>false</c> otherwise.
                </para>
            	<para>
            		<list type="table">
            			<listheader>
            				<term>Return Value</term>
            				<description>Description</description>
            			</listheader>
            			<item>
            				<term><c>true</c></term>
                            <description><paramref name="left"/> and <paramref name="right"/> are not 
                            <see cref="F:Teradata.Client.Provider.TdNumber.Null"/> and
                            <paramref name="left"/> is less than or equal to <paramref name="right"/>.
                            </description>
            			</item>
            			<item>
            				<term><c>false</c></term>
                            <description>
                            <para><paramref name="left"/> and / or <paramref name="right"/> is 
                            <strong>Null</strong></para>
                            <para>-or-</para>
                            <para><paramref name="left"/> is greater than <paramref name="right"/>.</para>
                            </description>
            			</item>
            		</list>
            	</para>
            </returns>
            <param name="left">An instance of TdNumber.</param>
            <param name="right">An instance of TdNumber.</param>
            <remarks>
            <para>Comparison operators always returns <c>false</c> if one of the operands is <strong>Null</strong>. 
            Therefore, you must not assume that the reverse condition is <c>true</c>. For example you cannot 
            assume that the left operand is greater than the right operand if the "<c>&lt;=</c>" operator 
            returns <c>false</c>.</para> 
            
            <para>The reverse condition is <c>true</c> when left and right operands are not 
            <strong>Null</strong>.</para>
            </remarks>
        </member>
        <member name="M:Teradata.Client.Provider.TdNumber.Abs(Teradata.Client.Provider.TdNumber)">
            <summary>
            The absolute value of the specified TdNumber is returned.
            </summary>
            <param name="value">A TdNumber structure</param>
            <returns>A TdNumber, x, such that 0 &lt;= x &lt;= MaxValue"; See the <see cref="M:System.Math.Abs(System.Double)"/> method.</returns>
            <remarks>If TdNumber is TdNumber.Null, a TdNumber.Null will be returned.</remarks>
        </member>
        <member name="M:Teradata.Client.Provider.TdNumber.Add(Teradata.Client.Provider.TdNumber,Teradata.Client.Provider.TdNumber)">
            <summary>
            Calculates the sum of the two TdNumber operands.
            </summary>
            <returns>A TdNumber containing the sum.</returns>
            <exception cref="T:System.OverflowException" caption="">
            	The result is not in the range (between <see cref="F:Teradata.Client.Provider.TdNumber.MinValue"/> 
            	and <see cref="F:Teradata.Client.Provider.TdNumber.MaxValue"/>) of a TdNumber, or the exponent is less than -130.
            </exception>
            <remarks>
            	<para>If one of the parameter is <see cref="F:Teradata.Client.Provider.TdNumber.Null"/>, the result will be
                <c>TdNumber.Null</c>.</para>
            
                <para>Please refer to <see cref="M:Teradata.Client.Provider.TdNumber.op_Addition(Teradata.Client.Provider.TdNumber,Teradata.Client.Provider.TdNumber)"/> for more information.</para>
            
            </remarks>
            <example>
            <para>Please refer to <see cref="M:Teradata.Client.Provider.TdNumber.op_Addition(Teradata.Client.Provider.TdNumber,Teradata.Client.Provider.TdNumber)"/> for an example of adding two TdNumbers.</para>
            </example>
            <param name="left">The left operand.</param>
            <param name="right">The right operand.</param>        
            
        </member>
        <member name="M:Teradata.Client.Provider.TdNumber.op_Addition(Teradata.Client.Provider.TdNumber,Teradata.Client.Provider.TdNumber)">
            <summary>
            Calculates the sum of the two TdNumber operands.
            </summary>
            <returns>A TdNumber containing the sum of the two operands.</returns>
            <exception cref="T:System.OverflowException" caption="">
            	<para>The result is not in the range (between <see cref="F:Teradata.Client.Provider.TdNumber.MinValue"/> 
            	and <see cref="F:Teradata.Client.Provider.TdNumber.MaxValue"/>) of a TdNumber, or the exponent is less than -130.</para>
            	</exception>
            <remarks>
            	<para>If one of the parameter is <see cref="F:Teradata.Client.Provider.TdNumber.Null"/>, the result will be
                <c>TdNumber.Null</c>.</para>
            
            </remarks>
            <example>
            	<code lang="CS" description="The following example creates pairs of TdNumbers and adds them using the + operator.">
            // 1  + (-1e-38) = 9.9999999999999999999999999999999999999e-1
            TdNumber left01 = new TdNumber(1, 0, 0, 0, 0, 0);      // left01 = 1
            TdNumber right01 = 
                 new TdNumber(unchecked((Int32)0xFFFFFFFF), 
                               unchecked((Int32)0xFFFFFFFF), 
                               unchecked((Int32)0xFFFFFFFF), 
                               unchecked((Int32)0xFFFFFFFF), 
                               unchecked((Int32)0xFFFFFFFF, -38);  // right01 = -0.00000000000000000000000000000000000001
            TdNumber result01 = left01 + right01;
            Console.WriteLine("{0} + {1} = {2}", left01, right01, result01);
             
            // 3.4538475968734 + (-0.4538475968734) = 3
            TdNumber left02 = TdNumber.Parse("3.4538475968734");
            TdNumber right02 = TdNumber.Parse("-0.4538475968734");
            TdNumber result02 = left02 + right02;
            Console.WriteLine("{0} + {1} = {2}", left02, right02, result02);
             
                </code>
            </example>
            <param name="left">The operand that appears to the left of the '+' sign.</param>
            <param name="right">The operand that appears to the right of the '+' sign.</param>
        </member>
        <member name="M:Teradata.Client.Provider.TdNumber.Subtract(Teradata.Client.Provider.TdNumber,Teradata.Client.Provider.TdNumber)">
            <summary>
            Calculates the result of subtracting two TdNumber operands. 
            </summary>
            <param name="left">The left operand.</param>
            <param name="right">The right operand.</param>
            <returns>A TdNumber containing the result</returns>
            
            <exception cref="T:System.OverflowException" caption="">
            	<para>The result is not in the range (between <see cref="F:Teradata.Client.Provider.TdNumber.MinValue"/> 
            	and <see cref="F:Teradata.Client.Provider.TdNumber.MaxValue"/>) of a TdNumber, or the exponent is less than -130.</para>
            	</exception>
            <remarks>
            	<para>If one of the parameter is <see cref="F:Teradata.Client.Provider.TdNumber.Null"/>, the result will be
                <c>TdNumber.Null</c>.</para>
            
            	Please refer to <see cref="M:Teradata.Client.Provider.TdNumber.op_Subtraction(Teradata.Client.Provider.TdNumber,Teradata.Client.Provider.TdNumber)"/> for more information.
            </remarks>
            <example>
            <para>Please refer to <see cref="M:Teradata.Client.Provider.TdNumber.op_Subtraction(Teradata.Client.Provider.TdNumber,Teradata.Client.Provider.TdNumber)"/> for an example of subtracting two TdNumbers.</para>
            </example>
                    
        </member>
        <member name="M:Teradata.Client.Provider.TdNumber.op_Subtraction(Teradata.Client.Provider.TdNumber,Teradata.Client.Provider.TdNumber)">
            <summary>
            Calculates the result of subtracting two TdNumber operands. 
            </summary>
            <param name="left">The operand that appears to the left of the '-' sign.</param>
            <param name="right">The operand that appears to the right of the '-' sign.</param>
            <returns>A TdNumber containing the result of the subtaction between the two operands.</returns>
            
            <exception cref="T:System.OverflowException" caption="">
            	<para>The result is not in the range (between <see cref="F:Teradata.Client.Provider.TdNumber.MinValue"/> 
            	and <see cref="F:Teradata.Client.Provider.TdNumber.MaxValue"/>) of a TdNumber, or the exponent is less than -130.</para>
            	</exception>
            <remarks>
            	<para>If one of the parameter is <see cref="F:Teradata.Client.Provider.TdNumber.Null"/>, the result will be
                <c>TdNumber.Null</c>.</para>
            
            </remarks>
            <example>
            The following example creates pairs of TdNumbers and subtracts them using the - operator.	
            <code>
            // 1 - 1e-38 = 0.99999999999999999999999999999999999999
            TdNumber left01 = new TdNumber(1, 0, 0, 0, 0, 0);      // left01 = 1
            TdNumber right01 = new TdNumber(1, 0, 0, 0, 0, -38);   // right01 = 0.00000000000000000000000000000000000001
            TdNumber result01 = left01 - right01;
            Console.WriteLine("{0} - {1} = {2}", left01, right01, result01);
             
            // 3.4538475968734 - 0.4538475968734 = 3
            TdNumber left02 = TdNumber.Parse("3.4538475968734");
            TdNumber right02 = TdNumber.Parse("0.4538475968734");
            TdNumber result02 = left02 + right02;
            Console.WriteLine("{0} - {1} = {2}", left02, right02, result02);
            </code>
            </example>
            
        </member>
        <member name="M:Teradata.Client.Provider.TdNumber.Negate(Teradata.Client.Provider.TdNumber)">
            <summary>
            Calculates the negation of the TdNumber operand. 
            </summary>
            <param name="input">The TdNumber.</param>
            <returns>A TdNumber containing the result.</returns>
            <remarks>If <paramref name="input"/> is TdNumber.Null, the result will be TdNumber.Null; 
            otherwise the result will have the opposite sign. </remarks>
        </member>
        <member name="M:Teradata.Client.Provider.TdNumber.op_UnaryNegation(Teradata.Client.Provider.TdNumber)">
            <summary>
            Calculates the negation of the TdNumber operand. 
            </summary>
            <param name="value">The TdNumber.</param>
            <returns>A TdNumber containing the result.</returns>
            <remarks>If <paramref name="value"/> is TdNumber.Null, the result will be TdNumber.Null; 
            otherwise the result will have the opposite sign. </remarks>
        </member>
        <member name="M:Teradata.Client.Provider.TdNumber.Divide(Teradata.Client.Provider.TdNumber,Teradata.Client.Provider.TdNumber)">
            <summary>
            Calculates the results of dividing the first TdNumber operand by the second.
            </summary>
            <param name="enumerator">The enumerator of the divide operation.</param>
            <param name="denominator">The denominator of the divide operation.</param>
            <returns>The TdNumber containing the result of the divide operation.</returns>
            <exception cref="T:System.DivideByZeroException">An attempt to divide by 0 was made.</exception>
            <exception cref="T:System.OverflowException">
            	<para>The result is not in the range (between <see cref="F:Teradata.Client.Provider.TdNumber.MinValue"/> 
            	and <see cref="F:Teradata.Client.Provider.TdNumber.MaxValue"/>) of a TdNumber, or the exponent is less than -130.</para>
            </exception>
            <remarks>If one of the parameter is TdNumber.Null, the result will be <see cref="F:Teradata.Client.Provider.TdNumber.Null"/>.
            <para></para>
            <para>Please refer to <see cref="M:Teradata.Client.Provider.TdNumber.op_Division(Teradata.Client.Provider.TdNumber,Teradata.Client.Provider.TdNumber)"/> for more information.</para>
            </remarks>
            <example>Please refer to the <see cref="M:Teradata.Client.Provider.TdNumber.op_Division(Teradata.Client.Provider.TdNumber,Teradata.Client.Provider.TdNumber)"/> for divide examples.</example>
        </member>
        <member name="M:Teradata.Client.Provider.TdNumber.op_Division(Teradata.Client.Provider.TdNumber,Teradata.Client.Provider.TdNumber)">
            <summary>
            Calculates the division of two TdNumbers.
            </summary>
            <param name="enumerator">The enumerator of the divide operation.</param>
            <param name="denominator">The denominator of the divide operation.</param>
            <returns>The TdNumber containing the result of the divide operation.</returns>
            <exception cref="T:System.DivideByZeroException">An attempt to divide by 0 was made.</exception>
            <exception cref="T:System.OverflowException">
            	<para>The result is not in the range (between <see cref="F:Teradata.Client.Provider.TdNumber.MinValue"/> 
            	and <see cref="F:Teradata.Client.Provider.TdNumber.MaxValue"/>) of a TdNumber, or the exponent is less than -130.</para>
            </exception>
            <remarks>If one of the parameter is TdNumber.Null, the result will be <see cref="F:Teradata.Client.Provider.TdNumber.Null"/>.
            </remarks>
            <example>
            The following are examples using the division operator.
            <code>
            TdNumber enumerator;
            TdNumber denominator;
            TdNumber result;
            
            enumerator = TdNumber.Parse("1");
            denominator = TdNumber.Parse("3");
            // Going to perform the operation 1 / 3.  
            result = enumerator / denominator;
            Console.WriteLine("{0} / {1} = {3}", enumerator, denominator, result);
            // The result is:  3.333333333333333333333333333333333333333e-001
            
            enumerator = TdNumber.Parse("134328.343553e3");
            denominator = TdNumber.Parse("98871.34521e-6");
            result = enumerator / denominator
            Console.WriteLine("{0} / {1} = {3}", enumerator, denominator, result);
            // The result is:  1.358617537444143367693945023042536188428e009
            
            </code>
            </example>
        </member>
        <member name="M:Teradata.Client.Provider.TdNumber.Multiply(Teradata.Client.Provider.TdNumber,Teradata.Client.Provider.TdNumber)">
            <summary>
            The arithmetic product of two TdNumbers is calculated.
            </summary>
            <param name="left">The left operand of the multiply operation.</param>
            <param name="right">The right operand of the multiply operation.</param>
            <returns>A TdNumber structure is returned whose value property contains the product of
            the left and right operands.</returns>
            <exception cref="T:System.OverflowException">
            	<para>The result is not in the range (between <see cref="F:Teradata.Client.Provider.TdNumber.MinValue"/> and 
            	<see cref="F:Teradata.Client.Provider.TdNumber.MaxValue"/>)  of a TdNumber, or the exponent is less than -130.</para>
            </exception>
            <remarks><para>The result will be TdNumber.Null if one of the parameter is TdNumber.Null. </para>
            </remarks>
            <example> Please refer to <see cref="M:Teradata.Client.Provider.TdNumber.op_Multiply(Teradata.Client.Provider.TdNumber,Teradata.Client.Provider.TdNumber)"/> for an example on the use of the 
            multiplication operator.</example>
        </member>
        <member name="M:Teradata.Client.Provider.TdNumber.op_Multiply(Teradata.Client.Provider.TdNumber,Teradata.Client.Provider.TdNumber)">
            <summary>
            The arithmetic product of two TdNumbers is calculated.
            </summary>
            <param name="left">The left operand of the multiply operation.</param>
            <param name="right">The right operand of the multiply operation.</param>
            <returns>A TdNumber structure is returned whose value property contains the product of
            the left and right operands.</returns>
            <exception cref="T:System.OverflowException">
            	<para>The result is not in the range (between <see cref="F:Teradata.Client.Provider.TdNumber.MinValue"/> and 
            	<see cref="F:Teradata.Client.Provider.TdNumber.MaxValue"/>) of a TdNumber, or the exponent is less than -130.</para>
            </exception>
            <remarks>
            <para>The result will be TdNumber.Null if one of the parameter is TdNumber.Null. </para>
            </remarks>
            <example>
            The following are multiplication examples:
            <code>
            TdNumber right01 = TdNumber.Parse("1e-39");
            TdNumber result01 = TdNumber.MaxValue * right01;
            Console.WriteLine("{0} * {1} = {2}", TdNumber.MaxValue, right01, result01);
            // result = 9.999999999999999999999999999999999999999e86
            
            TdNumber left02 = TdNumber.Parse("7922816253271108167.1548469249");
            TdNumber right02 = TdNumber.Parse("50");
            TdNumber result02 = left02 * right02;
            Console.WriteLine("{0} * {1} = {2}", left02, right02, result02);
            // result = 3.96140812663555408357742346245e20
            
            </code>
            </example>
        </member>
        <member name="M:Teradata.Client.Provider.TdNumber.op_Explicit(Teradata.Client.Provider.TdNumber)~Teradata.Client.Provider.TdDecimal">
            <summary>
            Converts a TdNumber to a TdDecimal.
            </summary>
            <remarks>
            <para>
            If the number contained in <paramref name="input"/> is very close to zero, the TdDecimal instance that
            is returned will be zero.  For example, suppose an instance of TdNumber contains the number 9.231356e-50.
            When this number is converted into an instance of TdDecimal, the number that the instance contains is zero.
            The reason for this is that the maximum precision of a TdDecimal is 38, and the first 38 digits that are 
            to the right of the decimal point of the number are all zeroes.
            </para>
            
            </remarks>
            <param name="input">The TdNumber that will be converted.</param>
            <returns>A TdDecimal is returned.</returns>
            <exception cref="T:System.OverflowException">The number represented by <paramref name="input"/> cannot be contained in 
            a TdDecimal.</exception>
        </member>
        <member name="M:Teradata.Client.Provider.TdNumber.op_Explicit(Teradata.Client.Provider.TdNumber)~System.Char">
            <summary>
            Converts a TdNumber to A System.Char.
            </summary>
            <param name="input">A TdNumber</param>
            <exception cref="T:Teradata.Client.Provider.TdException">The value of the TdNumber is Null.</exception>
            <exception cref="T:System.OverflowException">A Char cannot hold the value of the TdNumber.</exception>
            <returns>A Char is returned.</returns>
        </member>
        <member name="M:Teradata.Client.Provider.TdNumber.op_Explicit(Teradata.Client.Provider.TdNumber)~System.Double">
            <summary>
            Converts a TdNumber to a System.Double.
            </summary>
            <param name="input">A TdNumber</param>
            <returns>A Double is returned.</returns>
            <remarks>
            <para>
            When a TdNumber is converted into a System.Double a rounding error may occur.
            </para>
            <para>
            The reason for this is that the mantissa of a <see cref="T:System.Double"/> has a precision of 16 digits.  
            A TdNumber has a precision of 40 digits.  When a TdNumber is converted to a System.Double, it will 
            be truncated at the 17th position from the left.
            </para>
            </remarks>
            <exception cref="T:Teradata.Client.Provider.TdException">The value of the TdNumber is Null.</exception>
        </member>
        <member name="M:Teradata.Client.Provider.TdNumber.op_Explicit(Teradata.Client.Provider.TdNumber)~System.Int16">
            <summary>
            Converts a TdNumber to a System.Int16.
            </summary>
            <param name="input">A TdNumber</param>
            <returns>A Int16 is returned.</returns>
            <exception cref="T:Teradata.Client.Provider.TdException">The value of the TdNumber is Null.</exception>
            <exception cref="T:System.OverflowException">An Int16 cannot hold the value of the TdNumber.</exception>
        </member>
        <member name="M:Teradata.Client.Provider.TdNumber.op_Explicit(Teradata.Client.Provider.TdNumber)~System.Int32">
            <summary>
            Converts a TdNumber to a System.Int32.
            </summary>
            <param name="input">A TdNumber</param>
            <returns>An Int32 is returned.</returns>
            <exception cref="T:Teradata.Client.Provider.TdException">The value of the TdNumber is Null.</exception>
            <exception cref="T:System.OverflowException">An Int32 cannot hold the value of the TdNumber.</exception>
        </member>
        <member name="M:Teradata.Client.Provider.TdNumber.op_Explicit(Teradata.Client.Provider.TdNumber)~System.Int64">
            <summary>
            Converts a TdNumber to a System.Int64.
            </summary>
            <param name="input">A TdNumber</param>
            <returns>An Int64 is returned.</returns>
            <exception cref="T:Teradata.Client.Provider.TdException">The value of the TdNumber is Null.</exception>
            <exception cref="T:System.OverflowException">An Int64 cannot hold the value of the TdNumber.</exception>
        </member>
        <member name="M:Teradata.Client.Provider.TdNumber.op_Explicit(Teradata.Client.Provider.TdNumber)~System.Decimal">
            <summary>
            Converts a TdNumber to a System.Decimal.
            </summary>
            <param name="input">A TdNumber</param>
            <returns>A System.Decimal is returned</returns>
            <exception cref="T:Teradata.Client.Provider.TdException">The value of the TdNumber is Null.</exception>
            <exception cref="T:System.OverflowException">A Decimal cannot hold the value of the TdNumber.</exception>
        </member>
        <member name="M:Teradata.Client.Provider.TdNumber.op_Explicit(Teradata.Client.Provider.TdNumber)~System.SByte">
            <summary>
            Converts a TdNumber to a System.SByte,
            </summary>
            <param name="input">A TdNumber</param>
            <returns>A SByte is returned.</returns>
            <exception cref="T:Teradata.Client.Provider.TdException">The value of the TdNumber is Null.</exception>
            <exception cref="T:System.OverflowException">A SByte cannot hold the value of the TdNumber.</exception>
        </member>
        <member name="M:Teradata.Client.Provider.TdNumber.op_Explicit(Teradata.Client.Provider.TdNumber)~System.Single">
            <summary>
            Converts a TdNumber to a System.Single.
            </summary>
            <param name="input">A TdNumber</param>
            <returns>A Single is returned.</returns>
            <exception cref="T:Teradata.Client.Provider.TdException">The value of the TdNumber is Null.</exception>
            <exception cref="T:System.OverflowException">A Single cannot hold the value of the TdNumber.</exception>
        </member>
        <member name="M:Teradata.Client.Provider.TdNumber.op_Explicit(Teradata.Client.Provider.TdNumber)~System.UInt16">
            <summary>
            Converts a TdNumber to a System.UInt16.
            </summary>
            <param name="input">A TdNumber</param>
            <returns>An UInt16 is returned.</returns>
            <exception cref="T:Teradata.Client.Provider.TdException">The value of the TdNumber is Null.</exception>
            <exception cref="T:System.OverflowException">An UInt16 cannot hold the value of the TdNumber.</exception>
        </member>
        <member name="M:Teradata.Client.Provider.TdNumber.op_Explicit(Teradata.Client.Provider.TdNumber)~System.UInt32">
            <summary>
            Converts a TdNumber to a System.UInt32
            </summary>
            <param name="input">A TdNumber</param>
            <returns>An UInt32 is returned.</returns>
            <exception cref="T:Teradata.Client.Provider.TdException">The value of the TdNumber is Null.</exception>
            <exception cref="T:System.OverflowException"></exception>
        </member>
        <member name="M:Teradata.Client.Provider.TdNumber.op_Explicit(Teradata.Client.Provider.TdNumber)~System.UInt64">
            <summary>
            Converts a TdNumber to a System.UInt64
            </summary>
            <param name="input">A TdNumber</param>
            <returns>An UInt64 is returned.</returns>
            <exception cref="T:Teradata.Client.Provider.TdException">The value of the TdNumber is Null.</exception>
            <exception cref="T:System.OverflowException"></exception>
        </member>
        <member name="M:Teradata.Client.Provider.TdNumber.op_Explicit(System.Double)~Teradata.Client.Provider.TdNumber">
            <summary>
            Converts a System.Double to a TdNumber.
            </summary>
            <param name="input">A Double</param>
            <exception cref="T:System.OverflowException">The <paramref name="input"/> could not be converted to a TdNumber.</exception>
            <returns>A TdNumber is returned.</returns>
        </member>
        <member name="M:Teradata.Client.Provider.TdNumber.op_Explicit(System.Single)~Teradata.Client.Provider.TdNumber">
            <summary>
            Converts a System.Single to a TdNumber.
            </summary>
            <param name="input">A Single</param>
            <returns>A TdNumber is returned.</returns>
        </member>
        <member name="M:Teradata.Client.Provider.TdNumber.op_Implicit(System.Byte)~Teradata.Client.Provider.TdNumber">
            <summary>
            Converts a System.Byte to a TdNumber.
            </summary>
            <param name="input">A Byte</param>
            <returns>A TdNumber is returned.</returns>
        </member>
        <member name="M:Teradata.Client.Provider.TdNumber.op_Implicit(System.Char)~Teradata.Client.Provider.TdNumber">
            <summary>
            Converts a System.Char to a TdNumber.
            </summary>
            <param name="input">A Char</param>
            <returns>A TdNumber is returned.</returns>
        </member>
        <member name="M:Teradata.Client.Provider.TdNumber.op_Implicit(System.Int16)~Teradata.Client.Provider.TdNumber">
            <summary>
            Converts a System.Int16 to a TdNumber.
            </summary>
            <param name="input">A Int16</param>
            <returns>A TdNumber is returned.</returns>
        </member>
        <member name="M:Teradata.Client.Provider.TdNumber.op_Implicit(System.Int32)~Teradata.Client.Provider.TdNumber">
            <summary>
            Converts a System.Int32 to a TdNumber.
            </summary>
            <param name="input">A Int32</param>
            <returns>A TdNumber is returned.</returns>
        </member>
        <member name="M:Teradata.Client.Provider.TdNumber.op_Implicit(System.Int64)~Teradata.Client.Provider.TdNumber">
            <summary>
            Converts a System.Int64 to a TdNumber.
            </summary>
            <param name="input">A Int64</param>
            <returns>A TdNumber is returned.</returns>
        </member>
        <member name="M:Teradata.Client.Provider.TdNumber.op_Implicit(System.Decimal)~Teradata.Client.Provider.TdNumber">
            <summary>
            Converts a System.Decimal to a TdNumber
            </summary>
            <param name="input">A System.Decimal</param>
            <returns>A TdNumber is returned.</returns>
        </member>
        <member name="M:Teradata.Client.Provider.TdNumber.op_Implicit(System.SByte)~Teradata.Client.Provider.TdNumber">
            <summary>
            Converts a System.SByte to a TdNumber.
            </summary>
            <param name="input">A SByte</param>
            <returns>A TdNumber is returned.</returns>
        </member>
        <member name="M:Teradata.Client.Provider.TdNumber.op_Implicit(System.UInt16)~Teradata.Client.Provider.TdNumber">
            <summary>
            Converts a System.UInt16 to a TdNumber.
            </summary>
            <param name="input">A UInt16</param>
            <returns>A TdNumber is returned.</returns>
        </member>
        <member name="M:Teradata.Client.Provider.TdNumber.op_Implicit(System.UInt32)~Teradata.Client.Provider.TdNumber">
            <summary>
            Converts a System.UInt32 to a TdNumber.
            </summary>
            <param name="input">A UInt32</param>
            <returns>A TdNumber is returned.</returns>
        </member>
        <member name="M:Teradata.Client.Provider.TdNumber.op_Implicit(System.UInt64)~Teradata.Client.Provider.TdNumber">
            <summary>
            Converts a System.UInt64 to a TdNumber.
            </summary>
            <param name="input">A UInt64</param>
            <returns>A TdNumber is returned.</returns>
        </member>
        <member name="M:Teradata.Client.Provider.TdNumber.op_Explicit(Teradata.Client.Provider.TdNumber)~System.Byte">
            <summary>
            Converts a TdNumber to a System.Byte. 
            </summary>
            <param name="input">A TdNumber</param>
            <returns>A Byte is returned.</returns>
            <exception cref="T:Teradata.Client.Provider.TdException">The value of the TdNumber is Null.</exception>
            <exception cref="T:System.OverflowException"></exception>
        </member>
        <member name="M:Teradata.Client.Provider.TdNumber.ToString">
            <summary>
            Returns the string representation of the TdNumber based on the current 
            culture of the running thread.
            </summary>
            <returns>The string representation for the TdNumber is returned.</returns>
            <overloads>
            Converts this instance of TdNumber into its corresponding String representation.  
            </overloads>
        </member>
        <member name="M:Teradata.Client.Provider.TdNumber.ToString(System.String)">
            <summary>
            Returns the string representation of the TdNumber based on the format string and current 
            culture of the running thread.
            </summary>
            <param name="format">The format string</param>
            <exception cref="T:System.FormatException">An incorrect format specifier is contained in the format 
            string.</exception>
            <returns>The string representation of the TdNumber in the format specified in the format string.</returns>
            <remarks>Refer to <see cref="M:Teradata.Client.Provider.TdNumber.ToString(System.String,System.IFormatProvider)"/> for more information on the 
            format string.</remarks>
            <seealso cref="M:Teradata.Client.Provider.TdNumber.ToString(System.String,System.IFormatProvider)"/>
        </member>
        <member name="M:Teradata.Client.Provider.TdNumber.ToString(System.IFormatProvider)">
            <summary>
            Returns the string representation of the TdNumber using the 
            culture-specific format information.
            </summary>
            <param name="provider">An IFormatProvider that supplies culture-specific 
            formatting information. </param>
            <returns>The String representation of this instance as specified by the culture 
            specific information provided by the format provider. </returns>
            <example>
            Refer to <see cref="M:Teradata.Client.Provider.TdNumber.ToString(System.String,System.IFormatProvider)"/> for an example.
            </example>
        </member>
        <member name="M:Teradata.Client.Provider.TdNumber.ToString(System.String,System.IFormatProvider)">
             <summary>
             Converts this instance to its equivalent String representation using the 
             specified format and culture-specific format information. 
             </summary>
             <param name="format">The format information</param>
             <param name="formatProvider">An IFormatProvider that supplies culture-specific formatting 
             information. </param>
             <returns>The String representation of this instance as specified by format and provider. </returns>
             <exception cref="T:System.FormatException">An incorrect format specifier is contained in the format 
             string.</exception>
             <remarks>
             <para>The format string is specified as</para> 
             <para><code>&lt;Format Specifier&gt;&lt;Precision Specifier&gt;</code></para>
             <para>A <code>null</code> can be passed in as the format string.  When this is done, the 'G' is 
             used as the Format Specifier.</para>
             
             <para>The maximum number of digits that will appear in the string conversion of a TdNumber is <strong>40</strong>.</para>
             <para>The following Format Specifiers are supported:</para>
             <list type="table">
             <listheader>
             <term>Format Specifier</term>
             <description>Description</description>
             </listheader>
             <item>
             <term>c or C</term>
             <description><para>Currency.  Before the number gets converted into a string that represents currency, it 
             is expanded (the exponent is applied to the mantissa).  The precision specifier is applied to the digits
             that are to the right of the decimal point.  For example, when the number <code>6.8737251092e5</code>
             is converted and "C4" is specified as the <paramref name="format"/>, the result is 
             "$687372.5109".</para></description>
             </item>
             <item>
             <term>e or E</term>
             <description><para>Exponential notation. The precision specifier is used to indicate how many digits are
             to appear to the right of the decimal point.  For example, when the number <code>9.3413442e-50</code> is 
             converted to a string and "E3" is specified as the <paramref name="format"/>, the result is 
             "9.341e-050".</para></description>
             </item>
             <item>
             <term>f or F</term>
             <description><para>Fixed numeric Format.  Before the number gets converted into a string, it is expanded 
             (the exponent is applied to the mantissa).  After the number is expanded, the precision specifier 
             is applied to the digits that are to the right of the decimal point.  For example, when the number 
             <code>3.45495874721e4</code> is converted to a string and "F2" is specified as the 
             <paramref name="format"/>, the result is "34549.59".</para></description>
             </item>
             <item>
             <term>g or G</term>
             <description><para>General numeric format.</para></description>
             </item>
             <item>
             <term>n or N</term>
             <description><para>Number format.  The exponent is applied to the mantissa.  After the number has 
             been expanded the group and decimal separators are added to the numeric string.</para></description>
             </item>
             </list>
             <para>The <strong>Precision Specifier</strong> indicates how many decimal places will appear in the string.  It does not have
             to be specified.  A valid Precision Specifier is between 0 - 99.</para>
             
             <para>For more information on each of the supported Format Specifiers please refer to 
             <a href="http://msdn2.microsoft.com/en-us/library/dwhawy9k.aspx">Standard Numeric Format Strings</a>
             in MSDN.
             </para>
             
             <para>When a number is converted to a string, its format is controlled by the 
             <see cref="T:System.Globalization.NumberFormatInfo"/>.  For each specifier, this object contains formatting information 
             that will be used when constructing the numeric string.</para>
             
             <para><a href="http://msdn2.microsoft.com/en-us/library/0c899ak8.aspx">Custom format strings</a> 
             are not currently supported by TdNumber.</para>
             </remarks>
             <example>
             <para>The following is an example on formatting a TdNumber when converting to a String.</para> 
             
             <code>
             public void ToStringExample()
             {
                 TdNumber value;
                 String result;
             
                 System.Globalization.NumberFormatInfo formatInfo;
             
                 value = TdNumber.Parse("9987365422318132e-8");
             
                 // FIXED FORMAT
                 
                 // Using Default FormatProvider.
             
                 // result will be 99873654.22
                 result = value.ToString("f2");
             
                 // result will be 99873654.2232
                 result= value.ToString("f4");
             
                 // Going to change the the Decimal Separator
                 formatInfo.NumberDecimalSeparator = "##";
                
                 // result will be 99873654##223218
                 result = value.ToString("f6");
             
                 // CURRENCY FORMAT
             
                 // result will be $99,873,654.22
                 result = value.ToString("C2");
             
                 // Going to change the Currency Group Separator
                 numberFormat.CurrencyGroupSeparator = @"@@";
                 
                 // Going to chage the Currency Symbol
                 numberFormat.CurrencySymbol = "?";
             
                 // result will be ?99@@873@@654.22
                 //     NOTE:  There is a property, CurrencyDecimalSeparator,
                 //            that is used only for currency.  Therefore,
                 //            NumberDecimalSeparator has no affect 
                 //            on a string formatted with a "c".
                 result = value.ToString("c4");
             }
             </code>
            </example>
        </member>
        <member name="M:Teradata.Client.Provider.TdNumber.Parse(System.String)">
            <summary>
            Converts the String representation of a number to its TdNumber equivalent. 
            </summary>
            <param name="input">The numeric string that is to be converted to a TdNumber.</param>
            <returns>The TdNumber representation of the specified numeric string.</returns>
            <remarks>
            <list type="table">
            <listheader>
                <term>String</term>
                <description>Result</description>
            </listheader>
            <item>
            <term>1234562546908.23442</term>
            <description>is a <c>valid</c> string</description>
            </item>
            <item>
            <term>123456254690823442e-5</term>
            <description>is a <c>valid</c> string</description>
            </item>
            <item>
            <term>.00123456254690823442e15</term>
            <description>is a <c>valid</c> string</description>
            </item>
            <item>
            <term>1,234,562,546,908,234.42e-3</term>
            <description>is a <c>valid</c> string</description>
            </item>
            <item>
            <term>1234,562546,9,08.23442</term>
            <description>is a <c>valid</c> string</description>
            </item>
            <item>
            <term>1,234,562,546,908,234.42g-3</term>
            <description>is an <c>invalid</c> string</description>
            </item>
            <item>
            <term>1,234,562,546,908,</term>
            <description>is an <c>invalid</c> string</description>
            </item>
            <item>
            <term>1,234,562,546,908.23,442</term>
            <description>is an <c>invalid</c> string</description>
            </item>
             <item>
            <term>1,234,562,546,908.23442-</term>
            <description>is an <c>invalid</c> string due the negative sign at the end of the string.</description>
            </item>
            </list>
            
            <para>Both the group separator and decimal separator are culture specific.</para>
            
            <para>If the <paramref name="input"/> contains the string "NULL" a <see cref="F:Teradata.Client.Provider.TdNumber.Null"/>
            will be returned.</para> 
            
            </remarks>
            
            <exception cref="T:System.FormatException">The format of the numeric string is invalid.</exception>
            <exception cref="T:System.OverflowException">The specified numeric string could not be converted to a 
            TdNumber</exception>
            <exception cref="T:System.ArgumentNullException">The numeric string is null.</exception>
            
            <overloads>
            Converts a numeric string into an equivalent instance of a TdNumber.
            </overloads>
        </member>
        <member name="M:Teradata.Client.Provider.TdNumber.Parse(System.String,System.IFormatProvider)">
            <summary>
            Converts the String representation of a number to its TdNumber equivalent 
            using the specified culture-specific format information. 
            </summary>
            <param name="input">The numeric string that is to be converted to a TdNumber.</param>
            <param name="provider">An IFormatProvider that supplies culture-specific formatting information. </param>
            <returns>The TdNumber representation of the specified numeric string.</returns>
            <remarks>
            <para>A reference to the <see cref="T:System.Globalization.NumberFormatInfo"/> associated with the specified
            <paramref name="provider"/> is retrieved.  The properties of the <c>NumberFormatInfo</c> are used
            when parsing the numeric string.  However, the only culture specific properties that are supported
            are as follows:</para>
            
            <para>
            <list type="bullet">
            <item>
            <description>Negative Sign</description>
            </item>
            <item>
            <description>Positive Sign</description>
            </item>
            <item>
            <description>Number Group Separator</description>
            </item>
            <item>
            <description>Number Decimal Separator</description>
            </item>
            </list>
            </para>
            
            <para>If the <paramref name="input"/> contains the string "NULL" a <see cref="F:Teradata.Client.Provider.TdNumber.Null"/>
            will be returned.</para>
            
            <para>Refer to <see cref="M:Teradata.Client.Provider.TdNumber.Parse(System.String)"/> for further information about the
            format of the numeric string.</para>
            
            </remarks>
            <exception cref="T:System.ArgumentNullException">The numeric string is null or empty.</exception>
            <exception cref="T:System.FormatException">The format of the numeric string is invalid.</exception>
            <exception cref="T:System.OverflowException">The specified numeric string could not be converted to a 
            TdNumber.</exception>
            <exception cref="T:System.ArgumentNullException">The numeric string is null.</exception>
        </member>
        <member name="M:Teradata.Client.Provider.TdNumber.TryParse(System.String,Teradata.Client.Provider.TdNumber@)">
            <summary>
            Converts the String representation of a number to its TdNumber equivalent.
            A boolean is returned that indicates whether the conversion succeeded.
            </summary>
            <param name="input">The string to be converted.</param>
            <param name="result">The TdNumber representation of the string</param>
            <returns><c>true</c> if value was converted successfully, <c>false</c> otherwise.</returns>
            <remarks>
            Please refer to <see cref="M:Teradata.Client.Provider.TdNumber.Parse(System.String)"/> for more information.
            </remarks>
        </member>
        <member name="M:Teradata.Client.Provider.TdNumber.TryParse(System.String,System.IFormatProvider,Teradata.Client.Provider.TdNumber@)">
            <summary>
            Converts the String representation of a number to its TdNumber equivalent using
            culture specific information.
            </summary>
            <param name="input">The string to be converted</param>
            <param name="provider">Contains the culture specific information.</param>
            <param name="result">The TdNumber representation of value.</param>
            <returns><c>true</c> if value was converted successfully, <c>false</c> otherwise.</returns>
            <remarks>
            Please refer to <see cref="M:Teradata.Client.Provider.TdNumber.Parse(System.String,System.IFormatProvider)"/> for more information.
            </remarks>
            <overloads>
            Converts a numeric string to an equivalent instance of a TdNumber.  A <c>true</c> is returned
            if the conversion succeeded, <c>false</c> otherwise.
            </overloads>
        </member>
        <member name="M:Teradata.Client.Provider.TdNumber.GetHashCode">
            <summary>
            Returns the hash code for this instance. 
            </summary>
            <returns>The hash code is returned</returns>
        </member>
        <member name="M:Teradata.Client.Provider.TdNumber.ToSingle(Teradata.Client.Provider.TdNumber)">
            <summary>
            Converts the value of the specified TdNumber into the equivalent <see cref="T:System.Single"/>.
            </summary>
            <param name="input">The TdNumber that is to be converted to a single precision number.</param>
            <returns>A single precision value is returned that has the equivalent value as 
            the specified TdNumber.</returns>
            <exception cref="T:Teradata.Client.Provider.TdException">The value in the TdNumber 
            is Null.</exception>
            <remarks>A rounding error can occur because a single precision floating point number contains fewer 
            significant digits than a TdNumber.</remarks>
        </member>
        <member name="M:Teradata.Client.Provider.TdNumber.ToDouble(Teradata.Client.Provider.TdNumber)">
            <summary>
            Converts the value of the specified TdNumber into a <see cref="T:System.Double"/> .
            </summary>
            <param name="input">The TdNumber that is to be converted to a double precision number.</param>
            <returns>A double precision value that is equivalent to the specified TdNumber is returned.</returns>
            <exception cref="T:Teradata.Client.Provider.TdException">The value of the TdNumber is Null.</exception>
            <remarks>
            <para>
            When a TdNumber is converted into s System.Double a rounding error may occur.
            </para>
            <para>
            The reason for this is that the mantissa of a <see cref="T:System.Double"/> has a precision of 16 digits.  
            A TdNumber has a precision of 40 digits.  When a TdNumber is converted to a System.Double, it will 
            be truncated at the 17th position from the left.
            </para>
            </remarks>
        </member>
        <member name="M:Teradata.Client.Provider.TdNumber.ToInt16(Teradata.Client.Provider.TdNumber)">
            <summary>
            Converts the value of the specified TdNumber into the equivalent <see cref="T:System.Int16"/>.
            </summary>
            <param name="input">The TdNumber that is to be converted to a 16-bit signed integer.</param>
            <returns>A 16-bit signed integer value that is equivalent to the TdNumber is returned. </returns>
            <exception cref="T:Teradata.Client.Provider.TdException">The value of <paramref name="input"/> 
            is Null.</exception>
            <exception cref="T:System.OverflowException">The TdNumber could not be converted to Int16.</exception>
            <remarks>When a TdNumber that has a scale greater than 0 is converted to a 16-bit signed integer
            the fractional part of the number will be truncated.</remarks>
        </member>
        <member name="M:Teradata.Client.Provider.TdNumber.ToUInt16(Teradata.Client.Provider.TdNumber)">
            <summary>
            Converts the value of the specified TdNumber to the equivalent <see cref="T:System.UInt16"/>. 
            </summary>
            <param name="input">The TdNumber that is to be converted to a 16-bit unsigned integer.</param>
            <returns>A 16-bit unsigned integer value that is equivalent to the specified TdNumber is 
            returned.</returns>
            <exception cref="T:Teradata.Client.Provider.TdException">The value of the TdNumber 
            is Null.</exception>
            <exception cref="T:System.OverflowException">The TdNumber could not be converted to UInt16</exception>
            <remarks>When a TdNumber that has a scale greater than 0 is converted to a 16-bit unsigned integer
            the fractional part of the number will be truncated.</remarks>
        </member>
        <member name="M:Teradata.Client.Provider.TdNumber.ToInt32(Teradata.Client.Provider.TdNumber)">
            <summary>
            Converts the value of the specified TdNumber into a <see cref="T:System.Int32"/>.
            </summary>
            <returns>
            A 32-bit signed integer value that is equivalent to the specified TdNumber is returned. 
            </returns>
            <exception cref="T:Teradata.Client.Provider.TdException">The value of the TdNumber is Null.</exception>
            <exception cref="T:System.OverflowException">The TdNumber could not be converted to Int32.</exception>
            <remarks>When a TdNumber that has a scale greater than 0 is converted to a 32-bit signed integer
            the fractional part of the number will be truncated.</remarks>
            <param name="input">The TdNumber that is to be converted to a 32-bit signed integer.</param>
        </member>
        <member name="M:Teradata.Client.Provider.TdNumber.ToUInt32(Teradata.Client.Provider.TdNumber)">
            <summary>
                Converts the value of the specfied TdNumber into a
                <see cref="T:System.UInt32"/>.
            </summary>
            <returns>A 32-bit unsigned integer value that is equivalent to the specified TdNumber is 
            returned.</returns>
            <exception cref="T:Teradata.Client.Provider.TdException">The value of <paramref name="input"/> 
            is Null.</exception>
            <exception cref="T:System.OverflowException">The TdNumber is too big for an UInt32.</exception>
            <remarks>When a TdNumber that has a scale greater than 0 is converted to a 32-bit unsigned integer
            the fractional part of the number will be truncated.</remarks>
            <param name="input">The TdNumber that is to be converted to a 32-bit unsigned integer.</param>
        </member>
        <member name="M:Teradata.Client.Provider.TdNumber.ToBoolean(Teradata.Client.Provider.TdNumber)">
            <summary>
            Converts the value of the specified TdNumber to a <see cref="T:System.Boolean"/>. 
            </summary>
            <param name="value">The TdNumber that is to be converted to a boolean.</param>
            <returns><c>true</c> if The TdNumber is non-zero.  <c>false</c> if the TdNumber is zero.</returns>
            <exception cref="T:Teradata.Client.Provider.TdException">The value of the TdNumber is Null.</exception>
        </member>
        <member name="M:Teradata.Client.Provider.TdNumber.ToByte(Teradata.Client.Provider.TdNumber)">
            <summary>
            Converts the value of the specified TdNumber to the equivalent <see cref="T:System.Byte"/>. 
            </summary>
            <param name="input">The TdNumber that is to be converted to a 8-bit unsigned integer.</param>
            <returns>An 8-bit unsigned integer value that is equivalent to the specified TdNumber is 
            returned. </returns>
            <exception cref="T:Teradata.Client.Provider.TdException">The value of <paramref name="input"/> 
            is Null.</exception>
            <exception cref="T:System.OverflowException">The TdNumber could not be converted to a Byte.</exception>
            <remarks>When a TdNumber that has a scale greater than 0 is converted to a 8-bit unsigned integer
            the fractional part of the number will be truncated.</remarks>
        </member>
        <member name="M:Teradata.Client.Provider.TdNumber.ToSByte(Teradata.Client.Provider.TdNumber)">
            <summary>
            Converts the value of the specified TdNumber to the equivalent <see cref="T:System.SByte"/>. 
            </summary>
            <param name="input">The TdNumber that is to be converted to a 8-bit signed integer.</param>
            <returns>An 8-bit signed integer equivalent to the specified TdNumber is returned. </returns>
            <exception cref="T:Teradata.Client.Provider.TdException">The value of <paramref name="input"/> 
            is Null.</exception>
            <exception cref="T:System.OverflowException">The TdNumber could not be converted to a SByte.</exception>
            <remarks>When a TdNumber that has a scale greater than 0 is converted to a 8-bit signed integer
            the fractional part of the number will be truncated.</remarks>
        </member>
        <member name="M:Teradata.Client.Provider.TdNumber.ToInt64(Teradata.Client.Provider.TdNumber)">
            <summary>
            Converts the value of the specified TdNumber to the equivalent <see cref="T:System.Int64"/>. 
            </summary>
            <param name="input">The TdNumber that is to be converted to a 64-bit signed integer.</param>
            <returns>A 64-bit signed integer equivalent to the specified TdNumber is returned. </returns>
            <exception cref="T:Teradata.Client.Provider.TdException">The value of <paramref name="input"/> 
            is Null.</exception>
            <exception cref="T:System.OverflowException">The TdNumber could not be converted an Int64.</exception>
            <remarks>When a TdNumber that has a scale greater than 0 is converted to a 64-bit signed integer
            the fractional part of the number will be truncated.</remarks>
        </member>
        <member name="M:Teradata.Client.Provider.TdNumber.ToUInt64(Teradata.Client.Provider.TdNumber)">
            <summary>
            Converts the value of the specified TdNumber to the equivalent <see cref="T:System.UInt64"/>. 
            </summary>
            <param name="input">The TdNumber that is to be converted to a 64-bit unsigned integer.</param>
            <returns>A 64-bit unsigned integer equivalent to the specified TdNumber is returned. </returns>
            <exception cref="T:Teradata.Client.Provider.TdException">The value of <paramref name="input"/> 
            is Null.</exception>
            <exception cref="T:System.OverflowException">The TdNumber could not be converted an UInt64.</exception>
            <remarks>When a TdNumber that has a scale greater than 0 is converted to a 64-bit unsigned integer
            the fractional part of the number will be truncated.</remarks>
        </member>
        <member name="M:Teradata.Client.Provider.TdNumber.ToDecimal(Teradata.Client.Provider.TdNumber)">
            <summary>
            Converts the value of the specified TdNumber to the equivalent <see cref="T:System.Decimal"/>. 
            </summary>
            
            <param name="input">The TdNumber that is to be converted to a <c>System.Decimal</c> value.</param>
            
            <returns>A <c>System.Decimal</c> value that is equivalent to the TdNumber is returned. </returns>
            
            <exception cref="T:Teradata.Client.Provider.TdException">The TdNumber value is Null.</exception>
            <exception cref="T:System.OverflowException">The TdNumber could not be converted to a 
            System.Decimal.</exception>
            
            <remarks>
            <para>
            An instance of a TdNumber will be converted into a <c>System.Decimal</c> only when the number of 
            significant digits (digits to the left of the decimal point) of the <c>number</c> is less than 29.  
            If the <c>precision</c> of the number is greater than 29, the scale will be truncated so that the 
            number will fit within the System.Decimal.
            </para>
            
            <para>
            What is meant by <c>number</c> is the representation of the floating decimal without the exponent.  
            For example if an instance of TdNumber represents <c>2.938174e-4</c>, the <c>number</c> is 
            <c>0.00002938174</c>.
            </para>
            
            <para>
            <c>System.Decimal</c> stores numbers as a <c>scaled integer</c>.  It can support a number with a maximum
            precision of 29, maximum scale of 28, and a number in the range of minus or plus 
            79,228,162,514,264,337,593,543,950,335.  A <c>scaled integer</c> representation of a number is the 
            number without any decimal separator.  For example, the scale integer representation of 43567.90843 
            is 4356790843.  The range of valid numbers also applies to the numbers' scaled integer representation.
            </para>
            
            <para>
            Due to these characteristics of a System.Decimal, a TdNumber instance that is in the valid 
            range may not fit into a System.Decimal unless it is truncated.  These TdNumber instances will have 
            an <strong>actual</strong> precision of 29 and a scale greater than 0.  It's scaled integer 
            representation will also be outside the valid range of the scaled integer representation 
            of a <c>System.Decimal</c>.  
            </para>
            
            <para>
            The following example displays two numbers that are within the range of valid System.Decimal values.  
            However, their scale integer representation falls outside the range of the scaled integer range of 
            the maximum System.Decimal value.
            </para>
            <list type="table">
            <listheader>
            <term>Number</term>
            <description>Scaled Integer Representation</description>
            </listheader>
            <item>
            <term>7.9228162514264337593543950336</term>
            <description>79228162514264337593543950336</description>
            </item>
            <item>
            <term>8922816251.4264337593543950335</term>
            <description>89228162514264337593543950335</description>
            </item>
            </list>
            
            <para>In order to perform a conversion to <c>System.Decimal</c>, these numbers will be truncated one
            decimal place.  </para>
            
            <list type="table">
            <listheader>
            <term>Number To Be Converted</term>
            <description>Result of ToDecimal Conversion</description>
            </listheader>
            <item>
            <term>7.922816251426433759354395033<strong>6</strong></term>
            <description>7.922816251426433759354395033</description>
            </item>
            <item>
            <term>8922816251.426433759354395033<strong>5</strong></term>
            <description>8922816251.426433759354395033</description>
            </item>
            </list>
            </remarks>
            
            <example>
            The following are examples of converting a TdNumber to System.Decimal.
            <code>
            TdNumber number;
            System.Decimal decimalConversion;
            
            // number = 98038.32    
            number = new TdNumber(0x00959838, 0, 0, 0, 0, -2);
            decimalConversion = TdNumber.ToDecimal(number01);
            Console.WriteLine("TdNumber {0} converted to System.Decimal {1}", number, decimalConversion);
            
            // number = 463748376236258608968456.45890325899806   
            //     The System.Decimal will contain the value 463748376236258608968456.4589
            number01 = new TdNumber(0x9B24EA1E, 0x9E6968B4, 0x322E08AD, 0x22E37806, 0, -14);
            decimalConversion = TdNumber.ToDecimal(number);
            Console.WriteLine(TdNumber {0} converted to System.Decimal {1}", number, decimalConversion);
            
            // The following example will throw an overflow exception because the TdNumber cannot be 
            // adjusted to a Precision less than 29.
            // number = 46374837623625860896845645890325899.806   Precision = 38, Scale = 3
            number = new TdNumber(0x9B24EA1E, 0x9E6968B4, 0x322E08AD, 0x22E37806, 0, -3);
            decimalConversion = TdNumber.ToDecimal(number);
            </code>
            </example>
        </member>
        <member name="M:Teradata.Client.Provider.TdNumber.GetBytes">
            <summary>
            The binary representation of this TdNumber structure is returned as an array of bytes.
            </summary>
            <returns>The mantissa and exponent are returned as an array of bytes.</returns>
            <remarks>
            <para>Five unsigned 32 bit integers are used internally to store the mantissa 
            of a number, and a signed 16 bit integer is used to store the exponent.</para>
            
            <para>In the byte array, the data for the mantissa will begin at the 0 (zero) element, 
            and the exponent will begin at the 21 element of the array.  It will take 20 bytes to 
            represent the mantissa, and 2 bytes for the exponent.  The total number of elements in 
            the array will be 22.</para>
            
            <para>When the binary representation is generated, The decimal point will be removed, and
            the exponent will adjusted.  After this is done, the five unsigned 32 bit integers of the 
            mantissa and the signed 16 bit of the exponent are converted to a byte array.  The 
            <strong>least</strong> significant byte of the mantissa will appear in the <strong>first</strong> 
            element of the array.</para>
            </remarks>
            <exception cref="T:Teradata.Client.Provider.TdException">The value of the TdDecimal is Null.</exception>
            <example>
                The following example shows the output when GetBytes is called: 
                <code lang="CS">
                
            TdNumber original = TdNumber.Parse("9.8372646523235e+99");
             
            Byte[] result = original.GetBytes();
             
            //The decimal point in the mantissa is removed and the exponent is adjusted
            //       98372646523235e+86
            //
            //The hex representation of the mantissa is 0x59782AA6D163.  This is internally represented by the
            //five unsigned integers as {0x2AA6D163, 0x00005978, 0x00000000, 0x00000000, 0x00000000}
            //
            //The hex representation of the exponent is 0x56.
            //
            //result = {0x63, 0xD1, 0xA6, 0x2A, 0x78, 0x59, 0x00, 0x00, 0x00, 0x00, 
            //          0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
            //          0x56, 0x00}
            
            // This following example shows how a negative number will be represented.  Internally,
            // negative numbers are stored in Two's Complement representation.
            
            original = TdNumber.Parse("-4.32191e-50");
            
            result = original.GetBytes();
            
            // The decimal point in the mantissa is removed and the exponent is adjusted
            //      -432191e-55
            //
            // The two's complement hex representation of the mantissa is 0xFFF967C1.  This is
            // internally represented by the five unsigned integers as 
            //     {0xFFF967C1, 0xFFFFFFFF, 0xFFFFFFFF, 0xFFFFFFFF, 0xFFFFFFFF}
            
            // The Two's Complement hex represenation of the exponent is 0xFFC9.
            //
            // result = {0xC1, 0x67, 0xF9, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 
                         0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF,
                         0xC9, 0xFF}
                </code>
            </example>
        </member>
        <member name="M:Teradata.Client.Provider.TdNumber.GetBits">
             <summary>
             The binary representation of the value of this TdNumber structure is returned as 
             an array of signed integers. 
             </summary>
             <returns>An array that contains the number components and exponent is returned.  The decimal
             point is removed from the mantissa and the exponent is adjusted.  See <see cref="M:Teradata.Client.Provider.TdNumber.GetBytes"/>
             for more information.</returns>
             <remarks>
             The array that is returned will contain 6 elements:
             <list type="bullet">
             <item>
             <description>data[0] contains the low order bits.</description>
             </item>
             <item>
             <description>data[1 - 3] contains the middle order bits.</description>
             </item>
             <item>
             <description>data[4] contains the high order bits</description>
             </item>
             <item>
             <description>data[5] contains the exponent. </description>
             </item>
             </list>
            </remarks>
             <example>
             <code>
             TdNumber original = TdNumber.Parse("9.453983726465875422323e+99");
             
             Int32[] result = original.GetBits();
             
             //The decimal point in the matissa is removed and the exponent is adjusted
             //       9453983726465875422323e+78
             //
             //The hex representation of the mantissa is 0x20080614DDE423BAC73.
             //The hex representation of the exponent is 0x4e
             //
             //The array that will be returned that contains the internal representation will be
             //     (0x423BAC73, 0x80614DDE, 0x00000200, 0x00000000, 0x00000000, 0x0000004E}
             //
             </code>
             </example>
        </member>
        <member name="P:Teradata.Client.Provider.TdNumber.ObjectId">
            <summary>
            Gets the Instance Object Identifier.
            </summary>
        </member>
        <member name="P:Teradata.Client.Provider.TdNumber.NumberOfDigits">
            <summary>
            The number of digits after the exponent is applied to the number.  
            </summary>
        </member>
        <member name="P:Teradata.Client.Provider.TdNumber.MantissaScale">
            <summary>
            The scale of the mantissa.
            </summary>
            <returns>The scale can be from 0 to 39.</returns>
        </member>
        <member name="P:Teradata.Client.Provider.TdNumber.IsZero">
            <summary>
            Indicates whether this instance of TdNumber is zero.
            </summary>
        </member>
        <member name="P:Teradata.Client.Provider.TdNumber.Exponent">
            <summary>
            The exponent of the number.  The exponent represents the number
            after it has been normalized:  X.XXXX...eYYY
            </summary>
        </member>
        <member name="P:Teradata.Client.Provider.TdNumber.IsPositive">
            <summary>
            Indicates whether this TdNumber instance is greater than or equal to zero.
            </summary>
            <value>
            <c>true</c> if this instance is greater than or equal to zero; 
            <c>false</c> otherwise.
            </value>
            <remarks>
            <c>IsPositive</c> returns <c>false</c> if this instance is <strong>Null</strong>.
            </remarks> 
            <example>
            This example show how to check for positive and negative numbers.
            
            <code>
            TdNumber x = new TdNumber(-1);
            
            if (x.IsPositive == true)
            {   
                Console.WriteLine("x is a positive number.");
            }
            else
            {
                if (x.IsNull == false)
                {
                    Console.WriteLine("x is a negative number.");
                }
                else
                {
                    Console.WriteLine("x is Null");
                }
            }
            </code>
            </example>
        </member>
        <member name="P:Teradata.Client.Provider.TdNumber.IsNull">
            <summary>
            Indicates that this instance of TdNumber represents a null value.
            </summary>
            <value>
            <c>true</c> if this TdNumber is Null;  <c>false</c> otherwise.
            </value>
        </member>
        <member name="P:Teradata.Client.Provider.TdNumber.Value">
            <summary>
            Gets the <see cref="T:System.Double"/> representation of this TdNumber instance.
            </summary>
            <value>
            </value>
            <exception cref="T:Teradata.Client.Provider.TdException">
            The value of the TdNumber is null.
            </exception>
            <remarks>
            <para>
            This property returns the number as a .NET Framework Class Library (FCL) primitive data type.  
            In this case the closes mapping of a FCL type to a TdNumber is a <c>Double</c>.  
            </para>
            </remarks>
        </member>
        <member name="T:Teradata.Client.Provider.TdXml">
            <summary>
            TdXml represents a Xml data type.  It is used to retrieve Xml data from
            a Teradata Database.
            </summary>
            <remarks>
            <para>
            TdXml does not expose any public constructor.  It's primary purpose is to retreive 
            Xml data from a Teradata database.  
            </para>
            <para>
            In order to create an instance of TdXml, <see cref="M:Teradata.Client.Provider.TdDataReader.GetTdXml(System.Int32)"/> must be called
            when the data contained in a Xml column is to be retrieved.  Once a TdXml instance 
            has been created the <see cref="M:Teradata.Client.Provider.TdXml.CreateXmlReader"/> method is called to create a 
            <see cref="T:System.Xml.XmlReader"/>.  The XmlReader is used to access the Xml data that is
            returned from a Teradata Database.
            </para>
            <para>
            When a XmlReader is created, the provider will open a request on the existing connection.
            This request is separate and independent from the request that was opened to
            process the query.  A Teradata Database has a maximum number of open requests that it can support per
            a connection.  The limit is <strong>16</strong>.  
            </para>
            <para>
            It is important that <see cref="M:System.Xml.XmlReader.Close"/> is called after the XmlReader 
            has been used to process the Xml.  This will free up the request that was used to retrieve 
            the Xml from the Teradata Database.
            </para>
            <para>
            A TdXml instance can only be created when the Xml data is retrieved using <strong>deferred</strong>
            mode.  This allows the data to be <strong>streamed</strong> from the database to the provider, and
            allows an application to retrieve the data in chunks.  
            </para>
            <para>An application is <strong>unable</strong> to access the base stream of the 
            TdXml instance.  
            </para>
            <para>
            Xml data is returned using deferred mode when 
            <see cref="F:System.Data.CommandBehavior.SequentialAccess"/> has <strong>not</strong> been
            specified in the call to <see cref="M:Teradata.Client.Provider.TdCommand.ExecuteReader"/>.
            </para>
            </remarks>
            <example>
            <para>
            The following example shows how to retrieve the Xml contained in an Xml column.
            </para>
            <para>
            The Xml that is used in this example is
            </para>
            <para>
            <code>
            &lt;?xml version="1.0" encoding="utf-8"?&gt;
            &lt;customers&gt;
               &lt;customer&gt;
                 &lt;Name id="1234"&gt;John Hancock&lt;/Name&gt;
                  &lt;Address&gt;100 1st Street One City, CA 12345&lt;/Address&gt;
                  &lt;Phone1&gt;(999)9999-999&lt;/Phone1&gt;
                  &lt;Phone2&gt;(999)9999-998&lt;/Phone2&gt;
                  &lt;Fax&gt;(999)9999-997&lt;/Fax&gt;
                  &lt;Email&gt;John@somecompany.com&lt;/Email&gt;
                  &lt;order Number="NW-01-16366" Date="Feb/28/2001"&gt;
            	      &lt;Contact&gt;Mary&lt;/Contact&gt;
            	      &lt;Phone&gt;(987)6543-210&lt;/Phone&gt;
            	      &lt;ShipTo&gt;Some company
            	         2467 Pioneer Road Globecity, Globeland, 1000&lt;/ShipTo&gt;
            	      &lt;SubTotal&gt;2355&lt;/SubTotal&gt;
            	      &lt;Tax&gt;141.50&lt;/Tax&gt;
            	      &lt;Total&gt;2496.50&lt;/Total&gt;
            	      &lt;item ID="001"&gt;
            		      &lt;Quantity&gt;10&lt;/Quantity&gt;
            		      &lt;PartNumber&gt;F54709&lt;/PartNumber&gt;
            		      &lt;Description/&gt;
            		      &lt;UnitPrice&gt;29.50&lt;/UnitPrice&gt;
            		      &lt;Price&gt;295.00&lt;/Price&gt;
            	      &lt;/item&gt;
                  &lt;/order&gt;
               &lt;/customer&gt;
            &lt;/customers&gt;
            </code>
            </para>
            <code>
            public void TdXmlExample(TdConnection conn)
            {
                TdCommand cmd = conn.CreateCommand();
                cmd.CommandText = "select xmlColumn from xmlTable";
                
                // query will be executed in deferred mode.  This means 
                // that CommandBehavior.SequentialAccess will not be passed
                // in as a parameter
                
                using (TdDataReader dr = cmd.ExecuteReader())
                {
                    // initializing the data reader
                    dr.Read();
                
                    // creating an instance of TdXml
                    using (TdXml xmlData = dr.GetTdXml(0))
                    {
                        // after a TdXml instance is created, a XmlReader needs to be 
                        // created in order to access the Xml data retrieved from the 
                        // Teradata Database
                        
                        using (XmlReader xReader = xmlData.CreateXmlReader())
                        {
                            // now the xml data can be retrieved using the XmlReader.
                            // going to dump the xml document to the console using a XmlWriter
                            
                            using (XmlWriter xWriter = XmlWriter.Create(Console.Out))
                            {
                                while (xReader.Read())
                                {
                                    xWriter.WriteNode(xReader, false);
                                }
                            }
                        }
                     }
                }
            }
            </code>
            </example>
            
            <para>
            TdXml can be marshalled across application domains.  However, the <see cref="T:System.Xml.XmlReader"/> 
            <strong>cannot</strong> be marshalled.  
            The <strong>TdXml.CreateXmlReader</strong> method returns an XmlReader.  When this method is called
            from a TdXml instance that has been marshalled, a 
            <see cref="T:System.Runtime.Serialization.SerializationException"/> exception will be thrown.  
            </para>
            
            <para>
            The <see cref="P:Teradata.Client.Provider.TdXml.Value"/> property must be used when retrieving the Xml data using a TdXml instance 
            that has been marshalled to another application domain.  This property will return the Xml as a string.
            </para>
            
        </member>
        <member name="M:Teradata.Client.Provider.TdXml.Clone">
            <summary>
            Creates and initializes a new TdXml object.
            </summary>
            
            <returns>
            Returns a <c>TdXml</c> object capable of returning the same Xml field.
            </returns>
            
            <exception cref="T:System.InvalidOperationException">The <see cref="T:Teradata.Client.Provider.TdConnection"/> 
            is closed.</exception>
            <exception cref="T:System.ObjectDisposedException">The <c>TdXml</c> is closed / dispose.</exception>
            <exception cref="T:Teradata.Client.Provider.TdException">The Teradata Database returned an error, 
            or the .NET Data Provider for Teradata detected an error.</exception>
        </member>
        <member name="M:Teradata.Client.Provider.TdXml.Dispose">
            <summary>
            Closes the <c>TdXml</c> object and releases all associated resources.
            </summary>
            
            <exception cref="T:Teradata.Client.Provider.TdException">The Teradata Database returned an error, 
            or the .NET Data Provider for Teradata detected an error.</exception>
            
            <remarks>
            Closes the <c>TdXml</c> object and releases all associated Teradata Database and 
            client resources. It is identical to the <see cref="M:Teradata.Client.Provider.TdXml.Close"/> method.
            </remarks>
        </member>
        <member name="M:Teradata.Client.Provider.TdXml.CreateXmlReader">
            <summary>
            Creates an XmlReader that is used by an application to retrieve the Xml data from a Teradata
            Database.
            </summary>
            <remarks>
            <para>
            When a XmlReader is created by the provider, a request on the existing connection is 
            opened.  The Teradata Database only allows <strong>16</strong> open requests per a connection.  Therefore,
            there can only be up to 16 XmlReaders that are opened at the same time.  This limit also 
            applies when a combination of LOBs and XmlReaders are concurrently opened.
            </para>
            <para>
            Because the XmlReader uses provider resources to access the database, it is highly recommended 
            that <see cref="M:System.Xml.XmlReader.Close"/> be called before a XmlReader instance is disposed during 
            garbage collection.  This will guarantee that the request that was created will be closed
            and that other resources will be cleaned up.  
            </para>
            <para>
            The conformance level (<see cref="T:System.Xml.ConformanceLevel"/>) has been set to
            <strong>ConformanceLevel.Fragment</strong>.  The reason for this is that the
            Teradata Database Xml type supports both Xml documents and fragments.
            </para>
            </remarks>
            <returns>A XmlReader instance is returned.</returns>
        </member>
        <member name="M:Teradata.Client.Provider.TdXml.Close">
            <summary>
            Closes the <c>TdXml</c> object and releases all associated resources.
            </summary>
            
            <exception cref="T:Teradata.Client.Provider.TdException">The Teradata Database returned an error, 
            or the .NET Data Provider for Teradata detected an error.</exception>
            
            <remarks>
            Closes the <c>TdXml</c> object and releases all associated Teradata Database and 
            client resources. 
            </remarks>
        </member>
        <member name="P:Teradata.Client.Provider.TdXml.ObjectId">
            <summary>
            Gets the Instance Object Identifier.
            </summary>
        </member>
        <member name="P:Teradata.Client.Provider.TdXml.IsNull">
            <summary>
            Indicates whether <c>TdXml</c> is null.
            </summary>
            
            <value>
            <c>true</c> if <c>TdXml</c> is null; otherwise <c>false</c>.
            </value>
            
            <exception cref="T:System.ObjectDisposedException">The <c>TdXml</c> is closed / disposed.</exception>
            
        </member>
        <member name="P:Teradata.Client.Provider.TdXml.Value">
            <summary>
            Returns the Xml as a <see cref="T:System.String"/>.
            </summary>
            <value>
            A String that contains the Xml retrieved from the Teradata Database.
            </value>
            <remarks>
            <para>
            The Value property returns the Xml as a string.  When this property is accessed for the 
            first time, a request is opened on the connection, the 
            Xml data is retrieved from the Teradata Database, and is stored into a System.String.  
            </para>
            
            <para>
            There is a limit of <strong>16</strong> requests per a connection that an application can have concurrently
            opened.  If Value is accessed when 16 requests are open, a TdException will get thrown indicating
            that the maximum limit of streams are open.
            </para>
            
            <para>
            A request on a connection will be open when the following occurs:
            <list type="bullet">
                <item>XmlReader returned from the call to <see cref="M:Teradata.Client.Provider.TdXml.CreateXmlReader"/> and is open.</item>
                
                <item><see cref="M:Teradata.Client.Provider.TdDataReader.GetChars(System.Int32,System.Int64,System.Char[],System.Int32,System.Int32)"/> or <see cref="M:Teradata.Client.Provider.TdDataReader.GetString(System.Int32)"/> is called
                to retrieve Xml data when the query has been executed using <strong>Deferred</strong>
                mode.</item>
            </list>
            </para>
            </remarks>
        </member>
        <member name="P:Teradata.Client.Provider.TdXml.IsClosed">
            <summary>
            Indicates that the TdXml is closed.
            </summary>
            <value><c>true</c> indicates that this instance of TdXml is closed, <c>false</c> otherwise.</value>
        </member>
        <member name="P:Teradata.Client.Provider.TdXml.Position">
            <summary>
            Gets the character position within the TdXml object.
            </summary>
            
            <value>
            Returns the character position within the TdXml object.
            </value>
            
            <exception cref="T:System.ObjectDisposedException">The TdXml is closed / disposed.</exception>
            
        </member>
        <member name="T:Teradata.Client.Provider.TdClientSectionGroup">
            <summary>
            This is the Configuration Section Group that defines the entries associated with the Teradata Provider.
            </summary>
            <remarks>
            The configuration is defined as 
            
            <code>
            &lt;configuration&gt;
                &lt;configSections&gt;
                    &lt;sectionGroup name=&quot;teradata.client&quot; type=&quot;Teradata.Client.Provider.TeradataClientGroup,Teradata.Client.Provider&quot;&gt;
                        &lt;section name=&quot;entity&quot; type=&quot;Teradata.Client.Provider.TeraEntitySection,Teradata.Client.Provider&quot;/&gt;
                    &lt;/sectionGroup&gt;
            &lt;/configSections%gt;
            </code>
            
            The sectionGroup must have the name "teradata.client"
            </remarks>
        </member>
        <member name="M:Teradata.Client.Provider.TdClientSectionGroup.#ctor">
            <summary>
            Client Section Group Constructor
            </summary>
        </member>
        <member name="P:Teradata.Client.Provider.TdClientSectionGroup.Entity">
            <summary>
            This identifies the child entity section.
            </summary>
        </member>
        <member name="P:Teradata.Client.Provider.TdClientSectionGroup.Provider">
            <summary>
            This identifies the child provider section group.
            </summary>
        </member>
        <member name="T:Teradata.Client.Provider.TdClientEntitySection">
            <summary>
            This is the entity configuration section of the application configuration entries for Teradata.  
            </summary>
            <remarks>
            The name of the tag associated with this section is "entity".  There are no attributes associated with this tag. 
            </remarks>
        </member>
        <member name="M:Teradata.Client.Provider.TdClientEntitySection.#ctor">
            <summary>
            
            </summary>
        </member>
        <member name="P:Teradata.Client.Provider.TdClientEntitySection.StoreSchemas">
            <summary>
            
            </summary>
        </member>
        <member name="P:Teradata.Client.Provider.TdClientEntitySection.Properties">
            <summary>
            
            </summary>
        </member>
        <member name="T:Teradata.Client.Provider.TdClientProviderSection">
            <summary>
                This is the provider configuration section of the application configuration entries for 
                Teradata.
            </summary>
            <remarks>
                The name of the tag associated with this section is "provider".  There are no attributes 
                associated with this tag. 
            </remarks>
        </member>
        <member name="M:Teradata.Client.Provider.TdClientProviderSection.#ctor">
            <summary>
            Constructor
            </summary>
        </member>
        <member name="P:Teradata.Client.Provider.TdClientProviderSection.Profiles">
            <summary>
             A collection of profiles
            </summary>
        </member>
        <member name="P:Teradata.Client.Provider.TdClientProviderSection.Properties">
            <summary>
            A collection of profile properties
            </summary>
        </member>
        <member name="T:Teradata.Client.Provider.TdDate">
             <summary>
             TdDate is a .Net Data Provider for Teradata specific type that represents a date 
             which is based on the Gregorian Calendar.
             </summary>
             <remarks>
             <para>The .Net Framework does not have a system type that directly corresponds to the 
             Teradata type <strong>Date</strong>.  Version 1.2 and earlier of the provider map Date 
             to System.DateTime.  With the release of version 12.0 of the provider, TdDate is available 
             to retrieve and manipulate data of type Date.</para>
             
             <para>The date can range from January 01, 0001 to December 31, 9999.</para>
             
             <para>An application can use the TdDate structure the same way that a System.DateTime 
             is used.  TdDate can be used with any version of Teradata supported by the .Net Data 
             Provider for Teradata.</para>
             
             <para>A TdDate can also be specified as an In, Out, or InOut parameter to a Stored 
             Procedure.  In order to maintain backward compatibility with previous versions of the 
             provider --versions earlier than 12.0--, the Connection String Attribute 
             <a href="TdDateAndTimeConnectionString.htm"><strong>Enable TdDateTime</strong></a> must be set
             to <c>false</c>.  When this is done, a TdDate is returned to an application 
             using the <see cref="P:Teradata.Client.Provider.TdParameter.ProviderSpecificValue"/> property.  The object that is returned 
             from the <see cref="P:Teradata.Client.Provider.TdParameter.Value"/> property remains a System.DateTime. </para>
             
             <para>If the attribute <strong>Enable TdDateTime</strong> is set to <c>true</c> a TdDate 
             <strong>is</strong> returned to the application through the TdParameter.Value.</para>
             
             </remarks>
             <example>
             The following example shows how to retrieve a Date, modify the date, and then update the table.
             <code>
             Public void DateExample(TdCommand cmd, String classId)
             {
                cmd.Parameter.Clear();
             
                cmd.CommandText = "SELECT StartDate, EndDate " +
                                "FROM ClassEnrollment " +
                                "WHERE ClassId = ?";
             
                cmd.CommandType = CommandType.Text;
             
                // creating the parameter
                cmd.Parameters.Add(null, TdType.Varchar, 9,
                   System.Data.ParameterDirection.Input, true, 0, 0, null,    
                   System.Data.DataRowVersion.Default, classId);
             
                TdDataReader dr = null;
              
                Int32 i = 0;
             
                Try
                {
                   dr = cmd.ExecuteReader();
             
                   If (false == dr.Read())
                   {
             	       return;
                   }
                
                   TdDate [] startDate = new TdDate[dr.RecordsReturned];
                   TdDate [] endDate = new TdDate[dr.RecordsReturned];
             
                   // An additional 5 days will be added to the start and end dates.
                   // The updates will be done the hard way.  All the records will
                   // be read, 5 days will be added to the dates, and then each
                   // record will be updated.
             
                   // Specifying a TimeSpan of 5 days
                   System.TimeSpan fiveExtraDays = new TimeSpan(5, 0, 0, 0);
                
                   while (false == dr.Read())
                   {
                      // Retrieving the dates
                     startDate[i] = dr.GetTdDate(0);
                     endDate[i] = dr.GetTdDate(1);
             
                
                      // Going to add 5 days to the StartDate
                      startDate[i] = startDate[i] + fiveExtraDays
             
                      // Going to add 5 days to the EndDate
                      endDate[i] = endDate[i] + fiveExtraDays;
             
                      i++;
                   } 
                }
                finally
                {
                   if (dr != null)
                   {
                       dr.Close();
                   }
                }
            
                cmd.Parameters.Clear();
             
                cmd.CommandText = "UPDATE classEnrollment " +
                                  "SET StartDate = ?, EndDate = ? " +
                                  "WHERE ClassId = ?";
             
                cmd.Parameters.Add(null, TdType.Date, 0,
                      System.Data.ParameterDirection.Input, true, 0, 0, null,    
                      System.Data.DataRowVersion.Default, null);
             
                cmd.Parameters.Add(null, TdType.Date, 0,
                      System.Data.ParameterDirection.Input, true, 0, 0, null,    
                      System.Data.DataRowVersion.Default, null);
             
                cmd.Parameters.Add(null, TdType.Varchar, 9,
                      System.Data.ParameterDirection.Input, true, 0, 0, null,    
                      System.Data.DataRowVersion.Default, classId);
             
                i--;
                while(i &gt;= 0)
                {
                   cmd.Parameters[0].Value = startDate[i];
                   cmd.Parameters[1].Value = endDate[i];
             
                   cmd.ExecuteNonQuery();
                   i--;
                }
             }
             
             </code>
             </example>
             
             <seealso cref="!:TdDateAndTimeConnectionString.html">Date And Time Connection String Attribute</seealso>
             <seealso cref="!:EnableProviderSpecificTypes.html">Enabling Provider Specific Types</seealso>
             <seealso cref="!:DateAndTimeTypeOverview.html">Provider Specific Type:  Date And Time Overview</seealso>
        </member>
        <member name="F:Teradata.Client.Provider.TdDate.MaxValue">
            <summary>
            The largest possible value of TdDate.  This field is read-only.
            </summary>
            <remarks>
            The largest possible value of TdDate is equivalent to <strong>9999-12-31</strong>.
            </remarks>
        </member>
        <member name="F:Teradata.Client.Provider.TdDate.MinValue">
            <summary>
            The smallest possible value of TdDate.  This field is read-only.
            </summary>
            <remarks>
            The smallest possible value of TdDate is equivalent to <strong>0001-01-01</strong>.
            </remarks>
        </member>
        <member name="F:Teradata.Client.Provider.TdDate.Null">
            <summary>
            Gets a Null TdDate instance.
            </summary>
            <value>
            Returns a TdDate instance that represents a <strong>Null</strong> value.
            </value>
            <remarks>
            Conceptually it is the constructor for <strong>Null</strong> TdDate instances.
            </remarks>
            <example>
            This example shows how to send a <strong>Null</strong> value to a Teradata database.
            <code>
            TdParameter col1 = new TdParameter();
            col1.TdType = TdType.Date;
            col1.Value = TdDate.Null;
            </code>
            </example>
        </member>
        <member name="M:Teradata.Client.Provider.TdDate.#ctor(System.Int32)">
            <summary>
            A Date represented as an integer is converted into a TdDate.
            </summary>
            
            <param name="value">The integer representation of the date.</param>
            
            <exception cref="T:System.ArgumentOutOfRangeException">
               The <paramref name="value"/> cannot be represented as a TdDate.
            </exception>
            
            <remarks>
            <para>It is not recommended that this constructor be used to create a TdDate.</para>
            
            <para>The integer that can be converted to a date is the same as described in the 
            Teradata SQL Reference:  Data Types and Literals.</para>
            
            <para>The date components contained in an integer will be determined by the same formula as 
            used by the Teradata database: </para>
            <para>(year – 1900) * 10000 + (month * 100) + day </para>
            <para>Therefore, the date components that are in the 1900’s will appear in the integer as </para>
            <para>   YYMMDD</para>
            <para>Here are some examples of conversions from Int32 to TdDate:</para>
            <list type="table">
            <listheader>
            <term>Integer Representation</term>
            <description>TdDate Representation</description>
            </listheader>
            <item>
            <term>990415</term>
            <description>1999-04-15</description>
            </item>
            <item>
            <term>071121</term>
            <description>1907-11-21</description>
            </item>
            <item>
            <term>2001225</term>
            <description>2100-12-25</description>
            </item>
            <item>
            <term>20070531</term>
            <description>3907-05-31</description>
            </item>
            <item>
            <term>-989495</term>
            <description>1801-05-05</description>
            </item>
            </list>
            </remarks>
        </member>
        <member name="M:Teradata.Client.Provider.TdDate.#ctor(System.Int32,System.Int32,System.Int32)">
            <summary>
            A TdDate is created from the date components specified as integers.
            </summary>
            
            <param name="year">The year of the date that is to be represented as a TdDate.</param>
            <param name="month">The month of the date that is to be represented as a TdDate.</param>
            <param name="day">The day of the date that is to be represented as a TdDate.</param>
            
            <exception cref="T:System.ArgumentOutOfRangeException">A TdDate cannot be created from the components specified.</exception>
            
            <remarks>
            <para>The valid values for each component are:</para>
            <list type="table">
            <listheader>
            <term>Date Component</term>
            <description>Valid Range</description>
            </listheader>
            <item>
            <term>year</term>
            <description>0001 to 9999</description>
            </item>
            <item>
            <term>month</term>
            <description>1 to 12</description>
            </item>
            <item>
            <term>day</term>
            <description>1 to 31</description>
            </item>
            </list>
            </remarks>
        </member>
        <member name="M:Teradata.Client.Provider.TdDate.#ctor(System.DateTime)">
            <summary>
            A TdDate is created from the System.DateTime structure.
            </summary>
            <param name="value">The DateTime structure that contains the specified date.</param>
            <remarks>
            <para>The time components of the DateTime structure will be ignored.</para>
            
            <para>The calendar of the DateTime structure that is passed in as a parameter must be
            based on the <strong>Gregorian calendar</strong>.</para>
            </remarks>
        </member>
        <member name="M:Teradata.Client.Provider.TdDate.op_Explicit(System.DateTime)~Teradata.Client.Provider.TdDate">
            <summary>
            Enables a DateTime system type to be converted explicitly into a TdDate.
            </summary>
            
            <param name="value">The DateTime type that is to be converted into a TdDate.</param>
            
            <returns>A TdDate is returned that is equivalent to the DateTime is returned.</returns>
            
            <remarks>
            When the System.DateTime is converted into a TdDate, the time component of the
            DateTime structure will be ignored.
            </remarks>
        </member>
        <member name="M:Teradata.Client.Provider.TdDate.op_Explicit(Teradata.Client.Provider.TdDate)~System.DateTime">
            <summary>
            Enables a TdDate to be converted into a DateTime.
            </summary>
            
            <param name="value">The TdDate that will be converted into a DateTime type.</param>
            
            <returns>A DateTime is returned that is equivalent to the TdDate.</returns>
            
            <remarks>
            <para>When the TdDate is converted into a System.DateTime, the time component
            of the DateTime structure will be set to "00:00:00.0000000".</para>
            </remarks>
            <exception cref="T:System.ArgumentNullException">The TdDate value is <see cref="F:Teradata.Client.Provider.TdDate.Null"/>.</exception>
        </member>
        <member name="M:Teradata.Client.Provider.TdDate.op_Explicit(Teradata.Client.Provider.TdTimestampWithTimeZone)~Teradata.Client.Provider.TdDate">
            <summary>
            Enables a TdTimestampWithTimeZone to be converted into a TdDate
            </summary>
            
            <param name="value">The TdTimestampWithTimeZone to be converted into a TdDate</param>
            
            <returns>A TdDate representation of the TdTimestampWithTimeZone.</returns>
            
            <remarks>
            <para>The date component of the TdTimestampWithTimeZone is returned as a TdDate.
            The date is not adjusted to UTC.  Therefore, if the timestamp is
            "2007-11-30 23:24:00-08:00", the TdDate that is returned is 
            "2007-11-30".</para>
            
            <para>If the TdTimestampWithTimeZone <paramref name="value"/> is <see cref="F:Teradata.Client.Provider.TdTimestampWithTimeZone.Null"/> a 
            <see cref="F:Teradata.Client.Provider.TdDate.Null"/> is returned.</para>
            </remarks>
        </member>
        <member name="M:Teradata.Client.Provider.TdDate.op_Explicit(Teradata.Client.Provider.TdTimestamp)~Teradata.Client.Provider.TdDate">
            <summary>
            Enables a TdTimestamp to be converted into a TdDate.
            </summary>
            
            <param name="value">The TdTimestamp that is to be converted to a TdDate.</param>
            
            <returns>A TdDate is returned.</returns>
            
            <remarks>
            <para>When the TdTimestamp is converted into a TdDate, the time component of the
            timestamp is truncated. </para>
            
            <para>If the TdTimestamp <paramref name="value"/> is <see cref="F:Teradata.Client.Provider.TdTimestamp.Null"/>, a <see cref="F:Teradata.Client.Provider.TdDate.Null"/> 
            is returned.</para>
            </remarks>
        </member>
        <member name="M:Teradata.Client.Provider.TdDate.op_Explicit(Teradata.Client.Provider.TdDate)~Teradata.Client.Provider.TdPeriodDate">
            <summary>
            Converts a TdDate into a TdPeriodDate.
            </summary>
            
            <param name="value">The TdDate that is to be converted.</param>
            
            <returns>a TdPeriodDate is returned that has a beginning bound of 
            <paramref name="value"/> and ending bound that is one time granule
            greater than value.</returns>
            
            <exception cref="T:System.OverflowException">
               The ending bound could not be created because the <paramref name="value"/> 
               is set to <see cref="F:Teradata.Client.Provider.TdDate.MaxValue"/>
            </exception>
            
            <remarks>
            A TdDate can be cast to a TdPeriodDate.  The beginning bounds of the 
            period will be <paramref name="value"/>, and the ending bound will be
            the value plus one time granule (one day).
            </remarks>
        </member>
        <member name="M:Teradata.Client.Provider.TdDate.GetHashCode">
            <summary>
            Returns the hash code for this instance. 
            </summary>
            <returns>The hash code is returned</returns>
        </member>
        <member name="M:Teradata.Client.Provider.TdDate.Equals(System.Object)">
             <summary>
                 Compares this instance against <paramref name="obj"/> to determine whether they are equal.
             </summary>
             
             <returns><c>true</c> is returned if the two TdDate are equal, <c>false</c> otherwise.</returns>
             
             <remarks>
                 <para>The boolean that is returned indicates the following conditions:</para>
            
             	<para><c>false</c> will be returned if:</para>
             	<list type="bullet">
             		<item>
                         This instance or <paramref name="obj"/> is <see cref="F:Teradata.Client.Provider.TdDate.Null"/>.
                     </item>
             		<item>
                         This instance is not equal to <paramref name="obj"/>.
                     </item>
             		<item>
             			<paramref name="obj"/> is not of type TdDate or <c>null</c>.
                     </item>
             	</list>
             	<para><c>true</c> will be returned if:</para>
             	<list type="bullet">
             		<item>
                         This instance and <paramref name="obj"/> are <Strong>Null</Strong>.
                     </item>
             		<item>
                         This instance is equal to <paramref name="obj"/>.
                     </item>
             	</list>
             </remarks>
             
             <example>
                 The following code example uses various comparison methods and operators: 
                 <code lang="CS">
             TdDate  later = new TdDate(2010, 8, 31);
             Object earlier = new TdDate(2007, 9, 10);
              
             // The following comparison is equivalent to using
             //    false == TdDate.Equals(later, (TdDate) earlier)
             //    later != (TdDate) earlier
             //    true == TdDate.NotEquals(later, (TdDate) earlier)
             //    
             if (false == later.Equals(earlier))
             {
                Console.WriteLine(“later does not equal earlier”);
             }
                 </code>
             </example>
             <overloads>Returns a Boolean indicating whether two instances of TdDate are equal.</overloads>
             <param name="obj">A TdDate that will be compared to this instance of TdDate.</param>
        </member>
        <member name="M:Teradata.Client.Provider.TdDate.Equals(Teradata.Client.Provider.TdDate)">
             <summary>
             Compares this instance and another TdDate to determine whether they are equal. 
             </summary>
             
             <returns><c>true</c> if the two TdDate are equal, <c>false</c> otherwise.</returns>
             
             <remarks>
                 <para>The boolean that is returned indicates the following conditions:</para>
            
             	<para><c>false</c> will be returned if:</para>
             	<list type="bullet">
             		<item>
                         This instance or <paramref name="other"/> is <see cref="F:Teradata.Client.Provider.TdDate.Null"/>.
                     </item>
             		<item>
                         This instance is not equal to <paramref name="other"/>.
                     </item>
             	</list>
             	<para><c>true</c> will be returned if:</para>
             	<list type="bullet">
             		<item>
                         This instance and <paramref name="other"/> are <Strong>Null</Strong>.
                     </item>
             		<item>
                         This instance is equal to <paramref name="other"/>.
                     </item>
             	</list>
             </remarks>
             
             <param name="other">A TdDate that will be compared to this instance of TdDate.</param>
        </member>
        <member name="M:Teradata.Client.Provider.TdDate.Add(System.TimeSpan)">
            <summary>
            The specified TimeSpan will be added to this instance of TdDate.
            </summary>
            
            <param name="timeSpan">The TimeSpan that will be added.</param>
            
            <returns>A TdDate is returned that is the result of the TimeSpan added to this 
            instance of TdDate.</returns>
            
            <exception cref="T:System.OverflowException">Unable to add the specified TimeSpan to this instance of TdDate.</exception>
            
            <remarks>
            <para>If this instance of TdDate is <strong>Null</strong> a <see cref="F:Teradata.Client.Provider.TdDate.Null"/> will be returned.</para>
            
            <para>The only component of the TimeSpan object that will be considered is the
            day component.  When this operation is performed, the day component of the
            TimeSpan is added to the this instance of TdDate.  For example, if the date 
            is "2007-10-04" and TimeSpan is "0.02:00:00.00" (0 days,
            2 hours) the add operation will result in "2007-10-04".</para>
            
            <para>The number of days will be calculated from the components that were
            specified when TimeSpan was initialized.  Therefore, if a TimeSpan were 
            initialized as <strong>new TimeSpan(47, 60, 20)</strong> (47 hours, 60 minutes, 
            20 seconds), the number of days that will be added to TdDate will be 2.</para>
            </remarks>
        </member>
        <member name="M:Teradata.Client.Provider.TdDate.Add(Teradata.Client.Provider.TdIntervalYearToMonth)">
            <summary>
               Adds the specified <see cref="T:Teradata.Client.Provider.TdIntervalYearToMonth"/> to this instance of 
               <see cref="T:Teradata.Client.Provider.TdDate"/>.
            </summary>
            <returns>
               A <strong>TdDate</strong> is returned that is the result of adding the <strong>TdIntervalYearToMonth</strong> 
               to this instance of <strong>TdDate</strong>.
            </returns>
            <exception cref="T:System.OverflowException">Unable to add the interval to this instance of <strong>TdDate</strong>.</exception>
            <remarks>
            <para>
               If the <paramref name="interval"/> or this instance is <strong>Null</strong> 
               a <see cref="F:Teradata.Client.Provider.TdDate.Null"/> will be returned.
            </para>
            <para>
               The <paramref name="interval"/> interval will be added to 
               <strong>TdDate</strong>. For example, if the date is "2007-10-04" and 
               the interval is "10-03" (10 years, 3 months) the operation will result in 
               "2018-01-04".
            </para>
            </remarks>
            <param name="interval">
               A <strong>TdIntervalYearToMonth</strong> that will be added to this instance 
              of <strong>TdDate</strong>.
            </param>
        </member>
        <member name="M:Teradata.Client.Provider.TdDate.Add(Teradata.Client.Provider.TdIntervalDayToSecond)">
            <summary>
               Adds the specified <see cref="T:Teradata.Client.Provider.TdIntervalDayToSecond"/> to this instance of 
               <see cref="T:Teradata.Client.Provider.TdDate"/>.
            </summary>
            <returns>
               A <strong>TdDate</strong> is returned that is the result of adding the  
               <strong>TdIntervalDayToSecond</strong> to this instance of <strong>TdDate</strong>.
            </returns>
            <exception cref="T:System.OverflowException">Unable to add the interval to this instance of <strong>TdDate</strong>.</exception>
            <remarks>
            <para>
               If the <paramref name="interval"/> or this instance is <strong>Null</strong> 
               a <see cref="F:Teradata.Client.Provider.TdDate.Null"/> will be returned.
            </para>
            <para>
               The only component of the <strong>TdIntervalDayToSecond</strong> that will be
               considered is the day component.  When this operation is performed, the  
               <see cref="P:Teradata.Client.Provider.TdIntervalDayToSecond.Days"/> component of the 
               <strong>TdIntervalDayToSecond</strong> is added to the this instance of 
               <strong>TdDate</strong>.  For example, if the date is "2007-10-04" and 
               the interval is "5 03:20:30" (5 days, 3 hours, 20 minutes and 30 seconds)
               the operation will result in "2007-10-09".
            </para>
            </remarks>
            <param name="interval">
               A <strong>TdIntervalDayToSecond</strong> that will be added to this instance 
              of <strong>TdDate</strong>.
            </param>
        </member>
        <member name="M:Teradata.Client.Provider.TdDate.Subtract(System.TimeSpan)">
            <summary>
            The specified TimeSpan will be subtracted from this instance of TdDate.
            </summary>
            
            <param name="timeSpan">The TimeSpan that will be subtracted.</param>
            
            <returns>A TdDate is returned that is the result of the TimeSpan subtracted from
            this instance of TdDate.</returns>
            
            <exception cref="T:System.OverflowException">Unable to subtract the specified TimeSpan from this instance of TdDate.</exception>
            
            <remarks>
            <para>If this instance of TdDate is <strong>Null</strong> a <see cref="F:Teradata.Client.Provider.TdDate.Null"/> will be returned.</para>
            
            <para>The only component of the TimeSpan object that will be considered is the
            day component.  When this operation is performed, the day component of the
            TimeSpan is subtracted from the this instance of TdDate.  For example, if the date 
            is "2007-10-04" and TimeSpan is "0.02:00:00.00" (0 days, 2 hours)
            the subtract operation will result in "2007-10-04".</para>
            
            <para>The number of days will be calculated from the components that were
            specified when TimeSpan was initialized.  Therefore, if a TimeSpan was 
            initialized as <strong>new TimeSpan(47, 60, 20)</strong> (47 hours, 60 minutes, 
            20 seconds), the number of days that will be subtracted from TdDate will be 2.</para>
            </remarks>
        </member>
        <member name="M:Teradata.Client.Provider.TdDate.Subtract(Teradata.Client.Provider.TdIntervalYearToMonth)">
            <summary>
               Subtracts the specified <see cref="T:Teradata.Client.Provider.TdIntervalYearToMonth"/> from this instance 
               of <see cref="T:Teradata.Client.Provider.TdDate"/>.
            </summary>
            <returns>
               A <strong>TdDate</strong> is returned that is the result of subtracting the 
               <strong>TdIntervalYearToMonth</strong> from this instance of <strong>TdDate</strong>.
            </returns>
            <exception cref="T:System.OverflowException">
               Unable to subtract the <strong>TdIntervalYearToMonth</strong> from this instance of <strong>TdDate</strong>.
            </exception>
            <remarks>
            <para>
               If the <paramref name="interval"/> or this instance is <strong>Null</strong> 
               a <see cref="F:Teradata.Client.Provider.TdDate.Null"/> will be returned.
            </para>
            <para>
               The <paramref name="interval"/> interval will be subtracted from <strong>TdDate</strong>. 
               For example, if the date is "2007-10-04" and the interval is 
               "10-03" (10 years, 3 months) the operation will result in  "1997-07-04".
            </para>
            </remarks>
            <param name="interval">
               A <strong>TdIntervalYearToMonth</strong> that will be subtracted from this instance 
               of <strong>TdDate</strong>.
            </param>
        </member>
        <member name="M:Teradata.Client.Provider.TdDate.Subtract(Teradata.Client.Provider.TdIntervalDayToSecond)">
            <summary>
               Subtracts the specified <see cref="T:Teradata.Client.Provider.TdIntervalDayToSecond"/> from this instance of 
               <see cref="T:Teradata.Client.Provider.TdDate"/>.
            </summary>
            <returns>
               A <strong>TdDate</strong> is returned that is the result of subtracting the  
               <strong>TdIntervalDayToSecond</strong> from this instance of <strong>TdDate</strong>.
            </returns>
            <exception cref="T:System.OverflowException">
               Unable to subtract the interval from this instance of <strong>TdDate</strong>.
            </exception>
            <remarks>
            <para>
               If the <paramref name="interval"/> or this instance is <strong>Null</strong> 
               a <see cref="F:Teradata.Client.Provider.TdDate.Null"/> will be returned.
            </para>
            <para>
               The only component of the <strong>TdIntervalDayToSecond</strong> that will be
               considered is the day component.  When this operation is performed, the  
               <see cref="P:Teradata.Client.Provider.TdIntervalDayToSecond.Days"/> component of the 
               <strong>TdIntervalDayToSecond</strong> is subtracted from this instance of 
               <strong>TdDate</strong>.  For example, if the date is "2007-10-09" and 
               the interval is "5 03:20:30" (5 days, 3 hours, 20 minutes and 30 seconds)
               the operation will result in "2007-10-04".
            </para>
            </remarks>
            <param name="interval">
               A <strong>TdIntervalDayToSecond</strong> that will be subtracted from this instance 
              of <strong>TdDate</strong>.
            </param>
        </member>
        <member name="M:Teradata.Client.Provider.TdDate.AddYears(System.Int32)">
            <summary>
            Adds the specified number of years to the this instance of TdDate.
            </summary>
            
            <param name="years">The number of years to add to the date.</param>
            
            <returns>A TdDate structure is returned.</returns>
            
            <exception cref="T:System.OverflowException">Unable to add the specified number of years to this instance of TdDate.</exception>
            
            <remarks>
            <para>If this instance of TdDate is <strong>Null</strong> a <see cref="F:Teradata.Client.Provider.TdDate.Null"/> will be returned.</para>
            </remarks>
        </member>
        <member name="M:Teradata.Client.Provider.TdDate.AddMonths(System.Int32)">
            <summary>
            Add the specified number of months to the this instance of TdDate.
            </summary>
            
            <param name="months">The number of months to add to the date.</param>
            
            <returns>A TdDate structure is returned.</returns>
            
            <exception cref="T:System.OverflowException">Unable to add the specified number of months to this instance of TdDate.</exception>
            
            <remarks>
            <para>If this instance of TdDate is <strong>Null</strong> a <see cref="F:Teradata.Client.Provider.TdDate.Null"/> will be returned.</para>
            </remarks>
        </member>
        <member name="M:Teradata.Client.Provider.TdDate.op_Addition(Teradata.Client.Provider.TdDate,System.Int32)">
             <summary>
             Adds the specified number of days to a TdDate.
             </summary>
            
             <param name="date">A TdDate.</param>
             <param name="days">The number of days that will be added to the TdDate.</param>
             
             <exception cref="T:System.OverflowException">Unable to add the days to the TdDate.</exception>
            
             <returns>A TdDate is returned that is the result of adding the specified 
             number of days to a TdDate.</returns>
             
             <exception cref="T:System.OverflowException">Unable to add the number of days to the TdDate.</exception>
             
             <remarks>
             <para>If the date parameter is <strong>Null</strong> a <see cref="F:Teradata.Client.Provider.TdDate.Null"/> will be returned.</para>
             </remarks>
             <exception cref="T:System.ArgumentOutOfRangeException">The result could not be represented as a TdDate.</exception>
        </member>
        <member name="M:Teradata.Client.Provider.TdDate.op_Addition(Teradata.Client.Provider.TdDate,System.TimeSpan)">
            <summary>
            Adds the specified TimeSpan to a TdDate.
            </summary>
            
            <param name="date">A TdDate.</param>
            <param name="timeSpan">A TimeSpan that will be added to TdDate.</param>
            
            <returns>A TdDate is returned that is the result of adding the Timespan
            to TdDate.</returns>
            
            <exception cref="T:System.OverflowException">Unable to add the TimeSpan to the TdDate.</exception>
            
            <remarks>
            <para>If the date parameter is <strong>Null</strong> a <see cref="F:Teradata.Client.Provider.TdDate.Null"/> will be returned.</para>
            
            <para>The only component of the TimeSpan object that will be considered is the
            day component.  When this operation is performed, the day component of the
            TimeSpan is added to the this instance of TdDate.  For example, if the date 
            is "2007-10-04" and TimeSpan is "0.02:00:00.00" (0 days, 2 hours)
            the add operation will result in "2007-10-04".</para>
            
            <para>The number of days will be calculated from the components that were
            specified when TimeSpan was initialized.  Therefore, if a TimeSpan were 
            initialized as <strong>new TimeSpan(47, 60, 20)</strong> (47 hours, 60 minutes, 
            20 seconds), the number of days that will be added to TdDate will be 2.</para>
            </remarks>
        </member>
        <member name="M:Teradata.Client.Provider.TdDate.op_Addition(Teradata.Client.Provider.TdDate,Teradata.Client.Provider.TdIntervalYearToMonth)">
            <summary>
               Adds the specified <see cref="T:Teradata.Client.Provider.TdIntervalYearToMonth"/> to a <see cref="T:Teradata.Client.Provider.TdDate"/>.
            </summary>
            <returns>
               A <strong>TdDate</strong> is returned that is the result of adding the 
               <strong>TdIntervalYearToMonth</strong> to a <strong>TdDate</strong>.
            </returns>
            <exception cref="T:System.OverflowException">
               Unable to add <strong>TdIntervalYearToMonth</strong> to the <strong>TdDate</strong>.
            </exception>
            <remarks>
            <para>
               If either parameter is <strong>Null</strong> a <see cref="F:Teradata.Client.Provider.TdDate.Null"/> will be returned.
            </para>
            <para>
               The <paramref name="interval"/> interval will be added to the <strong>TdDate</strong>.
               For example, if the date is "2007-10-04" and the interval is "10-03"
               (10 years, 3 months) the operation will result in "2018-01-04".
            </para>
            </remarks>
            <param name="date">A <strong>TdDate</strong>.</param>
            <param name="interval">
               A <strong>TdIntervalYearToMonth</strong> that will be added to <strong>TdDate</strong>.
            </param>
        </member>
        <member name="M:Teradata.Client.Provider.TdDate.op_Addition(Teradata.Client.Provider.TdIntervalYearToMonth,Teradata.Client.Provider.TdDate)">
            <summary>
               Adds the specified <see cref="T:Teradata.Client.Provider.TdIntervalYearToMonth"/> to a <see cref="T:Teradata.Client.Provider.TdDate"/>.
            </summary>
            <returns>
               A <strong>TdDate</strong> is returned that is the result of adding the 
               <strong>TdIntervalYearToMonth</strong> to a <strong>TdDate</strong>.
            </returns>
            <exception cref="T:System.OverflowException">
               Unable to add the <strong>TdIntervalYearToMonth</strong> to the <strong>TdDate</strong>.
            </exception>
            <remarks>
            <para>
               If either parameter is <strong>Null</strong> a <see cref="F:Teradata.Client.Provider.TdDate.Null"/> will be returned.
            </para>
            <para>
               The <paramref name="interval"/> interval will be added to the <strong>TdDate</strong>.
               For example, if the date is "2007-10-04" and the interval is "10-03" 
               (10 years, 3 months) the operation will result in "2018-01-04".
            </para>
            </remarks>
            <param name="interval">
               A <strong>TdIntervalYearToMonth</strong> that will be added to <strong>TdDate</strong>.
            </param>
            <param name="date">A <strong>TdDate</strong>.</param>
        </member>
        <member name="M:Teradata.Client.Provider.TdDate.op_Addition(Teradata.Client.Provider.TdDate,Teradata.Client.Provider.TdIntervalDayToSecond)">
            <summary>
               Adds the specified <see cref="T:Teradata.Client.Provider.TdIntervalDayToSecond"/> to a  <see cref="T:Teradata.Client.Provider.TdDate"/>.
            </summary>
            <returns>
               A <strong>TdDate</strong> is returned that is the result of adding the  
               <strong>TdIntervalDayToSecond</strong> to a <strong>TdDate</strong>.
            </returns>
            <exception cref="T:System.OverflowException">
               Unable to add the <strong>TdIntervalDayToSecond</strong> to a <strong>TdDate</strong>.
            </exception>
            <remarks>
            <para>
               If the <paramref name="interval"/> or this instance is <strong>Null</strong> 
               a <see cref="F:Teradata.Client.Provider.TdDate.Null"/> will be returned.
            </para>
            <para>
               The only component of the <strong>TdIntervalDayToSecond</strong> that will be
               considered is the day component.  When this operation is performed, the  
               <see cref="P:Teradata.Client.Provider.TdIntervalDayToSecond.Days"/> component of the 
               <strong>TdIntervalDayToSecond</strong> is added to the this instance of 
               <strong>TdDate</strong>.  For example, if the date is "2007-10-04" and 
               the interval is "5 03:20:30" (5 days, 3 hours, 20 minutes and 30 seconds)
               the operation will result in "2007-10-09".
            </para>
            </remarks>
            <param name="date">A <strong>TdDate</strong>.</param>
            <param name="interval">
               A <strong>TdIntervalDayToSecond</strong> that will be added to a <strong>TdDate</strong>.
            </param>
        </member>
        <member name="M:Teradata.Client.Provider.TdDate.op_Addition(Teradata.Client.Provider.TdIntervalDayToSecond,Teradata.Client.Provider.TdDate)">
            <summary>
               Adds the specified <see cref="T:Teradata.Client.Provider.TdIntervalDayToSecond"/> to a  <see cref="T:Teradata.Client.Provider.TdDate"/>.
            </summary>
            <returns>
               A <strong>TdDate</strong> is returned that is the result of adding the  
               <strong>TdIntervalDayToSecond</strong> to a <strong>TdDate</strong>.
            </returns>
            <exception cref="T:System.OverflowException">
               Unable to add the <strong>TdIntervalDayToSecond</strong> to a <strong>TdDate</strong>.
            </exception>
            <remarks>
            <para>
               If the <paramref name="interval"/> or this instance is <strong>Null</strong> 
               a <see cref="F:Teradata.Client.Provider.TdDate.Null"/> will be returned.
            </para>
            <para>
               The only component of the <strong>TdIntervalDayToSecond</strong> that will be
               considered is the day component.  When this operation is performed, the  
               <see cref="P:Teradata.Client.Provider.TdIntervalDayToSecond.Days"/> component of the 
               <strong>TdIntervalDayToSecond</strong> is added to the this instance of 
               <strong>TdDate</strong>.  For example, if the date is "2007-10-04" and 
               the interval is "5 03:20:30" (5 days, 3 hours, 20 minutes and 30 seconds)
               the operation will result in "2007-10-09".
            </para>
            </remarks>
            <param name="interval">
               A <strong>TdIntervalDayToSecond</strong> that will be added to a <strong>TdDate</strong>.
            </param>
            <param name="date">A <strong>TdDate</strong>.</param>
        </member>
        <member name="M:Teradata.Client.Provider.TdDate.op_Subtraction(Teradata.Client.Provider.TdDate,System.Int32)">
             <summary>
             Subtracts the specified number of days from a TdDate.
             </summary>
            
             <param name="date">A TdDate.</param>
             <param name="days">The number of days that will be subtracted from a TdDate</param>
            
             <returns>A TdDate is returned that is the result subtracting the specified 
             number of days from a TdDate.</returns>
            
             <exception cref="T:System.OverflowException">Unable to subtract the specified number of days from the TdDate.</exception>
            
             <remarks>
             <para>If the date parameter is <strong>Null</strong> a <see cref="F:Teradata.Client.Provider.TdDate.Null"/> will be returned.</para>
             </remarks>
        </member>
        <member name="M:Teradata.Client.Provider.TdDate.op_Subtraction(Teradata.Client.Provider.TdDate,System.TimeSpan)">
             <summary>
             Subtracts the specified TimeSpan from a TdDate.
             </summary>
            
             <param name="date">A TdDate.</param>
             <param name="timeSpan">A TimeSpan that will be subtracted
             from the TdDate</param>
             
             <returns>A TdDate is returned that is the result of subtracting the TimeSpan 
             from the TdDate.</returns>
             
             <exception cref="T:System.OverflowException">Unable to subtract the TimeSpan from the TdDate.</exception>
             
             <remarks>
             <para>If the date parameter is <strong>Null</strong> a <see cref="F:Teradata.Client.Provider.TdDate.Null"/> will be returned.</para>
            
             <para>The only component of the TimeSpan object that will be considered is the
             day component.  When this operation is performed, the day component of the
             TimeSpan is subtracted from the this instance of TdDate.  For example, if the date 
             is "2007-10-04" and TimeSpan is "0.02:00:00.00" (0 days, 2 hours)
             the subtract operation will result in "2007-10-04".</para>
             
             <para>The number of days will be calculated from the components that were
             specified when TimeSpan was initialized.  Therefore, if a TimeSpan was 
             initialized as <strong>new TimeSpan(47, 60, 20)</strong> (47 hours, 60 minutes, 
             20 seconds), the number of days that will be subtracted from TdDate will be 2.</para>
             </remarks>
        </member>
        <member name="M:Teradata.Client.Provider.TdDate.op_Subtraction(Teradata.Client.Provider.TdDate,Teradata.Client.Provider.TdDate)">
            <summary>
            The number of days between two TdDates is returned when a TdDate is subtracted
            from another TdDate.
            </summary>
            
            <param name="leftOperand">The left TdDate operand.</param>
            <param name="rightOperand">The right TdDate operand.</param>
            
            <returns>An Int32 is returned that represents the number of days
            between the left and right dates.</returns>
            
            <exception cref="T:System.ArgumentNullException">One of the operands is <strong>Null</strong>.</exception>
        </member>
        <member name="M:Teradata.Client.Provider.TdDate.op_Subtraction(Teradata.Client.Provider.TdDate,Teradata.Client.Provider.TdIntervalYearToMonth)">
            <summary>
               Subtracts the specified <see cref="T:Teradata.Client.Provider.TdIntervalYearToMonth"/> from a <see cref="T:Teradata.Client.Provider.TdDate"/>.
            </summary>
            <returns>
               A <strong>TdDate</strong> is returned that is the result of subtracting the 
               <strong>TdIntervalYearToMonth</strong> from a <strong>TdDate</strong>.
            </returns>
            <exception cref="T:System.OverflowException">
               Unable to subtract the <strong>TdIntervalYearToMonth</strong> from the <strong>TdDate</strong>.
            </exception>
            <remarks>
            <para>
               If the <paramref name="interval"/> or <paramref name="date"/> is <strong>Null</strong> 
               a <see cref="F:Teradata.Client.Provider.TdDate.Null"/> will be returned.
            </para>
            <para>
               The <paramref name="interval"/> interval will be subtracted from the <strong>TdDate</strong>.
               For example, if the date is "2007-10-04" and the interval is
               "10-03" (10 years, 3 months) the operation will result in "1997-07-04".
            </para>
            </remarks>
            <param name="date">A <strong>TdDate</strong>.</param>
            <param name="interval">
               A <strong>TdIntervalYearToMonth</strong> that will be subtracted from the <strong>TdDate</strong>.
            </param>
        </member>
        <member name="M:Teradata.Client.Provider.TdDate.op_Subtraction(Teradata.Client.Provider.TdDate,Teradata.Client.Provider.TdIntervalDayToSecond)">
            <summary>
               Subtracts the specified <see cref="T:Teradata.Client.Provider.TdIntervalDayToSecond"/> from a <see cref="T:Teradata.Client.Provider.TdDate"/>.
            </summary>
            <returns>
               A <strong>TdDate</strong> is returned that is the result of subtracting the  
               <strong>TdIntervalDayToSecond</strong> from a <strong>TdDate</strong>.
            </returns>
            <exception cref="T:System.OverflowException">Unable to subtract the interval from a <strong>TdDate</strong>.</exception>
            <remarks>
            <para>
               If the <paramref name="interval"/> or <paramref name="date"/> is 
               <strong>Null</strong> a <see cref="F:Teradata.Client.Provider.TdDate.Null"/> will be returned.
            </para>
            <para>
               The only component of the <strong>TdIntervalDayToSecond</strong> that will be
               considered is the day component.  When this operation is performed, the  
               <see cref="P:Teradata.Client.Provider.TdIntervalDayToSecond.Days"/> component of the 
               <strong>TdIntervalDayToSecond</strong> is subtracted from a 
               <strong>TdDate</strong>.  For example, if the date is "2007-10-09" and 
               the interval is "5 03:20:30" (5 days, 3 hours, 20 minutes and 30 seconds)
               the operation will result in "2007-10-04".
            </para>
            </remarks>
            <param name="date">A <strong>TdDate</strong>.</param>
            <param name="interval">
               A <strong>TdIntervalDayToSecond</strong> that will be subtracted from a 
              <strong>TdDate</strong>.
            </param>
        </member>
        <member name="M:Teradata.Client.Provider.TdDate.Compare(Teradata.Client.Provider.TdDate,Teradata.Client.Provider.TdDate)">
            <summary>
            Compares two instances of TdDate and returns a value indicating whether <paramref name="left"/> is
            greater than, less than or equal to <paramref name="right"/>.
            </summary>
            
            <returns>
            The result of the comparison is returned as an integer.
            </returns>
            
            <remarks>
            	<para>
                    The integer returned when <paramref name="left"/> is compared to <paramref name="right"/>
                    indicates the following:
                </para>
                <para>
            	<list type="table">
            		<listheader>
            			<term>Return Value</term>
            			<description>Meaning</description>
            		</listheader>
            		<item>
            			<term>Less than zero</term>
            			<description>
                            <para><paramref name="left"/> is less than <paramref name="right"/>.</para> 
                            <para>-or-</para>
                            <para><paramref name="left"/> is <see cref="F:Teradata.Client.Provider.TdDate.Null"/>.</para>
                        </description>
            		</item>
            		<item>
            			<term>Zero</term>
            			<description>
                            <para><paramref name="left"/> is equal to <paramref name="right"/>.</para>
                            <para>-or-</para>
                            <para><paramref name="left"/> and <paramref name="right"/> are <Strong>Null</Strong>.</para>
                        </description>
            		</item>
            		<item>
            			<term>Greater than zero</term>
            			<description>
                            <para><paramref name="left"/> is greater than <paramref name="right"/>.</para>
                            <para>-or-</para>
                            <para><paramref name="right"/> is <Strong>Null.</Strong></para>
                        </description>
            		</item>
            	</list>
                </para>
            </remarks>
            
            <seealso cref="M:Teradata.Client.Provider.TdDate.CompareTo(Teradata.Client.Provider.TdDate)"/>
            
            <param name="left">An instance of TdDate.</param>
            <param name="right">An instance of TdDate.</param>
        </member>
        <member name="M:Teradata.Client.Provider.TdDate.Equals(Teradata.Client.Provider.TdDate,Teradata.Client.Provider.TdDate)">
             <summary>
                 Compares two <see cref="T:Teradata.Client.Provider.TdDate"/> instances to determine whether they are
                 equal.
             </summary>
             
             <returns>
             A boolean is returned that indicates the result of the comparison.
             </returns>
             
             <remarks>
             	<para>
             		The value returned is <c>true</c> if the <paramref name="left"/> is 
                     equal to the <paramref name="right"/>, <c>false</c> otherwise.
                 </para>
             	<para>
             		<list type="table">
             			<listheader>
             				<term>Return Value</term>
             				<description>Description</description>
             			</listheader>
             			<item>
             				<term><c>true</c></term>
                             <description>
                                 <para><paramref name="left"/> and <paramref name="right"/> are <see cref="F:Teradata.Client.Provider.TdDate.Null"/></para> 
                                 <para>-or-</para>
                                 <para><paramref name="left"/> is equal to <paramref name="right"/>.</para>
                             </description>
             			</item>
             			<item>
             				<term><c>false</c></term>
                             <description>
                             <para><paramref name="left"/> or <paramref name="right"/> is <strong>Null</strong></para>
                             <para>-or-</para>
                             <para><paramref name="left"/> is not equal to <paramref name="right"/>.</para>
                             </description>
             			</item>
             		</list>
             	</para>
             </remarks>
             <example>
                 The following code example uses various comparison methods and operators.
                 <code lang="CS">
             TdDate  later = new TdDate(2010, 8, 31);
             TdDate earlier = new TdDate(2007, 8, 31);
              
             // The following comparison methods and operators are equivalent
             if (false == TdDate.Equals(later, earlier) ||
                 late != earlier ||
                 true == TdDate.NotEquals(later, earlier) )
             {
                Console.WriteLine(“later does not equal earlier”);
             }
                 </code>
             </example>
            
             <param name="left">A TdDate instance.</param>
             <param name="right">A TdDate instance.</param>
        </member>
        <member name="M:Teradata.Client.Provider.TdDate.NotEquals(Teradata.Client.Provider.TdDate,Teradata.Client.Provider.TdDate)">
            <summary>
            Compares two TdDates to determine whether the <paramref name="left"/> operand is 
            not equal to the <paramref name="right"/> operand.
            </summary>
            
            <returns>
            A boolean is returned that indicates the result of the comparison.
            </returns>
            
            <remarks>
            	<para>
            		The value returned is <c>true</c> if the <paramref name="left"/> is 
                    not equal to the <paramref name="right"/>, <c>false</c> otherwise.
                </para>
            	<para>
            		<list type="table">
            			<listheader>
            				<term>Return Value</term>
            				<description>Description</description>
            			</listheader>
            			<item>
            				<term><c>true</c></term>
                            <description>
                                <para><paramref name="left"/> or <paramref name="right"/> is <see cref="F:Teradata.Client.Provider.TdDate.Null"/></para> 
                                <para>-or-</para>
                                <para><paramref name="left"/> is less than or greater than <paramref name="right"/>.</para>
                            </description>
            			</item>
            			<item>
            				<term><c>false</c></term>
                            <description>
                            <para><paramref name="left"/> and <paramref name="right"/> are <strong>Null</strong></para>
                            <para>-or-</para>
                            <para><paramref name="left"/> is equal to <paramref name="right"/>.</para>
                            </description>
            			</item>
            		</list>
            	</para>
            </remarks>
            
            <param name="left">An instance of TdDate.</param>
            <param name="right">An instance of TdDate.</param>        
        </member>
        <member name="M:Teradata.Client.Provider.TdDate.GreaterThan(Teradata.Client.Provider.TdDate,Teradata.Client.Provider.TdDate)">
            <summary>
            Compares two TdDates to determine whether the <paramref name="left"/> operand is 
            greater than the <paramref name="right"/> operand.
            </summary>
            
            <returns>
            A boolean is returned that indicates the result of the comparison.
            </returns>
            
            <remarks>
            	<para>
            		The value returned is <c>true</c> if the <paramref name="left"/> is greater
                    than the <paramref name="right"/>, <c>false</c> otherwise.
                </para>
            	<para>
            		<list type="table">
            			<listheader>
            				<term>Return Value</term>
            				<description>Description</description>
            			</listheader>
            			<item>
            				<term><c>true</c></term>
                            <description><paramref name="left"/> and <paramref name="right"/> are not <see cref="F:Teradata.Client.Provider.TdDate.Null"/> and
                            <paramref name="left"/> is greater than <paramref name="right"/>.
                            </description>
            			</item>
            			<item>
            				<term><c>false</c></term>
                            <description>
                            <para><paramref name="left"/> and / or <paramref name="right"/> is <strong>Null</strong> </para>
                            <para>-or-</para>
                            <para><paramref name="left"/> is less than or equal to <paramref name="right"/>.</para>
                            </description>
            			</item>
            		</list>
            	</para>
            
            <para>Comparison operators always returns <c>false</c> if one of the operands is 
            <strong>Null</strong>.  Therefore, you must not assume that the reverse condition 
            is <c>true</c>. For example you cannot assume that the left operand is less than or 
            equal to the right operand if the <c>GreaterThan</c> operator returns <c>false</c>.</para> 
            
            </remarks>
            
            <param name="left">An instance of TdDate.</param>
            <param name="right">An instance of TdDate.</param>
        </member>
        <member name="M:Teradata.Client.Provider.TdDate.GreaterThanOrEqual(Teradata.Client.Provider.TdDate,Teradata.Client.Provider.TdDate)">
            <summary>
            Compares two TdDates to determine whether the <paramref name="left"/> operand is 
            greater than or equal to the <paramref name="right"/> operand.
            </summary>
            
            <returns>
            A boolean is returned that indicates the result of the comparison.
            </returns>
            
            <remarks>
            	<para>
            		The value returned is <c>true</c> if the <paramref name="left"/> is greater
                    than or equal to the <paramref name="right"/>, <c>false</c> otherwise.
                </para>
            	<para>
            		<list type="table">
            			<listheader>
            				<term>Return Value</term>
            				<description>Description</description>
            			</listheader>
            			<item>
            				<term><c>true</c></term>
                            <description><paramref name="left"/> and <paramref name="right"/> are not <see cref="F:Teradata.Client.Provider.TdDate.Null"/> and
                            <paramref name="left"/> is greater than or equal to <paramref name="right"/>.
                            </description>
            			</item>
            			<item>
            				<term><c>false</c></term>
                            <description>
                            <para><paramref name="left"/> and / or <paramref name="right"/> is <strong>Null</strong> </para>
                            <para>-or-</para>
                            <para><paramref name="left"/> is less than <paramref name="right"/>.</para>
                            </description>
            			</item>
            		</list>
            	</para>
            
            <para>Comparison operators always returns <c>false</c> if one of the operands is 
            <strong>Null</strong>.  Therefore, you must not assume that the reverse condition is 
            <c>true</c>. For example you cannot assume that the left operand is less than the right 
            operand if <c>GreaterThanOrEqual</c> operator returns <c>false</c>.</para> 
            
            </remarks>
            
            <param name="left">An instance of TdDate.</param>
            <param name="right">An instance of TdDate.</param>
        </member>
        <member name="M:Teradata.Client.Provider.TdDate.LessThan(Teradata.Client.Provider.TdDate,Teradata.Client.Provider.TdDate)">
             <summary>
             Compares two TdDates to determine whether the <paramref name="left"/> operand is 
             less than the <paramref name="right"/> operand.
             </summary>
             
             <returns>
             A boolean is returned that indicates the result of the comparison.
             </returns>
             
             <remarks>
             	<para>
             		The value returned is <c>true</c> if the <paramref name="left"/> is less
                     than the <paramref name="right"/>, <c>false</c> otherwise.
                 </para>
             	<para>
             		<list type="table">
             			<listheader>
             				<term>Return Value</term>
             				<description>Description</description>
             			</listheader>
             			<item>
             				<term><c>true</c></term>
                             <description><paramref name="left"/> and <paramref name="right"/> are not <see cref="F:Teradata.Client.Provider.TdDate.Null"/> and
                             <paramref name="left"/> is less than <paramref name="right"/>.
                             </description>
             			</item>
             			<item>
             				<term><c>false</c></term>
                             <description>
                             <para><paramref name="left"/> and / or <paramref name="right"/> is <strong>Null</strong></para>
                             <para>-or-</para>
                             <para><paramref name="left"/> is greater than or equal to <paramref name="right"/>.</para>
                             </description>
             			</item>
             		</list>
             	</para>
             <para>Comparison operators always returns <c>false</c> if one of the operands is 
             <strong>Null</strong>.  Therefore, you must not assume that the reverse condition 
             is <c>true</c>. For example you cannot assume that the left operand is greater than 
             or equal the right operand if the <c>LessThan</c> operator returns <c>false</c>.</para> 
             
             </remarks>
            
             <param name="left">An instance of TdDate.</param>
             <param name="right">An instance of TdDate.</param>
        </member>
        <member name="M:Teradata.Client.Provider.TdDate.LessThanOrEqual(Teradata.Client.Provider.TdDate,Teradata.Client.Provider.TdDate)">
            <summary>
            Compares two TdDates to determine whether the <paramref name="left"/> operand is 
            less than or equal to the <paramref name="right"/> operand.
            </summary>
            
            <returns>
            A boolean is returned that indicates the result of the comparison.
            </returns>
            
            <remarks>
            	<para>
            		The value returned is <c>true</c> if the <paramref name="left"/> is less
                    than or equal to the <paramref name="right"/>, <c>false</c> otherwise.
                </para>
            	<para>
            		<list type="table">
            			<listheader>
            				<term>Return Value</term>
            				<description>Description</description>
            			</listheader>
            			<item>
            				<term><c>true</c></term>
                            <description><paramref name="left"/> and <paramref name="right"/> are not <see cref="F:Teradata.Client.Provider.TdDate.Null"/> and
                            <paramref name="left"/> is less than or equal to <paramref name="right"/>.
                            </description>
            			</item>
            			<item>
            				<term><c>false</c></term>
                            <description>
                            <para><paramref name="left"/> and / or <paramref name="right"/> is <strong>Null</strong></para>
                            <para>-or-</para>
                            <para><paramref name="left"/> is greater than <paramref name="right"/>.</para>
                            </description>
            			</item>
            		</list>
            	</para>
            
            <para>Comparison operators always returns <c>false</c> if one of the operands is 
            <strong>Null</strong>.  Therefore, you must not assume that the reverse condition 
            is <c>true</c>. For example you cannot assume that the left operand is greater than 
            the right operand if the <c>LessThanOrEqual</c> operator 
            returns <c>false</c>.</para> 
            
            </remarks>
            
            <param name="left">An instance of TdDate.</param>
            <param name="right">An instance of TdDate.</param>
        </member>
        <member name="M:Teradata.Client.Provider.TdDate.op_Equality(Teradata.Client.Provider.TdDate,Teradata.Client.Provider.TdDate)">
             <summary>
             Compares two TdDates to determine whether the <paramref name="left"/> operand is 
             equal to the <paramref name="right"/> operand.
             </summary>
             
             <returns>
             A boolean is returned that indicates the result of the comparison.
             </returns>
            
             <remarks>
             	<para>
             		The value returned is <c>true</c> if the <paramref name="left"/> is 
                     equal to the <paramref name="right"/>, <c>false</c> otherwise.
                 </para>
             	<para>
             		<list type="table">
             			<listheader>
             				<term>Return Value</term>
             				<description>Description</description>
             			</listheader>
             			<item>
             				<term><c>true</c></term>
                             <description>
                                 <para><paramref name="left"/> and <paramref name="right"/> are <see cref="F:Teradata.Client.Provider.TdDate.Null"/></para> 
                                 <para>-or-</para>
                                 <para><paramref name="left"/> is equal to <paramref name="right"/>.</para>
                             </description>
             			</item>
             			<item>
             				<term><c>false</c></term>
                             <description>
                             <para><paramref name="left"/> or <paramref name="right"/> is <strong>Null</strong></para>
                             <para>-or-</para>
                             <para><paramref name="left"/> is not equal to <paramref name="right"/>.</para>
                             </description>
             			</item>
             		</list>
             	</para>
             
             <para>
             Unlike comparison operators, Equality operators do not always return <c>false</c> when 
             left and right operands are <strong>Null</strong>. Therefore the reverse condition can 
             be considered <c>true</c>. TdDate implementation is very similar to the 
             <see cref="T:System.Nullable"/> class in this regard.
             </para>
             </remarks>
             
             <param name="left">An instance of TdDate.</param>
             <param name="right">An instance of TdDate.</param>        
             
             <example>
             Following example shows that the Equality operator can safely be used in an if statement.
             <code>
             TdDate x = TdDate.Null;
             TdDate y = new TdDate(2008, 10, 10);
             
             if (x == y)
             {
                 // x is equal to y.
                 Console.WriteLine(@"X is equal to Y").
             }
             else
             {
                 // x is not equal y
                 Console.WriteLine(@"X is not equal to Y").
             }
             
             y = TdDate.Null;
             
             if (x == y)
             {
                 // x is equal to y.
                 Console.WriteLine(@"X is equal to Y").
             }
             else
             {
                 // x is not equal y
                 Console.WriteLine(@"X is not equal to Y").
             }
             </code>
             </example>
        </member>
        <member name="M:Teradata.Client.Provider.TdDate.op_Inequality(Teradata.Client.Provider.TdDate,Teradata.Client.Provider.TdDate)">
            <summary>
            Compares two TdDates to determine whether the <paramref name="left"/> operand is 
            not equal to the <paramref name="right"/> operand.
            </summary>
            
            <returns>
            A boolean is returned that indicates the result of the comparison.
            </returns>
            
            <remarks>
            	<para>
            		The value returned is <c>true</c> if the <paramref name="left"/> is 
                    not equal to the <paramref name="right"/>, <c>false</c> otherwise.
                </para>
            	<para>
            		<list type="table">
            			<listheader>
            				<term>Return Value</term>
            				<description>Description</description>
            			</listheader>
            			<item>
            				<term><c>true</c></term>
                            <description>
                                <para><paramref name="left"/> or <paramref name="right"/> is <see cref="F:Teradata.Client.Provider.TdDate.Null"/></para> 
                                <para>-or-</para>
                                <para><paramref name="left"/> is less than or greater than <paramref name="right"/>.</para>
                            </description>
            			</item>
            			<item>
            				<term><c>false</c></term>
                            <description>
                            <para><paramref name="left"/> and <paramref name="right"/> are <strong>Null</strong></para>
                            <para>-or-</para>
                            <para><paramref name="left"/> is equal to <paramref name="right"/>.</para>
                            </description>
            			</item>
            		</list>
            	</para>
            </remarks>
            
            <param name="left">An instance of TdDate.</param>
            <param name="right">An instance of TdDate.</param>        
        </member>
        <member name="M:Teradata.Client.Provider.TdDate.op_GreaterThan(Teradata.Client.Provider.TdDate,Teradata.Client.Provider.TdDate)">
             <summary>
             Compares two TdDates to determine whether the <paramref name="left"/> operand is 
             greater than the <paramref name="right"/> operand.
             </summary>
             
             <returns>
             A boolean is returned that indicates the result of the comparison.
             </returns>
            
             <remarks>
             	<para>
             		The value returned is <c>true</c> if the <paramref name="left"/> is greater
                     than the <paramref name="right"/>, <c>false</c> otherwise.
                 </para>
             	<para>
             		<list type="table">
             			<listheader>
             				<term>Return Value</term>
             				<description>Description</description>
             			</listheader>
             			<item>
             				<term><c>true</c></term>
                             <description><paramref name="left"/> and <paramref name="right"/> are not <see cref="F:Teradata.Client.Provider.TdDate.Null"/> and
                             <paramref name="left"/> is greater than <paramref name="right"/>.
                             </description>
             			</item>
             			<item>
             				<term><c>false</c></term>
                             <description>
                             <para><paramref name="left"/> and / or <paramref name="right"/> is <strong>Null</strong> </para>
                             <para>-or-</para>
                             <para><paramref name="left"/> is less than or equal to <paramref name="right"/>.</para>
                             </description>
             			</item>
             		</list>
             	</para>
             
             <para>Comparison operators always returns <c>false</c> if one of the operands is 
             <strong>Null</strong>.  Therefore, you must not assume that the reverse condition 
             is <c>true</c>. For example you cannot assume that the left operand is less than or 
             equal to the right operand if the "<c>&gt;</c>" operator returns <c>false</c>.</para> 
             </remarks>
            
             <param name="left">An instance of TdDate.</param>
             <param name="right">An instance of TdDate.</param>
        </member>
        <member name="M:Teradata.Client.Provider.TdDate.op_GreaterThanOrEqual(Teradata.Client.Provider.TdDate,Teradata.Client.Provider.TdDate)">
            <summary>
            Compares two TdDates to determine whether the <paramref name="left"/> operand is 
            greater than or equal to the <paramref name="right"/> operand.
            </summary>
            
            <returns>
            A boolean is returned that indicates the result of the comparison.
            </returns>
            
            <remarks>
            	<para>
            		The value returned is <c>true</c> if the <paramref name="left"/> is greater
                    than or equal to the <paramref name="right"/>, <c>false</c> otherwise.
                </para>
            	<para>
            		<list type="table">
            			<listheader>
            				<term>Return Value</term>
            				<description>Description</description>
            			</listheader>
            			<item>
            				<term><c>true</c></term>
                            <description><paramref name="left"/> and <paramref name="right"/> are not <see cref="F:Teradata.Client.Provider.TdDate.Null"/> and
                            <paramref name="left"/> is greater than or equal to <paramref name="right"/>.
                            </description>
            			</item>
            			<item>
            				<term><c>false</c></term>
                            <description>
                            <para><paramref name="left"/> and / or <paramref name="right"/> is <strong>Null</strong> </para>
                            <para>-or-</para>
                            <para><paramref name="left"/> is less than <paramref name="right"/>.</para>
                            </description>
            			</item>
            		</list>
            	</para>
            
            <para>Comparison operators always returns <c>false</c> if one of the operands is 
            <strong>Null</strong>.  Therefore, you must not assume that the reverse condition 
            is <c>true</c>. For example you cannot assume that the left operand is less than the 
            right operand if the "<c>&gt;=</c>" operator returns <c>false</c>.</para> 
            </remarks>
            
            <param name="left">An instance of TdDate.</param>
            <param name="right">An instance of TdDate.</param>
        </member>
        <member name="M:Teradata.Client.Provider.TdDate.op_LessThan(Teradata.Client.Provider.TdDate,Teradata.Client.Provider.TdDate)">
             <summary>
             Compares two TdDates to determine whether the <paramref name="left"/> operand is 
             less than the <paramref name="right"/> operand.
             </summary>
             
             <returns>
             A boolean is returned that indicates the result of the comparison.
             </returns>
             
             <remarks>
             	<para>
             		The value returned is <c>true</c> if the <paramref name="left"/> is less
                     than the <paramref name="right"/>, <c>false</c> otherwise.
                 </para>
             	<para>
             		<list type="table">
             			<listheader>
             				<term>Return Value</term>
             				<description>Description</description>
             			</listheader>
             			<item>
             				<term><c>true</c></term>
                             <description><paramref name="left"/> and <paramref name="right"/> are not <see cref="F:Teradata.Client.Provider.TdDate.Null"/> and
                             <paramref name="left"/> is less than <paramref name="right"/>.
                             </description>
             			</item>
             			<item>
             				<term><c>false</c></term>
                             <description>
                             <para><paramref name="left"/> and / or <paramref name="right"/> is <strong>Null</strong></para>
                             <para>-or-</para>
                             <para><paramref name="left"/> is greater than or equal to <paramref name="right"/>.</para>
                             </description>
             			</item>
             		</list>
             	</para>
             
             <para>Comparison operators always returns <c>false</c> if one of the operands is 
             <strong>Null</strong>.  Therefore, you must not assume that the reverse condition is 
             <c>true</c>. For example you cannot assume that the left operand is greater than or 
             equal the right operand if the "<c>&lt;</c>" operator returns <c>false</c>.</para> 
             </remarks>
            
             <param name="left">An instance of TdDate.</param>
             <param name="right">An instance of TdDate.</param>
        </member>
        <member name="M:Teradata.Client.Provider.TdDate.op_LessThanOrEqual(Teradata.Client.Provider.TdDate,Teradata.Client.Provider.TdDate)">
             <summary>
             Compares two TdDates to determine whether the <paramref name="left"/> operand is 
             less than or equal to the <paramref name="right"/> operand.
             </summary>
             
             <returns>
             A boolean is returned that indicates the result of the comparison.
             </returns>
            
             <remarks>
             	<para>
             		<c>true</c> if the <paramref name="left"/> is less
                     than or equal to the <paramref name="right"/>, <c>false</c> otherwise.
                 </para>
             	<para>
             		<list type="table">
             			<listheader>
             				<term>Return Value</term>
             				<description>Description</description>
             			</listheader>
             			<item>
             				<term><c>true</c></term>
                             <description><paramref name="left"/> and <paramref name="right"/> are not <see cref="F:Teradata.Client.Provider.TdDate.Null"/> and
                             <paramref name="left"/> is less than or equal to <paramref name="right"/>.
                             </description>
             			</item>
             			<item>
             				<term><c>false</c></term>
                             <description>
                             <para><paramref name="left"/> and / or <paramref name="right"/> is <strong>Null</strong></para>
                             <para>-or-</para>
                             <para><paramref name="left"/> is greater than <paramref name="right"/>.</para>
                             </description>
             			</item>
             		</list>
             	</para>
             
             <para>Comparison operators always returns <c>false</c> if one of the operands is 
             <strong>Null</strong>.  Therefore, you must not assume that the reverse condition is 
             <c>true</c>. For example you cannot assume that the left operand is greater than the 
             right operand if the "<c>&lt;=</c>" operator returns <c>false</c>.</para> 
             </remarks>
            
             <param name="left">An instance of TdDate.</param>
             <param name="right">An instance of TdDate.</param>
        </member>
        <member name="M:Teradata.Client.Provider.TdDate.CompareTo(Teradata.Client.Provider.TdDate)">
            <summary>
            Compares this instance to the specified TdDate <paramref name="other"/>. 
            </summary>
            
            <returns>
            The result of the comparison is returned as an integer.
            </returns>
            
            <remarks>
            	<para>
                    The integer returned when this instance is compared to <paramref name="other"/>
                    indicates the following:
                </para>
            	<para>
            		<list type="table">
            			<listheader>
            				<term>Return Value</term>
            				<description>Meaning</description>
            			</listheader>
            			<item>
            				<term>Less than Zero</term>
            				<description>
            					<para>
                                    This instance is less than <paramref name="other"/>.
                                </para>
            					<para>-or-</para>
            					<para>This instance is <see cref="F:Teradata.Client.Provider.TdDate.Null"/>.</para>
            				</description>
            			</item>
            			<item>
            				<term>Zero</term>
            				<description>
            					<para>
                                    This instance is equal to <paramref name="other"/>.
                                </para>
            					<para>-or-</para>
            					<para>This instance is <Strong>Null</Strong> and value is <Strong>Null</Strong>.</para>
            				</description>
            			</item>
            			<item>
            				<term>Greater than Zero</term>
            				<description>
            					<para>
                                    This instance is greater than
                                    <paramref name="other"/>.
                                </para>
            					<para>-or-</para>
            					<para>
            						<paramref name="other"/> is <Strong>Null</Strong>.
                                </para>
            				</description>
            			</item>
            		</list>
            	</para>
            </remarks>
            
            <param name="other">The TdDate to compare against.</param>
        </member>
        <member name="M:Teradata.Client.Provider.TdDate.CompareTo(System.Object)">
            <summary>
            Compares this instance to the specified TdDate <paramref name="obj"/>. 
            </summary>
            
            <returns>
            The result of the comparison is returned as an integer.
            </returns>
            
            <remarks>
            	<para>
                    The integer returned when this instance is compared to <paramref name="obj"/>
                    indicates the following:
                </para>
            	<para>
            		<list type="table">
            			<listheader>
            				<term>Return Value</term>
            				<description>Meaning</description>
            			</listheader>
            			<item>
            				<term>Less than Zero</term>
            				<description>
            					<para>This instance is less than <paramref name="obj"/>.</para>
            					<para>-or-</para>
            					<para>This instance is <see cref="F:Teradata.Client.Provider.TdDate.Null"/>.</para>
            				</description>
            			</item>
            			<item>
            				<term>Zero</term>
            				<description>
            					<para>
                                    This instance is equal to <paramref name="obj"/>.
                                </para>
            					<para>-or-</para>
            					<para>This instance is <Strong>Null</Strong> and <paramref name="obj"/> is <Strong>Null</Strong>.</para>
            				</description>
            			</item>
            			<item>
            				<term>Greater than Zero</term>
            				<description>
            					<para>
                                    This instance is greater than <paramref name="obj"/>.
                                </para>
            					<para>-or-</para>
            					<para>
            						<paramref name="obj"/> is <Strong>Null</Strong> or a <c>null</c> reference.
                                </para>
            				</description>
            			</item>
            		</list>
            	</para>
            
              <para><paramref name="obj"/> must be an instance of TdDate type or <c>null</c> reference.</para>
            </remarks>
            
            <exception cref="T:System.ArgumentException"><paramref name="obj"/> is not of type TdDate</exception>
            
            <seealso cref="M:Teradata.Client.Provider.TdDate.CompareTo(Teradata.Client.Provider.TdDate)"/>
            
            <overloads>
            Compares this instance to the supplied object and returns whether it is less
            than, equal or greater than the supplied object.
            </overloads>
            
            <param name="obj">TdDate instance to compare against.</param>
        </member>
        <member name="M:Teradata.Client.Provider.TdDate.ToString">
            <summary>
            The TdDate is converted to a String representation of the date.
            </summary>
            
            <returns>The string representation of TdDate is returned.</returns>
            
            <remarks>
            <para>The string representation of the data will be in the format:  "yyyy-MM-dd".</para>
            
            <para>If the this instance is <see cref="F:Teradata.Client.Provider.TdDate.Null"/>, a string that contains "Null"
            will be returned.</para>
            
            </remarks>
        </member>
        <member name="M:Teradata.Client.Provider.TdDate.ToString(System.String)">
             <summary>
             TdDate is converted to the equivalent String using the specified format.
             </summary>
            
             <param name="format">The DateTime format string that will be used to format the TdDate.</param>
             
             <returns>A string representation of the date in TdDate.</returns>
            
             <exception cref="T:System.FormatException">The <paramref name="format"/> is invalid.</exception>
             <remarks>
             <para>If the format parameter is null, the string representation of TdDate will
             be equivalent to the "G" format specifier which is "yyyy-MM-dd".</para>
             
             <para>If the this instance is <see cref="F:Teradata.Client.Provider.TdDate.Null"/>, a string that contains "Null"
             will be returned.</para>
             
             <para>The format specifiers that are supported are as follows:</para>
             <list type="table">
             <listheader>
             <term>Format Specifier</term>
             <description>Description</description>
             </listheader>
             <item>
             <term>d</term>
             <description>Short date pattern.</description>
             </item>
             <item>
             <term>D</term>
             <description>Long date pattern.</description>
             </item>
             <item>
             <term>G</term>
             <description>The ANSI string representation.  For TdDate the format will be an ANSI Date "yyyy-MM-dd".  
             Cultural information is ignored.</description>
             </item>
             <item>
             <term>M or m</term>
             <description>Month day pattern</description>
             </item>
             <item>
             <term>L or l</term>
             <description>The Teradata literal representation of a Date.</description>
             </item>
             <item>
             <term>Y or y</term>
             <description>Year month pattern</description>
             </item>
             </list>
             <para>For more information on format specifiers refer to the 
             <see cref="T:System.Globalization.DateTimeFormatInfo"/> in the MSDN documentation.</para>
             </remarks>
        </member>
        <member name="M:Teradata.Client.Provider.TdDate.ToString(System.IFormatProvider)">
            <summary>
            Converts a TdDate into the equivalent string representation.
            </summary>
            
            <param name="provider">The culture specific information.  This parameter is ignored.</param>
            
            <returns>The string representation of TdDate is in ANSI date format which is "yyyy-MM-dd".</returns>
            
            <remarks>
            <para>By default this method converts this instance of TdDate using the "G" format specifier 
            (see <see cref="M:Teradata.Client.Provider.TdDate.ToString(System.String)"/>)-- the ANSI string representation.  </para>
            
            <para>The cultural information specified in the <paramref name="provider"/> parameter is ignored.</para>
            
            <para>If the this instance is <see cref="F:Teradata.Client.Provider.TdDate.Null"/>, a string that contains "Null"
            will be returned.</para>
            
            </remarks>
        </member>
        <member name="M:Teradata.Client.Provider.TdDate.ToString(System.String,System.IFormatProvider)">
            <summary>
            TdDate is converted into the equivalent String representation using the 
            specified format and culture information.
            </summary>
            
            <param name="format">The DateTime format string that will be used to format the TdDate.</param>
            <param name="formatProvider">The culture specific information used to generate the string equivalent of TdDate.</param>
            
            <returns>A string representation of the date in TdDate.</returns>
            
            <exception cref="T:System.FormatException">The <paramref name="format"/> is invalid.</exception>
            <remarks>
            <para>If the format parameter is null, the string representation of TdDate will
            be equivalent to the "G" format specifier which is "yyyy-MM-dd".</para>
            
            <para>If the this instance is <see cref="F:Teradata.Client.Provider.TdDate.Null"/>, a string that contains "Null"
            will be returned.</para>
            
            <para>For more information refer to <see cref="M:Teradata.Client.Provider.TdDate.ToString(System.String)"/></para>
            </remarks>
        </member>
        <member name="M:Teradata.Client.Provider.TdDate.Parse(System.String)">
            <summary>
            The specified string is converted into an equivalent TdDate.
            </summary>
            
            <param name="value">The string that is to be converted into a TdDate.</param>
            
            <returns>A TdDate is returned that is equivalent to the Date contained in the value string.</returns>
            
            <exception cref="T:System.ArgumentNullException">Value is a null reference.</exception>
            <exception cref="T:System.FormatException">Value does not contain a valid representation of a date.</exception>
            
            <remarks>
            <para>The input string is parsed using the format information contained in the current 
            <see cref="T:System.Globalization.DateTimeFormatInfo"/>.</para>
            
            <para>An attempt is made to avoid throwing a FormatException.  Any unrecognized characters 
            in the string will be ignored.  </para>
            
            <para>If the <paramref name="value"/> contains the string "Null" a <see cref="F:Teradata.Client.Provider.TdDate.Null"/>
            will be returned.</para>
            </remarks>
        </member>
        <member name="M:Teradata.Client.Provider.TdDate.Parse(System.String,System.IFormatProvider)">
            <summary>
            The specified string is converted into an equivalent TdDate.  The format of 
            the string representation of the date will match the specified culture information.
            </summary>
            
            <param name="value">The string that is to be converted into a TdDate</param>
            <param name="provider">An IFormatProvider that supplies culture specific information 
            about the format of value.</param>
            
            <returns>A TdDate is returned that is equivalent to the Date contained in the value string.</returns>
            
            <exception cref="T:System.ArgumentNullException">Value is a null reference.</exception>
            <exception cref="T:System.FormatException">Value does not contain a valid representation of a date.</exception>
            
            <remarks>
            <para>The string is parsed using the culture information contained in the specified 
            <see cref="T:System.Globalization.DateTimeFormatInfo"/> object.</para>
            
            <para>An attempt is made to avoid throwing a FormatException.  Any unrecognized characters in 
            the string will be ignored.  </para>
            
            <para>However, when a custom culture is used it is possible that the Parse will 
            fail.  A date string that contains custom culture specific date elements is very
            difficult to parse.  The string may not match any of the implicit patterns that
            are used to parse a string.</para>
            
            <para>If the <paramref name="value"/> contains the string "Null" a <see cref="F:Teradata.Client.Provider.TdDate.Null"/>
            will be returned.</para>
            </remarks>
        </member>
        <member name="M:Teradata.Client.Provider.TdDate.TryParse(System.String,Teradata.Client.Provider.TdDate@)">
             <summary>
             A date contained in a string is converted to a TdDate representation.
             </summary>
             
             <param name="value">The string that contains the date representation.</param>
             <param name="result">The TdDate representation of the date contained in the specified string.</param>
             
             <returns>A Boolean is returned that indicates the success of the conversion.  
             <c>true</c> indicates that the conversion was successful and that the conversion is 
             returned through the result parameter.  <c>false</c> indicates that the conversion 
             failed.</returns>
             
             <remarks>
             <para>TryParse is the same as Parse except that an exception does not get thrown 
             when the conversion fails.</para>
             
             <para>Formatting information contained in the DateTimeFormatInfo object is used to 
             parse the string.</para>
             
             <para>If the string is either null or empty, a <see cref="F:Teradata.Client.Provider.TdDate.Null"/>
             is returned in the <paramref name="result"/> parameter. </para>
            
             <para>If the <paramref name="value"/> contains the string "Null" a <see cref="F:Teradata.Client.Provider.TdDate.Null"/>
             will be returned.</para>
             
             <para>If the conversion fails the result parameter will be set to <see cref="F:Teradata.Client.Provider.TdDate.MinValue"/>.</para>
             </remarks>
        </member>
        <member name="M:Teradata.Client.Provider.TdDate.TryParse(System.String,System.IFormatProvider,Teradata.Client.Provider.TdDate@)">
             <summary>
             A date contained in a string is converted to a TdDate representation.
             </summary>
             
             <param name="value">The string that contains the date representation.</param>
             <param name="provider">An IFormatProvider that supplies culture specific information 
             about the format of value.</param>
             <param name="result">The TdDate representation of the date contained in the specified string.</param>
             
             <returns>A Boolean is returned that indicates the success of the conversion.  
             <c>true</c> indicates that the conversion was successful and that the conversion is 
             returned through the result parameter.  <c>false</c> indicates that the conversion 
             failed.</returns>
             
             <remarks>
             <para>TryParse is the same as Parse except that an exception does not get thrown 
             when the conversion fails.</para>
             
             <para>Formatting information contained in the DateTimeFormatInfo object is used to 
             parse the string.</para>
             
             <para>If the string is either null or empty, a <see cref="F:Teradata.Client.Provider.TdDate.Null"/>
             is returned in the <paramref name="result"/> parameter. </para>
             
             <para>If the <paramref name="value"/> contains the string "Null" a <see cref="F:Teradata.Client.Provider.TdDate.Null"/>
             will be returned.</para>
            
             <para>If the conversion fails the result parameter will be set to <see cref="F:Teradata.Client.Provider.TdDate.MinValue"/>.</para>
             </remarks>
             <seealso cref="M:Teradata.Client.Provider.TdDate.Parse(System.String,System.IFormatProvider)"/>
        </member>
        <member name="M:Teradata.Client.Provider.TdDate.ToDateTime(Teradata.Client.Provider.TdDate)">
            <summary>
            This instance of TdDate will be converted to a System.DateTime.
            </summary>
            
            <returns>A DateTime structure is returned that is equivalent to TdDate.</returns>
            
            <exception cref="T:Teradata.Client.Provider.TdException">The value parameter is null.</exception>
        </member>
        <member name="M:Teradata.Client.Provider.TdDate.GetXmlSchema(System.Xml.Schema.XmlSchemaSet)">
             <summary>
             Specifies the XML Qualified name for <strong>TdDate</strong> XML type mapping.
             </summary>
             
             <param name="xmlSchemaSet">Holds zero or more XML Schema definition language (XSD) schemas.</param>
             
             <returns>
             Returns <strong>xs:date</strong>.
             </returns>
             
             <example>
             This examples shows how to use <strong>TdDate</strong> with <see cref="T:System.Xml.Serialization.XmlSerializer"/> class.
             <see cref="T:System.Xml.Serialization.XmlElementAttribute"/> is used to indicate that the Teradata Database column can be <strong>Null</strong>.
             <code>
              public class Order
              {
                  public TdDate Date;
            
                  public Int32 ProductId;
            
                  public Int32 Quantity;
            
                  public Int32? BackOrderQuantity;
            
                  [XmlElementAttribute(IsNullable = true)]        
                  public TdDecimal BackOrderPrice;
              }
             
              internal class OrderWriter
              {
              
                  public static void Write()
                  {
                      // Setup the order
                      Order x = new Order();
              
                      x.Date = new TdDate(DateTime.Today);
                      x.ProductId = 100;
                      x.Quantity = 2000;
                      x.BackOrderQuantity = null;
                      x.BackOrderPrice = TdDecimal.Null;
            
                      // Write out today's orders to the file.
                      //
                      // Open the file.
                      XmlWriterSettings settings = new XmlWriterSettings();
                      settings.Indent = true;
                      XmlWriter writer = XmlWriter.Create(@"C:\Temp\TodayOrders.XML", settings);
                      writer.WriteStartElement("TodayOrders");
                
                      // Write out the schema.
                      XmlSchemas schemas = new XmlSchemas();
                      XmlSchemaExporter schExporter = new XmlSchemaExporter(schemas);
                      schExporter.ExportTypeMapping(new XmlReflectionImporter().ImportTypeMapping(typeof(Order)));
                      schemas[0].Write(writer);
            
                      // Write out the orders.
                      XmlSerializer xml = new XmlSerializer(typeof(Order));
                      xml.Serialize(writer, x);
              
                      // Close the document.
                      writer.WriteEndDocument();
                      writer.Close();
                  }
              }
             
              /* Output is:
             
              &lt;TodayOrders&gt;
                &lt;xs:schema elementFormDefault="qualified" xmlns:xs="http://www.w3.org/2001/XMLSchema"&gt;
                  &lt;xs:element name="Order" nillable="true" type="Order" /&gt;
                  &lt;xs:complexType name="Order"&gt;
                    &lt;xs:sequence&gt;
                      &lt;xs:element minOccurs="1" maxOccurs="1" name="Date" type="xs:date" /&gt;
                      &lt;xs:element minOccurs="1" maxOccurs="1" name="ProductId" type="xs:int" /&gt;
                      &lt;xs:element minOccurs="1" maxOccurs="1" name="Quantity" type="xs:int" /&gt;
                      &lt;xs:element minOccurs="1" maxOccurs="1" name="BackOrderQuantity" nillable="true" type="xs:int" /&gt;
                      &lt;xs:element minOccurs="1" maxOccurs="1" name="BackOrderPrice" nillable="true" type="xs:decimal" /&gt;
                    &lt;/xs:sequence&gt;
                  &lt;/xs:complexType&gt;
                &lt;/xs:schema&gt;
                &lt;Order xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xmlns:xsd="http://www.w3.org/2001/XMLSchema"&gt;
                  &lt;Date&gt;2007-02-01&lt;/Date&gt;
                  &lt;ProductId&gt;100&lt;/ProductId&gt;
                  &lt;Quantity&gt;2000&lt;/Quantity&gt;
                  &lt;BackOrderQuantity xsi:nil="true" /&gt;
                  &lt;BackOrderPrice xsi:nil="true" /&gt;
                &lt;/Order&gt;
              &lt;/TodayOrders&gt;
             
              */
             </code>
             </example>        
        </member>
        <member name="P:Teradata.Client.Provider.TdDate.ObjectId">
            <summary>
            Gets the Instance Object Identifier.
            </summary>
        </member>
        <member name="P:Teradata.Client.Provider.TdDate.IsNull">
            <summary>
            Indicates whether this TdDate instance is <see cref="F:Teradata.Client.Provider.TdDate.Null"/>. 
            </summary>
            <value>
            <c>true</c> if this TdDate is Null; <c>false</c> otherwise.
            </value>
        </member>
        <member name="P:Teradata.Client.Provider.TdDate.Year">
            <summary>
            The Year of the date contained in this instance of TdDate is returned.
            </summary>
            
            <value>
            The year specified in the date.
            </value>
            
            <exception cref="T:Teradata.Client.Provider.TdException">This instance is <see cref="F:Teradata.Client.Provider.TdDate.Null"/>.</exception>
        </member>
        <member name="P:Teradata.Client.Provider.TdDate.Month">
            <summary>
            The Month of the date contained in this instance of TdDate is returned.
            </summary>
            
            <value>
            The month specified in the date.
            </value>
            
            <exception cref="T:Teradata.Client.Provider.TdException">This instance is <see cref="F:Teradata.Client.Provider.TdDate.Null"/>.</exception>
        </member>
        <member name="P:Teradata.Client.Provider.TdDate.Day">
            <summary>
            The Day of the date contained in this instance of TdDate is returned.  
            </summary>
            
            <value>
            The day of the month represented by this instance is returned.  The value returned
            will range from 1 to 31.
            </value>
            
            <exception cref="T:Teradata.Client.Provider.TdException">This instance is <see cref="F:Teradata.Client.Provider.TdDate.Null"/>.</exception>
        </member>
        <member name="P:Teradata.Client.Provider.TdDate.Value">
            <summary>
            Gets the DateTime representation of this TdDate instance.
            </summary>
            
            <exception cref="T:Teradata.Client.Provider.TdException">This instance is <see cref="F:Teradata.Client.Provider.TdDate.Null"/>.</exception>
            
            <remarks>
            The time component of the DateTime structure will be set to 
            "00:00:00.000".
            </remarks>
        </member>
        <member name="T:Teradata.Client.Provider.TdPeriodTime">
            <summary>
            TdPeriodTime is a .Net Data Provider for Teradata specific type that represents
            a duration of time that is bound by beginning and ending times.  
            </summary>
            
            <remarks>
            <para>The Teradata Database introduced the Period type in release 13.00.00.00.  Unfortunately,
            the .Net Framework does not contain a system type that corresponds to the Teradata
            <strong>Period(Time)</strong> type.  Therefore, the Teradata provider exposes the
            TdPeriodTime type which enables an application to work with data of type Period(Time).</para>
            
            <para>Similar to <see cref="T:Teradata.Client.Provider.TdTime"/>, TdPeriodTime supports a <strong>scale</strong> for
            the sub-seconds.  The scale ranges from 0 to 6 and <strong>must be the same</strong> for both the beginning 
            and ending bounds.</para>
            
            <para>A period is an anchored duration.  It represents a set of contiguous time
            granules within that duration.  In the case of TdPeriodTime, the granularity of the
            time can range from 10^-6 (.000006 second) to 10^0 (1 second).  The representation of 
            a period is both inclusive and exclusive.  It is <strong>inclusive</strong> in that 
            the duration of the period begins from the beginning bound up to, but not including 
            (<strong>excluding</strong>), the ending bound.  For example suppose a 
            TdPeriodTime contains the period of:</para>
            
            <pre>    "(13:12:21.05, 20:43:27.98)"</pre>
            
            <para>The period will include "13:12:21.05" and not "20:43:27.98".  
            It has a duration of 07:31:06.93 (7 hours, 31 minutes, 6 seconds, 980000 microseconds).  
            The time element "15:21:43" is also contained in the period.</para>
            
            
            <para>The components of a period consists of the following:</para>
            
            <para>
            <list type="bullet">
                <item><strong>Time Granule</strong> This is the minimum representation
                of time within a period.  In the above example, the time granule is 10^-2 (.01 second).
                </item>
            
                <item><strong>Time Element</strong> A Time value that is contained
                within the period.  The time element in TdPeriodTime is specified using a 
                <strong>TdTime</strong>.</item>
            
                <item><strong>Beginning Bound</strong> The lower bound or the start 
                of the period.  Within a period, this value represents the "lowest" time
                element.  The beginning bound must be <strong>less than</strong> the ending bound.</item>
            
                <item><strong>Ending Bound</strong> The upper bound or the ending
                of the period.  The Ending Bound is not included in the period.  Therefore,
                No Time Element in the period can be <strong>greater or equal</strong> to the 
                Ending Bound.</item>
            
                <item><strong>Duration</strong> The number of granules in a period.
                It is represented as an interval/timespan.</item>
            </list>
            </para>
            
            <para>A TdPeriodTime can also be specified as an In, Out, or InOut parameter to a Stored 
            Procedure.  The data will be returned to an application using 
            either the <see cref="P:Teradata.Client.Provider.TdParameter.ProviderSpecificValue">TdParameter.ProviderSpecificValue</see>
            or <see cref="P:Teradata.Client.Provider.TdParameter.Value">TdParameter.Value</see> property.  Retrieving the parameter
            using TdParameter.ProviderSpecificValue, will return the data using the Period structure.  
            When TdParameter.Value is used, the data is returned as a <string>String</string> (this is
            the corresponding .Net type).</para>
            
            <seealso cref="T:Teradata.Client.Provider.TdTime"/>
            </remarks>
            
            <example>
            The following is an example on retrieving a TdPeriodTime, modify the period, and then 
            updating the period.
            
            <code>
            Public void PeriodDateExample(TdCommand cmd, String studentId)
            {
               cmd.Parameter.Clear();
            
               cmd.CommandText = "SELECT timePeriod  " +
                               "FROM ClassDetention " +
                               "WHERE StudentId = ?";
            
               cmd.CommandType = CommandType.Text;
            
               // creating the parameter
               cmd.Parameters.Add(null, TdType.Varchar, 9,
                  System.Data.ParameterDirection.Input, true, 0, 0, null,    
                  System.Data.DataRowVersion.Default, studentId);
            
               TdDataReader dr = null;
             
               Int32 i = 0;
            
               TdPeriodTime detention;
            
               Try
               {
                  dr = cmd.ExecuteReader();
            
                  If (false == dr.Read())
                  {
            	       return;
                  }
               
                  // Retrieving the Period
                  detention = dr.GetTdPeriodTime(0);
               }
               finally
               {
                  if (dr != null)
                  {
                     dr.Close();
                  }
               }
            
               // An additional 1 hour will be added to ending bound.
            
               // Specifying a TimeSpan of 1 hour
               System.TimeSpan extraHours = new TimeSpan(1, 0, 0);
            
               // Getting the ending bound of the period and
               // adding 1 hour to it
               detention = new TdPeriodTime(detention.Begin, detention.End + extraHours);    
            
               cmd.Parameters.Clear();
            
               cmd.CommandText = "UPDATE classDetention " +
                                    "SET timePeriod = ? " +
                                    "WHERE StudentId = ?";
            
               cmd.Parameters.Add(null, TdType.PeriodTime, 0,
                     System.Data.ParameterDirection.Input, true, 0, 0, null,    
                     System.Data.DataRowVersion.Default, detention);
            
               cmd.Parameters.Add(null, TdType.Varchar, 9,
                     System.Data.ParameterDirection.Input, true, 0, 0, null,    
                     System.Data.DataRowVersion.Default, studentId);
            
               cmd.ExecuteNonQuery();
            }
            
            </code> 
            </example>
            
            <seealso cref="!:PeriodTypeOverview.html">Provider Specific Types:  Period Type Overview</seealso>
        </member>
        <member name="F:Teradata.Client.Provider.TdPeriodTime.Null">
            <summary>
            Gets a Null TdPeriodTime instance.
            </summary>
            <value>
            Returns a TdPeriodTime instance that represents a <strong>Null</strong> value.
            </value>
            <remarks>
            Conceptually it is the constructor for <strong>Null</strong> TdPeriodTime instances.
            </remarks>
            <example>
            This example shows how to send a <strong>Null</strong> value to a Teradata database.
            <code>
            TdParameter col1 = new TdParameter();
            col1.TdType = TdType.PeriodTime;
            col1.Value = TdPeriodTime.Null;
            </code>
            </example>
        </member>
        <member name="F:Teradata.Client.Provider.TdPeriodTime.MinValue">
            <summary>
            The minimum value of a period which is 
            "(00:00:00.000000, 00:00:00.000001)".
            </summary>
        </member>
        <member name="F:Teradata.Client.Provider.TdPeriodTime.MaxValue">
            <summary>
            The maximum value of a period which is
            "(23:59:59.999998, 23:59:59.999999)".
            </summary>
        </member>
        <member name="M:Teradata.Client.Provider.TdPeriodTime.#ctor(Teradata.Client.Provider.TdTime,Teradata.Client.Provider.TdTime)">
            <summary>
            A period is created from two TdTime structures that represent the lower and upper bounds
            of the duration.
            </summary>
            <exception cref="T:System.ArgumentNullException">Either the begin or end date is null.</exception>
            <exception cref="T:System.ArgumentOutOfRangeException">Ending bound is less than the beginning bound.</exception>
            <param name="beginBound">The starting time of the period.</param>
            <param name="endBound">The ending time of the period.</param>
            <remarks>
            <para>The <see cref="P:Teradata.Client.Provider.TdPeriodTime.Scale"/> will be set to the maximum scale between the 
            <paramref name="beginBound"/> and <paramref name="endBound"/> parameters.</para>
            <seealso cref="T:Teradata.Client.Provider.TdTime"/>
            </remarks>
        </member>
        <member name="M:Teradata.Client.Provider.TdPeriodTime.#ctor(Teradata.Client.Provider.TdTime,Teradata.Client.Provider.TdTime,System.Byte)">
            <summary>
            A period is created from two TdTime structures that represent the lower and upper bounds
            of the duration.
            </summary>
            <exception cref="T:System.ArgumentNullException">Either the begin or end date is null.</exception>
            <exception cref="T:System.ArgumentOutOfRangeException">Ending bound is less than the beginning bound.</exception>
            <param name="beginBound">The starting time of the period.</param>
            <param name="endBound">The ending time of the period.</param>
            <param name="scale">The scale that will be applied to both the beginning and ending bounds.</param>
            <remarks>
            <para>There is a scenario that can occur when the bounds are being 
            adjusted based on the scale parameter.  If the adjustment of the 
            ending bound causes the time to go into the next 24 hours, the period
            will be invalid.  For example, suppose the begin and end parameters are</para>
            
            <pre>    10:21:32.2293+08:00, 23:59:59.99999+08:00</pre>
            
            <para>and a scale is <strong>0</strong>.  When the data has been adjusted
            the bounds of the period will be</para>
            
            <pre>    10:21:32+08:00, 00:00:00+08:00</pre>
            
            <para>This is an invalid period.  In this situation, an ArgumentOutOfRangeException
            will get thrown.</para>
            </remarks>
        </member>
        <member name="M:Teradata.Client.Provider.TdPeriodTime.op_Explicit(Teradata.Client.Provider.TdPeriodTime)~Teradata.Client.Provider.TdPeriodTimeWithTimeZone">
            <summary>
            Converts a TdPeriodTime into a TdPeriodTimeWithTimeZone.
            </summary>
            <param name="value">The TdPeriodTime that will be converted into a TdPeriodTimeWithTimeZone.</param>
            <returns>A TdPeriodTimeWithTimeZone is returned.</returns>
            <remarks>
            When the TdPeriodTime is converted into a TdPeriodTimeWithTimeZone, the 
            UTC offset will be set to the offset of the local machine.
            </remarks>
        </member>
        <member name="M:Teradata.Client.Provider.TdPeriodTime.GetHashCode">
            <summary>
            Returns the hash code for this instance. 
            </summary>
            <returns>The hash code is returned.</returns>
            <remarks>
            <para>When calculating the hash code of a Period the algorithm that is used is</para>
            <para><see cref="P:Teradata.Client.Provider.TdPeriodTime.Begin"/> Exclusive OR (XOR) <see cref="P:Teradata.Client.Provider.TdPeriodTime.End"/></para>
            </remarks>
        </member>
        <member name="M:Teradata.Client.Provider.TdPeriodTime.Equals(System.Object)">
            <summary>
                Compares this instance against <paramref name="obj"/> to determine whether they are equal.
            </summary>
            <returns><c>true</c> is returned if the two TdPeriodTimes are equal, <c>false</c> otherwise.</returns>
            <remarks>
                <para>In order for two periods to be equivalent both their beginning and ending bounds must
                      be equivalent.</para>
            
                <para>The boolean that is returned indicates the following conditions:</para>
            
            	<para><c>false</c> will be returned if:</para>
            	<list type="bullet">
            		<item>
                        This instance or <paramref name="obj"/> is <see cref="F:Teradata.Client.Provider.TdPeriodTime.Null"/>.
                    </item>
            		<item>
                        This instance is not equal to <paramref name="obj"/>.
                    </item>
            		<item>
            			<paramref name="obj"/> is not of type TdPeriodTime or <c>null</c>.
                    </item>
            	</list>
            	<para><c>true</c> will be returned if:</para>
            	<list type="bullet">
            		<item>
                        This instance and <paramref name="obj"/> are <Strong>Null</Strong>.
                    </item>
            		<item>
                        This instance is equal to <paramref name="obj"/>.
                    </item>
            	</list>
            </remarks>
            <example>
                The following code example uses various comparison methods and operators: 
                <code lang="CS">
            TdPeriodTime  later = new TdPeriodTime(new TdTime(20, 8, 31), new TdTime(20, 12, 1));
            Object earlier = new TdPeriodTime(new TdTime(10, 9, 10), new TdTime(11, 1, 1));
             
            // The following comparison is equivalent to using
            //    false == TdPeriodTime.Equals(later, (TdPeriodTime) earlier)
            //    later != (TdPeriodTime) earlier
            //    true == TdPeriodTime.NotEquals(later, (TdPeriodTime) earlier)
            //    
            if (false == later.Equals(earlier))
            {
               Console.WriteLine(“later does not equal earlier”);
            }
                </code>
            </example>
            <overloads>Returns a Boolean indicating whether two instances of TdPeriodTime are equal.</overloads>
            <param name="obj">A TdPeriodTime that will be compared to this instance of TdPeriodTime.</param>
        </member>
        <member name="M:Teradata.Client.Provider.TdPeriodTime.Equals(Teradata.Client.Provider.TdPeriodTime)">
            <summary>
            Compares this instance and another TdPeriodTime to determine whether they are equal. 
            </summary>
            <returns><c>true</c> if the two TdPeriodTime values are equal, <c>false</c> otherwise.</returns>
            <remarks>
                <para>In order for two periods to be equivalent the beginning and ending bounds between
                      the two values must be equivalent.</para>
            
                <para>The boolean that is returned indicates the following conditions</para>
            
            	<para><c>false</c> will be returned if:</para>
            	<list type="bullet">
            		<item>
                        This instance or <paramref name="other"/> is <see cref="F:Teradata.Client.Provider.TdPeriodTime.Null"/>.
                    </item>
            		<item>
                        This instance is not equal to <paramref name="other"/>.
                    </item>
            	</list>
            	<para><c>true</c> will be returned if:</para>
            	<list type="bullet">
            		<item>
                        This instance and <paramref name="other"/> are <Strong>Null</Strong>.
                    </item>
            		<item>
                        This instance is equal to <paramref name="other"/>.
                    </item>
            	</list>
            </remarks>
            <param name="other">A TdPeriodTime that will be compared to this instance of TdPeriodTime.</param>
        </member>
        <member name="M:Teradata.Client.Provider.TdPeriodTime.Add(System.TimeSpan)">
            <summary>
            The specified TimeSpan will be added to this instance of TdPeriodTime.
            </summary>
            <param name="timeSpan">The TimeSpan that will be added.</param>
            <returns>A TdPeriodTime is returned that is the result of the TimeSpan added to this 
            instance of TdPeriodTime.</returns>
            <exception cref="T:Teradata.Client.Provider.TdException">An invalid period will result in this operation.</exception>
            <remarks>
            <para>If this instance of TdPeriodTime is <strong>Null</strong> a <see cref="F:Teradata.Client.Provider.TdPeriodTime.Null"/> 
            will be returned.</para>
            
            <para>The only component of the <see cref="T:System.TimeSpan"/> object that will be 
            considered is the time component.  When this operation is performed, the time 
            component of the TimeSpan is added to the this instance of TdPeriodTime.  For 
            example, if the period is "01:00:00, 01:30:00" and TimeSpan is 
            "1.02:00:00.00" (1 day, 2 hours) the add operation will result in a 
            period of (03:00:00, 03:30:00).</para>
            
            <para>When adding a TimeSpan to a TdPeriodTime it is possible that the ending bound
            will roll into the next 24 hours, or the beginning bound will roll into the 
            previous 24 hours.  For example, suppose the period is </para>
            
            <pre>   (19:32:32.3404, 22:00:00.3232)</pre>
            
            <para>Adding the TimeSpan of "03:00:00" (3 hours) to the period will 
            cause the ending bound to roll into the next 24 hours which will result in the 
            invalid period:</para>
            
            <pre>    (22:32:32.3404, 01:00:00.3232)</pre>
            
            <para>Subtracting the TimeSpan of "20:00:00" (20 hours) to the same period 
            will cause the beginning period to roll back into the previous 24 hours which  
            results in the invalid period:</para>
            
            <pre>    (23:32:32.3404, 02:00:00.3232)</pre>
            
            <para>Refer to <a href="PeriodArithmetic.htm">Period Arithmetic</a> for additional information.</para>
            </remarks>
        </member>
        <member name="M:Teradata.Client.Provider.TdPeriodTime.Add(Teradata.Client.Provider.TdIntervalDayToSecond)">
            <summary>
               Adds the specified <see cref="T:Teradata.Client.Provider.TdIntervalDayToSecond"/> to this instance of 
               <see cref="T:Teradata.Client.Provider.TdPeriodTime"/>.
            </summary>
            <returns>
               A <strong>TdPeriodTime</strong> is returned that is the result of adding the 
               <strong>TdIntervalDayToSecond</strong> to this instance of <strong>TdPeriodTime</strong>.
            </returns>
            <exception cref="T:Teradata.Client.Provider.TdException">Unable to add the specified <strong>TdIntervalDayToSecond</strong> to this instance of <strong>TdPeriodTime</strong>.</exception>
            <remarks>
            <para>
               If this instance of <strong>TdPeriodTime</strong> or the <paramref name="interval"/>  
               is <strong>Null</strong> a <see cref="F:Teradata.Client.Provider.TdPeriodTime.Null"/> will be returned.
            </para>
            <para>
               When this operation is performed, the day component of the interval is ignored.
               Only the hour, minute, and second components are used in this operation.  For 
               example, if the period is "01:00:00, 01:30:00" and the interval is 
               "1 02:00:00.00" (1 day, 2 hours) the add operation will result in a 
               period of (03:00:00, 03:30:00).
            </para>
            <para>
               When adding an interval to a <strong>TdPeriodTime</strong> it is possible that 
               the ending bound will roll into the next 24 hours, or the beginning bound will roll  
               into the previous 24 hours.  For example, suppose the period is 
            </para>
            <pre>   (19:32:32.3404, 22:00:00.3232)</pre>
            <para>
               Adding the interval of "0 03:00:00" (3 hours) to the period will 
               cause the ending bound to roll into the next 24 hours which will result in the 
               invalid period:
            </para>
            <pre>    (22:32:32.3404, 01:00:00.3232)</pre>
            <para>
               Adding the interval of "-0 20:00:00" (-20 hours) to the same period 
               will cause the beginning period to roll back into the previous 24 hours which  
               results in the invalid period:
            </para>
            <pre>    (23:32:32.3404, 02:00:00.3232)</pre>
            </remarks>
            <param name="interval">
               The <strong>TdIntervalDayToSecond</strong> that will be 
               added to the period.
            </param>
        </member>
        <member name="M:Teradata.Client.Provider.TdPeriodTime.Subtract(System.TimeSpan)">
            <summary>
            The specified TimeSpan will be subtracted from this instance of TdPeriodTime.
            </summary>
            <param name="timeSpan">The TimeSpan that will be subtracted.</param>
            <returns>A TdPeriodTime is returned that is the result of the TimeSpan subtracted from
            this instance of TdPeriodTime.</returns>
            <exception cref="T:Teradata.Client.Provider.TdException">An invalid period will result in this operation.</exception>
            <remarks>
            <para>If this instance of TdPeriodTime is <strong>Null</strong> a <see cref="F:Teradata.Client.Provider.TdPeriodTime.Null"/> 
            will be returned.</para>
            
            <para>The only component of the <see cref="T:System.TimeSpan"/> object that will be 
            considered is the time component.  When this operation is performed, the time 
            component of the TimeSpan is subtracted from this instance of TdPeriodTime.  For 
            example, if the period is "05:00:00, 06:30:00" and TimeSpan is 
            "1.02:00:00.00" (1 day, 2 hours) the subtract operation will result in a period 
            of (03:00:00, 04:30:00).</para>
            
            <para>When subtracting a TimeSpan from a TdPeriodTime it is possible that the ending bound
            will roll into the next 24 hours, or the beginning bound will roll into the 
            previous 24 hours.  For example, suppose the period is </para>
            
            <pre>   (19:32:32.3404, 22:00:00.3232)</pre>
            
            <para>Subtracting the TimeSpan of "20:00:00" (20 hours) from the period 
            will cause the beginning bound to roll back into the previous 24 hours which  
            results in the invalid period:</para>
            
            <pre>    (23:32:32.3404, 02:00:00.3232)</pre>
            
            <para>Subtracting the TimeSpan of "-3:00:00" (-3 hours) from the period will 
            cause the ending bound to roll into the next 24 hours which will result in the 
            invalid period:</para>
            
            <pre>    (22:32:32.3404, 01:00:00.3232)</pre>
            
            <para>Refer to <a href="PeriodArithmetic.htm">Period Arithmetic</a> for additional information.</para>
            </remarks>
        </member>
        <member name="M:Teradata.Client.Provider.TdPeriodTime.Subtract(Teradata.Client.Provider.TdIntervalDayToSecond)">
            <summary>
               Subtracts the specified <see cref="T:Teradata.Client.Provider.TdIntervalDayToSecond"/> from this instance of 
               <see cref="T:Teradata.Client.Provider.TdPeriodTime"/>.
            </summary>
            <returns>
               A <strong>TdPeriodTime</strong> is returned that is the result of subtracting the 
               <strong>TdIntervalDayToSecond</strong> from this instance of <strong>TdPeriodTime</strong>.
            </returns>        
            <exception cref="T:Teradata.Client.Provider.TdException">Unable to subtract the specified <strong>TdIntervalDayToSecond</strong> from this instance of <strong>TdPeriodTime</strong>.</exception>
            <remarks>
            <para>
               If this instance of <strong>TdPeriodTime</strong> or the <paramref name="interval"/> 
               is <strong>Null</strong> a <see cref="F:Teradata.Client.Provider.TdPeriodTime.Null"/> will be returned.
            </para>
            <para>
               When this operation is performed, the day component of the interval is
               ignored.  Only the hour, minute, and second components are used in this operation.  For 
               example, if the period is "05:00:00, 06:30:00" and the interval is 
               "1 02:00:00.00" (1 day, 2 hours) the subtract operation will result in a period 
               of "03:00:00, 04:30:00".
            </para>
            <para>
               When subtracting a interval from a <strong>TdPeriodTime</strong> it is possible 
               that the ending bound will roll into the next 24 hours, or the beginning bound will 
               roll into the previous 24 hours.  For example, suppose the period is:
            </para>
            <pre>   (19:32:32.3404, 22:00:00.3232)</pre>
            <para>
               Subtracting the interval of "0 20:00:00" (20 hours) from the period 
               will cause the beginning bound to roll back into the previous 24 hours which  
               results in the invalid period:
            </para>
            <pre>    (23:32:32.3404, 02:00:00.3232)</pre>
            <para>
               Subtracting the interval of "-0 03:00:00" (-3 hours) from the period 
               will cause the ending bound to roll into the next 24 hours which will result in the 
               invalid period:
            </para>
            <pre>    (22:32:32.3404, 01:00:00.3232)</pre>
            </remarks>
            <param name="interval">
               The <strong>TdIntervalDayToSecond</strong> interval will be  
               subtracted from this instance of <strong>TdPeriodTime</strong>.
            </param>
        </member>
        <member name="M:Teradata.Client.Provider.TdPeriodTime.op_Addition(Teradata.Client.Provider.TdPeriodTime,System.TimeSpan)">
            <summary>
            Adds the specified TimeSpan to a TdPeriodTime.
            </summary>
            <param name="period">A TdPeriodTime.</param>
            <param name="timeSpan">A TimeSpan that will be added to TdPeriodTime.</param>
            <exception cref="T:Teradata.Client.Provider.TdException">The result could not be represented as a TdPeriodTime.</exception>
            <returns>A TdPeriodTime is returned that is the result of adding the Timespan
            to TdPeriodTime.</returns>
            <overloads>
            Adds a Timespan to the Period.
            </overloads>
            <remarks>
            
            Refer to <see cref="M:Teradata.Client.Provider.TdPeriodTime.Add(System.TimeSpan)"/> and <a href="PeriodArithmetic.htm">Period Arithmetic</a> for additional information.
            </remarks>
        </member>
        <member name="M:Teradata.Client.Provider.TdPeriodTime.op_Addition(System.TimeSpan,Teradata.Client.Provider.TdPeriodTime)">
            <summary>
            Adds the specified TimeSpan to a TdPeriodTime.
            </summary>
            <param name="period">A TdPeriodTime.</param>
            <param name="timeSpan">A TimeSpan that will be added to TdPeriodTime.</param>
            <exception cref="T:Teradata.Client.Provider.TdException">The result could not be represented as a TdPeriodTime.</exception>
            <returns>A TdPeriodTime is returned that is the result of adding the Timespan
            to TdPeriodTime.</returns>
            <remarks>
            
            Refer to <see cref="M:Teradata.Client.Provider.TdPeriodTime.Add(System.TimeSpan)"/> and <a href="PeriodArithmetic.htm">Period Arithmetic</a> for additional information.
            </remarks>
        </member>
        <member name="M:Teradata.Client.Provider.TdPeriodTime.op_Addition(Teradata.Client.Provider.TdPeriodTime,Teradata.Client.Provider.TdIntervalDayToSecond)">
            <summary>
               Adds the specified <see cref="T:Teradata.Client.Provider.TdIntervalDayToSecond"/> to a <see cref="T:Teradata.Client.Provider.TdPeriodTime"/>.
            </summary>
            <returns>
               A <strong>TdPeriodTime</strong> is returned that is the result of adding the 
               <strong>TdIntervalDayToSecond</strong> to a <strong>TdPeriodTime</strong>.
            </returns>
            <exception cref="T:Teradata.Client.Provider.TdException">Unable to add the specified <strong>TdIntervalDayToSecond</strong> to a <strong>TdPeriodTime</strong>.</exception>
            <remarks>
            <para>
               If <paramref name="period"/> or the <paramref name="interval"/>  
               is <strong>Null</strong> a <see cref="F:Teradata.Client.Provider.TdPeriodTime.Null"/> will be returned.
            </para>
            <para>
               When this operation is performed, the day component of the interval is ignored.
               Only the hour, minute, and second components are used in this operation.  For 
               example, if the period is "01:00:00, 01:30:00" and the interval is 
               "1 02:00:00.00" (1 day, 2 hours) the add operation will result in a 
               period of (03:00:00, 03:30:00).
            </para>
            <para>
               When adding an interval to a <strong>TdPeriodTime</strong> it is possible that 
               the ending bound will roll into the next 24 hours, or the beginning bound will roll 
               into the previous 24 hours.  For example, suppose the period is 
            </para>
            <pre>   (19:32:32.3404;, 22:00:00.3232)</pre>
            <para>
               Adding the interval of "0 03:00:00" (3 hours) to the period will 
               cause the ending bound to roll into the next 24 hours which will result in the 
               invalid period:
            </para>
            <pre>    (22:32:32.3404, 01:00:00.3232)</pre>
            <para>
               Adding the interval of "-0 20:00:00" (-20 hours) to the same period 
               will cause the beginning period to roll back into the previous 24 hours which  
               results in the invalid period:
            </para>
            <pre>    (23:32:32.3404, 02:00:00.3232)</pre>
            </remarks>
            <param name="period">A <strong>TdPeriodTime</strong>.</param>
            <param name="interval">
               The <strong>TdIntervalDayToSecond</strong> that will be 
               added to the period.
            </param>
        </member>
        <member name="M:Teradata.Client.Provider.TdPeriodTime.op_Addition(Teradata.Client.Provider.TdIntervalDayToSecond,Teradata.Client.Provider.TdPeriodTime)">
            <summary>
               Adds the specified <see cref="T:Teradata.Client.Provider.TdIntervalDayToSecond"/> to a <see cref="T:Teradata.Client.Provider.TdPeriodTime"/>.
            </summary>
            <returns>
               A <strong>TdPeriodTime</strong> is returned that is the result of adding the 
               <strong>TdIntervalDayToSecond</strong> to a <strong>TdPeriodTime</strong>.
            </returns>
            <exception cref="T:Teradata.Client.Provider.TdException">Unable to add the specified <strong>TdIntervalDayToSecond</strong> to a <strong>TdPeriodTime</strong>.</exception>
            <remarks>
            <para>
               If <paramref name="period"/> or the <paramref name="interval"/>  
               is <strong>Null</strong> a <see cref="F:Teradata.Client.Provider.TdPeriodTime.Null"/> will be returned.
            </para>
            <para>
               When this operation is performed, the day component of the interval is ignored.
               Only the hour, minute, and second components are used in this operation.  For 
               example, if the period is "01:00:00, 01:30:00" and the interval is 
               "1 02:00:00.00" (1 day, 2 hours) the add operation will result in a 
               period of (03:00:00, 03:30:00).
            </para>
            <para>
               When adding an interval to a <strong>TdPeriodTime</strong> it is possible that 
               the ending bound will roll into the next 24 hours, or the beginning bound will roll 
               into the previous 24 hours.  For example, suppose the period is 
            </para>
            <pre>   (19:32:32.3404;, 22:00:00.3232)</pre>
            <para>
               Adding the interval of "0 03:00:00" (3 hours) to the period will 
               cause the ending bound to roll into the next 24 hours which will result in the 
               invalid period:
            </para>
            <pre>    (22:32:32.3404, 01:00:00.3232)</pre>
            <para>
               Adding the interval of "-0 20:00:00" (-20 hours) to the same period 
               will cause the beginning period to roll back into the previous 24 hours which  
               results in the invalid period:
            </para>
            <pre>    (23:32:32.3404, 02:00:00.3232)</pre>
            </remarks>
            <param name="interval">
               The <strong>TdIntervalDayToSecond</strong> that will be 
               added to the period.
            </param>
            <param name="period">A <strong>TdPeriodTime</strong>.</param>
        </member>
        <member name="M:Teradata.Client.Provider.TdPeriodTime.op_Subtraction(Teradata.Client.Provider.TdPeriodTime,System.TimeSpan)">
            <summary>
            Subtracts the specified TimeSpan from a TdPeriodTime.
            </summary>
            <param name="period">A TdPeriodTime.</param>
            <param name="timeSpan">A TimeSpan that will be subtracted
            from the TdPeriodTime</param>
            <returns>A TdPeriodTime is returned that is the result of subtracting the TimeSpan 
            from the TdPeriodTime.</returns>
            <exception cref="T:Teradata.Client.Provider.TdException">The result could not be represented as a TdPeriodTime.</exception>
            <remarks>
            Refer to <see cref="M:Teradata.Client.Provider.TdPeriodTime.Subtract(System.TimeSpan)"/> and <a href="PeriodArithmetic.htm">Period Arithmetic</a> for additional information.
            </remarks>
        </member>
        <member name="M:Teradata.Client.Provider.TdPeriodTime.op_Subtraction(Teradata.Client.Provider.TdPeriodTime,Teradata.Client.Provider.TdIntervalDayToSecond)">
            <summary>
               Subtracts the specified <see cref="T:Teradata.Client.Provider.TdIntervalDayToSecond"/> from a <see cref="T:Teradata.Client.Provider.TdPeriodTime"/>.
            </summary>
            <returns>
               A <strong>TdPeriodTime</strong> is returned that is the result of subtracting the 
               <strong>TdIntervalDayToSecond</strong> from a <strong>TdPeriodTime</strong>.
            </returns>        
            <exception cref="T:Teradata.Client.Provider.TdException">Unable to subtract the specified <strong>TdIntervalDayToSecond</strong> from a <strong>TdPeriodTime</strong>.</exception>
            <remarks>
            <para>
               If <paramref name="period"/> or the <paramref name="interval"/> 
               is <strong>Null</strong> a <see cref="F:Teradata.Client.Provider.TdPeriodTime.Null"/> will be returned.
            </para>
            <para>
               When this operation is performed, the day component of the interval is
               ignored.  Only the hour, minute, and second components are used in this operation.  For 
               example, if the period is "05:00:00, 06:30:00" and the interval is 
               "1 02:00:00.00" (1 day, 2 hours) the subtract operation will result in a period 
               of "03:00:00, 04:30:00".
            </para>
            <para>
               When subtracting a interval from a <strong>TdPeriodTime</strong> it is possible 
               that the ending bound will roll into the next 24 hours, or the beginning bound will roll 
               into the previous 24 hours.  For example, suppose the period is:
            </para>
            <pre>   (19:32:32.3404, 22:00:00.3232)</pre>
            <para>
               Subtracting the interval of "0 20:00:00" (20 hours) from the period 
               will cause the beginning bound to roll back into the previous 24 hours which  
               results in the invalid period:
            </para>
            <pre>    (23:32:32.3404, 02:00:00.3232)</pre>
            <para>
               Subtracting the interval of "-0 03:00:00" (-3 hours) from the period will 
               cause the ending bound to roll into the next 24 hours which will result in the 
               invalid period:
            </para>
            <pre>    (22:32:32.3404, 01:00:00.3232)</pre>
            </remarks>
            <param name="period">A <strong>TdPeriodTime</strong>.</param>
            <param name="interval">
               The <strong>TdIntervalDayToSecond</strong> interval will be  
               subtracted from a <strong>TdPeriodTime</strong>.
            </param>
        </member>
        <member name="M:Teradata.Client.Provider.TdPeriodTime.Compare(Teradata.Client.Provider.TdPeriodTime,Teradata.Client.Provider.TdPeriodTime)">
            <summary>
            Compares two instances of TdPeriodTime structures and returns a value indicating whether <paramref name="left"/> is
            greater than, less than or equal to <paramref name="right"/>.
            </summary>
            <returns>
            The result of the comparison is returned as an integer.
            </returns>
            <remarks>
            <para>The beginning and ending bounds of the two period operands are used in the comparison.  
              The integer returned when the bounds of the left is compared to right operand
              indicates the following:
            </para>
                <para>
            	<list type="table">
            		<listheader>
            			<term>Return Value</term>
            			<description>Meaning</description>
            		</listheader>
            		<item>
            			<term>Less than zero</term>
            			<description>
                            <para><paramref name="left"/> is less than <paramref name="right"/>.</para> 
                            <para>-or-</para>
                            <para><paramref name="left"/> is <see cref="F:Teradata.Client.Provider.TdPeriodTime.Null"/>.</para><br/>
                            <para><strong>Comparison Algorithm</strong></para>
                            <para>    left.Begin &lt; right.Begin OR (left.Begin == right.Begin AND left.End &lt; right.End)</para>
                        </description>
            		</item>
            		<item>
            			<term>Zero</term>
            			<description>
                            <para><paramref name="left"/> is equal to <paramref name="right"/>.</para>
                            <para>-or-</para>
                            <para><paramref name="left"/> and <paramref name="right"/> are <Strong>Null</Strong>.</para><br/>
                            <para><strong>Comparison Algorithm</strong></para>
                            <para>    left.Begin == right.Begin AND left.End == right.End</para>
                        </description>
            		</item>
            		<item>
            			<term>Greater than zero</term>
            			<description>
                            <para><paramref name="left"/> is greater than <paramref name="right"/>.</para>
                            <para>-or-</para>
                            <para><paramref name="right"/> is <Strong>Null.</Strong></para><br/>
                            <para><strong>Comparison Algorithm</strong></para>
                            <para>   left.Begin &gt; right.Begin OR (left.Begin == right.Begin AND left.End &gt; right.End)</para>
                        </description>
            		</item>
            	</list>       
                </para>
            </remarks>
            <seealso cref="M:Teradata.Client.Provider.TdPeriodTime.CompareTo(Teradata.Client.Provider.TdPeriodTime)"/>
            <param name="left">An instance of TdPeriodTime.</param>
            <param name="right">An instance of TdPeriodTime.</param>
        </member>
        <member name="M:Teradata.Client.Provider.TdPeriodTime.Equals(Teradata.Client.Provider.TdPeriodTime,Teradata.Client.Provider.TdPeriodTime)">
            <summary>
                Compares two <see cref="T:Teradata.Client.Provider.TdPeriodTime"/> structures to determine whether they are
                equal.
            </summary>
            <returns>
            <para>A boolean is returned that indicates the result of the comparison.</para>
            </returns>
            <remarks>
            <para>To determine whether two periods are equal, the beginning and ending bounds between
            the left and right operands are compared.  The two periods are equal if the following is true:</para>
            
            <pre>    left.Begin == right.Begin &amp;&amp; left.End == right.Begin</pre>
            
            	<para>
            		The value returned is <c>true</c> if the <paramref name="left"/> is 
                    equal to the <paramref name="right"/>, <c>false</c> otherwise.
                </para>
            	<para>
            		<list type="table">
            			<listheader>
            				<term>Return Value</term>
            				<description>Description</description>
            			</listheader>
            			<item>
            				<term><c>true</c></term>
                            <description>
                                <para><paramref name="left"/> and <paramref name="right"/> are <see cref="F:Teradata.Client.Provider.TdPeriodTime.Null"/></para> 
                                <para>-or-</para>
                                <para><paramref name="left"/> is equal to <paramref name="right"/>.</para>
                            </description>
            			</item>
            			<item>
            				<term><c>false</c></term>
                            <description>
                            <para><paramref name="left"/> or <paramref name="right"/> is <strong>Null</strong></para>
                            <para>-or-</para>
                            <para><paramref name="left"/> is not equal to <paramref name="right"/>.</para>
                            </description>
            			</item>
            		</list>
            	</para>
            </remarks>
            <example>
                The following code example uses various comparison methods and operators.
                <code lang="CS">
            TdPeriodTime  later = new TdPeriodTime(
                new TdTime(09, 8, 31, 0), new TdTime(14, 10, 25, 0));
            
            TdPeriodTime earlier = new TdPeriodTime(
                new TdTime(01, 8, 31, 0), new TdTime(05, 0, 0, 0);
             
            // The following comparison methods and operators are equivalent
            if (false == TdPeriodTime.Equals(later, earlier) ||
                late != earlier ||
                true == TdPeriodTime.NotEquals(later, earlier) )
            {
               Console.WriteLine(“later does not equal earlier”);
            }
                </code>
            </example>
            <param name="left">A TdPeriodTime instance.</param>
            <param name="right">A TdPeriodTime instance.</param>
        </member>
        <member name="M:Teradata.Client.Provider.TdPeriodTime.NotEquals(Teradata.Client.Provider.TdPeriodTime,Teradata.Client.Provider.TdPeriodTime)">
            <summary>
            Compares two TdPeriodTime structures to determine whether the <paramref name="left"/> operand is 
            not equal to the <paramref name="right"/> operand.
            </summary>
            <returns>
            A boolean is returned that indicates the result of the comparison.
            </returns>
            <remarks>
            <para>To determine whether two periods are not equal, the beginning and ending bounds between
            the left and right operands are compared.  The two periods are not equal if the following is true:</para>
            
            <pre>    left.Begin != right.Begin || left.End != right.End</pre>
            
            	<para>
            		The value returned is <c>true</c> if the <paramref name="left"/> is 
                    not equal to the <paramref name="right"/>, <c>false</c> otherwise.
                </para>
            	<para>
            		<list type="table">
            			<listheader>
            				<term>Return Value</term>
            				<description>Description</description>
            			</listheader>
            			<item>
            				<term><c>true</c></term>
                            <description>
                                <para><paramref name="left"/> or <paramref name="right"/> is <see cref="F:Teradata.Client.Provider.TdPeriodTime.Null"/></para> 
                                <para>-or-</para>
                                <para><paramref name="left"/> is less than or greater than <paramref name="right"/>.</para>
                            </description>
            			</item>
            			<item>
            				<term><c>false</c></term>
                            <description>
                            <para><paramref name="left"/> and <paramref name="right"/> are <strong>Null</strong></para>
                            <para>-or-</para>
                            <para><paramref name="left"/> is equal to <paramref name="right"/>.</para>
                            </description>
            			</item>
            		</list>
            	</para>
            </remarks>
            <param name="left">An instance of TdPeriodTime.</param>
            <param name="right">An instance of TdPeriodTime.</param>        
        </member>
        <member name="M:Teradata.Client.Provider.TdPeriodTime.GreaterThan(Teradata.Client.Provider.TdPeriodTime,Teradata.Client.Provider.TdPeriodTime)">
            <summary>
            Compares two TdPeriodTime structures to determine whether the <paramref name="left"/> operand is 
            greater than the <paramref name="right"/> operand.
            </summary>
            <returns>
            A boolean is returned that indicates the result of the comparison.
            </returns>
            <remarks>
            <para>The beginning 
            and ending bounds between the left and right operands are compared to 
            determine whether the left period is greater than the right.  The left is greater
            than the right if the following is true:</para>
            
            <pre>    left.Begin &gt; right.Begin OR (left.Begin == right.Begin AND left.End &gt; right.End)</pre>
            
            	<para>
            		The value returned is <c>true</c> if the <paramref name="left"/> is greater
                    than the <paramref name="right"/>, <c>false</c> otherwise.
                </para>
            	<para>
            		<list type="table">
            			<listheader>
            				<term>Return Value</term>
            				<description>Description</description>
            			</listheader>
            			<item>
            				<term><c>true</c></term>
                            <description><paramref name="left"/> and <paramref name="right"/> are not <see cref="F:Teradata.Client.Provider.TdPeriodTime.Null"/> and
                            <paramref name="left"/> is greater than <paramref name="right"/>.
                            </description>
            			</item>
            			<item>
            				<term><c>false</c></term>
                            <description>
                            <para><paramref name="left"/> and / or <paramref name="right"/> is <strong>Null</strong> </para>
                            <para>-or-</para>
                            <para><paramref name="left"/> is less than or equal to <paramref name="right"/>.</para>
                            </description>
            			</item>
            		</list>
            	</para>
            
            <para>Comparison operators always returns <c>false</c> if one of the operands is 
            <strong>Null</strong>.  Therefore, you must not assume that the reverse condition 
            is <c>true</c>. For example you cannot assume that the left operand is less than or 
            equal to the right operand if the <c>GreaterThan</c> operator returns <c>false</c>.</para> 
            
            </remarks>
            <param name="left">An instance of TdPeriodTime.</param>
            <param name="right">An instance of TdPeriodTime.</param>
        </member>
        <member name="M:Teradata.Client.Provider.TdPeriodTime.GreaterThanOrEqual(Teradata.Client.Provider.TdPeriodTime,Teradata.Client.Provider.TdPeriodTime)">
            <summary>
            Compares two TdPeriodTime structures to determine whether the <paramref name="left"/> operand is 
            greater than or equal to the <paramref name="right"/> operand.
            </summary>
            <returns>
            A boolean is returned that indicates the result of the comparison.
            </returns>
            <remarks>
            <para>In order to perform this comparison the beginning and ending bounds of the left
            and right operands are compared against each other.  The left is greater than or equal
            to the right if the following is true:</para>
            
            <pre>    ((left.Begin &gt; right.Begin) OR (left.Begin == right.Begin AND left.End &gt;= right.End))</pre>
            
            	<para>
            		The value returned is <c>true</c> if the <paramref name="left"/> is greater
                    than or equal to the <paramref name="right"/>, <c>false</c> otherwise.
                </para>
            	<para>
            		<list type="table">
            			<listheader>
            				<term>Return Value</term>
            				<description>Description</description>
            			</listheader>
            			<item>
            				<term><c>true</c></term>
                            <description><paramref name="left"/> and <paramref name="right"/> are not <see cref="F:Teradata.Client.Provider.TdPeriodTime.Null"/> and
                            <paramref name="left"/> is greater than or equal to <paramref name="right"/>.
                            </description>
            			</item>
            			<item>
            				<term><c>false</c></term>
                            <description>
                            <para><paramref name="left"/> and / or <paramref name="right"/> is <strong>Null</strong> </para>
                            <para>-or-</para>
                            <para><paramref name="left"/> is less than <paramref name="right"/>.</para>
                            </description>
            			</item>
            		</list>
            	</para>
            
            <para>Comparison operators always returns <c>false</c> if one of the operands is 
            <strong>Null</strong>.  Therefore, you must not assume that the reverse condition is 
            <c>true</c>. For example you cannot assume that the left operand is less than the right 
            operand if <c>GreaterThanOrEqual</c> operator returns <c>false</c>.</para> 
            
            </remarks>
            <param name="left">An instance of TdPeriodTime.</param>
            <param name="right">An instance of TdPeriodTime.</param>
        </member>
        <member name="M:Teradata.Client.Provider.TdPeriodTime.LessThan(Teradata.Client.Provider.TdPeriodTime,Teradata.Client.Provider.TdPeriodTime)">
            <summary>
            Compares two TdPeriodTime structures to determine whether the <paramref name="left"/> operand is 
            less than the <paramref name="right"/> operand.
            </summary>
            <returns>
            A boolean is returned that indicates the result of the comparison.
            </returns>
            <remarks>
            <para>In order to perform this comparison the beginning and ending bounds of the left
            and right operands are compared against each other.  The left is less than the right if 
            the following is true:</para>
            
            <pre>    left.Begin &lt; right.Begin || (left.Begin == right.Begin &amp;&amp; left.End &lt; right.End)</pre>
            
            	<para>
            		The value returned is <c>true</c> if the <paramref name="left"/> is less
                    than the <paramref name="right"/>, <c>false</c> otherwise.
                </para>
            	<para>
            		<list type="table">
            			<listheader>
            				<term>Return Value</term>
            				<description>Description</description>
            			</listheader>
            			<item>
            				<term><c>true</c></term>
                            <description><paramref name="left"/> and <paramref name="right"/> are not <see cref="F:Teradata.Client.Provider.TdPeriodTime.Null"/> and
                            <paramref name="left"/> is less than <paramref name="right"/>.
                            </description>
            			</item>
            			<item>
            				<term><c>false</c></term>
                            <description>
                            <para><paramref name="left"/> and / or <paramref name="right"/> is <strong>Null</strong></para>
                            <para>-or-</para>
                            <para><paramref name="left"/> is greater than or equal to <paramref name="right"/>.</para>
                            </description>
            			</item>
            		</list>
            	</para>
            <para>Comparison operators always returns <c>false</c> if one of the operands is 
            <strong>Null</strong>.  Therefore, you must not assume that the reverse condition 
            is <c>true</c>. For example you cannot assume that the left operand is greater than 
            or equal the right operand if the <c>LessThan</c> operator returns <c>false</c>.</para> 
            
            </remarks>
            <param name="left">An instance of TdPeriodTime.</param>
            <param name="right">An instance of TdPeriodTime.</param>
        </member>
        <member name="M:Teradata.Client.Provider.TdPeriodTime.LessThanOrEqual(Teradata.Client.Provider.TdPeriodTime,Teradata.Client.Provider.TdPeriodTime)">
            <summary>
            Compares two TdPeriodTime structures to determine whether the <paramref name="left"/> operand is 
            less than or equal to the <paramref name="right"/> operand.
            </summary>
            <returns>
            A boolean is returned that indicates the result of the comparison.
            </returns>
            <remarks>
            <para>In order to perform this comparison the beginning and ending bounds of the left
            and right operands are compared against each other.  The left is equal to or less than the right if 
            the following is true:</para>
            
            <pre>    ((left.Begin &lt; right.Begin) OR (left.Begin == right.Begin AND left.End &lt;= right.End))</pre>
            
            	<para>
            		The value returned is <c>true</c> if the <paramref name="left"/> is less
                    than or equal to the <paramref name="right"/>, <c>false</c> otherwise.
                </para>
            	<para>
            		<list type="table">
            			<listheader>
            				<term>Return Value</term>
            				<description>Description</description>
            			</listheader>
            			<item>
            				<term><c>true</c></term>
                            <description><paramref name="left"/> and <paramref name="right"/> are not <see cref="F:Teradata.Client.Provider.TdPeriodTime.Null"/> and
                            <paramref name="left"/> is less than or equal to <paramref name="right"/>.
                            </description>
            			</item>
            			<item>
            				<term><c>false</c></term>
                            <description>
                            <para><paramref name="left"/> and / or <paramref name="right"/> is <strong>Null</strong></para>
                            <para>-or-</para>
                            <para><paramref name="left"/> is greater than <paramref name="right"/>.</para>
                            </description>
            			</item>
            		</list>
            	</para>
            
            <para>Comparison operators always returns <c>false</c> if one of the operands is 
            <strong>Null</strong>.  Therefore, you must not assume that the reverse condition 
            is <c>true</c>. For example you cannot assume that the left operand is greater than 
            the right operand if the <c>LessThanOrEqual</c> operator 
            returns <c>false</c>.</para> 
            
            </remarks>
            <param name="left">An instance of TdPeriodTime.</param>
            <param name="right">An instance of TdPeriodTime.</param>
        </member>
        <member name="M:Teradata.Client.Provider.TdPeriodTime.op_Equality(Teradata.Client.Provider.TdPeriodTime,Teradata.Client.Provider.TdPeriodTime)">
            <summary>
            Compares two TdPeriodTime structures to determine whether the <paramref name="left"/> is 
            equal to the <paramref name="right"/> operand.
            </summary>
            <returns>
            A boolean is returned that indicates the result of the comparison.
            </returns>
            <remarks>
            <para>The beginning and ending bounds between the left and right operands are compared 
            to determine whether the two periods are equal.  The two periods are equal if the following 
            is true:</para>
            
            <pre>    left.Begin == right.Begin &amp;&amp; left.End == right.Begin</pre>
            	<para>
            		The value returned is <c>true</c> if the <paramref name="left"/> is 
                    equal to the <paramref name="right"/>, <c>false</c> otherwise.
                </para>
            	<para>
            		<list type="table">
            			<listheader>
            				<term>Return Value</term>
            				<description>Description</description>
            			</listheader>
            			<item>
            				<term><c>true</c></term>
                            <description>
                                <para><paramref name="left"/> and <paramref name="right"/> are <see cref="F:Teradata.Client.Provider.TdPeriodTime.Null"/></para> 
                                <para>-or-</para>
                                <para><paramref name="left"/> is equal to <paramref name="right"/>.</para>
                            </description>
            			</item>
            			<item>
            				<term><c>false</c></term>
                            <description>
                            <para><paramref name="left"/> or <paramref name="right"/> is <strong>Null</strong></para>
                            <para>-or-</para>
                            <para><paramref name="left"/> is not equal to <paramref name="right"/>.</para>
                            </description>
            			</item>
            		</list>
            	</para>
            
            <para>
            Unlike comparison operators, Equality operators do not always return <c>false</c> when 
            left and right operands are <strong>Null</strong>. Therefore the reverse condition can 
            be considered <c>true</c>. TdTime implementation is very similar to the 
            <see cref="T:System.Nullable"/> class in this regard.
            </para>
            </remarks>
            <param name="left">An instance of TdPeriodTime.</param>
            <param name="right">An instance of TdPeriodTime.</param>        
            <example>
            The following example shows that the Equality operator can safely be used in an if statement.
            <code>
             TdPeriodTime x = TdPeriodTime.Null;
             TdPeriodTime y = new TdPeriodTime(new TdTime(10, 10, 10), new TdTime(12, 11, 30));
            
             if (x == y)
             {
                 // x is equal to y.
                 Console.WriteLine(@"X is equal to Y").
             }
             else
             {
                 // x is not equal y
                 Console.WriteLine(@"X is not equal to Y").
             }
            
             y = TdPeriodTime.Null;
            
             if (x == y)
             {
                 // x is equal to y.
                 Console.WriteLine(@"X is equal to Y").
             }
             else
             {
                 // x is not equal y
                 Console.WriteLine(@"X is not equal to Y").
             }
            </code>
            </example>
        </member>
        <member name="M:Teradata.Client.Provider.TdPeriodTime.op_Inequality(Teradata.Client.Provider.TdPeriodTime,Teradata.Client.Provider.TdPeriodTime)">
            <summary>
            Compares two TdPeriodTime structures to determine whether the <paramref name="left"/> is 
            not equal to the <paramref name="right"/> operand.
            </summary>
            <returns>
            A boolean is returned that indicates the result of the comparison.
            </returns>
            <remarks>
            <para>The beginning and ending bounds between the left and right operands are 
            compared to determine whether the two periods are not equal.  The two periods 
            are not equal if the following is true:</para>
            
            <pre>    left.Begin != right.Begin || left.End != right.End</pre>
            
            	<para>
            		The value returned is <c>true</c> if the <paramref name="left"/> is 
                    not equal to the <paramref name="right"/>, <c>false</c> otherwise.
                </para>
            	<para>
            		<list type="table">
            			<listheader>
            				<term>Return Value</term>
            				<description>Description</description>
            			</listheader>
            			<item>
            				<term><c>true</c></term>
                            <description>
                                <para><paramref name="left"/> or <paramref name="right"/> is <see cref="F:Teradata.Client.Provider.TdPeriodTime.Null"/></para> 
                                <para>-or-</para>
                                <para><paramref name="left"/> is less than or greater than <paramref name="right"/>.</para>
                            </description>
            			</item>
            			<item>
            				<term><c>false</c></term>
                            <description>
                            <para><paramref name="left"/> and <paramref name="right"/> are <strong>Null</strong></para>
                            <para>-or-</para>
                            <para><paramref name="left"/> is equal to <paramref name="right"/>.</para>
                            </description>
            			</item>
            		</list>
            	</para>
            </remarks>
            <param name="left">An instance of TdPeriodTime.</param>
            <param name="right">An instance of TdPeriodTime.</param>        
        </member>
        <member name="M:Teradata.Client.Provider.TdPeriodTime.op_GreaterThan(Teradata.Client.Provider.TdPeriodTime,Teradata.Client.Provider.TdPeriodTime)">
            <summary>
            Compares two TdPeriodTime structures to determine whether the <paramref name="left"/> is 
            greater than the <paramref name="right"/> operand.
            </summary>
            <returns>
            A boolean is returned that indicates the result of the comparison.
            </returns>
            <remarks>
            <para>The beginning and ending bounds between the left and right operands are 
            compared to determine whether the left period is greater than the right.  The left is greater
            than the right if the following is true:</para>
            
            <pre>    left.Begin &gt; right.Begin OR (left.Begin == right.Begin AND left.End &gt; right.End)</pre>
            
            	<para>
            		The value returned is <c>true</c> if the <paramref name="left"/> is greater
                    than the <paramref name="right"/>, <c>false</c> otherwise.
                </para>
            	<para>
            		<list type="table">
            			<listheader>
            				<term>Return Value</term>
            				<description>Description</description>
            			</listheader>
            			<item>
            				<term><c>true</c></term>
                            <description><paramref name="left"/> and <paramref name="right"/> are not <see cref="F:Teradata.Client.Provider.TdPeriodTime.Null"/> and
                            <paramref name="left"/> is greater than <paramref name="right"/>.
                            </description>
            			</item>
            			<item>
            				<term><c>false</c></term>
                            <description>
                            <para><paramref name="left"/> and / or <paramref name="right"/> is <strong>Null</strong> </para>
                            <para>-or-</para>
                            <para><paramref name="left"/> is less than or equal to <paramref name="right"/>.</para>
                            </description>
            			</item>
            		</list>
            	</para>
            
            <para>Comparison operators always returns <c>false</c> if one of the operands is 
            <strong>Null</strong>.  Therefore, you must not assume that the reverse condition 
            is <c>true</c>. For example you cannot assume that the left operand is less than or 
            equal to the right operand if the "<c>&gt;</c>" operator returns <c>false</c>.</para> 
            </remarks>
            <param name="left">An instance of TdPeriodTime.</param>
            <param name="right">An instance of TdPeriodTime.</param>
        </member>
        <member name="M:Teradata.Client.Provider.TdPeriodTime.op_GreaterThanOrEqual(Teradata.Client.Provider.TdPeriodTime,Teradata.Client.Provider.TdPeriodTime)">
            <summary>
            Compares two TdPeriodTime structures to determine whether the <paramref name="left"/> is 
            greater than or equal to the <paramref name="right"/> operand.
            </summary>
            <returns>
            A boolean is returned that indicates the result of the comparison.
            </returns>
            <remarks>
            <para>In order to perform this comparison the beginning and ending bounds of the left
            and right operands are compared against each other.  The left is greater than or equal
            to the right if the following is true:</para>
            
            <pre>    (left.Begin &gt; right.Begin) || (left.Begin == right.Begin &amp;&amp; left.End &gt;= right.End)</pre>
            
            	<para>
            		The value returned is <c>true</c> if the <paramref name="left"/> is greater
                    than or equal to the <paramref name="right"/>, <c>false</c> otherwise.
                </para>
            	<para>
            		<list type="table">
            			<listheader>
            				<term>Return Value</term>
            				<description>Description</description>
            			</listheader>
            			<item>
            				<term><c>true</c></term>
                            <description><paramref name="left"/> and <paramref name="right"/> are not <see cref="F:Teradata.Client.Provider.TdPeriodTime.Null"/> and
                            <paramref name="left"/> is greater than or equal to <paramref name="right"/>.
                            </description>
            			</item>
            			<item>
            				<term><c>false</c></term>
                            <description>
                            <para><paramref name="left"/> and / or <paramref name="right"/> is <strong>Null</strong> </para>
                            <para>-or-</para>
                            <para><paramref name="left"/> is less than <paramref name="right"/>.</para>
                            </description>
            			</item>
            		</list>
            	</para>
            
            <para>Comparison operators always returns <c>false</c> if one of the operands is 
            <strong>Null</strong>.  Therefore, you must not assume that the reverse condition 
            is <c>true</c>. For example you cannot assume that the left operand is less than the 
            right operand if the "<c>&gt;=</c>" operator returns <c>false</c>.</para> 
            </remarks>
            <param name="left">An instance of TdPeriodTime.</param>
            <param name="right">An instance of TdPeriodTime.</param>
        </member>
        <member name="M:Teradata.Client.Provider.TdPeriodTime.op_LessThan(Teradata.Client.Provider.TdPeriodTime,Teradata.Client.Provider.TdPeriodTime)">
            <summary>
            Compares two TdPeriodTime structures to determine whether the <paramref name="left"/> is 
            less than the <paramref name="right"/> operand.
            </summary>
            <returns>
            A boolean is returned that indicates the result of the comparison.
            </returns>
            <remarks>
            <para>In order to perform this comparison the beginning and ending bounds of the left
            and right operands are compared against each other.  The left is less than the right if 
            the following is true:</para>
            
            <pre>    left.Begin &lt; right.Begin || (left.Begin == right.Begin &amp;&amp; left.End &lt; right.End)</pre>
            
            	<para>
            		The value returned is <c>true</c> if the <paramref name="left"/> is less
                    than the <paramref name="right"/>, <c>false</c> otherwise.
                </para>
            	<para>
            		<list type="table">
            			<listheader>
            				<term>Return Value</term>
            				<description>Description</description>
            			</listheader>
            			<item>
            				<term><c>true</c></term>
                            <description><paramref name="left"/> and <paramref name="right"/> are not <see cref="F:Teradata.Client.Provider.TdPeriodTime.Null"/> and
                            <paramref name="left"/> is less than <paramref name="right"/>.
                            </description>
            			</item>
            			<item>
            				<term><c>false</c></term>
                            <description>
                            <para><paramref name="left"/> and / or <paramref name="right"/> is <strong>Null</strong></para>
                            <para>-or-</para>
                            <para><paramref name="left"/> is greater than or equal to <paramref name="right"/>.</para>
                            </description>
            			</item>
            		</list>
            	</para>
            
            <para>Comparison operators always returns <c>false</c> if one of the operands is 
            <strong>Null</strong>.  Therefore, you must not assume that the reverse condition is 
            <c>true</c>. For example you cannot assume that the left operand is greater than or 
            equal the right operand if the "<c>&lt;</c>" operator returns <c>false</c>.</para> 
            </remarks>
            <param name="left">An instance of TdPeriodTime.</param>
            <param name="right">An instance of TdPeriodTime.</param>
        </member>
        <member name="M:Teradata.Client.Provider.TdPeriodTime.op_LessThanOrEqual(Teradata.Client.Provider.TdPeriodTime,Teradata.Client.Provider.TdPeriodTime)">
            <summary>
            Compares two TdPeriodTime structures to determine whether the <paramref name="left"/> is 
            less than or equal to the <paramref name="right"/> operand.
            </summary>
            <returns>
            A boolean is returned that indicates the result of the comparison.
            </returns>
            <remarks>
            <para>In order to perform this comparison the beginning and ending bounds of the left
            and right operands are compared against each other.  The left is equal to or less than the right if 
            the following is true:</para>
            
            <pre>    left.Begin &lt; right.Begin || (left.Begin == right.Begin &amp;&amp; left.End &lt;= right.End)</pre>
            
            	<para>
            		<c>true</c> if the <paramref name="left"/> is less
                    than or equal to the <paramref name="right"/>, <c>false</c> otherwise.
                </para>
            	<para>
            		<list type="table">
            			<listheader>
            				<term>Return Value</term>
            				<description>Description</description>
            			</listheader>
            			<item>
            				<term><c>true</c></term>
                            <description><paramref name="left"/> and <paramref name="right"/> are not <see cref="F:Teradata.Client.Provider.TdPeriodTime.Null"/> and
                            <paramref name="left"/> is less than or equal to <paramref name="right"/>.
                            </description>
            			</item>
            			<item>
            				<term><c>false</c></term>
                            <description>
                            <para><paramref name="left"/> and / or <paramref name="right"/> is <strong>Null</strong></para>
                            <para>-or-</para>
                            <para><paramref name="left"/> is greater than <paramref name="right"/>.</para>
                            </description>
            			</item>
            		</list>
            	</para>
            
            <para>Comparison operators always returns <c>false</c> if one of the operands is 
            <strong>Null</strong>.  Therefore, you must not assume that the reverse condition is 
            <c>true</c>. For example you cannot assume that the left operand is greater than the 
            right operand if the "<c>&lt;=</c>" operator returns <c>false</c>.</para> 
            </remarks>
            <param name="left">An instance of TdPeriodTime.</param>
            <param name="right">An instance of TdPeriodTime.</param>
        </member>
        <member name="M:Teradata.Client.Provider.TdPeriodTime.CompareTo(Teradata.Client.Provider.TdPeriodTime)">
            <summary>
            Compares this instance to the specified TdPeriodTime <paramref name="other"/>. 
            </summary>
            <returns>
            The result of the comparison is returned as an integer.
            </returns>
            <remarks>
            	<para>
                    The integer returned when this instance is compared to <paramref name="other"/>
                    indicates the following:
                </para>
            	<para>
            	<list type="table">
            		<listheader>
            			<term>Return Value</term>
            			<description>Meaning</description>
            		</listheader>
            		<item>
            			<term>Less than zero</term>
            			<description>
                            <para>This instance is less than <paramref name="other"/>.</para> 
                            <para>-or-</para>
                            <para>This instance is <see cref="F:Teradata.Client.Provider.TdPeriodTime.Null"/>.</para><br/>
                            <para><strong>Comparison Algorithm</strong></para>
                            <para>    this.Begin &lt; other.Begin OR (this.Begin == other.Begin AND this.End &lt; other.End)</para>
                        </description>
            		</item>
            		<item>
            			<term>Zero</term>
            			<description>
                            <para>This instance is equal to <paramref name="other"/>.</para>
                            <para>-or-</para>
                            <para>This instance and <paramref name="other"/> are <Strong>Null</Strong>.</para><br/>
                            <para><strong>Comparison Algorithm</strong></para>
                            <para>    this.Begin == other.Begin AND this.End == other.End</para>
                        </description>
            		</item>
            		<item>
            			<term>Greater than zero</term>
            			<description>
                            <para>This instance is greater than <paramref name="other"/>.</para>
                            <para>-or-</para>
                            <para><paramref name="other"/> is <Strong>Null.</Strong></para><br/>
                            <para><strong>Comparison Algorithm</strong></para>
                            <para>    this.Begin &gt; other.Begin OR (this.Begin == other.Begin AND this.End &gt; other.End)</para>
                        </description>
            		</item>
            	</list>     
            	</para>
            </remarks>
            <param name="other">The TdPeriodTime to compare against.</param>
        </member>
        <member name="M:Teradata.Client.Provider.TdPeriodTime.CompareTo(System.Object)">
            <summary>
            Compares this instance to the specified TdPeriodTime <paramref name="obj"/>. 
            </summary>
            
            <returns>
            The result of the comparison is returned as an integer.
            </returns>
            
            <remarks>
            	<para>
                    The integer returned when this instance is compared to <paramref name="obj"/>
                    indicates the following:
                </para>
            	<para>
            	<list type="table">
            		<listheader>
            			<term>Return Value</term>
            			<description>Meaning</description>
            		</listheader>
            		<item>
            			<term>Less than zero</term>
            			<description>
                            <para>This instance is less than <paramref name="obj"/>.</para> 
                            <para>-or-</para>
                            <para>This instance is <see cref="F:Teradata.Client.Provider.TdPeriodTime.Null"/>.</para><br/>
                            <para><strong>Comparison Algorithm</strong></para>
                            <para>    this.Begin &lt; other.Begin OR (this.Begin == other.Begin AND this.End &lt; other.End)</para>
                        </description>
            		</item>
            		<item>
            			<term>Zero</term>
            			<description>
                            <para>This instance is equal to <paramref name="obj"/>.</para>
                            <para>-or-</para>
                            <para>This instance and <paramref name="obj"/> are <Strong>Null</Strong>.</para><br/>
                            <para><strong>Comparison Algorithm</strong></para>
                            <para>    this.Begin == other.Begin AND this.End == other.End</para>
                        </description>
            		</item>
            		<item>
            			<term>Greater than zero</term>
            			<description>
                            <para>This instance is greater than <paramref name="obj"/>.</para>
                            <para>-or-</para>
                            <para><paramref name="obj"/> is <Strong>Null.</Strong></para><br/>
                            <para><strong>Comparison Algorithm</strong></para>
                            <para>    this.Begin &gt; other.Begin OR (this.Begin == other.Begin AND this.End &gt; other.End)</para>
                        </description>
            		</item>
            	</list>     
            	</para>
            
              <para><paramref name="obj"/> must be an instance of TdPeriodTime type or <c>null</c> reference.</para>
            </remarks>
            
            <exception cref="T:System.ArgumentException"><paramref name="obj"/> is not of type TdPeriodTime</exception>
            <seealso cref="M:Teradata.Client.Provider.TdPeriodTime.CompareTo(Teradata.Client.Provider.TdPeriodTime)"/>
            
            <overloads>
            Compares this instance to the supplied object and returns whether it is less
            than, equal or greater than the supplied object.
            </overloads>
            
            <param name="obj">TdPeriodTime instance to compare against.</param>
        </member>
        <member name="M:Teradata.Client.Provider.TdPeriodTime.ToString">
            <summary>
            This instance of TdPeriodTime is converted to a String representation.
            </summary>
            
            <returns>The string representation of TdPeriodTime is returned.</returns>
            
            <remarks>
            <para>When a TdPeriodTime is converted to a string, both the beginning and ending bounds 
            will be included in the returning string.  The format of the string will be:</para>
            
            <pre>    (HH:mm:ss.ffffff, HH:mm:ss.ffffff)</pre>
            
            <para>An example of a string representation of a TdPeriodTime is</para>
            
            <pre>    (20:21:56.323, 23:31:21.564)</pre>
            
            </remarks>
            <overloads>
            Returns the string representation of the period. 
            </overloads>
        </member>
        <member name="M:Teradata.Client.Provider.TdPeriodTime.ToString(System.String)">
            <summary>
            TdPeriodTime is converted to the equivalent String using the specified format.
            </summary>
            
            <param name="format">The DateTime format string that will be used to format the TdPeriodTime.</param>
            
            <returns>A string representation of the Period.</returns>
            
            <remarks>
            <para>When a TdPeriodTime is converted to a string, both the beginning and ending bounds 
            will be included in the returning string.  The format of the string will be:</para>
            
            <pre>    (<i>Beginning Bound</i>, <i>Ending Bound</i>)   </pre>
            
            <para>The format specifier and the cultural information only affects the string 
            representation of the beginning and ending bounds of the period.  Neither parameter affects
            the format of the parameter.  That is, the delimiter (comma) used to separate the beginning
            and ending bounds, and the parentheses cannot be changed.</para>
            
            <para>If the format parameter is null, the string representation of TdPeriodTime will
            be equivalent to the "G" format specifier which is</para>
            
            <pre>    (HH:mm:ss.ffffff, HH:mm:ss.ffffff)</pre>
            
            <para>The following format specifiers are supported by TdPeriodTime:</para>
            
            <para>
            <list type="table">
            <listheader>
            <term>Format Specifier</term>
            <description>Description</description>
            </listheader>
            <item>
            <term>G</term>
            <description><para>The ANSI representation of the period:  (HH:mm:ss.ffffff, HH:mm:ss.ffffff).  </para>
            <para>Example:  (10:21:31.002, 12:45:00.212).</para></description>
            </item>
            <item>
            <term>l or L</term>
            <description><para>The Teradata database's literal representation of the period:
            PERIOD'(HH:mm:ss.ffffff, HH:mm:ss.ffffff)'.</para>
            <para>Example:  PERIOD'(10:21:31.002, 12:45:00.212)'.</para></description>
            </item>
            </list>
            </para>
            
            </remarks>
            
            <seealso cref="M:Teradata.Client.Provider.TdTime.ToString(System.String)"/>
        </member>
        <member name="M:Teradata.Client.Provider.TdPeriodTime.ToString(System.String,System.IFormatProvider)">
             <summary>
             TdPeriodTime is converted into the equivalent String representation using the 
             specified format and culture information.
             </summary>
             
             <param name="format">The DateTime format string that will be used to format the TdPeriodTime.</param>
             <param name="formatProvider">The culture specific information.  The culture specific information
             is not used when converting a Period into a string.</param>
             
             <returns>A string representation of the period contained in TdPeriodTime.</returns>
             
             <remarks>
             <para>When a TdPeriodTime is converted to a string, both the beginning and ending bound 
             will be included in the returning string.  The format of the string will be:</para>
             
             <pre> (<i>Beginning Bound</i>, <i>Ending Bound</i>)   </pre>
             
             <para>The format specifier affects the string 
             representation of the beginning and ending bounds of the period.  Cultural information
             specified in the <paramref name="formatProvider"/> is ignored.</para>
            
             <para>If the format parameter is null, the string representation of TdPeriodTime will
             be equivalent to the "G" format specifier which is </para>
             
             <pre>    (HH:mm:ss.ffffff, HH:mm:ss.ffffff)   </pre>
             
             <para>The following format specifiers are supported by TdPeriodTime:</para>
             
             <para>
             <list type="table">
             <listheader>
             <term>Format Specifier</term>
             <description>Description</description>
             </listheader>
             <item>
             <term>G</term>
             <description><para>The ANSI representation of the period:  /// (HH:mm:ss.ffffff, HH:mm:ss.ffffff).  </para>
             <para>Example:  (10:21:31.002, 12:45:00.212).</para></description>
             </item>
             <item>
             <term>l or L</term>
             <description><para>The Teradata database's literal representation of the period: 
             PERIOD'(HH:mm:ss.ffffff, HH:mm:ss.ffffff)'.</para>
             <para>Example:  PERIOD'(10:21:31.002, 12:45:00.212)'.</para></description>
             </item>
             </list>
             </para>
             
             <seealso cref="M:Teradata.Client.Provider.TdTime.ToString(System.String,System.IFormatProvider)"/>
             </remarks>
        </member>
        <member name="M:Teradata.Client.Provider.TdPeriodTime.Parse(System.String)">
            <summary>
            The specified string is converted into an equivalent TdPeriodTime.
            </summary>
            
            <param name="value">The string that is to be converted into a TdPeriodTime.</param>
            
            <returns>A TdPeriodTime is returned that is equivalent to the Period contained in the value string.</returns>
            
            <exception cref="T:System.ArgumentNullException">Value is a null reference.</exception>
            <exception cref="T:System.FormatException">Value does not contain a valid representation of a period.</exception>
            
            <remarks>
            <para>A period will have the following string representation: </para>
            
            <pre>    (<i>Beginning Bound</i>, <i>Ending Bound</i>)</pre>
            
            <para>The period must be surrounded by parentheses.  Both the Beginning and Ending
            bounds can <strong>optionally</strong> be surrounded by single quotes (" ' ").  
            The exception to this is when the Teradata <strong>literal</strong> string representation of
            period is specified.
            The comma (" , ") is used as the delimeter between the Begin and End bounds.  </para>
            
            <para>Refer to <see cref="M:Teradata.Client.Provider.TdPeriodTime.ToString(System.String)"/> for valid formats for TdPeriodTime.</para>
            
            <seealso cref="M:Teradata.Client.Provider.TdTime.Parse(System.String)"/>
            <seealso cref="M:Teradata.Client.Provider.TdPeriodTime.ToString(System.String)"/>
            </remarks>
        </member>
        <member name="M:Teradata.Client.Provider.TdPeriodTime.TryParse(System.String,Teradata.Client.Provider.TdPeriodTime@)">
             <summary>
             The specified string is converted into an equivalent TdPeriodTime.
             </summary>
             <param name="value">The string that contains the TdPeriodTime representation.</param>
             <param name="result">The TdPeriodTime representation of the period contained in the specified string.</param>
             <returns>A Boolean is returned that indicates whether the conversion succeeded.  
             <c>true</c> indicates that the conversion was successful and that the conversion is 
             returned through the result parameter.  <c>false</c> indicates that the conversion 
             failed.</returns>
             <remarks>
             <para>TryParse is the same as Parse except that an exception does not get thrown 
             when the conversion fails.</para>
             
             <para>A period will have the following string representation: </para>
             
             <para>    (<i>Beginning Time</i>, <i>Ending Time</i>)   </para>
             
             <para>The period must be surrounded by parentheses.  Both the Beginning and Ending
             bounds can <strong>optionally</strong> be surrounded by single quotes (" ' ").  
             The exception to this is when the Teradata <strong>literal</strong> string representation of
             period is specified.
             The comma (" , ") is used as the delimeter between the Begin and End bounds.  </para>
             
             <para>Refer to <see cref="M:Teradata.Client.Provider.TdPeriodTime.ToString(System.String)"/> for valid formats for TdPeriodTime.</para>
             
              <para>If <paramref name="value"/> is null or String.Empty, a <strong>false</strong> is
             returned and the <paramref name="result"/> parameter is set to <see cref="F:Teradata.Client.Provider.TdPeriodTime.MinValue"/>. </para>
            
             <para>If the conversion fails the result parameter will be set to TdPeriodTime.MinValue.</para>
             
             </remarks>
             
             <seealso cref="M:Teradata.Client.Provider.TdPeriodTime.Parse(System.String)"/>
             <seealso cref="M:Teradata.Client.Provider.TdTime.TryParse(System.String,Teradata.Client.Provider.TdTime@)"/>
             <seealso cref="M:Teradata.Client.Provider.TdPeriodTime.ToString(System.String)"/>
        </member>
        <member name="M:Teradata.Client.Provider.TdPeriodTime.GetXmlSchema(System.Xml.Schema.XmlSchemaSet)">
             <summary>
             Specifies the XML Qualified name for <strong>TdPeriodTime</strong> XML type mapping.
             </summary>
             <param name="xmlSchemaSet">Holds zero or more XML Schema definition language (XSD) schemas.</param>
             <returns>
             Returns a XmlSchemaComplexType that describes a TdPeriodTime.
             </returns>
             <example>
             This examples shows how to use <strong>TdPeriodTime</strong> with the 
             <see cref="T:System.Xml.Serialization.XmlSerializer"/> class.
             <see cref="T:System.Xml.Serialization.XmlElementAttribute"/> is used to indicate that the Teradata Database 
             column can be <strong>Null</strong>.
             <code>
              public class ProductAdvertisement
              {
                  public TdDate Date;
            
                  public Int32 ProductId;
            
                  public Int32? QuantityAvailable;
             
                  public TdPeriodTime advertisePeriod
            
                  public String adPlacement;
              }
             
              internal class ProductAdvertisementWriter
              {
              
                  public static void Write()
                  {
                      // Setup the advertisement
                      ProductAdvertisement x = new ProductAdvertisement();
              
                      x.Date = new TdDate(DateTime.Today);
                      x.ProductId = 100;
                      x.QuantityAvailable = 2000;
             
                      // Advertisement will last for 7 hours
                      x.AdvertisePeriod = new TdPeriodTime(new TdTime(7, 0, 0), new TdTime(14, 0, 0);
                      x.adPlacement = "The Newspaper";
            
                      // Write out today's advertisements to the file.
                      //
                      // Open the file.
                      XmlWriterSettings settings = new XmlWriterSettings();
                      settings.Indent = true;
                      XmlWriter writer = XmlWriter.Create(@"C:\Temp\ProductAdvertisements.XML", settings);
                      writer.WriteStartElement("ProductAdvertisements");
                
                      // Write out the schema.
                      XmlSchemas schemas = new XmlSchemas();
                      XmlSchemaExporter schExporter = new XmlSchemaExporter(schemas);
                      schExporter.ExportTypeMapping(new XmlReflectionImporter().ImportTypeMapping(typeof(ProductAdvertisement)));
                      schemas[0].Write(writer);
            
                      // Write out the advertisements.
                      XmlSerializer xml = new XmlSerializer(typeof(ProductAdvertisement));
                      xml.Serialize(writer, x);
              
                      // Close the document.
                      writer.WriteEndDocument();
                      writer.Close();
                  }
              }
             
             /* Output is:
             
             <TodayOrders>
               <xs:schema elementFormDefault="qualified" xmlns:xs="http://www.w3.org/2001/XMLSchema">
                 <xs:element name="Order" nillable="true" type="Order"/>
                 <xs:complexType name="Order">
                   <xs:sequence>
                     <xs:element minOccurs="1" maxOccurs="1" name="Date" type="xs:date"/>
                     <xs:element minOccurs="1" maxOccurs="1" name="ProductId" type="xs:int"/>
                     <xs:element minOccurs="1" maxOccurs="1" name="QuantityAvailable" type="xs:int"/>
                     <xs:element minOccurs="1" maxOccurs="1" name="AdvertisePeriod" type="Teradata.Client.Provider.TdPeriodTime"/>
                     <xs:element minOccurs="1" maxOccurs="1" name="AdPlacement" nillable="true" type="xs:string"/>
                   </xs:sequence>
                 </xs:complexType>
                 <xs:complexType name="Teradata.Client.Provider.TdPeriodTime">
                   <xs:sequence>
                     <xs:element name="BeginBound" type="xs:time"/>
                     <xs:element name="EndBound" type="xs:time"/>
                   </xs:sequence>
                 </xs:complexType>
               </xs:schema>
               <Order xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xmlns:xsd="http://www.w3.org/2001/XMLSchema">
                 <Date>2007-02-01</Date>
                 <ProductId>100</ProductId>
                 <QuantityAvailable>2000</QuantityAvailable>
                 <AdvertisePeriod>
                     <BeginBound>07:00:00</BeginBound>
                     <EndBound>14:00:00</EndBound>
                 </AdvertisePeriod>
                 <AdPlacement>The Newspaper</AdPlacement>
               </Order>
             </TodayOrders>
             
             */
             </code>
             </example>        
        </member>
        <member name="M:Teradata.Client.Provider.TdPeriodTime.IntervalTimeSpan">
            <summary>
            Gets the span of time in the period as a TimeSpan.
            </summary>
            <returns>The TimeSpan value that contains the span of time starting from the beginning bound to, 
            but not including, the ending bound.</returns>
            <remarks>
            <para>The TimeSpan that is returned represents the number of hours, minutes, seconds
            and microseconds of the duration.</para>
            </remarks>
        </member>
        <member name="M:Teradata.Client.Provider.TdPeriodTime.IntervalDayToSecond">
            <summary>
               Calculates the span of time between the starting and ending bounds and 
               returns the result in a <strong>TdIntervalDayToSecond</strong> structure.  
            </summary>
            <returns>
               The <strong>TdIntervalDayToSecond</strong> value that contains the difference in hours,
               minutes, seconds and microseconds between the period ending bound and the 
               period starting bound.
            </returns>&gt;
            <exception cref="T:Teradata.Client.Provider.TdException">This instance of <strong>TdPeriodTime</strong> is null.</exception>
            <remarks>
            <para>
               The difference between the ending bound and the starting bound is calculated.  The number
               of hours, minutes, seconds and microseconds are calculated and returned in a 
               <strong>TdIntervalDayToSecond</strong> type.
            </para>
            </remarks>
        </member>
        <member name="M:Teradata.Client.Provider.TdPeriodTime.LeftDiff(Teradata.Client.Provider.TdPeriodTime,Teradata.Client.Provider.TdPeriodTime)">
            <summary>
            The period whose beginning and ending bounds are defined as the beginning bound of the 
            <paramref name="left"/> operand and the beginning bound of the <paramref name="right"/> 
            operand when the operands overlap.
            </summary>
            <param name="left">The left TdPeriodTime operand.</param>
            <param name="right">The right TdPeriodTime operand.</param>
            <returns>A TdPeriodTime is returned that includes the portion of the left operand that 
            exists before the beginning of the right operand when the operands overlap.</returns>
            <remarks>
            <para>A <see cref="F:Teradata.Client.Provider.TdPeriodTime.Null"/> is returned under the following scenarios:</para>
            
            <list type="bullet">
            <item>The left and right operands do not overlap.</item>
            <item>The beginning bound of the left operand is less than the beginning 
            bound of the right operand.</item>
            <item>Either the left or right operand is null.</item>
            </list>
            
            <para>In the following examples the left and right operand are defined as
            <strong>(bL, eL)</strong> and <strong>(bR, eR)</strong>, respectively.</para>
            
            <list type="table">
            <listheader>
            <term>Example</term>
            <description>Comments</description>
            </listheader>
            <item>
            <term>
            <pre>
            |-------|------|-------|
            bL      bR     eL      eR
            |=======|
            </pre>
            </term>
            <description>Ldiff = (bL, bR)</description>
            </item>
            <item>
            <term>
            <pre>
            |-------|-------|------|
            bL      bR      eR     eL
            |=======|
            </pre>
            </term>
            <description>Ldiff = (bL, bR)</description>
            </item>
            <item>
            <term>
            <pre>
            |-------|------|-----|
            bL      eL     bR    eR
            </pre>
            </term>
            <description><para>Ldiff = TdPeriodTime.Null</para>
            <para>The left and right operands do not overlap.</para></description>
            </item>
            <item>
            <term>
            <pre>
            |--------|-------|-------|
            bR       bL      eR      eL
            </pre>
            </term>
            <description><para>Ldiff = TdPeriodTime.Null</para>
            <para>The beginning bound of the right operand is greater than the beginning bound of the left.</para>
            </description>
            </item>
            <item>
            <term>
            <pre>
            |--------|-------|-------|
            bR       bL      eR      eL
            </pre>
            </term>
            <description><para> Ldiff = TdPeriodTime.Null</para>
            <para>The beginning bound of the right operand is greater than the beginning bound of the left.</para>
            </description>
            </item>
            <item>
            <term>
            <pre>
            |-----------|---------|
            bL        eL bR       eR
            </pre>
            </term>
            <description><para>Ldiff = TdPeriodTime.Null</para>
            <para>The left and right operands do not overlap.</para>
            </description>
            </item>
            <item>
            <term>
            <pre>
              |---------|--------|
            bL bR       eR       eL
            </pre>
            </term>
            <description><para>Ldiff = TdPeriodTime.Null</para>
            <para>The beginning bounds of both operands are equal.  A period cannot be
            created whose beginning and ending bounds are equal.</para>
            </description>
            </item>
            </list>
            </remarks>
        </member>
        <member name="M:Teradata.Client.Provider.TdPeriodTime.RightDiff(Teradata.Client.Provider.TdPeriodTime,Teradata.Client.Provider.TdPeriodTime)">
            <summary>
            The period that contains the portion from the ending bound of the <paramref name="left"/> operand to
            the ending bound of the <paramref name="right"/> when the operands overlap.
            </summary>
            <param name="left">The left TdPeriodTime operand.</param>
            <param name="right">The right TdPeriodTime operand.</param>
            <returns>A <see cref="T:Teradata.Client.Provider.TdPeriodTime"/> is returned that contains the period that begins from the 
            end of the left operand to the end of the right when the operands overlap.</returns>
            <remarks>
            <para>A <see cref="F:Teradata.Client.Provider.TdPeriodTime.Null"/> is returned under the following scenarios:</para>
            
            <list type="bullet">
            <item>The left and right operands do not overlap.</item>
            <item>The ending bound of the left operand is greater or equal to the ending bound of the right.</item>
            <item>Either the left or right operand is null.</item>
            </list>
            
            <para>In the following examples the left and right operands are defined as
            <strong>(bL, eL)</strong> and <strong>(bR, eR)</strong>, respectively.</para>
            
            
            <list type="table">
            <listheader>
            <term>Example</term>
            <description>Comments</description>
            </listheader>
            <item>
            <term>
            <pre>
            |------|------|-------|
            bL     bR     eL      eR
                          |=======|
            </pre>
            </term>
            <description>Rdiff = (eL, eR)</description>
            </item>
            <item>
            <term>
            <pre>
            |------|-----|--------|
            bR     bL    eL       eR
                         |========|
            </pre>
            </term>
            <description>Rdiff = (eL, eR)</description>
            </item>
            <item>
            <term>
            <pre>
            |-----|------|------|
            bL    bR     eR     eL
            </pre>
            </term>
            <description><para>Rdiff = null</para>
            <para>The left operand's ending bound is greater than the ending bound of the right operand.</para>
            </description>
            </item>
            <item>
            <term>
            <pre>
            |-----|-------|------|
            bL    bR      eR     eL
            </pre>
            </term>
            <description><para>Rdiff = null</para>
            <para>The left operand's ending bound is greater than the ending bound of the right operand.</para>
            </description>
            </item>
            <item>
            <term>
            <pre>
            |-------|-----|------|
            bL      eL    bR     eR
            </pre>
            </term>
            <description><para>Rdiff = null</para>
            <para>The left and right operands do not overlap.</para>
            </description>
            </item>
            <item>
            <term>
            <pre>
            |---------|-----|--------|
            bR        eR    bL       eL
            </pre>
            </term>
            <description><para>Rdiff = null</para>
            <para>The left and right operands do not overlap.</para>
            </description>
            </item>
            <item>
            <term>
            <pre>
            |----------|----------|
            bL         bR       eL eR
            </pre>
            </term>
            <description><para>Rdiff = null</para>
            <para>The ending bounds are equal.  In other words, a period cannot be defined
            whose starting and ending bounds are equal.</para>
            </description>
            </item>
            </list>
            </remarks>
        </member>
        <member name="M:Teradata.Client.Provider.TdPeriodTime.Normalize(Teradata.Client.Provider.TdPeriodTime,Teradata.Client.Provider.TdPeriodTime)">
            <summary>
            A TdPeriodTime that contains a period that encompasses both periods of the
            left and right operands.  The beginning bound is defined as the minimum of
            left and right beginning bounds, and the ending bound is defined as the 
            maximum of the left and right ending bounds.  The operands must either meet
            or overlap.
            </summary>
            <param name="left">The left TdPeriodTime operand.</param>
            <param name="right">The right TdPeriodTime operand.</param>
            <returns>A TdPeriodTime is returned whose period includes both operands.</returns>
            <remarks>
            <para>A <see cref="F:Teradata.Client.Provider.TdPeriodTime.Null"/> is returned under the following scenarios:</para>
            
            <list>
            <item>The left and right operands do not overlap.</item>
            <item>Either the left or right operand is null.</item>
            </list>
            
            <para>In the following examples the left and right operands are defined as
            <strong>(bL, eL)</strong> and <strong>(bR, eR)</strong>, respectively.</para>
            
            <list type="table">
            <listheader>
            <term>Example</term>
            <description>Comments</description>
            </listheader>
            <item>
            <term>
            <pre>
            |-------|-------|-------|
            bL      bR      eL      eR
            |=======================|
            </pre>
            </term>
            <description>Normalize = (bL, eR)</description>
            </item>
            <item>
            <term>
            <pre>
            |--------|--------|------|
            bR      bL       eR     eL
            =========================|
            </pre>
            </term>
            <description>Normalize = (bR, eL)</description>
            </item>
            <item>
            <term>
            <pre>
            |-------|--------|-------|
            bL      bR       eR      eL
            |========================|
            </pre>
            </term>
            <description>Normalize = (bL, eL)</description>
            </item>
            <item>
            <term>
            <pre>
            |--------|--------|-----|
            bR       bL       eL    eR
            |=======================|
            </pre>
            </term>
            <description>Normalize = (bR, eR)</description>
            </item>
            <item>
            <term>
            <pre>
            |---------|---------|
            bL      eL bR       eR
            |===================|
            </pre>
            </term>
            <description>Normalize = (bL, eR)</description>
            </item>
            <item>
            <term>
            <pre>
            |-------|-------|---------|
            bL      eL      bR        eR
            </pre>
            </term>
            <description><para>Normalize = TdPeriodTime.Null</para>
            <para>The periods do not overlap.</para>
            </description>
            </item>
            </list>
            </remarks>
        </member>
        <member name="M:Teradata.Client.Provider.TdPeriodTime.Precedes(Teradata.Client.Provider.TdPeriodTime)">
            <summary>
            Indicates whether this instance precedes the period value.
            </summary>
            <param name="value">The TdPeriodTime operand.</param>
            <returns>A <c>true</c> is returned when this instance precedes the value, otherwise 
            a <c>false </c>is returned.</returns>
            <remarks>
            <para>A <c>false</c> will be returned if the <paramref name="value"/> is <see cref="F:Teradata.Client.Provider.TdPeriodTime.Null"/>.</para>
            
            <para>This instance precedes the value if the ending bound of this instance is
            less than or equal to the beginning bound of the value.</para>
            
            <para>In the following examples consider the Left operand to be this instance, and the Right operand as 
            the value.  The left and right operands are defined as
            <strong>(bL, eL)</strong> and <strong>(bR, eR)</strong>, respectively.</para>
            
            <list type="table">
            <listheader>
            <term>Example</term>
            <description>Comments</description>
            </listheader>
            <item>
            <term>
            <pre>
            |--------|--------|
            bL     eL bR      eR
            </pre>
            </term>
            <description>Precedes = true</description>
            </item>
            <item>
            <term>
            <pre>
            |------|-----|------|
            bL     eL    bR     eR
            </pre>
            </term>
            <description>Precedes = true</description>
            </item>
            <item>
            <term>
            <pre>
            |------|-----|-------|
            bL     bR    eL      eR
            </pre>
            </term>
            <description><para>Precedes = false</para>
            <para>There is an intersection between the operands; therfore, the left 
            does not precede the right.</para>
            </description>
            </item>
            <item>
            <term>
            <pre>
            |-------|--------|
            bR    eR bL      eL
            </pre>
            </term>
            <description><para>Precedes = false</para>
            <para>The left operand appears after the right operand.</para>
            </description>
            </item>
            </list>
            </remarks>
            <overloads>
            Determines whether another period or TdTime precedes this instance of TdPeriodTime.
            </overloads>
        </member>
        <member name="M:Teradata.Client.Provider.TdPeriodTime.Precedes(Teradata.Client.Provider.TdTime)">
            <summary>
            Indicates that this instance precedes the TdTime value.
            </summary>
            <param name="value">The TdTime value.</param>
            <returns>A <c>true</c> is returned when this instance precedes the value, otherwise a 
            <c>false</c> is returned.</returns>
            <remarks>
            <para>A <c>false</c> will be returned if the <paramref name="value"/> is <see cref="F:Teradata.Client.Provider.TdTime.Null"/>.</para>
            
            <para>This instance will precede the value if the ending bound of this instance
            is less than or equal to the value.</para>
            
            <para>The following are examples.</para>
            <list type="table">
            <listheader>
            <term>Result</term>
            <description>Precedes</description>
            </listheader>
            <item>
            <term>true</term>
            <description><para>Period: (00:04:01, 03:04:15)</para>
                         <para>Time: 03:04:15</para></description>
            </item>
            <item>
            <term>true</term>
            <description><para>Period: (10:05:31, 12:06:05)</para>
                         <para>Time: 10:10:01</para></description>
            </item>
            <item>
            <term>false</term>
            <description><para>Period: (11:12:15, 20:12:31)</para>
                         <para>Time: 15:12:20</para></description>
            </item>
            <item>
            <term>false</term>
            <description><para>Period: (22:02:01, 23:03:01)</para>
                         <para>Time: 22:02:01</para></description>
            </item>
            <item>
            <term>false</term>
            <description><para>Period: (17:09:05, 21:09:15)</para>
                         <para>Time: 17:01:17</para></description>
            </item>
            </list>
            </remarks>
        </member>
        <member name="M:Teradata.Client.Provider.TdPeriodTime.Succeeds(Teradata.Client.Provider.TdPeriodTime)">
            <summary>
            Indicates whether this instance succeeds the period value.
            </summary>
            <param name="value">The  TdPeriodTime operand.</param>
            <returns>A <c>true</c> is returned when this instance succeeds the value,  otherwise 
            a <c>false </c>is returned.</returns>
            <remarks>
            <para>A <c>false</c> will be returned if the <paramref name="value"/> is <see cref="F:Teradata.Client.Provider.TdPeriodTime.Null"/>.</para>
            
            <para>This instance will succeed the value if the beginning bound of this instance is
            greater than or equal to the ending bound of the value.</para>
            
            <para>In the following examples consider the Left operand to be this instance, and the Right operand
            as the value.  The Left and Right operands are defined as
            <strong>(bL, eL)</strong> and <strong>(bR, eR)</strong>, respectively.</para>
            
            <list type="table">
            <listheader>
            <term>Example</term>
            <description>Comments</description>
            </listheader>
            <item>
            <term>
            <pre>
            |--------|--------|
            bL     eL bR      eR
            </pre>
            </term>
            <description><para>Succeeds = false</para>
            <para>The left operand appears before the right operand.</para>
            </description>
            </item>
            <item>
            <term>
            <pre>
            |-------|-----|------|
            bL      eL    bR     eR
            </pre>
            </term>
            <description><para>Succeeds = false</para>
            <para>The left operand appears before the right operand.</para>
            </description>
            </item>
            <item>
            <term>
            <pre>
            |------|----|------|
            bL     bR   eL     eR
            </pre>
            </term>
            <description><para>Succeeds = false</para>
            <para>There is an intersection between the operands; therfore, the left 
            does not succeed the right.</para>
            </description>
            </item>
            <item>
            <term>
            <pre>
            |-------|--------|
            bR    eR bL      eL
            </pre>
            </term>
            <description>Succeeds = true</description>
            </item>
            <item>
            <term>
            <pre>
            |-------|---|-----|
            bR      eR  bL    eL
            </pre>
            </term>
            <description>Succeeds = true</description>
            </item>
            </list>
            </remarks>
            <overloads>
            Determines whether another Period or a TdTime succeeds this instance of TdPeriodTime.
            </overloads>
        </member>
        <member name="M:Teradata.Client.Provider.TdPeriodTime.Succeeds(Teradata.Client.Provider.TdTime)">
            <summary>
            Indicates that this instance succeeds the TdTime value.
            </summary>
            <param name="value">The TdTime value.</param>
            <returns>A <c>true</c> is returned when this instance succeeds the value, otherwise a 
            <c>false</c> is returned.</returns>
            <remarks>
            <para>A <c>false</c> will be returned if the <paramref name="value"/> is <see cref="F:Teradata.Client.Provider.TdTime.Null"/>.</para>
            
            <para>This instance will succeed the value if the beginning bound of this instance
            is greater than the value.</para>
            
            <para>The following are examples.</para>
            <list type="table">
            <listheader>
            <term>Result</term>
            <description>Succeeds</description>
            </listheader>
            <item>
            <term>false</term>
            <description><para>Period: (01:04:01, 02:04:15)</para>
                         <para>Time: 02:04:15</para></description>
            </item>
            <item>
            <term>false</term>
            <description><para>Period: (09:05:31, 10:06:05)</para>
                         <para>Time: 11:10:01</para></description>
            </item>
            <item>
            <term>false</term>
            <description><para>Period: (12:12:15, 15:12:31)</para>
                         <para>Time: 13:12:20</para></description>
            </item>
            <item>
            <term>false</term>
            <description><para>Period: (00:02:01, 03:03:01)</para>
                         <para>Time: 00:02:01</para></description>
            </item>
            <item>
            <term>true</term>
            <description><para>Period: (10:09:05, 14:09:15)</para>
                         <para>Time: 08:01:17</para></description>
            </item>
            <item>
            <term>true</term>
            <description><para>Period: (20:09:05, 21:09:15)</para>
                         <para>Time: 20:09:04</para></description>
            </item>
            </list>
            </remarks>
        </member>
        <member name="M:Teradata.Client.Provider.TdPeriodTime.Meets(Teradata.Client.Provider.TdPeriodTime)">
            <summary>
            Indicates whether this instance meets the period value.  
            </summary>
            <param name="value">The TdPeriodTime operand.</param>
            <returns>A <c>true</c> is returned if this instance meets the value, otherwise a 
            <c>false</c> is returned.</returns>
            <remarks>
            <para>A <c>false</c> will be returned if the <paramref name="value"/> is <see cref="F:Teradata.Client.Provider.TdPeriodTime.Null"/>.</para>
            
            <para>Two periods meet if the beginning bound of one period equals the ending bound of the other.</para>
            
            <para>In the following examples consider the Left operand to be this instance, and the Right as 
            the value.  The Left and Right operands are defined as
            <strong>(bL, eL)</strong> and <strong>(bR, eR)</strong>, respectively.</para>
            
            <list type="table">
            <listheader>
            <term>Example</term>
            <description>Comments</description>
            </listheader>
            <item>
            <term>
            <pre>
            |-------|--------|
            bR    eR bL      eL
            </pre>
            </term>
            <description><para>Meets = true</para>
            <para>The ending bound of the right operand equals the beginning bound of the left operand.</para>
            </description>
            </item>
            <item>
            <term>
            <pre>
            |---------|--------|
            bL      eL bR      eR
            </pre>
            </term>
            <description><para>Meets = true</para>
            <para>The ending bound of the left operand equals the beginning bound of the right operand.</para>
            </description>
            </item>
            <item>
            <term>
            <pre>
              |---------|
            bL bR     eL eR
            </pre>
            </term>
            <description>Meets = false</description>
            </item>
            <item>
            <term>
            <pre>
              |--------|--------|
            bL bR      eL       eR
            </pre>
            </term>
            <description>Meets = false</description>
            </item>
            <item>
            <term>
            <pre>
            |-----|----|-------|
            bL    eL   bR      eR
            </pre>
            </term>
            <description>Meets = false</description>
            </item>
            </list>
            </remarks>
            <overloads>
            Determines whether a period or TdTime meets this instance of TdPeriodTime.
            </overloads>
        </member>
        <member name="M:Teradata.Client.Provider.TdPeriodTime.Meets(Teradata.Client.Provider.TdTime)">
            <summary>
            Indicates whether this instance meets the TdTime value.
            </summary>
            <param name="value">The TdTime operand. </param>
            <returns>A <c>true</c> is returned if this instance meets the value, otherwise a 
            <c>false</c> is returned.</returns>
            <remarks>
            <para>A <c>false</c> will be returned if this <paramref name="value"/> is <see cref="F:Teradata.Client.Provider.TdTime.Null"/>.</para>
            
            <para>A period and TdTime value meet if the value is not included in the period but
            is one time granule less than the starting bound or is the same as the ending bound. </para>
            
            <para>The following are examples:</para>
            
            <list type="table">
            <listheader>
            <term>Result</term>
            <description>Meets</description>
            </listheader>
            <item>
            <term>true</term>
            <description><para>Period: (12:21:41, 14:21:22)</para> 
                         <para>Time: 14:21:22</para></description>
            </item>
            <item>
            <term>true</term>
            <description><para>Period: (00:00:00, 01:00:10)</para> 
                         <para>Time: 23:59:59</para></description>
            </item>
            <item>
            <term>false</term>
            <description><para>Period: (20:21:43, 23:00:00)</para> 
                         <para>Time: 23:00:01</para></description>
            </item>
            <term>
            <item>false</item>
            <description><para>Period: (11:43:00, 11:50:32)</para> 
                         <para>Time: 11:45:20</para></description>
            </term>
            </list>
            </remarks>
        </member>
        <member name="M:Teradata.Client.Provider.TdPeriodTime.Intersect(Teradata.Client.Provider.TdPeriodTime,Teradata.Client.Provider.TdPeriodTime)">
            <summary>
            The intersection between the <paramref name="left"/> and <paramref name="right"/>
            operands is calculated.
            </summary>
            
            <param name="left">The left TdPeriodTime operand.</param>
            <param name="right">The right TdPeriodTime operand.</param>
            
            <returns>A period that is the intersection between the left and right operands 
            is returned.</returns>
            
            <remarks>
            <para>A <see cref="F:Teradata.Client.Provider.TdPeriodTime.Null"/> is returned under the following scenarios:</para>
            <list type="bullet">
            <item>Either the left or right operand is TdPeriodTime.Null.</item>
            <item>The left and right operands do not intersect.</item>
            <item>The ending bound of one operand is the same as the beginning bound of the other operand.</item>
            </list>
            
            <para>In the following examples <strong>(bL, eL)</strong> is the left operand and 
            <strong>(bR, eR)</strong> is the right operand.</para>
            
            <list type="table">
            <listheader>
            <term>Example</term>
            <description>Comments</description>
            </listheader>
            <item>
            <term>
            <pre>
            |------|------|------|
            bL     bR     eL     eR
                   |======|
            </pre>
            </term>
            <description>Intersection = (bR, eL)</description>
            </item>
            <item>
            <term>
            <pre>
            |----|--------|------|
            bL   bR       eR     eL
                 |========|  
            </pre>
            </term>
            <description>Intersection = (bR, eR)</description>
            </item>
            <item>
            <term>
            <pre>
            |---------|--------|
            bL      eL bR      eR
            </pre>
            </term>
            <description><para>Intersection = null</para>
            <para>The ending bound of the first operand is the same as the 
            starting bound of the second operand, eL = bR.</para>
            </description>
            </item>
            <item>
            <term>
            <pre>
            |-------|---|------|
            bL      eL  bR     eR
            </pre>
            </term>
            <description><para>Intersection = null</para>
            <para>The periods do not intersect.</para>
            </description>
            </item>
            </list>
            </remarks>
        </member>
        <member name="M:Teradata.Client.Provider.TdPeriodTime.Contains(Teradata.Client.Provider.TdTime)">
            <summary>
            Indicates whether the TdTime <paramref name="value"/> is contained in this
            instance of TdPeriodTime.
            </summary>
            <param name="value">The TdTime that is to be found in the period.</param>
            <returns>A boolean value is returned that indicates whether the value
            is contained in the period.</returns>
            <remarks>
            A <c>false</c> is returned if value is <strong>Null</strong>.
            
            A <c>true</c> is returned if the value is contained in the period, otherwise 
            a <c>false</c> is returned.
            </remarks>
        </member>
        <member name="P:Teradata.Client.Provider.TdPeriodTime.ObjectId">
            <summary>
            Gets the Instance Object Identifier.
            </summary>
        </member>
        <member name="P:Teradata.Client.Provider.TdPeriodTime.IsNull">
            <summary>
            Gets the boolean that indicates whether this TdPeriodTime instance is <see cref="F:Teradata.Client.Provider.TdPeriodTime.Null"/>. 
            </summary>
            <value>
            <c>true</c> if this TdPeriodTime is Null; <c>false</c> otherwise.
            </value>
        </member>
        <member name="P:Teradata.Client.Provider.TdPeriodTime.Begin">
            <summary>
            Gets the beginning bound of the period.
            </summary>
            <value>The TdTime representation of the beginning bound.</value>
            <exception cref="T:Teradata.Client.Provider.TdException">Period is null.</exception>
            <remarks>
            The beginning bound is <strong>inclusive</strong> to the Period.  For more information
            about periods refer to <a href="PeriodTypeOverview.htm">Period Types Overview</a>.
            </remarks>
            <seealso cref="!:PeriodTypeOverview.html">Period Types Overview</seealso>
        </member>
        <member name="P:Teradata.Client.Provider.TdPeriodTime.End">
            <summary>
            Gets the ending bound of the period.
            </summary>
            <value>The TdTime representation of the ending bound.</value>
            <exception cref="T:Teradata.Client.Provider.TdException">Period is null.</exception>
            <remarks>
            The ending bound is <strong>exclusive</strong> to the period.  For more information
            about periods refer to <a href="PeriodTypeOverview.htm">Period Types Overview</a>
            </remarks>
            <seealso cref="!:PeriodTypeOverview.html">Period Types Overview</seealso>
        </member>
        <member name="P:Teradata.Client.Provider.TdPeriodTime.Last">
            <summary>
            Gets the last time element of the period.  
            </summary>
            <value>The TdTimestamp value that is equivalent to
            <see cref="P:Teradata.Client.Provider.TdPeriodTime.End"/> - 10^-<see cref="P:Teradata.Client.Provider.TdPeriodTime.Scale"/>.</value>
            <exception cref="T:Teradata.Client.Provider.TdException">Period is null.</exception>
        </member>
        <member name="P:Teradata.Client.Provider.TdPeriodTime.Scale">
            <summary>
            Gets the scale of this instance of TdPeriodTime.
            </summary>
            <value>An Int32 that represents the Scale.</value>
            <exception cref="T:Teradata.Client.Provider.TdException">Period is null.</exception>
            <remarks>
            The Scale refers to the scale of both the beginning and ending
            bounds.
            </remarks>
        </member>
        <member name="P:Teradata.Client.Provider.TdPeriodTime.Value">
            <summary>
            Gets the .Net type representation (String) of the TdPeriodTime value.
            </summary>
            <exception cref="T:Teradata.Client.Provider.TdException">Period is null.</exception>
        </member>
        <member name="T:Teradata.Client.Provider.TdPeriodTimestamp">
            <summary>
            TdPeriodTimestamp is a .Net Data Provider for Teradata specific type that represents
            a duration of time that is bound by beginning and ending timestamps.  
            </summary>
            
            <remarks>
            <para>The Teradata Database introduced the Period type in release 13.00.00.00.  Unfortunately,
            the .Net Framework does not contain a system type that corresponds to the Teradata
            <strong>Period(Timestamp)</strong> type.  Therefore, the Teradata provider exposes the
            TdPeriodTimestamp type which enables an application to work with data of type 
            Period(Timestamp).</para>
            
            <para>Similar to <see cref="T:Teradata.Client.Provider.TdTimestamp"/>, TdPeriodTimestamp supports a <strong>scale</strong> for
            the sub-seconds.  The scale ranges from 0 to 6 and <strong>must be the same</strong> for both the beginning 
            and ending bounds.</para>
            
            <para>A period is an anchored duration.  It represents a set of contiguous time
            granules within that duration.  In the case of TdPeriodTimestamp, the granularity of the
            time can range from 10^-6 (.000006 second) to 10^0 (1 second).  The representation of 
            a period is both inclusive and exclusive.  It is <strong>inclusive</strong> in that 
            the duration of the period begins from the beginning bound up to, but not including 
            (<strong>excluding</strong>), the ending bound.  For example suppose a 
            TdPeriodTimestamp contains the period of:</para>
            
            <pre>    (2008-10-31 13:12:21.05, 2008-12-01 20:43:27.98)</pre>
            
            <para>The period will include "2008-10-31 13:12:21.05" and not 
            "2008-12-01 20:43:27.98".  It has a duration of 32.07:31:06.93 
            (32 days, 7 hours, 31 minutes, 6 seconds, 980000 microseconds).  
            The time element "2008-11-30 15:21:43" is included in the period.  </para>
            
            <para>The components of a period consists of the following:</para>
            
            <para>
            <list type="bullet">
                <item><strong>Time Granule</strong> This is the minimum representation
                of time within a period.  In the above example, the time granule is 10^-2 
                (.01 second).</item>
            
                <item><strong>Time Element</strong> A Time value that is contained
                within the period.  The time element in TdPeriodTimestamp is specified 
                using a <strong>TdTimestamp</strong>.</item>
            
                <item><strong>Beginning Bound</strong> The lower bound or the start 
                of the period.  Within a period, this value represents the "lowest" time
                element.  The beginning bound must be <strong>less than</strong> the ending bound.</item>
            
                <item><strong>Ending Bound</strong> The upper bound or the ending
                of the period.  The Ending Bound is not included in the period.  Therefore,
                No Time Element in the period can be <strong>greater or equal</strong> to the 
                Ending Bound.</item>
            
                <item><strong>Duration</strong> The number of granules in a period.
                It is represented as an interval/timespan.</item>
            </list>
            </para>
            
            <para>A TdPeriodTimestamp can also be specified as an In, Out, or InOut parameter to a Stored 
            Procedure.  The data will be returned to an application using 
            either the <see cref="P:Teradata.Client.Provider.TdParameter.ProviderSpecificValue">TdParameter.ProviderSpecificValue</see>
            or <see cref="P:Teradata.Client.Provider.TdParameter.Value">TdParameter.Value</see> property.  Retrieving the parameter
            using TdParameter.ProviderSpecificValue, will return the data using the Period structure.  
            When TdParameter.Value is used, the data is returned as a <string>String</string> (this is
            the corresponding .Net type).</para>
            
            <seealso cref="T:Teradata.Client.Provider.TdTimestamp"/>
            </remarks>
            
            <example>
            The following is an example on retrieving a TdPeriodTimestamp, modify the period, and then 
            updating the period.
            
            <code>
            Public void PeriodDateExample(TdCommand cmd, String studentId)
            {
               cmd.Parameter.Clear();
            
               cmd.CommandText = "SELECT timePeriod  " +
                               "FROM ClassDetention " +
                               "WHERE StudentId = ?";
            
               cmd.CommandType = CommandType.Text;
            
               // creating the parameter
               cmd.Parameters.Add(null, TdType.Varchar, 9,
                  System.Data.ParameterDirection.Input, true, 0, 0, null,    
                  System.Data.DataRowVersion.Default, studentId);
            
               TdDataReader dr = null;
             
               Int32 i = 0;
            
               TdPeriodTimestamp detention;
            
               Try
               {
                  dr = cmd.ExecuteReader();
            
                  If (false == dr.Read())
                  {
            	       return;
                  }
               
                  // Retrieving the Period
                  detention = dr.GetTdPeriodTimestamp(0);
               }
               finally
               {
                  if (dr != null)
                  {
                     dr.Close();
                  }
               }
            
               // An additional 1 day, 4 hours will be added to ending bound.
            
               // Specifying a TimeSpan of 1 hour
               System.TimeSpan extraDentention = new TimeSpan(1, 4, 0, 0);
            
               // Getting the ending bound of the period and
               // adding 1 hour to it
               detention = new TdPeriodTime(detention.Begin, detention.End + extraDetention);    
            
               cmd.Parameters.Clear();
            
               cmd.CommandText = "UPDATE classDetention " +
                                    "SET timePeriod = ? " +
                                    "WHERE StudentId = ?";
            
               cmd.Parameters.Add(null, TdType.PeriodTimestamp, 0,
                     System.Data.ParameterDirection.Input, true, 0, 0, null,    
                     System.Data.DataRowVersion.Default, detention);
            
               cmd.Parameters.Add(null, TdType.Varchar, 9,
                     System.Data.ParameterDirection.Input, true, 0, 0, null,    
                     System.Data.DataRowVersion.Default, studentId);
            
               cmd.ExecuteNonQuery();
            }
            
            </code> 
            </example>
            
            <seealso cref="!:PeriodTypeOverview.html">Provider Specific Types:  Period Type Overview</seealso>
        </member>
        <member name="F:Teradata.Client.Provider.TdPeriodTimestamp.Null">
            <summary>
            Gets a Null TdPeriodTimestamp instance.
            </summary>
            <value>
            Returns a TdPeriodTimestamp instance that represents a <strong>Null</strong> value.
            </value>
            <remarks>
            Conceptually it is the constructor for <strong>Null</strong> TdPeriodTimestamp instances.
            </remarks>
            <example>
            This example shows how to send a <strong>Null</strong> value to a Teradata database.
            <code>
            TdParameter col1 = new TdParameter();
            col1.TdType = TdType.PeriodDate;
            col1.Value = TdPeriodTimestamp.Null;
            </code>
            </example>
        </member>
        <member name="F:Teradata.Client.Provider.TdPeriodTimestamp.MinValue">
            <summary>
            The minimum value of a period which is 
            "(0001-01-01 00:00:00.000000, 0001-01-01 00:00:00.000001)".
            </summary>
        </member>
        <member name="F:Teradata.Client.Provider.TdPeriodTimestamp.MaxValue">
            <summary>
            The maximum value of a period which is
            "(9999-12-31 23:59:59.999998, 9999-12-31 23:59:59.999999)".
            </summary>
        </member>
        <member name="M:Teradata.Client.Provider.TdPeriodTimestamp.#ctor(Teradata.Client.Provider.TdTimestamp,Teradata.Client.Provider.TdTimestamp)">
            <summary>
            A period is created from two TdTimestamp structures that represent the lower and upper bounds
            of the duration.
            </summary>
            <exception cref="T:System.ArgumentNullException">Either the begin or end date is null.</exception>
            <exception cref="T:System.ArgumentOutOfRangeException">Ending bound is less than the beginning bound.</exception>
            <param name="beginBound">The starting time of the period.</param>
            <param name="endBound">The ending time of the period.</param>
            <remarks>
            <para>The <see cref="P:Teradata.Client.Provider.TdPeriodTimestamp.Scale"/> will be set to the maximum scale between the 
            <paramref name="beginBound"/> and <paramref name="endBound"/> parameters.</para>
            </remarks>
        </member>
        <member name="M:Teradata.Client.Provider.TdPeriodTimestamp.#ctor(Teradata.Client.Provider.TdTimestamp,Teradata.Client.Provider.TdTimestamp,System.Byte)">
            <summary>
            A period is created from two TdTimestamp structures that represent the lower and upper bounds
            of the duration.
            </summary>
            <exception cref="T:System.ArgumentNullException">Either the begin or end date is null.</exception>
            <exception cref="T:System.ArgumentOutOfRangeException">Ending bound is less than the beginning bound or the scale is not in the valid range.</exception>
            <exception cref="T:Teradata.Client.Provider.TdException">The scale specified will cause either the beginning or ending bound to be truncated.</exception>
            <param name="beginBound">The starting time of the period.</param>
            <param name="endBound">The ending time of the period.</param>
            <param name="scale">The scale of the period.</param>
            <remarks>
            <para>The <paramref name="scale"/> cannot cause the truncation of either the beginning or ending bounds.
            The reason for this is that if the scale of the beginning or ending bounds is truncated it is possible
            the the resulting period will be invalid.  For example, suppose a period is to be created with a scale
            of 1 from the two timestamp:  "1010-11-23 17:10:33.0121", and "1010-11-23 17:10:33.0999".
            If the scale of both these timestamp are readjusted to 1, both the beginning and ending bounds will
            be "1010-11-23 17:10:33.0121".  The beginning and ending bounds of a period cannot be equal.</para>
            </remarks>
        </member>
        <member name="M:Teradata.Client.Provider.TdPeriodTimestamp.op_Explicit(Teradata.Client.Provider.TdPeriodTimestamp)~Teradata.Client.Provider.TdPeriodDate">
            <summary>
            Converts a TdPeriodTimestamp into a TdPeriodDate.
            </summary>
            <param name="value">The TdPeriodTimestamp that will be converted into a TdPeriodDate.</param>
            <exception cref="T:System.ArgumentOutOfRangeException">The ending bound of the <paramref name="value"/> needs to be at least one day greater than the beginning bound.</exception>
            <returns>A TdPeriodDate is returned.</returns>
            <remarks>
            The time components of the beginning and ending bound will be truncated
            when TdPeriodTimestamp is converted into a TdPeriodDate.
            </remarks>
        </member>
        <member name="M:Teradata.Client.Provider.TdPeriodTimestamp.op_Explicit(Teradata.Client.Provider.TdPeriodTimestamp)~Teradata.Client.Provider.TdPeriodTimestampWithTimeZone">
            <summary>
            Converts a TdPeriodTimestamp into a TdPeriodTimestampWithTimeZone.
            </summary>
            <param name="value">The TdPeriodTimestamp that will be converted into a TdPeriodTimestampWithTimeZone.</param>
            <returns>A <see cref="T:Teradata.Client.Provider.TdPeriodTimestampWithTimeZone"/> is returned.</returns>
            <remarks>
            <para>
            If the ending bound is set to the <a href="PeriodArithmetic.htm#UNTIL_CHANGED">UNTIL_CHANGED</a> 
            value for <strong>TdPeriodTimestamp</strong>, the ending bound of the result will 
            be set to the <strong>UNTIL_CHANGED</strong> value for the resulting 
            <see cref="T:Teradata.Client.Provider.TdPeriodTimestampWithTimeZone"/>.  The UTC offset component is also
            set to the offset of the local machine, and the Scale of the period is set to 6.
            </para>
            
            <para>
            When the <strong>TdPeriodTimestamp</strong> is converted into a 
            <strong>TdPeriodTimestampWithTimeZone</strong>, the 
            UTC offset is set to the offset of the local machine.
            </para>
            </remarks>
        </member>
        <member name="M:Teradata.Client.Provider.TdPeriodTimestamp.GetHashCode">
            <summary>
            Returns the hash code for this instance. 
            </summary>
            <returns>The hash code is returned.</returns>
            <remarks>
            <para>When calculating the hash code of a Period the algorithm that is used is</para>
            <para> <see cref="P:Teradata.Client.Provider.TdPeriodTimestamp.Begin"/> Exclusive OR (XOR) <see cref="P:Teradata.Client.Provider.TdPeriodTimestamp.End"/></para>
            </remarks>
        </member>
        <member name="M:Teradata.Client.Provider.TdPeriodTimestamp.Equals(System.Object)">
            <summary>
                Compares this instance against <paramref name="obj"/> to determine whether they are equal.
            </summary>
            <returns><c>true</c> is returned if the two TdPeriodTimestamps are equal, <c>false</c> otherwise.</returns>
            <remarks>
                <para>In order for two periods to be equivalent both their beginning and ending bounds must
                      be equivalent.</para>
            
                <para>The boolean that is returned indicates the following conditions:</para>
            
            	<para><c>false</c> will be returned if:</para>
            	<list type="bullet">
            		<item>
                        This instance or <paramref name="obj"/> is <see cref="F:Teradata.Client.Provider.TdPeriodTimestamp.Null"/>.
                    </item>
            		<item>
                        This instance is not equal to <paramref name="obj"/>.
                    </item>
            		<item>
            			<paramref name="obj"/> is not of type TdPeriodTimestamp or <c>null</c>.
                    </item>
            	</list>
            	<para><c>true</c> will be returned if:</para>
            	<list type="bullet">
            		<item>
                        This instance and <paramref name="obj"/> are <Strong>Null</Strong>.
                    </item>
            		<item>
                        This instance is equal to <paramref name="obj"/>.
                    </item>
            	</list>
            </remarks>
            <example>
                The following code example uses various comparison methods and operators: 
                <code lang="CS">
            TdPeriodTimestamp  later = 
                    new TdPeriodTimestamp(new TdTimestamp(2010, 8, 31, 10, 11, 0), 
                                          new TdTimestamp(2010, 12, 1, 12, 21, 0));
            Object earlier = 
                    new TdPeriodTimestamp(new TdTimestamp(2007, 9, 10, 1, 22, 21), 
                                          new TdTimestamp(2008, 1, 1, 3, 15, 33));
             
            // The following comparison is equivalent to using
            //    false == TdTimePeriodstamp.Equals(later, (TdPeriodTimestamp) earlier)
            //    later != (TdPeriodTimestamp) earlier
            //    true == TdTimestamp.NotEquals(later, (TdPeriodTimestamp) earlier)
            //    
            if (false == later.Equals(earlier))
            {
               Console.WriteLine(“later does not equal earlier”);
            }
                </code>
            </example>
            <overloads>Returns a Boolean indicating whether two instances of TdPeriodTimestamp are equal.</overloads>
            <param name="obj">A TdPeriodTimestamp that will be compared to this instance of TdPeriodTimestamp.</param>
        </member>
        <member name="M:Teradata.Client.Provider.TdPeriodTimestamp.Equals(Teradata.Client.Provider.TdPeriodTimestamp)">
            <summary>
            Compares this instance and another TdPeriodTimestamp to determine whether they are equal. 
            </summary>
            <param name="other">A TdPeriodTimestamp that will be compared to this instance of TdPeriodTimestamp.</param>
            <returns><c>true</c> if the two TdPeriodTimestamp values are equal, <c>false</c> otherwise.</returns>
            <remarks>
                <para>In order for two periods to be equivalent both their beginning and ending bounds must
                      be equivalent.</para>
            
                <para>The boolean that is returned indicates the following conditions</para>
            
            	<para><c>false</c> will be returned if:</para>
            	<list type="bullet">
            		<item>
                        This instance or <paramref name="other"/> is <see cref="F:Teradata.Client.Provider.TdPeriodTimestamp.Null"/>.
                    </item>
            		<item>
                        This instance is not equal to <paramref name="other"/>.
                    </item>
            	</list>
            	<para><c>true</c> will be returned if:</para>
            	<list type="bullet">
            		<item>
                        This instance and <paramref name="other"/> are <Strong>Null</Strong>.
                    </item>
            		<item>
                        This instance is equal to <paramref name="other"/>.
                    </item>
            	</list>
            </remarks>
        </member>
        <member name="M:Teradata.Client.Provider.TdPeriodTimestamp.Add(System.TimeSpan)">
            <summary>
            The specified TimeSpan will be added to this instance of TdPeriodTimestamp.
            </summary>
            <param name="timeSpan">The TimeSpan that will be added.</param>
            <returns>A TdPeriodTimestamp is returned that is the result of the TimeSpan added to this 
            instance of TdPeriodTimestamp.</returns>
            <exception cref="T:System.OverflowException">The result could not be represented as a TdPeriodTimestamp.</exception>
            <exception cref="T:Teradata.Client.Provider.TdException">The <strong>TdPeriodTimestamp</strong> beginning bound is greater or equal to the ending bound of the period.</exception>
            <remarks>
            <para>If this instance of TdPeriodTimestamp is <strong>Null</strong> a 
            <see cref="F:Teradata.Client.Provider.TdPeriodTimestamp.Null"/> 
            will be returned.</para>
            
            <para>The TimeSpan will be added to both the beginning and ending bounds.</para>
            
            <para>The number of days will be calculated from the components that were
            specified when TimeSpan was initialized.  Therefore, if a TimeSpan were 
            initialized as <strong>new TimeSpan(47, 60, 20)</strong> (47 hours, 60 minutes, 
            20 seconds), what will be added to the TdPeriodTimestamp will be 2 days, 20 seconds.</para>
            
            <para>Refer to <a href="PeriodArithmetic.htm">Period Arithmetic</a> for more information.</para>
            </remarks>
        </member>
        <member name="M:Teradata.Client.Provider.TdPeriodTimestamp.Add(Teradata.Client.Provider.TdIntervalDayToSecond)">
            <summary>
               Adds the specified <see cref="T:Teradata.Client.Provider.TdIntervalDayToSecond"/> to this instance of 
               <see cref="T:Teradata.Client.Provider.TdPeriodTimestamp"/>.
            </summary>
            <returns>
               A <strong>TdPeriodTimestamp</strong> is returned that is the result of adding 
               the <strong>TdIntervalDayToSecond</strong> to this instance of 
               <strong>TdPeriodTimestamp</strong>.
            </returns>
            <exception cref="T:System.OverflowException">Unable to add the specified <strong>TdIntervalDayToSecond</strong> to this instance of <strong>TdPeriodTimestamp</strong>.</exception>
            <exception cref="T:Teradata.Client.Provider.TdException">The <strong>TdPeriodTimestamp</strong> beginning bound is greater or equal to the ending bound of the period.</exception>
            <remarks>
            <para>
               If <paramref name="interval"/> or this instance of <strong>TdPeriodTimestamp</strong> is 
               <strong>Null</strong> a <see cref="F:Teradata.Client.Provider.TdPeriodTimestamp.Null"/> will be returned.        
            </para>
            <para>
               The <strong>TdIntervalDayToSecond</strong> will be added to both the beginning and 
               ending bounds of the period.  If the scale between this instance of  
               <strong>TdPeriodTimestamp</strong> and the <paramref name="interval"/> are
               different, the arithmetic operation will be performed using the different scales. The
               result will then be truncated to match the scale of the <strong>TdPeriodTimestamp</strong>.
            </para>
            <para>
               For example, if the period is "2007-10-04 12:50:56.2123",
               "2007-11-01 13:23:54.4435") and the interval is "200 20:40:50.654321"
               (200 days, 20 hours, 40 minutes, 50 seconds and 654321 microseconds), the add operation
               will result in a period of ("2008-04-22 09:31:46.8666",
               "2008-05-20 10:04:45.0978").
            </para>
            </remarks>
            <param name="interval">
               The <strong>TdIntervalDayToSecond</strong> that will be added to this instance of
               <strong>TdPeriodTimestamp</strong>.
            </param>
        </member>
        <member name="M:Teradata.Client.Provider.TdPeriodTimestamp.Add(Teradata.Client.Provider.TdIntervalYearToMonth)">
            <summary>
               Adds the specified <see cref="T:Teradata.Client.Provider.TdIntervalYearToMonth"/> to this instance of 
               <see cref="T:Teradata.Client.Provider.TdPeriodTimestamp"/>.
            </summary>
            <returns>
               A <strong>TdPeriodTimestamp</strong> is returned that is the result of adding the 
               <strong>TdIntervalYearToMonth</strong> to this instance of 
               <strong>TdPeriodTimestamp</strong>.
            </returns>
            <exception cref="T:System.OverflowException">Unable to add the interval to this instance of <strong>TdPeriodTimestamp</strong>.</exception>
            <exception cref="T:Teradata.Client.Provider.TdException">The <strong>TdPeriodTimestamp</strong> beginning bound is greater or equal to the ending bound of the period.</exception>
            <remarks>
            <para>
               If the <paramref name="interval"/> or this instance is <strong>Null</strong> 
               a <see cref="F:Teradata.Client.Provider.TdPeriodTimestamp.Null"/> will be returned.
            </para>
            <para>
               The <paramref name="interval"/> interval will be added to a
               <strong>TdPeriodTimestamp</strong>. For example, if the 
               <strong>TdPeriodTimestamp</strong> is ("2007-10-04 12:50:56",
               "2007-11-01 13:23:54") and the interval is "5-10"
               (5 years, 10 months) the operation will result in "2013-08-04 12:50:56",
               "2013-09-01 13:23:54").
            </para>
            </remarks>
            <param name="interval">
               A <strong>TdIntervalYearToMonth</strong> that will be added to this instance 
              of <strong>TdPeriodTimestamp</strong>.
            </param>
        </member>
        <member name="M:Teradata.Client.Provider.TdPeriodTimestamp.Subtract(System.TimeSpan)">
            <summary>
            The specified TimeSpan will be subtracted from this instance of TdPeriodTimestamp.
            </summary>
            <param name="timeSpan">The TimeSpan that will be subtracted.</param>
            <returns>A TdPeriodTimestamp is returned that is the result of the TimeSpan subtracted from
            this instance of TdPeriodTimestamp.</returns>
            <exception cref="T:System.OverflowException">The result could not be represented as a TdPeriodTimestamp.</exception>
            <exception cref="T:Teradata.Client.Provider.TdException">The <strong>TdPeriodTimestamp</strong> beginning bound is greater or equal to the ending bound of the period.</exception>
            <remarks>
            <para>If this instance of TdPeriodTimestamp is <strong>Null</strong> a 
            <see cref="F:Teradata.Client.Provider.TdPeriodTimestamp.Null"/> 
            will be returned.</para>
            
            
            <para>The number of days will be calculated from the components that were
            specified when TimeSpan was initialized.  Therefore, if a TimeSpan was 
            initialized as <strong>new TimeSpan(47, 60, 20)</strong> (47 hours, 60 minutes, 
            20 seconds), the number of days that will be subtracted from TdPeriodTimestamp will be 2 days
            and 20 seconds.</para>
            
            <para>Refer to <a href="PeriodArithmetic.htm">Period Arithmetic</a> for more information.</para>
            </remarks>
        </member>
        <member name="M:Teradata.Client.Provider.TdPeriodTimestamp.Subtract(Teradata.Client.Provider.TdIntervalDayToSecond)">
            <summary>
               Subtracts the specified <see cref="T:Teradata.Client.Provider.TdIntervalDayToSecond"/> from this instance of 
               <see cref="T:Teradata.Client.Provider.TdPeriodTimestamp"/>.
            </summary>
            <returns>
               A <strong>TdPeriodTimestamp</strong> is returned that is the result of subtracting 
               the <strong>TdIntervalDayToSecond</strong> from this instance of 
               <strong>TdPeriodTimestamp</strong>.
            </returns>
            <exception cref="T:System.OverflowException">Unable to subtract the specified <strong>TdIntervalDayToSecond</strong> from this instance of <strong>TdPeriodTimestamp</strong>.</exception>
            <exception cref="T:Teradata.Client.Provider.TdException">The <strong>TdPeriodTimestamp</strong> beginning bound is greater or equal to the ending bound of the period.</exception>
            <remarks>
            <para>
               If <paramref name="interval"/> or this instance of <strong>TdPeriodTimestamp</strong> is 
               <strong>Null</strong> a <see cref="F:Teradata.Client.Provider.TdPeriodTimestamp.Null"/> will be returned.        
            </para>
            <para>
               The <strong>TdIntervalDayToSecond</strong> will be subtracted from both the beginning and 
               ending bounds of the period.  If the scale between this instance of  
               <strong>TdPeriodTimestamp</strong> and the <paramref name="interval"/> is
               different, the arithmetic operation will be performed using the different scales. The
               result will then be truncated to match the scale of the <strong>TdPeriodTimestamp</strong>.
            </para>
            <para>
               For example, if the period is "2007-10-04 12:50:56.2123",
               "2007-11-01 13:23:54.4435") and the interval is "200 20:40:50.654321"
               (200 days, 20 hours, 40 minutes, 50 seconds and 654321 microseconds), the subtract operation
               will result in a period of ("2007-03-17 16:10:05.5579",
               "2007-04-14 16:43:03.7891").
            </para>
            </remarks>
            <param name="interval">
               The <strong>TdIntervalDayToSecond</strong> that will be subtracted from this
               instance of <strong>TdPeriodTimestamp</strong>.
            </param>
        </member>
        <member name="M:Teradata.Client.Provider.TdPeriodTimestamp.Subtract(Teradata.Client.Provider.TdIntervalYearToMonth)">
            <summary>
               Subtracts the specified <see cref="T:Teradata.Client.Provider.TdIntervalYearToMonth"/> from this instance of 
               <see cref="T:Teradata.Client.Provider.TdPeriodTimestamp"/>.
            </summary>
            <returns>
               A <strong>TdPeriodTimestamp</strong> is returned that is the result of subtracting the 
               <strong>TdIntervalYearToMonth</strong> from this instance of
               <strong>TdPeriodTimestamp</strong>.
            </returns>
            <exception cref="T:System.OverflowException">Unable to subtract the interval from this instance of <strong>TdPeriodTimestamp</strong>.</exception>
            <exception cref="T:Teradata.Client.Provider.TdException">The <strong>TdPeriodTimestamp</strong> beginning bound is greater or equal to the ending bound of the period.</exception>
            <remarks>
            <para>
               If the <paramref name="interval"/> or this instance is <strong>Null</strong> 
               a <see cref="F:Teradata.Client.Provider.TdPeriodTimestamp.Null"/> will be returned.
            </para>
            <para>
               The <paramref name="interval"/> interval will be subtracted from 
               <strong>TdPeriodTimestamp</strong>. For example, if the 
               <strong>TdPeriodTimestamp</strong> is ("2007-10-04 12:50:56",
               and "2007-11-01 13:23:54") and the interval is "5-10"
               (5 years, 10 months) the operation will result in "2001-12-04 12:50:56",
               "2002-01-01 13:23:54").
            </para>
            </remarks>
            <param name="interval">
               A <strong>TdIntervalYearToMonth</strong> that will be subtracted from this instance 
              of <strong>TdPeriodTimestamp</strong>.
            </param>
        </member>
        <member name="M:Teradata.Client.Provider.TdPeriodTimestamp.op_Addition(Teradata.Client.Provider.TdPeriodTimestamp,System.TimeSpan)">
            <summary>
            Adds the specified TimeSpan to a TdPeriodTimestamp.
            </summary>
            <param name="period">A TdPeriodTimestamp.</param>
            <param name="timeSpan">A TimeSpan that will be added to TdPeriodTimestamp.</param>
            <exception cref="T:System.OverflowException">The result could not be represented as a TdPeriodTimestamp.</exception>
            <exception cref="T:Teradata.Client.Provider.TdException">The <strong>TdPeriodTimestamp</strong> beginning bound is greater or equal to the ending bound of the period.</exception>
            <returns>A TdPeriodTimestamp is returned that is the result of adding the Timespan
            to TdPeriodTimestamp.</returns>
            <remarks>
            
            Refer to <see cref="M:Teradata.Client.Provider.TdPeriodTimestamp.Add(System.TimeSpan)"/> and <a href="PeriodArithmetic.htm">Period Arithmetic</a> for additional information.
            </remarks>
        </member>
        <member name="M:Teradata.Client.Provider.TdPeriodTimestamp.op_Addition(System.TimeSpan,Teradata.Client.Provider.TdPeriodTimestamp)">
            <summary>
            The specified TimeSpan is added to the TdPeriodTimestamp.
            </summary>
            <param name="timeSpan">A TimeSpan that will be added to TdPeriodTimestamp.</param>
            <param name="period">A TdPeriodTimestamp.</param>
            <exception cref="T:System.OverflowException">The result could not be represented as a TdPeriodTimestamp.</exception>
            <exception cref="T:Teradata.Client.Provider.TdException">The <strong>TdPeriodTimestamp</strong> beginning bound is greater or equal to the ending bound of the period.</exception>
            <returns>A TdPeriodTimestamp is returned that is the result of adding the Timespan
            to the period.</returns>
            <remarks>
            
            Refer to <see cref="M:Teradata.Client.Provider.TdPeriodTimestamp.Add(System.TimeSpan)"/> and <a href="PeriodArithmetic.htm">Period Arithmetic</a> for additional information.
            </remarks>
        </member>
        <member name="M:Teradata.Client.Provider.TdPeriodTimestamp.op_Addition(Teradata.Client.Provider.TdPeriodTimestamp,Teradata.Client.Provider.TdIntervalDayToSecond)">
            <summary>
               Adds the specified <see cref="T:Teradata.Client.Provider.TdIntervalDayToSecond"/> to a <see cref="T:Teradata.Client.Provider.TdPeriodTimestamp"/>.
            </summary>
            <returns>
               A <strong>TdPeriodTimestamp</strong> is returned that is the result of adding 
               the <strong>TdIntervalDayToSecond</strong> to a <strong>TdPeriodTimestamp</strong>.
            </returns>
            <exception cref="T:System.OverflowException">Unable to add the specified <strong>TdIntervalDayToSecond</strong> to a <strong>TdPeriodTimestamp</strong>.</exception>
            <exception cref="T:Teradata.Client.Provider.TdException">The <strong>TdPeriodTimestamp</strong> beginning bound is greater or equal to the ending bound of the period.</exception>
            <remarks>
            <para>
               If <paramref name="interval"/> or <paramref name="period"/> is 
               <strong>Null</strong> a <see cref="F:Teradata.Client.Provider.TdPeriodTimestamp.Null"/> will be returned.        
            </para>
            <para>
               The <strong>TdIntervalDayToSecond</strong> will be added to both the beginning and 
               ending bounds of the period.  If the scale between the <paramref name="period"/>  
               and the <paramref name="interval"/> are different, the arithmetic operation will be 
               performed using the different scales. The result will then be truncated to match the
               scale of the <strong>TdPeriodTimestamp</strong>.
            </para>
            <para>
               For example, if the period is "2007-10-04 12:50:56.2123",
               "2007-11-01 13:23:54.4435") and the interval is "200 20:40:50.654321"
               (200 days, 20 hours, 40 minutes, 50 seconds and 654321 microseconds), the add operation
               will result in a period of ("2008-04-22 09:31:46.8666",
               "2008-05-20 10:04:45.0978").
            </para>
            </remarks>
            <param name="period">A <strong>TdPeriodTimestamp</strong> for addition.</param>
            <param name="interval">
               The <strong>TdIntervalDayToSecond</strong> that will be added to the
               <strong>TdPeriodTimestamp</strong>.
            </param>
        </member>
        <member name="M:Teradata.Client.Provider.TdPeriodTimestamp.op_Addition(Teradata.Client.Provider.TdIntervalDayToSecond,Teradata.Client.Provider.TdPeriodTimestamp)">
            <summary>
               Adds the specified <see cref="T:Teradata.Client.Provider.TdIntervalDayToSecond"/> to a <see cref="T:Teradata.Client.Provider.TdPeriodTimestamp"/>.
            </summary>
            <returns>
               A <strong>TdPeriodTimestamp</strong> is returned that is the result of adding 
               the <strong>TdIntervalDayToSecond</strong> to a <strong>TdPeriodTimestamp</strong>.
            </returns>
            <exception cref="T:System.OverflowException">Unable to add the specified <strong>TdIntervalDayToSecond</strong> to a <strong>TdPeriodTimestamp</strong>.</exception>
            <exception cref="T:Teradata.Client.Provider.TdException">The <strong>TdPeriodTimestamp</strong> beginning bound is greater or equal to the ending bound of the period.</exception>
            <remarks>
            <para>
               If <paramref name="interval"/> or <paramref name="period"/> is 
               <strong>Null</strong> a <see cref="F:Teradata.Client.Provider.TdPeriodTimestamp.Null"/> will be returned.        
            </para>
            <para>
               The <strong>TdIntervalDayToSecond</strong> will be added to both the beginning and 
               ending bounds of the period.  If the scale between the <paramref name="period"/>  
               and the <paramref name="interval"/> are different, the arithmetic operation will be 
               performed using the different scales. The result will then be truncated to match the
               scale of the <strong>TdPeriodTimestamp</strong>.
            </para>
            <para>
               For example, if the period is "2007-10-04 12:50:56.2123",
               "2007-11-01 13:23:54.4435") and the interval is "200 20:40:50.654321"
               (200 days, 20 hours, 40 minutes, 50 seconds and 654321 microseconds), the add operation
               will result in a period of ("2008-04-22 09:31:46.8666",
               "2008-05-20 10:04:45.0978").
            </para>
            </remarks>
            <param name="interval">
               The <strong>TdIntervalDayToSecond</strong> that will be added to the
               <strong>TdPeriodTimestamp</strong>.
            </param>
            <param name="period">A <strong>TdPeriodTimestamp</strong> for addition.</param>
        </member>
        <member name="M:Teradata.Client.Provider.TdPeriodTimestamp.op_Addition(Teradata.Client.Provider.TdPeriodTimestamp,Teradata.Client.Provider.TdIntervalYearToMonth)">
            <summary>
               Adds the specified <see cref="T:Teradata.Client.Provider.TdIntervalYearToMonth"/> to a <see cref="T:Teradata.Client.Provider.TdPeriodTimestamp"/>.
            </summary>
            <returns>
               A <strong>TdPeriodTimestamp</strong> is returned that is the result of adding the 
               <strong>TdIntervalYearToMonth</strong> to a  <strong>TdPeriodTimestamp</strong>.
            </returns>
            <exception cref="T:System.OverflowException">Unable to add the interval to a <strong>TdPeriodTimestamp</strong>.</exception>
            <exception cref="T:Teradata.Client.Provider.TdException">The <strong>TdPeriodTimestamp</strong> beginning bound is greater or equal to the ending bound of the period.</exception>
            <remarks>
            <para>
               If the <paramref name="interval"/> or <paramref name="period"/> is <strong>Null</strong> 
               a <see cref="F:Teradata.Client.Provider.TdPeriodTimestamp.Null"/> will be returned.
            </para>
            <para>
               The <paramref name="interval"/> interval will be added to a
               <strong>TdPeriodTimestamp</strong>. For example, if the 
               <strong>TdPeriodTimestamp</strong> is ("2007-10-04 12:50:56",
               "2007-11-01 13:23:54") and the interval is "5-10"
               (5 years, 10 months) the operation will result in "2013-08-04 12:50:56",
               "2013-09-01 13:23:54").
            </para>
            </remarks>
            <param name="period">The <strong>TdPeriodTimestamp</strong> for addition.</param>
            <param name="interval">
               A <strong>TdIntervalYearToMonth</strong> that will be added to a  
              <strong>TdPeriodTimestamp</strong>. 
            </param>
        </member>
        <member name="M:Teradata.Client.Provider.TdPeriodTimestamp.op_Addition(Teradata.Client.Provider.TdIntervalYearToMonth,Teradata.Client.Provider.TdPeriodTimestamp)">
            <summary>
               Adds the specified <see cref="T:Teradata.Client.Provider.TdIntervalYearToMonth"/> to a <see cref="T:Teradata.Client.Provider.TdPeriodTimestamp"/>.
            </summary>
            <returns>
               A <strong>TdPeriodTimestamp</strong> is returned that is the result of adding the 
               <strong>TdIntervalYearToMonth</strong> to a  <strong>TdPeriodTimestamp</strong>.
            </returns>
            <exception cref="T:System.OverflowException">Unable to add the interval to a <strong>TdPeriodTimestamp</strong>.</exception>
            <exception cref="T:Teradata.Client.Provider.TdException">The <strong>TdPeriodTimestamp</strong> beginning bound is greater or equal to the ending bound of the period.</exception>
            <remarks>
            <para>
               If the <paramref name="interval"/> or <paramref name="period"/> is <strong>Null</strong> 
               a <see cref="F:Teradata.Client.Provider.TdPeriodTimestamp.Null"/> will be returned.
            </para>
            <para>
               The <paramref name="interval"/> interval will be added to a
               <strong>TdPeriodTimestamp</strong>. For example, if the 
               <strong>TdPeriodTimestamp</strong> is ("2007-10-04 12:50:56",
               "2007-11-01 13:23:54") and the interval is "5-10"
               (5 years, 10 months) the operation will result in "2013-08-04 12:50:56",
               "2013-09-01 13:23:54").
            </para>
            </remarks>
            <param name="interval">
               A <strong>TdIntervalYearToMonth</strong> that will be added to a  
              <strong>TdPeriodTimestamp</strong>. 
            </param>
            <param name="period">The <strong>TdPeriodTimestamp</strong> for addition.</param>
        </member>
        <member name="M:Teradata.Client.Provider.TdPeriodTimestamp.op_Subtraction(Teradata.Client.Provider.TdPeriodTimestamp,System.TimeSpan)">
            <summary>
            Subtracts the specified TimeSpan from a TdPeriodTimestamp.
            </summary>
            <param name="period">A TdPeriodTimestamp.</param>
            <param name="timeSpan">A TimeSpan that will be subtracted
            from the TdPeriodTimestamp</param>
            <exception cref="T:System.OverflowException">The result could not be represented as a TdPeriodTimestamp.</exception>
            <exception cref="T:Teradata.Client.Provider.TdException">The <strong>TdPeriodTimestamp</strong> beginning bound is greater or equal to the ending bound of the period.</exception>
            <returns>A TdPeriodTimestamp is returned that is the result of subtracting the TimeSpan 
            from the period.</returns>
            <remarks>
            Refer to <see cref="M:Teradata.Client.Provider.TdPeriodTimestamp.Subtract(System.TimeSpan)"/> and <a href="PeriodArithmetic.htm">Period Arithmetic</a> for additional information.
            </remarks>
        </member>
        <member name="M:Teradata.Client.Provider.TdPeriodTimestamp.op_Subtraction(Teradata.Client.Provider.TdPeriodTimestamp,Teradata.Client.Provider.TdIntervalDayToSecond)">
            <summary>
               Subtracts the specified <see cref="T:Teradata.Client.Provider.TdIntervalDayToSecond"/> from a <see cref="T:Teradata.Client.Provider.TdPeriodTimestamp"/>.
            </summary>
            <returns>
               A <strong>TdPeriodTimestamp</strong> is returned that is the result of subtracting 
               the <strong>TdIntervalDayToSecond</strong> from a <strong>TdPeriodTimestamp</strong>.
            </returns>
            <exception cref="T:System.OverflowException">Unable to subtract the specified <strong>TdIntervalDayToSecond</strong> from a <strong>TdPeriodTimestamp</strong>.</exception>
            <exception cref="T:Teradata.Client.Provider.TdException">The <strong>TdPeriodTimestamp</strong> beginning bound is greater or equal to the ending bound of the period.</exception>
            <remarks>
            <para>
               If <paramref name="interval"/> or <paramref name="period"/> is 
               <strong>Null</strong> a <see cref="F:Teradata.Client.Provider.TdPeriodTimestamp.Null"/> will be returned.        
            </para>
            <para>
               The <strong>TdIntervalDayToSecond</strong> will be subtracted from both the beginning and 
               ending bounds of the period.  If the scale between <paramref name="period"/> 
               and the <paramref name="interval"/> is different, the arithmetic operation will be 
               performed using the different scales. The result will then be truncated to match the
               scale of the <strong>TdPeriodTimestamp</strong>.
            </para>
            <para>
               For example, if the period is "2007-10-04 12:50:56.2123",
               "2007-11-01 13:23:54.4435") and the interval is "200 20:40:50.654321"
               (200 days, 20 hours, 40 minutes, 50 seconds and 654321 microseconds), the subtract operation
               will result in a period of ("2007-03-17 16:10:05.5579",
               "2007-04-14 16:43:03.7891").
            </para>
            </remarks>
            <param name="period">A <strong>TdPeriodTimestamp</strong>.</param>
            <param name="interval">
               The <strong>TdIntervalDayToSecond</strong> that will be subtracted from a
               <strong>TdPeriodTimestamp</strong>.
            </param>
        </member>
        <member name="M:Teradata.Client.Provider.TdPeriodTimestamp.op_Subtraction(Teradata.Client.Provider.TdPeriodTimestamp,Teradata.Client.Provider.TdIntervalYearToMonth)">
            <summary>
               Subtracts the specified <see cref="T:Teradata.Client.Provider.TdIntervalYearToMonth"/> from a <see cref="T:Teradata.Client.Provider.TdPeriodTimestamp"/>.
            </summary>
            <returns>
               A <strong>TdPeriodTimestamp</strong> is returned that is the result of subtracting the 
               <strong>TdIntervalYearToMonth</strong> 
               from a <strong>TdPeriodTimestamp</strong>.
            </returns>
            <exception cref="T:System.OverflowException">Unable to subtract the interval from a <strong>TdPeriodTimestamp</strong>.</exception>
            <exception cref="T:Teradata.Client.Provider.TdException">The <strong>TdPeriodTimestamp</strong> beginning bound is greater or equal to the ending bound of the period.</exception>
            <remarks>
            <para>
               If the <paramref name="interval"/> or <paramref name="period"/> is <strong>Null</strong> 
               a <see cref="F:Teradata.Client.Provider.TdPeriodTimestamp.Null"/> will be returned.
            </para>
            <para>
               The <paramref name="interval"/> interval will be subtracted from 
               <strong>TdPeriodTimestamp</strong>. For example, if the 
               <strong>TdPeriodTimestamp</strong> is ("2007-10-04 12:50:56",
               "2007-11-01 13:23:54") and the interval is "5-10"
               (5 years, 10 months) the operation will result in "2001-12-04 12:50:56",
               "2002-01-01 13:23:54").
            </para>
            </remarks>
            <param name="period">A <strong>TdPeriodTimestamp</strong>.</param>
            <param name="interval">
               A <strong>TdIntervalYearToMonth</strong> that will be subtracted from a 
              <strong>TdPeriodTimestamp</strong>.
            </param>
        </member>
        <member name="M:Teradata.Client.Provider.TdPeriodTimestamp.Compare(Teradata.Client.Provider.TdPeriodTimestamp,Teradata.Client.Provider.TdPeriodTimestamp)">
            <summary>
            Compares two instances of TdPeriodTimestamp structures and returns a value indicating whether <paramref name="left"/> is
            greater than, less than or equal to <paramref name="right"/>.
            </summary>
            <returns>
            The result of the comparison is returned as an integer.
            </returns>
            <remarks>
            <para>The beginning and ending bounds of the two period operands are used in the comparison.  
              The integer returned when the bounds of the left is compared to right operand
              indicates the following:
            </para>
                <para>
            	<list type="table">
            		<listheader>
            			<term>Return Value</term>
            			<description>Meaning</description>
            		</listheader>
            		<item>
            			<term>Less than zero</term>
            			<description>
                            <para><paramref name="left"/> is less than <paramref name="right"/>.</para> 
                            <para>-or-</para>
                            <para><paramref name="left"/> is <see cref="F:Teradata.Client.Provider.TdPeriodTimestamp.Null"/>.</para><br/>
                            <para><strong>Comparison Algorithm</strong></para>
                            <para>    left.Begin &lt; right.Begin OR (left.Begin == right.Begin AND left.End &lt; right.End)</para>
                        </description>
            		</item>
            		<item>
            			<term>Zero</term>
            			<description>
                            <para><paramref name="left"/> is equal to <paramref name="right"/>.</para>
                            <para>-or-</para>
                            <para><paramref name="left"/> and <paramref name="right"/> are <Strong>Null</Strong>.</para><br/>
                            <para><strong>Comparison Algorithm</strong></para>
                            <para>    left.Begin == right.Begin AND left.End == right.End</para>
                        </description>
            		</item>
            		<item>
            			<term>Greater than zero</term>
            			<description>
                            <para><paramref name="left"/> is greater than <paramref name="right"/>.</para>
                            <para>-or-</para>
                            <para><paramref name="right"/> is <Strong>Null.</Strong></para><br/>
                            <para><strong>Comparison Algorithm</strong></para>
                            <para>   left.Begin &gt; right.Begin OR (left.Begin == right.Begin AND left.End &gt; right.End)</para>
                        </description>
            		</item>
            	</list>       
                </para>
            </remarks>
            <seealso cref="M:Teradata.Client.Provider.TdPeriodTimestamp.CompareTo(Teradata.Client.Provider.TdPeriodTimestamp)"/>
            <param name="left">An instance of TdPeriodTimestamp.</param>
            <param name="right">An instance of TdPeriodTimestamp.</param>
        </member>
        <member name="M:Teradata.Client.Provider.TdPeriodTimestamp.Equals(Teradata.Client.Provider.TdPeriodTimestamp,Teradata.Client.Provider.TdPeriodTimestamp)">
            <summary>
                Compares two <see cref="T:Teradata.Client.Provider.TdPeriodTimestamp"/> structures to determine whether they are
                equal.
            </summary>
            <returns>
            <para>A boolean is returned that indicates the result of the comparison.</para>
            </returns>
            <remarks>
            <para>To determine whether two periods are equal, the beginning and ending bounds between
            the left and right operands are compared.  The two periods are equal if the following is true:</para>
            
            <pre>    left.Begin == right.Begin &amp;&amp; left.End == right.Begin</pre>
            
            	<para>
            		The value returned is <c>true</c> if the <paramref name="left"/> is 
                    equal to the <paramref name="right"/>, <c>false</c> otherwise.
                </para>
            	<para>
            		<list type="table">
            			<listheader>
            				<term>Return Value</term>
            				<description>Description</description>
            			</listheader>
            			<item>
            				<term><c>true</c></term>
                            <description>
                                <para><paramref name="left"/> and <paramref name="right"/> are <see cref="F:Teradata.Client.Provider.TdPeriodTimestamp.Null"/></para> 
                                <para>-or-</para>
                                <para><paramref name="left"/> is equal to <paramref name="right"/>.</para>
                            </description>
            			</item>
            			<item>
            				<term><c>false</c></term>
                            <description>
                            <para><paramref name="left"/> or <paramref name="right"/> is <strong>Null</strong></para>
                            <para>-or-</para>
                            <para><paramref name="left"/> is not equal to <paramref name="right"/>.</para>
                            </description>
            			</item>
            		</list>
            	</para>
            </remarks>
            <example>
                The following code example uses various comparison methods and operators.
                <code lang="CS">
            TdPeriodTimestmap  later = new TdPeriodTimestamp(
                new TdTimestamp(2010, 8, 31, 19, 0, 0, 0), new TdTimestamp(2010, 10, 25, 23, 0, 0, 0));
            
            TdPeriodTimestamp earlier = new TdPeriodTimestamp(
                new TdDate(2007, 8, 31, 10, 12, 0, 0), new TdTimestamp(2007, 11, 12, 21, 0, 0, 0));
             
            // The following comparison methods and operators are equivalent
            if (false == TdPeriodTimestamp.Equals(later, earlier) ||
                late != earlier ||
                true == TdPeriodTimestamp.NotEquals(later, earlier) )
            {
               Console.WriteLine(“later does not equal earlier”);
            }
                </code>
            </example>
            <param name="left">A TdPeriodTimestamp instance.</param>
            <param name="right">A TdPeriodTimestamp instance.</param>
        </member>
        <member name="M:Teradata.Client.Provider.TdPeriodTimestamp.NotEquals(Teradata.Client.Provider.TdPeriodTimestamp,Teradata.Client.Provider.TdPeriodTimestamp)">
            <summary>
            Compares two TdPeriodTimestamp structures to determine whether the <paramref name="left"/> operand is 
            not equal to the <paramref name="right"/> operand.
            </summary>
            <returns>
            A boolean is returned that indicates the result of the comparison.
            </returns>
            <remarks>
            <para>To determine whether two periods are not equal, the beginning and ending bounds between
            the left and right operands are compared.  The two periods are not equal if the following is true:</para>
            
            <pre>    left.Begin != right.Begin || left.End != right.End</pre>
            
            	<para>
            		The value returned is <c>true</c> if the <paramref name="left"/> is 
                    not equal to the <paramref name="right"/>, <c>false</c> otherwise.
                </para>
            	<para>
            		<list type="table">
            			<listheader>
            				<term>Return Value</term>
            				<description>Description</description>
            			</listheader>
            			<item>
            				<term><c>true</c></term>
                            <description>
                                <para><paramref name="left"/> or <paramref name="right"/> is <see cref="F:Teradata.Client.Provider.TdPeriodTimestamp.Null"/></para> 
                                <para>-or-</para>
                                <para><paramref name="left"/> is less than or greater than <paramref name="right"/>.</para>
                            </description>
            			</item>
            			<item>
            				<term><c>false</c></term>
                            <description>
                            <para><paramref name="left"/> and <paramref name="right"/> are <strong>Null</strong></para>
                            <para>-or-</para>
                            <para><paramref name="left"/> is equal to <paramref name="right"/>.</para>
                            </description>
            			</item>
            		</list>
            	</para>
            </remarks>
            <param name="left">An instance of TdPeriodTimestamp.</param>
            <param name="right">An instance of TdPeriodTimestamp.</param>        
        </member>
        <member name="M:Teradata.Client.Provider.TdPeriodTimestamp.GreaterThan(Teradata.Client.Provider.TdPeriodTimestamp,Teradata.Client.Provider.TdPeriodTimestamp)">
            <summary>
            Compares two TdPeriodTimestamp structures to determine whether the <paramref name="left"/> operand is 
            greater than the <paramref name="right"/> operand.
            </summary>
            <returns>
            A boolean is returned that indicates the result of the comparison.
            </returns>
            <remarks>
            <para>The beginning and ending bounds between the left and right operands are compared to 
            determine whether the left period is greater than the right.  The left is greater
            than the right if the following is true:</para>
            
            <pre>    left.Begin &gt; right.Begin OR (left.Begin == right.Begin AND left.End &gt; right.End)</pre>
            
            	<para>
            		The value returned is <c>true</c> if the <paramref name="left"/> is greater
                    than the <paramref name="right"/>, <c>false</c> otherwise.
                </para>
            	<para>
            		<list type="table">
            			<listheader>
            				<term>Return Value</term>
            				<description>Description</description>
            			</listheader>
            			<item>
            				<term><c>true</c></term>
                            <description><paramref name="left"/> and <paramref name="right"/> are not <see cref="F:Teradata.Client.Provider.TdPeriodTimestamp.Null"/> and
                            <paramref name="left"/> is greater than <paramref name="right"/>.
                            </description>
            			</item>
            			<item>
            				<term><c>false</c></term>
                            <description>
                            <para><paramref name="left"/> and / or <paramref name="right"/> is <strong>Null</strong> </para>
                            <para>-or-</para>
                            <para><paramref name="left"/> is less than or equal to <paramref name="right"/>.</para>
                            </description>
            			</item>
            		</list>
            	</para>
            
            <para>Comparison operators always returns <c>false</c> if one of the operands is 
            <strong>Null</strong>.  Therefore, you must not assume that the reverse condition 
            is <c>true</c>. For example you cannot assume that the left operand is less than or 
            equal to the right operand if the <c>GreaterThan</c> operator returns <c>false</c>.</para> 
            
            </remarks>
            <param name="left">An instance of TdPeriodTimestamp.</param>
            <param name="right">An instance of TdPeriodTimestamp.</param>
        </member>
        <member name="M:Teradata.Client.Provider.TdPeriodTimestamp.GreaterThanOrEqual(Teradata.Client.Provider.TdPeriodTimestamp,Teradata.Client.Provider.TdPeriodTimestamp)">
            <summary>
            Compares two TdPeriodTimestamp structures to determine whether the <paramref name="left"/> operand is 
            greater than or equal to the <paramref name="right"/> operand.
            </summary>
            <returns>
            A boolean is returned that indicates the result of the comparison.
            </returns>
            <remarks>
            <para>In order to perform this comparison the beginning and ending bounds of the left
            and right operands are compared against each other.  The left is greater than or equal
            to the right if the following is true:</para>
            
            <pre>    ((left.Begin &gt; right.Begin) OR (left.Begin == right.Begin AND left.End &gt;= right.End))</pre>
            
            	<para>
            		The value returned is <c>true</c> if the <paramref name="left"/> is greater
                    than or equal to the <paramref name="right"/>, <c>false</c> otherwise.
                </para>
            	<para>
            		<list type="table">
            			<listheader>
            				<term>Return Value</term>
            				<description>Description</description>
            			</listheader>
            			<item>
            				<term><c>true</c></term>
                            <description><paramref name="left"/> and <paramref name="right"/> are not <see cref="F:Teradata.Client.Provider.TdPeriodTimestamp.Null"/> and
                            <paramref name="left"/> is greater than or equal to <paramref name="right"/>.
                            </description>
            			</item>
            			<item>
            				<term><c>false</c></term>
                            <description>
                            <para><paramref name="left"/> and / or <paramref name="right"/> is <strong>Null</strong> </para>
                            <para>-or-</para>
                            <para><paramref name="left"/> is less than <paramref name="right"/>.</para>
                            </description>
            			</item>
            		</list>
            	</para>
            
            <para>Comparison operators always returns <c>false</c> if one of the operands is 
            <strong>Null</strong>.  Therefore, you must not assume that the reverse condition is 
            <c>true</c>. For example you cannot assume that the left operand is less than the right 
            operand if <c>GreaterThanOrEqual</c> operator returns <c>false</c>.</para> 
            
            </remarks>
            <param name="left">An instance of TdPeriodTimestamp.</param>
            <param name="right">An instance of TdPeriodTimestamp.</param>
        </member>
        <member name="M:Teradata.Client.Provider.TdPeriodTimestamp.LessThan(Teradata.Client.Provider.TdPeriodTimestamp,Teradata.Client.Provider.TdPeriodTimestamp)">
            <summary>
            Compares two TdPeriodTimestamp structures to determine whether the <paramref name="left"/> operand is 
            less than the <paramref name="right"/> operand.
            </summary>
            <returns>
            A boolean is returned that indicates the result of the comparison.
            </returns>
            <remarks>
            <para>In order to perform this comparison the beginning and ending bounds of the left
            and right operands are compared against each other.  The left is less than the right if 
            the following is true:</para>
            
            <pre>    left.Begin &lt; right.Begin || (left.Begin == right.Begin &amp;&amp; left.End &lt; right.End)</pre>
            
            	<para>
            		The value returned is <c>true</c> if the <paramref name="left"/> is less
                    than the <paramref name="right"/>, <c>false</c> otherwise.
                </para>
            	<para>
            		<list type="table">
            			<listheader>
            				<term>Return Value</term>
            				<description>Description</description>
            			</listheader>
            			<item>
            				<term><c>true</c></term>
                            <description><paramref name="left"/> and <paramref name="right"/> are not <see cref="F:Teradata.Client.Provider.TdPeriodTimestamp.Null"/> and
                            <paramref name="left"/> is less than <paramref name="right"/>.
                            </description>
            			</item>
            			<item>
            				<term><c>false</c></term>
                            <description>
                            <para><paramref name="left"/> and / or <paramref name="right"/> is <strong>Null</strong></para>
                            <para>-or-</para>
                            <para><paramref name="left"/> is greater than or equal to <paramref name="right"/>.</para>
                            </description>
            			</item>
            		</list>
            	</para>
            <para>Comparison operators always returns <c>false</c> if one of the operands is 
            <strong>Null</strong>.  Therefore, you must not assume that the reverse condition 
            is <c>true</c>. For example you cannot assume that the left operand is greater than 
            or equal the right operand if the <c>LessThan</c> operator returns <c>false</c>.</para> 
            
            </remarks>
            <param name="left">An instance of TdPeriodTimestamp.</param>
            <param name="right">An instance of TdPeriodTimestamp.</param>
        </member>
        <member name="M:Teradata.Client.Provider.TdPeriodTimestamp.LessThanOrEqual(Teradata.Client.Provider.TdPeriodTimestamp,Teradata.Client.Provider.TdPeriodTimestamp)">
            <summary>
            Compares two TdPeriodTimestamp structures to determine whether the <paramref name="left"/> operand is 
            less than or equal to the <paramref name="right"/> operand.
            </summary>
            <returns>
            A boolean is returned that indicates the result of the comparison.
            </returns>
            <remarks>
            <para>In order to perform this comparison the beginning and ending bounds of the left
            and right operands are compared against each other.  The left is equal to or less than the right if 
            the following is true:</para>
            
            <pre>    ((left.Begin &lt; right.Begin) OR (left.Begin == right.Begin AND left.End &lt;= right.End))</pre>
            
            	<para>
            		The value returned is <c>true</c> if the <paramref name="left"/> is less
                    than or equal to the <paramref name="right"/>, <c>false</c> otherwise.
                </para>
            	<para>
            		<list type="table">
            			<listheader>
            				<term>Return Value</term>
            				<description>Description</description>
            			</listheader>
            			<item>
            				<term><c>true</c></term>
                            <description><paramref name="left"/> and <paramref name="right"/> are not <see cref="F:Teradata.Client.Provider.TdPeriodTimestamp.Null"/> and
                            <paramref name="left"/> is less than or equal to <paramref name="right"/>.
                            </description>
            			</item>
            			<item>
            				<term><c>false</c></term>
                            <description>
                            <para><paramref name="left"/> and / or <paramref name="right"/> is <strong>Null</strong></para>
                            <para>-or-</para>
                            <para><paramref name="left"/> is greater than <paramref name="right"/>.</para>
                            </description>
            			</item>
            		</list>
            	</para>
            
            <para>Comparison operators always returns <c>false</c> if one of the operands is 
            <strong>Null</strong>.  Therefore, you must not assume that the reverse condition 
            is <c>true</c>. For example you cannot assume that the left operand is greater than 
            the right operand if the <c>LessThanOrEqual</c> operator 
            returns <c>false</c>.</para> 
            
            </remarks>
            <param name="left">An instance of TdPeriodTimestamp.</param>
            <param name="right">An instance of TdPeriodTimestamp.</param>
        </member>
        <member name="M:Teradata.Client.Provider.TdPeriodTimestamp.op_Equality(Teradata.Client.Provider.TdPeriodTimestamp,Teradata.Client.Provider.TdPeriodTimestamp)">
            <summary>
            Compares two TdPeriodTimestamp structures to determine whether the <paramref name="left"/> is 
            equal to the <paramref name="right"/> operand.
            </summary>
            <returns>
            A boolean is returned that indicates the result of the comparison.
            </returns>
            <remarks>
            <para>The beginning and ending bounds between the left and right operands are compared to 
            determine whether the two periods are equal.  The two periods are equal if the following is true:</para>
            
            <pre>    left.Begin == right.Begin &amp;&amp; left.End == right.Begin</pre>
            	<para>
            		The value returned is <c>true</c> if the <paramref name="left"/> is 
                    equal to the <paramref name="right"/>, <c>false</c> otherwise.
                </para>
            	<para>
            		<list type="table">
            			<listheader>
            				<term>Return Value</term>
            				<description>Description</description>
            			</listheader>
            			<item>
            				<term><c>true</c></term>
                            <description>
                                <para><paramref name="left"/> and <paramref name="right"/> are <see cref="F:Teradata.Client.Provider.TdPeriodTimestamp.Null"/></para> 
                                <para>-or-</para>
                                <para><paramref name="left"/> is equal to <paramref name="right"/>.</para>
                            </description>
            			</item>
            			<item>
            				<term><c>false</c></term>
                            <description>
                            <para><paramref name="left"/> or <paramref name="right"/> is <strong>Null</strong></para>
                            <para>-or-</para>
                            <para><paramref name="left"/> is not equal to <paramref name="right"/>.</para>
                            </description>
            			</item>
            		</list>
            	</para>
            
            <para>
            Unlike comparison operators, Equality operators do not always return <c>false</c> when 
            left and right operands are <strong>Null</strong>. Therefore the reverse condition can 
            be considered <c>true</c>. TdDate implementation is very similar to the 
            <see cref="T:System.Nullable"/> class in this regard.
            </para>
            </remarks>
            <param name="left">An instance of TdPeriodTimestamp.</param>
            <param name="right">An instance of TdPeriodTimestamp.</param>        
            <example>
            The following example shows that the Equality operator can safely be used in an if statement.
            <code>
             TdPeriodTimestamp x = TdPeriodTimestamp.Null;
             TdPeriodTimestamp y = new TdPeriodTimestamp(
                                     new TdTimestamp(2008, 10, 10, 12, 10, 33), 
                                     new TdTimestamp(2008, 11, 30, 14, 11, 22));
            
             if (x == y)
             {
                 // x is equal to y.
                 Console.WriteLine(@"X is equal to Y").
             }
             else
             {
                 // x is not equal y
                 Console.WriteLine(@"X is not equal to Y").
             }
            
             y = TdPeriodTimestamp.Null;
            
             if (x == y)
             {
                 // x is equal to y.
                 Console.WriteLine(@"X is equal to Y").
             }
             else
             {
                 // x is not equal y
                 Console.WriteLine(@"X is not equal to Y").
             }
            </code>
            </example>
        </member>
        <member name="M:Teradata.Client.Provider.TdPeriodTimestamp.op_Inequality(Teradata.Client.Provider.TdPeriodTimestamp,Teradata.Client.Provider.TdPeriodTimestamp)">
            <summary>
            Compares two TdPeriodTimestamp structures to determine whether the <paramref name="left"/> is 
            not equal to the <paramref name="right"/> operand.
            </summary>
            <returns>
            A boolean is returned that indicates the result of the comparison.
            </returns>
            <remarks>
            <para>The beginning and ending bounds between the left and right operands 
            are compared to determine whether the two periods are not equal.  The two 
            periods are not equal if the following is true:</para>
            
            <pre>    left.Begin != right.Begin || left.End != right.End</pre>
            
            	<para>
            		The value returned is <c>true</c> if the <paramref name="left"/> is 
                    not equal to the <paramref name="right"/>, <c>false</c> otherwise.
                </para>
            	<para>
            		<list type="table">
            			<listheader>
            				<term>Return Value</term>
            				<description>Description</description>
            			</listheader>
            			<item>
            				<term><c>true</c></term>
                            <description>
                                <para><paramref name="left"/> or <paramref name="right"/> is <see cref="F:Teradata.Client.Provider.TdPeriodTimestamp.Null"/></para> 
                                <para>-or-</para>
                                <para><paramref name="left"/> is less than or greater than <paramref name="right"/>.</para>
                            </description>
            			</item>
            			<item>
            				<term><c>false</c></term>
                            <description>
                            <para><paramref name="left"/> and <paramref name="right"/> are <strong>Null</strong></para>
                            <para>-or-</para>
                            <para><paramref name="left"/> is equal to <paramref name="right"/>.</para>
                            </description>
            			</item>
            		</list>
            	</para>
            </remarks>
            <param name="left">An instance of TdPeriodTimestamp.</param>
            <param name="right">An instance of TdPeriodTimestamp.</param>        
        </member>
        <member name="M:Teradata.Client.Provider.TdPeriodTimestamp.op_GreaterThan(Teradata.Client.Provider.TdPeriodTimestamp,Teradata.Client.Provider.TdPeriodTimestamp)">
            <summary>
            Compares two TdPeriodTimestamp structures to determine whether the <paramref name="left"/> is 
            greater than the <paramref name="right"/> operand.
            </summary>
            <returns>
            A boolean is returned that indicates the result of the comparison.
            </returns>
            <remarks>
            <para>The beginning and ending bounds between the left and right operands are compared 
            to determine whether the left period is greater than the right.  The left is greater
            than the right if the following is true:</para>
            
            <pre>    left.Begin &gt; right.Begin OR (left.Begin == right.Begin AND left.End &gt; right.End)</pre>
            
            	<para>
            		The value returned is <c>true</c> if the <paramref name="left"/> is greater
                    than the <paramref name="right"/>, <c>false</c> otherwise.
                </para>
            	<para>
            		<list type="table">
            			<listheader>
            				<term>Return Value</term>
            				<description>Description</description>
            			</listheader>
            			<item>
            				<term><c>true</c></term>
                            <description><paramref name="left"/> and <paramref name="right"/> are not <see cref="F:Teradata.Client.Provider.TdPeriodTimestamp.Null"/> and
                            <paramref name="left"/> is greater than <paramref name="right"/>.
                            </description>
            			</item>
            			<item>
            				<term><c>false</c></term>
                            <description>
                            <para><paramref name="left"/> and / or <paramref name="right"/> is <strong>Null</strong> </para>
                            <para>-or-</para>
                            <para><paramref name="left"/> is less than or equal to <paramref name="right"/>.</para>
                            </description>
            			</item>
            		</list>
            	</para>
            
            <para>Comparison operators always returns <c>false</c> if one of the operands is 
            <strong>Null</strong>.  Therefore, you must not assume that the reverse condition 
            is <c>true</c>. For example you cannot assume that the left operand is less than or 
            equal to the right operand if the "<c>&gt;</c>" operator returns <c>false</c>.</para> 
            </remarks>
            <param name="left">An instance of TdPeriodTimestamp.</param>
            <param name="right">An instance of TdPeriodTimestamp.</param>
        </member>
        <member name="M:Teradata.Client.Provider.TdPeriodTimestamp.op_GreaterThanOrEqual(Teradata.Client.Provider.TdPeriodTimestamp,Teradata.Client.Provider.TdPeriodTimestamp)">
            <summary>
            Compares two TdPeriodTimestamp structures to determine whether the <paramref name="left"/> operand is 
            greater than or equal to the <paramref name="right"/> operand.
            </summary>
            <returns>
            A boolean is returned that indicates the result of the comparison.
            </returns>
            <remarks>
            <para>In order to perform this comparison the beginning and ending bounds of the left
            and right operands are compared against each other.  The left is greater than or equal
            to the right if the following is true:</para>
            
            <pre>    (left.Begin &gt; right.Begin) || (left.Begin == right.Begin &amp;&amp; left.End &gt;= right.End)</pre>
            
            	<para>
            		The value returned is <c>true</c> if the <paramref name="left"/> is greater
                    than or equal to the <paramref name="right"/>, <c>false</c> otherwise.
                </para>
            	<para>
            		<list type="table">
            			<listheader>
            				<term>Return Value</term>
            				<description>Description</description>
            			</listheader>
            			<item>
            				<term><c>true</c></term>
                            <description><paramref name="left"/> and <paramref name="right"/> are not <see cref="F:Teradata.Client.Provider.TdPeriodTimestamp.Null"/> and
                            <paramref name="left"/> is greater than or equal to <paramref name="right"/>.
                            </description>
            			</item>
            			<item>
            				<term><c>false</c></term>
                            <description>
                            <para><paramref name="left"/> and / or <paramref name="right"/> is <strong>Null</strong> </para>
                            <para>-or-</para>
                            <para><paramref name="left"/> is less than <paramref name="right"/>.</para>
                            </description>
            			</item>
            		</list>
            	</para>
            
            <para>Comparison operators always returns <c>false</c> if one of the operands is 
            <strong>Null</strong>.  Therefore, you must not assume that the reverse condition 
            is <c>true</c>. For example you cannot assume that the left operand is less than the 
            right operand if the "<c>&gt;=</c>" operator returns <c>false</c>.</para> 
            </remarks>
            <param name="left">An instance of TdPeriodTimestamp.</param>
            <param name="right">An instance of TdPeriodTimestamp.</param>
        </member>
        <member name="M:Teradata.Client.Provider.TdPeriodTimestamp.op_LessThan(Teradata.Client.Provider.TdPeriodTimestamp,Teradata.Client.Provider.TdPeriodTimestamp)">
            <summary>
            Compares two TdPeriodTimestamp structures to determine whether the <paramref name="left"/> is 
            less than the <paramref name="right"/> operand.
            </summary>
            <returns>
            A boolean is returned that indicates the result of the comparison.
            </returns>
            <remarks>
            <para>In order to perform this comparison the beginning and ending bounds of the left
            and right operands are compared against each other.  The left is less than the right if 
            the following is true:</para>
            
            <pre>    left.Begin &lt; right.Begin || (left.Begin == right.Begin &amp;&amp; left.End &lt; right.End)</pre>
            
            	<para>
            		The value returned is <c>true</c> if the <paramref name="left"/> is less
                    than the <paramref name="right"/>, <c>false</c> otherwise.
                </para>
            	<para>
            		<list type="table">
            			<listheader>
            				<term>Return Value</term>
            				<description>Description</description>
            			</listheader>
            			<item>
            				<term><c>true</c></term>
                            <description><paramref name="left"/> and <paramref name="right"/> are not <see cref="F:Teradata.Client.Provider.TdPeriodTimestamp.Null"/> and
                            <paramref name="left"/> is less than <paramref name="right"/>.
                            </description>
            			</item>
            			<item>
            				<term><c>false</c></term>
                            <description>
                            <para><paramref name="left"/> and / or <paramref name="right"/> is <strong>Null</strong></para>
                            <para>-or-</para>
                            <para><paramref name="left"/> is greater than or equal to <paramref name="right"/>.</para>
                            </description>
            			</item>
            		</list>
            	</para>
            
            <para>Comparison operators always returns <c>false</c> if one of the operands is 
            <strong>Null</strong>.  Therefore, you must not assume that the reverse condition is 
            <c>true</c>. For example you cannot assume that the left operand is greater than or 
            equal the right operand if the "<c>&lt;</c>" operator returns <c>false</c>.</para> 
            </remarks>
            <param name="left">An instance of TdPeriodTimestamp.</param>
            <param name="right">An instance of TdPeriodTimestamp.</param>
        </member>
        <member name="M:Teradata.Client.Provider.TdPeriodTimestamp.op_LessThanOrEqual(Teradata.Client.Provider.TdPeriodTimestamp,Teradata.Client.Provider.TdPeriodTimestamp)">
            <summary>
            Compares two TdPeriodTimestamp structures to determine whether the <paramref name="left"/> is 
            less than or equal to the <paramref name="right"/> operand.
            </summary>
            <returns>
            A boolean is returned that indicates the result of the comparison.
            </returns>
            <remarks>
            <para>In order to perform this comparison the beginning and ending bounds of the left
            and right operands are compared against each other.  The left is equal to or less than the right if 
            the following is true:</para>
            
            <pre>    left.Begin &lt; right.Begin || (left.Begin == right.Begin &amp;&amp; left.End &lt;= right.End)</pre>
            
            	<para>
            		<c>true</c> if the <paramref name="left"/> is less
                    than or equal to the <paramref name="right"/>, <c>false</c> otherwise.
                </para>
            	<para>
            		<list type="table">
            			<listheader>
            				<term>Return Value</term>
            				<description>Description</description>
            			</listheader>
            			<item>
            				<term><c>true</c></term>
                            <description><paramref name="left"/> and <paramref name="right"/> are not <see cref="F:Teradata.Client.Provider.TdPeriodTimestamp.Null"/> and
                            <paramref name="left"/> is less than or equal to <paramref name="right"/>.
                            </description>
            			</item>
            			<item>
            				<term><c>false</c></term>
                            <description>
                            <para><paramref name="left"/> and / or <paramref name="right"/> is <strong>Null</strong></para>
                            <para>-or-</para>
                            <para><paramref name="left"/> is greater than <paramref name="right"/>.</para>
                            </description>
            			</item>
            		</list>
            	</para>
            
            <para>Comparison operators always returns <c>false</c> if one of the operands is 
            <strong>Null</strong>.  Therefore, you must not assume that the reverse condition is 
            <c>true</c>. For example you cannot assume that the left operand is greater than the 
            right operand if the "<c>&lt;=</c>" operator returns <c>false</c>.</para> 
            </remarks>
            <param name="left">An instance of TdPeriodTimestamp.</param>
            <param name="right">An instance of TdPeriodTimestamp.</param>
        </member>
        <member name="M:Teradata.Client.Provider.TdPeriodTimestamp.CompareTo(Teradata.Client.Provider.TdPeriodTimestamp)">
            <summary>
            Compares this instance to the specified TdPeriodTimestamp <paramref name="other"/>. 
            </summary>
            <returns>
            The result of the comparison is returned as an integer.
            </returns>
            <remarks>
            	<para>
                    The integer returned when this instance is compared to <paramref name="other"/>
                    indicates the following:
                </para>
            	<para>
            	<list type="table">
            		<listheader>
            			<term>Return Value</term>
            			<description>Meaning</description>
            		</listheader>
            		<item>
            			<term>Less than zero</term>
            			<description>
                            <para>This instance is less than <paramref name="other"/>.</para> 
                            <para>-or-</para>
                            <para>This instance is <see cref="F:Teradata.Client.Provider.TdPeriodTimestamp.Null"/>.</para><br/>
                            <para><strong>Comparison Algorithm</strong></para>
                            <para>    this.Begin &lt; other.Begin OR (this.Begin == other.Begin AND this.End &lt; other.End)</para>
                        </description>
            		</item>
            		<item>
            			<term>Zero</term>
            			<description>
                            <para>This instance is equal to <paramref name="other"/>.</para>
                            <para>-or-</para>
                            <para>This instance and <paramref name="other"/> are <Strong>Null</Strong>.</para><br/>
                            <para><strong>Comparison Algorithm</strong></para>
                            <para>    this.Begin == other.Begin AND this.End == other.End</para>
                        </description>
            		</item>
            		<item>
            			<term>Greater than zero</term>
            			<description>
                            <para>This instance is greater than <paramref name="other"/>.</para>
                            <para>-or-</para>
                            <para><paramref name="other"/> is <Strong>Null.</Strong></para><br/>
                            <para><strong>Comparison Algorithm</strong></para>
                            <para>    this.Begin &gt; other.Begin OR (this.Begin == other.Begin AND this.End &gt; other.End)</para>
                        </description>
            		</item>
            	</list>     
            	</para>
            </remarks>
            <param name="other">The TdPeriodTimestamp to compare against.</param>
        </member>
        <member name="M:Teradata.Client.Provider.TdPeriodTimestamp.CompareTo(System.Object)">
            <summary>
            Compares this instance to the specified TdPeriodTimestamp <paramref name="obj"/>. 
            </summary>
            
            <returns>
            The result of the comparison is returned as an integer.
            </returns>
            
            <remarks>
            	<para>
                    The integer returned when this instance is compared to <paramref name="obj"/>
                    indicates the following:
                </para>
            	<para>
            	<list type="table">
            		<listheader>
            			<term>Return Value</term>
            			<description>Meaning</description>
            		</listheader>
            		<item>
            			<term>Less than zero</term>
            			<description>
                            <para>This instance is less than <paramref name="obj"/>.</para> 
                            <para>-or-</para>
                            <para>This instance is <see cref="F:Teradata.Client.Provider.TdPeriodTimestamp.Null"/>.</para><br/>
                            <para><strong>Comparison Algorithm</strong></para>
                            <para>    this.Begin &lt; other.Begin OR (this.Begin == other.Begin AND this.End &lt; other.End)</para>
                        </description>
            		</item>
            		<item>
            			<term>Zero</term>
            			<description>
                            <para>This instance is equal to <paramref name="obj"/>.</para>
                            <para>-or-</para>
                            <para>This instance and <paramref name="obj"/> are <Strong>Null</Strong>.</para><br/>
                            <para><strong>Comparison Algorithm</strong></para>
                            <para>    this.Begin == other.Begin AND this.End == other.End</para>
                        </description>
            		</item>
            		<item>
            			<term>Greater than zero</term>
            			<description>
                            <para>This instance is greater than <paramref name="obj"/>.</para>
                            <para>-or-</para>
                            <para><paramref name="obj"/> is <Strong>Null.</Strong></para><br/>
                            <para><strong>Comparison Algorithm</strong></para>
                            <para>    this.Begin &gt; other.Begin OR (this.Begin == other.Begin AND this.End &gt; other.End)</para>
                        </description>
            		</item>
            	</list>     
            	</para>
            
              <para><paramref name="obj"/> must be an instance of TdPeriodTimestamp type or <c>null</c> reference.</para>
            </remarks>
            
            <exception cref="T:System.ArgumentException"><paramref name="obj"/> is not of type TdPeriodTimestamp</exception>
            <seealso cref="M:Teradata.Client.Provider.TdPeriodTimestamp.CompareTo(Teradata.Client.Provider.TdPeriodTimestamp)"/>
            
            <overloads>
            Compares this instance to the supplied object and returns whether it is less
            than, equal or greater than the supplied object.
            </overloads>
            
            <param name="obj">TdPeriodTimestamp instance to compare against.</param>
        </member>
        <member name="M:Teradata.Client.Provider.TdPeriodTimestamp.ToString">
            <summary>
            This instance of TdPeriodTimestamp is converted to a String representation.
            </summary>
            
            <returns>The string representation of TdPeriodTimestamp is returned.</returns>
            
            <remarks>
            <para>When a TdPeriodTimestamp is converted to a string, both the beginning and ending bounds 
            will be included in the returning string.  The format of the string will be:</para>
            
            <pre>    (yyyy-MM-dd HH:mm:ss.ffffff, yyyy-MM-dd HH:mm:ss.ffffff)    </pre>
            
            <para>An example of a string representation of a TdPeriodTimestamp is</para>
            
            <pre>    (2007-10-31 20:21:56.323, 2007-11-27 01:31:21.564)</pre>
            </remarks>
            <overloads>
            Returns the string representation of the period.
            </overloads>
        </member>
        <member name="M:Teradata.Client.Provider.TdPeriodTimestamp.ToString(System.String)">
            <summary>
            TdPeriodTimestamp is converted to the equivalent String using the specified format.
            </summary>
            
            <param name="format">The DateTime format string that will be used to format the TdPeriodTimestamp.</param>
            
            <returns>A string representation of the Period.</returns>
            
            <exception cref="T:System.FormatException">The specified format specifier is not supported.</exception>
            
            <remarks>
            <para>When a TdPeriodTimestamp is converted to a string, both the beginning and ending bounds 
            will be included in the returning string.  The format of the string will be:</para>
            
            <pre>    (<i>Beginning Bound</i>, <i>Ending Bound</i>)</pre>
            
            <para>The format specifier is only used when formatting the string representation of the 
            beginning and ending bounds of the period.  It will not affect the format of the period.</para>
            
            <para>If the format parameter is null, the string representation of TdPeriodTimestamp will
            be equivalent to the "G" format specifier which is</para>
            
            <pre>    (yyyy-MM-dd HH:mm:ss.ffffff, yyyy-MM-dd HH:mm:ss.ffffff)</pre>
            
            <para>The following format specifiers are supported by TdPeriodTimestamp:</para>
            
            <para>
            <list type="table">
            <listheader>
            <term>Format Specifier</term>
            <description>Description</description>
            </listheader>
            <item>
            <term>G</term>
            <description><para>The ANSI representation of the period:  
            (yyyy-MM-dd HH:mm:ss.ffffff, yyyy-MM-dd HH:mm:ss.ffffff).  </para>
            <para>Example:  (2008-08-14 10:21:31.002, 2008-12-15 12:45:00.212).</para></description>
            </item>
            <item>
            <term>l or L</term>
            <description><para>The Teradata database's literal representation of the period:
            PERIOD'(yyyy-MM-dd HH:mm:ss.ffffff, yyyy-MM-dd HH:mm:ss.ffffff)'.</para>
            <para>Example:  PERIOD'(2008-04-14 10:21:31.002, 2008-12-15 12:45:00.212)'.</para></description>
            </item>
            </list>
            </para>
            
            </remarks>
            <seealso cref="M:Teradata.Client.Provider.TdTimestamp.ToString(System.String)"/>
        </member>
        <member name="M:Teradata.Client.Provider.TdPeriodTimestamp.ToString(System.String,System.IFormatProvider)">
             <summary>
             TdPeriodTimestamp is converted into the equivalent String representation using the 
             specified format.  Culture information is not used when converting a period to a string.
             </summary>
             
             <param name="format">The DateTime format string that will be used to format the TdPeriodTimestamp.</param>
             <param name="formatProvider">The culture specific information.  The culture specific information
             is not used when converting a Period into a string.</param>
             
             <returns>A string representation of the period contained in TdPeriodTimestamp.</returns>
             
             <remarks>
             <para>When a TdPeriodTimestamp is converted to a string, both the beginning and ending bound 
             will be included in the returning string.  The format of the string will be:</para>
             
             <pre>    (<i>Beginning Bound</i>, <i>Ending Bound</i>)    </pre>
             
             <para>The format specifier affects the string 
             representation of the beginning and ending bounds of the period.  Cultural information
             specified in the <paramref name="formatProvider"/> is ignored.</para>
            
             <para>If the format parameter is null, the string representation of TdPeriodTimestamp will
             be equivalent to the "G" format specifier which is </para>
             
             <pre>    (yyyy-MM-dd HH:mm:ss.ffffff, yyyy-MM-dd HH:mm:ss.ffffff)</pre>
            
             <para>The following format specifiers are supported by TdPeriodTimestamp:</para>
             
             <para>
             <list type="table">
                <listheader>
                     <term>Format Specifier</term>
                     <description>Description</description>
                </listheader>
                <item>
                     <term>G</term>
                     <description><para>The ANSI representation of the period:  
                         (yyyy-MM-dd HH:mm:ss.ffffff, yyyy-MM-dd HH:mm:ss.ffffff). </para> 
                         <para>Example:  (2008-08-14 10:21:31.002, 2008-12-15 12:45:00.212).</para>
                     </description>
                 </item>
                 <item>
                     <term>l or L</term>
                     <description><para>The Teradata database's literal representation of the period:
                         PERIOD'(yyyy-MM-dd HH:mm:ss.ffffff, yyyy-MM-dd HH:mm:ss.ffffff)'.</para>
                         <para>Example:  PERIOD'(2008-04-14 10:21:31.002, 2008-12-15 12:45:00.212)'.</para>
                     </description>
                 </item>
             </list>
             </para>
             </remarks>
             <seealso cref="M:Teradata.Client.Provider.TdTimestamp.ToString(System.String,System.IFormatProvider)"/>
             <seealso cref="M:Teradata.Client.Provider.TdPeriodTimestamp.ToString(System.String)"/>
        </member>
        <member name="M:Teradata.Client.Provider.TdPeriodTimestamp.Parse(System.String)">
            <summary>
            The specified string is converted into an equivalent TdPeriodTimestamp.
            </summary>
            
            <param name="value">The string that is to be converted into a TdPeriodTimestamp.</param>
            
            <returns>A TdPeriodTimestamp is returned that is equivalent to the Period contained in the value string.</returns>
            
            <exception cref="T:System.ArgumentNullException">Value is a null reference.</exception>
            <exception cref="T:System.FormatException">Value does not contain a valid representation of a period.</exception>
            
            <remarks>
            <para>A period will have the following string representation: </para>
            
            <para>    (<i>Beginning Bound</i>, <i>Ending Bound</i>)</para>
            
            <para>The period must be surrounded by parentheses.  Both the Beginning and Ending
            bounds can <strong>optionally</strong> be surrounded by single quotes (" ' ").  
            The exception to this is when the Teradata <strong>literal</strong> string representation of
            period is specified.
            The comma (" , ") is used as the delimeter between the Begin and End timestamps.  </para>
            
            <para>Refer to <see cref="M:Teradata.Client.Provider.TdPeriodTimestamp.ToString(System.String)"/> for valid formats for TdPeriodTimestamp.</para>
            
            </remarks>
            <seealso cref="M:Teradata.Client.Provider.TdTimestamp.Parse(System.String)"/>
            <seealso cref="M:Teradata.Client.Provider.TdPeriodTimestamp.ToString(System.String)"/>
        </member>
        <member name="M:Teradata.Client.Provider.TdPeriodTimestamp.TryParse(System.String,Teradata.Client.Provider.TdPeriodTimestamp@)">
             <summary>
             The specified string is converted into an equivalent TdPeriodTimestamp.
             </summary>
             <param name="value">The string that contains the TdPeriodTimestamp representation.</param>
             <param name="result">The TdPeriodTimestamp representation of the period contained in the specified string.</param>
             <returns>A Boolean is returned that indicates whether the conversion succeeded.  
             <c>true</c> indicates that the conversion was successful and that the conversion is 
             returned through the result parameter.  <c>false</c> indicates that the conversion 
             failed.</returns>
             <remarks>
             <para>TryParse is the same as Parse except that an exception does not get thrown 
             when the conversion fails.</para>
             
             <para>A period will have the following format: </para>
             
             <para>    (<i>Beginning Bound</i>, <i>Ending Bound</i>)</para>
            
             <para>The period must be surrounded by parentheses.  Both the Beginning and Ending
             bounds can <strong>optionally</strong> be surrounded by single quotes (" ' ").  
             The exception to this is when the Teradata <strong>literal</strong> string representation of
             period is specified.
             The comma (" , ") is used as the delimeter between the Begin and End timestamps.  </para>
             
             <para>Refer to <see cref="M:Teradata.Client.Provider.TdPeriodTimestamp.ToString(System.String)"/> for valid formats for TdPeriodTimestamp.</para>
             
              <para>If <paramref name="value"/> is null or String.Empty, a <strong>false</strong> is
             returned and the <paramref name="result"/> parameter is set to <see cref="F:Teradata.Client.Provider.TdPeriodTimestamp.MinValue"/>. </para>
            
             <para>If the conversion fails the result parameter will be set to TdPeriodTimestamp.MinValue.</para>
             
             </remarks>
             
             <seealso cref="M:Teradata.Client.Provider.TdPeriodTimestamp.Parse(System.String)"/>
             <seealso cref="M:Teradata.Client.Provider.TdTimestamp.TryParse(System.String,Teradata.Client.Provider.TdTimestamp@)"/>
             <seealso cref="M:Teradata.Client.Provider.TdPeriodTimestamp.ToString(System.String)"/>
        </member>
        <member name="M:Teradata.Client.Provider.TdPeriodTimestamp.GetXmlSchema(System.Xml.Schema.XmlSchemaSet)">
             <summary>
             Specifies the XML Qualified name for <strong>TdPeriodTimestamp</strong> XML type mapping.
             </summary>
             <param name="xmlSchemaSet">Holds zero or more XML Schema definition language (XSD) schemas.</param>
             <returns>
             Returns a XmlSchemaComplexType that describes a TdPeriodTimeStamp.
             </returns>
             <example>
             This examples shows how to use <strong>TdPeriodTimestamp</strong> with the <see cref="T:System.Xml.Serialization.XmlSerializer"/> class.
             <see cref="T:System.Xml.Serialization.XmlElementAttribute"/> is used to indicate that the Teradata Database column can be <strong>Null</strong>.
             <code>
              public class ProductAdvertisement
              {
                  public TdDate Date;
            
                  public Int32 ProductId;
            
                  public Int32? QuantityAvailable;
             
                  public TdPeriodTimestamp advertisePeriod
            
                  public String adPlacement;
              }
             
              internal class ProductAdvertisementWriter
              {
              
                  public static void Write()
                  {
                      // Setup the advertisement
                      ProductAdvertisement x = new ProductAdvertisement();
              
                      x.Date = new TdDate(DateTime.Today);
                      x.ProductId = 100;
                      x.QuantityAvailable = 2000;
             
                      // Advertisement will last for 14 days, 23 hours, 59 minutes, 59 seconds from today
                      x.AdvertisePeriod = 
                             new TdPeriodTimestamp(
                                 new TdTimestamp(DateTime.Today), 
                                 new TdTimestamp(DateTime.Today + new TimeSpan(14, 23, 59, 59));
                      x.adPlacement = "The Newspaper";
            
                      // Write out today's orders to the file.
                      //
                      // Open the file.
                      XmlWriterSettings settings = new XmlWriterSettings();
                      settings.Indent = true;
                      XmlWriter writer = XmlWriter.Create(@"C:\Temp\ProductAdvertisements.XML", settings);
                      writer.WriteStartElement("ProductAdvertisements");
                
                      // Write out the schema.
                      XmlSchemas schemas = new XmlSchemas();
                      XmlSchemaExporter schExporter = new XmlSchemaExporter(schemas);
                      schExporter.ExportTypeMapping(new XmlReflectionImporter().ImportTypeMapping(typeof(ProductAdvertisement)));
             
                      // The schemas must be compiled in order for the schema of the Period type
                      // to be written out.
                      schemas.Compile(null, false);
             
                      schemas[0].Write(writer);
            
                      // Write out the orders.
                      XmlSerializer xml = new XmlSerializer(typeof(ProductAdvertisement));
                      xml.Serialize(writer, x);
              
                      // Close the document.
                      writer.WriteEndDocument();
                      writer.Close();
                  }
              }
             
             /* Output is:
             
             <TodayOrders>
               <xs:schema elementFormDefault="qualified" xmlns:xs="http://www.w3.org/2001/XMLSchema">
                 <xs:element name="Order" nillable="true" type="Order"/>
                 <xs:complexType name="Order">
                   <xs:sequence>
                     <xs:element minOccurs="1" maxOccurs="1" name="Date" type="xs:date"/>
                     <xs:element minOccurs="1" maxOccurs="1" name="ProductId" type="xs:int"/>
                     <xs:element minOccurs="1" maxOccurs="1" name="QuantityAvailable" type="xs:int"/>
                     <xs:element minOccurs="1" maxOccurs="1" name="AdvertisePeriod" type="Teradata.Client.Provider.TdPeriodTimestamp"/>
                     <xs:element minOccurs="1" maxOccurs="1" name="AdPlacement" nillable="true" type="xs:string"/>
                   </xs:sequence>
                 </xs:complexType>
                 <xs:complexType name="Teradata.Client.Provider.TdPeriodTimestamp">
                     <xs:sequence>
                         <xs:element name="BeginBound" type="xs:dateTime"/>
                         <xs:element name="EndBound" type="xs:dateTime"/>
                     </xs:sequence>
                 </xs:complexType>
               </xs:schema>
               <Order xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xmlns:xsd="http://www.w3.org/2001/XMLSchema">
                 <Date>2007-02-01</Date>
                 <ProductId>100</ProductId>
                 <QuantityAvailable>2000</QuantityAvailable>
                 <AdvertisePeriod>
                     <BeginBound>2007-02-01 10:11:21 00:00:00.000000</BeginBound>
                     <EndBound>2007-02-08 23:59:59.999999</EndBound>
                 </AdvertisePeriod>
                 <AdPlacement>The Magazine</AdPlacement>
               </Order>
             </TodayOrders>
             
             */
             </code>
             </example>        
        </member>
        <member name="M:Teradata.Client.Provider.TdPeriodTimestamp.IntervalTimeSpan">
            <summary>
            Gets the span of time in the period.
            </summary>
            <returns>The TimeSpan value that contains the span of time starting from the beginning bound to, 
            but not including, the ending bound.</returns>
            <remarks>
            <para>The TimeSpan that is returned represents the number of hours, minutes, seconds
            and microseconds of the duration.</para>
            </remarks>
        </member>
        <member name="M:Teradata.Client.Provider.TdPeriodTimestamp.IntervalDayToSecond">
            <summary>
               Calculates the span of time between the starting and ending bounds and 
               returns the result in a <strong>TdIntervalDayToSecond</strong> structure.
            </summary>
            <returns>
               The <strong>TdIntervalDayToSecond</strong> value that contains the difference in hours,
               minutes, seconds and microseconds between the period ending bound and the 
               period starting bound.
            </returns>&gt;
            <exception cref="T:Teradata.Client.Provider.TdException">This instance of <strong>TdPeriodTimestamp</strong> is null.</exception>
            <exception cref="T:System.OverflowException">The period exceeds the <see cref="F:Teradata.Client.Provider.TdIntervalDayToSecond.MinValue"/> or <see cref="F:Teradata.Client.Provider.TdIntervalDayToSecond.MaxValue"/>.</exception>
            <remarks>
            <para>
               The difference between the ending bound and the starting bound is calculated.  The number
               of hours, minutes, seconds and microseconds are calculated and returned as a 
               <strong>TdIntervalDayToSecond</strong>.
            </para>
            </remarks>
        </member>
        <member name="M:Teradata.Client.Provider.TdPeriodTimestamp.IntervalYearToMonth">
            <summary>
               Calculates the span of time between the starting and ending bounds and 
               returns the result in a <strong>TdIntervalYearToMonth</strong> structure.  
            </summary>
            <returns>
               The <strong>TdIntervalYearToMonth</strong> value that contains the difference in years 
               and months between the period ending bound and the period starting bound.
            </returns>&gt;
            <exception cref="T:Teradata.Client.Provider.TdException">This instance of <strong>TdPeriodTimestamp</strong> is null.</exception>
            <remarks>
            <para>
               The difference between the ending bound and the starting bound are calculated.  Only the
               years and months are used in the calculation.
            </para>
            <para>
               The <strong>TdIntervalYearToMonth</strong> supports only years and months.  The days 
               are discarded during the difference calculation.
            </para>
            </remarks>
        </member>
        <member name="M:Teradata.Client.Provider.TdPeriodTimestamp.LeftDiff(Teradata.Client.Provider.TdPeriodTimestamp,Teradata.Client.Provider.TdPeriodTimestamp)">
            <summary>
            The period whose beginning and ending bounds are defined as the beginning bound of the 
            <paramref name="left"/> operand and the beginning bound of the <paramref name="right"/> 
            operand when the operands overlap.
            </summary>
            <param name="left">The left TdPeriodTimestamp operand.</param>
            <param name="right">The right TdPeriodTimestamp operand.</param>
            <returns>A TdPeriodTimestamp is returned that includes the portion of the left operand that 
            exists before the beginning of the right operand when the operands overlap.</returns>
            <remarks>
            <para>A <see cref="F:Teradata.Client.Provider.TdPeriodTimestamp.Null"/> is returned under the following scenarios:</para>
            
            <list type="bullet">
            <item>The left and right operands do not overlap.</item>
            <item>The beginning bound of the left operand is greater than the beginning 
            bound of the right operand.</item>
            <item>Either the left or right operand is null.</item>
            </list>
            
            <para>In the following examples the left and right operand are defined as
            <strong>(bL, eL)</strong> and <strong>(bR, eR)</strong>, respectively.</para>
            
            <list type="table">
            <listheader>
            <term>Example</term>
            <description>Comments</description>
            </listheader>
            <item>
            <term>
            <pre>
            |---------|--------|-------|
            bL        bR       eL      eR
            |=========|
            </pre>
            </term>
            <description>Ldiff = (bL, bR)</description>
            </item>
            <item>
            <term>
            <pre>
            |----------|-------|------|
            bL         bR      eR     eL
            |==========|
            </pre>
            </term>
            <description>Ldiff = (bL, bR)</description>
            </item>
            <item>
            <term>
            <pre>
            |--------|-------|-------|
            bL       eL      bR      eR
            </pre>
            </term>
            <description><para>Ldiff = TdPeriodTimestamp.Null</para>
            <para>The left and right operands do not overlap.</para>
            </description>
            </item>
            <item>
            <term>
            <pre>
            |--------|-------|-------|
            bR       bL      eR      eL
            </pre>
            </term>
            <description><para>Ldiff = TdPeriodTimestamp.Null</para>
            <para>The beginning bound of the right operand is greater than the beginning bound of the left.</para>
            </description>
            </item>
            <item>
            <term>
            <pre>
            |-----------|---------|
            bL        eL bR       eR
            </pre>
            </term>
            <description><para>Ldiff = TdPeriodTimestamp.Null</para>
            <para>The left and right operands do not overlap.</para>
            </description>
            </item>
            <item>
            <term>
            <pre>
              |---------|--------|
            bL bR       eR       eL
            </pre>
            </term>
            <description><para>Ldiff = TdPeriodTimestamp.Null</para>
            <para>The beginning bounds of both operands are equal.  A period cannot be
            created whose beginning and ending bounds are equal.</para>
            </description>
            </item>
            </list>
            
            </remarks>
        </member>
        <member name="M:Teradata.Client.Provider.TdPeriodTimestamp.RightDiff(Teradata.Client.Provider.TdPeriodTimestamp,Teradata.Client.Provider.TdPeriodTimestamp)">
            <summary>
            The period that contains the portion from the ending bound of the <paramref name="left"/> operand to
            the ending bound of the <paramref name="right"/> when the operands overlap.
            </summary>
            <param name="left">The left TdPeriodTimestamp operand.</param>
            <param name="right">The right TdPeriodTimestamp operand.</param>
            <returns>A TdPeriodTimestamp is returned that contains the period that begins from the 
            end of the left operand to the end of the right when the operands overlap.</returns>
            <remarks>
            <para>A <see cref="F:Teradata.Client.Provider.TdPeriodTimestamp.Null"/> is returned under the following scenarios:</para>
            
            <list type="bullet">
            <item>The left and right operands do not overlap.</item>
            <item>The ending bound of the left operand is greater or equal to the ending bound of the right.</item>
            <item>Either the left or right operand is null.</item>
            </list>
            
            <para>In the following examples the left and right operands are defined as
            <strong>(bL, eL)</strong> and <strong>(bR, eR)</strong>, respectively.</para>
            
            <list type="table">
            <listheader>
            <term>Example</term>
            <description>Comments</description>
            </listheader>
            <item>
            <term>
            <pre>
            |-------|--------|-------|
            bL        bR     eL      eR
                             |=======|
            </pre>
            </term>
            <description>Rdiff = (eL, eR)</description>
            </item>
            <item>
            <term>
            <pre>
            |-------|-------|--------|
            bR     bL       eL       eR
                            |========|
            </pre>
            </term>
            <description>Rdiff = (eL, eR)</description>
            </item>
            <item>
            <term>
            <pre>
            |-------|--------|--------|
            bL      bR       eR       eL
            </pre>
            </term>
            <description><para>Rdiff = null</para>
            <para>The left operand's ending bound is greater than the ending bound of the right operand.</para>
            </description>
            </item>
            <item>
            <term>
            <pre>
            |---------|-----|--------|
            bL        eL    bR       eR
            </pre>
            </term>
            <description><para>Rdiff = null</para>
            <para>The left and right operands do not overlap.</para>
            </description>
            </item>
            <item>
            <term>
            <pre>
            |---------|-----|--------|
            bR        eR    bL       eL
            </pre>
            </term>
            <description><para>Rdiff = null</para>
            <para>The left and right operands do not overlap.</para>
            </description>
            </item>
            <item>
            <term>
            <pre>
            |----------|----------|
            bL         bR       eL eR
            </pre>
            </term>
            <description><para>Rdiff = null</para>
            <para>The ending bounds are equal.  In other words, a period cannot be defined
            whose starting and ending bounds are equal.</para>
            </description>
            </item>
            </list>
            
            </remarks>
        </member>
        <member name="M:Teradata.Client.Provider.TdPeriodTimestamp.Normalize(Teradata.Client.Provider.TdPeriodTimestamp,Teradata.Client.Provider.TdPeriodTimestamp)">
             <summary>
             A TdPeriodTimestamp that contains a period that encompasses both periods of the
             left and right operands.  The beginning bound is defined as the minimum of
             left and right beginning bounds, and the ending bound is defined as the 
             maximum of the left and right ending bounds.  The operands must either meet
             or overlap.
             </summary>
             <param name="left">The left TdPeriodTimestamp operand.</param>
             <param name="right">The right TdPeriodTimestamp operand.</param>
             <returns>A TdPeriodTimestamp is returned whose period includes both operands.</returns>
             <remarks>
             <para>A <see cref="F:Teradata.Client.Provider.TdPeriodTimestamp.Null"/> is returned under the following scenarios:</para>
             
             <list>
             <item>The left and right operands do not overlap.</item>
             <item>Either the left or right operand is null.</item>
             </list>
             
             <para>In the following examples the left and right operands are defined as
             <strong>(bL, eL)</strong> and <strong>(bR, eR)</strong>, respectively.</para>
             
             <list type="table">
             <listheader>
             <term>Example</term>
             <description>Comments</description>
             </listheader>
             <item>
             <term>
             <pre>
             |--------|-----|------|
             bL       bR    eL     eR
             |=====================|
             </pre>
             </term>
             <description>Normalize = (bL, eR)</description>
             </item>
             <item>
             <term>
             <pre>
             |-------|-------|------|
             bR      bL      eR     eL
             |======================|
             </pre>
             </term>
             <description>Normalize = (bR, eL)</description>
             </item>
             <item>
             <term>
             <pre>
             |-------|------|-------|
             bL      bR     eR      eL
             |======================|
             </pre>
             </term>
             <description>Normalize = (bL, eL)</description>
             </item>
             <item>
             <term>
             <pre>
             |--------|------|--------|
             bR       bL     eL       eR
             |========================|
             </pre>
             </term>
             <description>Normalize = (bR, eR)</description>
             </item>
             <item>
             <term>
             <pre>
             |---------|---------|
             bL      eL bR       eR
             |===================|
             </pre>
             </term>
             <description>Normalize = (bL, eR)</description>
             </item>
             <item>
             <term>
             <pre>
             |-------|-------|---------|
             bL      eL      bR        eR
             </pre>
             </term>
             <description><para>Normalize = TdPeriodTimestamp.Null</para>
             <para>The periods do not overlap.</para>
             </description>
             </item>
             </list>
            
             </remarks>
        </member>
        <member name="M:Teradata.Client.Provider.TdPeriodTimestamp.Precedes(Teradata.Client.Provider.TdPeriodTimestamp)">
             <summary>
             Indicates whether this instance precedes the period value.
             </summary>
             <param name="value">The TdPeriodTimestamp operand.</param>
             <returns>A <c>true</c> is returned when this instance precedes the value,  otherwise 
             a <c>false </c>is returned.</returns>
             <remarks>
             <para>A <c>false</c> will be returned if <paramref name="value"/> is <see cref="F:Teradata.Client.Provider.TdPeriodTimestamp.Null"/>.</para>
             
             <para>This instance will precede the value if the ending bound of this instance is
             less than or equal to the starting bound of the value.</para>
             
             <para>In the following examples consider this instance to be the Left operand, and the right operand
             as the value.  The Left and Right operands are defined as
             <strong>(bL, eL)</strong> and <strong>(bR, eR)</strong>, respectively.</para>
             
             <list type="table">
             <listheader>
             <term>Example</term>
             <description>Comments</description>
             </listheader>
             <item>
             <term>
             <pre>
             |-----------|-----------|
             bL        eL bR         eR
             </pre>
             </term>
             <description>Precedes = true</description>
             </item>
             <item>
             <term>
             <pre>
             |-------|------|--------|
             bL      eL     bR       eR
             </pre>
             </term>
             <description>Precedes = true</description>
             </item>
             <item>
             <term>
             <pre>
             |-------|-------|--------|
             bL      bR      eL       eR
             </pre>
             </term>
             <description><para>Precedes = false</para>
             <para>There is an intersection between the operands; therfore, the left 
             does not precede the right.</para>
             </description>
             </item>
             <item>
             <term>
             <pre>
             |-------|--------|
             bR    eR bL      eL
             </pre>
             </term>
             <description><para>Precedes = false</para>
             <para>The left operand appears after the right operand.</para>
             </description>
             </item>
             </list>
            
             </remarks>
             <overloads>
             Determines whether a period or TdTimestamp meets this instance of TdPeriodTimestamp.
             </overloads>
        </member>
        <member name="M:Teradata.Client.Provider.TdPeriodTimestamp.Precedes(Teradata.Client.Provider.TdTimestamp)">
            <summary>
            Indicates that this instance precedes the timestamp value.
            </summary>
            <param name="value">The timestamp value.</param>
            <returns>A <c>true</c> is returned when this instance precedes the date value, otherwise a 
            <c>false</c> is returned.</returns>
            <remarks>
            <para>A <c>false</c> will be returned if the <paramref name="value"/> is <see cref="F:Teradata.Client.Provider.TdTimestamp.Null"/>.</para>
            
            <para>This instance will precede the value if the ending bound of this instance
            is less than or equal to the value.</para>
            
            <para>The following are examples.</para>
            <list type="table">
            <listheader>
            <term>Result</term>
            <description>Precedes</description>
            </listheader>
            <item>
            <term>true</term>
            <description><para>Period: (2006-04-01 10:20:11, 2006-04-15 01:21:43)</para>
                         <para>Timestamp: 2006-04-15 01:21:43</para></description>
            </item>
            <item>
            <term>true</term>
            <description><para>Period: (2006-05-31 04:21:00, 2006-06-05 07:21:43)</para>
                         <para>Timestamp:  2006-10-01 00:00:00</para></description>
            </item>
            <item>
            <term>false</term>
            <description><para>Period:(2008-12-15 21:23:41, 2008-12-31 11:21:45)</para>
                         <para>Timestamp: 2008-12-20 23:21:00</para></description>
            </item>
            <item>
            <term>false</term>
            <description><para>Period:(2008-02-01 12:30:00, 2008-03-01 21:32:21)</para>
                         <para>Timestamp: 2008-02-01 12:30:00</para></description>
            </item>
            <item>
            <term>false</term>
            <description><para>Period: (2008-09-05 13:21:54, 2008-09-15 12:40:11)</para>
                         <para>Timestamp: 2008-01-17 00:00:00</para></description>
            </item>
            </list>
            </remarks>
        </member>
        <member name="M:Teradata.Client.Provider.TdPeriodTimestamp.Succeeds(Teradata.Client.Provider.TdPeriodTimestamp)">
             <summary>
             Indicates whether this instance succeeds the period value.
             </summary>
             <param name="value">The TdPeriodTimestamp operand.</param>
             <returns>A <c>true</c> is returned when this instance succeeds the value,  otherwise 
             a <c>false </c>is returned.</returns>
             <remarks>
             <para>A <c>false</c> will be returned if the <paramref name="value"/> is <see cref="F:Teradata.Client.Provider.TdPeriodTimestamp.Null"/>.</para>
             
             <para>This instance will succeed the value if the beginning bound of this instance is
             greater than or equal to the ending bound of the value.</para>
             
             <para>In the following examples consider this instance to be the Left operand, and the
             Right operand as the value.  The Left and Right operands are defined as
             <strong>(bL, eL)</strong> and <strong>(bR, eR)</strong>, respectively.</para>
             
             <list type="table">
             <listheader>
             <term>Example</term>
             <description>Comments</description>
             </listheader>
             <item>
             <term>
             <pre>
             |-----------|-----------|
             bL        eL bR         eR
             </pre>
             </term>
             <description><para>Succeeds = false</para>
             <para>The left operand appears before the right operand.</para>
             </description>
             </item>
             <item>
             <term>
             <pre>
             |---------|------|----------|
             bL        eL     bR         eR
             </pre>
             </term>
             <description><para>Succeeds = false</para>
             <para>The left operand appears before the right operand.</para>
             </description>
             </item>
             <item>
             <term>
             <pre>
             |---------|-------|----------|
             bL        bR      eL         eR
             </pre>
             </term>
             <description><para>Succeeds = false</para>
             <para>There is an intersection between the operands; therfore, the left 
             does not succeed the right.</para>
             </description>
             </item>
             <item>
             <term>
             <pre>
             |-------|--------|
             bR    eR bL      eL
             </pre>
             </term>
             <description>Succeeds = true</description>
             </item>
             <item>
             <term>
             <pre>
             |-------|---|-----|
             bR      eR  bL    eL
             </pre>
             </term>
             <description>Succeeds = true</description>
             </item>
             </list>
            
             </remarks>
             <overloads>
             Determines whether a period or a TdTimestamp succeeds this instance of TdPeriodTimestamp.
             </overloads>
        </member>
        <member name="M:Teradata.Client.Provider.TdPeriodTimestamp.Succeeds(Teradata.Client.Provider.TdTimestamp)">
            <summary>
            Indicates that this instance succeeds the date value.
            </summary>
            <param name="value">The timestamp value.</param>
            <returns>A <c>true</c> is returned when this instance succeeds the timestamp value, otherwise a 
            <c>false</c> is returned.</returns>
            <remarks>
            <para>A <c>false</c> will be returned if the <paramref name="value"/> is <see cref="F:Teradata.Client.Provider.TdTimestamp.Null"/>. </para>
            
            <para>This instance will succeed the value if the beginning bound of this instance
            is greater than or equal to the value.</para>
            
            <para>The following are examples.</para>
            <list type="table">
            <listheader>
            <term>Result</term>
            <description>Succeeds</description>
            </listheader>
            <item>
            <term>false</term>
            <description><para>Period: (2006-04-01 10:20:11, 2006-04-15 01:21:43)</para>
                         <para>Timestamp: 2006-04-15 01:21:43</para></description>
            </item>
            <item>
            <term>false</term>
            <description><para>Period: (2006-05-31 04:21:00, 2006-06-05 07:21:43)</para>
                         <para>Timestamp: 2006-10-01 00:00:00</para></description>
            </item>
            <item>
            <term>false</term>
            <description><para>Period: (2008-12-15 21:23:41, 2008-12-31 11:21:45)</para>
                         <para>Timestamp: 2008-12-20 23:21:00</para></description>
            </item>
            <item>
            <term>true</term>
            <description><para>Period: (2008-02-01 12:30:00, 2008-03-01 21:32:21)</para>
                         <para>Timestamp: 2008-02-01 12:30:00</para></description>
            </item>
            <item>
            <term>true</term>
            <description><para>Period: (2008-09-05 13:21:54, 2008-09-15 12:40:11)</para>
                         <para>Timestamp: 2008-01-17 00:00:00</para></description>
            </item>
            </list>
            </remarks>
        </member>
        <member name="M:Teradata.Client.Provider.TdPeriodTimestamp.Meets(Teradata.Client.Provider.TdPeriodTimestamp)">
            <summary>
            Indicates whether this instance meets the period value.
            </summary>
            <param name="value">The TdPeriodTimestamp operand.</param>
            <returns>A <c>true</c> is returned if this instance meets the value, otherwise a 
            <c>false</c> is returned.</returns>
            <remarks>
            <para>A <c>false</c> will be returned if the <paramref name="value"/> is <see cref="F:Teradata.Client.Provider.TdPeriodTimestamp.Null"/>.</para>
            
            <para>Two periods meet if the beginning bound of one period equals the ending bound of the other.</para>
            
            <para>In the following examples consider this instance to be the Left operand, and the Right operand to be 
            the value.  The Left and Right operands are defined as
            <strong>(bL, eL)</strong> and <strong>(bR, eR)</strong>, respectively.</para>
            
            <list type="table">
            <listheader>
            <term>Example</term>
            <description>Comments</description>
            </listheader>
            <item>
            <term>
            <pre>
            |---------|----------|
            bR      eR bL        eL
            </pre>
            </term>
            <description><para>Meets = true</para>
            <para>The ending bound of the right operand equals the beginning bound of the left operand.</para>
            </description>
            </item>
            <item>
            <term>
            <pre>
            |---------|--------|
            bL      eL bR      eR
            </pre>
            </term>
            <description><para>Meets = true</para>
            <para>The ending bound of the left operand equals the beginning bound of the right operand.</para>
            </description>
            </item>
            <item>
            <term>
            <pre>
              |---------|
            bL bR     eL eR
            </pre>
            </term>
            <description>Meets = false</description>
            </item>
            <item>
            <term>
            <pre>
              |--------|--------|
            bL bR      eL       eR
            </pre>
            </term>
            <description>Meets = false</description>
            </item>
            <item>
            <term>
            <pre>
            |-------|----|---------|
            bL      eL   bR        eR
            </pre>
            </term>
            <description>Meets = false</description>
            </item>
            </list>
            
            </remarks>
            <overloads>
            Determines whether a Period or a TdTimestamp meets this instance of TdPeriodTimestamp.
            </overloads>
        </member>
        <member name="M:Teradata.Client.Provider.TdPeriodTimestamp.Meets(Teradata.Client.Provider.TdTimestamp)">
            <summary>
            Indicates whether this instance meets the value.
            </summary>
            <param name="value">The timestamp operand. </param>
            <returns>A <c>true</c> is returned if this instance meets the value, otherwise a 
            <c>false</c> is returned.</returns>
            <remarks>
            <para>A <c>false</c> will be returned if the <paramref name="value"/> is <see cref="F:Teradata.Client.Provider.TdTimestamp.Null"/>.</para>
            
            <para>A period and TdTimestamp value meet if the value is not included in the period but
            is one time granule less than the starting bound or is the same as the ending bound.  </para>
            
            <para>The following are examples:</para>
            
            <list type="table">
            <listheader>
            <term>Result</term>
            <description>Meets</description>
            </listheader>
            <item>
            <term>true</term>
            <description><para>Period: (2007-11-01 10:10:10, 2007-11-15 12:32:01) </para>
                         <para>Time:  2007-11-15 12:32:01</para></description>
            </item>
            <item>
            <term>true</term>
            <description><para>Period: (2008-01-01 00:00:00, 2008-02-01 03:00:01) </para>
                         <para>Time: 2007-12-31 23:59:59</para></description>
            </item>
            <item>
            <term>true</term>
            <description><para>Period: (2008-01-01 01:10:11, 2008-02-01 21:32:51) </para>
                         <para>Time: 2008-01-01 01:10:10</para></description>
            </item>
            <term>
            <item>false</item>
            <description><para>Period: (2008-03-10 23:01:22, 2008-03-31 04:22:14) </para>
                         <para>Time: 2008-03-31 04:23:21</para></description>
            </term>
            </list>
            </remarks>
        </member>
        <member name="M:Teradata.Client.Provider.TdPeriodTimestamp.Intersect(Teradata.Client.Provider.TdPeriodTimestamp,Teradata.Client.Provider.TdPeriodTimestamp)">
            <summary>
            The intersection between the <paramref name="left"/> and <paramref name="right"/>
            operands is calculated.
            </summary>
            
            <param name="left">The left TdPeriodTimestamp operand.</param>
            <param name="right">The right TdPeriodTimestamp operand.</param>
            
            <returns>A period that is the intersection between the left and right operands 
            is returned.</returns>
            
            <remarks>
            <para>A TdPeriodTimestamp.Null is returned under the following scenarios:</para>
            <list type="bullet">
            <item>Either the left or right operand is TdPeriodTimestamp.Null.</item>
            <item>The left and right operands do not intersect.</item>
            <item>The ending bound of one operand is the same as the beginning bound of the other operand.</item>
            </list>
            
            <para>In the following examples <strong>(bL, eL)</strong> is the left operand and 
            <strong>(bR, eR)</strong> is the right operand.</para>
            
            <list type="table">
            <listheader>
            <term>Example</term>
            <description>Comments</description>
            </listheader>
            <item>
            <term>
            <pre>
            |--------|--------|-------|
            bL      bR       eL      eR
                    |=========|
            </pre>
            </term>
            <description>Intersection = (bR, eL)</description>
            </item>
            <item>
            <term>
            <pre>
            |------|----------|------|
            bL     bR         eR     eL
                   |==========|  
            </pre>
            </term>
            <description>Intersection = (bR, eR)</description>
            </item>
            <item>
            <term>
            <pre>
            |----------|---------|
            bL       eL bR       eR
            </pre>
            </term>
            <description><para>Intersection = null</para>
            <para>The ending bound of the first operand is the same as the 
            starting bound of the second operand, eL = bR.</para>
            </description>
            </item>
            <item>
            <term>
            <pre>
            |---------|---|--------|
            bL        eL  bR       eR
            </pre>
            </term>
            <description><para>Intersection = null</para>
            <para>The periods do not intersect.</para></description>
            </item>
            </list>
            
            </remarks>
        </member>
        <member name="M:Teradata.Client.Provider.TdPeriodTimestamp.Contains(Teradata.Client.Provider.TdTimestamp)">
            <summary>
            Indicates whether the TdTimestamp <paramref name="value"/> is contained in this
            instance of TdPeriodTimestamp.
            </summary>
            <param name="value">The TdTimestamp that is to be found in the period.</param>
            <returns>A boolean value is returned that indicates whether the value
            is contained in the period.</returns>
            <remarks>
            A <c>false</c> is returned if value is <strong>Null</strong>.
            
            A <c>true</c> is returned if the value is contained in the period, otherwise 
            a <c>false</c> is returned.
            </remarks>
        </member>
        <member name="P:Teradata.Client.Provider.TdPeriodTimestamp.ObjectId">
            <summary>
            Gets the Instance Object Identifier.
            </summary>
        </member>
        <member name="P:Teradata.Client.Provider.TdPeriodTimestamp.IsNull">
            <summary>
            Gets boolean that indicates whether this TdPeriodTimestamp instance is <see cref="F:Teradata.Client.Provider.TdPeriodTimestamp.Null"/>. 
            </summary>
            <value>
            <c>true</c> if this TdPeriodTimestamp is Null; <c>false</c> otherwise.
            </value>
        </member>
        <member name="P:Teradata.Client.Provider.TdPeriodTimestamp.Begin">
            <summary>
            Gets the beginning bound of the period.
            </summary>
            <value>The TdTimestamp representation of the beginning bound.</value>
            <exception cref="T:Teradata.Client.Provider.TdException">Period is null.</exception>
            <remarks>
            The beginning bound is <strong>inclusive</strong> to the Period.  For more information
            about periods refer to <a href="PeriodTypeOverview.htm">Period Types Overview</a>.
            </remarks>
            <seealso cref="!:PeriodTypeOverview.html">Period Types Overview</seealso>
        </member>
        <member name="P:Teradata.Client.Provider.TdPeriodTimestamp.End">
            <summary>
            Gets the ending bound of the period.
            </summary>
            <value>The TdTimestamp representation of the ending bound.</value>
            <exception cref="T:Teradata.Client.Provider.TdException">Period is null.</exception>
            <remarks>
            The ending bound is <strong>exclusive</strong> to the period.  For more information
            about periods refer to <a href="PeriodTypeOverview.htm">Period Types Overview</a>
            </remarks>
            <seealso cref="!:PeriodTypeOverview.html">Period Types Overview</seealso>
        </member>
        <member name="P:Teradata.Client.Provider.TdPeriodTimestamp.Last">
            <summary>
            Gets the last time element of the period.  
            </summary>
            <exception cref="T:Teradata.Client.Provider.TdException">Period is null.</exception>
            <value>The TdTimestamp value that is equivalent to
            <see cref="P:Teradata.Client.Provider.TdPeriodTimestamp.End"/> - 10^-<see cref="P:Teradata.Client.Provider.TdPeriodTimestamp.Scale"/>.</value>
        </member>
        <member name="P:Teradata.Client.Provider.TdPeriodTimestamp.Scale">
            <summary>
            Gets the scale of this instance of TdPeriodTimestamp.
            </summary>
            <value>An Int32 that represents the Scale.</value>
            <exception cref="T:Teradata.Client.Provider.TdException">Period is null.</exception>
            <remarks>
            The Scale refers to the scale of both the beginning and ending
            bounds.
            </remarks>
        </member>
        <member name="P:Teradata.Client.Provider.TdPeriodTimestamp.Value">
            <summary>
            Gets the .Net type representation (String) of the TdPeriodTimestamp value.
            </summary>
            <exception cref="T:Teradata.Client.Provider.TdException">Period is null.</exception>
        </member>
        <member name="T:Teradata.Client.Provider.TdPeriodTimestampWithTimeZone">
             <summary>
             TdPeriodTimestampWithTimeZone is a .Net Data Provider for Teradata specific type that represents
             a duration of time that is bound by beginning and ending timestamps that have a time zone.  
             </summary>
             
             <remarks>
             <para>The Teradata Database introduced the Period type in release 13.00.00.00.  Unfortunately,
             the .Net Framework does not contain a system type that corresponds to the Teradata
             <strong>Period(TimestampWithTimeZone)</strong> type.  Therefore, the Teradata provider 
             exposes the TdPeriodTimestampWithTimeZone type which enables an application to work 
             with data of type Period(TimestampWithTimeZone).</para>
            
             <para>Similar to <see cref="T:Teradata.Client.Provider.TdTimestampWithTimeZone"/>, TdPeriodTimestampWithTimeZone
             supports a <strong>scale</strong> for the sub-seconds and a UTC offset.  The scale ranges from 0 to 6 and 
             <strong>must be the same</strong> for both the beginning and ending bounds.  </para>
             
             <para>A period is an anchored duration.  It represents a set of contiguous time
             granules within that duration.  In the case of TdPeriodTimestampWithTimeZone, the 
             granularity of the time can range from 10^-6 (.000006 second) to 10^0 (1 second).  
             The representation of a period is both inclusive and exclusive.  It is 
             <strong>inclusive</strong> in that the duration of the period begins from the beginning 
             bound up to, but not including (<strong>excluding</strong>), the ending bound. 
             For example suppose a TdPeriodTimestampWithTimeZone contains the period of:</para> 
             
             <pre>    "(2008-10-31 13:12:21.05+08:00, 2008-12-01 20:43:27.98+08:00)"</pre>
             
             <para>The duration will include "2008-10-31 13:12:21.05+08:00" and not 
             "2008-12-01 20:43:27.98+08:00".  It has a duration of 32.07:31:06.93 
             (32 days, 7 hours, 31 minutes, 6 seconds, 980000 microseconds).  
             The time element "2008-11-30 15:21:43+08:00" is included in the period.</para>
             
             <para>The components of a period consists of the following:</para>
             
             <para>
             <list type="bullet">
                 <item><strong>Time Granule</strong> This is the minimum representation
                 of time within a period.  In the above example, the time granule is 10^-2 (.01 second).</item>
             
                 <item><strong>Time Element</strong> A Time value that is contained
                 within the period.  The time element in TdPeriodTimestampWithTimeZone is specified 
                 using a TdTimestampWithTimeZone.</item>
             
                 <item><strong>Beginning Bound</strong> The lower bound or the start 
                 of the period.  Within a period, this value represents the "lowest" time
                 element.  The beginning bound must be <strong>less than</strong> the ending bound.</item>
             
                 <item><strong>Ending Bound</strong> The upper bound or the ending
                 of the period.  The Ending Bound is not included in the period.  Therefore,
                 No Time Element in the period can be <strong>greater or equal</strong> to the 
                 Ending Bound.</item>
             
                 <item><strong>Duration</strong> The number of granules in a period.
                 It is represented as an interval/timespan.</item>
             </list>
             </para>
             
             <para>The UTC Offset of the beginning and ending bounds do not have to be the same.  
             However, the UTC representation of the beginning bound must be less than the 
             UTC representation of the ending bound.</para>
             
             <para>A TdPeriodTimestampWithTimeZone can also be specified as an In, Out, or InOut 
             parameter to a Stored Procedure.  The data will be returned to an application using 
             either the <see cref="P:Teradata.Client.Provider.TdParameter.ProviderSpecificValue">TdParameter.ProviderSpecificValue</see>
             or <see cref="P:Teradata.Client.Provider.TdParameter.Value">TdParameter.Value</see> property.  Retrieving the parameter
             using TdParameter.ProviderSpecificValue, will return the data using the Period structure.  
             When TdParameter.Value is used, the data is returned as a <string>String</string> (this is
             the corresponding .Net type).</para>
             
             <seealso cref="T:Teradata.Client.Provider.TdTimestamp"/>
             </remarks>
             
             <example>
             The following is an example on retrieving a TdPeriodTimestampWithTimeZone, modify the period, and then 
             updating the period.
             
             <code>
             Public void PeriodDateExample(TdCommand cmd, String studentId)
             {
                cmd.Parameter.Clear();
             
                cmd.CommandText = "SELECT timePeriod  " +
                                "FROM ClassDetention " +
                                "WHERE StudentId = ?";
             
                cmd.CommandType = CommandType.Text;
             
                // creating the parameter
                cmd.Parameters.Add(null, TdType.Varchar, 9,
                   System.Data.ParameterDirection.Input, true, 0, 0, null,    
                   System.Data.DataRowVersion.Default, studentId);
             
                TdDataReader dr = null;
              
                Int32 i = 0;
             
                TdPeriodTimestampWithTimeZone detention;
             
                Try
                {
                   dr = cmd.ExecuteReader();
             
                   If (false == dr.Read())
                   {
             	       return;
                   }
                
                   // Retrieving the Period
                   detention = dr.GetTdPeriodTimestampWithTimeZone(0);
                }
                finally
                {
                   if (dr != null)
                   {
                      dr.Close();
                   }
                }
             
                // An additional 1 day, 4 hours will be added to ending bound.
             
                // Specifying a TimeSpan of 1 hour
                System.TimeSpan extraDentention = new TimeSpan(1, 4, 0, 0);
             
                // Getting the ending bound of the period and
                // adding 1 hour to it
                detention = new TdPeriodTime(detention.Begin, detention.End + extraDetention);    
             
                cmd.Parameters.Clear();
             
                cmd.CommandText = "UPDATE classDetention " +
                                     "SET timePeriod = ? " +
                                     "WHERE StudentId = ?";
             
                cmd.Parameters.Add(null, TdType.PeriodTimestampWithTimeZone, 0,
                      System.Data.ParameterDirection.Input, true, 0, 0, null,    
                      System.Data.DataRowVersion.Default, detention);
             
                cmd.Parameters.Add(null, TdType.Varchar, 9,
                      System.Data.ParameterDirection.Input, true, 0, 0, null,    
                      System.Data.DataRowVersion.Default, studentId);
             
                cmd.ExecuteNonQuery();
             }
             
             </code> 
             </example>
             
             <seealso cref="!:PeriodTypeOverview.html">Provider Specific Types:  Period Type Overview</seealso>
        </member>
        <member name="F:Teradata.Client.Provider.TdPeriodTimestampWithTimeZone.Null">
            <summary>
            Gets a Null TdPeriodTimestampWithTimeZone instance.
            </summary>
            <value>
            Returns a TdPeriodTimestampWithTimeZone instance that represents a <strong>Null</strong> value.
            </value>
            <remarks>
            Conceptually it is the constructor for <strong>Null</strong> TdPeriodTimestampWithTimeZone instances.
            </remarks>
            <example>
            This example shows how to send a <strong>Null</strong> value to a Teradata database.
            <code>
            TdParameter col1 = new TdParameter();
            col1.TdType = TdType.PeriodDate;
            col1.Value = TdPeriodTimestampWithTimeZone.Null;
            </code>
            </example>
        </member>
        <member name="F:Teradata.Client.Provider.TdPeriodTimestampWithTimeZone.MinValue">
            <summary>
            The minimum value of a period which is 
            "(0001-01-01 00:00:00.000000+00:00, 0001-01-01 00:00:00.000001+00:00)".
            </summary>
        </member>
        <member name="F:Teradata.Client.Provider.TdPeriodTimestampWithTimeZone.MaxValue">
            <summary>
            The maximum value of a period which is
            "(9999-12-31 23:59:59.999998+00:00, 9999-12-31 23:59:59.999999+00:00)".
            </summary>
        </member>
        <member name="M:Teradata.Client.Provider.TdPeriodTimestampWithTimeZone.#ctor(Teradata.Client.Provider.TdTimestampWithTimeZone,Teradata.Client.Provider.TdTimestampWithTimeZone)">
            <summary>
            A period is created from two TdTimestamp structures that represent the lower and upper bounds
            of the duration.
            </summary>
            <exception cref="T:System.ArgumentNullException">Either the begin or end date is null.</exception>
            <exception cref="T:System.ArgumentOutOfRangeException">Ending bound is less than the beginning bound.</exception>
            <param name="beginBound">The starting time of the period.</param>
            <param name="endBound">The ending time of the period.</param>
            <remarks>
            <para>The <see cref="P:Teradata.Client.Provider.TdPeriodTimestampWithTimeZone.Scale"/> will be set to the maximum scale between the 
            <paramref name="beginBound"/> and <paramref name="endBound"/> parameters.</para>
            </remarks>
        </member>
        <member name="M:Teradata.Client.Provider.TdPeriodTimestampWithTimeZone.#ctor(Teradata.Client.Provider.TdTimestampWithTimeZone,Teradata.Client.Provider.TdTimestampWithTimeZone,System.Byte)">
            <summary>
            A period is created from two TdTimestampWithTimeZone structures that represent the lower and upper bounds
            of the duration.
            </summary>
            <exception cref="T:System.ArgumentNullException">Either the begin or end date is null.</exception>
            <exception cref="T:System.ArgumentOutOfRangeException">Ending bound is less than the beginning bound, or the specified scale is not between 0 - 6.</exception>
            <param name="beginBound">The starting time of the period.</param>
            <param name="endBound">The ending time of the period.</param>
            <param name="scale">The scale of the period.</param>
        </member>
        <member name="M:Teradata.Client.Provider.TdPeriodTimestampWithTimeZone.op_Explicit(Teradata.Client.Provider.TdPeriodTimestampWithTimeZone)~Teradata.Client.Provider.TdPeriodDate">
            <summary>
            A TdPeriodTimestampWithTimeZone is converted into a TdPeriodDate
            </summary>
            <param name="value">The period that is to be converted into a TdPeriodDate.</param>
            <exception cref="T:System.ArgumentOutOfRangeException">The ending bound of the <paramref name="value"/> needs to be at least one day greater t han the beginning bound.</exception>
            <returns>A TdPeriodDate is returned.</returns>
            <remarks>
            <para>
            The time components of the beginning and ending bound will be truncated when 
            TdPeriodTimestampWithTimeZone is converted into a TdPeriodDate.  
            For example, when the period
            </para>
            
                <pre>    (2008-07-04 10:32:12.111-08:00, 2008-10-04 12:00:00.321-08:00)</pre>
            
            <para>
            is converted into a TdPeriodDate the result is
            </para>
            
                <pre>    (2008-07-04, 2008-10-04)</pre>
            
            </remarks>
        </member>
        <member name="M:Teradata.Client.Provider.TdPeriodTimestampWithTimeZone.op_Explicit(Teradata.Client.Provider.TdPeriodTimestampWithTimeZone)~Teradata.Client.Provider.TdPeriodTimestamp">
            <summary>
            The specified TdPeriodTimestampWithTimeZone is converted into a TdPeriodTimeStamp.
            </summary>
            <param name="value">The TdPeriodTimestampWithTimeZone value that is to be converted into a TdPeriodTimeStamp</param>
            <returns>A TdPeriodTimestamp is returned.</returns>
            <remarks>The UTC time of both the beginning and ending bounds of the <paramref name="value"/> is
            calculated and is returned as a TdPeriodTimestamp.</remarks>
        </member>
        <member name="M:Teradata.Client.Provider.TdPeriodTimestampWithTimeZone.GetHashCode">
            <summary>
            Returns the hash code for this instance. 
            </summary>
            <returns>The hash code is returned.</returns>
            <remarks>
            <para>When calculating the hash code of a Period the algorithm that is used is</para>
            <para> <see cref="P:Teradata.Client.Provider.TdPeriodTimestampWithTimeZone.Begin"/> Exclusive OR (XOR) <see cref="P:Teradata.Client.Provider.TdPeriodTimestampWithTimeZone.End"/></para>
            </remarks>
        </member>
        <member name="M:Teradata.Client.Provider.TdPeriodTimestampWithTimeZone.Equals(System.Object)">
             <summary>
                 Compares this instance against <paramref name="obj"/> to determine whether they are equal.
             </summary>
             <returns><c>true</c> is returned if the two TdPeriodTimestampWithTimeZones are equal, 
             <c>false</c> otherwise.</returns>
             <remarks>
                 <para>In order for two periods to be equivalent both their beginning and ending bounds must
                       be equivalent.</para>
             
                 <para>The boolean that is returned indicates the following conditions:</para>
            
             	<para><c>false</c> will be returned if:</para>
             	<list type="bullet">
             		<item>
                         This instance or <paramref name="obj"/> is <see cref="F:Teradata.Client.Provider.TdPeriodTimestampWithTimeZone.Null"/>.
                     </item>
             		<item>
                         This instance is not equal to <paramref name="obj"/>.
                     </item>
             		<item>
             			<paramref name="obj"/> is not of type TdPeriodTimestampWithTimeZone or <c>null</c>.
                     </item>
             	</list>
             	<para><c>true</c> will be returned if:</para>
             	<list type="bullet">
             		<item>
                         This instance and <paramref name="obj"/> are <Strong>Null</Strong>.
                     </item>
             		<item>
                         This instance is equal to <paramref name="obj"/>.
                     </item>
             	</list>
             </remarks>
             <example>
                 The following code example uses various comparison methods and operators: 
                 <code lang="CS">
             TdPeriodTimestampWithTimeZone  later = 
                     new TdPeriodTimestampWithTimeZone(new TdTimestampWithTimeZone(2010, 8, 31, 10, 11, 0, 0, new TimeSpan(8, 0, 0)), 
                                           new TdTimestampWithTimeZone(2010, 12, 1, 12, 21, 0, 0, new TimeSpan(8, 0, 0)));
             Object earlier = 
                     new TdPeriodTimestampWithTimeZone(new TdTimestamp(2007, 9, 10, 1, 22, 21, 0, new TimeSpan(8, 0, 0)), 
                                           new TdTimestamp(2008, 1, 1, 3, 15, 33, 0, new TimeSpan(8, 0, 0)));
              
             // The following comparison is equivalent to using
             //    false == TdPeriodTimestampWithTimeZone.Equals(later, (TdPeriodTimestampWithTimeZone)earlier)
             //    later !=  (TdPeriodTimestampWithTimeZone) earlier
             //    true == TdTimestamp.NotEquals(later, (TdPeriodTimestampWithTimeZone) earlier)
             //    
             if (false == later.Equals(earlier))
             {
                Console.WriteLine(“later does not equal earlier”);
             }
                 </code>
             </example>
             <overloads>Returns a Boolean indicating whether two instances of TdPeriodTimestampWithTimeZone are equal.</overloads>
             <param name="obj">A TdPeriodTimestampWithTimeZone that will be compared to this instance of TdPeriodTimestampWithTimeZone.</param>
        </member>
        <member name="M:Teradata.Client.Provider.TdPeriodTimestampWithTimeZone.Equals(Teradata.Client.Provider.TdPeriodTimestampWithTimeZone)">
            <summary>
            Compares this instance and another TdPeriodTimestampWithTimeZone to determine whether they are equal. 
            </summary>
            <returns><c>true</c> if the two TdPeriodTimestampWithTimeZone values are equal, <c>false</c> otherwise.</returns>
            <remarks>
                <para>In order for two periods to be equivalent both their beginning and ending bounds must
                      be equivalent.</para>
            
                <para>The boolean that is returned indicates the following conditions</para>
            
            	<para><c>false</c> will be returned if:</para>
            	<list type="bullet">
            		<item>
                        This instance or <paramref name="other"/> is <see cref="F:Teradata.Client.Provider.TdPeriodTimestampWithTimeZone.Null"/>.
                    </item>
            		<item>
                        This instance is not equal to <paramref name="other"/>.
                    </item>
            	</list>
            	<para><c>true</c> will be returned if:</para>
            	<list type="bullet">
            		<item>
                        This instance and <paramref name="other"/> are <Strong>Null</Strong>.
                    </item>
            		<item>
                        This instance is equal to <paramref name="other"/>.
                    </item>
            	</list>
            </remarks>
            <param name="other">A TdPeriodTimestampWithTimeZone that will be compared to this instance of TdPeriodTimestampWithTimeZone.</param>
        </member>
        <member name="M:Teradata.Client.Provider.TdPeriodTimestampWithTimeZone.Add(System.TimeSpan)">
            <summary>
            The specified TimeSpan will be added to this instance of TdPeriodTimestampWithTimeZone.
            </summary>
            <param name="timeSpan">The TimeSpan that will be added.</param>
            <returns>A TdPeriodTimestampWithTimeZone is returned that is the result of the TimeSpan added to this 
            instance of TdPeriodTimestampWithTimeZone.</returns>
            <exception cref="T:System.OverflowException">The result could not be represented as a TdPeriodTimestampWithTimeZone.</exception>
            <exception cref="T:Teradata.Client.Provider.TdException">The <strong>TdPeriodTimestampWithTimeZone</strong> beginning bound is greater or equal to the ending bound of the period.</exception>
            <remarks>
            <para>If this instance of TdPeriodTimestampWithTimeZone is <strong>Null</strong> a <see cref="F:Teradata.Client.Provider.TdPeriodTimestampWithTimeZone.Null"/> 
            will be returned.</para>
            
            <para>The TimeSpan will be added to both the beginning and ending bounds.</para>
            
            <para>The number of days will be calculated from the components that were
            specified when TimeSpan was initialized.  Therefore, if a TimeSpan were 
            initialized as <strong>new TimeSpan(47, 60, 20)</strong> (47 hours, 60 minutes, 
            20 seconds), what will be added to the TdPeriodTimestampWithTimeZone will be 2 days, 20 seconds.</para>
            
            <para>Refer to <a href="PeriodArithmetic.htm">Period Arithmetic</a> for additional information.</para>
            </remarks>
        </member>
        <member name="M:Teradata.Client.Provider.TdPeriodTimestampWithTimeZone.Add(Teradata.Client.Provider.TdIntervalDayToSecond)">
            <summary>
               Adds the specified <see cref="T:Teradata.Client.Provider.TdIntervalDayToSecond"/> to this instance of 
               <see cref="T:Teradata.Client.Provider.TdPeriodTimestampWithTimeZone"/>.
            </summary>
            <returns>
               A <strong>TdPeriodTimestampWithTimeZone</strong> is returned that is the result of 
               adding the <strong>TdIntervalDayToSecond</strong> to this instance of 
               <strong>TdPeriodTimestampWithTimeZone</strong>.
            </returns>
            <exception cref="T:System.OverflowException">Unable to add the specified <strong>TdIntervalDayToSecond</strong> to this instance of <strong>TdPeriodTimestampWithTimeZone</strong>.</exception>
            <exception cref="T:Teradata.Client.Provider.TdException">The <strong>TdPeriodTimestampWithTimeZone</strong> beginning bound is greater or equal to the ending bound of the period.</exception>
            <remarks>
            <para>
               If <paramref name="interval"/> or this instance of 
               <strong>TdPeriodTimestampWithTimeZone</strong> is <strong>Null</strong> a 
               <see cref="F:Teradata.Client.Provider.TdPeriodTimestampWithTimeZone.Null"/> will be returned.        
            </para>
            <para>
               The <strong>TdIntervalDayToSecond</strong> will be added to both the beginning and 
               ending bounds of the period.  If the scale between this instance of  
               <strong>TdPeriodTimestampWithTimeZone</strong> and the <paramref name="interval"/> 
               are different, the arithmetic operation will be performed using the different scales. The
               result will then be truncated to match the scale of the 
               <strong>TdPeriodTimestampWithTimeZone</strong>.
            </para>
            <para>
               For example, if the period is "2007-10-04 12:50:56.2123-08:00",
               "2007-11-01 13:23:54.4435-08:00") and the interval is 
               "200 20:40:50.654321" (200 days, 20 hours, 40 minutes, 50 seconds and
               654321 microseconds), the add operation will result in a period of
               ("2008-04-22 09:31:46.8666-08:00",
               "2008-05-20 10:04:45.0978-08:00").
            </para>
            </remarks>
            <param name="interval">
               The <strong>TdIntervalDayToSecond</strong> that will be added to this instance of
               <strong>TdPeriodTimestampWithTimeZone</strong>.
            </param>
        </member>
        <member name="M:Teradata.Client.Provider.TdPeriodTimestampWithTimeZone.Add(Teradata.Client.Provider.TdIntervalYearToMonth)">
            <summary>
               Adds the specified <see cref="T:Teradata.Client.Provider.TdIntervalYearToMonth"/> to this instance of 
               <see cref="T:Teradata.Client.Provider.TdPeriodTimestampWithTimeZone"/>.
            </summary>
            <returns>
               A <strong>TdPeriodTimestampWithTimeZone</strong> is returned that is the result of  
               adding the <strong>TdIntervalYearToMonth</strong> to this instance of 
               <strong>TdPeriodTimestampWithTimeZone</strong>.
            </returns>
            <exception cref="T:System.OverflowException">Unable to add the interval to this instance of <strong>TdPeriodTimestampWithTimeZone</strong>.</exception>
            <exception cref="T:Teradata.Client.Provider.TdException">The <strong>TdPeriodTimestampWithTimeZone</strong> beginning bound is greater or equal to the ending bound of the period.</exception>
            <remarks>
            <para>
               If the <paramref name="interval"/> or this instance is <strong>Null</strong> 
               a <see cref="F:Teradata.Client.Provider.TdPeriodTimestampWithTimeZone.Null"/> will be returned.
            </para>
            <para>
               The <paramref name="interval"/> interval will be added to a
               <strong>TdPeriodTimestampWithTimeZone</strong>. For example, if the 
               <strong>TdPeriodTimestampWithTimeZone</strong> is ("2007-10-04 12:50:56-08:00",
               "2007-11-01 13:23:54-08:00") and the interval is "5-10"
               (5 years, 10 months) the operation will result in "2013-08-04 12:50:56-08:00",
               "2013-09-01 13:23:54-08:00").
            </para>
            </remarks>
            <param name="interval">
               A <strong>TdIntervalYearToMonth</strong> that will be added to this instance 
              of <strong>TdPeriodTimestampWithTimeZone</strong>.
            </param>
        </member>
        <member name="M:Teradata.Client.Provider.TdPeriodTimestampWithTimeZone.Subtract(System.TimeSpan)">
            <summary>
            The specified TimeSpan will be subtracted from this instance of TdPeriodTimestampWithTimeZone.
            </summary>
            <param name="timeSpan">The TimeSpan that will be subtracted.</param>
            <returns>A TdPeriodTimestampWithTimeZone is returned that is the result of the TimeSpan subtracted from
            this instance of TdPeriodTimestampWithTimeZone.</returns>
            <exception cref="T:System.OverflowException">The result could not be represented as a TdPeriodTimestampWithTimeZone.</exception>
            <exception cref="T:Teradata.Client.Provider.TdException">The <strong>TdPeriodTimestampWithTimeZone</strong> beginning bound is greater or equal to the ending bound of the period.</exception>
            <remarks>
            <para>If this instance of TdPeriodTimestampWithTimeZone is <strong>Null</strong> a <see cref="F:Teradata.Client.Provider.TdDate.Null"/> 
            will be returned.</para>
            
            
            <para>The number of days will be calculated from the components that were
            specified when TimeSpan was initialized.  Therefore, if a TimeSpan was 
            initialized as <strong>new TimeSpan(47, 60, 20)</strong> (47 hours, 60 minutes, 
            20 seconds), the number of days that will be subtracted from TdPeriodDate will be 2 days
            and 20 seconds.</para>
            
            <para>Refer to <a href="PeriodArithmetic.htm">Period Arithmetic</a> for additional information.</para>
            </remarks>
        </member>
        <member name="M:Teradata.Client.Provider.TdPeriodTimestampWithTimeZone.Subtract(Teradata.Client.Provider.TdIntervalDayToSecond)">
            <summary>
               Subtracts the specified <see cref="T:Teradata.Client.Provider.TdIntervalDayToSecond"/> from this instance of 
               <see cref="T:Teradata.Client.Provider.TdPeriodTimestampWithTimeZone"/>.
            </summary>
            <returns>
               A <strong>TdPeriodTimestampWithTimeZone</strong> is returned that is the result 
               of  subtracting the <strong>TdIntervalDayToSecond</strong> from this instance of 
               <strong>TdPeriodTimestampWithTimeZone</strong>.
            </returns>
            <exception cref="T:System.OverflowException">Unable to subtract the specified <strong>TdIntervalDayToSecond</strong> from this instance of <strong>TdPeriodTimestampWithTimeZone</strong>.</exception>
            <exception cref="T:Teradata.Client.Provider.TdException">The <strong>TdPeriodTimestampWithTimeZone</strong> beginning bound is greater or equal to the ending bound of the period.</exception>
            <remarks>
            <para>
               If <paramref name="interval"/> or this instance of 
               <strong>TdPeriodTimestampWithTimeZone</strong> is <strong>Null</strong> a 
               <see cref="F:Teradata.Client.Provider.TdPeriodTimestampWithTimeZone.Null"/> will be returned.        
            </para>
            <para>
               The <strong>TdIntervalDayToSecond</strong> will be subtracted from both the 
               beginning and ending bounds of the period.  If the scale between this instance of  
               <strong>TdPeriodTimestampWithTimeZone</strong> and the <paramref name="interval"/> 
               is different, the arithmetic operation will be performed using the different scales. The
               result will then be truncated to match the scale of the 
               <strong>TdPeriodTimestampWithTimeZone</strong>.
            </para>
            <para>
               For example, if the period is "2007-10-04 12:50:56.2123-08:00",
               "2007-11-01 13:23:54.4435-08:00") and the interval is 
               "200 20:40:50.654321" (200 days, 20 hours, 40 minutes, 50 seconds
               and 654321 microseconds), the subtract operation will result in a period of 
               ("2007-03-17 16:10:05.5579-08:00",
               "2007-04-14 16:43:03.7891-08:00").
            </para>
            </remarks>
            <param name="interval">
               The <strong>TdIntervalDayToSecond</strong> that will be subtracted from this
               instance of <strong>TdPeriodTimestampWithTimeZone</strong>.
            </param>
        </member>
        <member name="M:Teradata.Client.Provider.TdPeriodTimestampWithTimeZone.Subtract(Teradata.Client.Provider.TdIntervalYearToMonth)">
            <summary>
               Subtracts the specified <see cref="T:Teradata.Client.Provider.TdIntervalYearToMonth"/> from this instance of 
               <see cref="T:Teradata.Client.Provider.TdPeriodTimestampWithTimeZone"/>.
            </summary>
            <returns>
               A <strong>TdPeriodTimestampWithTimeZone</strong> is returned that is the result 
               of subtracting the <strong>TdIntervalYearToMonth</strong> from this instance of
               <strong>TdPeriodTimestampWithTimeZone</strong>.
            </returns>
            <exception cref="T:System.OverflowException">Unable to subtract the interval from this instance of <strong>TdPeriodTimestampWithTimeZone</strong>.</exception>
            <exception cref="T:Teradata.Client.Provider.TdException">The <strong>TdPeriodTimestampWithTimeZone</strong> beginning bound is greater or equal to the ending bound of the period.</exception>
            <remarks>
            <para>
               If the <paramref name="interval"/> or this instance is <strong>Null</strong> 
               a <see cref="F:Teradata.Client.Provider.TdPeriodTimestampWithTimeZone.Null"/> will be returned.
            </para>
            <para>
               The <paramref name="interval"/> will be subtracted from 
               <strong>TdPeriodTimestampWithTimeZone</strong>. For example, if the 
               <strong>TdPeriodTimestampWithTimeZone</strong> is ("2007-10-04 12:50:56-08:00",
               and "2007-11-01 13:23:54-08:00") and the interval is "5-10"
               (5 years, 10 months) the operation will result in "2001-12-04 12:50:56-08:00",
               "2002-01-01 13:23:54-08:00").
            </para>
            </remarks>
            <param name="interval">
               A <strong>TdIntervalYearToMonth</strong> that will be subtracted from this instance 
              of <strong>TdPeriodTimestampWithTimeZone</strong>.
            </param>
        </member>
        <member name="M:Teradata.Client.Provider.TdPeriodTimestampWithTimeZone.op_Addition(Teradata.Client.Provider.TdPeriodTimestampWithTimeZone,System.TimeSpan)">
            <summary>
            Adds the specified TimeSpan to a TdPeriodTimestampWithTimeZone.
            </summary>
            <param name="period">A TdPeriodTimestampWithTimeZone.</param>
            <param name="timeSpan">A TimeSpan that will be added to TdPeriodTimestampWithTimeZone.</param>
            <exception cref="T:System.OverflowException">The result could not be represented as a TdPeriodTimestampWithTimeZone.</exception>
            <exception cref="T:Teradata.Client.Provider.TdException">The <strong>TdPeriodTimestampWithTimeZone</strong> beginning bound is greater or equal to the ending bound of the period.</exception>
            <returns>A TdPeriodTimestampWithTimeZone is returned that is the result of adding the Timespan
            to the period.</returns>
            <remarks>
            
            Refer to <see cref="M:Teradata.Client.Provider.TdPeriodTimestampWithTimeZone.Add(System.TimeSpan)"/> and <a href="PeriodArithmetic.htm">Period Arithmetic</a> for additional information.
            </remarks>
            <overloads>
            Adds a Timespan to a period.
            </overloads>
        </member>
        <member name="M:Teradata.Client.Provider.TdPeriodTimestampWithTimeZone.op_Addition(System.TimeSpan,Teradata.Client.Provider.TdPeriodTimestampWithTimeZone)">
            <summary>
            Adds the specified TimeSpan to a TdPeriodTimestampWithTimeZone.
            </summary>
            <param name="period">A TdPeriodTimestampWithTimeZone.</param>
            <param name="timeSpan">A TimeSpan that will be added to TdPeriodTimestampWithTimeZone.</param>
            <exception cref="T:System.OverflowException">The result could not be represented as a TdPeriodTimestampWithTimeZone.</exception>
            <exception cref="T:Teradata.Client.Provider.TdException">The <strong>TdPeriodTimestampWithTimeZone</strong> beginning bound is greater or equal to the ending bound of the period.</exception>
            <returns>A TdPeriodTimestampWithTimeZone is returned that is the result of adding the Timespan
            to the period.</returns>
            <remarks>
            
            Refer to <see cref="M:Teradata.Client.Provider.TdPeriodTimestampWithTimeZone.Add(System.TimeSpan)"/> and <a href="PeriodArithmetic.htm">Period Arithmetic</a> for additional information.
            </remarks>
        </member>
        <member name="M:Teradata.Client.Provider.TdPeriodTimestampWithTimeZone.op_Addition(Teradata.Client.Provider.TdPeriodTimestampWithTimeZone,Teradata.Client.Provider.TdIntervalDayToSecond)">
            <summary>
               Adds the specified <see cref="T:Teradata.Client.Provider.TdIntervalDayToSecond"/> to a 
               <see cref="T:Teradata.Client.Provider.TdPeriodTimestampWithTimeZone"/>.
            </summary>
            <returns>
               A <strong>TdPeriodTimestampWithTimeZone</strong> is returned that is the 
               result of adding the <strong>TdIntervalDayToSecond</strong> to a 
               <strong>TdPeriodTimestampWithTimeZone</strong>.
            </returns>
            <exception cref="T:System.OverflowException">Unable to add the specified <strong>TdIntervalDayToSecond</strong> to a <strong>TdPeriodTimestampWithTimeZone</strong>.</exception>
            <exception cref="T:Teradata.Client.Provider.TdException">The <strong>TdPeriodTimestampWithTimeZone</strong> beginning bound is greater or equal to the ending bound of the period.</exception>
            <remarks>
            <para>
               If <paramref name="interval"/> or <paramref name="period"/> is 
               <strong>Null</strong> a <see cref="F:Teradata.Client.Provider.TdPeriodTimestampWithTimeZone.Null"/> will be returned.        
            </para>
            <para>
               The <strong>TdIntervalDayToSecond</strong> will be added to both the beginning and 
               ending bounds of the period.  If the scale between the <paramref name="period"/>  
               and the <paramref name="interval"/> are different, the arithmetic operation will be 
               performed using the different scales. The result will then be truncated to match the
               scale of the <strong>TdPeriodTimestampWithTimeZone</strong>.
            </para>
            <para>
               For example, if the period is "2007-10-04 12:50:56.2123-08:00",
               "2007-11-01 13:23:54.4435-08:00") and the interval is "200 20:40:50.654321"
               (200 days, 20 hours, 40 minutes, 50 seconds and 654321 microseconds), the add operation
               will result in a period of ("2008-04-22 09:31:46.8666-08:00",
               "2008-05-20 10:04:45.0978-08:00").
            </para>
            </remarks>
            <param name="period">A <strong>TdPeriodTimestampWithTimeZone</strong> for addition.</param>
            <param name="interval">
               The <strong>TdIntervalDayToSecond</strong> that will be added to the
               <strong>TdPeriodTimestampWithTimeZone</strong>.
            </param>
        </member>
        <member name="M:Teradata.Client.Provider.TdPeriodTimestampWithTimeZone.op_Addition(Teradata.Client.Provider.TdIntervalDayToSecond,Teradata.Client.Provider.TdPeriodTimestampWithTimeZone)">
            <summary>
               Adds the specified <see cref="T:Teradata.Client.Provider.TdIntervalDayToSecond"/> to a 
               <see cref="T:Teradata.Client.Provider.TdPeriodTimestampWithTimeZone"/>.
            </summary>
            <returns>
               A <strong>TdPeriodTimestampWithTimeZone</strong> is returned that is the 
               result of adding the <strong>TdIntervalDayToSecond</strong> to a 
               <strong>TdPeriodTimestampWithTimeZone</strong>.
            </returns>
            <exception cref="T:System.OverflowException">Unable to add the specified <strong>TdIntervalDayToSecond</strong> to a <strong>TdPeriodTimestampWithTimeZone</strong>.</exception>
            <exception cref="T:Teradata.Client.Provider.TdException">The <strong>TdPeriodTimestampWithTimeZone</strong> beginning bound is greater or equal to the ending bound of the period.</exception>
            <remarks>
            <para>
               If <paramref name="interval"/> or <paramref name="period"/> is 
               <strong>Null</strong> a <see cref="F:Teradata.Client.Provider.TdPeriodTimestampWithTimeZone.Null"/> will be returned.        
            </para>
            <para>
               The <strong>TdIntervalDayToSecond</strong> will be added to both the beginning and 
               ending bounds of the period.  If the scale between the <paramref name="period"/>  
               and the <paramref name="interval"/> are different, the arithmetic operation will be 
               performed using the different scales. The result will then be truncated to match the
               scale of the <strong>TdPeriodTimestampWithTimeZone</strong>.
            </para>
            <para>
               For example, if the period is "2007-10-04 12:50:56.2123-08:00",
               "2007-11-01 13:23:54.4435-08:00") and the interval is "200 20:40:50.654321"
               (200 days, 20 hours, 40 minutes, 50 seconds and 654321 microseconds), the add operation
               will result in a period of ("2008-04-22 09:31:46.8666-08:00",
               "2008-05-20 10:04:45.0978-08:00").
            </para>
            </remarks>
            <param name="period">A <strong>TdPeriodTimestampWithTimeZone</strong> for addition.</param>
            <param name="interval">
               The <strong>TdIntervalDayToSecond</strong> that will be added to the
               <strong>TdPeriodTimestampWithTimeZone</strong>.
            </param>
        </member>
        <member name="M:Teradata.Client.Provider.TdPeriodTimestampWithTimeZone.op_Addition(Teradata.Client.Provider.TdPeriodTimestampWithTimeZone,Teradata.Client.Provider.TdIntervalYearToMonth)">
            <summary>
               Adds the specified <see cref="T:Teradata.Client.Provider.TdIntervalYearToMonth"/> to a 
               <see cref="T:Teradata.Client.Provider.TdPeriodTimestampWithTimeZone"/>.
            </summary>
            <returns>
               A <strong>TdPeriodTimestampWithTimeZone</strong> is returned that is 
               the result of adding the <strong>TdIntervalYearToMonth</strong> to a  
               <strong>TdPeriodTimestampWithTimeZone</strong>.
            </returns>
            <exception cref="T:System.OverflowException">Unable to add the interval to a <strong>TdPeriodTimestampWithTimeZone</strong>.</exception>
            <exception cref="T:Teradata.Client.Provider.TdException">The <strong>TdPeriodTimestampWithTimeZone</strong> beginning bound is greater or equal to the ending bound of the period.</exception>
            <remarks>
            <para>
               If the <paramref name="interval"/> or <paramref name="period"/> is <strong>Null</strong> 
               a <see cref="F:Teradata.Client.Provider.TdPeriodTimestampWithTimeZone.Null"/> will be returned.
            </para>
            <para>
               The <paramref name="interval"/> interval will be added to a
               <strong>TdPeriodTimestampWithTimeZone</strong>. For example, if the 
               <strong>TdPeriodTimestampWithTimeZone</strong> is ("2007-10-04 12:50:56-08:00",
               "2007-11-01 13:23:54-08:00") and the interval is "5-10"
               (5 years, 10 months) the operation will result in "2013-08-04 12:50:56-08:00",
               "2013-09-01 13:23:54-08:00").
            </para>
            </remarks>
            <param name="period">The <strong>TdPeriodTimestampWithTimeZone</strong> for addition.</param>
            <param name="interval">
               A <strong>TdIntervalYearToMonth</strong> that will be added to a  
              <strong>TdPeriodTimestampWithTimeZone</strong>. 
            </param>
        </member>
        <member name="M:Teradata.Client.Provider.TdPeriodTimestampWithTimeZone.op_Addition(Teradata.Client.Provider.TdIntervalYearToMonth,Teradata.Client.Provider.TdPeriodTimestampWithTimeZone)">
            <summary>
               Adds the specified <see cref="T:Teradata.Client.Provider.TdIntervalYearToMonth"/> to a 
               <see cref="T:Teradata.Client.Provider.TdPeriodTimestampWithTimeZone"/>.
            </summary>
            <returns>
               A <strong>TdPeriodTimestampWithTimeZone</strong> is returned that is 
               the result of adding the <strong>TdIntervalYearToMonth</strong> to a  
               <strong>TdPeriodTimestampWithTimeZone</strong>.
            </returns>
            <exception cref="T:System.OverflowException">Unable to add the interval to a <strong>TdPeriodTimestampWithTimeZone</strong>.</exception>
            <exception cref="T:Teradata.Client.Provider.TdException">The <strong>TdPeriodTimestampWithTimeZone</strong> beginning bound is greater or equal to the ending bound of the period.</exception>
            <remarks>
            <para>
               If the <paramref name="interval"/> or <paramref name="period"/> is <strong>Null</strong> 
               a <see cref="F:Teradata.Client.Provider.TdPeriodTimestampWithTimeZone.Null"/> will be returned.
            </para>
            <para>
               The <paramref name="interval"/> interval will be added to a
               <strong>TdPeriodTimestampWithTimeZone</strong>. For example, if the 
               <strong>TdPeriodTimestampWithTimeZone</strong> is ("2007-10-04 12:50:56-08:00",
               "2007-11-01 13:23:54-08:00") and the interval is "5-10"
               (5 years, 10 months) the operation will result in "2013-08-04 12:50:56-08:00",
               "2013-09-01 13:23:54-08:00").
            </para>
            </remarks>
            <param name="interval">
               A <strong>TdIntervalYearToMonth</strong> that will be added to a  
              <strong>TdPeriodTimestampWithTimeZone</strong>. 
            </param>
            <param name="period">The <strong>TdPeriodTimestampWithTimeZone</strong> for addition.</param>
        </member>
        <member name="M:Teradata.Client.Provider.TdPeriodTimestampWithTimeZone.op_Subtraction(Teradata.Client.Provider.TdPeriodTimestampWithTimeZone,System.TimeSpan)">
            <summary>
            Subtracts the specified TimeSpan from a TdPeriodTimestampWithTimeZone.
            </summary>
            <param name="period">A TdPeriodTimestampWithTimeZone.</param>
            <param name="timeSpan">A TimeSpan that will be subtracted
            from the TdPeriodTimestampWithTimeZone</param>
            <returns>A TdPeriodTimestampWithTimeZone is returned that is the result of subtracting the TimeSpan 
            from the TdDate.</returns>
            <exception cref="T:System.OverflowException">The result could not be represented as a TdPeriodTimestampWithTimeZone.</exception>
            <exception cref="T:Teradata.Client.Provider.TdException">The <strong>TdPeriodTimestampWithTimeZone</strong> beginning bound is greater or equal to the ending bound of the period.</exception>
            <remarks>
            Refer to <see cref="M:Teradata.Client.Provider.TdPeriodTimestampWithTimeZone.Subtract(System.TimeSpan)"/> and <a href="PeriodArithmetic.htm">Period Arithmetic</a> for additional information.
            </remarks>
        </member>
        <member name="M:Teradata.Client.Provider.TdPeriodTimestampWithTimeZone.op_Subtraction(Teradata.Client.Provider.TdPeriodTimestampWithTimeZone,Teradata.Client.Provider.TdIntervalDayToSecond)">
            <summary>
               Subtracts the specified <see cref="T:Teradata.Client.Provider.TdIntervalDayToSecond"/> from a <see cref="T:Teradata.Client.Provider.TdPeriodTimestampWithTimeZone"/>.
            </summary>
            <returns>
               A <strong>TdPeriodTimestampWithTimeZone</strong> is returned that is the result of subtracting 
               the <strong>TdIntervalDayToSecond</strong> from a <strong>TdPeriodTimestampWithTimeZone</strong>.
            </returns>
            <exception cref="T:System.OverflowException">Unable to subtract the specified <strong>TdIntervalDayToSecond</strong> from a <strong>TdPeriodTimestampWithTimeZone</strong>.</exception>
            <exception cref="T:Teradata.Client.Provider.TdException">The <strong>TdPeriodTimestampWithTimeZone</strong> beginning bound is greater or equal to the ending bound of the period.</exception>
            <remarks>
            <para>
               If <paramref name="interval"/> or <paramref name="period"/> is 
               <strong>Null</strong> a <see cref="F:Teradata.Client.Provider.TdPeriodTimestampWithTimeZone.Null"/> will be returned.        
            </para>
            <para>
               The <strong>TdIntervalDayToSecond</strong> will be subtracted from both the beginning and 
               ending bounds of the period.  If the scale between <paramref name="period"/> 
               and the <paramref name="interval"/> is different, the arithmetic operation will be 
               performed using the different scales. The result will then be truncated to match the
               scale of the <strong>TdPeriodTimestampWithTimeZone</strong>.
            </para>
            <para>
               For example, if the period is "2007-10-04 12:50:56.2123-08:00",
               "2007-11-01 13:23:54.4435-08:00") and the interval is 
               "200 20:40:50.654321" (200 days, 20 hours, 40 minutes, 50 seconds and 
               654321 microseconds), the subtract operation will result in a period of 
               ("2007-03-17 16:10:05.5579-08:00",
               "2007-04-14 16:43:03.7891-08:00").
            </para>
            </remarks>
            <param name="period">A <strong>TdPeriodTimestampWithTimeZone</strong>.</param>
            <param name="interval">
               The <strong>TdIntervalDayToSecond</strong> that will be subtracted from the
               <strong>TdPeriodTimestampWithTimeZone</strong>.
            </param>
        </member>
        <member name="M:Teradata.Client.Provider.TdPeriodTimestampWithTimeZone.op_Subtraction(Teradata.Client.Provider.TdPeriodTimestampWithTimeZone,Teradata.Client.Provider.TdIntervalYearToMonth)">
            <summary>
               Subtracts the specified <see cref="T:Teradata.Client.Provider.TdIntervalYearToMonth"/> from a 
               <see cref="T:Teradata.Client.Provider.TdPeriodTimestampWithTimeZone"/>.
            </summary>
            <returns>
               A <strong>TdPeriodTimestampWithTimeZone</strong> is returned that is the  
               result of subtracting the <strong>TdIntervalYearToMonth</strong> from a 
               <strong>TdPeriodTimestampWithTimeZone</strong>.
            </returns>
            <exception cref="T:System.OverflowException">Unable to subtract the interval from a <strong>TdPeriodTimestampWithTimeZone</strong>.</exception>
            <exception cref="T:Teradata.Client.Provider.TdException">The <strong>TdPeriodTimestampWithTimeZone</strong> beginning bound is greater or equal to the ending bound of the period.</exception>
            <remarks>
            <para>
               If the <paramref name="interval"/> or <paramref name="period"/> is <strong>Null</strong> 
               a <see cref="F:Teradata.Client.Provider.TdPeriodTimestampWithTimeZone.Null"/> will be returned.
            </para>
            <para>
               The <paramref name="interval"/> interval will be subtracted from 
               <strong>TdPeriodTimestampWithTimeZone</strong>. For example, if the 
               <strong>TdPeriodTimestampWithTimeZone</strong> is ("2007-10-04 12:50:56-08:00",
               "2007-11-01 13:23:54-08:00") and the interval is "5-10"
               (5 years, 10 months) the operation will result in "2001-12-04 12:50:56-08:00",
               "2002-01-01 13:23:54-08:00").
            </para>
            </remarks>
            <param name="period">A <strong>TdPeriodTimestampWithTimeZone</strong>.</param>
            <param name="interval">
               A <strong>TdIntervalYearToMonth</strong> that will be subtracted from a 
              <strong>TdPeriodTimestampWithTimeZone</strong>.
            </param>
        </member>
        <member name="M:Teradata.Client.Provider.TdPeriodTimestampWithTimeZone.Compare(Teradata.Client.Provider.TdPeriodTimestampWithTimeZone,Teradata.Client.Provider.TdPeriodTimestampWithTimeZone)">
            <summary>
            Compares two instances of TdPeriodTimestampWithTimeZone structures and returns a value indicating whether <paramref name="left"/> is
            greater than, less than or equal to <paramref name="right"/>.
            </summary>
            <returns>
            The result of the comparison is returned as an integer.
            </returns>
            <remarks>
            <para>The beginning and ending bounds of the two period operands are used in the comparison.  
              The integer returned when the bounds of the left is compared to right operand
              indicates the following:
            </para>
                <para>
            	<list type="table">
            		<listheader>
            			<term>Return Value</term>
            			<description>Meaning</description>
            		</listheader>
            		<item>
            			<term>Less than zero</term>
            			<description>
                            <para><paramref name="left"/> is less than <paramref name="right"/>.</para> 
                            <para>-or-</para>
                            <para><paramref name="left"/> is <see cref="F:Teradata.Client.Provider.TdPeriodTimestampWithTimeZone.Null"/>.</para><br/>
                            <para><strong>Comparison Algorithm</strong></para>
                            <para>    left.Begin &lt; right.Begin OR (left.Begin == right.Begin AND left.End &lt; right.End)</para>
                        </description>
            		</item>
            		<item>
            			<term>Zero</term>
            			<description>
                            <para><paramref name="left"/> is equal to <paramref name="right"/>.</para>
                            <para>-or-</para>
                            <para><paramref name="left"/> and <paramref name="right"/> are <Strong>Null</Strong>.</para><br/>
                            <para><strong>Comparison Algorithm</strong></para>
                            <para>    left.Begin == right.Begin AND left.End == right.End</para>
                        </description>
            		</item>
            		<item>
            			<term>Greater than zero</term>
            			<description>
                            <para><paramref name="left"/> is greater than <paramref name="right"/>.</para>
                            <para>-or-</para>
                            <para><paramref name="right"/> is <Strong>Null.</Strong></para><br/>
                            <para><strong>Comparison Algorithm</strong></para>
                            <para>   left.Begin &gt; right.Begin OR (left.Begin == right.Begin AND left.End &gt; right.End)</para>
                        </description>
            		</item>
            	</list>       
                </para>
            </remarks>
            <seealso cref="M:Teradata.Client.Provider.TdPeriodTimestampWithTimeZone.CompareTo(Teradata.Client.Provider.TdPeriodTimestampWithTimeZone)"/>
            <param name="left">An instance of TdPeriodTimestampWithTimeZone.</param>
            <param name="right">An instance of TdPeriodTimestampWithTimeZone.</param>
        </member>
        <member name="M:Teradata.Client.Provider.TdPeriodTimestampWithTimeZone.Equals(Teradata.Client.Provider.TdPeriodTimestampWithTimeZone,Teradata.Client.Provider.TdPeriodTimestampWithTimeZone)">
            <summary>
                Compares two <see cref="T:Teradata.Client.Provider.TdPeriodTimestampWithTimeZone"/> structures to determine whether they are
                equal.
            </summary>
            <returns>
            <para>A boolean is returned that indicates the result of the comparison.</para>
            </returns>
            <remarks>
            <para>To determine whether two periods are equal, the beginning and ending bounds between
            the left and right operands are compared.  The two periods are equal if the following is true:</para>
            
            <pre>    left.Begin == right.Begin &amp;&amp; left.End == right.Begin</pre>
            
            	<para>
            		The value returned is <c>true</c> if the <paramref name="left"/> is 
                    equal to the <paramref name="right"/>, <c>false</c> otherwise.
                </para>
            	<para>
            		<list type="table">
            			<listheader>
            				<term>Return Value</term>
            				<description>Description</description>
            			</listheader>
            			<item>
            				<term><c>true</c></term>
                            <description>
                                <para><paramref name="left"/> and <paramref name="right"/> are <see cref="F:Teradata.Client.Provider.TdPeriodTimestampWithTimeZone.Null"/></para> 
                                <para>-or-</para>
                                <para><paramref name="left"/> is equal to <paramref name="right"/>.</para>
                            </description>
            			</item>
            			<item>
            				<term><c>false</c></term>
                            <description>
                            <para><paramref name="left"/> or <paramref name="right"/> is <strong>Null</strong></para>
                            <para>-or-</para>
                            <para><paramref name="left"/> is not equal to <paramref name="right"/>.</para>
                            </description>
            			</item>
            		</list>
            	</para>
            </remarks>
            <example>
                The following code example uses various comparison methods and operators.
                <code lang="CS">
            TdDate  later = new TdPeriodTimestampWithTimeZone(
                                   new TdTimestampWithTimeZone(2010, 8, 31, 0, 0, 0, 0, new TimeSpan(8, 0, 0)), 
                                   new TdDate(2010, 10, 25, 12, 30, 30, 0, new TimeSpan(8, 0, 0)));
            
            TdDate earlier = new TdPeriodTimestampWithTimeZone(
                                   new TdTimestampWithTimeZone(2007, 8, 31, 8, 0, 30, 0, new TimeSpan(8, 0, 0)), 
                                   new TdTimestampWithTimeZone(2007, 11, 12, 20, 31, 0, 0, new TimeSpan(8, 0, 0)));
             
            // The following comparison methods and operators are equivalent
            if (false == TdPeriodTimestampWithTimeZone.Equals(later, earlier) ||
                late != earlier ||
                true == TdPeriodTimestampWithTimeZone.NotEquals(later, earlier) )
            {
               Console.WriteLine("later does not equal earlier");
            }
                </code>
            </example>
            <param name="left">A TdPeriodTimestampWithTimeZone instance.</param>
            <param name="right">A TdPeriodTimestampWithTimeZone instance.</param>
        </member>
        <member name="M:Teradata.Client.Provider.TdPeriodTimestampWithTimeZone.NotEquals(Teradata.Client.Provider.TdPeriodTimestampWithTimeZone,Teradata.Client.Provider.TdPeriodTimestampWithTimeZone)">
            <summary>
            Compares two TdPeriodTimestampWithTimeZone structures to determine whether the <paramref name="left"/> operand is 
            not equal to the <paramref name="right"/> operand.
            </summary>
            <returns>
            A boolean is returned that indicates the result of the comparison.
            </returns>
            <remarks>
            <para>To determine whether two periods are not equal, the beginning and ending bounds between
            the left and right operands are compared.  The two periods are not equal if the following is true:</para>
            
            <pre>    left.Begin != right.Begin || left.End != right.End</pre>
            
            	<para>
            		The value returned is <c>true</c> if the <paramref name="left"/> is 
                    not equal to the <paramref name="right"/>, <c>false</c> otherwise.
                </para>
            	<para>
            		<list type="table">
            			<listheader>
            				<term>Return Value</term>
            				<description>Description</description>
            			</listheader>
            			<item>
            				<term><c>true</c></term>
                            <description>
                                <para><paramref name="left"/> or <paramref name="right"/> is <see cref="F:Teradata.Client.Provider.TdPeriodTimestampWithTimeZone.Null"/></para> 
                                <para>-or-</para>
                                <para><paramref name="left"/> is less than or greater than <paramref name="right"/>.</para>
                            </description>
            			</item>
            			<item>
            				<term><c>false</c></term>
                            <description>
                            <para><paramref name="left"/> and <paramref name="right"/> are <strong>Null</strong></para>
                            <para>-or-</para>
                            <para><paramref name="left"/> is equal to <paramref name="right"/>.</para>
                            </description>
            			</item>
            		</list>
            	</para>
            </remarks>
            <param name="left">An instance of TdPeriodTimestampWithTimeZone.</param>
            <param name="right">An instance of TdPeriodTimestampWithTimeZone.</param>        
        </member>
        <member name="M:Teradata.Client.Provider.TdPeriodTimestampWithTimeZone.GreaterThan(Teradata.Client.Provider.TdPeriodTimestampWithTimeZone,Teradata.Client.Provider.TdPeriodTimestampWithTimeZone)">
            <summary>
            Compares two TdPeriodTimestampWithTimeZone structures to determine whether the <paramref name="left"/> operand is 
            greater than the <paramref name="right"/> operand.
            </summary>
            <returns>
            A boolean is returned that indicates the result of the comparison.
            </returns>
            <remarks>
            <para>The beginning and ending bounds between the left and right operands are compared to 
            determine whether the left period is greater than the right.  The left is greater
            than the right if the following is true:</para>
            
            <pre>    left.Begin &gt; right.Begin OR (left.Begin == right.Begin AND left.End &gt; right.End)</pre>
            
            	<para>
            		The value returned is <c>true</c> if the <paramref name="left"/> is greater
                    than the <paramref name="right"/>, <c>false</c> otherwise.
                </para>
            	<para>
            		<list type="table">
            			<listheader>
            				<term>Return Value</term>
            				<description>Description</description>
            			</listheader>
            			<item>
            				<term><c>true</c></term>
                            <description><paramref name="left"/> and <paramref name="right"/> are not <see cref="F:Teradata.Client.Provider.TdPeriodTimestampWithTimeZone.Null"/> and
                            <paramref name="left"/> is greater than <paramref name="right"/>.
                            </description>
            			</item>
            			<item>
            				<term><c>false</c></term>
                            <description>
                            <para><paramref name="left"/> and / or <paramref name="right"/> is <strong>Null</strong> </para>
                            <para>-or-</para>
                            <para><paramref name="left"/> is less than or equal to <paramref name="right"/>.</para>
                            </description>
            			</item>
            		</list>
            	</para>
            
            <para>Comparison operators always returns <c>false</c> if one of the operands is 
            <strong>Null</strong>.  Therefore, you must not assume that the reverse condition 
            is <c>true</c>. For example you cannot assume that the left operand is less than or 
            equal to the right operand if the <c>GreaterThan</c> operator returns <c>false</c>.</para> 
            
            </remarks>
            <param name="left">An instance of TdPeriodTimestampWithTimeZone.</param>
            <param name="right">An instance of TdPeriodTimestampWithTimeZone.</param>
        </member>
        <member name="M:Teradata.Client.Provider.TdPeriodTimestampWithTimeZone.GreaterThanOrEqual(Teradata.Client.Provider.TdPeriodTimestampWithTimeZone,Teradata.Client.Provider.TdPeriodTimestampWithTimeZone)">
            <summary>
            Compares two TdPeriodTimestampWithTimeZone structures to determine whether the <paramref name="left"/> operand is 
            greater than or equal to the <paramref name="right"/> operand.
            </summary>
            <returns>
            A boolean is returned that indicates the result of the comparison.
            </returns>
            <remarks>
            <para>In order to perform this comparison the beginning and ending bounds of the left
            and right operands are compared against each other.  The left is greater than or equal
            to the right if the following is true:</para>
            
            <pre>    ((left.Begin &gt; right.Begin) OR (left.Begin == right.Begin AND left.End &gt;= right.End))</pre>
            
            	<para>
            		The value returned is <c>true</c> if the <paramref name="left"/> is greater
                    than or equal to the <paramref name="right"/>, <c>false</c> otherwise.
                </para>
            	<para>
            		<list type="table">
            			<listheader>
            				<term>Return Value</term>
            				<description>Description</description>
            			</listheader>
            			<item>
            				<term><c>true</c></term>
                            <description><paramref name="left"/> and <paramref name="right"/> are not <see cref="F:Teradata.Client.Provider.TdPeriodTimestampWithTimeZone.Null"/> and
                            <paramref name="left"/> is greater than or equal to <paramref name="right"/>.
                            </description>
            			</item>
            			<item>
            				<term><c>false</c></term>
                            <description>
                            <para><paramref name="left"/> and / or <paramref name="right"/> is <strong>Null</strong> </para>
                            <para>-or-</para>
                            <para><paramref name="left"/> is less than <paramref name="right"/>.</para>
                            </description>
            			</item>
            		</list>
            	</para>
            
            <para>Comparison operators always returns <c>false</c> if one of the operands is 
            <strong>Null</strong>.  Therefore, you must not assume that the reverse condition is 
            <c>true</c>. For example you cannot assume that the left operand is less than the right 
            operand if <c>GreaterThanOrEqual</c> operator returns <c>false</c>.</para> 
            
            </remarks>
            <param name="left">An instance of TdPeriodTimestampWithTimeZone.</param>
            <param name="right">An instance of TdPeriodTimestampWithTimeZone.</param>
        </member>
        <member name="M:Teradata.Client.Provider.TdPeriodTimestampWithTimeZone.LessThan(Teradata.Client.Provider.TdPeriodTimestampWithTimeZone,Teradata.Client.Provider.TdPeriodTimestampWithTimeZone)">
            <summary>
            Compares two TdPeriodTimestampWithTimeZone structures to determine whether the <paramref name="left"/> operand is 
            less than the <paramref name="right"/> operand.
            </summary>
            <returns>
            A boolean is returned that indicates the result of the comparison.
            </returns>
            <remarks>
            <para>In order to perform this comparison the beginning and ending bounds of the left
            and right operands are compared against each other.  The left is less than the right if 
            the following is true:</para>
            
            <pre>    left.Begin &lt; right.Begin || (left.Begin == right.Begin &amp;&amp; left.End &lt; right.End)</pre>
            
            	<para>
            		The value returned is <c>true</c> if the <paramref name="left"/> is less
                    than the <paramref name="right"/>, <c>false</c> otherwise.
                </para>
            	<para>
            		<list type="table">
            			<listheader>
            				<term>Return Value</term>
            				<description>Description</description>
            			</listheader>
            			<item>
            				<term><c>true</c></term>
                            <description><paramref name="left"/> and <paramref name="right"/> are not <see cref="F:Teradata.Client.Provider.TdPeriodTimestampWithTimeZone.Null"/> and
                            <paramref name="left"/> is less than <paramref name="right"/>.
                            </description>
            			</item>
            			<item>
            				<term><c>false</c></term>
                            <description>
                            <para><paramref name="left"/> and / or <paramref name="right"/> is <strong>Null</strong></para>
                            <para>-or-</para>
                            <para><paramref name="left"/> is greater than or equal to <paramref name="right"/>.</para>
                            </description>
            			</item>
            		</list>
            	</para>
            <para>Comparison operators always returns <c>false</c> if one of the operands is 
            <strong>Null</strong>.  Therefore, you must not assume that the reverse condition 
            is <c>true</c>. For example you cannot assume that the left operand is greater than 
            or equal the right operand if the <c>LessThan</c> operator returns <c>false</c>.</para> 
            
            </remarks>
            <param name="left">An instance of TdPeriodTimestampWithTimeZone.</param>
            <param name="right">An instance of TdPeriodTimestampWithTimeZone.</param>
        </member>
        <member name="M:Teradata.Client.Provider.TdPeriodTimestampWithTimeZone.LessThanOrEqual(Teradata.Client.Provider.TdPeriodTimestampWithTimeZone,Teradata.Client.Provider.TdPeriodTimestampWithTimeZone)">
            <summary>
            Compares two TdPeriodTimestampWithTimeZone structures to determine whether the <paramref name="left"/> operand is 
            less than or equal to the <paramref name="right"/> operand.
            </summary>
            <returns>
            A boolean is returned that indicates the result of the comparison.
            </returns>
            <remarks>
            <para>In order to perform this comparison the beginning and ending bounds of the left
            and right operands are compared against each other.  The left is equal to or less than the right if 
            the following is true:</para>
            
            <pre>    ((left.Begin &lt; right.Begin) OR (left.Begin == right.Begin AND left.End &lt;= right.End))</pre>
            
            	<para>
            		The value returned is <c>true</c> if the <paramref name="left"/> is less
                    than or equal to the <paramref name="right"/>, <c>false</c> otherwise.
                </para>
            	<para>
            		<list type="table">
            			<listheader>
            				<term>Return Value</term>
            				<description>Description</description>
            			</listheader>
            			<item>
            				<term><c>true</c></term>
                            <description><paramref name="left"/> and <paramref name="right"/> are not <see cref="F:Teradata.Client.Provider.TdPeriodTimestampWithTimeZone.Null"/> and
                            <paramref name="left"/> is less than or equal to <paramref name="right"/>.
                            </description>
            			</item>
            			<item>
            				<term><c>false</c></term>
                            <description>
                            <para><paramref name="left"/> and / or <paramref name="right"/> is <strong>Null</strong></para>
                            <para>-or-</para>
                            <para><paramref name="left"/> is greater than <paramref name="right"/>.</para>
                            </description>
            			</item>
            		</list>
            	</para>
            
            <para>Comparison operators always returns <c>false</c> if one of the operands is 
            <strong>Null</strong>.  Therefore, you must not assume that the reverse condition 
            is <c>true</c>. For example you cannot assume that the left operand is greater than 
            the right operand if the <c>LessThanOrEqual</c> operator 
            returns <c>false</c>.</para> 
            
            </remarks>
            <param name="left">An instance of TdPeriodTimestampWithTimeZone.</param>
            <param name="right">An instance of TdPeriodTimestampWithTimeZone.</param>
        </member>
        <member name="M:Teradata.Client.Provider.TdPeriodTimestampWithTimeZone.op_Equality(Teradata.Client.Provider.TdPeriodTimestampWithTimeZone,Teradata.Client.Provider.TdPeriodTimestampWithTimeZone)">
            <summary>
            Compares two TdPeriodTimestampWithTimeZone structures to determine whether the <paramref name="left"/> operand is 
            equal to the <paramref name="right"/> operand.
            </summary>
            <returns>
            A boolean is returned that indicates the result of the comparison.
            </returns>
            <remarks>
            <para>The beginning and ending bounds between the left and right operands are compared to 
            determine whether the two periods are equal.  The two periods are equal if the following is true:</para>
            
            <pre>    left.Begin == right.Begin &amp;&amp; left.End == right.Begin</pre>
            	<para>
            		The value returned is <c>true</c> if the <paramref name="left"/> is 
                    equal to the <paramref name="right"/>, <c>false</c> otherwise.
                </para>
            	<para>
            		<list type="table">
            			<listheader>
            				<term>Return Value</term>
            				<description>Description</description>
            			</listheader>
            			<item>
            				<term><c>true</c></term>
                            <description>
                                <para><paramref name="left"/> and <paramref name="right"/> are <see cref="F:Teradata.Client.Provider.TdPeriodTimestampWithTimeZone.Null"/></para> 
                                <para>-or-</para>
                                <para><paramref name="left"/> is equal to <paramref name="right"/>.</para>
                            </description>
            			</item>
            			<item>
            				<term><c>false</c></term>
                            <description>
                            <para><paramref name="left"/> or <paramref name="right"/> is <strong>Null</strong></para>
                            <para>-or-</para>
                            <para><paramref name="left"/> is not equal to <paramref name="right"/>.</para>
                            </description>
            			</item>
            		</list>
            	</para>
            
            <para>
            Unlike comparison operators, Equality operators do not always return <c>false</c> when 
            left and right operands are <strong>Null</strong>. Therefore the reverse condition can 
            be considered <c>true</c>. TdDate implementation is very similar to the 
            <see cref="T:System.Nullable"/> class in this regard.
            </para>
            </remarks>
            <param name="left">An instance of TdPeriodTimestampWithTimeZone.</param>
            <param name="right">An instance of TdPeriodTimestampWithTimeZone.</param>        
            <example>
            The following example shows that the Equality operator can safely be used in an if statement.
            <code>
             TdPeriodTimestampWithTimeZone x = TdPeriodTimestampWithTimeZone.Null;
             TdPeriodTimestampWithTimeZone y = new TdPeriodTimestampWithTimeZone(
                     new TdTimestampWithTimeZone(2008, 10, 10, 12, 10, 33, 0, new TimeSpan(8, 0, 0)), 
                     new TdTimestampWithTimeZone(2008, 11, 30, 14, 11, 22, 0, new TimeSpan(8, 0, 0)));
            
             if (x == y)
             {
                 // x is equal to y.
                 Console.WriteLine(@"X is equal to Y").
             }
             else
             {
                 // x is not equal y
                 Console.WriteLine(@"X is not equal to Y").
             }
            
             y = TdPeriodTimestampWithTimeZone.Null;
            
             if (x == y)
             {
                 // x is equal to y.
                 Console.WriteLine(@"X is equal to Y").
             }
             else
             {
                 // x is not equal y
                 Console.WriteLine(@"X is not equal to Y").
             }
            </code>
            </example>
        </member>
        <member name="M:Teradata.Client.Provider.TdPeriodTimestampWithTimeZone.op_Inequality(Teradata.Client.Provider.TdPeriodTimestampWithTimeZone,Teradata.Client.Provider.TdPeriodTimestampWithTimeZone)">
            <summary>
            Compares two TdPeriodTimestampWithTimeZone structures to determine whether the <paramref name="left"/> operand is 
            not equal to the <paramref name="right"/> operand.
            </summary>
            <returns>
            A boolean is returned that indicates the result of the comparison.
            </returns>
            <remarks>
            <para>The beginning and ending bounds between the left and right operands are 
            compared to determine whether the two periods are not equal.  The two periods are not 
            equal if the following is true:</para>
            
            <pre>    left.Begin != right.Begin || left.End != right.End</pre>
            
            	<para>
            		The value returned is <c>true</c> if the <paramref name="left"/> is 
                    not equal to the <paramref name="right"/>, <c>false</c> otherwise.
                </para>
            	<para>
            		<list type="table">
            			<listheader>
            				<term>Return Value</term>
            				<description>Description</description>
            			</listheader>
            			<item>
            				<term><c>true</c></term>
                            <description>
                                <para><paramref name="left"/> or <paramref name="right"/> is <see cref="F:Teradata.Client.Provider.TdPeriodTimestampWithTimeZone.Null"/></para> 
                                <para>-or-</para>
                                <para><paramref name="left"/> is less than or greater than <paramref name="right"/>.</para>
                            </description>
            			</item>
            			<item>
            				<term><c>false</c></term>
                            <description>
                            <para><paramref name="left"/> and <paramref name="right"/> are <strong>Null</strong></para>
                            <para>-or-</para>
                            <para><paramref name="left"/> is equal to <paramref name="right"/>.</para>
                            </description>
            			</item>
            		</list>
            	</para>
            </remarks>
            <param name="left">An instance of TdPeriodTimestampWithTimeZone.</param>
            <param name="right">An instance of TdPeriodTimestampWithTimeZone.</param>        
        </member>
        <member name="M:Teradata.Client.Provider.TdPeriodTimestampWithTimeZone.op_GreaterThan(Teradata.Client.Provider.TdPeriodTimestampWithTimeZone,Teradata.Client.Provider.TdPeriodTimestampWithTimeZone)">
            <summary>
            Compares two TdPeriodTimestampWithTimeZone structures to determine whether the <paramref name="left"/> is 
            greater than the <paramref name="right"/> operand.
            </summary>
            <returns>
            A boolean is returned that indicates the result of the comparison.
            </returns>
            <remarks>
            <para>The beginning and ending bounds between the left and right operands are compared 
            to determine whether the left period is greater than the right.  The left is greater
            than the right if the following is true:</para>
            
            <pre>    left.Begin &gt; right.Begin OR (left.Begin == right.Begin AND left.End &gt; right.End)</pre>
            
            	<para>
            		The value returned is <c>true</c> if the <paramref name="left"/> is greater
                    than the <paramref name="right"/>, <c>false</c> otherwise.
                </para>
            	<para>
            		<list type="table">
            			<listheader>
            				<term>Return Value</term>
            				<description>Description</description>
            			</listheader>
            			<item>
            				<term><c>true</c></term>
                            <description><paramref name="left"/> and <paramref name="right"/> are not <see cref="F:Teradata.Client.Provider.TdPeriodTimestampWithTimeZone.Null"/> and
                            <paramref name="left"/> is greater than <paramref name="right"/>.
                            </description>
            			</item>
            			<item>
            				<term><c>false</c></term>
                            <description>
                            <para><paramref name="left"/> and / or <paramref name="right"/> is <strong>Null</strong> </para>
                            <para>-or-</para>
                            <para><paramref name="left"/> is less than or equal to <paramref name="right"/>.</para>
                            </description>
            			</item>
            		</list>
            	</para>
            
            <para>Comparison operators always returns <c>false</c> if one of the operands is 
            <strong>Null</strong>.  Therefore, you must not assume that the reverse condition 
            is <c>true</c>. For example you cannot assume that the left operand is less than or 
            equal to the right operand if the "<c>&gt;</c>" operator returns <c>false</c>.</para> 
            </remarks>
            <param name="left">An instance of TdPeriodTimestampWithTimeZone.</param>
            <param name="right">An instance of TdPeriodTimestampWithTimeZone.</param>
        </member>
        <member name="M:Teradata.Client.Provider.TdPeriodTimestampWithTimeZone.op_GreaterThanOrEqual(Teradata.Client.Provider.TdPeriodTimestampWithTimeZone,Teradata.Client.Provider.TdPeriodTimestampWithTimeZone)">
            <summary>
            Compares two TdPeriodTimestampWithTimeZone structures to determine whether the <paramref name="left"/> is 
            greater than or equal to the <paramref name="right"/> operand.
            </summary>
            <returns>
            A boolean is returned that indicates the result of the comparison.
            </returns>
            <remarks>
            <para>In order to perform this comparison the beginning and ending bounds of the left
            and right operands are compared against each other.  The left is greater than or equal
            to the right if the following is true:</para>
            
            <pre>    (left.Begin &gt; right.Begin) || (left.Begin == right.Begin &amp;&amp; left.End &gt;= right.End)</pre>
            
            	<para>
            		The value returned is <c>true</c> if the <paramref name="left"/> is greater
                    than or equal to the <paramref name="right"/>, <c>false</c> otherwise.
                </para>
            	<para>
            		<list type="table">
            			<listheader>
            				<term>Return Value</term>
            				<description>Description</description>
            			</listheader>
            			<item>
            				<term><c>true</c></term>
                            <description><paramref name="left"/> and <paramref name="right"/> are not <see cref="F:Teradata.Client.Provider.TdPeriodTimestampWithTimeZone.Null"/> and
                            <paramref name="left"/> is greater than or equal to <paramref name="right"/>.
                            </description>
            			</item>
            			<item>
            				<term><c>false</c></term>
                            <description>
                            <para><paramref name="left"/> and / or <paramref name="right"/> is <strong>Null</strong> </para>
                            <para>-or-</para>
                            <para><paramref name="left"/> is less than <paramref name="right"/>.</para>
                            </description>
            			</item>
            		</list>
            	</para>
            
            <para>Comparison operators always returns <c>false</c> if one of the operands is 
            <strong>Null</strong>.  Therefore, you must not assume that the reverse condition 
            is <c>true</c>. For example you cannot assume that the left operand is less than the 
            right operand if the "<c>&gt;=</c>" operator returns <c>false</c>.</para> 
            </remarks>
            <param name="left">An instance of TdPeriodTimestampWithTimeZone.</param>
            <param name="right">An instance of TdPeriodTimestampWithTimeZone.</param>
        </member>
        <member name="M:Teradata.Client.Provider.TdPeriodTimestampWithTimeZone.op_LessThan(Teradata.Client.Provider.TdPeriodTimestampWithTimeZone,Teradata.Client.Provider.TdPeriodTimestampWithTimeZone)">
            <summary>
            Compares two TdPeriodTimestampWithTimeZone structures to determine whether the <paramref name="left"/> operand is 
            less than the <paramref name="right"/> operand.
            </summary>
            <returns>
            A boolean is returned that indicates the result of the comparison.
            </returns>
            <remarks>
            <para>In order to perform this comparison the beginning and ending bounds of the left
            and right operands are compared against each other.  The left is less than the right if 
            the following is true:</para>
            
            <pre>    left.Begin &lt; right.Begin || (left.Begin == right.Begin &amp;&amp; left.End &lt; right.End)</pre>
            
            	<para>
            		The value returned is <c>true</c> if the <paramref name="left"/> is less
                    than the <paramref name="right"/>, <c>false</c> otherwise.
                </para>
            	<para>
            		<list type="table">
            			<listheader>
            				<term>Return Value</term>
            				<description>Description</description>
            			</listheader>
            			<item>
            				<term><c>true</c></term>
                            <description><paramref name="left"/> and <paramref name="right"/> are not <see cref="F:Teradata.Client.Provider.TdPeriodTimestampWithTimeZone.Null"/> and
                            <paramref name="left"/> is less than <paramref name="right"/>.
                            </description>
            			</item>
            			<item>
            				<term><c>false</c></term>
                            <description>
                            <para><paramref name="left"/> and / or <paramref name="right"/> is <strong>Null</strong></para>
                            <para>-or-</para>
                            <para><paramref name="left"/> is greater than or equal to <paramref name="right"/>.</para>
                            </description>
            			</item>
            		</list>
            	</para>
            
            <para>Comparison operators always returns <c>false</c> if one of the operands is 
            <strong>Null</strong>.  Therefore, you must not assume that the reverse condition is 
            <c>true</c>. For example you cannot assume that the left operand is greater than or 
            equal the right operand if the "<c>&lt;</c>" operator returns <c>false</c>.</para> 
            </remarks>
            <param name="left">An instance of TdPeriodTimestampWithTimeZone.</param>
            <param name="right">An instance of TdPeriodTimestampWithTimeZone.</param>
        </member>
        <member name="M:Teradata.Client.Provider.TdPeriodTimestampWithTimeZone.op_LessThanOrEqual(Teradata.Client.Provider.TdPeriodTimestampWithTimeZone,Teradata.Client.Provider.TdPeriodTimestampWithTimeZone)">
            <summary>
            Compares two TdPeriodTimestampWithTimeZone structures to determine whether the <paramref name="left"/> is 
            less than or equal to the <paramref name="right"/> operand.
            </summary>
            <returns>
            A boolean is returned that indicates the result of the comparison.
            </returns>
            <remarks>
            <para>In order to perform this comparison the beginning and ending bounds of the left
            and right operands are compared against each other.  The left is equal to or less than the right if 
            the following is true:</para>
            
            <pre>    left.Begin &lt; right.Begin || (left.Begin == right.Begin &amp;&amp; left.End &lt;= right.End)</pre>
            
            	<para>
            		<c>true</c> if the <paramref name="left"/> is less
                    than or equal to the <paramref name="right"/>, <c>false</c> otherwise.
                </para>
            	<para>
            		<list type="table">
            			<listheader>
            				<term>Return Value</term>
            				<description>Description</description>
            			</listheader>
            			<item>
            				<term><c>true</c></term>
                            <description><paramref name="left"/> and <paramref name="right"/> are not <see cref="F:Teradata.Client.Provider.TdPeriodTimestampWithTimeZone.Null"/> and
                            <paramref name="left"/> is less than or equal to <paramref name="right"/>.
                            </description>
            			</item>
            			<item>
            				<term><c>false</c></term>
                            <description>
                            <para><paramref name="left"/> and / or <paramref name="right"/> is <strong>Null</strong></para>
                            <para>-or-</para>
                            <para><paramref name="left"/> is greater than <paramref name="right"/>.</para>
                            </description>
            			</item>
            		</list>
            	</para>
            
            <para>Comparison operators always returns <c>false</c> if one of the operands is 
            <strong>Null</strong>.  Therefore, you must not assume that the reverse condition is 
            <c>true</c>. For example you cannot assume that the left operand is greater than the 
            right operand if the "<c>&lt;=</c>" operator returns <c>false</c>.</para> 
            </remarks>
            <param name="left">An instance of TdPeriodTimestampWithTimeZone.</param>
            <param name="right">An instance of TdPeriodTimestampWithTimeZone.</param>
        </member>
        <member name="M:Teradata.Client.Provider.TdPeriodTimestampWithTimeZone.CompareTo(Teradata.Client.Provider.TdPeriodTimestampWithTimeZone)">
            <summary>
            Compares this instance to the specified TdPeriodTimestampWithTimeZone <paramref name="other"/>. 
            </summary>
            <returns>
            The result of the comparison is returned as an integer.
            </returns>
            <remarks>
            	<para>
                    The integer returned when this instance is compared to <paramref name="other"/>
                    indicates the following:
                </para>
            	<para>
            	<list type="table">
            		<listheader>
            			<term>Return Value</term>
            			<description>Meaning</description>
            		</listheader>
            		<item>
            			<term>Less than zero</term>
            			<description>
                            <para>This instance is less than <paramref name="other"/>.</para> 
                            <para>-or-</para>
                            <para>This instance is <see cref="F:Teradata.Client.Provider.TdPeriodTimestampWithTimeZone.Null"/>.</para><br/>
                            <para><strong>Comparison Algorithm</strong></para>
                            <para>    this.Begin &lt; other.Begin OR (this.Begin == other.Begin AND this.End &lt; other.End)</para>
                        </description>
            		</item>
            		<item>
            			<term>Zero</term>
            			<description>
                            <para>This instance is equal to <paramref name="other"/>.</para>
                            <para>-or-</para>
                            <para>This instance and <paramref name="other"/> are <Strong>Null</Strong>.</para><br/>
                            <para><strong>Comparison Algorithm</strong></para>
                            <para>    this.Begin == other.Begin AND this.End == other.End</para>
                        </description>
            		</item>
            		<item>
            			<term>Greater than zero</term>
            			<description>
                            <para>This instance is greater than <paramref name="other"/>.</para>
                            <para>-or-</para>
                            <para><paramref name="other"/> is <Strong>Null.</Strong></para><br/>
                            <para><strong>Comparison Algorithm</strong></para>
                            <para>    this.Begin &gt; other.Begin OR (this.Begin == other.Begin AND this.End &gt; other.End)</para>
                        </description>
            		</item>
            	</list>     
            	</para>
            </remarks>
            <param name="other">The TdPeriodTimestampWithTimeZone to compare against.</param>
        </member>
        <member name="M:Teradata.Client.Provider.TdPeriodTimestampWithTimeZone.CompareTo(System.Object)">
            <summary>
            Compares this instance to the specified TdPeriodTimestampWithTimeZone <paramref name="obj"/>. 
            </summary>
            
            <returns>
            The result of the comparison is returned as an integer.
            </returns>
            
            <remarks>
            	<para>
                    The integer returned when this instance is compared to <paramref name="obj"/>
                    indicates the following:
                </para>
            	<para>
            	<list type="table">
            		<listheader>
            			<term>Return Value</term>
            			<description>Meaning</description>
            		</listheader>
            		<item>
            			<term>Less than zero</term>
            			<description>
                            <para>This instance is less than <paramref name="obj"/>.</para> 
                            <para>-or-</para>
                            <para>This instance is <see cref="F:Teradata.Client.Provider.TdPeriodTimestampWithTimeZone.Null"/>.</para><br/>
                            <para><strong>Comparison Algorithm</strong></para>
                            <para>    this.Begin &lt; other.Begin OR (this.Begin == other.Begin AND this.End &lt; other.End)</para>
                        </description>
            		</item>
            		<item>
            			<term>Zero</term>
            			<description>
                            <para>This instance is equal to <paramref name="obj"/>.</para>
                            <para>-or-</para>
                            <para>This instance and <paramref name="obj"/> are <Strong>Null</Strong>.</para><br/>
                            <para><strong>Comparison Algorithm</strong></para>
                            <para>    this.Begin == other.Begin AND this.End == other.End</para>
                        </description>
            		</item>
            		<item>
            			<term>Greater than zero</term>
            			<description>
                            <para>This instance is greater than <paramref name="obj"/>.</para>
                            <para>-or-</para>
                            <para><paramref name="obj"/> is <Strong>Null.</Strong></para><br/>
                            <para><strong>Comparison Algorithm</strong></para>
                            <para>    this.Begin &gt; other.Begin OR (this.Begin == other.Begin AND this.End &gt; other.End)</para>
                        </description>
            		</item>
            	</list>     
            	</para>
            
              <para><paramref name="obj"/> must be an instance of TdPeriodTimestampWithTimeZone type or <c>null</c> reference.</para>
            </remarks>
            
            <exception cref="T:System.ArgumentException"><paramref name="obj"/> is not of type TdPeriodTimestampWithTimeZone</exception>
            <seealso cref="M:Teradata.Client.Provider.TdPeriodTimestampWithTimeZone.CompareTo(Teradata.Client.Provider.TdPeriodTimestampWithTimeZone)"/>
            
            <overloads>
            Compares this instance to the supplied object and returns whether it is less
            than, equal or greater than the supplied object.
            </overloads>
            
            <param name="obj">TdPeriodTimestampWithTimeZone instance to compare against.</param>
        </member>
        <member name="M:Teradata.Client.Provider.TdPeriodTimestampWithTimeZone.ToString">
            <summary>
            This instance of TdPeriodTimestampWithTimeZone is converted to a String representation.
            </summary>
            
            <returns>The string representation of TdPeriodTimestampWithTimeZone is returned.</returns>
            
            <remarks>
            <para>When a TdPeriodTimestampWithTimeZone is converted to a string, both the beginning and ending bounds 
            will be included in the returning string.  The format of the string will be:</para>
            
            <pre>    (yyyy-MM-dd HH:mm:ss.ffffffZ, yyyy-MM-dd HH:mm:ss.ffffffZ)</pre>
            
            <para>An example of a string representation of a TdPeriodTimestampWithTimeZone is</para>
            
            <pre>    (2007-10-31 20:21:56.323+08:00, 2007-11-27 01:31:21.564+08:00)</pre>
            
            <seealso cref="T:Teradata.Client.Provider.TdTimestampWithTimeZone"/>
            <seealso cref="M:Teradata.Client.Provider.TdTimestampWithTimeZone.ToString"/>
            </remarks>
            <overloads>
            Returns the string representation of the period.
            </overloads>
        </member>
        <member name="M:Teradata.Client.Provider.TdPeriodTimestampWithTimeZone.ToString(System.String)">
            <summary>
            TdPeriodTimestampWithTimeZone is converted to the equivalent String using the specified format.
            </summary>
            
            <param name="format">The DateTime format string that will be used to format the TdPeriodTimestampWithTimeZone.</param>
            
            <returns>A string representation of the Period.</returns>
            
            <remarks>
            <para>When a TdPeriodTimestampWithTimeZone is converted to a string, both the beginning and ending bounds 
            will be included in the returning string.  The format of the string will be:</para>
            
            <pre>    (<i>Beginning Bound</i>, <i>Ending Bound</i>)</pre>
            
            <para>The format specifier is only used when formatting the string representation of the 
            beginning and ending bounds of the period.  It will not affect the format of the period.</para>
            
            <para>If the format parameter is null, the string representation of TdPeriodTimestamp will
            be equivalent to the "G" format specifier which is</para>
            
            <pre>    (yyyy-MM-dd HH:mm:ss.ffffffZ, yyyy-MM-dd HH:mm:ss.ffffffZ)</pre>
            
            <para>The following format specifiers are supported by TdPeriodTimestamp:</para>
            
            <para>
            <list type="table">
            <listheader>
            <term>Format Specifier</term>
            <description>Description</description>
            </listheader>
            <item>
            <term>G</term>
            <description><para>The ANSI representation of the period:  
            (yyyy-MM-dd HH:mm:ss.ffffffZ, yyyy-MM-dd HH:mm:ss.ffffffZ).  </para>
            <para>Example:  (2008-08-14 10:21:31.002+08:00, 2008-12-15 12:45:00.212+08:00).</para></description>
            </item>
            <item>
            <term>l or L</term>
            <description><para>The Teradata database's literal representation of the period:
            PERIOD'(yyyy-MM-dd HH:mm:ss.ffffffZ, yyyy-MM-dd HH:mm:ss.ffffffZ)'.</para>
            <para>Example:  PERIOD'(2008-04-14 10:21:31.002+08:00, 2008-12-15 12:45:00.212+08:00)'.</para></description>
            </item>
            </list>
            </para>
            
            <seealso cref="M:Teradata.Client.Provider.TdTimestampWithTimeZone.ToString(System.String)"/>
            </remarks>
        </member>
        <member name="M:Teradata.Client.Provider.TdPeriodTimestampWithTimeZone.ToString(System.String,System.IFormatProvider)">
            <summary>
            TdPeriodTimestampWithTimeZone is converted into the equivalent String representation using the 
            specified format.
            </summary>
            
            <param name="format">The DateTime format string that will be used to format the 
            TdPeriodTimestampWithTimeZone.</param>
            <param name="formatProvider">The culture specific information.  The culture specific information
            is not used when converting a Period into a string.</param>
            
            <returns>A string representation of the period contained in TdPeriodTimestampWithTimeZone.</returns>
            
            <remarks>
            <para>When a TdPeriodTimestampWithTimeZone is converted to a string, both the beginning and ending bound 
            will be included in the returning string.  The format of the string will be:</para>
            
            <pre>    (<i>Beginning Bound</i>, <i>Ending Bound</i>)    </pre>
            
            <para>The format specifier affects the string 
            representation of the beginning and ending bounds of the period.  Cultural information
            specified in the <paramref name="formatProvider"/> is ignored.</para>
            
            <para>If the format parameter is null, the string representation of TdPeriodTimestampWithTimeZone will
            be equivalent to the "G" format specifier which is </para>
            
            <pre>    (yyyy-MM-dd HH:mm:ss.ffffffZ, yyyy-MM-dd HH:mm:ss.ffffffZ)</pre>
            
            <para>
            <list type="table">
            <listheader>
            <term>Format Specifier</term>
            <description>Description</description>
            </listheader>
            <item>
            <term>G</term>
            <description><para>The ANSI representation of the period:  
            (yyyy-MM-dd HH:mm:ss.ffffffZ, yyyy-MM-dd HH:mm:ss.ffffffZ). </para> 
            <para>Example:  (2008-08-14 10:21:31.002+01:00, 2008-12-15 12:45:00.212+01:00).</para></description>
            </item>
            <item>
            <term>l or L</term>
            <description><para>The Teradata database's literal representation of the period:
            PERIOD'(yyyy-MM-dd HH:mm:ss.ffffffZ, yyyy-MM-dd HH:mm:ss.ffffffZ)'.</para>
            <para>Example:  PERIOD'(2008-04-14 10:21:31.002+01:00, 2008-12-15 12:45:00.212+01:00)'.</para></description>
            </item>
            </list>
            </para>
            
            <seealso cref="M:Teradata.Client.Provider.TdTimestampWithTimeZone.ToString(System.String,System.IFormatProvider)"/>
            </remarks>
        </member>
        <member name="M:Teradata.Client.Provider.TdPeriodTimestampWithTimeZone.Parse(System.String)">
            <summary>
            The specified string is converted into an equivalent TdPeriodTimestampWithTimeZone.
            </summary>
            
            <param name="value">The string that is to be converted into a TdPeriodTimestampWithTimeZone.</param>
            
            <returns>A TdPeriodTimestampWithTimeZone is returned that is equivalent to the Period contained in the value string.</returns>
            
            <exception cref="T:System.ArgumentNullException">Value is a null reference.</exception>
            <exception cref="T:System.FormatException">Value does not contain a valid representation of a period.</exception>
            
            <remarks>
            <para>A period will have the following string representation: </para>
            
            <pre>    (<i>Beginning Bound</i>, <i>Ending Bound</i>)   </pre>
            
            <para>The period must be surrounded by parentheses.  Both the Beginning and Ending
            bounds can <strong>optionally</strong> be surrounded by single quotes (" ' ").  
            The exception to this is when the Teradata <strong>literal</strong> string representation of
            period is specified.
            The comma (" , ") is used as the delimeter between the Begin and End timestamps.  </para>
            
            <para>Refer to <see cref="M:Teradata.Client.Provider.TdPeriodTimestampWithTimeZone.ToString(System.String)"/> for valid formats for TdPeriodTimestampWithTimeZone.</para>
            
            <seealso cref="M:Teradata.Client.Provider.TdTimestampWithTimeZone.Parse(System.String)"/>
            </remarks>
        </member>
        <member name="M:Teradata.Client.Provider.TdPeriodTimestampWithTimeZone.TryParse(System.String,Teradata.Client.Provider.TdPeriodTimestampWithTimeZone@)">
             <summary>
             The specified string is converted into an equivalent TdPeriodTimestampWithTimeZone.
             </summary>
             <param name="value">The string that contains the TdPeriodTimestampWithTimeZone representation.</param>
             <param name="result">The TdPeriodTimestampWithTimeZone representation of the period contained in the specified string.</param>
             <returns>A Boolean is returned that indicates whether the conversion succeeded.  
             <c>true</c> indicates that the conversion was successful and that the conversion is 
             returned through the result parameter.  <c>false</c> indicates that the conversion 
             failed.</returns>
             <remarks>
             <para>TryParse is the same as Parse except that an exception does not get thrown 
             when the conversion fails.</para>
             
             <para>A period will have the following string representation: </para>
             
             <para>    (<i>Beginning Bound</i>, <i>Ending Bound</i>)</para>
             
             <para>The period must be surrounded by parentheses.  Both the Beginning and Ending
             bounds can <strong>optionally</strong> be surrounded by single quotes (" ' ").  
             The exception to this is when the Teradata <strong>literal</strong> string representation of
             period is specified.
             The comma (" , ") is used as the delimeter between the Begin and End timestamps.  </para>
             
             <para>Refer to <see cref="M:Teradata.Client.Provider.TdPeriodTimestampWithTimeZone.ToString(System.String)"/> for valid formats for TdPeriodTimestampWithTimeZone.</para>
             
              <para>If <paramref name="value"/> is null or String.Empty, a <strong>false</strong> is
             returned and the <paramref name="result"/> parameter is set to <see cref="F:Teradata.Client.Provider.TdPeriodTimestampWithTimeZone.MinValue"/>. </para>
            
             <para>If the conversion fails the result parameter will be set to TdPeriodTimestampWithTimeZone.MinValue.</para>
             
             <seealso cref="M:Teradata.Client.Provider.TdPeriodTimestampWithTimeZone.Parse(System.String)"/>
             <seealso cref="M:Teradata.Client.Provider.TdTimestampWithTimeZone.TryParse(System.String,Teradata.Client.Provider.TdTimestampWithTimeZone@)"/>
             </remarks>
        </member>
        <member name="M:Teradata.Client.Provider.TdPeriodTimestampWithTimeZone.GetXmlSchema(System.Xml.Schema.XmlSchemaSet)">
             <summary>
             Specifies the XML Qualified name for <strong>TdPeriodTimestampWithTimeZone</strong> XML type mapping.
             </summary>
             <param name="xmlSchemaSet">Holds zero or more XML Schema definition language (XSD) schemas.</param>
             <returns>
             Returns a XmlSchemaComplexType that describes a TdPeriodTimestampWithTimeZone.
             </returns>
             <example>
             This examples shows how to use <strong>TdPeriodTimestampWithTimeZone</strong> with the <see cref="T:System.Xml.Serialization.XmlSerializer"/> class.
             <see cref="T:System.Xml.Serialization.XmlElementAttribute"/> is used to indicate that the Teradata Database column can be <strong>Null</strong>.
             <code>
              public class ProductAdvertisement
              {
                  public TdDate Date;
            
                  public Int32 ProductId;
            
                  public Int32? QuantityAvailable;
             
                  public TdPeriodTimestampWithTimeZone advertisePeriod
            
                  public String adPlacement;
              }
             
              internal class ProductAdvertisementWriter
              {
              
                  public static void Write()
                  {
                      // Setup the advertisement
                      ProductAdvertisement x = new ProductAdvertisement();
              
                      x.Date = new TdDate(DateTime.Today);
                      x.ProductId = 100;
                      x.QuantityAvailable = 2000;
             
                      // Advertisement will last for 14 days, 23 hours, 59 minutes, 59 seconds from today
                      x.AdvertisePeriod = 
                             new TdPeriodTimestampWithTimeZone(
                                 new TdTimestampWithTimeZone(DateTime.Today, new TimeSpan(8, 0, 0)), 
                                 new TdTimestampWithTimeZone((DateTime.Today + new TimeSpan(14, 23, 59, 59)), new TimeSpan(8, 0, 0));
                      x.adPlacement = "The Newspaper";
            
                      // Write out today's orders to the file.
                      //
                      // Open the file.
                      XmlWriterSettings settings = new XmlWriterSettings();
                      settings.Indent = true;
                      XmlWriter writer = XmlWriter.Create(@"C:\Temp\ProductAdvertisements.XML", settings);
                      writer.WriteStartElement("ProductAdvertisements");
                
                      // Write out the schema.
                      XmlSchemas schemas = new XmlSchemas();
                      XmlSchemaExporter schExporter = new XmlSchemaExporter(schemas);
                      schExporter.ExportTypeMapping(new XmlReflectionImporter().ImportTypeMapping(typeof(ProductAdvertisement)));
                      schemas[0].Write(writer);
            
                      // Write out the orders.
                      XmlSerializer xml = new XmlSerializer(typeof(ProductAdvertisement));
                      xml.Serialize(writer, x);
              
                      // Close the document.
                      writer.WriteEndDocument();
                      writer.Close();
                  }
              }
             
             /* Output is:
             
             <TodayOrders>
               <xs:schema elementFormDefault="qualified" xmlns:xs="http://www.w3.org/2001/XMLSchema">
                 <xs:element name="Order" nillable="true" type="Order"/>
                 <xs:complexType name="Order">
                   <xs:sequence>
                     <xs:element minOccurs="1" maxOccurs="1" name="Date" type="xs:date"/>
                     <xs:element minOccurs="1" maxOccurs="1" name="ProductId" type="xs:int"/>
                     <xs:element minOccurs="1" maxOccurs="1" name="QuantityAvailable" type="xs:int"/>
                     <xs:element minOccurs="1" maxOccurs="1" name="AdvertisePeriod" type="Teradata.Client.Provider.TdPeriodTimestampWithTimeZone"/>
                     <xs:element minOccurs="1" maxOccurs="1" name="AdPlacement" nillable="true" type="xs:string"/>
                   </xs:sequence>
                 </xs:complexType>
                 <xs:complexType name="Teradata.Client.Provider.TdPeriodTimestampWithTimeZone">
                    <xs:sequence>
                     <xs:element name="BeginBound" type="xs:dateTime"/>
                     <xs:element name="EndBound" type="xs:dateTime"/>
                    </xs:sequence>
                  </xs:complexType>
               </xs:schema>
               <Order xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xmlns:xsd="http://www.w3.org/2001/XMLSchema">
                 <Date>2007-02-01</Date>
                 <ProductId>100</ProductId>
                 <QuantityAvailable>2000</QuantityAvailable>
                 <AdvertisePeriod>
                     <BeginBound>2007-02-01 12:00:00+08:00</BeginBound>
                     <EndBound>2007-02-08 08:00:00+08:00</EndBound>
                 </AdvertisePeriod>
                 <AdPlacement>The Newspaper</AdPlacement>
               </Order>
             </TodayOrders>
             
             */
             </code>
             </example>        
        </member>
        <member name="M:Teradata.Client.Provider.TdPeriodTimestampWithTimeZone.IntervalTimeSpan">
            <summary>
            Gets the span of time in the period.
            </summary>
            <returns>The TimeSpan value that contains the span of time starting from the beginning bound to, 
            but not including, the ending bound.</returns>
            <remarks>
            <para>The TimeSpan that is returned represents the number of days, hours, minutes, seconds
            and microseconds of the duration.</para>
            </remarks>
        </member>
        <member name="M:Teradata.Client.Provider.TdPeriodTimestampWithTimeZone.IntervalDayToSecond">
            <summary>
               Calculates the span of time between the starting and ending bounds and 
               returns the result in a <strong>TdIntervalDayToSecond</strong> structure.  
            </summary>
            <returns>
               The <strong>TdIntervalDayToSecond</strong> value that contains the difference in hours,
               minutes, seconds and microseconds between the period ending bound and the 
               period starting bound.
            </returns>&gt;
            <exception cref="T:Teradata.Client.Provider.TdException">This instance of <strong>TdPeriodTimestampWithTimeZone</strong> is null.</exception>
            <exception cref="T:System.OverflowException">The period exceeds the <see cref="F:Teradata.Client.Provider.TdIntervalDayToSecond.MinValue"/> or <see cref="F:Teradata.Client.Provider.TdIntervalDayToSecond.MaxValue"/>.</exception>
            <remarks>
            <para>
               The difference between the ending bound and the starting bound is calculated.  The number
               of hours, minutes, seconds and microseconds are calculated and returned as a 
               <strong>TdIntervalDayToSecond</strong>.
            </para>
            </remarks>
        </member>
        <member name="M:Teradata.Client.Provider.TdPeriodTimestampWithTimeZone.IntervalYearToMonth">
            <summary>
               Calculates the span of time between the starting and ending bounds and 
               returns the result in a <strong>TdIntervalYearToMonth</strong> structure.  
            </summary>
            <returns>
               The <strong>TdIntervalYearToMonth</strong> value that contains the difference in years 
               and months between the period ending bound and the period starting bound.
            </returns>&gt;
            <exception cref="T:Teradata.Client.Provider.TdException">This instance of <strong>TdPeriodTimestampWithTimeZone</strong> is null.</exception>
            <remarks>
            <para>
               The difference between the ending bound and the starting bound are calculated.  Only the
               years and months are used in the calculation.
            </para>
            <para>
               The <strong>TdIntervalYearToMonth</strong> supports only years and months.  The days 
               are discarded during the difference calculation.
            </para>
            </remarks>
        </member>
        <member name="M:Teradata.Client.Provider.TdPeriodTimestampWithTimeZone.LeftDiff(Teradata.Client.Provider.TdPeriodTimestampWithTimeZone,Teradata.Client.Provider.TdPeriodTimestampWithTimeZone)">
            <summary>
            The period whose beginning and ending bounds are defined as the beginning bound of the 
            <paramref name="left"/> operand and the beginning bound of the <paramref name="right"/> 
            operand when the operands overlap.
            </summary>
            <param name="left">The left TdPeriodTimestampWithTimeZone operand.</param>
            <param name="right">The right TdPeriodTimestampWithTimeZone operand.</param>
            <returns>A TdPeriodTimestampWithTimeZone is returned that includes the portion of the left operand that 
            exists before the beginning of the right operand when the operands overlap.</returns>
            <remarks>
            <para>It is required that the UTC Offset of both the <paramref name="left"/> and <paramref name="right"/>
            operand be the same.</para>
            
            <para>A <see cref="F:Teradata.Client.Provider.TdPeriodTimestampWithTimeZone.Null"/> is returned under the following scenarios:</para>
            
            <list type="bullet">
            <item>The left and right operands do not overlap.</item>
            <item>The beginning bound of the left operand is less than the beginning 
            bound of the right operand.</item>
            <item>Either the left or right operand is null.</item>
            </list>
            
            <para>In the following examples the left and right operand are defined as
            <strong>(bL, eL)</strong> and <strong>(bR, eR)</strong>, respectively.</para>
            
            <list type="table">
            <listheader>
            <term>Example</term>
            <description>Comments</description>
            </listheader>
            <item>
            <term>
            <pre>
            |-------|------|------|
            bL      bR     eL     eR
            |=======|
            </pre>
            </term>
            <description>Ldiff = (bL, bR)</description>
            </item>
            <item>
            <term>
            <pre>
            |------|------|-----|
            bL     bR     eR    eL
            |======|
            </pre>
            </term>
            <description>Ldiff = (bL, bR)</description>
            </item>
            <item>
            <term>
            <pre>
            |-----|-------|-----|
            bL    eL      bR    eR
            </pre>
            </term>
            <description><para>Ldiff = TdPeriodTimestampWithTimeZone.Null</para>
            <para>The left and right operands do not overlap.</para>
            </description>
            </item>
            <item>
            <term>
            <pre>
            |------|-----|------|
            bR     bL    eR     eL
            </pre>
            </term>
            <description><para>Ldiff = TdPeriodTimestampWithTimeZone.Null</para>
            <para>The beginning bound of the right operand is greater than the beginning bound of the left.</para>
            </description>
            </item>
            <item>
            <term>
            <pre>
            |--------|-------|
            bL     eL bR     eR
            </pre>
            </term>
            <description><para>Ldiff = TdPeriodTimestampWithTimeZone.Null</para>
            <para>The left and right operands do not overlap.</para>
            </description>
            </item>
            <item>
            <pre>
              |---------|--------|
            bL bR       eR       eL
            </pre>
            <term>
            </term>
            <description><para>Ldiff = TdPeriodTimestampWithTimeZone.Null</para>
            <para>The beginning bounds of both operands are equal.  A period cannot be
            created whose beginning and ending bounds are equal.</para>
            </description>
            </item>
            </list>
            </remarks>
        </member>
        <member name="M:Teradata.Client.Provider.TdPeriodTimestampWithTimeZone.RightDiff(Teradata.Client.Provider.TdPeriodTimestampWithTimeZone,Teradata.Client.Provider.TdPeriodTimestampWithTimeZone)">
             <summary>
             The period that contains the portion from the ending bound of the <paramref name="left"/> operand to
             the ending bound of the <paramref name="right"/> when the operands overlap.
             </summary>
             <param name="left">The left TdPeriodTimestampWithTimeZone operand.</param>
             <param name="right">The right TdPeriodTimestampWithTimeZone operand.</param>
             <returns>A TdPeriodTimestampWithTimeZone is returned that contains the period that begins from the 
             end of the left operand to the end of the right when the operands overlap.</returns>
             <remarks>
             <para>It is required that the UTC Offset of both the <paramref name="left"/> and <paramref name="right"/>
             operand be the same.</para>
            
             <para>A <see cref="F:Teradata.Client.Provider.TdPeriodTimestampWithTimeZone.Null"/> is returned under the following scenarios:</para>
             
             <list type="bullet">
             <item>The left and right operands do not overlap.</item>
             <item>The ending bound of the left operand is greater or equal to the ending bound of the right.</item>
             <item>Either the left or right operand is null.</item>
             </list>
             
             <para>In the following examples the left and right operands are defined as
             <strong>(bL, eL)</strong> and <strong>(bR, eR)</strong>, respectively.</para>
             
             <list type="table">
             <listheader>
             <term>Example</term>
             <description>Comments</description>
             </listheader>
             <item>
             <term>
             <pre>
             |-------|-----|-----|
             bL      bR    eL    eR
                           |=====|
             </pre>
             </term>
             <description>Rdiff = (eL, eR)</description>
             </item>
             <item>
             <term>
             <pre>
             |-------|------|-----|
             bR      bL     eL    eR
                            |=====|
             </pre>
             </term>
             <description>Rdiff = (eL, eR)</description>
             </item>
             <item>
             <term>
             <pre>
             |------|------|------|
             bL     bR     eR     eL
             </pre>
             </term>
             <description><para>Rdiff = null</para>
             <para>The left operand's ending bound is greater than the ending bound of the right operand.</para>
             </description>
             </item>
             <item>
             <term>
             <pre>
             |------|-----|-----|
             bL     eL    bR    eR
             </pre>
             </term>
             <description><para>Rdiff = null</para>
             <para>The left and right operands do not overlap.</para>
             </description>
             </item>
             <item>
             <term>
             <pre>
             |------|-----|-----|
             bR     eR    bL    eL
             </pre>
             </term>
             <description><para>Rdiff = null</para>
             <para>The left and right operands do not overlap.</para>
             </description>
             </item>
             <item>
             <term>
             <pre>
             |-------|-------|
             bL      bR    eL eR
             </pre>
             </term>
             <description><para>Rdiff = null</para>
             <para>The ending bounds are equal.  In other words, a period cannot be defined
             whose starting and ending bounds are equal.</para>
             </description>
             </item>
             </list>
             </remarks>
        </member>
        <member name="M:Teradata.Client.Provider.TdPeriodTimestampWithTimeZone.Normalize(Teradata.Client.Provider.TdPeriodTimestampWithTimeZone,Teradata.Client.Provider.TdPeriodTimestampWithTimeZone)">
            <summary>
            A TdPeriodTimestampWithTimeZone that contains a period that encompasses both periods of the
            left and right operands.  The beginning bound is defined as the minimum of
            left and right beginning bounds, and the ending bound is defined as the 
            maximum of the left and right ending bounds.  The operands must either meet
            or overlap.
            </summary>
            <param name="left">The left TdPeriodTimestampWithTimeZone operand.</param>
            <param name="right">The right TdPeriodTimestampWithTimeZone operand.</param>
            <returns>A TdPeriodTimestampWithTimeZone is returned whose period includes both operands.</returns>
            <remarks>
            <para>It is required that the UTC Offset of both the <paramref name="left"/> and <paramref name="right"/>
            operand be the same.</para>
            
            <para>A <see cref="F:Teradata.Client.Provider.TdPeriodTimestampWithTimeZone.Null"/> is returned under the following scenarios:</para>
            
            <list>
            <item>The left and right operands do not overlap.</item>
            <item>Either the left or right operand is null.</item>
            </list>
            
            <para>In the following examples the left and right operands are defined as
            <strong>(bL, eL)</strong> and <strong>(bR, eR)</strong>, respectively.</para>
            
            <list type="table">
            <listheader>
            <term>Example</term>
            <description>Comments</description>
            </listheader>
            <item>
            <term>
            <pre>
            |--------|------|------|
            bL       bR     eL     eR
            |======================|
            </pre>
            </term>
            <description>Normalize = (bL, eR)</description>
            </item>
            <item>
            <term>
            <pre>
            |-------|------|------|
            bR      bL     eR     eL
            |=====================|
            </pre>
            </term>
            <description>Normalize = (bR, eL)</description>
            </item>
            <item>
            <term>
            <pre>
            |-------|------|-------|
            bL      bR     eR      eL
            |======================|
            </pre>
            </term>
            <description>Normalize = (bL, eL)</description>
            </item>
            <item>
            <term>
            <pre>
            |--------|------|------|
            bR       bL     eL      eR
            |======================|
            </pre>
            </term>
            <description>Normalize = (bR, eR)</description>
            </item>
            <item>
            <term>
            <pre>
            |---------|---------|
            bL      eL bR       eR
            |===================|
            </pre>
            </term>
            <description> Normalize = (bL, eR)</description>
            </item>
            <item>
            <term>
            <pre>
            |-------------------|
            bL                  eL
            eR                  eR
            |===================|
            </pre>
            </term>
            <description><para>Normalize = (bL, eL)</para>
            <para>The periods are equal.  In this scenario, the period specified as the left
            parameter will be returned.  It will be adjusted to the maximum scale between the
            left and right parameters.</para>
            </description>
            </item>
            <item>
            <term>
            <pre>
            |-----|-------|------|
            bL    eL      bR     eR
            </pre>
            </term>
            <description><para>Normalize = TdPeriodTimestampWithTimeZone.Null</para>
            <para>The periods do not overlap.</para>
            </description>
            </item>
            </list>
            </remarks>
        </member>
        <member name="M:Teradata.Client.Provider.TdPeriodTimestampWithTimeZone.Precedes(Teradata.Client.Provider.TdPeriodTimestampWithTimeZone)">
            <summary>
            Indicates whether this instance precedes the period value.
            </summary>
            <param name="value">The TdPeriodTimestampWithTimeZone operand.</param>
            <returns>A <c>true</c> is returned when this instance precedes the value,  otherwise 
            a <c>false </c>is returned.</returns>
            <remarks>
            <para>A <c>false</c> will be returned if the <paramref name="value"/> is <see cref="F:Teradata.Client.Provider.TdPeriodTimestampWithTimeZone.Null"/>.</para>
            
            <para>This instance will precede the value if the ending bound of the this instance is
            less than or equal to the starting bound of the value.</para>
            
            <para>It is not required that the UTC Offset of this instance and value
            be the same.  The UTC representation of the bounds will be used to
            determine whether this instance precedes the value.</para>
            
            <para>In the following examples consider the Left operand to be this instance, and the Right as the
            value.  The Left and Right operands are defined as
            <strong>(bL, eL)</strong> and <strong>(bR, eR)</strong>, respectively.</para>
            
            <list type="table">
            <listheader>
            <term>Example</term>
            <description>Comments</description>
            </listheader>
            <item>
            <term>
            <pre>
            |--------|--------|
            bL     eL bR      eR
            </pre>
            </term>
            <description>Precedes = true</description>
            </item>
            <item>
            <term>
            <pre>
            |------|----|------|
            bL     eL   bR     eR
            </pre>
            </term>
            <description>Precedes = true</description>
            </item>
            <item>
            <term>
            <pre>
            |-----|-------|------|
            bL    bR      eL     eR
            </pre>
            </term>
            <description><para>Precedes = false</para>
            <para>There is an intersection between the operands; therfore, the left 
            does not precede the right.</para>
            </description>
            </item>
            <item>
            <term>
            <pre>
            |-------|--------|
            bR    eR bL      eL
            </pre>
            </term>
            <description><para>Precedes = false</para>
            <para>The left operand appears after the right operand.</para>
            </description>
            </item>
            </list>
            </remarks>
            <overloads>
            Determines whether a period or TdTimestampWithTimeZone precedes this instance of TdPeriodTimestampWithTimeZone.
            </overloads>
        </member>
        <member name="M:Teradata.Client.Provider.TdPeriodTimestampWithTimeZone.Precedes(Teradata.Client.Provider.TdTimestampWithTimeZone)">
            <summary>
            Indicates that this instance precedes the TdTimestampWithTimeZone value.
            </summary>
            <param name="value">The TdTimestampWithTimeZone value.</param>
            <returns>A <c>true</c> is returned when this instance precedes the value, otherwise a 
            <c>false</c> is returned.</returns>
            <remarks>
            <para>A <c>false</c> will be returned if <paramref name="value"/> is <see cref="F:Teradata.Client.Provider.TdTimestampWithTimeZone.Null"/>.</para>
            
            <para>This instance will precede the value if the ending bound of this instance
            is less than or equal to the value.</para>
            
            <para>It is not required that the UTC Offset of this instance and the value
            be the same.  The UTC representation of the bounds of this instance and the value will be used to determine
            whether this instance precedes the value.</para>
            
            <para>The following are examples.</para>
            <list type="table">
            <listheader>
            <term>Result</term>
            <description>Precedes</description>
            </listheader>
            <item>
            <term>true</term>
            <description><para>Period: (2006-04-01 10:20:11+08:00, 2006-04-15 01:21:43+08:00)</para>
                         <para>Timestamp: 2006-04-15 01:21:43+08:00</para></description>
            </item>
            <item>
            <term>true</term>
            <description><para>Period: (2006-05-31 04:21:00+08:00, 2006-06-05 07:21:43+08:00)</para>
                         <para>Timestamp: 2006-10-01 01:00:00+09:00</para></description>
            </item>
            <item>
            <term>false</term>
            <description><para>Period: (2008-12-15 21:23:41+00:00, 2008-12-31 11:21:45+00:00)</para>
                         <para>Timestamp: 2008-12-20 22:21:00+00:00</para></description>
            </item>
            <item>
            <term>false</term>
            <description><para>Period: (2008-02-01 12:30:00-01:00, 2008-03-01 21:32:21-01:00)</para>
                         <para>Timestamp: 2008-02-01 12:30:00-01:01</para></description>
            </item>
            <item>
            <term>false</term>
            <description><para>Period: (2008-09-05 13:21:54, 2008-09-15 12:40:11)</para>
                         <para>Timestamp: 2008-01-17 00:00:00</para></description>
            </item>
            </list>
            </remarks>
        </member>
        <member name="M:Teradata.Client.Provider.TdPeriodTimestampWithTimeZone.Succeeds(Teradata.Client.Provider.TdPeriodTimestampWithTimeZone)">
            <summary>
            Indicates whether this instance succeeds the period value.
            </summary>
            <param name="value">The TdPeriodTimestampWithTimeZone operand.</param>
            <returns>A <c>true</c> is returned when this instance succeeds the value,  otherwise 
            a <c>false </c>is returned.</returns>
            <remarks>
            <para>A <c>false</c> will be returned if the <paramref name="value"/> is <see cref="F:Teradata.Client.Provider.TdPeriodTimestampWithTimeZone.Null"/>.</para>
            
            <para>This instance will succeed the value if the beginning bound of this instance is
            greater than or equal to the ending bound of the value.</para>
            
            <para>It is not required that the UTC Offset of this instance and value
            be the same.  The UTC representation of the bounds for both will
            be used to determine whether this instance succeeds the value.</para>
            
            <para>In the following examples consider the Left operand to be this instance, and the Right as
            the value.  The Left and Right operands are defined as
            <strong>(bL, eL)</strong> and <strong>(bR, eR)</strong>, respectively.</para>
            
            <list type="table">
            <listheader>
            <term>Example</term>
            <description>Comments</description>
            </listheader>
            <item>
            <term>
            <pre>
            |--------|--------|
            bL     eL bR      eR
            </pre>
            </term>
            <description><para>Succeeds = false</para>
            <para>The left operand appears before the right operand.</para>
            </description>
            </item>
            <item>
            <term>
            <pre>
            |------|------|-------|
            bL     eL     bR      eR
            </pre>
            </term>
            <description><para>Succeeds = false</para>
            <para>The left operand appears before the right operand.</para>
            </description>
            </item>
            <item>
            <term>
            <pre>
            |-----|-----|------|
            bL    bR    eL     eR
            </pre>
            </term>
            <description><para>Succeeds = false</para>
            <para>There is an intersection between the operands; therfore, the left 
            does not succeed the right.</para>
            </description>
            </item>
            <item>
            <term>
            <pre>
            |-------|--------|
            bR    eR bL      eL
            </pre>
            </term>
            <description>Succeeds = true</description>
            </item>
            <item>
            <term>
            <pre>
            |-------|--|------|
            bR      eR bL    eL
            </pre>
            </term>
            <description>Succeeds = true</description>
            </item>
            </list>
            </remarks>
            <overloads>
            Determines whether a period or TdTimestampWithTimeZone succeeds this instance of TdPeriodTimestampWithTimeZone.
            </overloads>
        </member>
        <member name="M:Teradata.Client.Provider.TdPeriodTimestampWithTimeZone.Succeeds(Teradata.Client.Provider.TdTimestampWithTimeZone)">
            <summary>
            Indicates that this instance succeeds the TdTimestampWithTimeZone value.
            </summary>
            <param name="value">The TdTimestampWithTimeZone value.</param>
            <returns>A <c>true</c> is returned when this instance succeeds the value, otherwise a 
            <c>false</c> is returned.</returns>
            <remarks>
            <para>A <c>false</c> will be returned if the <paramref name="value"/> is <see cref="F:Teradata.Client.Provider.TdTimestampWithTimeZone.Null"/>.</para>
            
            <para>This instance will succeed the value if the beginning bound of this instance
            is greater than or equal to the value.</para>
            
            <para>It is not required that the UTC Offset of this instance and value
            be the same.  The UTC representation of the bounds of this instance and the value will be used to determine
            whether this instance succeeds the value.</para>
            
            <para>The following are examples.</para>
            <list type="table">
            <listheader>
            <term>Result</term>
            <description>Succeeds</description>
            </listheader>
            <item>
            <term>false</term>
            <description>(2006-04-01 10:20:11+08:00, 2006-04-15 01:21:43+08:00)<br/> 2006-04-15 01:21:43+08:00</description>
            </item>
            <item>
            <term>false</term>
            <description>(2006-05-31 04:21:00+08:00, 2006-06-05 07:21:43+08:00)<br/> 2006-10-01 01:00:00+09:00</description>
            </item>
            <item>
            <term>true</term>
            <description>(2008-12-15 21:23:41+00:00, 2008-12-31 11:21:45+00:00)<br/> 2008-12-20 22:21:00+00:00</description>
            </item>
            <item>
            <term>true</term>
            <description>(2008-02-01 12:30:00-01:00, 2008-03-01 21:32:21-01:00)<br/> 2008-02-01 14:30:00+01:01</description>
            </item>
            <item>
            <term>false</term>
            <description>(2008-09-05 13:21:54+02:00, 2008-09-15 12:40:11+02:00)<br/> 2008-09-10 00:00:00+03:00</description>
            </item>
            </list>
            </remarks>
        </member>
        <member name="M:Teradata.Client.Provider.TdPeriodTimestampWithTimeZone.Meets(Teradata.Client.Provider.TdPeriodTimestampWithTimeZone)">
            <summary>
            Indicates whether this instance meets the period value.  
            </summary>
            <param name="value">The TdPeriodTimestampWithTimeZone operand.</param>
            <returns>A <c>true</c> is returned if this instance meets the value, otherwise a 
            <c>false</c> is returned.</returns>
            <remarks>
            <para>A <c>false</c> will be returned if the <paramref name="value"/> operand is 
            <see cref="F:Teradata.Client.Provider.TdPeriodTimestampWithTimeZone.Null"/>.</para>
            
            <para>Two periods meet if the beginning bound of one period equals the ending bound of the other.</para>
            
            <para>It is not required that the UTC Offset of the <paramref name="value"/> and this instance
            be the same.  The UTC representation of the bounds of both the value and this instance will be 
            used to determine whether they meet.</para>
            
            <para>In the following examples consider this instance to be the Left operand, and the right operand
            as the value.  The Left and Right operands are defined as
            <strong>(bL, eL)</strong> and <strong>(bR, eR)</strong>, respectively.</para>
            
            <list type="table">
            <listheader>
            <term>Example</term>
            <description>Comments</description>
            </listheader>
            <item>
            <term>
            <pre>
            |---------|------------|
            bR      eR bL          eL
            </pre>
            </term>
            <description><para>Meets = true</para>
            <para>The ending bound of the right operand equals the beginning bound of the left operand.</para>
            </description>
            </item>
            <item>
            <term>
            <pre>
            |---------|--------|
            bL      eL bR      eR
            </pre>
            </term>
            <description><para>Meets = true</para>
            <para>The ending bound of the left operand equals the beginning bound of the right operand.</para>
            </description>
            </item>
            <item>
            <term>
            <pre>
              |------------|
            bL bR        eL eR
            </pre>
            </term>
            <description><para>Meets = false</para>
            <para>The periods are equal.</para>
            </description>
            </item>
            <item>
            <term>
            <pre>
              |--------|--------|
            bL bR      eL       eR
            </pre>
            </term>
            <description><para>Meets = false</para>
            <para>The period (bL, eL) is contained within (bR, eR).</para>
            </description>
            </item>
            <item>
            <term>
            <pre>
            |-------|----|-------|
            bL      eL   bR      eR
            </pre>
            </term>
            <description>Meets = false</description>
            </item>
            </list>
            </remarks>
            <overloads>
            Determines whether a period or TdTimestampWithTimeZone meets this instance of TdPeriodTimestampWithTimeZone.
            </overloads>
        </member>
        <member name="M:Teradata.Client.Provider.TdPeriodTimestampWithTimeZone.Meets(Teradata.Client.Provider.TdTimestampWithTimeZone)">
            <summary>
            Indicates whether this instance meets the TdTimestampWithTimeZone value.
            </summary>
            <param name="value">The TdTimestampWithTimeZone operand. </param>
            <returns>A <c>true</c> is returned if this instance meets the value, otherwise a 
            <c>false</c> is returned.</returns>
            <remarks>
            <para>A <c>false</c> will be returned if the <paramref name="value"/> is <see cref="F:Teradata.Client.Provider.TdTimestampWithTimeZone.Null"/>.</para>
            
            <para>A period and TdTimestampWithTimeZone value <strong>meet</strong> if the value is not included in the period but
            is one time granule less than the starting bound or is the same as the ending bound. </para>
            
            <para>It is not required that the UTC Offset of the value and this instance
            be the same.  The UTC representation of the bounds of value and this instance will be 
            used to determine whether they meet.</para>
            
            <para>The following are examples:</para>
            
            <list type="table">
            <listheader>
            <term>Result</term>
            <description>Meets</description>
            </listheader>
            <item>
            <term>true</term>
            <description><para>Period: (2007-11-01 10:10:10-03:00, 2007-11-15 12:32:01-03:00)</para> 
                         <para>Timestamp: 2007-11-15 12:32:01-03:00</para></description>
            </item>
            <item>
            <term>true</term>
            <description><para>Period: (2008-01-01 00:00:00-04:00, 2008-02-01 03:00:01-04:00)</para>  
                         <para>Timestamp: 2007-12-31 23:00:59-04:59</para></description>
            </item>
            <item>
            <term>true</term>
            <description><para>Period: (2008-01-01 01:10:11-10:00, 2008-02-01 21:32:51-10:00)</para>
                         <para>Timestamp: 2008-01-01 06:10:10-05:0</para>0</description>
            </item>
            <term>
            <item>false</item>
            <description><para>Period: (2008-03-10 23:01:22+03:00, 2008-03-31 04:22:14+03:00)</para> 
                         <para>Timestamp: 2008-03-31 04:20:00+04:00</para></description>
            </term>
            </list>
            </remarks>
        </member>
        <member name="M:Teradata.Client.Provider.TdPeriodTimestampWithTimeZone.Intersect(Teradata.Client.Provider.TdPeriodTimestampWithTimeZone,Teradata.Client.Provider.TdPeriodTimestampWithTimeZone)">
            <summary>
            The intersection between the <paramref name="left"/> and <paramref name="right"/>
            operands is calculated.
            </summary>
            
            <param name="left">The left TdPeriodTimestampWithTimeZone operand.</param>
            <param name="right">The right TdPeriodTimestampWithTimeZone operand.</param>
            
            <returns>A period that is the intersection between the left and right operands 
            is returned.</returns>
            
            <remarks>
            <para>A TdPeriodTimestampWithTimeZone.Null is returned under the following scenarios:</para>
            <list type="bullet">
            <item>Either the left or right operand is TdPeriodTimestampWithTimeZone.Null.</item>
            <item>The left and right operands do not intersect.</item>
            <item>The ending bound of one operand is the same as the beginning bound of the other operand.</item>
            </list>
            
            <para>It is required that the UTC Offset for both the left and right operands be the same.</para>
            
            <para>In the following examples <strong>(bL, eL)</strong> is the left operand and 
            <strong>(bR, eR)</strong> is the right operand.</para>
            
            <list type="table">
            <listheader>
            <term>Example</term>
            <description>Comments</description>
            </listheader>
            <item>
            <term>
            <pre>
            |-----|-------|------|
            bL    bR      eL     eR
                  |=========|
            </pre>
            </term>
            <description>Intersection = (bR, eL)</description>
            </item>
            <item>
            <term>
            <pre>
            |------|-------|--------|
            bL     bR      eR       eL
                   |=======|  
            </pre>
            </term>
            <description>Intersection = (bR, eR)</description>
            </item>
            <item>
            <term>
            <pre>
            |------------|-----------|
            bL         eL bR         eR
            </pre>
            </term>
            <description><para>Intersection = null</para>
            <para>The ending bound of the first operand is the same as the 
            starting bound of the second operand, eL = bR.</para>
            </description>
            </item>
            <item>
            <term>
            <pre>
            |-----------|---|--------|
            bL          eL  bR       eR
            </pre>
            </term>
            <description><para>Intersection = null</para>
            <para>The periods do not intersect.</para>
            </description>
            </item>
            </list>
            </remarks>
        </member>
        <member name="M:Teradata.Client.Provider.TdPeriodTimestampWithTimeZone.Contains(Teradata.Client.Provider.TdTimestampWithTimeZone)">
            <summary>
            Indicates whether the TdTimestamp <paramref name="value"/> is contained in this
            instance of TdPeriodTimestampWithTimeZone.
            </summary>
            <param name="value">The TdTimestamp that is to be found in the period.</param>
            <returns>A boolean value is returned that indicates whether the value
            is contained in the period.</returns>
            <remarks>
            A <c>false</c> is returned if value is <strong>Null</strong>.
            
            A <c>true</c> is returned if the value is contained in the period, otherwise 
            a <c>false</c> is returned.
            
            <para>It is not required that the UTC Offset of this instance of period and the 
            <paramref name="value"/> be the same.  The UTC representation of the bounds of the
            period and value will be used to determine whether the value is contained in the period.</para>
            </remarks>
        </member>
        <member name="M:Teradata.Client.Provider.TdPeriodTimestampWithTimeZone.ToUtcPeriodTimestamp">
            <summary>
            This instance of TdPeriodTimestampWithTimeZone is converted into a TdPeriodTimestamp.
            </summary>
            <returns>A TdPeriodTimestamp is returned.</returns>
            <remarks>
            <para>
            When the TdPeriodTimestampWithTimeZone is converted into a TdPeriodTimestamp the bounds
            of the TdPeriodTimestampWithTimeZone is converted into their UTC representation.  For example, when the
            period
            </para>
            
                <pre>    (2008-07-04 10:32:12.111-08:00, 2008-10-04 12:00:00.321-08:00)</pre>
            
            <para>
            is converted into a TdPeriodTimestamp the result is
            </para>
            
                <pre>    (2008-07-04 18:32:12.111, 2008-10-04 20:00:00.321)</pre>
            </remarks>
        </member>
        <member name="P:Teradata.Client.Provider.TdPeriodTimestampWithTimeZone.ObjectId">
            <summary>
            Gets the Instance Object Identifier.
            </summary>
        </member>
        <member name="P:Teradata.Client.Provider.TdPeriodTimestampWithTimeZone.IsNull">
            <summary>
            Gets the boolean value that indicates whether this TdPeriodTimestampWithTimeZone instance is <see cref="F:Teradata.Client.Provider.TdPeriodTimestampWithTimeZone.Null"/>. 
            </summary>
            <value>
            <c>true</c> if this TdPeriodTimestampWithTimeZone is Null; <c>false</c> otherwise.
            </value>
        </member>
        <member name="P:Teradata.Client.Provider.TdPeriodTimestampWithTimeZone.Begin">
            <summary>
            Gets the beginning bound of the period.
            </summary>
            <value>The TdTimestampWithTimeZone representation of the beginning bound.</value>
            <exception cref="T:Teradata.Client.Provider.TdException">Period is null.</exception>
            <remarks>
            The beginning bound is <strong>inclusive</strong> to the Period.  For more information
            about periods refer to <a href="PeriodTypeOverview.htm">Period Types Overview</a>.
            </remarks>
        </member>
        <member name="P:Teradata.Client.Provider.TdPeriodTimestampWithTimeZone.End">
            <summary>
            Gets the ending bound of the period.
            </summary>
            <value>The TdTimestampWithTimeZone representation of the ending bound.</value>
            <exception cref="T:Teradata.Client.Provider.TdException">Period is null.</exception>
            <remarks>
            The ending bound is <strong>exclusive</strong> to the period.  For more information
            about periods refer to <a href="PeriodTypeOverview.htm">Period Types Overview</a>
            </remarks>
            <seealso cref="!:PeriodTypeOverview.html">Period Type Overview</seealso>
        </member>
        <member name="P:Teradata.Client.Provider.TdPeriodTimestampWithTimeZone.Last">
            <summary>
            Gets the last time element of the period.  
            </summary>
            <value>The TdTimestampWithTimeZone value that is equivalent to
            <see cref="P:Teradata.Client.Provider.TdPeriodTimestampWithTimeZone.End"/> - 10^-<see cref="P:Teradata.Client.Provider.TdPeriodTimestampWithTimeZone.Scale"/>.</value>
            <exception cref="T:Teradata.Client.Provider.TdException">Period is null.</exception>
            <remarks>The Time Zone component contained in the returned value will
            be the same as that returned from the End property.</remarks>
        </member>
        <member name="P:Teradata.Client.Provider.TdPeriodTimestampWithTimeZone.Scale">
            <summary>
            Gets the scale of this instance of TdPeriodTimestampWithTimeZone.
            </summary>
            <value>An Int32 that represents the Scale.</value>
            <exception cref="T:Teradata.Client.Provider.TdException">Period is null.</exception>
            <remarks>
            The Scale refers to the scale of both the beginning and ending
            bounds.
            </remarks>
        </member>
        <member name="P:Teradata.Client.Provider.TdPeriodTimestampWithTimeZone.Value">
            <summary>
            Gets the .Net type representation (String) of the TdPeriodTimestampWithTimeZone value.
            </summary>
            <exception cref="T:Teradata.Client.Provider.TdException">Period is null.</exception>
        </member>
        <member name="T:Teradata.Client.Provider.TdPeriodTimeWithTimeZone">
            <summary>
            TdPeriodTimeWithTimeZone is a .Net Data Provider for Teradata specific type that represents
            a duration of time that is bound by beginning and ending times that have a time zone.  
            </summary>
            
            <remarks>
            <para>The Teradata Database introduced the Period type in release 13.00.00.00.  Unfortunately,
            the .Net Framework does not contain a system type that corresponds to the Teradata
            <strong>Period(TimeWithTimeZone)</strong> type.  Therefore, the Teradata provider 
            exposes the TdPeriodTimeWithTimeZone type which enables an application to work with 
            data of type Period(TimeWithTimeZone).</para>
            
            <para>Similar to <see cref="T:Teradata.Client.Provider.TdTimeWithTimeZone"/>, TdPeriodTimeWithTimeZone supports 
            a <strong>scale</strong> for the sub-seconds and a UTC Offset.  The scale ranges from 0 to 6 and 
            <strong>must be the same</strong> for both the beginning and ending bounds.  </para>
            
            <para>A period is an anchored duration.  It represents a set of contiguous time
            granules within that duration.  In the case of TdPeriodTimeWithTimeZone, the granularity 
            of the time can range from 10^-6 (.000006 second) to 10^0 (1 second).  The representation of 
            a period is both inclusive and exclusive.  It is <strong>inclusive</strong> in that 
            the duration of the period begins from the beginning bound up to, but not including 
            (<strong>excluding</strong>), the ending bound.  For example suppose a 
            TdPeriodTime contains the period of:    </para>
            
            <pre>    "(13:12:21.05+08:00, 20:43:27.98+08:00)"</pre>
            
            <para>The duration will include "13:12:21.05+08:00" and not "20:43:27.98+08:00".  
            It has a duration of 07:31:06.93 (7 hours, 31 minutes, 6 seconds, 980000 microseconds).  
            The time element "15:21:43+08:00" is also included in the period.  </para>
            
            <para>The components of a period consists of the following:</para>
            
            <para>
            <list type="bullet">
                <item><strong>Time Granule</strong> This is the minimum representation
                of time within a period.  In the above example, the time granule is 10^-2 (.01 second).</item>
            
                <item><strong>Time Element</strong> A Time value that is contained
                within the period.  The time element in TdPeriodTimeWithTimeZone is 
                specified using a TdTimeWithTimeZone.</item>
            
                <item><strong>Beginning Bound</strong> The lower bound or the start 
                of the period.  Within a period, this value represents the "lowest" time
                element.  The beginning bound must be <strong>less than</strong> the ending bound.</item>
            
                <item><strong>Ending Bound</strong> The upper bound or the ending
                of the period.  The Ending Bound is not included in the period.  Therefore,
                No Time Element in the period can be <strong>greater or equal</strong> to the 
                Ending Bound.</item>
            
                <item><strong>Duration</strong> The number of granules in a period.
                It is represented as an interval/timespan.</item>
            </list>
            </para>
            
            <para>The UTC Offset of the beginning and ending bounds do not have to be the same.  
            However, the UTC representation of the beginning bound must be less than the 
            UTC representation of the ending bound.</para>
            
            <para>A TdPeriodTimeWithTimeZone can also be specified as an In, Out, or InOut 
            parameter to a Stored Procedure.  The data will be returned to an application using 
            either the <see cref="P:Teradata.Client.Provider.TdParameter.ProviderSpecificValue">TdParameter.ProviderSpecificValue</see>
            or <see cref="P:Teradata.Client.Provider.TdParameter.Value">TdParameter.Value</see> property.  Retrieving the parameter
            using TdParameter.ProviderSpecificValue, will return the data using the Period structure.  
            When TdParameter.Value is used, the data is returned as a <string>String</string> (this is
            the corresponding .Net type).</para>  
            
            <seealso cref="T:Teradata.Client.Provider.TdTime"/>
            </remarks>
            
            <example>
            The following is an example on retrieving a TdPeriodTimeWithTimeZone, modify the period, and then 
            updating the period.
            
            <code>
            Public void PeriodDateExample(TdCommand cmd, String studentId)
            {
               cmd.Parameter.Clear();
            
               cmd.CommandText = "SELECT timePeriod  " +
                               "FROM ClassDetention " +
                               "WHERE StudentId = ?";
            
               cmd.CommandType = CommandType.Text;
            
               // creating the parameter
               cmd.Parameters.Add(null, TdType.Varchar, 9,
                  System.Data.ParameterDirection.Input, true, 0, 0, null,    
                  System.Data.DataRowVersion.Default, studentId);
            
               TdDataReader dr = null;
             
               Int32 i = 0;
            
               TdPeriodTimeWithTimeZone detention;
            
               Try
               {
                  dr = cmd.ExecuteReader();
            
                  If (false == dr.Read())
                  {
            	       return;
                  }
               
                  // Retrieving the Period
                  detention = dr.GetTdPeriodTimeWithTimeZone(0);
               }
               finally
               {
                  if (dr != null)
                  {
                     dr.Close();
                  }
               }
            
               // An additional 1 hour will be added to ending bound.
            
               // Specifying a TimeSpan of 1 hour
               System.TimeSpan extraHours = new TimeSpan(1, 0, 0);
            
               // Getting the ending bound of the period and
               // adding 1 hour to it
               detention = new TdPeriodTimeWithTimeZone(detention.Begin, detention.End + extraHours);    
            
               cmd.Parameters.Clear();
            
               cmd.CommandText = "UPDATE classDetention " +
                                    "SET timePeriod = ? " +
                                    "WHERE StudentId = ?";
            
               cmd.Parameters.Add(null, TdType.PeriodTimeWithTimeZone, 0,
                     System.Data.ParameterDirection.Input, true, 0, 0, null,    
                     System.Data.DataRowVersion.Default, detention);
            
               cmd.Parameters.Add(null, TdType.Varchar, 9,
                     System.Data.ParameterDirection.Input, true, 0, 0, null,    
                     System.Data.DataRowVersion.Default, studentId);
            
               cmd.ExecuteNonQuery();
            }
            
            </code> 
            </example>
            
            <seealso cref="!:PeriodTypeOverview.html">Provider Specific Types:  Period Type Overview</seealso>
        </member>
        <member name="F:Teradata.Client.Provider.TdPeriodTimeWithTimeZone.Null">
            <summary>
            Gets a Null TdPeriodTimeWithTimeZone instance.
            </summary>
            <value>
            Returns a TdPeriodTimeWithTimeZone instance that represents a <strong>Null</strong> value.
            </value>
            <remarks>
            Conceptually it is the constructor for <strong>Null</strong> TdPeriodTimeWithTimeZone instances.
            </remarks>
            <example>
            This example shows how to send a <strong>Null</strong> value to a Teradata database.
            <code>
            TdParameter col1 = new TdParameter();
            col1.TdType = TdType.PeriodTimeWithTimeZone;
            col1.Value = TdPeriodTimeWithTimeZone.Null;
            </code>
            </example>
        </member>
        <member name="F:Teradata.Client.Provider.TdPeriodTimeWithTimeZone.MinValue">
            <summary>
            The minimum value of a period which is 
            "(00:00:00.000000+00:00, 00:00:00.000001+00:00)".
            </summary>
        </member>
        <member name="F:Teradata.Client.Provider.TdPeriodTimeWithTimeZone.MaxValue">
            <summary>
            The maximum value of a period which is
            "(23:59:59.999998+00:00, 23:59:59.999999+00:00)".
            </summary>
        </member>
        <member name="M:Teradata.Client.Provider.TdPeriodTimeWithTimeZone.#ctor(Teradata.Client.Provider.TdTimeWithTimeZone,Teradata.Client.Provider.TdTimeWithTimeZone)">
            <summary>
            A period is created from two TdTimeWithTimeZone structures that represent the lower and upper bounds
            of the duration.
            </summary>
            <exception cref="T:System.ArgumentNullException">Either the begin or end date is null.</exception>
            <exception cref="T:System.ArgumentOutOfRangeException">Ending bound is less than the beginning bound.</exception>
            <param name="beginBound">The starting time of the period.</param>
            <param name="endBound">The ending time of the period.</param>
            <remarks>
            <para>The <see cref="P:Teradata.Client.Provider.TdPeriodTimeWithTimeZone.Scale"/> will be set to the maximum scale between the 
            <paramref name="beginBound"/> and <paramref name="endBound"/> parameters.</para>
            <seealso cref="T:Teradata.Client.Provider.TdTimeWithTimeZone"/>
            </remarks>
        </member>
        <member name="M:Teradata.Client.Provider.TdPeriodTimeWithTimeZone.#ctor(Teradata.Client.Provider.TdTimeWithTimeZone,Teradata.Client.Provider.TdTimeWithTimeZone,System.Byte)">
            <summary>
            A period is created from two TdTimeWithTimeZone structures that represent the lower and upper bounds
            of the duration.
            </summary>
            <exception cref="T:System.ArgumentNullException">Either the begin or end date is null.</exception>
            <exception cref="T:System.ArgumentOutOfRangeException">Ending bound is less than the beginning bound.</exception>
            <param name="beginBound">The starting time of the period.</param>
            <param name="endBound">The ending time of the period.</param>
            <param name="scale">The scale that will be applied to both the beginning and ending bounds.</param>
            <remarks>
            <para>There is a scenario that can occur when the bounds are being 
            adjusted based on the scale parameter.  If the adjustment of the 
            ending bound causes the time to go into the next 24 hours, the period
            will be invalid.  For example, suppose the begin and end parameters are</para>
            
            <pre>    10:21:32.2293+08:00, 23:59:59.99999+08:00</pre>
            
            <para>and a scale is <strong>0</strong>.  When the data has been adjusted
            the bounds of the period will be</para>
            
            <pre>    10:21:32+08:00, 00:00:00+08:00</pre>
            
            <para>This is an invalid period.  In this situation, an ArgumentOutOfRangeException
            will get thrown.</para>
            </remarks>
        </member>
        <member name="M:Teradata.Client.Provider.TdPeriodTimeWithTimeZone.op_Explicit(Teradata.Client.Provider.TdPeriodTimeWithTimeZone)~Teradata.Client.Provider.TdPeriodTime">
            <summary>
            The specified TdPeriodTimeWithTimeZone is converted into a TdPeriodTime.
            </summary>
            <param name="value">The TdPeriodTimeWithTimeZone value that is to be converted into a TdPeriodTime.</param>
            <returns>A TdPeriodTime is returned.</returns>
            <remarks>The UTC time of both the beginning and ending bounds of the <paramref name="value"/> is
            calculated and is returned as a TdPeriodTime.</remarks>
        </member>
        <member name="M:Teradata.Client.Provider.TdPeriodTimeWithTimeZone.GetHashCode">
            <summary>
            Returns the hash code for this instance. 
            </summary>
            <returns>The hash code is returned.</returns>
            <remarks>
            <para>When calculating the hash code of a Period the algorithm that is used is</para>
            <para><see cref="P:Teradata.Client.Provider.TdPeriodTimeWithTimeZone.Begin"/> Exclusive OR (XOR) <see cref="P:Teradata.Client.Provider.TdPeriodTimeWithTimeZone.End"/></para>
            </remarks>
        </member>
        <member name="M:Teradata.Client.Provider.TdPeriodTimeWithTimeZone.Equals(System.Object)">
            <summary>
                Compares this instance against <paramref name="obj"/> to determine whether they are equal.
            </summary>
            <returns><c>true</c> is returned if the two TdPeriodTimeWithTimeZones are equal, <c>false</c> otherwise.</returns>
            <remarks>
                <para>In order for two periods to be equivalent both their beginning and ending bounds must
                      be equivalent.</para>
            
                <para>The boolean that is returned indicates the following conditions:</para>
            
            	<para><c>false</c> will be returned if:</para>
            	<list type="bullet">
            		<item>
                        This instance or <paramref name="obj"/> is <see cref="F:Teradata.Client.Provider.TdPeriodTimeWithTimeZone.Null"/>.
                    </item>
            		<item>
                        This instance is not equal to <paramref name="obj"/>.
                    </item>
            		<item>
            			<paramref name="obj"/> is not of type TdPeriodTimeWithTimeZone or <c>null</c>.
                    </item>
            	</list>
            	<para><c>true</c> will be returned if:</para>
            	<list type="bullet">
            		<item>
                        This instance and <paramref name="obj"/> are <Strong>Null</Strong>.
                    </item>
            		<item>
                        This instance is equal to <paramref name="obj"/>.
                    </item>
            	</list>
            </remarks>
            <example>
                The following code example uses various comparison methods and operators: 
                <code lang="CS">
            TdPeriodTimeWithTimeZone  later = new TdPeriodTimeWithTimeZone(new TdTimeWithTimeZone(20, 8, 31), new TdTimeWithTimeZone(20, 12, 1));
            Object earlier = new TdPeriodTimeWithTimeZone(new TdTimeWithTimeZone(10, 9, 10), new TdTimeWithTimeZone(11, 1, 1));
             
            // The following comparison is equivalent to using
            //    false == TdPeriodTimeWithTimeZone.Equals(later, (TdPeriodTimeWithTimeZone) earlier)
            //    later != (TdPeriodTimeWithTimeZone) earlier
            //    true == TdPeriodTimeWithTimeZone.NotEquals(later, (TdPeriodTimeWithTimeZone) earlier)
            //    
            if (false == later.Equals(earlier))
            {
               Console.WriteLine(“later does not equal earlier”);
            }
                </code>
            </example>
            <overloads>Returns a Boolean indicating whether two instances of TdPeriodTimeWithTimeZone are equal.</overloads>
            <param name="obj">A TdPeriodTimeWithTimeZone that will be compared to this instance of TdPeriodTimeWithTimeZone.</param>
        </member>
        <member name="M:Teradata.Client.Provider.TdPeriodTimeWithTimeZone.Equals(Teradata.Client.Provider.TdPeriodTimeWithTimeZone)">
            <summary>
            Compares this instance and another TdPeriodTimeWithTimeZone to determine whether they are equal. 
            </summary>
            <returns><c>true</c> if the two TdPeriodTimeWithTimeZone values are equal, <c>false</c> otherwise.</returns>
            <remarks>
                <para>In order for two periods to be equivalent the beginning and ending bounds between
                      the two values must be equivalent.</para>
            
                <para>The boolean that is returned indicates the following conditions</para>
            
            	<para><c>false</c> will be returned if:</para>
            	<list type="bullet">
            		<item>
                        This instance or <paramref name="other"/> is <see cref="F:Teradata.Client.Provider.TdPeriodTimeWithTimeZone.Null"/>.
                    </item>
            		<item>
                        This instance is not equal to <paramref name="other"/>.
                    </item>
            	</list>
            	<para><c>true</c> will be returned if:</para>
            	<list type="bullet">
            		<item>
                        This instance and <paramref name="other"/> are <Strong>Null</Strong>.
                    </item>
            		<item>
                        This instance is equal to <paramref name="other"/>.
                    </item>
            	</list>
            </remarks>
            <param name="other">A TdPeriodTimeWithTimeZone that will be compared to this instance of TdPeriodTimeWithTimeZone.</param>
        </member>
        <member name="M:Teradata.Client.Provider.TdPeriodTimeWithTimeZone.Add(System.TimeSpan)">
            <summary>
            The specified TimeSpan will be added to this instance of TdPeriodTimeWithTimeZone.
            </summary>
            <param name="timeSpan">The TimeSpan that will be added.</param>
            <returns>A TdPeriodTimeWithTimeZone is returned that is the result of the TimeSpan added to this 
            instance of TdPeriodTimeWithTimeZone.</returns>
            <exception cref="T:Teradata.Client.Provider.TdException">An invalid period will result in this operation.</exception>
            <remarks>
            <para>If this instance of TdPeriodTimeWithTimeZone is <strong>Null</strong> a <see cref="F:Teradata.Client.Provider.TdPeriodTimeWithTimeZone.Null"/> 
            will be returned.</para>
            
            <para>The only component of the <see cref="T:System.TimeSpan"/> object that will be 
            considered is the time component.  When this operation is performed, the time 
            component of the TimeSpan is added to the this instance of TdPeriodTimeWithTimeZone.  For 
            example, if the period is "01:00:00-08:00, 01:30:00-08:00" and TimeSpan is 
            "1.02:00:00.00" (1 day, 2 hours) the add operation will result in a 
            period of (03:00:00-08:00, 03:30:00-08:00).</para>
            
            <para>When adding a TimeSpan to a TdPeriodTimeWithTimeZone it is possible that the ending bound
            will roll into the next 24 hours, or the beginning bound will roll into the 
            previous 24 hours.  For example, suppose the period is </para>
            
            <pre>   (19:32:32.3404-08:00, 22:00:00.3232-08:00)</pre>
            
            <para>Adding the TimeSpan of "03:00:00" (3 hours) to the period will 
            cause the ending bound to roll into the next 24 hours which will result in the 
            invalid period:</para>
            
            <pre>    (22:32:32.3404-08:00, '01:00:00.3232-08:00)</pre>
            
            <para>Subtracting the TimeSpan of "20:00:00" (20 hours) to the same period 
            will cause the beginning period to roll back into the previous 24 hours which  
            results in the invalid period:</para>
            
            <pre>    (23:32:32.3404-08:00, 02:00:00.3232-08:00)</pre>
            
            <para>Refer to <a href="PeriodArithmetic.htm">Period Arithmetic</a> for additional information.</para>
            </remarks>
        </member>
        <member name="M:Teradata.Client.Provider.TdPeriodTimeWithTimeZone.Add(Teradata.Client.Provider.TdIntervalDayToSecond)">
            <summary>
               Adds the specified <see cref="T:Teradata.Client.Provider.TdIntervalDayToSecond"/> to this instance of 
               <see cref="T:Teradata.Client.Provider.TdPeriodTimeWithTimeZone"/>.
            </summary>
            <returns>
               A <strong>TdPeriodTimeWithTimeZone</strong> is returned that is the result of  
               adding the <strong>TdIntervalDayToSecond</strong> to this instance of 
               <strong>TdPeriodTimeWithTimeZone</strong>.
            </returns>
            <exception cref="T:Teradata.Client.Provider.TdException">Unable to add the specified <strong>TdIntervalDayToSecond</strong> to this instance of <strong>TdPeriodTimeWithTimeZone</strong>.</exception>
            <remarks>
            <para>
               If this instance of <strong>TdPeriodTimeWithTimeZone</strong> or the 
               <paramref name="interval"/> is <strong>Null</strong> a 
               <see cref="F:Teradata.Client.Provider.TdPeriodTimeWithTimeZone.Null"/> will be returned.
            </para>
            <para>
               When this operation is performed, the day component of the interval is ignored.
               Only the hour, minute, and second components are used in this operation.  For 
               example, if the period is "01:00:00-08:00, 01:30:00-08:00" and the 
               interval is "1 02:00:00.00" (1 day, 2 hours) the add operation will 
               result in a period of (03:00:00-08:00, 03:30:00-08:00).
            </para>
            <para>
               When adding an interval to a <strong>TdPeriodTimeWithTimeZone</strong> it is  
               possible that the ending bound will roll into the next 24 hours, or the beginning  
               bound will roll into the previous 24 hours.  For example, suppose the period is 
            </para>
            <pre>   (19:32:32.3404-08:00, 22:00:00.3232-08:00)</pre>
            <para>
               Adding the interval of "0 03:00:00" (3 hours) to the period will 
               cause the ending bound to roll into the next 24 hours which will result in the 
               invalid period:
            </para>
            <pre>    (22:32:32.3404-08:00, 01:00:00.3232-08:00)</pre>
            <para>
               Adding the interval of "-0 20:00:00" (-20 hours) to the same period 
               will cause the beginning period to roll back into the previous 24 hours which  
               results in the invalid period:
            </para>
            <pre>    (23:32:32.3404-08:00, 02:00:00.3232-08:00)</pre>
            </remarks>
            <param name="interval">
               The <strong>TdIntervalDayToSecond</strong> that will be 
               added to the period.
            </param>
        </member>
        <member name="M:Teradata.Client.Provider.TdPeriodTimeWithTimeZone.Subtract(System.TimeSpan)">
            <summary>
            The specified TimeSpan will be subtracted from this instance of TdPeriodTimeWithTimeZone.
            </summary>
            <param name="timeSpan">The TimeSpan that will be subtracted.</param>
            <returns>A TdPeriodTimeWithTimeZone is returned that is the result of the TimeSpan subtracted from
            this instance of TdPeriodTimeWithTimeZone.</returns>
            <exception cref="T:Teradata.Client.Provider.TdException">An invalid period will result in this operation.</exception>
            <remarks>
            <para>If this instance of TdPeriodTimeWithTimeZone is <strong>Null</strong> a <see cref="F:Teradata.Client.Provider.TdPeriodTimeWithTimeZone.Null"/> 
            will be returned.</para>
            
            <para>The only component of the <see cref="T:System.TimeSpan"/> object that will be 
            considered is the time component.  When this operation is performed, the time 
            component of the TimeSpan is subtracted from this instance of TdPeriodTimeWithTimeZone.  For 
            example, if the period is "05:00:00-08:00, 06:30:00-08:00" and TimeSpan is 
            "1.02:00:00.00" (1 day, 2 hours) the subtract operation will result in a period 
            of (03:00:00-08:00, 04:30:00-08:00).</para>
            
            <para>When subtracting a TimeSpan from a TdPeriodTimeWithTimeZone it is possible that the ending bound
            will roll into the next 24 hours, or the beginning bound will roll into the 
            previous 24 hours.  For example, suppose the period is </para>
            
            <pre>   (19:32:32.3404-08:00, 22:00:00.3232-08:00)</pre>
            
            <para>Subtracting the TimeSpan of "20:00:00" (20 hours) from the period 
            will cause the beginning bound to roll back into the previous 24 hours which  
            results in the invalid period:</para>
            
            <pre>    (23:32:32.3404-08:00, 02:00:00.3232-08:00)</pre>
            
            <para>Subtracting the TimeSpan of "-3:00:00" (-3 hours) from the period will 
            cause the ending bound to roll into the next 24 hours which will result in the 
            invalid period:</para>
            
            <pre>    (22:32:32.3404-08:00, 01:00:00.3232-08:00)</pre>
            
            <para>Refer to <a href="PeriodArithmetic.htm">Period Arithmetic</a> for additional information.</para>
            
            </remarks>
        </member>
        <member name="M:Teradata.Client.Provider.TdPeriodTimeWithTimeZone.Subtract(Teradata.Client.Provider.TdIntervalDayToSecond)">
            <summary>
               Subtracts the specified <see cref="T:Teradata.Client.Provider.TdIntervalDayToSecond"/> from this instance of 
               <see cref="T:Teradata.Client.Provider.TdPeriodTimeWithTimeZone"/>.
            </summary>
            <returns>
               A <strong>TdPeriodTimeWithTimeZone</strong> is returned that is the result of 
               subtracting the <strong>TdIntervalDayToSecond</strong> from this instance of 
               <strong>TdPeriodTimeWithTimeZone</strong>.
            </returns>        
            <exception cref="T:Teradata.Client.Provider.TdException">Unable to subtract the specified <strong>TdIntervalDayToSecond</strong> from this instance of <strong>TdPeriodTimeWithTimeZone</strong>.</exception>
            <remarks>
            <para>
               If this instance of <strong>TdPeriodTimeWithTimeZone</strong> or the 
               <paramref name="interval"/> is <strong>Null</strong> a 
               <see cref="F:Teradata.Client.Provider.TdPeriodTimeWithTimeZone.Null"/> will be returned.
            </para>
            <para>
               When this operation is performed, the day component of the interval is
               ignored.  Only the hour, minute, and second components are used in this operation.  For 
               example, if the period is "05:00:00-08:00, 06:30:00-08:00" and the interval is 
               "1 02:00:00.00" (1 day, 2 hours) the subtract operation will result in a period 
               of "03:00:00-08:00, 04:30:00-08:00".
            </para>
            <para>
               When subtracting a interval from a <strong>TdPeriodTimeWithTimeZone</strong> it is 
               possible that the ending bound will roll into the next 24 hours, or the beginning bound 
               will roll into the previous 24 hours.  For example, suppose the period is:
            </para>
            <pre>   (19:32:32.3404-08:00, 22:00:00.3232-08:00)</pre>
            <para>
               Subtracting the interval of "0 20:00:00" (20 hours) from the period 
               will cause the beginning bound to roll back into the previous 24 hours which  
               results in the invalid period:
            </para>
            <pre>    (23:32:32.3404-08:00, 02:00:00.3232-08:00)</pre>
            <para>
               Subtracting the interval of "-0 03:00:00" (-3 hours) from the period 
               will cause the ending bound to roll into the next 24 hours which will result in the 
               invalid period:
            </para>
            <pre>    (22:32:32.3404-08:00, 01:00:00.3232-08:00)</pre>
            </remarks>
            <param name="interval">
               The <strong>TdIntervalDayToSecond</strong> interval will be  
               subtracted from this instance of <strong>TdPeriodTimeWithTimeZone</strong>.
            </param>
        </member>
        <member name="M:Teradata.Client.Provider.TdPeriodTimeWithTimeZone.op_Addition(Teradata.Client.Provider.TdPeriodTimeWithTimeZone,System.TimeSpan)">
            <summary>
            Adds the specified TimeSpan to a TdPeriodTimeWithTimeZone.
            </summary>
            <param name="period">A TdPeriodTimeWithTimeZone.</param>
            <param name="timeSpan">A TimeSpan that will be added to TdPeriodTimeWithTimeZone.</param>
            <exception cref="T:Teradata.Client.Provider.TdException">The result could not be represented as a TdPeriodTimeWithTimeZone.</exception>
            <returns>A TdPeriodTimeWithTimeZone is returned that is the result of adding the TimeWithTimeZonespan
            to TdPeriodTimeWithTimeZone.</returns>
            <remarks>
            
            Refer to <see cref="M:Teradata.Client.Provider.TdPeriodTimeWithTimeZone.Add(System.TimeSpan)"/> and <a href="PeriodArithmetic.htm">Period Arithmetic</a> for additional information.
            </remarks>
            <overloads>
            A Timespan is added to a period.
            </overloads>
        </member>
        <member name="M:Teradata.Client.Provider.TdPeriodTimeWithTimeZone.op_Addition(System.TimeSpan,Teradata.Client.Provider.TdPeriodTimeWithTimeZone)">
            <summary>
            Adds the specified TimeSpan to a TdPeriodTimeWithTimeZone.
            </summary>
            <param name="period">A TdPeriodTimeWithTimeZone.</param>
            <param name="timeSpan">A TimeSpan that will be added to TdPeriodTimeWithTimeZone.</param>
            <exception cref="T:Teradata.Client.Provider.TdException">The result could not be represented as a TdPeriodTimeWithTimeZone.</exception>
            <returns>A TdPeriodTimeWithTimeZone is returned that is the result of adding the TimeSpan
            to TdPeriodTimeWithTimeZone.</returns>
            <remarks>
            
            Refer to <see cref="M:Teradata.Client.Provider.TdPeriodTimeWithTimeZone.Add(System.TimeSpan)"/> and <a href="PeriodArithmetic.htm">Period Arithmetic</a> for additional information.
            </remarks>
        </member>
        <member name="M:Teradata.Client.Provider.TdPeriodTimeWithTimeZone.op_Addition(Teradata.Client.Provider.TdPeriodTimeWithTimeZone,Teradata.Client.Provider.TdIntervalDayToSecond)">
            <summary>
               Adds the specified <see cref="T:Teradata.Client.Provider.TdIntervalDayToSecond"/> to a 
               <see cref="T:Teradata.Client.Provider.TdPeriodTimeWithTimeZone"/>.
            </summary>
            <returns>
               A <strong>TdPeriodTimeWithTimeZone</strong> is returned that is the result of 
               adding the <strong>TdIntervalDayToSecond</strong> to a 
               <strong>TdPeriodTimeWithTimeZone</strong>.
            </returns>
            <exception cref="T:Teradata.Client.Provider.TdException">Unable to add the specified <strong>TdIntervalDayToSecond</strong> to a <strong>TdPeriodTimeWithTimeZone</strong>.</exception>
            <remarks>
            <para>
               If <paramref name="period"/> or the <paramref name="interval"/> is 
               <strong>Null</strong> a <see cref="F:Teradata.Client.Provider.TdPeriodTimeWithTimeZone.Null"/> will be returned.
            </para>
            <para>
               When this operation is performed, the day component of the interval is ignored.
               Only the hour, minute, and second components are used in this operation.  For 
               example, if the period is "01:00:00-08:00, 01:30:00-08:00" and the interval
                is "1 02:00:00.00" (1 day, 2 hours) the add operation will result in a 
               period of (03:00:00-08:00, 03:30:00-08:00).
            </para>
            <para>
               When adding an interval to a <strong>TdPeriodTimeWithTimeZone</strong> it is 
               possible that the ending bound will roll into the next 24 hours, or the beginning bound 
               will roll into the previous 24 hours.  For example, suppose the period is 
            </para>
            <pre>   (19:32:32.3404-08:00;, 22:00:00.3232-08:00)</pre>
            <para>
               Adding the interval of "0 03:00:00" (3 hours) to the period will 
               cause the ending bound to roll into the next 24 hours which will result in the 
               invalid period:
            </para>
            <pre>    (22:32:32.3404-08:00, 01:00:00.3232-08:00)</pre>
            <para>
               Adding the interval of "-0 20:00:00" (-20 hours) to the same period 
               will cause the beginning period to roll back into the previous 24 hours which  
               results in the invalid period:
            </para>
            <pre>    (23:32:32.3404-08:00, 02:00:00.3232-08:00)</pre>
            </remarks>
            <param name="period">A <strong>TdPeriodTimeWithTimeZone</strong>.</param>
            <param name="interval">
               The <strong>TdIntervalDayToSecond</strong> that will be 
               added to the period.
            </param>
        </member>
        <member name="M:Teradata.Client.Provider.TdPeriodTimeWithTimeZone.op_Addition(Teradata.Client.Provider.TdIntervalDayToSecond,Teradata.Client.Provider.TdPeriodTimeWithTimeZone)">
            <summary>
               Adds the specified <see cref="T:Teradata.Client.Provider.TdIntervalDayToSecond"/> to a 
               <see cref="T:Teradata.Client.Provider.TdPeriodTimeWithTimeZone"/>.
            </summary>
            <returns>
               A <strong>TdPeriodTimeWithTimeZone</strong> is returned that is the result of 
               adding the <strong>TdIntervalDayToSecond</strong> to a 
               <strong>TdPeriodTimeWithTimeZone</strong>.
            </returns>
            <exception cref="T:Teradata.Client.Provider.TdException">Unable to add the specified <strong>TdIntervalDayToSecond</strong> to a <strong>TdPeriodTimeWithTimeZone</strong>.</exception>
            <remarks>
            <para>
               If <paramref name="period"/> or the <paramref name="interval"/> is 
               <strong>Null</strong> a <see cref="F:Teradata.Client.Provider.TdPeriodTimeWithTimeZone.Null"/> will be returned.
            </para>
            <para>
               When this operation is performed, the day component of the interval is ignored.
               Only the hour, minute, and second components are used in this operation.  For 
               example, if the period is "01:00:00-08:00, 01:30:00-08:00" and the interval
                is "1 02:00:00.00" (1 day, 2 hours) the add operation will result in a 
               period of (03:00:00-08:00, 03:30:00-08:00).
            </para>
            <para>
               When adding an interval to a <strong>TdPeriodTimeWithTimeZone</strong> it is 
               possible that the ending bound will roll into the next 24 hours, or the beginning bound 
               will roll into the previous 24 hours.  For example, suppose the period is 
            </para>
            <pre>   (19:32:32.3404-08:00;, 22:00:00.3232-08:00)</pre>
            <para>
               Adding the interval of "0 03:00:00" (3 hours) to the period will 
               cause the ending bound to roll into the next 24 hours which will result in the 
               invalid period:
            </para>
            <pre>    (22:32:32.3404-08:00, 01:00:00.3232-08:00)</pre>
            <para>
               Adding the interval of "-0 20:00:00" (-20 hours) to the same period 
               will cause the beginning period to roll back into the previous 24 hours which  
               results in the invalid period:
            </para>
            <pre>    (23:32:32.3404-08:00, 02:00:00.3232-08:00)</pre>
            </remarks>
            <param name="interval">
               The <strong>TdIntervalDayToSecond</strong> that will be 
               added to the period.
            </param>
            <param name="period">A <strong>TdPeriodTimeWithTimeZone</strong>.</param>
        </member>
        <member name="M:Teradata.Client.Provider.TdPeriodTimeWithTimeZone.op_Subtraction(Teradata.Client.Provider.TdPeriodTimeWithTimeZone,System.TimeSpan)">
            <summary>
            Subtracts the specified TimeSpan from a TdPeriodTimeWithTimeZone.
            </summary>
            <param name="period">A TdPeriodTimeWithTimeZone.</param>
            <param name="timeSpan">A TimeSpan that will be subtracted
            from the TdPeriodTimeWithTimeZone</param>
            <returns>A TdPeriodTimeWithTimeZone is returned that is the result of subtracting the TimeSpan 
            from the TdPeriodTimeWithTimeZone.</returns>
            <exception cref="T:Teradata.Client.Provider.TdException">The result could not be represented as a TdPeriodTimeWithTimeZone.</exception>
            <remarks>
            Refer to <see cref="M:Teradata.Client.Provider.TdPeriodTimeWithTimeZone.Subtract(System.TimeSpan)"/> and <a href="PeriodArithmetic.htm">Period Arithmetic</a> for additional information.
            </remarks>
        </member>
        <member name="M:Teradata.Client.Provider.TdPeriodTimeWithTimeZone.op_Subtraction(Teradata.Client.Provider.TdPeriodTimeWithTimeZone,Teradata.Client.Provider.TdIntervalDayToSecond)">
            <summary>
               Subtracts the specified <see cref="T:Teradata.Client.Provider.TdIntervalDayToSecond"/> from a 
               <see cref="T:Teradata.Client.Provider.TdPeriodTimeWithTimeZone"/>.
            </summary>
            <returns>
               A <strong>TdPeriodTimeWithTimeZone</strong> is returned that is the result of  
               subtracting the <strong>TdIntervalDayToSecond</strong> from a 
               <strong>TdPeriodTimeWithTimeZone</strong>.
            </returns>        
            <exception cref="T:Teradata.Client.Provider.TdException">Unable to subtract the specified <strong>TdIntervalDayToSecond</strong> from a <strong>TdPeriodTimeWithTimeZone</strong>.</exception>
            <remarks>
            <para>
               If <paramref name="period"/> or the <paramref name="interval"/> 
               is <strong>Null</strong> a <see cref="F:Teradata.Client.Provider.TdPeriodTimeWithTimeZone.Null"/> will be returned.
            </para>
            <para>
               When this operation is performed, the day component of the interval is
               ignored.  Only the hour, minute, and second components are used in this operation.  For 
               example, if the period is "05:00:00-08:00, 06:30:00-08:00" and the interval is 
               "1 02:00:00.00" (1 day, 2 hours) the subtract operation will result in a period 
               of "03:00:00-08:00, 04:30:00-08:00".
            </para>
            <para>
               When subtracting a interval from a <strong>TdPeriodTimeWithTimeZone</strong> it is 
               possible that the ending bound will roll into the next 24 hours, or the beginning bound 
               will roll into the previous 24 hours.  For example, suppose the period is:
            </para>
            <pre>   (19:32:32.3404-08:00, 22:00:00.3232-08:00)</pre>
            <para>
               Subtracting the interval of "0 20:00:00" (20 hours) from the period 
               will cause the beginning bound to roll back into the previous 24 hours which  
               results in the invalid period:
            </para>
            <pre>    (23:32:32.3404-08:00, 02:00:00.3232-08:00)</pre>
            <para>
               Subtracting the interval of "-0 03:00:00" (-3 hours) from the period will 
               cause the ending bound to roll into the next 24 hours which will result in the 
               invalid period:
            </para>
            <pre>    (22:32:32.3404-08:00, 01:00:00.3232-08:00)</pre>
            </remarks>
            <param name="period">A <strong>TdPeriodTimeWithTimeZone</strong>.</param>
            <param name="interval">
               The <strong>TdIntervalDayToSecond</strong> interval will be  
               subtracted from a <strong>TdPeriodTimeWithTimeZone</strong>.
            </param>
        </member>
        <member name="M:Teradata.Client.Provider.TdPeriodTimeWithTimeZone.Compare(Teradata.Client.Provider.TdPeriodTimeWithTimeZone,Teradata.Client.Provider.TdPeriodTimeWithTimeZone)">
            <summary>
            Compares two instances of TdPeriodTimeWithTimeZone structures and returns a value indicating whether <paramref name="left"/> is
            greater than, less than or equal to <paramref name="right"/>.
            </summary>
            <returns>
            The result of the comparison is returned as an integer.
            </returns>
            <remarks>
            <para>The beginning and ending bounds of the two period operands are used in the comparison.  
              The integer returned when the bounds of the left is compared to right operand
              indicates the following:
            </para>
                <para>
            	<list type="table">
            		<listheader>
            			<term>Return Value</term>
            			<description>Meaning</description>
            		</listheader>
            		<item>
            			<term>Less than zero</term>
            			<description>
                            <para><paramref name="left"/> is less than <paramref name="right"/>.</para> 
                            <para>-or-</para>
                            <para><paramref name="left"/> is <see cref="F:Teradata.Client.Provider.TdPeriodTimeWithTimeZone.Null"/>.</para><br/>
                            <para><strong>Comparison Algorithm</strong></para>
                            <para>    left.Begin &lt; right.Begin OR (left.Begin == right.Begin AND left.End &lt; right.End)</para>
                        </description>
            		</item>
            		<item>
            			<term>Zero</term>
            			<description>
                            <para><paramref name="left"/> is equal to <paramref name="right"/>.</para>
                            <para>-or-</para>
                            <para><paramref name="left"/> and <paramref name="right"/> are <Strong>Null</Strong>.</para><br/>
                            <para><strong>Comparison Algorithm</strong></para>
                            <para>    left.Begin == right.Begin AND left.End == right.End</para>
                        </description>
            		</item>
            		<item>
            			<term>Greater than zero</term>
            			<description>
                            <para><paramref name="left"/> is greater than <paramref name="right"/>.</para>
                            <para>-or-</para>
                            <para><paramref name="right"/> is <Strong>Null.</Strong></para><br/>
                            <para><strong>Comparison Algorithm</strong></para>
                            <para>   left.Begin &gt; right.Begin OR (left.Begin == right.Begin AND left.End &gt; right.End)</para>
                        </description>
            		</item>
            	</list>       
                </para>
            </remarks>
            <seealso cref="M:Teradata.Client.Provider.TdPeriodTimeWithTimeZone.CompareTo(Teradata.Client.Provider.TdPeriodTimeWithTimeZone)"/>
            <param name="left">An instance of TdPeriodTimeWithTimeZone.</param>
            <param name="right">An instance of TdPeriodTimeWithTimeZone.</param>
        </member>
        <member name="M:Teradata.Client.Provider.TdPeriodTimeWithTimeZone.Equals(Teradata.Client.Provider.TdPeriodTimeWithTimeZone,Teradata.Client.Provider.TdPeriodTimeWithTimeZone)">
            <summary>
                Compares two <see cref="T:Teradata.Client.Provider.TdPeriodTimeWithTimeZone"/> structures to determine whether they are
                equal.
            </summary>
            <returns>
            <para>A boolean is returned that indicates the result of the comparison.</para>
            </returns>
            <remarks>
            <para>To determine whether two periods are equal, the beginning and ending bounds between
            the left and right operands are compared.  The two periods are equal if the following is true:</para>
            
            <pre>    left.Begin == right.Begin &amp;&amp; left.End == right.Begin</pre>
            
            	<para>
            		The value returned is <c>true</c> if the <paramref name="left"/> is 
                    equal to the <paramref name="right"/>, <c>false</c> otherwise.
                </para>
            	<para>
            		<list type="table">
            			<listheader>
            				<term>Return Value</term>
            				<description>Description</description>
            			</listheader>
            			<item>
            				<term><c>true</c></term>
                            <description>
                                <para><paramref name="left"/> and <paramref name="right"/> are <see cref="F:Teradata.Client.Provider.TdPeriodTimeWithTimeZone.Null"/></para> 
                                <para>-or-</para>
                                <para><paramref name="left"/> is equal to <paramref name="right"/>.</para>
                            </description>
            			</item>
            			<item>
            				<term><c>false</c></term>
                            <description>
                            <para><paramref name="left"/> or <paramref name="right"/> is <strong>Null</strong></para>
                            <para>-or-</para>
                            <para><paramref name="left"/> is not equal to <paramref name="right"/>.</para>
                            </description>
            			</item>
            		</list>
            	</para>
            </remarks>
            <example>
                The following code example uses various comparison methods and operators.
                <code lang="CS">
            TdPeriodTimeWithTimeZone  later = new TdPeriodTimeWithTimeZone(
                new TdTimeWithTimeZone(09, 8, 31, 0), new TdTimeWithTimeZone(14, 10, 25, 0));
            
            TdPeriodTimeWithTimeZone earlier = new TdPeriodTimeWithTimeZone(
                new TdTimeWithTimeZone(01, 8, 31, 0), new TdTimeWithTimeZone(05, 0, 0, 0);
             
            // The following comparison methods and operators are equivalent
            if (false == TdPeriodTimeWithTimeZone.Equals(later, earlier) ||
                late != earlier ||
                true == TdPeriodTimeWithTimeZone.NotEquals(later, earlier) )
            {
               Console.WriteLine(“later does not equal earlier”);
            }
                </code>
            </example>
            <param name="left">A TdPeriodTimeWithTimeZone instance.</param>
            <param name="right">A TdPeriodTimeWithTimeZone instance.</param>
        </member>
        <member name="M:Teradata.Client.Provider.TdPeriodTimeWithTimeZone.NotEquals(Teradata.Client.Provider.TdPeriodTimeWithTimeZone,Teradata.Client.Provider.TdPeriodTimeWithTimeZone)">
            <summary>
            Compares two TdPeriodTimeWithTimeZone structures to determine whether the <paramref name="left"/> operand is 
            not equal to the <paramref name="right"/> operand.
            </summary>
            <returns>
            A boolean is returned that indicates the result of the comparison.
            </returns>
            <remarks>
            <para>To determine whether two periods are not equal, the beginning and ending bounds between
            the left and right operands are compared.  The two periods are not equal if the following is true:</para>
            
            <pre>    left.Begin != right.Begin || left.End != right.End</pre>
            
            	<para>
            		The value returned is <c>true</c> if the <paramref name="left"/> is 
                    not equal to the <paramref name="right"/>, <c>false</c> otherwise.
                </para>
            	<para>
            		<list type="table">
            			<listheader>
            				<term>Return Value</term>
            				<description>Description</description>
            			</listheader>
            			<item>
            				<term><c>true</c></term>
                            <description>
                                <para><paramref name="left"/> or <paramref name="right"/> is <see cref="F:Teradata.Client.Provider.TdPeriodTimeWithTimeZone.Null"/></para> 
                                <para>-or-</para>
                                <para><paramref name="left"/> is less than or greater than <paramref name="right"/>.</para>
                            </description>
            			</item>
            			<item>
            				<term><c>false</c></term>
                            <description>
                            <para><paramref name="left"/> and <paramref name="right"/> are <strong>Null</strong></para>
                            <para>-or-</para>
                            <para><paramref name="left"/> is equal to <paramref name="right"/>.</para>
                            </description>
            			</item>
            		</list>
            	</para>
            </remarks>
            <param name="left">An instance of TdPeriodTimeWithTimeZone.</param>
            <param name="right">An instance of TdPeriodTimeWithTimeZone.</param>        
        </member>
        <member name="M:Teradata.Client.Provider.TdPeriodTimeWithTimeZone.GreaterThan(Teradata.Client.Provider.TdPeriodTimeWithTimeZone,Teradata.Client.Provider.TdPeriodTimeWithTimeZone)">
            <summary>
            Compares two TdPeriodTimeWithTimeZone structures to determine whether the <paramref name="left"/> operand is 
            greater than the <paramref name="right"/> operand.
            </summary>
            <returns>
            A boolean is returned that indicates the result of the comparison.
            </returns>
            <remarks>
            <para>The beginning 
            and ending bounds between the left and right operands are compared to 
            determine whether the left period is greater than the right.  The left is greater
            than the right if the following is true:</para>
            
            <pre>    left.Begin &gt; right.Begin OR (left.Begin == right.Begin AND left.End &gt; right.End)</pre>
            
            	<para>
            		The value returned is <c>true</c> if the <paramref name="left"/> is greater
                    than the <paramref name="right"/>, <c>false</c> otherwise.
                </para>
            	<para>
            		<list type="table">
            			<listheader>
            				<term>Return Value</term>
            				<description>Description</description>
            			</listheader>
            			<item>
            				<term><c>true</c></term>
                            <description><paramref name="left"/> and <paramref name="right"/> are not <see cref="F:Teradata.Client.Provider.TdPeriodTimeWithTimeZone.Null"/> and
                            <paramref name="left"/> is greater than <paramref name="right"/>.
                            </description>
            			</item>
            			<item>
            				<term><c>false</c></term>
                            <description>
                            <para><paramref name="left"/> and / or <paramref name="right"/> is <strong>Null</strong> </para>
                            <para>-or-</para>
                            <para><paramref name="left"/> is less than or equal to <paramref name="right"/>.</para>
                            </description>
            			</item>
            		</list>
            	</para>
            
            <para>Comparison operators always returns <c>false</c> if one of the operands is 
            <strong>Null</strong>.  Therefore, you must not assume that the reverse condition 
            is <c>true</c>. For example you cannot assume that the left operand is less than or 
            equal to the right operand if the <c>GreaterThan</c> operator returns <c>false</c>.</para> 
            
            </remarks>
            <param name="left">An instance of TdPeriodTimeWithTimeZone.</param>
            <param name="right">An instance of TdPeriodTimeWithTimeZone.</param>
        </member>
        <member name="M:Teradata.Client.Provider.TdPeriodTimeWithTimeZone.GreaterThanOrEqual(Teradata.Client.Provider.TdPeriodTimeWithTimeZone,Teradata.Client.Provider.TdPeriodTimeWithTimeZone)">
            <summary>
            Compares two TdPeriodTimeWithTimeZone structures to determine whether the <paramref name="left"/> operand is 
            greater than or equal to the <paramref name="right"/> operand.
            </summary>
            <returns>
            A boolean is returned that indicates the result of the comparison.
            </returns>
            <remarks>
            <para>In order to perform this comparison the beginning and ending bounds of the left
            and right operands are compared against each other.  The left is greater than or equal
            to the right if the following is true:</para>
            
            <pre>    ((left.Begin &gt; right.Begin) OR (left.Begin == right.Begin AND left.End &gt;= right.End))</pre>
            
            	<para>
            		The value returned is <c>true</c> if the <paramref name="left"/> is greater
                    than or equal to the <paramref name="right"/>, <c>false</c> otherwise.
                </para>
            	<para>
            		<list type="table">
            			<listheader>
            				<term>Return Value</term>
            				<description>Description</description>
            			</listheader>
            			<item>
            				<term><c>true</c></term>
                            <description><paramref name="left"/> and <paramref name="right"/> are not <see cref="F:Teradata.Client.Provider.TdPeriodTimeWithTimeZone.Null"/> and
                            <paramref name="left"/> is greater than or equal to <paramref name="right"/>.
                            </description>
            			</item>
            			<item>
            				<term><c>false</c></term>
                            <description>
                            <para><paramref name="left"/> and / or <paramref name="right"/> is <strong>Null</strong> </para>
                            <para>-or-</para>
                            <para><paramref name="left"/> is less than <paramref name="right"/>.</para>
                            </description>
            			</item>
            		</list>
            	</para>
            
            <para>Comparison operators always returns <c>false</c> if one of the operands is 
            <strong>Null</strong>.  Therefore, you must not assume that the reverse condition is 
            <c>true</c>. For example you cannot assume that the left operand is less than the right 
            operand if <c>GreaterThanOrEqual</c> operator returns <c>false</c>.</para> 
            
            </remarks>
            <param name="left">An instance of TdPeriodTimeWithTimeZone.</param>
            <param name="right">An instance of TdPeriodTimeWithTimeZone.</param>
        </member>
        <member name="M:Teradata.Client.Provider.TdPeriodTimeWithTimeZone.LessThan(Teradata.Client.Provider.TdPeriodTimeWithTimeZone,Teradata.Client.Provider.TdPeriodTimeWithTimeZone)">
            <summary>
            Compares two TdPeriodTimeWithTimeZone structures to determine whether the <paramref name="left"/> operand is 
            less than the <paramref name="right"/> operand.
            </summary>
            <returns>
            A boolean is returned that indicates the result of the comparison.
            </returns>
            <remarks>
            <para>In order to perform this comparison the beginning and ending bounds of the left
            and right operands are compared against each other.  The left is less than the right if 
            the following is true:</para>
            
            <pre>    left.Begin &lt; right.Begin || (left.Begin == right.Begin &amp;&amp; left.End &lt; right.End)</pre>
            
            	<para>
            		The value returned is <c>true</c> if the <paramref name="left"/> is less
                    than the <paramref name="right"/>, <c>false</c> otherwise.
                </para>
            	<para>
            		<list type="table">
            			<listheader>
            				<term>Return Value</term>
            				<description>Description</description>
            			</listheader>
            			<item>
            				<term><c>true</c></term>
                            <description><paramref name="left"/> and <paramref name="right"/> are not <see cref="F:Teradata.Client.Provider.TdPeriodTimeWithTimeZone.Null"/> and
                            <paramref name="left"/> is less than <paramref name="right"/>.
                            </description>
            			</item>
            			<item>
            				<term><c>false</c></term>
                            <description>
                            <para><paramref name="left"/> and / or <paramref name="right"/> is <strong>Null</strong></para>
                            <para>-or-</para>
                            <para><paramref name="left"/> is greater than or equal to <paramref name="right"/>.</para>
                            </description>
            			</item>
            		</list>
            	</para>
            <para>Comparison operators always returns <c>false</c> if one of the operands is 
            <strong>Null</strong>.  Therefore, you must not assume that the reverse condition 
            is <c>true</c>. For example you cannot assume that the left operand is greater than 
            or equal the right operand if the <c>LessThan</c> operator returns <c>false</c>.</para> 
            
            </remarks>
            <param name="left">An instance of TdPeriodTimeWithTimeZone.</param>
            <param name="right">An instance of TdPeriodTimeWithTimeZone.</param>
        </member>
        <member name="M:Teradata.Client.Provider.TdPeriodTimeWithTimeZone.LessThanOrEqual(Teradata.Client.Provider.TdPeriodTimeWithTimeZone,Teradata.Client.Provider.TdPeriodTimeWithTimeZone)">
            <summary>
            Compares two TdPeriodTimeWithTimeZone structures to determine whether the <paramref name="left"/> operand is 
            less than or equal to the <paramref name="right"/> operand.
            </summary>
            <returns>
            A boolean is returned that indicates the result of the comparison.
            </returns>
            <remarks>
            <para>In order to perform this comparison the beginning and ending bounds of the left
            and right operands are compared against each other.  The left is equal to or less than the right if 
            the following is true:</para>
            
            <pre>    ((left.Begin &lt; right.Begin) OR (left.Begin == right.Begin AND left.End &lt;= right.End))</pre>
            
            	<para>
            		The value returned is <c>true</c> if the <paramref name="left"/> is less
                    than or equal to the <paramref name="right"/>, <c>false</c> otherwise.
                </para>
            	<para>
            		<list type="table">
            			<listheader>
            				<term>Return Value</term>
            				<description>Description</description>
            			</listheader>
            			<item>
            				<term><c>true</c></term>
                            <description><paramref name="left"/> and <paramref name="right"/> are not <see cref="F:Teradata.Client.Provider.TdPeriodTimeWithTimeZone.Null"/> and
                            <paramref name="left"/> is less than or equal to <paramref name="right"/>.
                            </description>
            			</item>
            			<item>
            				<term><c>false</c></term>
                            <description>
                            <para><paramref name="left"/> and / or <paramref name="right"/> is <strong>Null</strong></para>
                            <para>-or-</para>
                            <para><paramref name="left"/> is greater than <paramref name="right"/>.</para>
                            </description>
            			</item>
            		</list>
            	</para>
            
            <para>Comparison operators always returns <c>false</c> if one of the operands is 
            <strong>Null</strong>.  Therefore, you must not assume that the reverse condition 
            is <c>true</c>. For example you cannot assume that the left operand is greater than 
            the right operand if the <c>LessThanOrEqual</c> operator 
            returns <c>false</c>.</para> 
            
            </remarks>
            <param name="left">An instance of TdPeriodTimeWithTimeZone.</param>
            <param name="right">An instance of TdPeriodTimeWithTimeZone.</param>
        </member>
        <member name="M:Teradata.Client.Provider.TdPeriodTimeWithTimeZone.op_Equality(Teradata.Client.Provider.TdPeriodTimeWithTimeZone,Teradata.Client.Provider.TdPeriodTimeWithTimeZone)">
            <summary>
            Compares two TdPeriodTimeWithTimeZone structures to determine whether the <paramref name="left"/> is 
            equal to the <paramref name="right"/> operand.
            </summary>
            <returns>
            A boolean is returned that indicates the result of the comparison.
            </returns>
            <remarks>
            <para>The beginning and ending bounds between the left and right operands are compared 
            to determine whether the two periods are equal.  The two periods are equal if the following 
            is true:</para>
            
            <pre>    left.Begin == right.Begin &amp;&amp; left.End == right.Begin</pre>
            	<para>
            		The value returned is <c>true</c> if the <paramref name="left"/> is 
                    equal to the <paramref name="right"/>, <c>false</c> otherwise.
                </para>
            	<para>
            		<list type="table">
            			<listheader>
            				<term>Return Value</term>
            				<description>Description</description>
            			</listheader>
            			<item>
            				<term><c>true</c></term>
                            <description>
                                <para><paramref name="left"/> and <paramref name="right"/> are <see cref="F:Teradata.Client.Provider.TdPeriodTimeWithTimeZone.Null"/></para> 
                                <para>-or-</para>
                                <para><paramref name="left"/> is equal to <paramref name="right"/>.</para>
                            </description>
            			</item>
            			<item>
            				<term><c>false</c></term>
                            <description>
                            <para><paramref name="left"/> or <paramref name="right"/> is <strong>Null</strong></para>
                            <para>-or-</para>
                            <para><paramref name="left"/> is not equal to <paramref name="right"/>.</para>
                            </description>
            			</item>
            		</list>
            	</para>
            
            <para>
            Unlike comparison operators, Equality operators do not always return <c>false</c> when 
            left and right operands are <strong>Null</strong>. Therefore the reverse condition can 
            be considered <c>true</c>. TdTimeWithTimeZone implementation is very similar to the 
            <see cref="T:System.Nullable"/> class in this regard.
            </para>
            </remarks>
            <param name="left">An instance of TdPeriodTimeWithTimeZone.</param>
            <param name="right">An instance of TdPeriodTimeWithTimeZone.</param>        
            <example>
            The following example shows that the Equality operator can safely be used in an if statement.
            <code>
             TdPeriodTimeWithTimeZone x = TdPeriodTimeWithTimeZone.Null;
             TdPeriodTimeWithTimeZone y = new TdPeriodTimeWithTimeZone(
                    new TdTimeWithTimeZone(10, 10, 10, 0, new Timespan(8, 0, 0)), 
                    new TdTimeWithTimeZone(12, 11, 30, 0, new TimeSpan(8, 0, 0)));
            
             if (x == y)
             {
                 // x is equal to y.
                 Console.WriteLine(@"X is equal to Y").
             }
             else
             {
                 // x is not equal y
                 Console.WriteLine(@"X is not equal to Y").
             }
            
             y = TdPeriodTimeWithTimeZone.Null;
            
             if (x == y)
             {
                 // x is equal to y.
                 Console.WriteLine(@"X is equal to Y").
             }
             else
             {
                 // x is not equal y
                 Console.WriteLine(@"X is not equal to Y").
             }
            </code>
            </example>
        </member>
        <member name="M:Teradata.Client.Provider.TdPeriodTimeWithTimeZone.op_Inequality(Teradata.Client.Provider.TdPeriodTimeWithTimeZone,Teradata.Client.Provider.TdPeriodTimeWithTimeZone)">
            <summary>
            Compares two TdPeriodTimeWithTimeZone structures to determine whether the <paramref name="left"/> is 
            not equal to the <paramref name="right"/> operand.
            </summary>
            <returns>
            A boolean is returned that indicates the result of the comparison.
            </returns>
            <remarks>
            <para>The beginning and ending bounds between the left and right operands are 
            compared to determine whether the two periods are not equal.  The two periods 
            are not equal if the following is true:</para>
            
            <pre>    left.Begin != right.Begin || left.End != right.End</pre>
            
            	<para>
            		The value returned is <c>true</c> if the <paramref name="left"/> is 
                    not equal to the <paramref name="right"/>, <c>false</c> otherwise.
                </para>
            	<para>
            		<list type="table">
            			<listheader>
            				<term>Return Value</term>
            				<description>Description</description>
            			</listheader>
            			<item>
            				<term><c>true</c></term>
                            <description>
                                <para><paramref name="left"/> or <paramref name="right"/> is <see cref="F:Teradata.Client.Provider.TdPeriodTimeWithTimeZone.Null"/></para> 
                                <para>-or-</para>
                                <para><paramref name="left"/> is less than or greater than <paramref name="right"/>.</para>
                            </description>
            			</item>
            			<item>
            				<term><c>false</c></term>
                            <description>
                            <para><paramref name="left"/> and <paramref name="right"/> are <strong>Null</strong></para>
                            <para>-or-</para>
                            <para><paramref name="left"/> is equal to <paramref name="right"/>.</para>
                            </description>
            			</item>
            		</list>
            	</para>
            </remarks>
            <param name="left">An instance of TdPeriodTimeWithTimeZone.</param>
            <param name="right">An instance of TdPeriodTimeWithTimeZone.</param>        
        </member>
        <member name="M:Teradata.Client.Provider.TdPeriodTimeWithTimeZone.op_GreaterThan(Teradata.Client.Provider.TdPeriodTimeWithTimeZone,Teradata.Client.Provider.TdPeriodTimeWithTimeZone)">
            <summary>
            Compares two TdPeriodTimeWithTimeZone structures to determine whether the <paramref name="left"/> is 
            greater than the <paramref name="right"/> operand.
            </summary>
            <returns>
            A boolean is returned that indicates the result of the comparison.
            </returns>
            <remarks>
            <para>The beginning and ending bounds between the left and right operands are 
            compared to determine whether the left period is greater than the right.  The left is greater
            than the right if the following is true:</para>
            
            <pre>    left.Begin &gt; right.Begin OR (left.Begin == right.Begin AND left.End &gt; right.End)</pre>
            
            	<para>
            		The value returned is <c>true</c> if the <paramref name="left"/> is greater
                    than the <paramref name="right"/>, <c>false</c> otherwise.
                </para>
            	<para>
            		<list type="table">
            			<listheader>
            				<term>Return Value</term>
            				<description>Description</description>
            			</listheader>
            			<item>
            				<term><c>true</c></term>
                            <description><paramref name="left"/> and <paramref name="right"/> are not <see cref="F:Teradata.Client.Provider.TdPeriodTimeWithTimeZone.Null"/> and
                            <paramref name="left"/> is greater than <paramref name="right"/>.
                            </description>
            			</item>
            			<item>
            				<term><c>false</c></term>
                            <description>
                            <para><paramref name="left"/> and / or <paramref name="right"/> is <strong>Null</strong> </para>
                            <para>-or-</para>
                            <para><paramref name="left"/> is less than or equal to <paramref name="right"/>.</para>
                            </description>
            			</item>
            		</list>
            	</para>
            
            <para>Comparison operators always returns <c>false</c> if one of the operands is 
            <strong>Null</strong>.  Therefore, you must not assume that the reverse condition 
            is <c>true</c>. For example you cannot assume that the left operand is less than or 
            equal to the right operand if the "<c>&gt;</c>" operator returns <c>false</c>.</para> 
            </remarks>
            <param name="left">An instance of TdPeriodTimeWithTimeZone.</param>
            <param name="right">An instance of TdPeriodTimeWithTimeZone.</param>
        </member>
        <member name="M:Teradata.Client.Provider.TdPeriodTimeWithTimeZone.op_GreaterThanOrEqual(Teradata.Client.Provider.TdPeriodTimeWithTimeZone,Teradata.Client.Provider.TdPeriodTimeWithTimeZone)">
            <summary>
            Compares two TdPeriodTimeWithTimeZone structures to determine whether the <paramref name="left"/> is 
            greater than or equal to the <paramref name="right"/> operand.
            </summary>
            <returns>
            A boolean is returned that indicates the result of the comparison.
            </returns>
            <remarks>
            <para>In order to perform this comparison the beginning and ending bounds of the left
            and right operands are compared against each other.  The left is greater than or equal
            to the right if the following is true:</para>
            
            <pre>    (left.Begin &gt; right.Begin) || (left.Begin == right.Begin &amp;&amp; left.End &gt;= right.End)</pre>
            
            	<para>
            		The value returned is <c>true</c> if the <paramref name="left"/> is greater
                    than or equal to the <paramref name="right"/>, <c>false</c> otherwise.
                </para>
            	<para>
            		<list type="table">
            			<listheader>
            				<term>Return Value</term>
            				<description>Description</description>
            			</listheader>
            			<item>
            				<term><c>true</c></term>
                            <description><paramref name="left"/> and <paramref name="right"/> are not <see cref="F:Teradata.Client.Provider.TdPeriodTimeWithTimeZone.Null"/> and
                            <paramref name="left"/> is greater than or equal to <paramref name="right"/>.
                            </description>
            			</item>
            			<item>
            				<term><c>false</c></term>
                            <description>
                            <para><paramref name="left"/> and / or <paramref name="right"/> is <strong>Null</strong> </para>
                            <para>-or-</para>
                            <para><paramref name="left"/> is less than <paramref name="right"/>.</para>
                            </description>
            			</item>
            		</list>
            	</para>
            
            <para>Comparison operators always returns <c>false</c> if one of the operands is 
            <strong>Null</strong>.  Therefore, you must not assume that the reverse condition 
            is <c>true</c>. For example you cannot assume that the left operand is less than the 
            right operand if the "<c>&gt;=</c>" operator returns <c>false</c>.</para> 
            </remarks>
            <param name="left">An instance of TdPeriodTimeWithTimeZone.</param>
            <param name="right">An instance of TdPeriodTimeWithTimeZone.</param>
        </member>
        <member name="M:Teradata.Client.Provider.TdPeriodTimeWithTimeZone.op_LessThan(Teradata.Client.Provider.TdPeriodTimeWithTimeZone,Teradata.Client.Provider.TdPeriodTimeWithTimeZone)">
            <summary>
            Compares two TdPeriodTimeWithTimeZone structures to determine whether the <paramref name="left"/> is 
            less than the <paramref name="right"/> operand.
            </summary>
            <returns>
            A boolean is returned that indicates the result of the comparison.
            </returns>
            <remarks>
            <para>In order to perform this comparison the beginning and ending bounds of the left
            and right operands are compared against each other.  The left is less than the right if 
            the following is true:</para>
            
            <pre>    left.Begin &lt; right.Begin || (left.Begin == right.Begin &amp;&amp; left.End &lt; right.End)</pre>
            
            	<para>
            		The value returned is <c>true</c> if the <paramref name="left"/> is less
                    than the <paramref name="right"/>, <c>false</c> otherwise.
                </para>
            	<para>
            		<list type="table">
            			<listheader>
            				<term>Return Value</term>
            				<description>Description</description>
            			</listheader>
            			<item>
            				<term><c>true</c></term>
                            <description><paramref name="left"/> and <paramref name="right"/> are not <see cref="F:Teradata.Client.Provider.TdPeriodTimeWithTimeZone.Null"/> and
                            <paramref name="left"/> is less than <paramref name="right"/>.
                            </description>
            			</item>
            			<item>
            				<term><c>false</c></term>
                            <description>
                            <para><paramref name="left"/> and / or <paramref name="right"/> is <strong>Null</strong></para>
                            <para>-or-</para>
                            <para><paramref name="left"/> is greater than or equal to <paramref name="right"/>.</para>
                            </description>
            			</item>
            		</list>
            	</para>
            
            <para>Comparison operators always returns <c>false</c> if one of the operands is 
            <strong>Null</strong>.  Therefore, you must not assume that the reverse condition is 
            <c>true</c>. For example you cannot assume that the left operand is greater than or 
            equal the right operand if the "<c>&lt;</c>" operator returns <c>false</c>.</para> 
            </remarks>
            <param name="left">An instance of TdPeriodTimeWithTimeZone.</param>
            <param name="right">An instance of TdPeriodTimeWithTimeZone.</param>
        </member>
        <member name="M:Teradata.Client.Provider.TdPeriodTimeWithTimeZone.op_LessThanOrEqual(Teradata.Client.Provider.TdPeriodTimeWithTimeZone,Teradata.Client.Provider.TdPeriodTimeWithTimeZone)">
            <summary>
            Compares two TdPeriodTimeWithTimeZone structures to determine whether the <paramref name="left"/> is 
            less than or equal to the <paramref name="right"/> operand.
            </summary>
            <returns>
            A boolean is returned that indicates the result of the comparison.
            </returns>
            <remarks>
            <para>In order to perform this comparison the beginning and ending bounds of the left
            and right operands are compared against each other.  The left is equal to or less than the right if 
            the following is true:</para>
            
            <pre>    left.Begin &lt; right.Begin || (left.Begin == right.Begin &amp;&amp; left.End &lt;= right.End)</pre>
            
            	<para>
            		<c>true</c> if the <paramref name="left"/> is less
                    than or equal to the <paramref name="right"/>, <c>false</c> otherwise.
                </para>
            	<para>
            		<list type="table">
            			<listheader>
            				<term>Return Value</term>
            				<description>Description</description>
            			</listheader>
            			<item>
            				<term><c>true</c></term>
                            <description><paramref name="left"/> and <paramref name="right"/> are not <see cref="F:Teradata.Client.Provider.TdPeriodTimeWithTimeZone.Null"/> and
                            <paramref name="left"/> is less than or equal to <paramref name="right"/>.
                            </description>
            			</item>
            			<item>
            				<term><c>false</c></term>
                            <description>
                            <para><paramref name="left"/> and / or <paramref name="right"/> is <strong>Null</strong></para>
                            <para>-or-</para>
                            <para><paramref name="left"/> is greater than <paramref name="right"/>.</para>
                            </description>
            			</item>
            		</list>
            	</para>
            
            <para>Comparison operators always returns <c>false</c> if one of the operands is 
            <strong>Null</strong>.  Therefore, you must not assume that the reverse condition is 
            <c>true</c>. For example you cannot assume that the left operand is greater than the 
            right operand if the "<c>&lt;=</c>" operator returns <c>false</c>.</para> 
            </remarks>
            <param name="left">An instance of TdPeriodTimeWithTimeZone.</param>
            <param name="right">An instance of TdPeriodTimeWithTimeZone.</param>
        </member>
        <member name="M:Teradata.Client.Provider.TdPeriodTimeWithTimeZone.CompareTo(Teradata.Client.Provider.TdPeriodTimeWithTimeZone)">
            <summary>
            Compares this instance to the specified TdPeriodTimeWithTimeZone <paramref name="other"/>. 
            </summary>
            <returns>
            The result of the comparison is returned as an integer.
            </returns>
            <remarks>
            	<para>
                    The integer returned when this instance is compared to <paramref name="other"/>
                    indicates the following:
                </para>
            	<para>
            	<list type="table">
            		<listheader>
            			<term>Return Value</term>
            			<description>Meaning</description>
            		</listheader>
            		<item>
            			<term>Less than zero</term>
            			<description>
                            <para>This instance is less than <paramref name="other"/>.</para> 
                            <para>-or-</para>
                            <para>This instance is <see cref="F:Teradata.Client.Provider.TdPeriodTimeWithTimeZone.Null"/>.</para><br/>
                            <para><strong>Comparison Algorithm</strong></para>
                            <para>    this.Begin &lt; other.Begin OR (this.Begin == other.Begin AND this.End &lt; other.End)</para>
                        </description>
            		</item>
            		<item>
            			<term>Zero</term>
            			<description>
                            <para>This instance is equal to <paramref name="other"/>.</para>
                            <para>-or-</para>
                            <para>This instance and <paramref name="other"/> are <Strong>Null</Strong>.</para><br/>
                            <para><strong>Comparison Algorithm</strong></para>
                            <para>    this.Begin == other.Begin AND this.End == other.End</para>
                        </description>
            		</item>
            		<item>
            			<term>Greater than zero</term>
            			<description>
                            <para>This instnace is greater than <paramref name="other"/>.</para>
                            <para>-or-</para>
                            <para>This instance is <Strong>Null.</Strong></para><br/>
                            <para><strong>Comparison Algorithm</strong></para>
                            <para>    this.Begin &gt; other.Begin OR (this.Begin == other.Begin AND this.End &gt; other.End)</para>
                        </description>
            		</item>
            	</list>     
            	</para>
            </remarks>
            <param name="other">The TdPeriodTimeWithTimeZone to compare against.</param>
        </member>
        <member name="M:Teradata.Client.Provider.TdPeriodTimeWithTimeZone.CompareTo(System.Object)">
            <summary>
            Compares this instance to the specified TdPeriodTimeWithTimeZone <paramref name="obj"/>. 
            </summary>
            
            <returns>
            The result of the comparison is returned as an integer.
            </returns>
            
            <remarks>
            	<para>
                    The integer returned when this instance is compared to <paramref name="obj"/>
                    indicates the following:
                </para>
            	<para>
            	<list type="table">
            		<listheader>
            			<term>Return Value</term>
            			<description>Meaning</description>
            		</listheader>
            		<item>
            			<term>Less than zero</term>
            			<description>
                            <para>This instance is less than <paramref name="obj"/>.</para> 
                            <para>-or-</para>
                            <para>This instance is <see cref="F:Teradata.Client.Provider.TdPeriodTimeWithTimeZone.Null"/>.</para><br/>
                            <para><strong>Comparison Algorithm</strong></para>
                            <para>    this.Begin &lt; other.Begin OR (this.Begin == other.Begin AND this.End &lt; other.End)</para>
                        </description>
            		</item>
            		<item>
            			<term>Zero</term>
            			<description>
                            <para>This instance is equal to <paramref name="obj"/>.</para>
                            <para>-or-</para>
                            <para>This instance and <paramref name="obj"/> are <Strong>Null</Strong>.</para><br/>
                            <para><strong>Comparison Algorithm</strong></para>
                            <para>    this.Begin == other.Begin AND this.End == other.End</para>
                        </description>
            		</item>
            		<item>
            			<term>Greater than zero</term>
            			<description>
                            <para>This instance is greater than <paramref name="obj"/>.</para>
                            <para>-or-</para>
                            <para><paramref name="obj"/> is <Strong>Null.</Strong></para><br/>
                            <para><strong>Comparison Algorithm</strong></para>
                            <para>    this.Begin &gt; other.Begin OR (this.Begin == other.Begin AND this.End &gt; other.End)</para>
                        </description>
            		</item>
            	</list>     
            	</para>
            
              <para><paramref name="obj"/> must be an instance of TdPeriodTimeWithTimeZone type or <c>null</c> reference.</para>
            </remarks>
            
            <exception cref="T:System.ArgumentException"><paramref name="obj"/> is not of type TdPeriodTimeWithTimeZone</exception>
            <seealso cref="M:Teradata.Client.Provider.TdPeriodTimeWithTimeZone.CompareTo(Teradata.Client.Provider.TdPeriodTimeWithTimeZone)"/>
            
            <overloads>
            Compares this instance to the supplied object and returns whether it is less
            than, equal or greater than the supplied object.
            </overloads>
            
            <param name="obj">TdPeriodTimeWithTimeZone instance to compare against.</param>
        </member>
        <member name="M:Teradata.Client.Provider.TdPeriodTimeWithTimeZone.ToString">
            <summary>
            This instance of TdPeriodTimeWithTimeZone is converted to a String representation.
            </summary>
            
            <returns>The string representation of TdPeriodTimeWithTimeZone is returned.</returns>
            
            <remarks>
            <para>When a TdPeriodTimeWithTimeZone is converted to a string, both the beginning and ending bounds 
            will be included in the returning string.  The format of the string will be:</para>
            
            <pre>    (HH:mm:ss.ffffffZ, HH:mm:ss.ffffffZ)</pre>
            
            <para>An example of a string representation of a TdPeriodTimeWithTimeZonestampWithTimeWithTimeZoneZone is</para>
            
            <pre>    (2007-10-31 20:21:56.323+08:00, 2007-11-27 01:31:21.564+08:00)</pre>
            
            </remarks>
            <overloads>
            Returns the string representation of a period.
            </overloads>
        </member>
        <member name="M:Teradata.Client.Provider.TdPeriodTimeWithTimeZone.ToString(System.String)">
            <summary>
            TdPeriodTimeWithTimeZone is converted to the equivalent String using the specified format.
            </summary>
            
            <param name="format">The DateTimeWithTimeZone format string that will be used to format the TdPeriodTimeWithTimeZone.</param>
            
            <returns>A string representation of the Period.</returns>
            
            <remarks>
            <para>When a TdPeriodTimeWithTimeZone is converted to a string, both the beginning and ending bounds 
            will be included in the returning string.  The format of the string will be:</para>
            
            <pre>    (<i>Beginning Bound</i>, <i>Ending Bound</i>)   </pre>
            
            <para>The format specifier and the cultural information only affects the string 
            representation of the beginning and ending bounds of the period.  Neither parameter affects
            the format of the parameter.  That is, the delimiter (comma) used to separate the beginning
            and ending bounds, and the parentheses cannot be changed.</para>
            
            <para>If the format parameter is null, the string representation of TdPeriodTimeWithTimeZone will
            be equivalent to the "G" format specifier which is</para>
            
            <pre>    (HH:mm:ss.ffffffZ, HH:mm:ss.ffffffZ)</pre>
            
            <para>The following format specifiers are supported by TdPeriodTimeWithTimeZone:</para>
            
            <para>
            <list type="table">
            <listheader>
            <term>Format Specifier</term>
            <description>Description</description>
            </listheader>
            <item>
            <term>G</term>
            <description><para>The ANSI representation of the period:  
            (HH:mm:ss.ffffffZ, HH:mm:ss.ffffffZ).  </para>
            <para>Example:  (10:21:31.002-02:00, 12:45:00.212-02:00).</para></description>
            </item>
            <item>
            <term>l or L</term>
            <description><para>The Teradata database's literal representation of the period:
            PERIOD'(HH:mm:ss.ffffffZ, HH:mm:ss.ffffffZ)'.</para>
            <para>Example:  PERIOD'(10:21:31.002-02:00, 12:45:00.212-02:00)'.</para></description>
            </item>
            </list>
            </para>
            
            </remarks>
            
            <seealso cref="M:Teradata.Client.Provider.TdTimeWithTimeZone.ToString(System.String)"/>
        </member>
        <member name="M:Teradata.Client.Provider.TdPeriodTimeWithTimeZone.ToString(System.String,System.IFormatProvider)">
             <summary>
             TdPeriodTimeWithTimeZone is converted into the equivalent String representation using the 
             specified format.  Culture information is not used when converting a period to a string.
             </summary>
             
             <param name="format">The DateTimeWithTimeZone format string that will be used to format the TdPeriodTimeWithTimeZone.</param>
             <param name="formatProvider">The culture specific information.  The culture specific information
             is not used when converting a Period into a string.</param>
             
             <returns>A string representation of the period contained in TdPeriodTimeWithTimeZone.</returns>
             
             <remarks>
             <para>When a TdPeriodTimeWithTimeZone is converted to a string, both the beginning and ending bound 
             will be included in the returning string.  The format of the string will be:</para>
             
             <pre> (<i>Beginning Bound</i>, <i>Ending Bound</i>)   </pre>
             
             <para>The format specifier and the cultural information only affects the string 
             representation of the beginning and ending bounds of the period.  Neither parameter affects
             the format of the period.  That is, the delimiter (comma) used to separate the beginning
             and ending bounds, and the parentheses cannot be changed.</para>
            
             <para>If the format parameter is null, the string representation of TdPeriodTimeWithTimeZone will
             be equivalent to the "G" format specifier which is </para>
             
             <pre>    (HH:mm:ss.ffffffZ, HH:mm:ss.ffffffZ)   </pre>
             
             <para>The following format specifiers are supported by TdPeriodTimeWithTimeZone:</para>
             
             <para>
             <list type="table">
             <listheader>
             <term>Format Specifier</term>
             <description>Description</description>
             </listheader>
             <item>
             <term>G</term>
             <description><para>The ANSI representation of the period:  
             (HH:mm:ss.ffffffZ, HH:mm:ss.ffffffZ).  </para>
             <para>Example:  (10:21:31.002+05:00, 12:45:00.212+05:00).</para></description>
             </item>
             <item>
             <term>l or L</term>
             <description><para>The Teradata database's literal representation of the period:
             PERIOD'(HH:mm:ss.ffffffZ, HH:mm:ss.ffffffZ)'.</para>
             <para>Example:  PERIOD'(10:21:31.002+05:00, 12:45:00.212+05:00)'.</para></description>
             </item>
             </list>
             </para>
             
             </remarks>
             
             <seealso cref="M:Teradata.Client.Provider.TdTimeWithTimeZone.ToString(System.String,System.IFormatProvider)"/>
        </member>
        <member name="M:Teradata.Client.Provider.TdPeriodTimeWithTimeZone.Parse(System.String)">
            <summary>
            The specified string is converted into an equivalent TdPeriodTimeWithTimeZone.
            </summary>
            
            <param name="value">The string that is to be converted into a TdPeriodTimeWithTimeZone.</param>
            
            <returns>A TdPeriodTimeWithTimeZone is returned that is equivalent to the Period contained in the value string.</returns>
            
            <exception cref="T:System.ArgumentNullException">Value is a null reference.</exception>
            <exception cref="T:System.FormatException">Value does not contain a valid representation of a period.</exception>
            
            <remarks>
            <para>A period will have the following string representation: </para>
            
            <para>    (<i>Beginning Bound</i>, <i>Ending Bound</i>)</para>
            
            <para>The period must be surrounded by parentheses.  Both the Beginning and Ending
            bounds can <strong>optionally</strong> be surrounded by single quotes (" ' ").  
            The exception to this is when the Teradata <strong>literal</strong> string representation of
            period is specified.
            The comma (" , ") is used as the delimeter between the Begin and End bounds.  </para>
            
            <para>Refer to <see cref="M:Teradata.Client.Provider.TdPeriodTimeWithTimeZone.ToString(System.String)"/> for valid formats for TdPeriodTimeWithTimeZone.</para>
            </remarks>
            
            <seealso cref="M:Teradata.Client.Provider.TdTimeWithTimeZone.Parse(System.String)"/>
            <seealso cref="M:Teradata.Client.Provider.TdPeriodTimeWithTimeZone.ToString(System.String)"/>
        </member>
        <member name="M:Teradata.Client.Provider.TdPeriodTimeWithTimeZone.TryParse(System.String,Teradata.Client.Provider.TdPeriodTimeWithTimeZone@)">
             <summary>
             The specified string is converted into an equivalent TdPeriodTimeWithTimeZone.
             </summary>
             <param name="value">The string that contains the TdPeriodTimeWithTimeZone representation.</param>
             <param name="result">The TdPeriodTimeWithTimeZone representation of the period contained in the specified string.</param>
             <returns>A Boolean is returned that indicates whether the conversion succeeded.  
             <c>true</c> indicates that the conversion was successful and that the conversion is 
             returned through the result parameter.  <c>false</c> indicates that the conversion 
             failed.</returns>
             <remarks>
             <para>TryParse is the same as Parse except that an exception does not get thrown 
             when the conversion fails.</para>
             
             <para>A period will have the following string representation: </para>
             
             <para>    (<i>Beginning Bounds</i>, <i>Ending Bounds</i>)</para>
             
             <para>The period must be surrounded by parentheses.  Both the Beginning and Ending
             bounds can <strong>optionally</strong> be surrounded by single quotes (" ' ").  
             The exception to this is when the Teradata <strong>literal</strong> string representation of
             period is specified.
             The comma (" , ") is used as the delimeter between the Begin and End bounds.  </para>
             
             <para>Refer to <see cref="M:Teradata.Client.Provider.TdPeriodTimeWithTimeZone.ToString(System.String)"/> for valid formats for TdPeriodTimeWithTimeZone.</para>
             
              <para>If <paramref name="value"/> is null or String.Empty, a <strong>false</strong> is
             returned and the <paramref name="result"/> parameter is set to <see cref="F:Teradata.Client.Provider.TdPeriodTimeWithTimeZone.MinValue"/>. </para>
            
             <para>If the conversion fails the result parameter will be set to TdPeriodTimeWithTimeZone.MinValue.</para>
             
             </remarks>
             
             <seealso cref="M:Teradata.Client.Provider.TdPeriodTimeWithTimeZone.Parse(System.String)"/>
             <seealso cref="M:Teradata.Client.Provider.TdTimeWithTimeZone.TryParse(System.String,Teradata.Client.Provider.TdTimeWithTimeZone@)"/>
             <seealso cref="M:Teradata.Client.Provider.TdPeriodTimeWithTimeZone.ToString(System.String)"/>
        </member>
        <member name="M:Teradata.Client.Provider.TdPeriodTimeWithTimeZone.GetXmlSchema(System.Xml.Schema.XmlSchemaSet)">
             <summary>
             Specifies the XML Qualified name for <strong>TdPeriodTimeWithTimeZone</strong> XML type mapping.
             </summary>
             <param name="xmlSchemaSet">Holds zero or more XML Schema definition language (XSD) schemas.</param>
             <returns>
             Returns a XmlSchemaComplexType that describes a TdPeriodTimeWithTimeZone.
             </returns>
             <example>
             This examples shows how to use <strong>TdPeriodTimeWithTimeZone</strong> with the
             <see cref="T:System.Xml.Serialization.XmlSerializer"/> class.
             <see cref="T:System.Xml.Serialization.XmlElementAttribute"/> is used to indicate that the Teradata Database 
             column can be <strong>Null</strong>.
             <code>
              public class ProductAdvertisement
              {
                  public TdDate Date;
            
                  public Int32 ProductId;
            
                  public Int32? QuantityAvailable;
             
                  public TdPeriodTimeWithTimeZone advertisePeriod
            
                  public String adPlacement;
              }
             
              internal class ProductAdvertisementWriter
              {
              
                  public static void Write()
                  {
                      // Setup the advertisement
                      ProductAdvertisement x = new ProductAdvertisement();
              
                      x.Date = new TdDate(DateTimeWithTimeZone.Today);
                      x.ProductId = 100;
                      x.QuantityAvailable = 2000;
             
                      // Advertisement will last for 7 hours
                      x.AdvertisePeriod = new TdPeriodTimeWithTimeZone(
                             new TdTimeWithTimeZone(7, 0, 0, 0, new TimeSpan(-2, 0, 0)), 
                             new TdTimeWithTimeZone(14, 0, 0, 0, new TimeSpan(-2, 0, 0));
                      x.adPlacement = "The Newspaper";
            
                      // Write out today's advertisements to the file.
                      //
                      // Open the file.
                      XmlWriterSettings settings = new XmlWriterSettings();
                      settings.Indent = true;
                      XmlWriter writer = XmlWriter.Create(@"C:\Temp\ProductAdvertisements.XML", settings);
                      writer.WriteStartElement("ProductAdvertisements");
                
                      // Write out the schema.
                      XmlSchemas schemas = new XmlSchemas();
                      XmlSchemaExporter schExporter = new XmlSchemaExporter(schemas);
                      schExporter.ExportTypeMapping(new XmlReflectionImporter().ImportTypeMapping(typeof(ProductAdvertisement)));
                      schemas[0].Write(writer);
            
                      // Write out the advertisements.
                      XmlSerializer xml = new XmlSerializer(typeof(ProductAdvertisement));
                      xml.Serialize(writer, x);
              
                      // Close the document.
                      writer.WriteEndDocument();
                      writer.Close();
                  }
              }
             
             /* Output is:
             
             <TodayOrders>
               <xs:schema elementFormDefault="qualified" xmlns:xs="http://www.w3.org/2001/XMLSchema">
                 <xs:element name="Order" nillable="true" type="Order"/>
                 <xs:complexType name="Order">
                   <xs:sequence>
                     <xs:element minOccurs="1" maxOccurs="1" name="Date" type="xs:date"/>
                     <xs:element minOccurs="1" maxOccurs="1" name="ProductId" type="xs:int"/>
                     <xs:element minOccurs="1" maxOccurs="1" name="QuantityAvailable" type="xs:int"/>
                     <xs:element minOccurs="1" maxOccurs="1" name="AdvertisePeriod" type="Teradata.Client.Provider.PeriodTimeWithTimeZone"/>
                     <xs:element minOccurs="1" maxOccurs="1" name="AdPlacement" nillable="true" type="xs:string"/>
                   </xs:sequence>
                 </xs:complexType>
                 <xs:complexType name="Teradata.Client.Provider.PeriodTimeWithTimeZone">
                   <xs:sequence>
                     <xs:element name="BeginBound" type="xs:time"/>
                     <xs:element name="EndBound" type="xs:time"/>
                   </xs:sequence>
                 </xs:complexType>
               </xs:schema>
               <Order xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xmlns:xsd="http://www.w3.org/2001/XMLSchema">
                 <Date>2007-02-01</Date>
                 <ProductId>100</ProductId>
                 <QuantityAvailable>2000</QuantityAvailable>
                 <AdvertisePeriod>
                     <BeginBound>07:00:00-02:00</BeginBound>
                     <EndBound>14:00:00-02:00</EndBound>
                 </AdvertisePeriod>
                 <AdPlacement>The Newspaper</AdPlacement>
               </Order>
             </TodayOrders>
             
             */
             </code>
             </example>        
        </member>
        <member name="M:Teradata.Client.Provider.TdPeriodTimeWithTimeZone.IntervalTimeSpan">
            <summary>
            Gets the span of time in the period as a TimeSpan.
            </summary>
            <returns>The TimeSpan value that contains the span of time starting from the beginning bound to, 
            but not including, the ending bound.</returns>
            <remarks>
            <para>The TimeSpan that is returned represents the number of hours, minutes, seconds
            and microseconds of the duration.</para>
            </remarks>
        </member>
        <member name="M:Teradata.Client.Provider.TdPeriodTimeWithTimeZone.IntervalDayToSecond">
            <summary>
               Calculates the span of time between the starting and ending bounds and 
               returns the result in a <strong>TdIntervalDayToSecond</strong> structure.  
            </summary>
            <returns>
               The <strong>TdIntervalDayToSecond</strong> value that contains the difference in hours
               minutes, seconds and microseconds between the period ending bound and the 
               period starting bound.
            </returns>&gt;
            <exception cref="T:Teradata.Client.Provider.TdException">This instance of <strong>TdPeriodTimeWithTimeZone</strong> is null.</exception>
            <remarks>
            <para>
               The difference between the ending bound and the starting bound is calculated.  The number
               of hours, minutes, seconds and microseconds are calculated and returned in a 
               <strong>TdIntervalDayToSecond</strong> type.
            </para>
            </remarks>
        </member>
        <member name="M:Teradata.Client.Provider.TdPeriodTimeWithTimeZone.LeftDiff(Teradata.Client.Provider.TdPeriodTimeWithTimeZone,Teradata.Client.Provider.TdPeriodTimeWithTimeZone)">
            <summary>
            The period whose beginning and ending bounds are defined as the beginning bound of the 
            <paramref name="left"/> operand and the beginning bound of the <paramref name="right"/> 
            operand when the operands overlap.
            </summary>
            <param name="left">The left TdPeriodTimeWithTimeZone operand.</param>
            <param name="right">The right TdPeriodTimeWithTimeZone operand.</param>
            <returns>A TdPeriodTimeWithTimeZone is returned that includes the portion of the left operand that 
            exists before the beginning of the right operand when the operands overlap.</returns>
            <remarks>
            <para>A <see cref="F:Teradata.Client.Provider.TdPeriodTimeWithTimeZone.Null"/> is returned under the following scenarios:</para>
            
            <list type="bullet">
            <item>The left and right operands do not overlap.</item>
            <item>The beginning bound of the left operand is less than the beginning 
            bound of the right operand.</item>
            <item>Either the left or right operand is null.</item>
            </list>
            
            <para>In the following examples the left and right operand are defined as
            <strong>(bL, eL)</strong> and <strong>(bR, eR)</strong>, respectively.</para>
            
            <list type="table">
            <listheader>
            <term>Example</term>
            <description>Comments</description>
            </listheader>
            <item>
            <term>
            <pre>
            |-------|------|------|
            bL      bR     eL     eR
            |=======|
            </pre>
            </term>
            <description>Ldiff = (bL, bR)</description>
            </item>
            <item>
            <term>
            <pre>
            |------|------|-----|
            bL     bR     eR    eL
            |======|
            </pre>
            </term>
            <description>Ldiff = (bL, bR)</description>
            </item>
            <item>
            <term>
            <pre>
            |-----|-------|-----|
            bL    eL      bR    eR
            </pre>
            </term>
            <description><para>Ldiff = TdPeriodTimestampWithTimeZone.Null</para>
            <para>The left and right operands do not overlap.</para>
            </description>
            </item>
            <item>
            <term>
            <pre>
            |------|-----|------|
            bR     bL    eR     eL
            </pre>
            </term>
            <description><para>Ldiff = TdPeriodTimestampWithTimeZone.Null</para>
            <para>The beginning bound of the right operand is greater than the beginning bound of the left.</para>
            </description>
            </item>
            <item>
            <term>
            <pre>
            |--------|-------|
            bL     eL bR     eR
            </pre>
            </term>
            <description><para>Ldiff = TdPeriodTimestampWithTimeZone.Null</para>
            <para>The left and right operands do not overlap.</para>
            </description>
            </item>
            <item>
            <pre>
              |---------|--------|
            bL bR       eR       eL
            </pre>
            <term>
            </term>
            <description><para>Ldiff = TdPeriodTimestampWithTimeZone.Null</para>
            <para>The beginning bounds of both operands are equal.  A period cannot be
            created whose beginning and ending bounds are equal.</para>
            </description>
            </item>
            </list>
            </remarks>
        </member>
        <member name="M:Teradata.Client.Provider.TdPeriodTimeWithTimeZone.RightDiff(Teradata.Client.Provider.TdPeriodTimeWithTimeZone,Teradata.Client.Provider.TdPeriodTimeWithTimeZone)">
            <summary>
            The period that contains the portion from the ending bound of the <paramref name="left"/> operand to
            the ending bound of the <paramref name="right"/> when the operands overlap.
            </summary>
            <param name="left">The left TdPeriodTimeWithTimeZone operand.</param>
            <param name="right">The right TdPeriodTimeWithTimeZone operand.</param>
            <returns>A <see cref="T:Teradata.Client.Provider.TdPeriodTimeWithTimeZone"/> is returned that contains the period that begins from the 
            end of the left operand to the end of the right when the operands overlap.</returns>
            <remarks>
            <para>A <see cref="F:Teradata.Client.Provider.TdPeriodTimeWithTimeZone.Null"/> is returned under the following scenarios:</para>
            
            <list type="bullet">
            <item>The left and right operands do not overlap.</item>
            <item>The ending bound of the left operand is greater or equal to the ending bound of the right.</item>
            <item>Either the left or right operand is null.</item>
            </list>
            
            <para>In the following examples the left and right operands are defined as
            <strong>(bL, eL)</strong> and <strong>(bR, eR)</strong>, respectively.</para>
            
            <list type="table">
            <listheader>
            <term>Example</term>
            <description>Comments</description>
            </listheader>
            <item>
            <term>
            <pre>
            |-------|-----|-----|
            bL      bR    eL    eR
                          |=====|
            </pre>
            </term>
            <description>Rdiff = (eL, eR)</description>
            </item>
            <item>
            <term>
            <pre>
            |-------|------|-----|
            bR      bL     eL    eR
                           |=====|
            </pre>
            </term>
            <description>Rdiff = (eL, eR)</description>
            </item>
            <item>
            <term>
            <pre>
            |------|------|------|
            bL     bR     eR     eL
            </pre>
            </term>
            <description><para>Rdiff = null</para>
            <para>The left operand's ending bound is greater than the ending bound of the right operand.</para>
            </description>
            </item>
            <item>
            <term>
            <pre>
            |------|-----|-----|
            bL     eL    bR    eR
            </pre>
            </term>
            <description><para>Rdiff = null</para>
            <para>The left and right operands do not overlap.</para>
            </description>
            </item>
            <item>
            <term>
            <pre>
            |------|-----|-----|
            bR     eR    bL    eL
            </pre>
            </term>
            <description><para>Rdiff = null</para>
            <para>The left and right operands do not overlap.</para>
            </description>
            </item>
            <item>
            <term>
            <pre>
            |-------|-------|
            bL      bR    eL eR
            </pre>
            </term>
            <description><para>Rdiff = null</para>
            <para>The ending bounds are equal.  In other words, a period cannot be defined
            whose starting and ending bounds are equal.</para>
            </description>
            </item>
            </list>        
            </remarks>
        </member>
        <member name="M:Teradata.Client.Provider.TdPeriodTimeWithTimeZone.Normalize(Teradata.Client.Provider.TdPeriodTimeWithTimeZone,Teradata.Client.Provider.TdPeriodTimeWithTimeZone)">
            <summary>
            A TdPeriodTimeWithTimeZone that contains a period that encompasses both periods of the
            left and right operands.  The beginning bound is defined as the minimum of
            left and right beginning bounds, and the ending bound is defined as the 
            maximum of the left and right ending bounds.  The operands must either meet
            or overlap.
            </summary>
            <param name="left">The left TdPeriodTimeWithTimeZone operand.</param>
            <param name="right">The right TdPeriodTimeWithTimeZone operand.</param>
            <returns>A TdPeriodTimeWithTimeZone is returned whose period includes both operands.</returns>
            <remarks>
            <para>A <see cref="F:Teradata.Client.Provider.TdPeriodTimeWithTimeZone.Null"/> is returned under the following scenarios:</para>
            
            <list>
            <item>The left and right operands do not overlap.</item>
            <item>Either the left or right operand is null.</item>
            </list>
            
            <para>In the following examples the left and right operands are defined as
            <strong>(bL, eL)</strong> and <strong>(bR, eR)</strong>, respectively.</para>
            
            <list>
            <item>The left and right operands do not overlap.</item>
            <item>Either the left or right operand is null.</item>
            </list>
            
            <para>In the following examples the left and right operands are defined as
            <strong>(bL, eL)</strong> and <strong>(bR, eR)</strong>, respectively.</para>
            
            <list type="table">
            <listheader>
            <term>Example</term>
            <description>Comments</description>
            </listheader>
            <item>
            <term>
            <pre>
            |--------|------|------|
            bL       bR     eL     eR
            |======================|
            </pre>
            </term>
            <description>Normalize = (bL, eR)</description>
            </item>
            <item>
            <term>
            <pre>
            |-------|------|------|
            bR      bL     eR     eL
            |=====================|
            </pre>
            </term>
            <description>Normalize = (bR, eL)</description>
            </item>
            <item>
            <term>
            <pre>
            |-------|------|-------|
            bL      bR     eR      eL
            |======================|
            </pre>
            </term>
            <description>Normalize = (bL, eL)</description>
            </item>
            <item>
            <term>
            <pre>
            |--------|------|------|
            bR       bL     eL     eR
            |======================|
            </pre>
            </term>
            <description>Normalize = (bR, eR)</description>
            </item>
            <item>
            <term>
            <pre>
            |---------|---------|
            bL      eL bR       eR
            |===================|
            </pre>
            </term>
            <description> Normalize = (bL, eR)</description>
            </item>
            <item>
            <term>
            <pre>
            |-------------------|
            bL                  eL
            eR                  eR
            |===================|
            </pre>
            </term>
            <description><para>Normalize = (bL, eL)</para>
            <para>The periods are equal.  In this scenario, the period specified as the left
            parameter will be returned.  It will be adjusted to the maximum scale between the
            left and right parameters.</para>
            </description>
            </item>
            <item>
            <term>
            <pre>
            |-----|-------|------|
            bL    eL      bR     eR
            </pre>
            </term>
            <description><para>Normalize = TdPeriodTimestampWithTimeZone.Null</para>
            <para>The periods do not overlap.</para>
            </description>
            </item>
            </list>        
            </remarks>
        </member>
        <member name="M:Teradata.Client.Provider.TdPeriodTimeWithTimeZone.Precedes(Teradata.Client.Provider.TdPeriodTimeWithTimeZone)">
            <summary>
            Indicates whether this instance precedes the period value.
            </summary>
            <param name="value">The TdPeriodTimeWithTimeZone operand.</param>
            <returns>A <c>true</c> is returned when this instance precedes the value, otherwise 
            a <c>false </c>is returned.</returns>
            <remarks>
            <para>A <c>false</c> will be returned if the <paramref name="value"/> is <see cref="F:Teradata.Client.Provider.TdPeriodTimeWithTimeZone.Null"/>.</para>
            
            <para>This instance precedes the value if the ending bound of this instance is
            less than or equal to the beginning bound of the value.</para>
            
            <para>In the following examples consider the Left operand to be this instance, and the Right operand as 
            the value.  The left and right operands are defined as
            <strong>(bL, eL)</strong> and <strong>(bR, eR)</strong>, respectively.</para>
            
            <list type="table">
            <listheader>
            <term>Example</term>
            <description>Comments</description>
            </listheader>
            <item>
            <term>
            <pre>
            |--------|--------|
            bL     eL bR      eR
            </pre>
            </term>
            <description>Precedes = true</description>
            </item>
            <item>
            <term>
            <pre>
            |------|----|------|
            bL     eL   bR     eR
            </pre>
            </term>
            <description>Precedes = true</description>
            </item>
            <item>
            <term>
            <pre>
            |-----|-------|------|
            bL    bR      eL     eR
            </pre>
            </term>
            <description><para>Precedes = false</para>
            <para>There is an intersection between the operands; therfore, the left 
            does not precede the right.</para>
            </description>
            </item>
            <item>
            <term>
            <pre>
            |-------|--------|
            bR    eR bL      eL
            </pre>
            </term>
            <description><para>Precedes = false</para>
            <para>The left operand appears after the right operand.</para>
            </description>
            </item>
            </list>        
            </remarks>
            <overloads>
            Determines whether a period or TdTimeWithTimeZone preceds this instance of TdPeriodTimeWithTimeZone.
            </overloads>
        </member>
        <member name="M:Teradata.Client.Provider.TdPeriodTimeWithTimeZone.Precedes(Teradata.Client.Provider.TdTimeWithTimeZone)">
            <summary>
            Indicates that this instance precedes the TdTimeWithTimeZone value.
            </summary>
            <param name="value">The TdTimeWithTimeZone value.</param>
            <returns>A <c>true</c> is returned when this instance precedes the value, otherwise a 
            <c>false</c> is returned.</returns>
            <remarks>
            <para>A <c>false</c> will be returned if the <paramref name="value"/> is <see cref="F:Teradata.Client.Provider.TdTimeWithTimeZone.Null"/>.</para>
            
            <para>This instance will precede the value if the ending bound of this instance
            is less than or equal to the value.</para>
            
            <para>The following are examples.</para>
            <list type="table">
            <listheader>
            <term>Result</term>
            <description>Precedes</description>
            </listheader>
            <item>
            <term>true</term>
            <description><para>Period: (00:04:01-01:00, 03:04:15-01:00)</para>
                         <para>Time: 03:04:15-01:00</para></description>
            </item>
            <item>
            <term>true</term>
            <description><para>Period: (10:05:31+03:00, 12:06:05+03:00)</para>
                         <para>Time: 10:10:01+03:00</para></description>
            </item>
            <item>
            <term>false</term>
            <description><para>Period: (11:12:15+05:00, 20:12:31+05:00)</para>
                         <para>Time: 15:12:20+05:00</para></description>
            </item>
            <item>
            <term>false</term>
            <description><para>Period: (22:02:01+08:00, 23:03:01+08:00)</para>
                         <para>Time: 22:02:01+08:00</para></description>
            </item>
            <item>
            <term>false</term>
            <description><para>Period: (17:09:05-01:00, 21:09:15-01:00)</para>
                         <para>Time: 17:01:17-01:00</para></description>
            </item>
            </list>
            </remarks>
        </member>
        <member name="M:Teradata.Client.Provider.TdPeriodTimeWithTimeZone.Succeeds(Teradata.Client.Provider.TdPeriodTimeWithTimeZone)">
            <summary>
            Indicates whether this instance succeeds the period value.
            </summary>
            <param name="value">The  TdPeriodTimeWithTimeZone operand.</param>
            <returns>A <c>true</c> is returned when this instance succeeds the value,  otherwise 
            a <c>false </c>is returned.</returns>
            <remarks>
            <para>A <c>false</c> will be returned if the <paramref name="value"/> is <see cref="F:Teradata.Client.Provider.TdPeriodTimeWithTimeZone.Null"/>.</para>
            
            <para>This instance will succeed the value if the beginning bound of this instance is
            greater than or equal to the ending bound of the value.</para>
            
            <para>In the following examples consider the Left operand to be this instance, and the Right operand
            as the value.  The Left and Right operands are defined as
            <strong>(bL, eL)</strong> and <strong>(bR, eR)</strong>, respectively.</para>
            
            <list type="table">
            <listheader>
            <term>Example</term>
            <description>Comments</description>
            </listheader>
            <item>
            <term>
            <pre>
            |--------|--------|
            bL     eL bR      eR
            </pre>
            </term>
            <description><para>Succeeds = false</para>
            <para>The left operand appears before the right operand.</para>
            </description>
            </item>
            <item>
            <term>
            <pre>
            |------|------|-------|
            bL     eL     bR      eR
            </pre>
            </term>
            <description><para>Succeeds = false</para>
            <para>The left operand appears before the right operand.</para>
            </description>
            </item>
            <item>
            <term>
            <pre>
            |-----|-----|------|
            bL    bR    eL     eR
            </pre>
            </term>
            <description><para>Succeeds = false</para>
            <para>There is an intersection between the operands; therfore, the left 
            does not succeed the right.</para>
            </description>
            </item>
            <item>
            <term>
            <pre>
            |-------|--------|
            bR    eR bL      eL
            </pre>
            </term>
            <description>Succeeds = true</description>
            </item>
            <item>
            <term>
            <pre>
            |-------|--|------|
            bR      eR bL     eL
            </pre>
            </term>
            <description>Succeeds = true</description>
            </item>
            </list>        
            </remarks>
            <overloads>
            Deterines whether a period or TdTimeWithTimeZone succeeds this instance of TdPeriodTimeWithTimeZone.
            </overloads>
        </member>
        <member name="M:Teradata.Client.Provider.TdPeriodTimeWithTimeZone.Succeeds(Teradata.Client.Provider.TdTimeWithTimeZone)">
            <summary>
            Indicates that this instance succeeds the TdTimeWithTimeZone value.
            </summary>
            <param name="value">The TdTimeWithTimeZone value.</param>
            <returns>A <c>true</c> is returned when this instance succeeds the value, otherwise a 
            <c>false</c> is returned.</returns>
            <remarks>
            <para>A <c>false</c> will be returned if the <paramref name="value"/> is <see cref="F:Teradata.Client.Provider.TdTimeWithTimeZone.Null"/>.</para>
            
            <para>This instance will succeed the value if the beginning bound of this instance
            is greater than the value.</para>
            
            <para>The following are examples.</para>
            <list type="table">
            <listheader>
            <term>Result</term>
            <description>Succeeds</description>
            </listheader>
            <item>
            <term>false</term>
            <description><para>Period: (01:04:01+01:00, 02:04:15+01:00)</para>
                         <para>Time: 02:04:15+01:00</para></description>
            </item>
            <item>
            <term>false</term>
            <description><para>Period: (09:05:31+04:00, 10:06:05+04:00)</para>
                         <para>Time: 11:10:01+04:00</para></description>
            </item>
            <item>
            <term>false</term>
            <description><para>Period: (12:12:15-02:00, 15:12:31-02:00)</para>
                         <para>Time: 13:12:20-02:00</para></description>
            </item>
            <item>
            <term>false</term>
            <description><para>Period: (00:02:01-07:00, 03:03:01-07:00)</para>
                         <para>Time: 00:02:01-07:00</para></description>
            </item>
            <item>
            <term>true</term>
            <description><para>Period: (10:09:05+02:00, 14:09:15+02:00)</para>
                         <para>Time: 08:01:17+02:00</para></description>
            </item>
            <item>
            <term>true</term>
            <description><para>Period: (20:09:05+08:00, 21:09:15+08:00)</para>
                         <para>Time: 20:09:04+08:00</para></description>
            </item>
            </list>
            </remarks>
        </member>
        <member name="M:Teradata.Client.Provider.TdPeriodTimeWithTimeZone.Meets(Teradata.Client.Provider.TdPeriodTimeWithTimeZone)">
            <summary>
            Indicates whether this instance meets the period value.  
            </summary>
            <param name="value">The TdPeriodTimeWithTimeZone operand.</param>
            <returns>A <c>true</c> is returned if this instance meets the value, otherwise a 
            <c>false</c> is returned.</returns>
            <remarks>
            <para>A <c>false</c> will be returned if the <paramref name="value"/> is <see cref="F:Teradata.Client.Provider.TdPeriodTimeWithTimeZone.Null"/>.</para>
            
            <para>Two periods meet if the beginning bound of one period equals the ending bound of the other.</para>
            
            <para>In the following examples consider the Left operand to be this instance, and the Right as 
            the value.  The Left and Right operands are defined as
            <strong>(bL, eL)</strong> and <strong>(bR, eR)</strong>, respectively.</para>
            
            <list type="table">
            <listheader>
            <term>Example</term>
            <description>Comments</description>
            </listheader>
            <item>
            <term>
            <pre>
            |---------|------------|
            bR      eR bL          eL
            </pre>
            </term>
            <description><para>Meets = true</para>
            <para>The ending bound of the right operand equals the beginning bound of the left operand.</para>
            </description>
            </item>
            <item>
            <term>
            <pre>
            |---------|--------|
            bL      eL bR      eR
            </pre>
            </term>
            <description><para>Meets = true</para>
            <para>The ending bound of the left operand equals the beginning bound of the right operand.</para>
            </description>
            </item>
            <item>
            <term>
            <pre>
              |------------|
            bL bR        eL eR
            </pre>
            </term>
            <description><para>Meets = false</para>
            <para>The periods are equal.</para>
            </description>
            </item>
            <item>
            <term>
            <pre>
              |--------|--------|
            bL bR      eL       eR
            </pre>
            </term>
            <description><para>Meets = false</para>
            <para>The period (bL, eL) is contained within (bR, eR).</para>
            </description>
            </item>
            <item>
            <term>
            <pre>
            |-------|----|-------|
            bL      eL   bR      eR
            </pre>
            </term>
            <description>Meets = false</description>
            </item>
            </list>        
            </remarks>
            <overloads>
            Determines whether a period or TdTimeWithTimeZone meets this instance of TdPeriodTimeWithTimeZone.
            </overloads>
        </member>
        <member name="M:Teradata.Client.Provider.TdPeriodTimeWithTimeZone.Meets(Teradata.Client.Provider.TdTimeWithTimeZone)">
            <summary>
            Indicates whether this instance meets the TdTimeWithTimeZone value.
            </summary>
            <param name="value">The TdTimeWithTimeZone operand. </param>
            <returns>A <c>true</c> is returned if this instance meets the value, otherwise a 
            <c>false</c> is returned.</returns>
            <remarks>
            <para>A <c>false</c> will be returned if this <paramref name="value"/> is <see cref="F:Teradata.Client.Provider.TdTimeWithTimeZone.Null"/>.</para>
            
            <para>A period and TdTimeWithTimeZone value meet if the value is not included in the period but
            is one time granule less than the starting bound or is the same as the ending bound. </para>
            
            <para>The following are examples:</para>
            
            <list type="table">
            <listheader>
            <term>Result</term>
            <description>Meets</description>
            </listheader>
            <item>
            <term>true</term>
            <description><para>Period: (12:21:41+08:00, 14:21:22+08:00) </para>
                         <para>Time: 14:21:22+08:00</para></description>
            </item>
            <item>
            <term>true</term>
            <description><para>Period: (00:00:00-10:00, 01:00:10-10:00) </para>
                         <para>Time: 23:59:59-00:00</para></description>
            </item>
            <item>
            <term>false</term>
            <description><para>Period: (20:21:43+03:00, 23:00:00+03:00)</para> 
                         <para>Time: 23:00:01+03:00</para></description>
            </item>
            <term>
            <item>false</item>
            <description><para>Period: (11:43:00-01:00, 11:50:32-01:00) </para>
                         <para>Time: 11:45:20-01:00</para></description>
            </term>
            </list>
            </remarks>
        </member>
        <member name="M:Teradata.Client.Provider.TdPeriodTimeWithTimeZone.Intersect(Teradata.Client.Provider.TdPeriodTimeWithTimeZone,Teradata.Client.Provider.TdPeriodTimeWithTimeZone)">
            <summary>
            The intersection between the <paramref name="left"/> and <paramref name="right"/>
            operands is calculated.
            </summary>
            
            <param name="left">The left TdPeriodTimeWithTimeZone operand.</param>
            <param name="right">The right TdPeriodTimeWithTimeZone operand.</param>
            
            <returns>A period that is the intersection between the left and right operands 
            is returned.</returns>
            
            <remarks>
            <para>A <see cref="F:Teradata.Client.Provider.TdPeriodTimeWithTimeZone.Null"/> is returned under the following scenarios:</para>
            <list type="bullet">
            <item>Either the left or right operand is TdPeriodTimeWithTimeZone.Null.</item>
            <item>The left and right operands do not intersect.</item>
            <item>The ending bound of one operand is the same as the beginning bound of the other operand.</item>
            </list>
            
            <para>In the following examples <strong>(bL, eL)</strong> is the left operand and 
            <strong>(bR, eR)</strong> is the right operand.</para>
            
            <list type="table">
            <listheader>
            <term>Example</term>
            <description>Comments</description>
            </listheader>
            <item>
            <term>
            <pre>
            |-----|-------|------|
            bL    bR      eL     eR
                  |=========|
            </pre>
            </term>
            <description>Intersection = (bR, eL)</description>
            </item>
            <item>
            <term>
            <pre>
            |------|-------|--------|
            bL     bR      eR       eL
                   |=======|  
            </pre>
            </term>
            <description>Intersection = (bR, eR)</description>
            </item>
            <item>
            <term>
            <pre>
            |------------|-----------|
            bL         eL bR         eR
            </pre>
            </term>
            <description><para>Intersection = null</para>
            <para>The ending bound of the first operand is the same as the 
            starting bound of the second operand, eL = bR.</para>
            </description>
            </item>
            <item>
            <term>
            <pre>
            |-----------|---|--------|
            bL          eL  bR       eR
            </pre>
            </term>
            <description><para>Intersection = null</para>
            <para>The periods do not intersect.</para>
            </description>
            </item>
            </list>        
            </remarks>
        </member>
        <member name="M:Teradata.Client.Provider.TdPeriodTimeWithTimeZone.Contains(Teradata.Client.Provider.TdTimeWithTimeZone)">
            <summary>
            Indicates whether the TdTimeWithTimeZone <paramref name="value"/> is contained in this
            instance of TdPeriodTimeWithTimeZone.
            </summary>
            <param name="value">The TdTimeWithTimeZone that is to be found in the period.</param>
            <returns>A boolean value is returned that indicates whether the value
            is contained in the period.</returns>
            <remarks>
            A <c>false</c> is returned if value is <strong>Null</strong>.
            
            A <c>true</c> is returned if the value is contained in the period, otherwise 
            a <c>false</c> is returned.
            </remarks>
        </member>
        <member name="M:Teradata.Client.Provider.TdPeriodTimeWithTimeZone.ToUtcPeriodTime">
            <summary>
            This instance of TdPeriodTimeWithTimeZone is converted into a TdPeriodTime.
            </summary>
            <returns>A TdPeriodTime is returned.</returns>
            <remarks>
            <para>
            When the TdPeriodTimeWithTimeZone is converted into a TdPeriodTime the bounds
            of the TdPeriodTimeWithTimeZone is converted into their UTC representation.  For example, when the
            period
            </para>
            
                <pre>    (10:32:12.111-08:00, 12:00:00.321-08:00)</pre>
            
            <para>
            is converted into a TdPeriodTimestamp the result is
            </para>
            
                <pre>    (18:32:12.111, 20:00:00.321)</pre>
            </remarks>
        </member>
        <member name="P:Teradata.Client.Provider.TdPeriodTimeWithTimeZone.ObjectId">
            <summary>
            Gets the Instance Object Identifier.
            </summary>
        </member>
        <member name="P:Teradata.Client.Provider.TdPeriodTimeWithTimeZone.IsNull">
            <summary>
            Gets the boolean that indicates whether this TdPeriodTimeWithTimeZone instance is <see cref="F:Teradata.Client.Provider.TdPeriodTimeWithTimeZone.Null"/>. 
            </summary>
            <value>
            <c>true</c> if this TdPeriodTimeWithTimeZone is Null; <c>false</c> otherwise.
            </value>
        </member>
        <member name="P:Teradata.Client.Provider.TdPeriodTimeWithTimeZone.Begin">
            <summary>
            Gets the beginning bound of the period.
            </summary>
            <value>The TdTimeWithTimeZone representation of the beginning bound.</value>
            <exception cref="T:Teradata.Client.Provider.TdException">Period is null.</exception>
            <remarks>
            The beginning bound is <strong>inclusive</strong> to the Period.  For more information
            about periods refer to <a href="PeriodTypeOverview.htm">Period Types Overview</a>.
            </remarks>
            <seealso cref="!:PeriodTypeOverview.html">Period Types Overview</seealso>
        </member>
        <member name="P:Teradata.Client.Provider.TdPeriodTimeWithTimeZone.End">
            <summary>
            Gets the ending bound of the period.
            </summary>
            <value>The TdTimeWithTimeZone representation of the ending bound.</value>
            <exception cref="T:Teradata.Client.Provider.TdException">Period is null.</exception>
            <remarks>
            The ending bound is <strong>exclusive</strong> to the period.  For more information
            about periods refer to <a href="PeriodTypeOverview.htm">Period Types Overview</a>
            </remarks>
            <seealso cref="!:PeriodTypeOverview.html">Period Types Overview</seealso>
        </member>
        <member name="P:Teradata.Client.Provider.TdPeriodTimeWithTimeZone.Last">
            <summary>
            Gets the last time element of the period.  
            </summary>
            <exception cref="T:Teradata.Client.Provider.TdException">Period is null.</exception>
            <value>The TdTimeWithTimeZonestamp value that is equivalent to
            <see cref="P:Teradata.Client.Provider.TdPeriodTimeWithTimeZone.End"/> - 10^-<see cref="P:Teradata.Client.Provider.TdPeriodTimeWithTimeZone.Scale"/>.</value>
        </member>
        <member name="P:Teradata.Client.Provider.TdPeriodTimeWithTimeZone.Scale">
            <summary>
            Gets the scale of this instance of TdPeriodTimeWithTimeZone.
            </summary>
            <value>An Int32 that represents the Scale.</value>
            <exception cref="T:Teradata.Client.Provider.TdException">Period is null.</exception>
            <remarks>
            The Scale refers to the scale of both the beginning and ending
            bounds.
            </remarks>
        </member>
        <member name="P:Teradata.Client.Provider.TdPeriodTimeWithTimeZone.Value">
            <summary>
            Gets the .Net type representation (String) of the TdPeriodTimeWithTimeZone value.
            </summary>
            <exception cref="T:Teradata.Client.Provider.TdException">Period is null.</exception>
        </member>
        <member name="T:Teradata.Client.Provider.TdQueryBand">
            <summary>
            TdQueryBand manages Teradata Query Bands for an application.  It enables an application
            to create, modify, and remove Query Bands.  Query Bands that are managed by TdQueryBand
            can be applied to a Connection or Transaction by calling <see cref="M:Teradata.Client.Provider.TdConnection.ChangeQueryBand(Teradata.Client.Provider.TdQueryBand)"/>
            or <see cref="M:Teradata.Client.Provider.TdTransaction.ChangeQueryBand(Teradata.Client.Provider.TdQueryBand)"/>, respectively.
            </summary>
            <remarks>
            <para>
            The <strong>Teradata Database</strong> supports <i>Query Bands</i> beginning with the <strong>12.0</strong> release.  
            If an attempt is made to use Query Bands when connected to a version of the Teradata Database that is
            prior to 12.0, a <see cref="T:Teradata.Client.Provider.TdException"/> will be thrown.
            </para>
            
            <para>
            Some of the uses for Query Bands are to enhance security (Trusted Session),
            enable job control, and to perform audits. Query Bands will also allow 
            administrators to better analyze the use of their Teradata Database. For more
            information refer to <a href="QueryBandOverview.html">Query Banding and Trusted
            Sessions</a> and the Teradata Manual:  SQL Data Definition Language Detailed Topics.
            </para>
                
            <para>
            A <i>Trusted Session</i> is defined using Query Bands.  To define a Trusted Session
            the reserved Query Band keys <strong>ProxyUser</strong> and/or <strong>ProxyRole</strong>
            are defined.  The values assigned to the ProxyUser and/or ProxyRole have corresponding
            access rights in the Teradata Database.  When an application connects to a Teradata Database,
            the user of the application is limited to only those rights granted to the ProxyUser
            and/or ProxyRole.
            </para>
            
            <para>
            Trusted Sessions are supported by Teradata Database version 13.0 or greater.  A 
            <strong>TdException</strong> will get thrown indicating that <i>Trusted Sessions</i>
            are not supported under the following conditions:
            <list type="bullet">
            <item>
                <description>
                Connected to a version of the Teradata Database prior to 13.0.
                </description>
            </item>
            <item>
                <description>
                The ProxyUser and/or ProxyRole keys have been set to values.
                </description>
            </item>
            </list>
            </para>
            
            <para>
            The <strong>TdQueryBand</strong> class enables an application to define Query Bands that can
            be applied at the <i>Connection</i> or <i>Transaction</i> level. Query Bands are
            defined as key=value pairs. When a Query Band is represented as a string it will
            appear as:
            </para>
                
            <para>"ProxyUser = user1; ApplicationName = app1; Group = group1;"</para>
            
            <para>
            For more information on Connection and Transaction level Query Bands refer
            to the <a href="QueryBandConnectionLevel.html">Connection Level Query Bands</a> and
            <a href="QueryBandTransactionLevel.html">Transaction Level Query Bands</a> sections of the
            Developer's Guide.
            </para>
            
            <para>
            If the <strong>TdQueryBand</strong> class is to be used, an application <strong>must not</strong> execute
            SET QUERY_BAND statements.  The provider will manage the creation and deletion of
            Query Bands.
            </para>
            
            <para>
            If connection pooling has been enabled, the Query Bands will be removed from the
            connection when <see cref="M:Teradata.Client.Provider.TdConnection.Close"/> has been called.  The Query Bands
            that were specified in the connection string will be re-applied to the connection when
            it is fetched from the pool by <strong>TdConnection.Open</strong>.
            </para>
            
            <para>
            The <see cref="P:Teradata.Client.Provider.TdConnectionStringBuilder.QueryBand"/> connection 
            string attribute does not affect the association of the Connection String with
            a Connection Pool.  Refer
            to <a href="ConnectionPoolingOverview.html">Connection Pooling</a> for more information.
            </para>
            
            </remarks>
            <example>
            <para>
            The following is an example of a method that defines Query Bands at the Connection and
            Transaction level.
            </para>
            
            <code>
            static public void QueryBandExample()
            {
               TdConnection conn = new TdConnection(
                      @"DataSource=teradata1;UserId=user1;Password=password1;QueryBand='ProxyUser=user1;ApplicationName=app1;'");
                      
               // The Query Bands specified using the QueryBand connection string attribute
               // are defined at the Connection level.
               conn.Open();
               
               // Retrieving the Query Bands from the connection
               TdQueryBand qb = conn.QueryBand;
               
               // Adding a new Query Band to the connection.
               // This is a custom Query Band only used by the application.
               qb["CustomBand"] = "custom1";
               
               // After the TdQueryBand instance has been modified it needs to be
               // applied by the connection
               conn.ChangeQueryBands(qb);
               
               //
               // The method performs required tasks
               //
               
               // Defining Query Bands that will be used in a transaction
               TdQueryBand transQB = new TdQueryBand("Group=group1");
               
               // Overwriting the ApplicationName that was defined at the Connection level
               transQB["ApplicationName"] = "newName";
               
               // Starting a transaction
               TdTransaction trans = conn.BeginTransaction(transQb);
               
               // Query Bands defined at the Connection level are also valid
               // in the transaction.
               
               // Adding additional transaction level Query Bands by using the Add method
               //
               // After the transaction is started, it is recommended that the Query Bands
               // be retrieved from the TdTransaction.QueryBand property if changes are to
               // be made.
               transQB = trans.QueryBand;
               
               transQB.Add("JobId", "123");
               transQB.Add("JobGroup", "appGroup1");
               
               // After changes are made, the Query Band must be applied to the Transaction.
               trans.ChangeQueryBand(transQB);
               
               //
               // The method performs required tasks
               //
               
               // After the transaction is closed, the Query Bands defined at the Transaction
               // level no longer exist.  The connection level Query Bands are still valid.
               // Any Query Bands that were re-defined at the Transaction level are restored
               // to their values defined at the Connection level.
               trans.Commit();
               
               //
               // Method performs required tasks
               //
               
               conn.Close();
            }
            </code>
            </example>
            <seealso cref="!:QueryBandOverview.html">Query Banding and Trusted Sessions</seealso>
            <seealso cref="!:ConnectionPooling.html">Connection Pooling</seealso>
            <seealso cref="P:Teradata.Client.Provider.TdConnection.QueryBand"/>
            <seealso cref="M:Teradata.Client.Provider.TdConnection.ChangeQueryBand(Teradata.Client.Provider.TdQueryBand)"/>
            <seealso cref="P:Teradata.Client.Provider.TdTransaction.QueryBand"/>
            <seealso cref="M:Teradata.Client.Provider.TdTransaction.ChangeQueryBand(Teradata.Client.Provider.TdQueryBand)"/>
            <seealso cref="P:Teradata.Client.Provider.TdConnectionStringBuilder.QueryBand"/>
        </member>
        <member name="M:Teradata.Client.Provider.TdQueryBand.#ctor(System.String)">
            <summary>
            Initializes a new instance of a TdQueryBand class and sets
            the key=value pairs contained in <paramref name="value"/>.
            </summary>
            <exception cref="T:System.ArgumentException">The Query Band definition is not valid.</exception>
            <remarks>
            <para>The string representation of the key=value pairs of a Query Band must
            be in the following format:</para>
            
            <para>"key1=value1; key2=value2; key<i>n</i>=value<i>n</i>;"</para>
            
            <para>A semi-colon is used to separate each value pair.  There is no limit on how many
            key=value pairs can be specified.  The spaces are optional.</para>
            </remarks>
            <param name="value">The key=value pairs represented as a string.</param>
        </member>
        <member name="M:Teradata.Client.Provider.TdQueryBand.#ctor">
            <summary>
            Initializes a new instance of TdQueryBand class.
            </summary>
        </member>
        <member name="M:Teradata.Client.Provider.TdQueryBand.Add(System.String,System.Object)">
            <summary>
            Adds a key=value pair as a Query Band.
            </summary>
            <exception cref="T:System.ArgumentNullException">A null has been passed in as the <paramref name="key"/>.</exception>
            <exception cref="T:System.ArgumentException">A Query Band that contains the same key already exists or the key is
            String.Empty.</exception>
            
            <param name="key">The name of the Query Band.</param>
            <param name="value">The value of the Query Band.</param>
            <remarks>
            <para>
            When this method is called to add a Query Band, the following <i>task</i> is performed based upon the <i>scenario</i>:
            </para>
            
            <list type="bullet">
            <item> 
            <description>
                <para>Scenario: <paramref name="key"/> does not exist.</para>
                <para>Task:  the key=value pair will be added to this instance.</para>
            </description>
            </item>
            <item>
            <description>
                <para>Scenario:  <paramref name="key"/> exists and <paramref name="value"/> is not null.</para>
                <para>Task:  An <see cref="T:System.ArgumentException"/> will get thrown.</para></description>
            </item>
            <item>
            <description>
                <para>Scenario:  <paramref name="key"/> exists and <paramref name="value"/> is null.</para>
                <para>Task:  An <see cref="T:System.ArgumentException"/> will get thrown.</para>
             </description>
            </item>
            </list>
            </remarks>
        </member>
        <member name="M:Teradata.Client.Provider.TdQueryBand.Remove(System.String)">
            <summary>
            Removes the Query Band with the specified key.
            </summary>
            <param name="key">The key of the Query Band that is to be removed.</param>
            <exception cref="T:System.ArgumentNullException">A null reference has been passed as the <paramref name="key"/>.</exception>
            <remarks>
            <para>
            A Query Band can also be removed by using the array representation
            as in the following example:
            </para>
            
            <para>
            <code>
                TdQueryBand qb = new TdQueryBand("SpecialName=name1");
                
                qb["SpecialName"] = null;
            </code>
            </para>
            </remarks>
        </member>
        <member name="M:Teradata.Client.Provider.TdQueryBand.ToString">
            <summary>
            Returns the <i>key=value</i> pairs of the Query Band as a string.
            </summary>
            <returns>The string representation of the Query Band is returned.</returns>
            <remarks>
            <para>
            The format of the string that is returned is as follows:
            </para>
            
            <para>
            key1=value1;key2=value2;key3=value3;key<i>n</i>=value<i>n</i>
            </para>
            </remarks>
            <overload>
            Returns the <i>key=value</i> pairs of the Query Band as a string.
            </overload>
        </member>
        <member name="M:Teradata.Client.Provider.TdQueryBand.ToString(System.IFormatProvider)">
            <summary>
            Returns the <i>key=value</i> pairs of the Query Band as a string.
            </summary>
            <returns>The string representation of the Query Band is returned.</returns>
            <param name="provider">The culture specific information.  This parameter is ignored.</param>
            <remarks>
            <para>
            The format of the string that is returned is as follows:
            </para>
            
            <para>
            key1=value1;key2=value2;key3=value3;key<i>n</i>=value<i>n</i>
            </para>
            </remarks>
        </member>
        <member name="M:Teradata.Client.Provider.TdQueryBand.ContainsKey(System.String)">
            <summary>
            Indicates whether the key exists as a Query Band.
            </summary>
            <param name="key">The name of the Query Band.</param>
            <exception cref="T:System.ArgumentNullException">The <paramref name="key"/> is null.</exception>
            <returns><c>true</c> a Query Band exists that has the <paramref name="key"/>, otherwise <c>false</c>.</returns>
        </member>
        <member name="M:Teradata.Client.Provider.TdQueryBand.Clear">
            <summary>
            Clears or removes all Query Bands from this instance of TdQueryBand.
            </summary>
            <remarks>
            <para>
            In order to remove all the Query Bands that have been defined at the Connection 
            level, the <see cref="T:Teradata.Client.Provider.TdQueryBand"/> object must be retrieved from <see cref="P:Teradata.Client.Provider.TdConnection.QueryBand"/>, 
            and then <strong>Clear</strong> is called to clear all Query Bands from 
            the instance of TdQueryBand.  
            When the changes are applied by calling <see cref="M:Teradata.Client.Provider.TdConnection.ChangeQueryBand(Teradata.Client.Provider.TdQueryBand)"/>, 
            all of the Query Bands will be removed from the connection 
            to Teradata.
            </para>
            
            <para>
            When all Transaction level Query Bands need to be removed, an instance of TdQueryBand is 
            retrieved from TdTransaction.QueryBand, and then <strong>Clear</strong> is called.  The changes are applied 
            to the Transaction when <see cref="M:Teradata.Client.Provider.TdTransaction.ChangeQueryBand(Teradata.Client.Provider.TdQueryBand)"/> is called.
            </para>
            </remarks>
            <example>
            The following is an example of how to clear the Query Bands from a connection.
            
            <code>
            static public void ClearQueryBandExample()
            {
                TdConnection conn = new TdConnection(
                   @"DataSource=teradata1;UserId=user1;Password=password1;QueryBand='ProxyUser=user1;ApplicationName=app1'");
            
                // The Query Bands specified using the QueryBand connection string attribute 
                // are defined at the Connection level. 
                conn.Open();
            
                // Retrieving the Query Bands from the connection 
                TdQueryBand qb = conn.QueryBand;
            
                // Currently the ProxyUser and ApplicationName are the Query Bands
                // defined on the connection
            
                // Removing all Query Bands from the TdQueryBand instance    
                qb.Clear();
            
                // Removing all the Query Bands defined on the connection to Teradata
                conn.QueryBand = qb;
            
                // 
                // Application continue performing its tasks
                //
            
                conn.Close();
            }
            </code>
            </example>
        </member>
        <member name="M:Teradata.Client.Provider.TdQueryBand.TryGetValue(System.String,System.Object@)">
            <summary>
            Retrieves the value that corresponds to the Query Band key.
            </summary>
            <param name="key">The name of the Query Band.</param>
            <param name="value">The value of the Query Band.</param>
            <exception cref="T:System.ArgumentNullException">The <paramref name="key"/> is a null reference.</exception>
            <returns><c>true</c> the Query Band that matches the <paramref name="key"/>, otherwise a <c>false</c>
            is returned.</returns>
            <remarks>
            When <c>true</c> is returned, the Query Band that matches the <paramref name="key"/> is
            returned in <paramref name="value"/>.
            </remarks>
        </member>
        <member name="M:Teradata.Client.Provider.TdQueryBand.GetEnumerator">
            <summary>
            Returns an enumerator that is used to iterate through all the defined Query Bands.
            </summary>
            <returns>Returns an enumerator.</returns>
            <remarks>
            <para>
            When using the enumerator to iterate through the Query Bands, each item is a 
            KeyValuePair&lt;String, Object&gt;.
            (<see cref="T:System.Collections.Generic.KeyValuePair`2"/> for more information).
            </para>
            
            <para>
            For further information refer to <see cref="M:System.Collections.Generic.IEnumerable`1.GetEnumerator"/>.
            </para>
            </remarks>
            <example>
            The following example iterates through Query Bands, and will have the following output:<br/><br/>
            
                Key = ProxyUser, Value = user1<br/>
                Key = Group, Value = gardening<br/>
                Key = ApplicationName, Value = Accounting
            
            <code>
            public void EnumerationExample()
            {
                TdQueryBand queryBand = new TdQueryBand("ProxyUser = user1; Group=gardening; ApplicationName=Accounting;");
                
                foreach (KeyValuePair&lt;String, Object&gt; temp in queryBand)
                {
                    Console.WriteLine("Key = {0}, Value = {1}", temp.Key, temp.Value);
                }
            }
            </code>
            
            </example>
        </member>
        <member name="E:Teradata.Client.Provider.TdQueryBand.PropertyModifiedEvent">
            <summary>
            Indicates whether the instance of the Query Band has been modified.
            
            This is needed by the TdConnectionStringBuilder.  An application can modify
            the Query Band by referencing a TdQueryBand property from the QueryBand 
            property off of the instance of the TdConnectionStringBuilder:
            
                TdConnectionStringBuilder builder = new TdConnectionStringBuilder();
                builder.QueryBand.ApplicationName = "app1";
                
            If this is done the Query Band will not be displayed in the connection string.  The
            reason for this is that TdQueryBand is a class.  The connection string will only get
            set when the setter of the Query Band property is called.  If the property is set as
            in the example above, the connection string will not get refreshed.  Therefore, the
            getter of the QueryBand property will check if the instance of TdQueryBand has been 
            modified.  If it has, the connection string will get refreshed.
            </summary>
        </member>
        <member name="P:Teradata.Client.Provider.TdQueryBand.QueryBandConnectionStmt">
            <summary>
            Generates the SET QUERY_BAND statement for a session.
            </summary>
        </member>
        <member name="P:Teradata.Client.Provider.TdQueryBand.QueryBandTransactionStmt">
            <summary>
            Generates the SET QUERY_BAND statement for a transaction.
            </summary>
        </member>
        <member name="P:Teradata.Client.Provider.TdQueryBand.InternalQueryBandString">
             <summary>
              A string is constructed such that it can be used in the the SET QUERY_BAND statement.
            
             The QueryIssueTime will be included in the Query BAnd string if it has not
             been defined by the application.
             </summary>
        </member>
        <member name="P:Teradata.Client.Provider.TdQueryBand.ExternalQueryBandString">
            <summary>
            The query band string will be constructed such that it is a string that can be used
            in the Connection String Builder.
            </summary>
        </member>
        <member name="P:Teradata.Client.Provider.TdQueryBand.QueryBandString">
            <summary>
            Gets or Sets the Query Bands associated with the session or transaction.
            </summary>
            <remarks>
            
            <para>
            This property only gets or sets the Query Bands that have been defined in this instance.
            </para>
            
            <para>
            After this property has been set, the method <see cref="M:Teradata.Client.Provider.TdConnection.ChangeQueryBand(Teradata.Client.Provider.TdQueryBand)"/> 
            must be called to apply the changes at the Connection level.  If the Query Bands are to be 
            changed at the Transaction level, <see cref="M:Teradata.Client.Provider.TdTransaction.ChangeQueryBand(Teradata.Client.Provider.TdQueryBand)"/> must be
            called.
            </para>
            
            </remarks>
            <exception cref="T:System.ArgumentException">QueryBand has been set to an invalid Query Band definition.</exception>
            <seealso cref="P:Teradata.Client.Provider.TdConnection.QueryBand"/>
            <seealso cref="P:Teradata.Client.Provider.TdTransaction.QueryBand"/>
        </member>
        <member name="P:Teradata.Client.Provider.TdQueryBand.Keys">
            <summary>
            Gets a <see cref="T:System.Collections.ICollection"/> that contains the Query Band keys.
            </summary>
            <remarks>
            <para>The keys in the ICollection appear in the same order as their corresponding values returned
            from the <see cref="P:Teradata.Client.Provider.TdQueryBand.Values"/> property.</para>
            </remarks>
            <example>
            <para>
            The following is an example on how to retrieve the keys using this property, and will
            have the following output:<br/><br/>
            
                Key = Custom1<br/>
                Key = Group<br/>
                Key = Source<br/>
            </para>
            
            <code>
            public void KeyExample()
            {
                TdQueryBand queryBand = new TdQueryBand();
                queryBand.QueryBand = "Custom1 = cust1; Group = clothing; Source = store2";
                
                foreach (String temp in queryBand.Keys)
                {
                    Console.WriteLine("Key = {0}", temp);
                }
            }
            </code>
            
            </example>
            <seealso cref="T:System.Collections.Generic.Dictionary`2.KeyCollection"/>
        </member>
        <member name="P:Teradata.Client.Provider.TdQueryBand.Values">
            <summary>
            Gets an <see cref="T:System.Collections.ICollection"/>
            that contains the values for each of the corresponding Query Band keys.
            </summary>
            <remarks>
            The values in the ValueCollection will appear in the same order as the Query Band keys will appear
            in the KeyCollection of names returned from <see cref="P:Teradata.Client.Provider.TdQueryBand.Keys"/>.
            </remarks>
            <example>
            <para>
            The following is an example on how to retrieve the values using this property.  The output of this
            example is as follows:<br/><br/>
            
                Value = cust1<br/>
                Value = clothing<br/>
                Value = store2<br/>
                Value = 2008-10-20T12:08:10.000000Z
            </para>
            
            <code>
            public void ValueExample()
            {
                TdQueryBand queryBand = new TdQueryBand();
                queryBand.QueryBandStmt = "Custom1 = cust1; Group = clothing; Source = store2";
                
                // The UTC offset has been accounted for in the time
                queryBand.Deadline = new DateTimeOffset.Parse("2008-10-20 12:08:10");
                
                foreach (Object tempObject in queryBand.Values)
                {
                    Console.WriteLine("Value = {0}", Convert.ToString(tempObject));
                }
            }
            </code>
            
            </example>
            <seealso cref="T:System.Collections.Generic.Dictionary`2.ValueCollection"/>
        </member>
        <member name="P:Teradata.Client.Provider.TdQueryBand.Item(System.String)">
            <summary>
            Gets or Sets a Query Band.
            </summary>
            <param name="key">The key of the Query Band.</param>
            <exception cref="T:System.ArgumentNullException"><paramref name="key"/> is a null reference.</exception>
            <returns>The value of the corresponding key of the Query Band is returned.</returns>
            <remarks>
            <para>
            If the key does not exist when setting the Query Band, a new Query Band is created.
            </para>
            
            <para>
            If the key does not exist when getting a Query Band, a null reference is returned.
            </para>
            
            <para>
            If the key exists and the value is a null reference, the Query Band will be removed.
            </para>
            </remarks>
        </member>
        <member name="P:Teradata.Client.Provider.TdQueryBand.ProxyUser">
            <summary>
            Returns the value of the ProxyUser.
            </summary>
            <exception cref="T:Teradata.Client.Provider.TdException">Trusted Session is not supported by the connected Teradata Database.</exception>
            <remarks>
            <list type="table">
            <listheader>
            <term>Description</term>
            <description>Usage</description>
            </listheader>
            <item>
            <term>The Proxy User identity used to define a trusted connection.</term>
            <description>Security.</description>
            </item>
            </list>
            
            <para>If the ProxyUser does not exist, the default value (<see cref="F:System.String.Empty"/>) will be returned.</para>
            </remarks>
        </member>
        <member name="P:Teradata.Client.Provider.TdQueryBand.ProxyRole">
            <summary>
            Returns the value of the ProxyRole.
            </summary>
            <exception cref="T:Teradata.Client.Provider.TdException">Trusted Session is not supported by the connected Teradata Database.</exception>
            <remarks>
            <list type="table">
            <listheader>
            <term>Description</term>
            <description>Usage</description>
            </listheader>
            <item>The Proxy Role used to define a trusted connection.</item>
            <description>Security.</description>
            </list>
            
            <para>If the ProxyRole does not exist, the default value (<see cref="F:System.String.Empty"/>) will be returned.</para>
            </remarks>
        </member>
        <member name="P:Teradata.Client.Provider.TdQueryBand.Action">
            <summary>
            Gets or Sets the value of the Action.
            </summary>
            <remarks>
            <list type="table">
            <listheader>
            <term>Description</term>
            <description>Usage</description>
            </listheader>
            <item>
            <term>The user action that generated this query.</term>
            <description>Debugging, Logging</description>
            </item>
            </list>
            </remarks>
        </member>
        <member name="P:Teradata.Client.Provider.TdQueryBand.ApplicationName">
            <summary>
            Gets or Sets the value of the ApplicationName.
            </summary>
            <remarks>
            <list type="table">
            <listheader>
            <term>Description</term>
            <description>Usage</description>
            </listheader>
            <item>
            <term>The name or identifier of the application making the query.</term>
            <description>Logging / Auditing / Workload Management</description>
            </item>
            </list>
            </remarks>
        </member>
        <member name="P:Teradata.Client.Provider.TdQueryBand.ClientUser">
            <summary>
            Gets or Sets the value of the ClientUser.
            </summary>
            <remarks>
            <list type="table">
            <listheader>
            <term>Description</term>
            <description>Usage</description>
            </listheader>
            <item>
            <term>This is the unique ID of the original user.</term>
            <description>Individual resource usage accounting/logging/Workload Management, 
            Query Status notification (Email to ClientUser@company.com), Query Support 
            (identify owners of failed/failing queries).
            </description>
            </item>
            </list>
            </remarks>
        </member>
        <member name="P:Teradata.Client.Provider.TdQueryBand.Deadline">
            <summary>
            Gets or Sets the value of the Deadline.
            </summary>
            <remarks>
            <list type="table">
            <listheader>
            <term>Description</term>
            <description>Usage</description>
            </listheader>
            <item>
            <term>Time by which a query should be completed.</term>
            <description>Workload Management</description>
            </item>
            </list>
            </remarks>
        </member>
        <member name="P:Teradata.Client.Provider.TdQueryBand.Destination">
            <summary>
            Gets or Sets the value of the Destination.
            </summary>
            <remarks>
            <list type="table">
            <listheader>
            <term>Description</term>
            <description>Usage</description>
            </listheader>
            <item>
            <term>The location within a given Teradata System to which a query is directed.</term>
            <description>Workload Management and Auditing</description>
            </item>
            </list>
            </remarks>
        </member>
        <member name="P:Teradata.Client.Provider.TdQueryBand.Group">
            <summary>
            Gets or Sets the value of the Group.
            </summary>
            <remarks>
            <list type="table">
            <listheader>
            <term>Description</term>
            <description>Usage</description>
            </listheader>
            <item>
            <term>The user’s work group.</term>
            <description>Group resource usage accounting and logging/ Workload Management,
            Query Status notification (Email to central address Group@company.com),
            Query Support (identify failed/failing queries).</description>
            </item>
            </list>
            </remarks>
        </member>
        <member name="P:Teradata.Client.Provider.TdQueryBand.Importance">
            <summary>
            Gets or Sets the value of the Importance.
            </summary>
            <remarks>
            <list type="table">
            <listheader>
            <term>Description</term>
            <description>Usage</description>
            </listheader>
            <item>
            <term>The importance of the query relates to the amount of priority that 
            should be given to the individual query.</term>
            <description>Workload Management</description>
            </item>
            </list>
            </remarks>
        </member>
        <member name="P:Teradata.Client.Provider.TdQueryBand.JobDeadline">
            <summary>
            Gets or Sets the value of the JobDeadline.
            </summary>
            <remarks>
            <list type="table">
            <listheader>
            <term>Description</term>
            <description>Usage</description>
            </listheader>
            <item>
            <term>Time by which a Job should be completed.</term>
            <description>Workload Management</description>
            </item>
            </list>
            </remarks>
        </member>
        <member name="P:Teradata.Client.Provider.TdQueryBand.JobId">
            <summary>
            Gets or Sets the value of the JobId.
            </summary>
            <remarks>
            <list type="table">
            <listheader>
            <term>Description</term>
            <description>Usage</description>
            </listheader>
            <item>The Job ID value allows a series of queries 
            to be issued against a single workload or account for logging 
            and auditing purposes</item>
            <description>Workload Management and Auditing</description>
            </list>
            </remarks>
        </member>
        <member name="P:Teradata.Client.Provider.TdQueryBand.JobLen">
            <summary>
            Gets or Sets the value of the JobLen.
            </summary>
            <remarks>
            <list type="table">
            <listheader>
            <term>Description</term>
            <description>Usage</description>
            </listheader>
            <item>
            <term>Number of pieces of work in a Job.</term>
            <description>Workload Management and Auditing</description>
            </item>
            </list>
            </remarks>
        </member>
        <member name="P:Teradata.Client.Provider.TdQueryBand.JobSeq">
            <summary>
            Gets or Sets the value of the JobSeq.
            </summary>
            <remarks>
            <list type="table">
            <listheader>
            <term>Description</term>
            <description>Usage</description>
            </listheader>
            <item>
            <term>Sequence number of the current piece of work in the Job.</term>
            <description>Workload Management and Auditing</description>
            </item>
            </list>
            </remarks>
        </member>
        <member name="P:Teradata.Client.Provider.TdQueryBand.MaxQueryTime">
            <summary>
            Gets or Sets the value of the MaxQueryTime.
            </summary>
            <remarks>
            <list type="table">
            <listheader>
            <term>Description</term>
            <description>Usage</description>
            </listheader>
            <item>
            <term>Maximum amount of time a query should take to execute.</term>
            <description>Workload Management</description>
            </item>
            </list>
            </remarks>
        </member>
        <member name="P:Teradata.Client.Provider.TdQueryBand.Redrive">
            <summary>
            Enable or disable Redrive-Recoverable Network Protocol support for a session.
            </summary>
            <remarks>
            <list type="table">
            <listheader>
            <term>Description</term>
            <description>Usage</description>
            </listheader>
            <item>
            <term>Enables or disable Redrive (on or off) for a session.</term>
            <description>Workload Management</description>
            </item>
            </list>
            </remarks>
        </member>
        <member name="P:Teradata.Client.Provider.TdQueryBand.Source">
            <summary>
            Gets or Sets the value of the Source.
            </summary>
            <remarks>
            <list type="table">
            <listheader>
            <term>Description</term>
            <description>Usage</description>
            </listheader>
            <item>
            <term>The User screen that generated this query.</term>
            <description>Debugging, Logging</description>
            </item>
            </list>
            </remarks>
        </member>
        <member name="P:Teradata.Client.Provider.TdQueryBand.StartTime">
            <summary>
            Gets or Sets the value of the StartTime.
            </summary>
            <remarks>
            <list type="table">
            <listheader>
            <term>Description</term>
            <description>Usage</description>
            </listheader>
            <item>
            <term>The entry point of a single thread of execution within the application.</term>
            <description>Performance Measurement and Auditing</description>
            </item>
            </list>
            </remarks>
        </member>
        <member name="P:Teradata.Client.Provider.TdQueryBand.Version">
            <summary>
            Gets or Sets the value of the Version.
            </summary>
            <remarks>
            <list type="table">
            <listheader>
            <term>Description</term>
            <description>Usage</description>
            </listheader>
            <item>
            <term>The version number of the application making the query.</term>
            <description>Logging / Auditing / Problem Resolution</description>
            </item>
            </list>
            </remarks>
        </member>
        <member name="P:Teradata.Client.Provider.TdQueryBand.Count">
            <summary>
            Gets the number of key=value pairs contained in this instance of TdQueryBand.
            </summary>
        </member>
        <member name="T:Teradata.Client.Provider.TdPeriodDate">
            <summary>
             TdPeriodDate is a .Net Data Provider for Teradata specific type that represents
             a duration of time that is bound by beginning and ending dates.  The dates are based on
             the Gregorian calendar.
             </summary>
            <seealso cref="T:Teradata.Client.Provider.TdDate"/>
            <remarks>
            	<para>The Teradata Database introduced Period types in release 13.00.00.00.
             Unfortunately, the .Net Framework does not have system types that correspond to
             any of the the Teradata Period types. Therefore, the Teradata provider exposes
             a corresponding <strong>provider specific type</strong> for each of the period types
             supported by the Teradata database.</para>
            
             <para>For the Teradata Period type <strong>Period(Date)</strong> the provider specific
             type is <strong>TdPeriodDate</strong>.  This type enables an application to work with data
             that contain a period of type date.</para>
            
             <para>A period is an anchored duration.  It represents a set of contiguous time 
             granules within that duration.  In the case of <strong>TdPeriodDate</strong>, the granularity
             of the time is represented by a day.  The representation of a period
             is both inclusive and exclusive.  It is <strong>inclusive</strong> in that the duration 
             of the period begins from lower bound up to, but not including (<strong>excluding</strong>), 
             the ending bound.  For example, suppose a TdPeriodDate contains the period of:</para>
            
             <pre>   (2007-12-25, 2008-01-01)</pre>
            
             <para>The period will include "2007-12-25" and not "2008-01-01".  
             It extends for 7 days.</para>
            
             <para>The components of a period consists of the following:</para>
             <para>
            		<list type="bullet">
            			<item><strong>Time Granule</strong> This is the minimum representation
                 of time within a period.  For TdPeriodDate, the minimum time representation within a period
                 is one day.</item>
            			<item><strong>Time Element</strong> A Time value that is contained
                 within the period.  For example, the time element "2007-12-30" is 
                 contained in the period "(2007-12-25, 2008-01-01)".  When a period is represented
                 by a TdPeriodDate, the Time Element will be specified using a <see cref="T:Teradata.Client.Provider.TdDate"/>.</item>
            			<item><strong>Beginning Bound</strong> The lower bound or the start 
                 of the period.  Within a period, this value represents the "lowest" time
                 element.  The beginning bound must be <strong>less than</strong> the ending bound.</item>
            			<item><strong>Ending Bound</strong> The upper bound or the ending
                 of the period.  The Ending Element is not included in the period.  Therefore,
                 No Time Element in the period can be <strong>greater or equal</strong> to the 
                 Ending Bound.</item>
            			<item><strong>Duration</strong> The number of granules in a period.
                 It is represented as a <see cref="T:System.TimeSpan"/>.</item>
            		</list>
             </para>
            
             <para>A TdPeriodDate can also be specified as an In, Out, or InOut parameter to a Stored 
             Procedure.  The data will be returned to an application using 
            either the <see cref="P:Teradata.Client.Provider.TdParameter.ProviderSpecificValue">TdParameter.ProviderSpecificValue</see>
            or <see cref="P:Teradata.Client.Provider.TdParameter.Value">TdParameter.Value</see> property.  Retrieving the parameter
            using TdParameter.ProviderSpecificValue, will return the data using the Period structure.  
            When TdParameter.Value is used, the data is returned as a <string>String</string> (this is
            the corresponding .Net type).</para>
            
            <seealso cref="T:Teradata.Client.Provider.TdDate"/>
            </remarks>
            <example>
             The following is an example on retrieving a TdPeriodDate, modify the period, and then updating the
             period.
             
             <code>
             Public void PeriodDateExample(TdCommand cmd, String studentId)
             {
                cmd.Parameter.Clear();
             
                cmd.CommandText = "SELECT timePeriod  " +
                                "FROM ClassDetention " +
                                "WHERE StudentId = ?";
             
                cmd.CommandType = CommandType.Text;
             
                // creating the parameter
                cmd.Parameters.Add(null, TdType.Varchar, 9,
                   System.Data.ParameterDirection.Input, true, 0, 0, null,    
                   System.Data.DataRowVersion.Default, studentId);
             
                TdPeriodDate detention;
             
                using (TdDataReader dr = cmd.ExecuteReader())
                {
                   If (false == dr.Read())
                   {
             	       return;
                   }
                
                   // Retrieving the Period
                   detention = dr.GetTdPeriodDate(0);
                }
             
                // An additional 5 days will be added to ending bound.
             
                // Specifying a TimeSpan of 5 days
                System.TimeSpan fiveExtraDays = new TimeSpan(5, 0, 0, 0);
             
                // Getting the ending bound of the period and
                // adding 5 days to it
                TdDate endOfDetention = detention.End + fiveExtraDays;
             
                detention = new TdPeriodDate(detention.Begin, endOfDetention);    
             
                cmd.Parameters.Clear();
             
                cmd.CommandText = "UPDATE classDetention " +
                                     "SET timePeriod = ? " +
                                     "WHERE StudentId = ?";
             
                cmd.Parameters.Add(null, TdType.PeriodDate, 0,
                      System.Data.ParameterDirection.Input, true, 0, 0, null,    
                      System.Data.DataRowVersion.Default, detention);
             
                cmd.Parameters.Add(null, TdType.Varchar, 9,
                      System.Data.ParameterDirection.Input, true, 0, 0, null,    
                      System.Data.DataRowVersion.Default, studentId);
             
                cmd.ExecuteNonQuery();
             }
             
             </code>
            </example>
            
            <seealso cref="!:PeriodTypeOverview.html">Provider Specific Types:  Period Type Overview</seealso>
        </member>
        <member name="F:Teradata.Client.Provider.TdPeriodDate.Null">
            <summary>
            Gets a Null TdPeriodDate instance.
            </summary>
            <value>
            Returns a TdPeriodDate instance that represents a <strong>Null</strong> value.
            </value>
            <remarks>
            Conceptually it is the constructor for <strong>Null</strong> TdPeriodDate instances.
            </remarks>
            <example>
            This example shows how to send a <strong>Null</strong> value to a Teradata database.
            <code>
            TdParameter col1 = new TdParameter();
            col1.TdType = TdType.PeriodDate;
            col1.Value = TdPeriodDate.Null;
            </code>
            </example>
        </member>
        <member name="F:Teradata.Client.Provider.TdPeriodDate.MinValue">
            <summary>
            The minimum value of a period which is  "(0001-01-01, 0001-01-02)".
            </summary>
        </member>
        <member name="F:Teradata.Client.Provider.TdPeriodDate.MaxValue">
            <summary>
            The maximum value of a period which is "(9999-12-30, 9999-12-31)".
            </summary>
        </member>
        <member name="M:Teradata.Client.Provider.TdPeriodDate.#ctor(Teradata.Client.Provider.TdDate,Teradata.Client.Provider.TdDate)">
            <summary>
            A period is created from two TdDate structures that represent the lower and upper bounds
            of the duration.
            </summary>
            <exception cref="T:System.ArgumentNullException">Either the begin or end date is null.</exception>
            <exception cref="T:System.ArgumentOutOfRangeException">Ending bound is less than the beginning bound.</exception>
            <param name="beginBound">The starting time of the period.</param>
            <param name="endBound">The ending time of the period.</param>
            <remarks>
            <para>An end bound that is <see cref="F:Teradata.Client.Provider.TdDate.MaxValue"/> is equivalent to the Teradata Database reserved word
            <strong>UNTIL_CHANGED</strong>.  Refer to the Teradata Database 13.00.00.00 SQL Reference:  DataTypes and Literals
            for additional information on UNTIL_CHANGED.  For information on how the behavior of a period whose
            end bound is equivalent to UNTIL_CHANGE is affected refer to <see cref="M:Teradata.Client.Provider.TdDate.Add(System.TimeSpan)"/>.</para>
            </remarks>
        </member>
        <member name="M:Teradata.Client.Provider.TdPeriodDate.op_Explicit(Teradata.Client.Provider.TdPeriodDate)~Teradata.Client.Provider.TdPeriodTimestamp">
            <summary>
            Converts a TdPeriodDate into a TdPeriodTimestamp.
            </summary>
            <param name="value">The TdPeriodDate that will be converted into a TdPeriodTimestamp.</param>
            <returns>A TdPeriodTimestamp is returned.</returns>
            <remarks>
            <para>
            If the ending bound is set to 
            <a href="PeriodArithmetic.htm#UNTIL_CHANGED">UNTIL_CHANGED</a> for the 
            <strong>TdPeriodDate</strong>, the ending bound of the result will be set to the 
            equivalent value of <strong>UNTIL_CHANGED</strong> for the resulting TdPeriodTimestamp.  
            The time components for the beginning bound of the result will be set to 
            &quot;00:00:00.000000&quot;, and the Scale of the period is set to 6.
            </para>
            
            <para>
            If the end bound is not <strong>UNTIL_CHANGED</strong>, the time components for both the 
            beginning and ending bounds will be set to &quot;00:00:00&quot;, and the Scale of the 
            period is set to 0.
            </para>
            </remarks>
            <seealso cref="!:PeriodArithmetic.html#UNTIL_CHANGED">Period Type Arithmetic Operations:  UNTIL_CHANGED</seealso>
        </member>
        <member name="M:Teradata.Client.Provider.TdPeriodDate.op_Explicit(Teradata.Client.Provider.TdPeriodDate)~Teradata.Client.Provider.TdPeriodTimestampWithTimeZone">
             <summary>
             Converts a TdPeriodDate into a TdPeriodTimestampWithTimeZone.
             </summary>
             <param name="value">The TdPeriodDate that will be converted into a TdPeriodTimestampWithTimeZone.</param>
             <returns>A <see cref="T:Teradata.Client.Provider.TdPeriodTimestampWithTimeZone"/> is returned.</returns>
             <remarks>
             <para>
             If the ending bound is set to 
             <a href="PeriodArithmetic.htm#UNTIL_CHANGED">UNTIL_CHANGED</a> value for 
             the <strong>TdPeriodDate</strong>, the ending bound of the result will be set to the 
             equivalent value of <strong>UNTIL_CHANGED</strong> for the resulting 
             <see cref="T:Teradata.Client.Provider.TdPeriodTimestampWithTimeZone"/>.  The time components for the 
             beginning bound of the result will be set to "00:00:00.000000", and the UTC offset to
             the offset of the local machine.  The Scale of the period is set to 6.
             </para>
            
             <para>
             If the end bound is not <strong>UNTIL_CHANGED</strong>, the time components for both the 
             beginning and ending bounds will be set to "00:00:00", and the UTC Offset will 
             be set to the offset of the local machine. The Scale of the period is set to 0.
             </para>
             </remarks>
        </member>
        <member name="M:Teradata.Client.Provider.TdPeriodDate.GetHashCode">
            <summary>
            Returns the hash code for this instance. 
            </summary>
            <returns>The hash code is returned.</returns>
            <remarks>
            <para>When calculating the hash code of a Period the algorithm that is used is</para>
            <para><see cref="P:Teradata.Client.Provider.TdPeriodDate.Begin"/> Exclusive OR (XOR) <see cref="P:Teradata.Client.Provider.TdPeriodDate.End"/></para>
            </remarks>
        </member>
        <member name="M:Teradata.Client.Provider.TdPeriodDate.Equals(System.Object)">
            <summary>
                Compares this instance against <paramref name="obj"/> to determine whether they are equal.
            </summary>
            <returns><c>true</c> is returned if the two TdPeriodDates are equal, <c>false</c> otherwise.</returns>
            <remarks>
                <para>In order for two periods to be equivalent both their beginning and ending bounds must
                      be equivalent.</para>
            
                <para>The boolean that is returned indicates the following conditions:</para>
            
            	<para><c>false</c> will be returned if:</para>
            	<list type="bullet">
            		<item>
                        This instance or <paramref name="obj"/> is <see cref="F:Teradata.Client.Provider.TdPeriodDate.Null"/>.
                    </item>
            		<item>
                        This instance is not equal to <paramref name="obj"/>.
                    </item>
            		<item>
            			<paramref name="obj"/> is not of type TdPeriodDate or <c>null</c>.
                    </item>
            	</list>
            	<para><c>true</c> will be returned if:</para>
            	<list type="bullet">
            		<item>
                        This instance and <paramref name="obj"/> are <Strong>Null</Strong>.
                    </item>
            		<item>
                        This instance is equal to <paramref name="obj"/>.
                    </item>
            	</list>
            </remarks>
            <example>
                The following code example uses various comparison methods and operators: 
                <code lang="CS">
            TdPeriodDate  later = new TdPeriodDate(new TdDate(2010, 8, 31), new TdDate(2010, 12, 1));
            Object earlier = new TdPeriodDate(new TdDate(2007, 9, 10), new TdDate(2008, 1, 1));
             
            // The following comparison is equivalent to using
            //    false == TdPeriodDate.Equals(later, (TdPeriodDate) earlier)
            //    later != (TdPeriodDate) earlier
            //    true == TdPeriodDate.NotEquals(later, (TdPeriodDate) earlier)
            //    
            if (false == later.Equals(earlier))
            {
               Console.WriteLine(“later does not equal earlier”);
            }
                </code>
            </example>
            <overloads>Returns a Boolean indicating whether two instances of TdPeriodDate are equal.</overloads>
            <param name="obj">A TdPeriodDate that will be compared to this instance of TdPeriodDate.</param>
        </member>
        <member name="M:Teradata.Client.Provider.TdPeriodDate.Equals(Teradata.Client.Provider.TdPeriodDate)">
            <summary>
            Compares this instance and another TdPeriodDate to determine whether they are equal. 
            </summary>
            <returns><c>true</c> if the two TdPeriodDate values are equal, <c>false</c> otherwise.</returns>
            <remarks>
                <para>In order for two periods to be equivalent the beginning and ending bounds 
                      between the two values must be equivalent.</para>
            
                <para>The boolean that is returned indicates the following conditions</para>
            
            	<para><c>false</c> will be returned if:</para>
            	<list type="bullet">
            		<item>
                        This instance or <paramref name="other"/> is <see cref="F:Teradata.Client.Provider.TdPeriodDate.Null"/>.
                    </item>
            		<item>
                        This instance is not equal to <paramref name="other"/>.
                    </item>
            	</list>
            	<para><c>true</c> will be returned if:</para>
            	<list type="bullet">
            		<item>
                        This instance and <paramref name="other"/> are <Strong>Null</Strong>.
                    </item>
            		<item>
                        This instance is equal to <paramref name="other"/>.
                    </item>
            	</list>
            </remarks>
            <param name="other">A TdPeriodDate that will be compared to this instance of TdPeriodDate.</param>
        </member>
        <member name="M:Teradata.Client.Provider.TdPeriodDate.Add(System.TimeSpan)">
            <summary>
            The specified TimeSpan will be added to this instance of TdPeriodDate.
            </summary>
            <param name="timeSpan">The TimeSpan that will be added.</param>
            <returns>A TdPeriodDate is returned that is the result of the TimeSpan added to this 
            instance of TdPeriodDate.</returns>
            <exception cref="T:System.OverflowException">The result could not be represented as a TdPeriodDate.</exception>
            <exception cref="T:Teradata.Client.Provider.TdException">The <strong>TdPeriodDate</strong> beginning bound is greater or equal to the ending bound of the period.</exception>
            <remarks>
            
            <para>The only component of the TimeSpan object that will be considered is the
            day component.  When this operation is performed, the day component of the
            TimeSpan is added to this instance of TdPeriodDate.  The day component will be 
            added to both the beginning and ending bounds.  For example, if the period 
            is (2007-10-04, 2007-11-01) and TimeSpan is "0.02:00:00.00" (0 days,
            2 hours) the add operation will result in a period of 
            (2007-10-04, 2007-11-01).</para>
            
            <para>
            There is an exception to this behavior.  The Teradata Database contains the reserved word 
            <strong>UNTIL_CHANGED</strong>.  This reserved word can be used as the end bound of a period and signifies 
            that the period goes on forever or "until it is changed."  In the Teradata Database, 
            UNTIL_CHANGED is equivalent to the date <strong>9999-12-31</strong> for a period of type date.  
            </para>
            
            <para>
            When the end bound of a period is UNTIL_CHANGED or <strong>9999-12-31</strong>, arithmetic 
            operations performed on this period <strong>only</strong> affects the beginning bound.  This is
            the behavior of the Teradata Database and the Teradata provider.  </para>
            
            <para>
            The following are examples of the result of adding a TimeSpan to a period:
            </para>
            
            <para>
            <list type="table">
            <listheader>
            <term>Arithmetic Operation</term>
            <description>Result</description>
            </listheader>
            <item>
            <term>(2008-12-20, 2009-06-30) + 2.02:01:30 (2 days, 2 hours, 1 minute, 30 seconds)</term>
            <description>(2008-12-22, 2009-07-02)</description>
            </item>
            <item>
            <term>(8901-02-03, 9999-12-31) + 10.21:00:01.002</term>
            <description>(8901-02-13, 9999-12-31)</description>
            </item>
            <item>
            <term>(7865-10-05, 8010-09-30) + 0.47:60:21 (0 days, 47 hours, 60 minutes, 21 seconds)<strong>**</strong></term>
            <description>(7895-10-07, 8010-10-02)</description>
            </item>
            <item>
            <term>(9999-12-30, 9999-12-31) + 1.00:00:00</term>
            <description><strong>OverflowException</strong> thrown, Begin must be less than End.</description>
            </item>
            </list>
            </para>
            <para><strong>**</strong>The number of days will be calculated from the components that were
            specified when TimeSpan was initialized.  Therefore, if a TimeSpan has been 
            initialized as <strong>new TimeSpan(47, 60, 20)</strong> (47 hours, 60 minutes, 
            20 seconds), the number of days that will be added to TdPeriodDate will be 2.</para>
            
            <para>Refer to <a href="PeriodArithmetic.htm">Period Arithmetic</a> for additional information.</para>
            </remarks>
        </member>
        <member name="M:Teradata.Client.Provider.TdPeriodDate.Add(Teradata.Client.Provider.TdIntervalDayToSecond)">
            <summary>
               Adds the specified <see cref="T:Teradata.Client.Provider.TdIntervalDayToSecond"/> to this instance of 
               <see cref="T:Teradata.Client.Provider.TdPeriodDate"/>.
            </summary>
            <returns>
               A <strong>TdPeriodDate</strong> is returned that is the result of adding the 
               <strong>TdIntervalDayToSecond</strong> to this instance of <strong>TdPeriodDate</strong>.
            </returns>
            <exception cref="T:System.OverflowException">Unable to add the specified <strong>TdIntervalDayToSecond</strong> to this instance of <strong>TdPeriodDate</strong>.</exception>
            <exception cref="T:Teradata.Client.Provider.TdException">The <strong>TdPeriodDate</strong> beginning bound is greater or equal to the ending bound of the period.</exception>
            <remarks>
            <para>
               If <paramref name="interval"/> or this instance of <strong>TdPeriodDate</strong> is 
               <strong>Null</strong> a <see cref="F:Teradata.Client.Provider.TdPeriodDate.Null"/> will be returned.        
            </para>
            <para>
               Only the <see cref="P:Teradata.Client.Provider.TdIntervalDayToSecond.Days"/> component of the 
               <paramref name="interval"/> will be added to the period.
            </para>
            <para>
               The number of days will be added to both the beginning and ending bounds of the period.
               For example, if the period is ("2007-10-04", "2007-11-01") and the 
               number of days is 2 the add operation will result in a period of 
               ("2007-10-06", "2007-11-03").
            </para>
            </remarks>
            <param name="interval">
               The number of days from the <strong>TdIntervalDayToSecond</strong> that will be 
               added to the period.
            </param>
        </member>
        <member name="M:Teradata.Client.Provider.TdPeriodDate.Add(Teradata.Client.Provider.TdIntervalYearToMonth)">
            <summary>
               Adds the specified <see cref="T:Teradata.Client.Provider.TdIntervalYearToMonth"/> to this instance of 
               <see cref="T:Teradata.Client.Provider.TdPeriodDate"/>.
            </summary>
            <returns>
               A <strong>TdPeriodDate</strong> is returned that is the result of adding the 
               <strong>TdIntervalYearToMonth</strong> to this instance of <strong>TdPeriodDate</strong>.
            </returns>
            <exception cref="T:System.OverflowException">Unable to add the specified <strong>TdIntervalYearToMonth</strong> to this instance of <strong>TdPeriodDate</strong>.</exception>
            <exception cref="T:Teradata.Client.Provider.TdException">The <strong>TdPeriodDate</strong> beginning bound is greater or equal to the ending bound of the period.</exception>
            <remarks>
            <para>
               If <paramref name="interval"/> or this instance of <strong>TdPeriodDate</strong> is 
               <strong>Null</strong> a <see cref="F:Teradata.Client.Provider.TdPeriodDate.Null"/> will be returned.        
            </para>
            <para>
               The number of years and months will be added to both the beginning and ending bounds 
               of the period. For example, if the period is ("2007-10-04", "2007-11-01") 
               and the number of years and months are 1 year, 2 months the add operation will result in a 
               period of ('2008-12-04', '2009-01-01').
            </para>
            </remarks>
            <param name="interval">
               The number of years and months from the <strong>TdIntervalYearToMonth</strong> 
               that will be added to the period.
            </param>
        </member>
        <member name="M:Teradata.Client.Provider.TdPeriodDate.Subtract(System.TimeSpan)">
            <summary>
            The specified TimeSpan will be subtracted from this instance of TdPeriodDate.
            </summary>
            <param name="timeSpan">The TimeSpan that will be subtracted.</param>
            <returns>A TdPeriodDate is returned that is the result of the TimeSpan subtracted from
            this instance of TdPeriodDate.</returns>
            <exception cref="T:System.OverflowException">The result could not be represented as a TdPeriodDate.</exception>
            <exception cref="T:Teradata.Client.Provider.TdException">The <strong>TdPeriodDate</strong> beginning bound is greater or equal to the ending bound of the period.</exception>
            <remarks>
            <para>The only component of the TimeSpan object that will be considered is the
            day component.  When this operation is performed, the day component of the
            TimeSpan is subtracted from the this instance of TdPeriodDate.  For example, if the period 
            is ('2007-10-04', '2007-11-01') and TimeSpan is 
            "0.02:00:00.00" (0 days, 2 hours)
            the subtract operation will result in ('2007-10-04', '2007-11-01').</para>
            
            <para>
            There is an exception to this behavior.  The Teradata Database contains the reserved word 
            <strong>UNTIL_CHANGED</strong>.  This reserved word is used as the end bound of a period and signifies 
            that the period goes on forever or "until it is changed."  In the Teradata Database, 
            UNTIL_CHANGED is equivalent to the date <strong>9999-12-31</strong> for a period of type date.  
            </para>
            
            <para>
            When the end bound of a period is UNTIL_CHANGED or <strong>9999-12-31</strong>, arithmetic 
            operations performed on this period <strong>only</strong> affects the beginning bound.  This is
            the behavior of the Teradata Database and the Teradata provider.  </para>
            
            <para>
            The following are examples of the result of subtraction a TimeSpan from a period:
            </para>
            
            <para>
            <list type="table">
            <listheader>
            <term>Arithmetic Operation</term>
            <description>Result</description>
            </listheader>
            <item>
            <term>(2008-12-20, 2009-06-30) - 2.02:01:30 (2 days, 2 hours, 1 minute, 30 seconds)</term>
            <description>(2008-12-18, 2009-06-28)</description>
            </item>
            <item>
            <term>(8901-02-03, 9999-12-31) - 10.21:00:01.002</term>
            <description>(8901-01-14, 9999-12-31)</description>
            </item>
            <item>
            <term>(7865-10-05, 8010-09-30) - 0.47:60:21 (0 days, 47 hours, 60 minutes, 21 seconds)<strong>**</strong></term>
            <description>(7895-10-03, 8010-09-28)</description>
            </item>
            <item>
            <term>(9999-12-30, 9999-12-31) - 1.00:00:00</term>
            <description>(9999-12-29, 9999-12-31)</description>
            </item>
            </list>
            </para>
            
            <para><strong>**</strong>The number of days will be calculated from the components that were
            specified when TimeSpan was initialized.  Therefore, if a TimeSpan was 
            initialized as <strong>new TimeSpan(47, 60, 20)</strong> (47 hours, 60 minutes, 
            20 seconds), the number of days that will be subtracted from TdPeriodDate will be 2.</para>
            
            <para>Refer to <a href="PeriodArithmetic.htm">Period Arithmetic</a> for additional information.</para>
            </remarks>
        </member>
        <member name="M:Teradata.Client.Provider.TdPeriodDate.Subtract(Teradata.Client.Provider.TdIntervalDayToSecond)">
            <summary>
               Subtracts the specified <see cref="T:Teradata.Client.Provider.TdIntervalDayToSecond"/> from this instance of 
               <see cref="T:Teradata.Client.Provider.TdPeriodDate"/>.
            </summary>
            <returns>
               A <strong>TdPeriodDate</strong> is returned that is the result of subtracting the 
               <strong>TdIntervalDayToSecond</strong> from this instance of <strong>TdPeriodDate</strong>.
            </returns>
            <exception cref="T:System.OverflowException">Unable to subtract the specified <strong>TdIntervalDayToSecond</strong> from this instance of <strong>TdPeriodDate</strong>.</exception>
            <exception cref="T:Teradata.Client.Provider.TdException">The <strong>TdPeriodDate</strong> beginning bound is greater or equal to the ending bound of the period.</exception>
            <remarks>
            <para>
               If <paramref name="interval"/> or this instance of <strong>TdPeriodDate</strong> is 
               <strong>Null</strong> a <see cref="F:Teradata.Client.Provider.TdPeriodDate.Null"/> will be returned.        
            </para>
            <para>
               Only the <see cref="P:Teradata.Client.Provider.TdIntervalDayToSecond.Days"/> component of the 
               <paramref name="interval"/> will be subtracted from this period.
            </para>
            <para>
               When this operation is performed, the number of days is subtracted from both
               the beginning and ending bounds.  For example, if the period 
               is ('2007-10-04', '2007-11-01') and the number of days is 2
               the subtract operation will result in ('2007-10-02', '2007-10-30').
            </para>
            </remarks>
            <param name="interval">
               The number of days from this <strong>TdIntervalDayToSecond</strong> interval will be  
               subtracted from this instance of <strong>TdPeriodDate</strong>.
            </param>
        </member>
        <member name="M:Teradata.Client.Provider.TdPeriodDate.Subtract(Teradata.Client.Provider.TdIntervalYearToMonth)">
            <summary>
               Subtracts the specified <see cref="T:Teradata.Client.Provider.TdIntervalYearToMonth"/> from this instance of 
               <see cref="T:Teradata.Client.Provider.TdPeriodDate"/>.
            </summary>
            <returns>
               A <strong>TdPeriodDate</strong> is returned that is the result of subtracting the 
               <strong>TdIntervalYearToMonth</strong> from this instance of <strong>TdPeriodDate</strong>.
            </returns>
            <exception cref="T:System.OverflowException">Unable to subtract the specified <strong>TdIntervalYearToMonth</strong> from this instance of <strong>TdPeriodDate</strong>.</exception>
            <exception cref="T:Teradata.Client.Provider.TdException">The <strong>TdPeriodDate</strong> beginning bound is greater or equal to the ending bound of the period.</exception>
            <remarks>
            <para>
               If <paramref name="interval"/> or this instance of <strong>TdPeriodDate</strong> is 
               <strong>Null</strong> a <see cref="F:Teradata.Client.Provider.TdPeriodDate.Null"/> will be returned.        
            </para>
            <para>
               When this operation is performed, the number of years and months is subtracted from 
               both the beginning and ending bounds.  For example, if the period 
               is ('2007-10-04', '2007-11-01') and the number of years and 
               months is <i>1 year, 2 months</i> the subtract operation will result in
               ('2006-08-02', '2006-08-30').
            </para>
            </remarks>
            <param name="interval">
               The number of years and months from this <strong>TdIntervalYearToMonth</strong> interval  
               that will be subtracted from this instance of <strong>TdPeriodDate</strong>.
            </param>
        </member>
        <member name="M:Teradata.Client.Provider.TdPeriodDate.op_Addition(Teradata.Client.Provider.TdPeriodDate,Teradata.Client.Provider.TdIntervalDayToSecond)">
            <summary>
               Adds the specified <see cref="T:Teradata.Client.Provider.TdIntervalDayToSecond"/> to a <see cref="T:Teradata.Client.Provider.TdPeriodDate"/>.
            </summary>
            <returns>
               A <strong>TdPeriodDate</strong> is returned that is the result of adding the 
               <strong>TdIntervalDayToSecond</strong> to a <strong>TdPeriodDate</strong>.
            </returns>
            <exception cref="T:System.OverflowException">Unable to add the specified <strong>TdIntervalDayToSecond</strong> to a <strong>TdPeriodDate</strong>.</exception>
            <exception cref="T:Teradata.Client.Provider.TdException">The <strong>TdPeriodDate</strong> beginning bound is greater or equal to the ending bound of the period.</exception>
            <remarks>
            <para>
               If <paramref name="interval"/> or <paramref name="period"/> is 
               <strong>Null</strong> a <see cref="F:Teradata.Client.Provider.TdPeriodDate.Null"/> will be returned.        
            </para>
            <para>
               Only the <see cref="P:Teradata.Client.Provider.TdIntervalDayToSecond.Days"/> component of the 
               <paramref name="interval"/> will be added to the period.
            </para>
            <para>
               The number of days will be added to both the beginning and ending bounds of the period.
               For example, if the period is ("2007-10-04", "2007-11-01") and the 
               number of days is 2 the add operation will result in a period of 
               ("2007-10-06", "2007-11-03").
            </para>
            </remarks>
            <param name="period">A <strong>TdPeriodDate</strong>.</param>
            <param name="interval">
               The number of days from this <strong>TdIntervalDayToSecond</strong> to be added 
               to a <strong>TdPeriodDate</strong>.
            </param>
        </member>
        <member name="M:Teradata.Client.Provider.TdPeriodDate.op_Addition(Teradata.Client.Provider.TdIntervalDayToSecond,Teradata.Client.Provider.TdPeriodDate)">
            <summary>
               Adds the specified <see cref="T:Teradata.Client.Provider.TdIntervalDayToSecond"/> to a <see cref="T:Teradata.Client.Provider.TdPeriodDate"/>.
            </summary>
            <returns>
               A <strong>TdPeriodDate</strong> is returned that is the result of adding the 
               <strong>TdIntervalDayToSecond</strong> to a <strong>TdPeriodDate</strong>.
            </returns>
            <exception cref="T:System.OverflowException">Unable to add the specified <strong>TdIntervalDayToSecond</strong> to a <strong>TdPeriodDate</strong>.</exception>
            <exception cref="T:Teradata.Client.Provider.TdException">The <strong>TdPeriodDate</strong> beginning bound is greater or equal to the ending bound of the period.</exception>
            <remarks>
            <para>
               If <paramref name="interval"/> or <paramref name="period"/> is 
               <strong>Null</strong> a <see cref="F:Teradata.Client.Provider.TdPeriodDate.Null"/> will be returned.        
            </para>
            <para>
               Only the <see cref="P:Teradata.Client.Provider.TdIntervalDayToSecond.Days"/> component of the 
               <paramref name="interval"/> will be added to the period.
            </para>
            <para>
               The number of days will be added to both the beginning and ending bounds of the period.
               For example, if the period is ("2007-10-04", "2007-11-01") and the 
               number of days is 2 the add operation will result in a period of 
               ("2007-10-06", "2007-11-03").
            </para>
            </remarks>
            <param name="interval">
               The number of days from this <strong>TdIntervalDayToSecond</strong> to be added 
               to a <strong>TdPeriodDate</strong>.
            </param>
            <param name="period">A <strong>TdPeriodDate</strong>.</param>
        </member>
        <member name="M:Teradata.Client.Provider.TdPeriodDate.op_Addition(Teradata.Client.Provider.TdPeriodDate,Teradata.Client.Provider.TdIntervalYearToMonth)">
            <summary>
               Adds the specified <see cref="T:Teradata.Client.Provider.TdIntervalYearToMonth"/> to a <see cref="T:Teradata.Client.Provider.TdPeriodDate"/>.
            </summary>
            <returns>
               A <strong>TdPeriodDate</strong> is returned that is the result of adding a 
               <strong>TdIntervalYearToMonth</strong> to a <strong>TdPeriodDate</strong>.
            </returns>
            <exception cref="T:System.OverflowException">Unable to add the specified <strong>TdIntervalYearToMonth</strong> to a <strong>TdPeriodDate</strong>.</exception>
            <exception cref="T:Teradata.Client.Provider.TdException">The <strong>TdPeriodDate</strong> beginning bound is greater or equal to the ending bound of the period.</exception>
            <remarks>
            <para>
               If <paramref name="interval"/> or <paramref name="period"/> is 
               <strong>Null</strong> a <see cref="F:Teradata.Client.Provider.TdPeriodDate.Null"/> will be returned.        
            </para>
            <para>
               The number of years and months will be added to both the beginning and ending bounds
                of the period. For example, if the period is ('2007-10-04', '2007-11-01') and the number 
               of years and months are 1 year, 2 months the add operation will result in a period of 
               ('2008-12-04', '2009-01-01').
            </para>
            <para>
               The number of years and months will be added to both the beginning and ending bounds 
               of the period. For example, if the period is ("2007-10-04", "2007-11-01") 
               and the number of years and months are 1 year, 2 months the add operation will result in a 
               period of ('2008-12-04', '2009-01-01').
            </para>
            </remarks>
            <param name="period">A <strong>TdPeriodDate</strong>.</param>
            <param name="interval">
               The number of years and months from the <strong>TdIntervalYearToMonth</strong> 
               that will be added to the <strong>TdPeriodDate</strong>.
            </param>
        </member>
        <member name="M:Teradata.Client.Provider.TdPeriodDate.op_Addition(Teradata.Client.Provider.TdIntervalYearToMonth,Teradata.Client.Provider.TdPeriodDate)">
            <summary>
               Adds the specified <see cref="T:Teradata.Client.Provider.TdIntervalYearToMonth"/> to a <see cref="T:Teradata.Client.Provider.TdPeriodDate"/>.
            </summary>
            <returns>
               A <strong>TdPeriodDate</strong> is returned that is the result of adding a 
               <strong>TdIntervalYearToMonth</strong> to a <strong>TdPeriodDate</strong>.
            </returns>
            <exception cref="T:System.OverflowException">Unable to add the specified <strong>TdIntervalYearToMonth</strong> to a <strong>TdPeriodDate</strong>.</exception>
            <exception cref="T:Teradata.Client.Provider.TdException">The <strong>TdPeriodDate</strong> beginning bound is greater or equal to the ending bound of the period.</exception>
            <remarks>
            <para>
               If <paramref name="interval"/> or <paramref name="period"/> is 
               <strong>Null</strong> a <see cref="F:Teradata.Client.Provider.TdPeriodDate.Null"/> will be returned.        
            </para>
            <para>
               The number of years and months will be added to both the beginning and ending bounds 
               of the period. For example, if the period is ("2007-10-04", "2007-11-01") 
               and the number of years and months are 1 year, 2 months the add operation will result in a 
               period of ('2008-12-04', '2009-01-01').
            </para>
            </remarks>
            <param name="interval">
               The number of years and months from the <strong>TdIntervalYearToMonth</strong> 
               that will be added to the <strong>TdPeriodDate</strong>.
            </param>
            <param name="period">A <strong>TdPeriodDate</strong>.</param>
        </member>
        <member name="M:Teradata.Client.Provider.TdPeriodDate.op_Addition(Teradata.Client.Provider.TdPeriodDate,System.TimeSpan)">
            <summary>
            Adds the specified TimeSpan to a TdPeriodDate.
            </summary>
            <param name="period">A TdPeriodDate.</param>
            <param name="timeSpan">A TimeSpan that will be added to TdPeriodDate.</param>
            <returns>A TdPeriodDate is returned that is the result of adding the Timespan
            to TdPeriodDate.</returns>
            <exception cref="T:System.OverflowException">The result could not be represented as a TdPeriodDate.</exception>
            <exception cref="T:Teradata.Client.Provider.TdException">The <strong>TdPeriodDate</strong> beginning bound is greater or equal to the ending bound of the period.</exception>
            <remarks>
            <para>If the period parameter is <see cref="F:Teradata.Client.Provider.TdPeriodDate.Null"/> a TdPeriodDate.Null will be returned.</para>
            
            Refer to <see cref="M:Teradata.Client.Provider.TdPeriodDate.Add(System.TimeSpan)"/> and <a href="PeriodArithmetic.htm">Period Arithmetic</a> for additional information.
            </remarks>
            <seealso cref="M:Teradata.Client.Provider.TdPeriodDate.Add(System.TimeSpan)"/>
            <overloads>
            Adds a Timespan to a period.
            </overloads>
        </member>
        <member name="M:Teradata.Client.Provider.TdPeriodDate.op_Addition(System.TimeSpan,Teradata.Client.Provider.TdPeriodDate)">
            <summary>
            Adds the specified TimeSpan to a TdPeriodDate.
            </summary>
            <param name="period">A TdPeriodDate.</param>
            <param name="timeSpan">A TimeSpan that will be added to TdPeriodDate.</param>
            <returns>A TdPeriodDate is returned that is the result of adding the Timespan
            to TdPeriodDate.</returns>
            <exception cref="T:System.OverflowException">The result could not be represented as a TdPeriodDate.</exception>
            <exception cref="T:Teradata.Client.Provider.TdException">The <strong>TdPeriodDate</strong> beginning bound is greater or equal to the ending bound of the period.</exception>
            <remarks>
            <para>If the period parameter is <see cref="F:Teradata.Client.Provider.TdPeriodDate.Null"/> a TdPeriodDate.Null will be returned.</para>
            
            Refer to <see cref="M:Teradata.Client.Provider.TdPeriodDate.Add(System.TimeSpan)"/> and <a href="PeriodArithmetic.htm">Period Arithmetic</a> for additional information.
            </remarks>
            <seealso cref="M:Teradata.Client.Provider.TdPeriodDate.Add(System.TimeSpan)"/>
        </member>
        <member name="M:Teradata.Client.Provider.TdPeriodDate.op_Subtraction(Teradata.Client.Provider.TdPeriodDate,Teradata.Client.Provider.TdIntervalDayToSecond)">
            <summary>
               Subtracts the specified <see cref="T:Teradata.Client.Provider.TdIntervalDayToSecond"/> from a <see cref="T:Teradata.Client.Provider.TdPeriodDate"/>.
            </summary>
            <returns>
               A <strong>TdPeriodDate</strong> is returned that is the result of subtracting the 
               <strong>TdIntervalDayToSecond</strong> from a <strong>TdPeriodDate</strong>.
            </returns>
            <exception cref="T:System.OverflowException">Unable to subtract the specified <strong>TdIntervalDayToSecond</strong> from a <strong>TdPeriodDate</strong>.</exception>
            <exception cref="T:Teradata.Client.Provider.TdException">The <strong>TdPeriodDate</strong> beginning bound is greater or equal to the ending bound of the period.</exception>
            <remarks>
            <para>
               If <paramref name="interval"/> or <paramref name="period"/> is 
               <strong>Null</strong> a <see cref="F:Teradata.Client.Provider.TdPeriodDate.Null"/> will be returned.        
            </para>
            <para>
               Only the <see cref="P:Teradata.Client.Provider.TdIntervalDayToSecond.Days"/> component of the 
               <paramref name="interval"/> will be subtracted from the period.
            </para>
            <para>
               When this operation is performed, the number of days is subtracted from both
               the beginning and ending bounds.  For example, if the period 
               is ('2007-10-04', '2007-11-01') and the number of days is 2
               the subtract operation will result in ('2007-10-02', '2007-10-30').
            </para>
            </remarks>
            <param name="period">A <strong>TdPeriodDate</strong>.</param>
            <param name="interval">
               The number of days from the <strong>TdIntervalDayToSecond</strong> that will be 
               subtracted from a <strong>TdPeriodDate</strong>.
            </param>
        </member>
        <member name="M:Teradata.Client.Provider.TdPeriodDate.op_Subtraction(Teradata.Client.Provider.TdPeriodDate,Teradata.Client.Provider.TdIntervalYearToMonth)">
            <summary>
               Subtracts the specified <see cref="T:Teradata.Client.Provider.TdIntervalYearToMonth"/> from a <see cref="T:Teradata.Client.Provider.TdPeriodDate"/>.
            </summary>
            <returns>
               A <strong>TdPeriodDate</strong> is returned that is the result of subtracting the 
               <strong>TdIntervalYearToMonth</strong> from a <strong>TdPeriodDate</strong>.
            </returns>
            <exception cref="T:System.OverflowException">Unable to subtract the specified <strong>TdIntervalYearToMonth</strong> from a <strong>TdPeriodDate</strong>.</exception>
            <exception cref="T:Teradata.Client.Provider.TdException">The <strong>TdPeriodDate</strong> beginning bound is greater or equal to the ending bound of the period.</exception>
            <remarks>
            <para>
               If <paramref name="interval"/> or <paramref name="period"/> is 
               <strong>Null</strong> a <see cref="F:Teradata.Client.Provider.TdPeriodDate.Null"/> will be returned.        
            </para>
            <para>
               When this operation is performed, the number of years and months is subtracted from 
               both the beginning and ending bounds.  For example, if the period 
               is ('2007-10-04', '2007-11-01') and the number of years and 
               months is <i>1 year, 2 months</i> the subtract operation will result in
               ('2006-08-02', '2006-08-30').
            </para>
            </remarks>
            <param name="period">A <strong>TdPeriodDate</strong>.</param>
            <param name="interval">
               The number of years and months from the <strong>TdIntervalYearToMonth</strong> that will be 
               subtracted from a <strong>TdPeriodDate</strong>.
            </param>
        </member>
        <member name="M:Teradata.Client.Provider.TdPeriodDate.op_Subtraction(Teradata.Client.Provider.TdPeriodDate,System.TimeSpan)">
            <summary>
            Subtracts the specified TimeSpan from a TdPeriodDate.
            </summary>
            <param name="period">A TdPeriodDate.</param>
            <param name="timeSpan">A TimeSpan that will be subtracted
            from the TdPeriodDate</param>
            <returns>A TdPeriodDate is returned that is the result of subtracting the TimeSpan 
            from the TdDate.</returns>
            <exception cref="T:System.OverflowException">The result could not be represented as a TdPeriodDate.</exception>
            <exception cref="T:Teradata.Client.Provider.TdException">The <strong>TdPeriodDate</strong> beginning bound is greater or equal to the ending bound of the period.</exception>
            <remarks>
            Refer to <see cref="M:Teradata.Client.Provider.TdPeriodDate.Subtract(System.TimeSpan)"/> and <a href="PeriodArithmetic.htm">Period Arithmetic</a> for additional information.
            </remarks>
        </member>
        <member name="M:Teradata.Client.Provider.TdPeriodDate.Compare(Teradata.Client.Provider.TdPeriodDate,Teradata.Client.Provider.TdPeriodDate)">
            <summary>
            Compares two instances of TdPeriodDate structures and returns a value indicating whether <paramref name="left"/> is
            greater than, less than or equal to <paramref name="right"/>.
            </summary>
            <returns>
            The result of the comparison is returned as an integer.
            </returns>
            <remarks>
            <para>The beginning and ending bounds of the two period operands are used in the comparison.  
              The integer returned when the bounds of the left is compared to right operand
              indicates the following:
            </para>
                <para>
            	<list type="table">
            		<listheader>
            			<term>Return Value</term>
            			<description>Meaning</description>
            		</listheader>
            		<item>
            			<term>Less than zero</term>
            			<description>
                            <para><paramref name="left"/> is less than <paramref name="right"/>.</para> 
                            <para>-or-</para>
                            <para><paramref name="left"/> is <see cref="F:Teradata.Client.Provider.TdPeriodDate.Null"/>.</para><br/>
                            <para><strong>Comparison Algorithm</strong></para>
                            <para>    left.Begin &lt; right.Begin OR (left.Begin == right.Begin AND left.End &lt; right.End)</para>
                        </description>
            		</item>
            		<item>
            			<term>Zero</term>
            			<description>
                            <para><paramref name="left"/> is equal to <paramref name="right"/>.</para>
                            <para>-or-</para>
                            <para><paramref name="left"/> and <paramref name="right"/> are <Strong>Null</Strong>.</para><br/>
                            <para><strong>Comparison Algorithm</strong></para>
                            <para>    left.Begin == right.Begin AND left.End == right.End</para>
                        </description>
            		</item>
            		<item>
            			<term>Greater than zero</term>
            			<description>
                            <para><paramref name="left"/> is greater than <paramref name="right"/>.</para>
                            <para>-or-</para>
                            <para><paramref name="right"/> is <Strong>Null.</Strong></para><br/>
                            <para><strong>Comparison Algorithm</strong></para>
                            <para>   left.Begin &gt; right.Begin OR (left.Begin == right.Begin AND left.End &gt; right.End)</para>
                        </description>
            		</item>
            	</list>       
                </para>
            </remarks>
            <seealso cref="M:Teradata.Client.Provider.TdPeriodDate.CompareTo(Teradata.Client.Provider.TdPeriodDate)"/>
            <param name="left">An instance of TdPeriodDate.</param>
            <param name="right">An instance of TdPeriodDate.</param>
        </member>
        <member name="M:Teradata.Client.Provider.TdPeriodDate.Equals(Teradata.Client.Provider.TdPeriodDate,Teradata.Client.Provider.TdPeriodDate)">
            <summary>
                Compares two <see cref="T:Teradata.Client.Provider.TdPeriodDate"/> structures to determine whether they are
                equal.
            </summary>
            <returns>
            <para>A boolean is returned that indicates the result of the comparison.</para>
            </returns>
            <remarks>
            <para>To determine whether two periods are equal, the beginning and ending bounds between
            the left and right operands are compared.  The two periods are equal if the following is true:</para>
            
            <pre>    left.Begin == right.Begin &amp;&amp; left.End == right.Begin</pre>
            
            	<para>
            		The value returned is <c>true</c> if the <paramref name="left"/> is 
                    equal to the <paramref name="right"/>, <c>false</c> otherwise.
                </para>
            	<para>
            		<list type="table">
            			<listheader>
            				<term>Return Value</term>
            				<description>Description</description>
            			</listheader>
            			<item>
            				<term><c>true</c></term>
                            <description>
                                <para><paramref name="left"/> and <paramref name="right"/> are <see cref="F:Teradata.Client.Provider.TdPeriodDate.Null"/></para> 
                                <para>-or-</para>
                                <para><paramref name="left"/> is equal to <paramref name="right"/>.</para>
                            </description>
            			</item>
            			<item>
            				<term><c>false</c></term>
                            <description>
                            <para><paramref name="left"/> or <paramref name="right"/> is <strong>Null</strong></para>
                            <para>-or-</para>
                            <para><paramref name="left"/> is not equal to <paramref name="right"/>.</para>
                            </description>
            			</item>
            		</list>
            	</para>
            </remarks>
            <example>
                The following code example uses various comparison methods and operators.
                <code lang="CS">
            TdPeriodDate  later = new TdPeriodDate(new TdDate(2010, 8, 31), new TdDate(2010, 10, 25));
            TdPeriodDate earlier = new TdPeriodDate(new TdDate(2007, 8, 31), new TdDate(2007, 11, 12));
             
            // The following comparison methods and operators are equivalent
            if (false == TdPeriodDate.Equals(later, earlier) ||
                late != earlier ||
                true == TdPeriodDate.NotEquals(later, earlier) )
            {
               Console.WriteLine(“later does not equal earlier”);
            }
                </code>
            </example>
            <param name="left">A TdPeriodDate instance.</param>
            <param name="right">A TdPeriodDate instance.</param>
        </member>
        <member name="M:Teradata.Client.Provider.TdPeriodDate.NotEquals(Teradata.Client.Provider.TdPeriodDate,Teradata.Client.Provider.TdPeriodDate)">
            <summary>
            Compares two TdPeriodDate structures to determine whether the <paramref name="left"/> operand is 
            not equal to the <paramref name="right"/> operand.
            </summary>
            <returns>
            A boolean is returned that indicates the result of the comparison.
            </returns>
            <remarks>
            <para>To determine whether two periods are not equal, the beginning and ending bounds between
            the left and right operands are compared.  The two periods are not equal if the following is true:</para>
            
            <pre>    left.Begin != right.Begin || left.End != right.End</pre>
            
            	<para>
            		The value returned is <c>true</c> if the <paramref name="left"/> is 
                    not equal to the <paramref name="right"/>, <c>false</c> otherwise.
                </para>
            	<para>
            		<list type="table">
            			<listheader>
            				<term>Return Value</term>
            				<description>Description</description>
            			</listheader>
            			<item>
            				<term><c>true</c></term>
                            <description>
                                <para><paramref name="left"/> or <paramref name="right"/> is <see cref="F:Teradata.Client.Provider.TdPeriodDate.Null"/></para> 
                                <para>-or-</para>
                                <para><paramref name="left"/> is less than or greater than <paramref name="right"/>.</para>
                            </description>
            			</item>
            			<item>
            				<term><c>false</c></term>
                            <description>
                            <para><paramref name="left"/> and <paramref name="right"/> are <strong>Null</strong></para>
                            <para>-or-</para>
                            <para><paramref name="left"/> is equal to <paramref name="right"/>.</para>
                            </description>
            			</item>
            		</list>
            	</para>
            </remarks>
            <param name="left">An instance of TdPeriodDate.</param>
            <param name="right">An instance of TdPeriodDate.</param>        
        </member>
        <member name="M:Teradata.Client.Provider.TdPeriodDate.GreaterThan(Teradata.Client.Provider.TdPeriodDate,Teradata.Client.Provider.TdPeriodDate)">
            <summary>
            Compares two TdPeriodDate structures to determine whether the <paramref name="left"/> operand is 
            greater than the <paramref name="right"/> operand.
            </summary>
            <returns>
            A boolean is returned that indicates the result of the comparison.
            </returns>
            <remarks>
            <para>The beginning and ending bounds between the left and right operands are compared to 
            determine whether the left period is greater than the right.  The left is greater
            than the right if the following is true:</para>
            
            <pre>    left.Begin &gt; right.Begin OR (left.Begin == right.Begin AND left.End &gt; right.End)</pre>
            
            	<para>
            		The value returned is <c>true</c> if the <paramref name="left"/> is greater
                    than the <paramref name="right"/>, <c>false</c> otherwise.
                </para>
            	<para>
            		<list type="table">
            			<listheader>
            				<term>Return Value</term>
            				<description>Description</description>
            			</listheader>
            			<item>
            				<term><c>true</c></term>
                            <description><paramref name="left"/> and <paramref name="right"/> are not <see cref="F:Teradata.Client.Provider.TdPeriodDate.Null"/> and
                            <paramref name="left"/> is greater than <paramref name="right"/>.
                            </description>
            			</item>
            			<item>
            				<term><c>false</c></term>
                            <description>
                            <para><paramref name="left"/> and / or <paramref name="right"/> is <strong>Null</strong> </para>
                            <para>-or-</para>
                            <para><paramref name="left"/> is less than or equal to <paramref name="right"/>.</para>
                            </description>
            			</item>
            		</list>
            	</para>
            
            <para>Comparison operators always returns <c>false</c> if one of the operands is 
            <strong>Null</strong>.  Therefore, you must not assume that the reverse condition 
            is <c>true</c>. For example you cannot assume that the left operand is less than or 
            equal to the right operand if the <c>GreaterThan</c> operator returns <c>false</c>.</para> 
            
            </remarks>
            <param name="left">An instance of TdDate.</param>
            <param name="right">An instance of TdDate.</param>
        </member>
        <member name="M:Teradata.Client.Provider.TdPeriodDate.GreaterThanOrEqual(Teradata.Client.Provider.TdPeriodDate,Teradata.Client.Provider.TdPeriodDate)">
            <summary>
            Compares two TdPeriodDate structures to determine whether the <paramref name="left"/> operand is 
            greater than or equal to the <paramref name="right"/> operand.
            </summary>
            <returns>
            A boolean is returned that indicates the result of the comparison.
            </returns>
            <remarks>
            <para>In order to perform this comparison the beginning and ending bounds of the left
            and right operands are compared against each other.  The left is greater than or equal
            to the right if the following is true:</para>
            
            <pre>    ((left.Begin &gt; right.Begin) OR (left.Begin == right.Begin AND left.End &gt;= right.End))</pre>
            
            	<para>
            		The value returned is <c>true</c> if the <paramref name="left"/> is greater
                    than or equal to the <paramref name="right"/>, <c>false</c> otherwise.
                </para>
            	<para>
            		<list type="table">
            			<listheader>
            				<term>Return Value</term>
            				<description>Description</description>
            			</listheader>
            			<item>
            				<term><c>true</c></term>
                            <description><paramref name="left"/> and <paramref name="right"/> are not <see cref="F:Teradata.Client.Provider.TdPeriodDate.Null"/> and
                            <paramref name="left"/> is greater than or equal to <paramref name="right"/>.
                            </description>
            			</item>
            			<item>
            				<term><c>false</c></term>
                            <description>
                            <para><paramref name="left"/> and / or <paramref name="right"/> is <strong>Null</strong> </para>
                            <para>-or-</para>
                            <para><paramref name="left"/> is less than <paramref name="right"/>.</para>
                            </description>
            			</item>
            		</list>
            	</para>
            
            <para>Comparison operators always returns <c>false</c> if one of the operands is 
            <strong>Null</strong>.  Therefore, you must not assume that the reverse condition is 
            <c>true</c>. For example you cannot assume that the left operand is less than the right 
            operand if <c>GreaterThanOrEqual</c> operator returns <c>false</c>.</para> 
            
            </remarks>
            <param name="left">An instance of TdPeriodDate.</param>
            <param name="right">An instance of TdPeriodDate.</param>
        </member>
        <member name="M:Teradata.Client.Provider.TdPeriodDate.LessThan(Teradata.Client.Provider.TdPeriodDate,Teradata.Client.Provider.TdPeriodDate)">
            <summary>
            Compares two TdPeriodDate structures to determine whether the <paramref name="left"/> operand is 
            less than the <paramref name="right"/> operand.
            </summary>
            <returns>
            A boolean is returned that indicates the result of the comparison.
            </returns>
            <remarks>
            <para>In order to perform this comparison the beginning and ending bounds of the left
            and right operands are compared against each other.  The left is less than the right if 
            the following is true:</para>
            
            <pre>    ((left.Begin &lt; right.Begin) OR (left.Begin == right.Begin AND left.End &lt;= right.End))</pre>
            
            	<para>
            		The value returned is <c>true</c> if the <paramref name="left"/> is less
                    than the <paramref name="right"/>, <c>false</c> otherwise.
                </para>
            	<para>
            		<list type="table">
            			<listheader>
            				<term>Return Value</term>
            				<description>Description</description>
            			</listheader>
            			<item>
            				<term><c>true</c></term>
                            <description><paramref name="left"/> and <paramref name="right"/> are not <see cref="F:Teradata.Client.Provider.TdPeriodDate.Null"/> and
                            <paramref name="left"/> is less than <paramref name="right"/>.
                            </description>
            			</item>
            			<item>
            				<term><c>false</c></term>
                            <description>
                            <para><paramref name="left"/> and / or <paramref name="right"/> is <strong>Null</strong></para>
                            <para>-or-</para>
                            <para><paramref name="left"/> is greater than or equal to <paramref name="right"/>.</para>
                            </description>
            			</item>
            		</list>
            	</para>
            <para>Comparison operators always returns <c>false</c> if one of the operands is 
            <strong>Null</strong>.  Therefore, you must not assume that the reverse condition 
            is <c>true</c>. For example you cannot assume that the left operand is greater than 
            or equal the right operand if the <c>LessThan</c> operator returns <c>false</c>.</para> 
            
            </remarks>
            <param name="left">An instance of TdPeriodDate.</param>
            <param name="right">An instance of TdPeriodDate.</param>
        </member>
        <member name="M:Teradata.Client.Provider.TdPeriodDate.LessThanOrEqual(Teradata.Client.Provider.TdPeriodDate,Teradata.Client.Provider.TdPeriodDate)">
            <summary>
            Compares two TdPeriodDate structures to determine whether the <paramref name="left"/> operand is 
            less than or equal to the <paramref name="right"/> operand.
            </summary>
            <returns>
            A boolean is returned that indicates the result of the comparison.
            </returns>
            <remarks>
            <para>In order to perform this comparison the beginning and ending bounds of the left
            and right operands are compared against each other.  The left is equal to or less than the right if 
            the following is true:</para>
            
            <pre>    ((left.Begin &lt; right.Begin) OR (left.Begin == right.Begin AND left.End &lt;= right.End))</pre>
            
            	<para>
            		The value returned is <c>true</c> if the <paramref name="left"/> is less
                    than or equal to the <paramref name="right"/>, <c>false</c> otherwise.
                </para>
            	<para>
            		<list type="table">
            			<listheader>
            				<term>Return Value</term>
            				<description>Description</description>
            			</listheader>
            			<item>
            				<term><c>true</c></term>
                            <description><paramref name="left"/> and <paramref name="right"/> are not <see cref="F:Teradata.Client.Provider.TdPeriodDate.Null"/> and
                            <paramref name="left"/> is less than or equal to <paramref name="right"/>.
                            </description>
            			</item>
            			<item>
            				<term><c>false</c></term>
                            <description>
                            <para><paramref name="left"/> and / or <paramref name="right"/> is <strong>Null</strong></para>
                            <para>-or-</para>
                            <para><paramref name="left"/> is greater than <paramref name="right"/>.</para>
                            </description>
            			</item>
            		</list>
            	</para>
            
            <para>Comparison operators always returns <c>false</c> if one of the operands is 
            <strong>Null</strong>.  Therefore, you must not assume that the reverse condition 
            is <c>true</c>. For example you cannot assume that the left operand is greater than 
            the right operand if the <c>LessThanOrEqual</c> operator 
            returns <c>false</c>.</para> 
            
            </remarks>
            <param name="left">An instance of TdPeriodDate.</param>
            <param name="right">An instance of TdPeriodDate.</param>
        </member>
        <member name="M:Teradata.Client.Provider.TdPeriodDate.op_Equality(Teradata.Client.Provider.TdPeriodDate,Teradata.Client.Provider.TdPeriodDate)">
            <summary>
            Compares two TdPeriodDate structures to determine whether the <paramref name="left"/> operand is 
            equal to the <paramref name="right"/> operand.
            </summary>
            <returns>
            A boolean is returned that indicates the result of the comparison.
            </returns>
            <remarks>
            <para>The beginning and ending bounds between the left and right operands are compared 
            to determine whether two periods are equal.  The two periods are equal if the following 
            is true:</para>
            
            <pre>    left.Begin == right.Begin &amp;&amp; left.End == right.Begin</pre>
            	<para>
            		The value returned is <c>true</c> if the <paramref name="left"/> is 
                    equal to the <paramref name="right"/>, <c>false</c> otherwise.
                </para>
            	<para>
            		<list type="table">
            			<listheader>
            				<term>Return Value</term>
            				<description>Description</description>
            			</listheader>
            			<item>
            				<term><c>true</c></term>
                            <description>
                                <para><paramref name="left"/> and <paramref name="right"/> are <see cref="F:Teradata.Client.Provider.TdPeriodDate.Null"/></para> 
                                <para>-or-</para>
                                <para><paramref name="left"/> is equal to <paramref name="right"/>.</para>
                            </description>
            			</item>
            			<item>
            				<term><c>false</c></term>
                            <description>
                            <para><paramref name="left"/> or <paramref name="right"/> is <strong>Null</strong></para>
                            <para>-or-</para>
                            <para><paramref name="left"/> is not equal to <paramref name="right"/>.</para>
                            </description>
            			</item>
            		</list>
            	</para>
            
            <para>
            Unlike comparison operators, Equality operators do not always return <c>false</c> when 
            left and right operands are <strong>Null</strong>. Therefore the reverse condition can 
            be considered <c>true</c>. TdDate implementation is very similar to the 
            <see cref="T:System.Nullable"/> class in this regard.
            </para>
            </remarks>
            <param name="left">An instance of TdPeriodDate.</param>
            <param name="right">An instance of TdPeriodDate.</param>        
            <example>
            The following example shows that the Equality operator can safely be used in an if statement.
            <code>
             TdPeriodDate x = TdPeriodDate.Null;
             TdPeriodDate y = new TdPeriodDate(new TdDate(2008, 10, 10), new TdDate(2008, 11, 30));
            
             if (x == y)
             {
                 // x is equal to y.
                 Console.WriteLine(@"X is equal to Y").
             }
             else
             {
                 // x is not equal y
                 Console.WriteLine(@"X is not equal to Y").
             }
            
             y = TdPeriodDate.Null;
            
             if (x == y)
             {
                 // x is equal to y.
                 Console.WriteLine(@"X is equal to Y").
             }
             else
             {
                 // x is not equal y
                 Console.WriteLine(@"X is not equal to Y").
             }
            </code>
            </example>
        </member>
        <member name="M:Teradata.Client.Provider.TdPeriodDate.op_Inequality(Teradata.Client.Provider.TdPeriodDate,Teradata.Client.Provider.TdPeriodDate)">
            <summary>
            Compares two TdPeriodDate structures to determine whether the <paramref name="left"/> operand is 
            not equal to the <paramref name="right"/> operand.
            </summary>
            <returns>
            A boolean is returned that indicates the result of the comparison.
            </returns>
            <remarks>
            <para>The beginning and ending bounds between the left and right operands 
            are compared to determine whether the two periods are not equal.  The two 
            periods are not equal if the following is true:</para>
            
            <pre>    left.Begin != right.Begin || left.End != right.End</pre>
            
            	<para>
            		The value returned is <c>true</c> if the <paramref name="left"/> is 
                    not equal to the <paramref name="right"/>, <c>false</c> otherwise.
                </para>
            	<para>
            		<list type="table">
            			<listheader>
            				<term>Return Value</term>
            				<description>Description</description>
            			</listheader>
            			<item>
            				<term><c>true</c></term>
                            <description>
                                <para><paramref name="left"/> or <paramref name="right"/> is <see cref="F:Teradata.Client.Provider.TdPeriodDate.Null"/></para> 
                                <para>-or-</para>
                                <para><paramref name="left"/> is less than or greater than <paramref name="right"/>.</para>
                            </description>
            			</item>
            			<item>
            				<term><c>false</c></term>
                            <description>
                            <para><paramref name="left"/> and <paramref name="right"/> are <strong>Null</strong></para>
                            <para>-or-</para>
                            <para><paramref name="left"/> is equal to <paramref name="right"/>.</para>
                            </description>
            			</item>
            		</list>
            	</para>
            </remarks>
            <param name="left">An instance of TdPeriodDate.</param>
            <param name="right">An instance of TdPeriodDate.</param>        
        </member>
        <member name="M:Teradata.Client.Provider.TdPeriodDate.op_GreaterThan(Teradata.Client.Provider.TdPeriodDate,Teradata.Client.Provider.TdPeriodDate)">
            <summary>
            Compares two TdPeriodDate structures to determine whether the <paramref name="left"/> is 
            greater than the <paramref name="right"/> operand.
            </summary>
            <returns>
            A boolean is returned that indicates the result of the comparison.
            </returns>
            <remarks>
            <para>The beginning and ending bounds between the left and right operands are 
            compared to determine whether the left period is greater than the right.  The left is greater
            than the right if the following is true:</para>
            
            <pre>    left.Begin &gt; right.Begin OR (left.Begin == right.Begin AND left.End &gt; right.End)</pre>
            
            	<para>
            		The value returned is <c>true</c> if the <paramref name="left"/> is greater
                    than the <paramref name="right"/>, <c>false</c> otherwise.
                </para>
            	<para>
            		<list type="table">
            			<listheader>
            				<term>Return Value</term>
            				<description>Description</description>
            			</listheader>
            			<item>
            				<term><c>true</c></term>
                            <description><paramref name="left"/> and <paramref name="right"/> are not <see cref="F:Teradata.Client.Provider.TdPeriodDate.Null"/> and
                            <paramref name="left"/> is greater than <paramref name="right"/>.
                            </description>
            			</item>
            			<item>
            				<term><c>false</c></term>
                            <description>
                            <para><paramref name="left"/> and / or <paramref name="right"/> is <strong>Null</strong> </para>
                            <para>-or-</para>
                            <para><paramref name="left"/> is less than or equal to <paramref name="right"/>.</para>
                            </description>
            			</item>
            		</list>
            	</para>
            
            <para>Comparison operators always returns <c>false</c> if one of the operands is 
            <strong>Null</strong>.  Therefore, you must not assume that the reverse condition 
            is <c>true</c>. For example you cannot assume that the left operand is less than or 
            equal to the right operand if the "<c>&gt;</c>" operator returns <c>false</c>.</para> 
            </remarks>
            <param name="left">An instance of TdPeriodDate.</param>
            <param name="right">An instance of TdPeriodDate.</param>
        </member>
        <member name="M:Teradata.Client.Provider.TdPeriodDate.op_GreaterThanOrEqual(Teradata.Client.Provider.TdPeriodDate,Teradata.Client.Provider.TdPeriodDate)">
            <summary>
            Compares two TdPeriodDate structures to determine whether the <paramref name="left"/> is 
            greater than or equal to the <paramref name="right"/> operand.
            </summary>
            <returns>
            A boolean is returned that indicates the result of the comparison.
            </returns>
            <remarks>
            <para>In order to perform this comparison the beginning and ending bounds of the left
            and right operands are compared against each other.  The left is greater than or equal
            to the right if the following is true:</para>
            
            <pre>    (left.Begin &gt; right.Begin) || (left.Begin == right.Begin &amp;&amp; left.End &gt;= right.End)</pre>
            
            	<para>
            		The value returned is <c>true</c> if the <paramref name="left"/> is greater
                    than or equal to the <paramref name="right"/>, <c>false</c> otherwise.
                </para>
            	<para>
            		<list type="table">
            			<listheader>
            				<term>Return Value</term>
            				<description>Description</description>
            			</listheader>
            			<item>
            				<term><c>true</c></term>
                            <description><paramref name="left"/> and <paramref name="right"/> are not <see cref="F:Teradata.Client.Provider.TdPeriodDate.Null"/> and
                            <paramref name="left"/> is greater than or equal to <paramref name="right"/>.
                            </description>
            			</item>
            			<item>
            				<term><c>false</c></term>
                            <description>
                            <para><paramref name="left"/> and / or <paramref name="right"/> is <strong>Null</strong> </para>
                            <para>-or-</para>
                            <para><paramref name="left"/> is less than <paramref name="right"/>.</para>
                            </description>
            			</item>
            		</list>
            	</para>
            
            <para>Comparison operators always returns <c>false</c> if one of the operands is 
            <strong>Null</strong>.  Therefore, you must not assume that the reverse condition 
            is <c>true</c>. For example you cannot assume that the left operand is less than the 
            right operand if the "<c>&gt;=</c>" operator returns <c>false</c>.</para> 
            </remarks>
            <param name="left">An instance of TdPeriodDate.</param>
            <param name="right">An instance of TdPeriodDate.</param>
        </member>
        <member name="M:Teradata.Client.Provider.TdPeriodDate.op_LessThan(Teradata.Client.Provider.TdPeriodDate,Teradata.Client.Provider.TdPeriodDate)">
            <summary>
            Compares two TdPeriodDate structures to determine whether the <paramref name="left"/> is 
            less than the <paramref name="right"/> operand.
            </summary>
            <returns>
            A boolean is returned that indicates the result of the comparison.
            </returns>
            <remarks>
            <para>In order to perform this comparison the beginning and ending bounds of the left
            and right operands are compared against each other.  The left is less than the right if 
            the following is true:</para>
            
            <pre>    left.Begin &lt; right.Begin || (left.Begin == right.Begin &amp;&amp; left.End &lt; right.End)</pre>
            
            	<para>
            		The value returned is <c>true</c> if the <paramref name="left"/> is less
                    than the <paramref name="right"/>, <c>false</c> otherwise.
                </para>
            	<para>
            		<list type="table">
            			<listheader>
            				<term>Return Value</term>
            				<description>Description</description>
            			</listheader>
            			<item>
            				<term><c>true</c></term>
                            <description><paramref name="left"/> and <paramref name="right"/> are not <see cref="F:Teradata.Client.Provider.TdPeriodDate.Null"/> and
                            <paramref name="left"/> is less than <paramref name="right"/>.
                            </description>
            			</item>
            			<item>
            				<term><c>false</c></term>
                            <description>
                            <para><paramref name="left"/> and / or <paramref name="right"/> is <strong>Null</strong></para>
                            <para>-or-</para>
                            <para><paramref name="left"/> is greater than or equal to <paramref name="right"/>.</para>
                            </description>
            			</item>
            		</list>
            	</para>
            
            <para>Comparison operators always returns <c>false</c> if one of the operands is 
            <strong>Null</strong>.  Therefore, you must not assume that the reverse condition is 
            <c>true</c>. For example you cannot assume that the left operand is greater than or 
            equal the right operand if the "<c>&lt;</c>" operator returns <c>false</c>.</para> 
            </remarks>
            <param name="left">An instance of TdPeriodDate.</param>
            <param name="right">An instance of TdPeriodDate.</param>
        </member>
        <member name="M:Teradata.Client.Provider.TdPeriodDate.op_LessThanOrEqual(Teradata.Client.Provider.TdPeriodDate,Teradata.Client.Provider.TdPeriodDate)">
            <summary>
            Compares two TdPeriodDate structures to determine whether the <paramref name="left"/> is 
            less than or equal to the <paramref name="right"/> operand.
            </summary>
            <returns>
            A boolean is returned that indicates the result of the comparison.
            </returns>
            <remarks>
            <para>In order to perform this comparison the beginning and ending bounds of the left
            and right operands are compared against each other.  The left is equal to or less than the right if 
            the following is true:</para>
            
            <pre>    left.Begin &lt; right.Begin || (left.Begin == right.Begin &amp;&amp; left.End &lt;= right.End)</pre>
            
            	<para>
            		<c>true</c> if the <paramref name="left"/> is less
                    than or equal to the <paramref name="right"/>, <c>false</c> otherwise.
                </para>
            	<para>
            		<list type="table">
            			<listheader>
            				<term>Return Value</term>
            				<description>Description</description>
            			</listheader>
            			<item>
            				<term><c>true</c></term>
                            <description><paramref name="left"/> and <paramref name="right"/> are not <see cref="F:Teradata.Client.Provider.TdPeriodDate.Null"/> and
                            <paramref name="left"/> is less than or equal to <paramref name="right"/>.
                            </description>
            			</item>
            			<item>
            				<term><c>false</c></term>
                            <description>
                            <para><paramref name="left"/> and / or <paramref name="right"/> is <strong>Null</strong></para>
                            <para>-or-</para>
                            <para><paramref name="left"/> is greater than <paramref name="right"/>.</para>
                            </description>
            			</item>
            		</list>
            	</para>
            
            <para>Comparison operators always returns <c>false</c> if one of the operands is 
            <strong>Null</strong>.  Therefore, you must not assume that the reverse condition is 
            <c>true</c>. For example you cannot assume that the left operand is greater than the 
            right operand if the "<c>&lt;=</c>" operator returns <c>false</c>.</para> 
            </remarks>
            <param name="left">An instance of TdPeriodDate.</param>
            <param name="right">An instance of TdPeriodDate.</param>
        </member>
        <member name="M:Teradata.Client.Provider.TdPeriodDate.CompareTo(Teradata.Client.Provider.TdPeriodDate)">
            <summary>
            Compares this instance to the specified TdPeriodDate <paramref name="other"/>. 
            </summary>
            <returns>
            The result of the comparison is returned as an integer.
            </returns>
            <remarks>
            	<para>
                    The integer returned when this instance is compared to <paramref name="other"/>
                    indicates the following:
                </para>
            	<para>
            	<list type="table">
            		<listheader>
            			<term>Return Value</term>
            			<description>Meaning</description>
            		</listheader>
            		<item>
            			<term>Less than zero</term>
            			<description>
                            <para>This instance is less than <paramref name="other"/>.</para> 
                            <para>-or-</para>
                            <para>This instance is <see cref="F:Teradata.Client.Provider.TdPeriodDate.Null"/>.</para><br/>
                            <para><strong>Comparison Algorithm</strong></para>
                            <para>    this.Begin &lt; other.Begin OR (this.Begin == other.Begin AND this.End &lt; other.End)</para>
                        </description>
            		</item>
            		<item>
            			<term>Zero</term>
            			<description>
                            <para>This instance is equal to <paramref name="other"/>.</para>
                            <para>-or-</para>
                            <para>This instance and <paramref name="other"/> are <Strong>Null</Strong>.</para><br/>
                            <para><strong>Comparison Algorithm</strong></para>
                            <para>    this.Begin == other.Begin AND this.End == other.End</para>
                        </description>
            		</item>
            		<item>
            			<term>Greater than zero</term>
            			<description>
                            <para>This instance is greater than <paramref name="other"/>.</para>
                            <para>-or-</para>
                            <para><paramref name="other"/> is <Strong>Null.</Strong></para><br/>
                            <para><strong>Comparison Algorithm</strong></para>
                            <para>    this.Begin &gt; other.Begin OR (this.Begin == other.Begin AND this.End &gt; other.End)</para>
                        </description>
            		</item>
            	</list>     
            	</para>
            </remarks>
            <param name="other">The TdPeriodDate to compare against.</param>
        </member>
        <member name="M:Teradata.Client.Provider.TdPeriodDate.CompareTo(System.Object)">
            <summary>
            Compares this instance to the specified TdPeriodDate <paramref name="obj"/>. 
            </summary>
            
            <returns>
            The result of the comparison is returned as an integer.
            </returns>
            
            <remarks>
            	<para>
                    The integer returned when this instance is compared to <paramref name="obj"/>
                    indicates the following:
                </para>
            	<para>
            	<list type="table">
            		<listheader>
            			<term>Return Value</term>
            			<description>Meaning</description>
            		</listheader>
            		<item>
            			<term>Less than zero</term>
            			<description>
                            <para>This instance is less than <paramref name="obj"/>.</para> 
                            <para>-or-</para>
                            <para>This instance is <see cref="F:Teradata.Client.Provider.TdPeriodDate.Null"/>.</para><br/>
                            <para><strong>Comparison Algorithm</strong></para>
                            <para>    this.Begin &lt; other.Begin OR (this.Begin == other.Begin AND this.End &lt; other.End)</para>
                        </description>
            		</item>
            		<item>
            			<term>Zero</term>
            			<description>
                            <para>This instance is equal to <paramref name="obj"/>.</para>
                            <para>-or-</para>
                            <para>This instance and <paramref name="obj"/> are <Strong>Null</Strong>.</para><br/>
                            <para><strong>Comparison Algorithm</strong></para>
                            <para>    this.Begin == other.Begin AND this.End == other.End</para>
                        </description>
            		</item>
            		<item>
            			<term>Greater than zero</term>
            			<description>
                            <para>This instance is greater than <paramref name="obj"/>.</para>
                            <para>-or-</para>
                            <para><paramref name="obj"/> is <Strong>Null.</Strong></para><br/>
                            <para><strong>Comparison Algorithm</strong></para>
                            <para>    this.Begin &gt; other.Begin OR (this.Begin == other.Begin AND this.End &gt; other.End)</para>
                        </description>
            		</item>
            	</list>     
            	</para>
            
              <para><paramref name="obj"/> must be an instance of TdPeriodDate type or <c>null</c> reference.</para>
            </remarks>
            
            <exception cref="T:System.ArgumentException"><paramref name="obj"/> is not of type TdPeriodDate</exception>
            <seealso cref="M:Teradata.Client.Provider.TdPeriodDate.CompareTo(Teradata.Client.Provider.TdPeriodDate)"/>
            
            <overloads>
            Compares this instance to the supplied object and returns whether it is less
            than, equal or greater than the supplied object.
            </overloads>
            
            <param name="obj">TdPeriodDate instance to compare against.</param>
        </member>
        <member name="M:Teradata.Client.Provider.TdPeriodDate.ToString">
            <summary>
            This instance of TdPeriodDate is converted to a String representation.
            </summary>
            
            <returns>The string representation of TdPeriodDate is returned.</returns>
            
            <remarks>
            <para>When a TdPeriodDate is converted to a string, both the beginning and ending bounds 
            will be included in the returning string.  The format of the string will be:</para>
            
            <pre>    (<i>Beginning Bound</i>, <i>Ending Bound</i>)  </pre>
            
            <para>The period will be surrounded by parentheses, and the comma will be used as the delimiter
            between the begin and end bounds.</para>
            
            <para>The string representation of TdDate will
            be equivalent to the &quot;G&quot; format specifier which is</para>
            
            <pre>    (yyyy-MM-dd, yyyy-MM-dd)</pre>
            
            <para>An example of a string representation of a TdPeriodDate is</para>
            
            <pre>    (2007-10-31, 2007-11-27)</pre>
            
            <para>Refer to <a href="PeriodString.htm">Period Strings</a> for additional information.</para>
            </remarks>
            <overloads>
            Returns the string representation of a period.
            </overloads>
        </member>
        <member name="M:Teradata.Client.Provider.TdPeriodDate.ToString(System.String)">
            <summary>
             TdPeriodDate is converted to the equivalent String using the specified format.
             </summary>
            <returns>A string representation of the Period.</returns>
            <param name="format">The DateTime format string that will be used to format the TdPeriodDate.</param>
            
            <remarks>
            	<para>When a TdPeriodDate is converted to a string, both the beginning and ending bounds 
             will be included in the returning string.  The format of the string will be:</para>
            
            	<pre>    (<i>Beginning Bound</i>, <i>Ending Bound</i>)   </pre>
            
            <para>The period is surrounded by parentheses, and a comma is used as a
            delimiter between the Begin and End bounds.</para>
            
             <para>The format specifier is only used when formatting the string representation of the 
             beginning and ending bounds of the period.  The same format specifiers listed in 
             <see cref="M:Teradata.Client.Provider.TdDate.ToString(System.String)"/> will be supported.</para>
            
             <para>If the format parameter is null, the string representation of TdPeriodDate will
             be equivalent to the "G" format specifier which is</para>
            
            	<pre>    (yyyy-MM-dd, yyyy-MM-dd)</pre>
            
            <para>All period types will support the following two format specifiers:</para>
            
            <para>
            <list type="table">
            <listheader>
            <term>Format Specifier</term>
            <description>Description</description>
            </listheader>
            <item>
            <term>G</term>
            <description><para>The ANSI representation of the period:  
            (yyyy-MM-dd, yyyy-MM-dd).</para>  
            <para>Example:  (2008-08-14, 2008-12-15).</para></description>
            </item>
            <item>
            <term>L or l</term>
            <description><para>The Teradata database's literal representation of the period:
            PERIOD'(yyyy-MM-dd, yyyy-MM-dd)'.</para>
            <para>Example:  PERIOD'(2008-04-14, 2008-12-15)'.</para></description>
            </item>
            </list>
            </para>
            </remarks>
            
            <seealso cref="M:Teradata.Client.Provider.TdDate.ToString(System.String)"/>
        </member>
        <member name="M:Teradata.Client.Provider.TdPeriodDate.ToString(System.String,System.IFormatProvider)">
            <summary>
             TdPeriodDate is converted into the equivalent String representation using the 
             specified format and culture information.
             </summary>
            <returns>A string representation of the period contained in TdPeriodDate.</returns>
            <param name="format">The DateTime format string that will be used to format the TdPeriodDate.</param>
            <param name="formatProvider">The culture specific information.  The culture specific information
            is not used when converting a Period into a string.</param>
            <remarks>
            	<para>When a TdPeriodDate is converted to a string, both the beginning and ending bound 
             will be included in the returning string.  The format of the string will be:</para>
            	
            <pre>    (<i>Beginning Bound</i>, <i>Ending Bound</i>)   </pre>
            
            	<para>The period is surrounded by parentheses, and a comma is used as a
            separator between the Begin and End bounds.</para>
            
            <para>The format specifier affects the string 
            representation of the beginning and ending bounds of the period.  Cultural information
            specified in the <paramref name="formatProvider"/> is ignored.</para>
            
            <para>The following format specifiers are supported by TdPeriodDate:</para>
            
            <para>
            <list type="table">
            <listheader>
            <term>Format Specifier</term>
            <description>Description</description>
            </listheader>
            <item>
            <term>G</term>
            <description><para>The ANSI representation of the period:  
            (yyyy-MM-dd, yyyy-MM-dd). </para> 
            <para>Example:  (2008-08-14, 2008-12-15).</para></description>
            </item>
            <item>
            <term>l or L</term>
            <description><para>The Teradata database's literal representation of the period:
            PERIOD'(yyyy-MM-dd, yyyy-MM-dd)'.</para>
            <para>Example:  PERIOD'(2008-04-14, 2008-12-15)'.</para></description>
            </item>
            </list>
            </para>
            </remarks>
            <seealso cref="M:Teradata.Client.Provider.TdDate.ToString(System.String,System.IFormatProvider)"/>
        </member>
        <member name="M:Teradata.Client.Provider.TdPeriodDate.Parse(System.String)">
            <summary>
            The specified string is converted into an equivalent TdPeriodDate.
            </summary>
            <returns>A TdPeriodDate is returned that is equivalent to the Period contained in the value string.</returns>
            <param name="value">The string that is to be converted into a TdPeriodDate.</param>
            <exception cref="T:System.ArgumentNullException">Value is a null reference.</exception>
            <exception cref="T:System.FormatException">Value does not contain a valid representation of a period.</exception>
            <remarks>
            <para>A period will have the following string representation: </para>
            
            <pre>    (<i>Beginning Bound</i>, <i>Ending Bound</i>)   </pre>
            
            <para>The period must be surrounded by parentheses.  Both the Beginning and Ending
            bounds can <strong>optionally</strong> be surrounded by single quotes (" ' ").  
            The exception to this is when the Teradata <strong>literal</strong> string representation of
            period is specified.
            The comma (" , ") is used as the delimeter between the Begin and End timestamps.  </para>
            
            <para>Refer to <see cref="M:Teradata.Client.Provider.TdPeriodDate.ToString(System.String)"/> for valid formats for TdPeriodDate.</para>
            
            </remarks>
            <seealso cref="M:Teradata.Client.Provider.TdDate.Parse(System.String)"/>
            <seealso cref="M:Teradata.Client.Provider.TdPeriodDate.ToString(System.String)"/>
        </member>
        <member name="M:Teradata.Client.Provider.TdPeriodDate.TryParse(System.String,Teradata.Client.Provider.TdPeriodDate@)">
            <summary>
            The specified string is converted into an equivalent TdPeriodDate.
             </summary>
            <returns>A Boolean is returned that indicates whether the conversion succeeded.  
             <c>true</c> indicates that the conversion was successful and that the conversion is 
             returned through the result parameter.  <c>false</c> indicates that the conversion 
             failed.</returns>
            
            <param name="value">The string that contains the TdPeriodDate representation.</param>
            <param name="result">The TdPeriodDate representation of the period contained in the specified string.</param>
            
            <remarks>
            <para>TryParse is the same as Parse except that an exception does not get thrown 
             when the conversion fails.</para>
            
            <para>A period will have the following string representation: </para>
            
            <para>    (<i>Beginning Bound</i>, <i>Ending Bound</i>)</para>
            
            <para>Refer to <see cref="M:Teradata.Client.Provider.TdPeriodDate.ToString(System.String)"/> for valid formats for TdPeriodDate.</para>
            
             <para>If <paramref name="value"/> is null or String.Empty, a <strong>false</strong> is
            returned and the <paramref name="result"/> parameter is set to <see cref="F:Teradata.Client.Provider.TdPeriodDate.MinValue"/>. </para>
            
             <para>If the conversion fails the result parameter will be set to MinValue.</para>
            
            </remarks>
            
            <seealso cref="M:Teradata.Client.Provider.TdPeriodDate.Parse(System.String)"/>
            <seealso cref="M:Teradata.Client.Provider.TdPeriodDate.TryParse(System.String,Teradata.Client.Provider.TdPeriodDate@)"/>
            <seealso cref="M:Teradata.Client.Provider.TdPeriodDate.ToString(System.String)"/>
        </member>
        <member name="M:Teradata.Client.Provider.TdPeriodDate.GetXmlSchema(System.Xml.Schema.XmlSchemaSet)">
             <summary>
             Specifies the XML Qualified name for <strong>TdPeriodDate</strong> XML type mapping.
             </summary>
             <param name="xmlSchemaSet">Holds zero or more XML Schema definition language (XSD) schemas.</param>
             <returns>
             Returns a XmlSchemaComplexType that describes a TdPeriodDate.
             </returns>
             <example>
             This examples shows how to use <strong>TdPeriodDate</strong> with the <see cref="T:System.Xml.Serialization.XmlSerializer"/> class.
             <see cref="T:System.Xml.Serialization.XmlElementAttribute"/> is used to indicate that the Teradata Database column can be <strong>Null</strong>.
             <code>
              public class ProductAdvertisement
              {
                  public TdDate Date;
            
                  public Int32 ProductId;
            
                  public Int32? QuantityAvailable;
             
                  [XmlElementAttribute(IsNullable = true)]        
                  public TdPeriodDate advertisePeriod
            
                  public String adPlacement;
              }
             
              internal class ProductAdvertisementWriter
              {
              
                  public static void Write()
                  {
                      // Setup the advertisement
                      ProductAdvertisement x = new ProductAdvertisement();
              
                      x.Date = new TdDate(DateTime.Today);
                      x.ProductId = 100;
                      x.QuantityAvailable = 2000;
             
                      // Advertisement will last for 7 days from today
                      x.AdvertisePeriod = new TdPeriodDate(new TdDate(DateTime.Today), new TdDate(DateTime.Today + new TimeSpan(7, 0, 0, 0)));
                      x.adPlacement = "The Newspaper";
            
                      // Write out advertisements.
                      //
                      // Open the file.
                      XmlWriterSettings settings = new XmlWriterSettings();
                      settings.Indent = true;
                      XmlWriter writer = XmlWriter.Create(@"C:\Temp\ProductAdvertisements.XML", settings);
                      writer.WriteStartElement("ProductAdvertisements");
                
                      // Write out the schema.
                      XmlSchemas schemas = new XmlSchemas();
                      XmlSchemaExporter schExporter = new XmlSchemaExporter(schemas);
                      schExporter.ExportTypeMapping(new XmlReflectionImporter().ImportTypeMapping(typeof(ProductAdvertisement)));
             
                      // The schemas must be compiled in order for the schema of the Period type
                      // to be written out.
                      schemas.Compile(null, false);
             
                      schemas[0].Write(writer);
            
                      // Write out the advertisement.
                      XmlSerializer xml = new XmlSerializer(typeof(ProductAdvertisement));
                      xml.Serialize(writer, x);
              
                      // Close the document.
                      writer.WriteEndDocument();
                      writer.Close();
                  }
              }
             
             /* Output is:
             
             <TodayOrders>
               <xs:schema elementFormDefault="qualified" xmlns:xs="http://www.w3.org/2001/XMLSchema">
                 <xs:element name="Order" nillable="true" type="Order"/>
                 <xs:complexType name="Order">
                   <xs:sequence>
                     <xs:element minOccurs="1" maxOccurs="1" name="Date" type="xs:date"/>
                     <xs:element minOccurs="1" maxOccurs="1" name="ProductId" type="xs:int"/>
                     <xs:element minOccurs="1" maxOccurs="1" name="QuantityAvailable" type="xs:int"/>
                     <xs:element minOccurs="1" maxOccurs="1" name="AdvertisePeriod" type="Teradata.Client.Provider.TdPeriodDate"/>
                     <xs:element minOccurs="1" maxOccurs="1" name="AdPlacement" nillable="true" type="xs:string"/>
                   </xs:sequence>
                 </xs:complexType>
                 <xs:complexType name="Teradata.Client.Provider.TdPeriodDate">
                   <xs:sequence>
                      <xs:element name="BeginBound" type="xs:date"/>
                      <xs:element name="EndBound" type="xs:date"/>
                   </xs:sequence>
               </xs:complexType>
               </xs:schema>
               <Order xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xmlns:xsd="http://www.w3.org/2001/XMLSchema">
                 <Date>2007-02-01</Date>
                 <ProductId>100</ProductId>
                 <QuantityAvailable>2000</QuantityAvailable>
                 <AdvertisePeriod>
                     <BeginBound>2007-02-01</BeginBound>
                     <EndBound>2007-02-08</EndBound>
                 </AdvertisePeriod>
                 <AdPlacement>The Newspaper</AdPlacement>
               </Order>
             </TodayOrders>
             
             */
             </code>
             </example>        
        </member>
        <member name="M:Teradata.Client.Provider.TdPeriodDate.IntervalTimeSpan">
            <summary>
            Calculates the number of days in the period and returns the result in a System.TimeSpan structure.  
            </summary>
            <returns>The TimeSpan value that contains the number days in the period.</returns>&gt;
            <exception cref="T:Teradata.Client.Provider.TdException">Period is null.</exception>
            <remarks>
            <para>The number of days starts from the beginning bound to, but does not include, the ending bound.</para>
            </remarks>
        </member>
        <member name="M:Teradata.Client.Provider.TdPeriodDate.IntervalYearToMonth">
            <summary>
               Calculates the number of days in the period and returns the result in a 
               <strong>TdIntervalYearToMonth</strong> structure.  
            </summary>
            <returns>
               The <strong>TdIntervalYearToMonth</strong> value that contains the difference in years 
               and months between the period ending bound and the period starting bound.
            </returns>&gt;
            <exception cref="T:Teradata.Client.Provider.TdException">This instance of <strong>TdPeriodDate</strong> is null.</exception>
            <remarks>
            <para>
               The difference between the ending bound and the starting bound are calculated.  Only the
               years and months are used in the calculation.
            </para>
            <para>
               The <strong>TdIntervalYearToMonth</strong> supports only years and months.  The days 
               are discarded during the difference calculation.
            </para>
            </remarks>
        </member>
        <member name="M:Teradata.Client.Provider.TdPeriodDate.IntervalDayToSecond">
            <summary>
               Calculates the number of days in the period and returns the result in a 
               <strong>TdIntervalDayToSecond</strong> structure.  
            </summary>
            <returns>
               The <strong>TdIntervalDayToSecond</strong> value that contains the difference in days
               between the period ending bound and the period starting bound.
            </returns>&gt;
            <exception cref="T:Teradata.Client.Provider.TdException">This instance of <strong>TdPeriodDate</strong> is null.</exception>
            <remarks>
            <para>
               The difference between the ending bound and the starting bound is calculated.  The number
               of days are calculated and returned as a <strong>TdIntervalDayToSecond</strong>.
            </para>
            </remarks>
        </member>
        <member name="M:Teradata.Client.Provider.TdPeriodDate.LeftDiff(Teradata.Client.Provider.TdPeriodDate,Teradata.Client.Provider.TdPeriodDate)">
            <summary>
            The period whose beginning and ending bounds are defined as the beginning bound of the 
            <paramref name="left"/> operand and the beginning bound of the <paramref name="right"/> 
            operand when the operands overlap.
            </summary>
            <param name="left">The left TdPeriodDate operand.</param>
            <param name="right">The right TdPeriodDate operand.</param>
            <returns>A TdPeriodDate is returned that includes the portion of the left operand that 
            exists before the beginning of the right operand when the operands overlap.</returns>
            <remarks>
            <para>A <see cref="F:Teradata.Client.Provider.TdPeriodDate.Null"/> is returned under the following scenarios:</para>
            
            <list type="bullet">
            <item>The left and right operands do not overlap.</item>
            <item>The beginning bound of the left operand is less than the beginning 
            bound of the right operand.</item>
            <item>Either the left or right operand is null.</item>
            </list>
            
            <para>In the following examples the left and right operand are defined as
            <strong>(bL, eL)</strong> and <strong>(bR, eR)</strong>, respectively.</para>
            
            <list type="table">
            <listheader>
            <term>Example</term>
            <description>Comments</description>
            </listheader>
            <item>
            <term>
            <pre>
            |-----|-----|------|
            bL    bR    eL     eR
            |=====|
            </pre>
            </term>
            <description>Ldiff = (bL, bR)</description>
            </item>
            <item>
            <term>
            <pre>
            |-------|-------|------|
            bL      bR      eR     eL
            |=======|
            </pre>
            </term>
            <description>Ldiff = (bL, bR)</description>
            </item>
            <item>
            <term>
            <pre>
            |-------|--------|-----|
            bL      eL       bR    eR
            </pre>
            </term>
            <description><para>Ldiff = TdPeriodDate.Null</para>
            <para>The left and right operands do not overlap.</para>
            </description>
            </item>
            <item>
            <term>
            <pre>
            |-------|-----|------|
            bR      bL    eR     eL
            </pre>
            </term>
            <description><para>Ldiff = TdPeriodDate.Null</para>
            <para>The beginning bound of the right operand is greater than the beginning bound of the left.</para>
            </description>
            </item>
            <item>
            <term>
            <pre>
            |---------|-------|
            bL      eL bR     eR
            </pre>
            </term>
            <description><para>Ldiff = TdPeriodDate.Null</para>
            <para>The left and right operands do not overlap.</para></description>
            </item>
            <item>
            <term>
            <pre>
              |-------|------|
            bL bR     eR     eL
            </pre>
            </term>
            <description><para>Ldiff = TdPeriodDate.Null</para>
            <para>The beginning bounds of both operands are equal.  A period cannot be
            created whose beginning and ending bounds are equal.</para>
            </description>
            </item>
            </list>
            
            </remarks>
        </member>
        <member name="M:Teradata.Client.Provider.TdPeriodDate.RightDiff(Teradata.Client.Provider.TdPeriodDate,Teradata.Client.Provider.TdPeriodDate)">
             <summary>
             The period that contains the portion from the ending bound of the <paramref name="left"/> operand to
             the ending bound of the <paramref name="right"/> when the operands overlap.
             </summary>
             <param name="left">The left TdPeriodDate operand.</param>
             <param name="right">The right TdPeriodDate operand.</param>
             <returns>A TdPeriodDate is returned that contains the period that begins from the 
             end of the left operand to the end of the right when the operands overlap.</returns>
             <remarks>
             <para>A <see cref="F:Teradata.Client.Provider.TdPeriodDate.Null"/> is returned under the following scenarios:</para>
             
             <list type="bullet">
             <item>The left and right operands do not overlap.</item>
             <item>The ending bound of the left operand is greater or equal to the ending bound of the right.</item>
             <item>Either the left or right operand is null.</item>
             </list>
             
             <para>In the following examples the left and right operands are defined as
             <strong>(bL, eL)</strong> and <strong>(bR, eR)</strong>, respectively.</para>
             
             <list type="table">
             <listheader>
             <item>Example</item>
             <description>Comments</description>
             </listheader>
             <item>
             <term>
             <pre>
             |------|-------|------|
             bL     bR      eL     eR
                            |======|
             </pre>
             </term>term&gt;
             <description>Rdiff = (eL, eR)</description>
             </item>
             <item>
             <term>
             <pre>
             |------|------|------|
             bR     bL     eL     eR
                           |======|
             </pre>
             </term>
             <description>Rdiff = (eL, eR)</description>
             </item>
             <item>
             <term>
             <pre>
             |-------|------|------|
             bL      bR     eR     eL
             </pre>
             </term>
             <description><para>Rdiff = null</para>
             <para>The left operand's ending bound is greater than the ending bound of the right operand.</para>
             </description>
             </item>
             <item>
             <term>
             <pre>
             |-------|-----|--------|
             bL      eL    bR       eR
             </pre>
             </term>
             <description><para>Rdiff = null</para>
             <para>The left and right operands do not overlap.</para>
             </description>
             </item>
             <item>
             <term>
             <pre>
             |-------|-----|--------|
             bR      eR    bL       eL
             </pre>
             </term>
             <description><para>Rdiff = null</para>
             <para>The left and right operands do not overlap.</para>
             </description>
             </item>
             <item>
             <term>
             <pre>
             |----------|----------|
             bL         bR       eL eR
             </pre>
             </term>
             <description><para>Rdiff = null</para>
             <para>The ending bounds are equal.  In other words, a period cannot be defined
             whose starting and ending bounds are equal.</para>
             </description>
             </item>
             </list>
            
             </remarks>
        </member>
        <member name="M:Teradata.Client.Provider.TdPeriodDate.Normalize(Teradata.Client.Provider.TdPeriodDate,Teradata.Client.Provider.TdPeriodDate)">
             <summary>
             A TdPeriodDate that contains a period that encompasses both periods of the
             left and right operands.  The beginning bound is defined as the minimum of
             left and right beginning bounds, and the ending bound is defined as the 
             maximum of the left and right ending bounds.  The operands must either meet
             or overlap.
             </summary>
             <param name="left">The left TdPeriodDate operand.</param>
             <param name="right">The right TdPeriodDate operand.</param>
             <returns>A TdPeriodDate is returned whose period includes both operands.</returns>
             <remarks>
             <para>A <see cref="F:Teradata.Client.Provider.TdPeriodDate.Null"/> is returned under the following scenarios:</para>
             
             <list>
             <item>The left and right operands do not overlap.</item>
             <item>Either the left or right operand is null.</item>
             </list>
             
             <para>In the following examples the left and right operands are defined as
             <strong>(bL, eL)</strong> and <strong>(bR, eR)</strong>, respectively.</para>
             
             <list type="table">
             <listheader>
             <term>Example</term>
             <description>Comments</description>
             </listheader>
             <item>
             <term>
             <pre>
             |--------|-------|------|
             bL       bR      eL     eR
             |=======================|
             </pre>
             </term>
             <description>Normalize = (bL, eR)</description>
             </item>
             <item>
             <term>
             <pre>
             |-------|-------|--------|
             bR      bL      eR       eL
             |========================|
             </pre>
             </term>
             <description> Normalize = (bR, eL)</description>
             </item>
             <item>
             <term>
             <pre>
             |-------|------|-------|
             bL      bR     eR      eL
             |======================|
             </pre>
             </term>
             <description>Normalize = (bL, eL)</description>
             </item>
             <item>
             <term>
             <pre>
             |--------|------|-------|
             bR       bL     eL      eR
             |=======================|
             </pre>
             </term>
             <description>Normalize = (bR, eR)</description>
             </item>
             <item>
             <term>
             <pre>
             |---------|---------|
             bL      eL bR       eR
             |===================|
             </pre>
             </term>
             <description>Normalize = (bL, eR)</description>
             </item>
             <item>
             <term>
             <pre>
             |-------|-----|-------|
             bL      eL    bR      eR
             </pre>
             </term>
             <description><para>Normalize = TdPeriodDate.Null</para>
             <para>The periods do not overlap.</para>
             </description>
             </item>
             </list>
            
             </remarks>
        </member>
        <member name="M:Teradata.Client.Provider.TdPeriodDate.Precedes(Teradata.Client.Provider.TdPeriodDate)">
             <summary>
             Indicates whether the this instance precedes the value.
             </summary>
             <param name="value">The TdPeriodDate operand .</param>
             <returns>A <c>true</c> is returned when this instance precedes the value,  otherwise 
             a <c>false </c>is returned.</returns>
             <remarks>
             <para>A <c>false</c> will be returned if either this instance or the <paramref name="value"/> is <see cref="F:Teradata.Client.Provider.TdPeriodDate.Null"/>.</para>
             
             <para>The this instance will precede the value if the ending bound of this instance is
             less than or equal to the starting bound of the value.</para>
             
             <para>In the following examples, this instance is considered the Left operand and 
             right operand is the value.  The Left and Right operands are defined as
             <strong>(bL, eL)</strong> and <strong>(bR, eR)</strong>, respectively.</para>
             
             <list type="table">
             <listheader>
             <term>Example</term>
             <description>Comments</description>
             </listheader>
             <item>
             <term>
             <pre>
             |-----------|---------|
             bL        eL bR       eR
             </pre>
             </term>
             <description>Precedes = true</description>
             </item>
             <item>
             <term>
             <pre>
             |-------|------|-------|
             bL      eL     bR      eR
             </pre>
             </term>
             <description>Precedes = true</description>
             </item>
             <item>
             <term>
             <pre>
             |-------|-------|-------|
             bL      bR      eL      eR
             </pre>
             </term>
             <description><para>Precedes = false</para>
             <para>There is an intersection between the operands; therfore, the left 
             does not precede the right.</para>
             </description>
             </item>
             <item>
             <term>
             <pre>
             |-------|--------|
             bR    eR bL      eL
             </pre>
             </term>
             <description><para>Precedes = false</para>
             <para>The left operand appears after the right operand.</para>
             </description>
             </item>
             </list>
            
             </remarks>
        </member>
        <member name="M:Teradata.Client.Provider.TdPeriodDate.Precedes(Teradata.Client.Provider.TdDate)">
            <summary>
            Indicates that this instance precedes the date value.
            </summary>
            <param name="value">The date value.</param>
            <returns>A <c>true</c> is returned when this instance precedes the date value, otherwise a 
            <c>false</c> is returned.</returns>
            <remarks>
            <para>A <c>false</c> will be returned if either this instance or <paramref name="value"/> is <see cref="F:Teradata.Client.Provider.TdDate.Null"/>.</para>
            
            <para>This instance will precede the date value if the ending bound of this instance
            is less than or equal to the date value.</para>
            
            <para>The following are examples.</para>
            <list type="table">
            <listheader>
            <term>Result</term>
            <description>Precedes</description>
            </listheader>
            <item>
            <term>true</term>
            <description><para>Period: (2006-04-01, 2006-04-15)</para>
                         <para>Date: 2006-04-15</para></description>
            </item>
            <item>
            <term>true</term>
            <description><para>Period: (2006-05-31, 2006-06-05)</para>
                         <para>Date: 2006-10-01</para></description>
            </item>
            <item>
            <term>false</term>
            <description><para>Period: (2008-12-15, 2008-12-31)</para>
                         <para>Date: 2008-12-20</para></description>
            </item>
            <item>
            <term>false</term>
            <description><para>Period: (2008-02-01, 2008-03-01)</para>
                         <para>Date: 2008-02-01</para></description>
            </item>
            <item>
            <term>false</term>
            <description><para>Period: (2008-09-05, 2008-09-15)</para>
                        <para>Date: 2008-01-17</para></description>
            </item>
            </list>
            </remarks>
            <overloads>
            Determines whether a period or TdDate precedes this instance of TdDate.
            </overloads>
        </member>
        <member name="M:Teradata.Client.Provider.TdPeriodDate.Succeeds(Teradata.Client.Provider.TdPeriodDate)">
            <summary>
            Indicates whether this instance succeeds the value.
            </summary>
            <param name="value">The TdPeriodDate operand that this instance is compared against.</param>
            <returns>A <c>true</c> is returned when the this instance succeeds the value,  otherwise 
            a <c>false </c>is returned.</returns>
            <remarks>
            <para>A <c>false</c> will be returned if the <paramref name="value"/> is <see cref="F:Teradata.Client.Provider.TdPeriodDate.Null"/>.</para>
            
            <para>This instance will succeed the value if the beginning bound of the this instance is
            greater than or equal to the ending bound of the value.</para>
            
            <para>In the following examples, consider this instance the Left operand and right operand
            as the value.  The Left and Right periods are defined as
            <strong>(bL, eL)</strong> and <strong>(bR, eR)</strong>, respectively.</para>
            
            <list type="table">
            <listheader>
            <term>Example</term>
            <description>Comments</description>
            </listheader>
            <item>
            <term>
            <pre>
            |-----------|--------|
            bL        eL bR      eR
            </pre>
            </term>
            <description><para>Succeeds = false</para>
            <para>The left operand appears before the right operand.</para>
            </description>
            </item>
            <item>
            <term>
            <pre>
            |------|------|-------|
            bL     eL     bR      eR
            </pre>
            </term>
            <description><para>Succeeds = false</para>
            <para>The left operand appears before the right operand.</para>
            </description>
            </item>
            <item>
            <term>
            <pre>
            |------|-------|-------|
            bL     bR      eL      eR
            </pre>
            </term>
            <description><para>Succeeds = false</para>
            <para>There is an intersection between the operands; therfore, the left 
            does not succeeds the right.</para>
            </description>
            </item>
            <item>
            <term>
            <pre>
            |-------|--------|
            bR    eR bL      eL
            </pre>
            </term>
            <description>Succeeds = true</description>
            </item>
            <item>
            <term>
            <pre>
            |-------|---|-----|
            bR      eR  bL    eL
            </pre>
            </term>
            <description>Succeeds = true</description>
            </item>
            </list>
            
            </remarks>
        </member>
        <member name="M:Teradata.Client.Provider.TdPeriodDate.Succeeds(Teradata.Client.Provider.TdDate)">
            <summary>
            Indicates that this instance the date value.
            </summary>
            <param name="value">The date value.</param>
            <returns>A <c>true</c> is returned when this instance succeeds the value, otherwise a 
            <c>false</c> is returned.</returns>
            <remarks>
            <para>A <c>false</c> will be returned if the <paramref name="value"/> is <see cref="F:Teradata.Client.Provider.TdDate.Null"/>.</para>
            <para>This instance will succeed the date value if the beginning bound of this instance
            is greater than the date value.</para>
            
            <para>The following are examples.</para>
            <list type="table">
            <listheader>
            <term>Result</term>
            <description>Precedes</description>
            </listheader>
            <item>
            <term>false</term>
            <description><para>Period: (2006-04-01, 2006-04-15)</para>
                         <para>Date: 2006-04-15</para></description>
            </item>
            <item>
            <term>false</term>
            <description><para>Period: (2006-05-31, 2006-06-05)</para>
                         <para>Date: 2006-10-01</para></description>
            </item>
            <item>
            <term>false</term>
            <description><para>Period: (2008-12-15, 2008-12-31)</para>
                         <para>Date: 2008-12-20</para></description>
            </item>
            <item>
            <term>false</term>
            <description><para>Period: (2008-02-01, 2008-03-01)</para>
                         <para>Date: 2008-02-01</para></description>
            </item>
            <item>
            <term>true</term>
            <description><para>Period: (2008-09-05, 2008-09-15)</para>
                         <para>Date: 2008-01-17</para></description>
            </item>
            <item>
            <term>true</term>
            <description><para>Period: (2008-09-05, 2008-09-15)</para>
                         <para>Date: 2008-09-04</para></description>
            </item>
            </list>
            </remarks>
            <overloads>
            Determines whether a period or TdDate succeeds this instance of TdDate.
            </overloads>
        </member>
        <member name="M:Teradata.Client.Provider.TdPeriodDate.Meets(Teradata.Client.Provider.TdPeriodDate)">
            <summary>
            Indicates whether this instance meets the period value.  
            </summary>
            <param name="value">The TdPeriodDate operand.</param>
            <returns>A <c>true</c> is returned if this instance meets the value, otherwise a 
            <c>false</c> is returned.</returns>
            <remarks>
            <para>A <c>false</c> will be returned if the <paramref name="value"/> is <see cref="F:Teradata.Client.Provider.TdPeriodDate.Null"/>.</para>
            
            <para>Two periods meet if the beginning bound of one period equals the ending bound of the other.</para>
            
            <para>In the following examples consider this instance to be the Left operand and the Right operand
            as the value.  The Left and Right operands are defined as
            <strong>(bL, eL)</strong> and <strong>(bR, eR)</strong>, respectively.</para>
            
            <list type="table">
            <listheader>
            <term>Example</term>
            <description>Comments</description>
            </listheader>
            <item>
            <term>
            <pre>
            |--------|----------|
            bR     eR bL        eL
            </pre>
            </term>
            <description><para>Meets = true</para>
            <para>The ending bound of the right operand equals the beginning bound of the left operand.</para></description>
            </item>
            <item>
            <term>
            <pre>
            |---------|--------|
            bL      eL bR      eR
            </pre>
            </term>
            <description><para>Meets = true</para>
            <para>The ending bound of the left operand equals the beginning bound of the right operand.</para>
            </description>
            </item>
            <item>
            <term>
            <pre>
              |--------------|
            bL bR          eL eR
            </pre>
            </term>
            <description>Meets = false</description>
            </item>
            <item>
            <term>
            <pre>
              |--------|--------|
            bL bR      eL       eR
            </pre>
            </term>
            <description>Meets = false</description>
            </item>
            <item>
            <term>
            <pre>
            |------|----|-------|
            bL     eL   bR      eR
            </pre>
            </term>
            <description>Meets = false</description>
            </item>
            </list>
            
            </remarks>
        </member>
        <member name="M:Teradata.Client.Provider.TdPeriodDate.Meets(Teradata.Client.Provider.TdDate)">
            <summary>
            Indicates whether this instance meets the TdDate value.
            </summary>
            <param name="value">The TdDate operand. </param>
            <returns>A <c>true</c> is returned if this instance meets the date value, otherwise a 
            <c>false</c> is returned.</returns>
            <remarks>
            <para>A <c>false</c> will be returned if the value operand is <see cref="F:Teradata.Client.Provider.TdDate.Null"/>.</para>
            
            <para>A period and TdDate value meet if the value is not included in the period but
            is one time granule less than the beginning bound or the same as the ending bound.  </para>
            
            <para>The following are examples:</para>
            
            <list type="table">
            <listheader>
            <term>Result</term>
            <description>Meets</description>
            </listheader>
            <item>
            <term>true</term>
            <description><para>Period: (2007-11-01, 2007-11-15) </para>
                         <para>Date: 2007-11-15</para></description>
            </item>
            <item>
            <term>true</term>
            <description><para>Period: (2008-01-01, 2008-02-01) </para>
                         <para>Date: 2007-12-31</para></description>
            </item>
            <item>
            <term>false</term>
            <description><para>Period: (2008-01-01, 2008-02-01) </para>
                         <para>Date:2008-01-01</para></description>
            </item>
            <term>
            <item>false</item>
            <description><para>Period: (2008-03-10, 2008-03-31) </para>
                         <para>Date: 2008-04-01</para></description>
            </term>
            </list>
            </remarks>
            <overloads>
            Determines whether a period or TdPeriodDate meets this instance of TdPeriodDate.
            </overloads>
        </member>
        <member name="M:Teradata.Client.Provider.TdPeriodDate.Intersect(Teradata.Client.Provider.TdPeriodDate,Teradata.Client.Provider.TdPeriodDate)">
             <summary>
             The intersection between the <paramref name="left"/> and <paramref name="right"/>
             operands is calculated.
             </summary>
             
             <param name="left">The left TdPeriodDate operand.</param>
             <param name="right">The right TdPeriodDate operand.</param>
             
             <returns>A period that is the intersection between the left and right operands 
             is returned.</returns>
             
             <remarks>
             <para>A TdPeriodDate.Null is returned under the following scenarios:</para>
             <list type="bullet">
             <item>Either the left or right operand is TdPeriodDate.Null.</item>
             <item>The left and right operands do not intersect.</item>
             <item>The ending bound of one operand is the same as the beginning bound of the other operand.</item>
             </list>
             
             <para>In the following examples <strong>(bL, eL)</strong> is the left operand and 
             <strong>(bR, eR)</strong> is the right operand.</para>
             
             <list type="table">
             <listheader>
             <term>Example</term>
             <description>Comments</description>
             </listheader>
             <item>
             <term>
             <pre>
             |------|--------|------|
             bL     bR       eL     eR
                    |========|
             </pre>
             </term>
             <description>Intersection = (bR, eL)</description>
             </item>
             <item>
             <term>
             <pre>
             |------|---------|------|
             bL     bR        eR     eL
                    |=========|  
             </pre>
             </term>
             <description>Intersection = (bR, eR)</description>
             </item>
             <item>
             <term>
             <pre>
             |--------|---------|
             bL     eL bR       eR
             </pre>
             </term>
             <description><para>Intersection = null</para>
             <para>The ending bound of the first operand is the same as the 
             starting bound of the second operand, eL = bR.</para>
             </description>
             </item>
             <item>
             <term>
             <pre>
             |--------|---|------|
             bL       eL  bR     eR
             </pre>
             </term>
             <description><para>Intersection = null</para>
             <para>The periods do not intersect.</para>
             </description>
             </item>
             </list>
            
             </remarks>
        </member>
        <member name="M:Teradata.Client.Provider.TdPeriodDate.Contains(Teradata.Client.Provider.TdDate)">
            <summary>
            Indicates whether the TdDate <paramref name="value"/> is contained in this
            instance of TdPeriodDate.
            </summary>
            <param name="value">The TdDate that is to be found in the period.</param>
            <returns>A boolean value is returned that indicates whether the value
            is contained in the period.</returns>
            <remarks>
            A <c>false</c> is returned if value is <strong>Null</strong>.
            
            A <c>true</c> is returned if the value is contained in the period, otherwise 
            a <c>false</c> is returned.
            </remarks>
        </member>
        <member name="P:Teradata.Client.Provider.TdPeriodDate.ObjectId">
            <summary>
            Gets the Instance Object Identifier.
            </summary>
        </member>
        <member name="P:Teradata.Client.Provider.TdPeriodDate.IsNull">
            <summary>
            Gets boolean value that indicates whether this TdPeriodDate instance is <see cref="F:Teradata.Client.Provider.TdPeriodDate.Null"/>. 
            </summary>
            <value>
            <c>true</c> if this TdPeriodDate is Null; <c>false</c> otherwise.
            </value>
        </member>
        <member name="P:Teradata.Client.Provider.TdPeriodDate.Begin">
            <summary>
            Gets the beginning bound of the period.
            </summary>
            <value>The TdDate representation of the beginning bound.</value>
            <exception cref="T:Teradata.Client.Provider.TdException">Period is null.</exception>
            <remarks>
            The beginning bound is <strong>inclusive</strong> to the Period.  For more information
            about periods refer to <a href="PeriodTypeOverview.htm">Period Types Overview</a>.
            </remarks>
            <seealso cref="!:PeriodTypeOverview.html">Period Types Overview</seealso>
        </member>
        <member name="P:Teradata.Client.Provider.TdPeriodDate.End">
            <summary>
            Gets the ending bound of the period.
            </summary>
            <value>The TdDate representation of the ending bound.</value>
            <exception cref="T:Teradata.Client.Provider.TdException">Period is null.</exception>
            <remarks>
            The ending bound is <strong>exclusive</strong> to the period.  For more information
            about periods refer to <a href="PeriodTypeOverview.htm">Period Types Overview</a>
            </remarks>
            <seealso cref="!:PeriodTypeOverview.html">Period Types Overview</seealso>
        </member>
        <member name="P:Teradata.Client.Provider.TdPeriodDate.Last">
            <summary>
            Gets the last time element of the period.  
            </summary>
            <value>The TdDate value that is equivalent to <see cref="P:Teradata.Client.Provider.TdPeriodDate.End"/> - 1 day.</value>
            <exception cref="T:Teradata.Client.Provider.TdException">Period is null.</exception>
        </member>
        <member name="P:Teradata.Client.Provider.TdPeriodDate.Value">
            <summary>
            Gets the ANSI string representation of the this instance of the period.
            </summary>
            <exception cref="T:Teradata.Client.Provider.TdException">Period is null.</exception>
        </member>
        <member name="T:Teradata.Client.Provider.TdIntervalDay">
            <summary>
                <see cref="T:Teradata.Client.Provider.TdIntervalDay"/> represents an interval of time defining a duration in
                days. The day precision is configurable.
            </summary>
            <remarks>
            	<para>
                   <strong>TdIntervalDay</strong> is a .NET Data Provider for Teradata specific type,
                   designed to support a Teradata Database Interval Day data type.
                </para>
            	<para>
                    The <strong>TdIntervalDay</strong> supports the Teradata Interval Day (precision)
                    data type where precision indicates the number of digits in the day (from 1 - 4).
                </para>
                <para>
                    The interval value must be specified in the following format :
                </para>
            	<para>[sign][days]</para>
            	<para>Below is the description of each format item.</para>
            	<para>
            		<list type="table">
            			<listheader>
            				<term>Format Item</term>
            				<description>Description</description>
            			</listheader>
            			<item>
            				<term>sign</term>
            				<description>Optional - . Defaults as space character
                            (+).</description>
            			</item>
            			<item>
            				<term>days</term>
            				<description>Required number of days (one to four digits in
                            length).</description>
            			</item>
            		</list>
            	</para>
            	<para>
                   The .Net Framework does not have a system type that directly corresponds to
                   the Teradata Database Interval Day data type. The .NET Data Provider for Teradata
                   Version 13.0 version and earlier versions map Interval Day to System.String. With 
                   version 13.1 of the provider, <strong>TdIntervalDay</strong> is available to 
                   retrieve and manipulate data of type Interval Day.
                </para>
            	<para>The range of values for each TdInterval precision is as follows:</para>
            	<para>
            		<table class="xmldoctable" cellspacing="0">
            			<tbody>
            				<tr>
            					<th>Type and Precision</th>
            					<th>Minimum</th>
            					<th>Maximum</th>
            				</tr>
            				<tr>
            					<td class="xmldoctable">TdIntervalDay(1)</td>
            					<td class="xmldoctable">
            						<para>-'9'</para>
            					</td>
            					<td>'9'</td>
            				</tr>
            				<tr>
            					<td class="xmldoctable">TdIntervalDay(2)</td>
            					<td class="xmldoctable">
            						<para>-'99'</para>
            					</td>
            					<td>'99'</td>
            				</tr>
            				<tr>
            					<td class="xmldoctable">TdIntervalDay(3)</td>
            					<td class="xmldoctable">
            						<para>-'999'</para>
            					</td>
            					<td>'999'</td>
            				</tr>
            				<tr>
            					<td class="xmldoctable">TdIntervalDay(4)</td>
            					<td class="xmldoctable">
            						<para>-'9999'</para>
            					</td>
            					<td>'9999'</td>
            				</tr>
            			</tbody>
            		</table>
            	</para>
                <para>
                    <strong>TdIntervalDay</strong> also supports <see cref="F:Teradata.Client.Provider.TdIntervalDay.Null"/>.  
                    This is a very important feature. An application is no longer required to call
                     <see cref="M:Teradata.Client.Provider.TdDataReader.IsDBNull(System.Int32)"/> before invoking the corresponding 
                    TdDataReader "Get" method.  This will improve overall performance.
                </para>
                <para>
                    A <strong>TdIntervalDay</strong> structure allows arithmetic,
                    comparision and conversion operations to be performed. 
                </para>
            	<para>
                    A <strong>TdIntervalDay</strong> may also be specified as an in, out, 
                    or in/out parameter to a stored procedure. In order to maintain backward  
                    compatibility with previous versions of the provider (release 13.0 and prior), 
                    a Connection String Attribute
                    <see cref="P:Teradata.Client.Provider.TdConnectionStringBuilder.EnableTdIntervals">EnableTdIntervals</see>
                    has been added. When the <strong>EnableTdIntervals</strong> attribute
                    is <c>true</c>, <see cref="P:Teradata.Client.Provider.TdParameter.ProviderSpecificValue"/> will
                    return the data as the provider specific type of <strong>TdIntervalDay</strong>.
                    When <strong>EnableTdIntervals</strong> is <c>false</c>, 
                    <strong>TdParameter.ProviderSpecificValue</strong> will return the data as a
                    .NET Framework Library data type of <see cref="T:System.String"/>.
                </para>
            	<para>
                    The <see cref="P:Teradata.Client.Provider.TdParameter.Value"/> will also return the .NET Framework Library
                    data type of <strong>System.String</strong> when <strong>EnableTdIntervals</strong>
                    is <c>false</c> to maintain backward compatibility. 
                    The <strong>TdParameter.Value</strong> will return a .NET Framework data type of
                    <see cref="T:System.TimeSpan"/> when <strong>EnableTdIntervals</strong>
                    is <c>true</c>.
                </para>
            	<para>
                   For more information on the Teradata Interval Day data type please
                   see the Teradata Database SQL Reference - 'Data Types and Literals'.
               </para>
            </remarks>
            <example>
            	<para>
                   The following example shows how to retrieve a <strong>TdIntervalDay</strong>, 
                   modify the interval, and then update the table.
               </para>
            	<code lang="CS">
            Public void IntervalExample(TdCommand cmd, String model)
            {
               cmd.Parameters.Clear();
               
               cmd.CommandText = "SELECT StartDate, LeaseReturn, DelayPeriod " +
                                 "FROM AutoLeases " +
                                 "WHERE Model = ?";
             
               cmd.CommandType = CommandType.Text;
             
               cmd.Parameters.Add(null, TdType.VarChar, 10,
                    ParameterDirection.Input, true, 0, 0, null,    
                    DataRowVersion.Default, model);
             
               Int32 row = 0;
               TdDate [] startDate;
               TdTimestamp [] leaseReturn;
               TdIntervalDay [] leaseLen;
               
               using (TdDataReader dr = cmd.ExecuteReader())
               {
                  startDate = new TdDate[dr.RecordsReturned];
                  leaseReturn = new TdTimestamp[dr.RecordsReturned];
                  leaseLen = new TdIntervalDay [dr.RecordsReturned];
             
                  // Specifying an interval of 7 days with a day precision of 4
                  TdIntervalDay leaseReturnExtension = new TdIntervalDay(7, 4);
               
                  while (dr.Read())
                  {
                     // Retrieving the dates
                     startDate[row] = dr.GetTdDate(0);
                     leaseReturn[row] = dr.GetTimestamp(1);
                     leaseLen[row] = dr.GetTdIntervalDay(2);
             
                     // Adding extension to the lease return
                     leaseReturn[row] = leaseReturn[row] + leaseReturnExtension;
             
                     // Adding extension to the lease length;
                     leaseLen[row] = leaseLen[row] + leaseReturnExtension;
             
                     row++;
                  } 
               }
             
               cmd.Parameters.Clear();
             
               cmd.CommandText = "UPDATE AutoLeases " +
                                 "SET LeaseReturn = ?, LeaseLen = ? " +
                                 "WHERE Model = ?";
             
               cmd.Parameters.Add(null, TdType.Timestamp, 0,
                     ParameterDirection.Input, true, 0, 0, null,    
                     DataRowVersion.Default, null);
             
               cmd.Parameters.Add(null, TdType.IntervalDay, 0,
                     ParameterDirection.Input, true, 0, 0, null,    
                     DataRowVersion.Default, null);
             
               cmd.Parameters.Add(null, TdType.VarChar, 9,
                     ParameterDirection.Input, true, 0, 0, null,    
                     DataRowVersion.Default, model);
             
               row--;
               while(row &gt;= 0)
               {
                  cmd.Parameters[0].Value = leaseReturn[row];
                  cmd.Parameters[1].Value = leaseLen[row];
                  cmd.Parameters[2].Value = model;
             
                  cmd.ExecuteNonQuery();
                  row--;
               }
            }
            </code>
            </example>
            <seealso cref="!:EnableProviderSpecificTypes.html">Enabling Provider Specific Types</seealso>
            <seealso cref="P:Teradata.Client.Provider.TdConnectionStringBuilder.EnableTdIntervals"/> 
            <seealso cref="!:IntervalConnectionString.html">Interval Connection String Attribute</seealso>
            <seealso cref="!:IntervalTypeOverview.html">Provider Specific Type:  Interval Type Overview</seealso>
        </member>
        <member name="F:Teradata.Client.Provider.TdIntervalDay.MaxPrecision">
            <summary>
               A constant representing the maximum number of significant digits in the 
               <see cref="P:Teradata.Client.Provider.TdIntervalDay.Days"/> interval component.
            </summary>
            <remarks>
               The value of this constant is 4.
            </remarks>
        </member>
        <member name="F:Teradata.Client.Provider.TdIntervalDay.MinPrecision">
            <summary>
               A constant representing the minimum number of significant digits in the 
               <see cref="P:Teradata.Client.Provider.TdIntervalDay.Days"/> interval component.
            </summary>
            <remarks>
               The value of this constant is 1.
            </remarks>
        </member>
        <member name="F:Teradata.Client.Provider.TdIntervalDay.MinValue">
            <summary>
               The smallest possible value for <see cref="T:Teradata.Client.Provider.TdIntervalDay"/>.
            </summary>
            <remarks>
               The value is -'9999'.
            </remarks>
        </member>
        <member name="F:Teradata.Client.Provider.TdIntervalDay.MaxValue">
            <summary>
               The largest possible value for <see cref="T:Teradata.Client.Provider.TdIntervalDay"/>.
            </summary>
            <remarks>
               The value is '9999'.
            </remarks>
        </member>
        <member name="F:Teradata.Client.Provider.TdIntervalDay.Null">
            <summary>
               Gets a Null <see cref="T:Teradata.Client.Provider.TdIntervalDay"/> instance.
            </summary>
            <value>
               Returns a <strong>TdIntervalDay</strong> instance that represents a 
               <strong>Null</strong> value.
            </value>
            <remarks>
               Conceptually it is the constructor for a <strong>Null</strong> instance of 
               <strong>TdIntervalDay</strong>.
            </remarks>
            <example>
            This example shows how to send a <strong>Null</strong> value to a Teradata database.
            <code>
            TdParameter col1 = new TdParameter();
            col1.TdType = TdType.TdIntervalDay;
            col1.Value = TdIntervalDay.Null;
            </code>
            </example>
        </member>
        <member name="F:Teradata.Client.Provider.TdIntervalDay.Zero">
            <summary>
               Gets an <see cref="T:Teradata.Client.Provider.TdIntervalDay"/> instance that contains all zero elements
               for each interval field.
            </summary>
            <remarks>
               A Zero <Strong>TdIntervalDay</Strong> may be used to determine whether
               other instances of intervals represent postive, negative or non-zero intervals.
            </remarks>
            <example>
            This example shows how to determine if an interval is negative.
            <code>
            TdIntervalDayTo Second dayInterval = new TdIntervalDay(-10);
            if (dayInterval &lt; TdIntervalDay.Zero)
            {
               Console.WriteLine("The Interval is negative");
            }
            // The output of the console is "The interval is negative"
            </code>
            </example>
        </member>
        <member name="M:Teradata.Client.Provider.TdIntervalDay.#ctor(System.Int32,System.Byte)">
            <summary>
               An instance of <see cref="T:Teradata.Client.Provider.TdIntervalDay"/> is created from a time  
               component specified as an integer while precision is specified as a byte.
            </summary>
            <remarks>
            <para>
               The number of days is constructed into a <Strong>TdIntervalDay</Strong>
               and validated to determine if the <see cref="F:Teradata.Client.Provider.TdIntervalDay.MinValue"/>
               or the <see cref="F:Teradata.Client.Provider.TdIntervalDay.MaxValue"/> values have been exceeded. If the values are
               not exceeded but the resulting days component exceeds the supplied 
               <paramref name="precision"/> value, an exception is generated.        
            </para>
            <para>
               For example a constructor for TdIntervalDay(444, 2) requests
               444 days with a precision of 2. The resulting days value 
               cannot be represented in 2 digits, therefore an exception is generated,
               even though the <strong>MinValue</strong> and the
               <strong>MaxValue</strong> values have not been exceeded.
            </para>
            <para>
               Negative constructor parameters may be supplied to represent negative durations of time.
            </para>
            </remarks>
            <exception cref="T:System.OverflowException" caption="OverflowException">
               The <strong>day</strong> parameter specifies a <strong>TdIntervalDay</strong> 
               value less than <see cref="F:Teradata.Client.Provider.TdIntervalDay.MinValue"/> or greater than <see cref="F:Teradata.Client.Provider.TdIntervalDay.MaxValue"/>.
            </exception>
            <exception cref="T:System.ArgumentOutOfRangeException" caption="ArgumentOutOfRangeException">
               The <strong>precision</strong> parameter is outside the <see cref="F:Teradata.Client.Provider.TdIntervalDay.MinPrecision"/> 
               or <see cref="F:Teradata.Client.Provider.TdIntervalDay.MaxPrecision"/> range of values.
            </exception>
            <exception cref="T:System.ArgumentException" caption="ArgumentException">
               The <strong>precision</strong> parameter is not large enough to represent the 
               number of days.
            </exception>
            <overloads>
               Initializes a new instance of <strong>TdIntervalDay</strong>.
            </overloads>        
            <param name="days">Number of days.</param>
            <param name="precision">Number of significant digits of the day.</param>
        </member>
        <member name="M:Teradata.Client.Provider.TdIntervalDay.#ctor(System.Int32)">
            <summary>
               An instance of <see cref="T:Teradata.Client.Provider.TdIntervalDay"/> is created from a time  
               component specified as an integer.  
            </summary>
            <remarks>
            <para>
               The number of days are converted into a <strong>TdIntervalDay</strong>
               and evaluated against  <see cref="F:Teradata.Client.Provider.TdIntervalDay.MinValue"/> and <see cref="F:Teradata.Client.Provider.TdIntervalDay.MaxValue"/>.  The 
               <see cref="P:Teradata.Client.Provider.TdIntervalDay.Precision"/> is then calculated from the number of digits contained within
               the interval day component.
            </para>
            <para>
               For example, 99 days is first converted into a <strong>TdIntervalDay</strong>. 
               Precision is calculated to be a value of 2 representing two significant digits in the day.
            </para>
            <para>
               Negative constructor parameters may be supplied to represent negative durations of time.
            </para>
            </remarks>
            <exception cref="T:System.OverflowException" caption="OverflowException">
               The <strong>day</strong> parameter specifies a <strong>TdIntervalDay</strong> 
               value less than <see cref="F:Teradata.Client.Provider.TdIntervalDay.MinValue"/> or greater than <see cref="F:Teradata.Client.Provider.TdIntervalDay.MaxValue"/>.
            </exception>
            <param name="days">Number of days.</param>
        </member>
        <member name="M:Teradata.Client.Provider.TdIntervalDay.#ctor(System.TimeSpan)">
            <summary>
               An instance of <see cref="T:Teradata.Client.Provider.TdIntervalDay"/> is created from a <see cref="T:System.TimeSpan"/>.
            </summary>
            <remarks>
            <para>
               The  <see cref="T:System.TimeSpan"/> value is converted into a <strong>TdIntervalDay</strong>
               and evaluated against <see cref="F:Teradata.Client.Provider.TdIntervalDay.MinValue"/> and <see cref="F:Teradata.Client.Provider.TdIntervalDay.MaxValue"/>.  The 
               <see cref="P:Teradata.Client.Provider.TdIntervalDay.Precision"/> is then calculated from the number of digits contained within 
               the interval day component.
            </para>
            <para>
               After conversion of the <strong>TimeSpan</strong> value into a
               <strong>TdIntervalDay</strong>, any hours, minutes, seconds or microseconds will be 
               truncated. For example, a TimeSpan value created with a <see cref="P:System.TimeSpan.Ticks"/> 
               value of 9378401234567 results in a value of 10 days, 20 hours, 30 minutes and 
               40.1234567 seconds.  The <strong>TdIntervalDay</strong> literal representation
               results in a <strong>TdIntervalDay</strong> value of   '10'.
               The 20 hours, 30 minutes and the 40.1234567 seconds values are truncated. 
               Precision is calculated to be a value of 2 representing two significant digits in the day.
            </para>
            </remarks>
            <exception cref="T:System.OverflowException" caption="OverflowException">
               The <strong>timespan</strong> parameter specifies a <strong>TdIntervalDay</strong> 
               value less than <see cref="F:Teradata.Client.Provider.TdIntervalDay.MinValue"/> or greater than <see cref="F:Teradata.Client.Provider.TdIntervalDay.MaxValue"/>.
            </exception>
            <param name="timeSpan">A TimeSpan to initialize <strong>TdIntervalDay</strong>.</param>
        </member>
        <member name="M:Teradata.Client.Provider.TdIntervalDay.#ctor(System.TimeSpan,System.Byte)">
            <summary>
               An instance of <see cref="T:Teradata.Client.Provider.TdIntervalDay"/> is created using a <see cref="T:System.TimeSpan"/> 
               specifying the day precision as a byte.
            </summary>
            <remarks>
            <para>
               The  <see cref="T:System.TimeSpan"/> value is converted into a <strong>TdIntervalDay</strong>
               and evaluated against <see cref="F:Teradata.Client.Provider.TdIntervalDay.MinValue"/> and <see cref="F:Teradata.Client.Provider.TdIntervalDay.MaxValue"/>.  If the values 
               are not exceeded but the resulting days component exceeds the supplied parameter
                <paramref name="precision"/> value, an exception is generated.
            </para>
            <para>
               After conversion of the <strong>TimeSpan</strong> value into a
               <strong>TdIntervalDay</strong>, any hours, minutes, seconds or microseconds will be 
               truncated. For example, a TimeSpan value created with a <see cref="P:System.TimeSpan.Ticks"/> 
               value of 9378401234567 results in a value of 10 days, 20 hours, 30 minutes and 
               40.1234567 seconds.  The <strong>TdIntervalDay</strong> literal representation
               results in a <strong>TdIntervalDay</strong> value of  '10'.
               The 20 hours, 30 minutes and the 40.1234567 seconds values are truncated. 
            </para>
            </remarks>
            <exception cref="T:System.OverflowException" caption="OverflowException">
               The <strong>timespan</strong> parameter specifies a <strong>TdIntervalDay</strong> 
               value less than <see cref="F:Teradata.Client.Provider.TdIntervalDay.MinValue"/> or greater than <see cref="F:Teradata.Client.Provider.TdIntervalDay.MaxValue"/>.
            </exception>
            <exception cref="T:System.ArgumentOutOfRangeException" caption="ArgumentOutOfRangeException">
               The <strong>precision</strong> parameter is outside the <see cref="F:Teradata.Client.Provider.TdIntervalDay.MinPrecision"/> 
               or <see cref="F:Teradata.Client.Provider.TdIntervalDay.MaxPrecision"/> range of values.
            </exception>
            <exception cref="T:System.ArgumentException" caption="ArgumentException">
               The <strong>precision</strong> parameter is not large enough to represent the 
               number of days.
            </exception>
            <param name="timeSpan">A TimeSpan to initialize <strong>TdIntervalDay</strong>.</param>
            <param name="precision">Number of significant digits of the day.</param>
        </member>
        <member name="M:Teradata.Client.Provider.TdIntervalDay.CompareTo(Teradata.Client.Provider.TdIntervalDay)">
            <summary>
               Compares this instance to the specified <see cref="T:Teradata.Client.Provider.TdIntervalDay"/>  
               parameter <paramref name="other"/>.        
            </summary>
            <returns>
               The result of the comparison is returned as a signed integer.
            </returns>
            <remarks>
            	<para>
                    The integer returned when this instance is compared to <paramref name="other"/>
                    indicates the following:
                </para>
            	<para>
            		<list type="table">
            			<listheader>
            				<term>Return Value</term>
            				<description>Meaning</description>
            			</listheader>
            			<item>
            				<term>Less than Zero</term>
            				<description>
            					<para>
                                    This instance is less than <paramref name="other"/>
                                </para>
            					<para>-or-</para>
            					<para>This instance is <see cref="F:Teradata.Client.Provider.TdIntervalDay.Null"/> and
                                   <paramref name="other"/> is non-null.
                               </para>
            				</description>
            			</item>
            			<item>
            				<term>Zero</term>
            				<description>
            					<para>
                                    This instance is equal to <paramref name="other"/>
                                </para>
            					<para>-or-</para>
            					<para>
                                   This instance is <Strong>Null</Strong> and <paramref name="other"/>
                                    is <Strong>Null</Strong>.
                                </para>
            				</description>
            			</item>
            			<item>
            				<term>Greater than Zero</term>
            				<description>
            					<para>
                                    This instance is greater than
                                    <paramref name="other"/>
                                </para>
            					<para>-or-</para>
            					<para>
            						<paramref name="other"/> is <Strong>Null</Strong> and this instance is non-null.
                                </para>
            				</description>
            			</item>
            		</list>
            	</para>
            </remarks>
            <param name="other">The <strong>TdIntervalDay</strong> to compare.</param>
        </member>
        <member name="M:Teradata.Client.Provider.TdIntervalDay.CompareTo(System.Object)">
            <summary>
               Compares this instance to the specified <see cref="T:Teradata.Client.Provider.TdIntervalDay"/> parameter 
               <paramref name="obj"/>. 
            </summary>
            <returns>
               The result of the comparison is returned as a signed integer.
            </returns>
            <remarks>
            	<para>
                    The integer returned when this instance is compared to <paramref name="obj"/>
                    indicates the following:
                </para>
            	<para>
            		<list type="table">
            			<listheader>
            				<term>Return Value</term>
            				<description>Meaning</description>
            			</listheader>
            			<item>
            				<term>Less than Zero</term>
            				<description>
            					<para>This instance is less than <paramref name="obj"/></para>
            					<para>-or-</para>
            					<para>
                                   This instance is <see cref="F:Teradata.Client.Provider.TdIntervalDay.Null"/> and <paramref name="obj"/> is non-null.
                               </para>
            				</description>
            			</item>
            			<item>
            				<term>Zero</term>
            				<description>
            					<para>
                                    This instance is equal to <paramref name="obj"/>
                                </para>
            					<para>-or-</para>
            					<para>
                                   This instance is <Strong>Null</Strong> and <paramref name="obj"/>
                                    is <Strong>Null</Strong>.
                                </para>
            				</description>
            			</item>
            			<item>
            				<term>Greater than Zero</term>
            				<description>
            					<para>
                                    This instance is greater than <paramref name="obj"/>.
                                </para>
            					<para>-or-</para>
            					<para>
            						<paramref name="obj"/> is <Strong>Null</Strong> and this instance is non-null
                                </para>
            					<para>-or-</para>
            					<para>
            						<paramref name="obj"/> is a <c>null</c> reference.
                                </para>
            				</description>
            			</item>
            		</list>
            	</para>
              <para>
                <paramref name="obj"/> must be an instance of 
                <strong>TdIntervalDay</strong> type or <c>null</c> reference.
               </para>
            </remarks>
            <exception cref="T:System.ArgumentException">
               <paramref name="obj"/> is not of same type as <strong>TdIntervalDay</strong>.
            </exception>
            <seealso cref="M:Teradata.Client.Provider.TdIntervalDay.CompareTo(Teradata.Client.Provider.TdIntervalDay)"/>
            <overloads>
               Compares this instance to the supplied <strong>TdIntervalDay</strong> and 
               returns whether this instance is less than, equal or greater than the supplied
               <strong>TdIntervalDay</strong>.
            </overloads>
            <param name="obj">A <strong>TdIntervalDay</strong> object to compare.</param>
        </member>
        <member name="M:Teradata.Client.Provider.TdIntervalDay.Equals(Teradata.Client.Provider.TdIntervalDay)">
            <summary>
               Compares this instance and another <see cref="T:Teradata.Client.Provider.TdIntervalDay"/> to determine 
               whether they are equal. 
            </summary>
            <returns>
               <c>true</c> if the two <strong>TdIntervalDay</strong> objects are equal, 
               <c>false</c> otherwise.
            </returns>
            <remarks>
            	<para>
            		The return value is <c>true</c> if the instance is 
                    equal to the <paramref name="other"/>, <c>false</c> otherwise.
                </para>
            	<para>
            		<list type="table">
            			<listheader>
            				<term>Return Value</term>
            				<description>Description</description>
            			</listheader>
            			<item>
            				<term><c>true</c></term>
                            <description>
                                <para>
                                   This instance and <paramref name="other"/> are <see cref="F:Teradata.Client.Provider.TdIntervalDay.Null"/>
                                </para>
                                <para>-or-</para>
                                <para>This instance is equal to <paramref name="other"/>.</para>
                            </description>
            			</item>
            			<item>
            				<term><c>false</c></term>
                            <description>
                            <para>
                               This instance is <strong>Null</strong> and <paramref name="other"/> 
                               is not <strong>Null</strong>
                            </para>
                            <para>-or-</para>
                            <para>
                               This instance is not <strong>Null</strong> and <paramref name="other"/>
                               is <strong>Null</strong>
                            </para>
                            <para>-or-</para>
                            <para>This instance is not equal to <paramref name="other"/>.</para>
                            </description>
            			</item>
            		</list>
            	</para>
            </remarks>
            <overloads>
               Returns a value indicating whether two instances of 
               <strong>TdIntervalDay</strong> are equal.
            </overloads>
            <param name="other">
               <strong>TdIntervalDay</strong> that will be compared to this instance 
               of <strong>TdIntervalDay</strong>.
            </param>
        </member>
        <member name="M:Teradata.Client.Provider.TdIntervalDay.Equals(Teradata.Client.Provider.TdIntervalDay,Teradata.Client.Provider.TdIntervalDay)">
            <summary>
               Compares two <see cref="T:Teradata.Client.Provider.TdIntervalDay"/> instances to determine 
               whether they are equal.
            </summary>
            <returns>
               <c>true</c> if the two <strong>TdIntervalDay</strong> instances are equal, 
               <c>false</c> otherwise.
            </returns>
            <remarks>
            	<para>
            		The return value is <c>true</c> if the <paramref name="left"/> is 
                    equal to the <paramref name="right"/>, <c>false</c> otherwise.
                </para>
            	<para>
            		<list type="table">
            			<listheader>
            				<term>Return Value</term>
            				<description>Description</description>
            			</listheader>
            			<item>
            				<term><c>true</c></term>
                            <description>
                                <para><paramref name="left"/> is equal to <paramref name="right"/></para>
                                <para>-or-</para>
                                <para>
                                   <paramref name="left"/> and <paramref name="right"/> are <see cref="F:Teradata.Client.Provider.TdIntervalDay.Null"/>.
                                </para>
                            </description>
            			</item>
            			<item>
            				<term><c>false</c></term>
                            <description>
                              <para><paramref name="left"/> is not equal to <paramref name="right"/></para>
                              <para>-or-</para>
                              <para>
                                   <paramref name="left"/> is not <strong>Null</strong> and 
                                   <paramref name="right"/> is <strong>Null</strong>
                              </para>
                              <para>-or-</para>
                              <para>
                                <paramref name="left"/> is <strong>Null</strong> and <paramref name="right"/>
                                is not <strong>Null</strong>.
                              </para>
                            </description>
            			</item>
            		</list>
            	</para>
            </remarks>
            <example>
                The following code example uses various comparison methods and operators.
                <code lang="CS">
            // Create a TdIntervalDay with 5 days with max precision
            TdIntervalDay firstInterval = new TdIntervalDay(5, 4);
            // Create a TdIntervalDay with 20 days and max precision
            TdIntervalDay secondInterval = new TdIntervalDay(20, 4);
             
            // The following comparison methods and operators are equivalent
            if (false == TdIntervalDay.Equals(firstInterval, secondInterval) ||
                firstInterval != secondInterval ||
                true == TdIntervalDay.NotEquals(firstInterval, secondInterval) )
            {
               Console.WriteLine(“firstInterval does not equal secondInterval”);
            }
                </code>
            </example>
            <param name="left">A <strong>TdIntervalDay</strong> instance.</param>
            <param name="right">A <strong>TdIntervalDay</strong> instance.</param>
        </member>
        <member name="M:Teradata.Client.Provider.TdIntervalDay.Compare(Teradata.Client.Provider.TdIntervalDay,Teradata.Client.Provider.TdIntervalDay)">
            <summary>
                Two <see cref="T:Teradata.Client.Provider.TdIntervalDay"/> intervals are compared and a value is returned 
                that indicates <paramref name="left"/> is greater than, less than or equal to
                <paramref name="right"/>.
            </summary>
            <returns>
               The result of the comparison is returned as a signed integer.
            </returns>
            <remarks>
            	<list type="table">
            		<listheader>
            			<term>Return Value</term>
            			<description>Description</description>
            		</listheader>
            		<item>
            			<term>Less than Zero</term>
            			<description>
                           <para>
                               <paramref name="left"/> is less than <paramref name="right"/>
                           </para>
            				<para>-or-</para>
                           <para>
                              <paramref name="left"/> is <see cref="F:Teradata.Client.Provider.TdIntervalDay.Null"/>
                              and <paramref name="right"/> is not <strong>Null</strong>.
                           </para>
                        </description>
            		</item>
            		<item>
            			<term>Zero</term>
            			<description>
            				<para>
                               <paramref name="left"/> equals <paramref name="right"/>
                           </para>
            				<para>-or-</para>
                           <para>
                                <paramref name="left"/> is <strong>Null</strong> 
                                 and <paramref name="right"/> is <strong>Null</strong>.
                           </para>
                        </description>
            		</item>
            		<item>
            			<term>Greater than Zero</term>
            			<description>
            				<para>
                               <paramref name="left"/> is greater than <paramref name="right"/>
                           </para>
            				<para>-or-</para>
            				<para>
                               <paramref name="left"/> is not <strong>Null</strong> and
                               <paramref name="right"/> is <strong>Null</strong>.
                            </para>
                        </description>
            		</item>
            	</list>
            </remarks>
            <param name="left">An instance of <strong>TdIntervalDay</strong>.</param>
            <param name="right">An instance of <strong>TdIntervalDay</strong>.</param>
        </member>
        <member name="M:Teradata.Client.Provider.TdIntervalDay.NotEquals(Teradata.Client.Provider.TdIntervalDay,Teradata.Client.Provider.TdIntervalDay)">
            <summary>
                Compares two <see cref="T:Teradata.Client.Provider.TdIntervalDay"/> interval types to determine whether the
                <paramref name="left"/> is not equal to <paramref name="right"/>.
            </summary>
            <returns>
            	<para>
            		<c>true</c> indicates <paramref name="left"/> is not equal to
                    <paramref name="right"/>, <c>false</c> otherwise.
                </para>
            	<para>
            		<list type="table">
            			<listheader>
            				<term>Return Value</term>
            				<description>Description</description>
            			</listheader>
            			<item>
            				<term><c>true</c></term>
            				<description>
            					<para>
            						<paramref name="left"/> is less than or greater
                                    than <paramref name="right"/>
            					</para>
            					<para>-or-</para>
            					<para>
            						Either <paramref name="left"/> or <paramref name="right"/> is
                                   <see cref="F:Teradata.Client.Provider.TdIntervalDay.Null"/>.
                               </para>
            				</description>
            			</item>
            			<item>
            				<term><c>false</c></term>
            				<description>
            					<para>
            						<paramref name="left"/> is equal to
                                    <paramref name="right"/>
            					</para>
            					<para>-or-</para>
            					<para>
            						<paramref name="left"/> and <paramref name="right"/> are
                                   <strong>Null</strong>.
                               </para>
            				</description>
            			</item>
            		</list>
            	</para>
            </returns>
            <param name="left">An instance of <strong>TdIntervalDay</strong>.</param>
            <param name="right">An instance of <strong>TdIntervalDay</strong>.</param>
        </member>
        <member name="M:Teradata.Client.Provider.TdIntervalDay.GreaterThan(Teradata.Client.Provider.TdIntervalDay,Teradata.Client.Provider.TdIntervalDay)">
            <summary>
               Determines whether the <paramref name="left"/> is greater than the <paramref name="right"/>.
            </summary>
            <returns>
            	<para>
            		<c>true</c> indicates the <paramref name="left"/> is greater than
                    the <paramref name="right"/>, <c>false</c> otherwise.
                </para>
            	<para>
            		<list type="table">
            			<listheader>
            				<term>Return Value</term>
            				<description>Description</description>
            			</listheader>
            			<item>
            				<term><c>true</c></term>
            				<description>
            					<paramref name="left"/> and
                                <paramref name="right"/> are not
                                <see cref="F:Teradata.Client.Provider.TdIntervalDay.Null"/> and
                                <paramref name="left"/> is greater than
                                <paramref name="right"/>.
            				</description>
            			</item>
            			<item>
            				<term><c>false</c></term>
            				<description>
            					<para>
                                    The <paramref name="left"/> is less than or equal
                                    to <paramref name="right"/>
            					</para>
            					<para>-or-</para>
            					<para>
                                   <paramref name="left"/> and / or <paramref name="right"/>
                                   is <strong>Null</strong>.
                                </para>
            				</description>
            			</item>
            		</list>
            	</para>
            </returns>
            <remarks>
            	<para>
                    Comparison operators always return <c>false</c> if one of the operands is
                    <strong>Null</strong>. Therefore you should not assume that the reverse
                    condition is <c>true</c>. For example you cannot assume that the
                    <paramref name="left"/> is less than or equal to the
                    <paramref name="right"/> if <c>GreaterThan</c> returns <c>false</c>.
                </para>
            	<para>
                    The reverse condition is <c>true</c> when the
                    <paramref name="left"/> and the
                    <paramref name="right"/> are not <strong>Null</strong>.
                </para>
            </remarks>
            <param name="left">
               An instance of <see cref="T:Teradata.Client.Provider.TdIntervalDay"/>.
            </param>
            <param name="right">
               An instance of <strong>TdIntervalDay</strong>.
            </param>
        </member>
        <member name="M:Teradata.Client.Provider.TdIntervalDay.GreaterThanOrEqual(Teradata.Client.Provider.TdIntervalDay,Teradata.Client.Provider.TdIntervalDay)">
            <summary>
               This operator determines whether the <paramref name="left"/> is greater than or 
               equal to the <paramref name="right"/>.
            </summary>
            <returns>
            	<para>
            		<c>true</c> indicates the <paramref name="left"/> is greater than
                    or equal to the <paramref name="right"/>, <c>false</c> otherwise.
                </para>
            	<para>
            		<list type="table">
            			<listheader>
            				<term>Return Value</term>
            				<description>Description</description>
            			</listheader>
            			<item>
            				<term><c>true</c></term>
            				<description>
            					<para>
            						<paramref name="left"/> and
                                    <paramref name="right"/> are not
                                    <see cref="F:Teradata.Client.Provider.TdIntervalDay.Null"/> and
                                    <paramref name="left"/> is greater than or equal
                                    to <paramref name="right"/>
            					</para>
            					<para>-or-</para>
            					<para>
            						<paramref name="left"/> is <strong>Null</strong>
                                    and <paramref name="right"/> is
                                    <strong>Null</strong>.
            					</para>
            				</description>
            			</item>
            			<item>
            				<term><c>false</c></term>
            				<description>
            					<para>
                                    The <paramref name="left"/> is less than
                                    <paramref name="right"/>
            					</para>
            					<para>-or-</para>
            					<para>
                                    Either <paramref name="left"/> or
                                    <paramref name="right"/> is <strong>Null</strong>.
            					</para>
            				</description>
            			</item>
            		</list>
            	</para>
            </returns>
            <remarks>
            	<para>
                    Comparison operators always return <c>false</c> if one of the operands is
                    <strong>Null</strong>. Therefore you should not assume that the reverse
                    condition is <c>true</c>. For example you cannot assume that the
                    <paramref name="left"/> is less than the <paramref name="right"/>
                    if the <c>GreaterThanOrEqual</c> method returns <c>false</c>.
                </para>
            	<para>
                    The reverse condition is <c>true</c> when the
                    <paramref name="left"/> and the
                    <paramref name="right"/> are not <strong>Null</strong>.
                </para>
            </remarks>
            <param name="left">An instance of <see cref="T:Teradata.Client.Provider.TdIntervalDay"/>.</param>
            <param name="right">An instance of <strong>TdIntervalDay</strong>.</param>
        </member>
        <member name="M:Teradata.Client.Provider.TdIntervalDay.LessThan(Teradata.Client.Provider.TdIntervalDay,Teradata.Client.Provider.TdIntervalDay)">
            <summary>
               This method determines whether the <paramref name="left"/> is less than the 
               <paramref name="right"/>.
            </summary>
            <returns>
            	<para>
            		<c>true</c> indicates the <paramref name="left"/> is less than
                    the <paramref name="right"/>, <c>false</c> otherwise.
                </para>
            	<para>
            		<list type="table">
            			<listheader>
            				<term>Return Value</term>
            				<description>Description</description>
            			</listheader>
            			<item>
            				<term><c>true</c></term>
            				<description>
            					<paramref name="left"/> and <paramref name="right"/> are
                                not <see cref="F:Teradata.Client.Provider.TdIntervalDay.Null"/> and
                                <paramref name="left"/> is less than
                                <paramref name="right"/>.
            				</description>
            			</item>
            			<item>
            				<term><c>false</c></term>
            				<description>
            					<para>
                                    The <paramref name="left"/> is greater than or
                                    equal to <paramref name="right"/>
            					</para>
            					<para>-or-</para>
            					<para>
                                    <paramref name="left"/> and / or <paramref name="right"/> is
                                    <strong>Null</strong>.
            					</para>
            				</description>
            			</item>
            		</list>
            	</para>
            </returns>
            <remarks>
            	<para>
                    Comparison operators always return <c>false</c> if one of the operands is
                    <strong>Null</strong>. Therefore you should not assume that the reverse
                    condition is <c>true</c>. For example you cannot assume that the
                    <paramref name="left"/> is greater than or equal to the
                    <paramref name="right"/> if the <c>LessThan</c> method returns
                    <c>false</c>.
                </para>
            	<para>
                    The reverse condition is <c>true</c> when the
                    <paramref name="left"/> and the
                    <paramref name="right"/> are not <strong>Null</strong>.
                </para>
            </remarks>
            <param name="left">An instance of <see cref="T:Teradata.Client.Provider.TdIntervalDay"/>.</param>
            <param name="right">An instance of <strong>TdIntervalDay</strong>.</param>
        </member>
        <member name="M:Teradata.Client.Provider.TdIntervalDay.LessThanOrEqual(Teradata.Client.Provider.TdIntervalDay,Teradata.Client.Provider.TdIntervalDay)">
            <summary>
                This method determines whether the <paramref name="left"/> is less
                than or equal to the <paramref name="right"/>.
            </summary>
            <returns>
            	<para>
            		<c>true</c> indicates the <paramref name="left"/> is less than or
                    equal to the <paramref name="right"/>, <c>false</c> otherwise.
                </para>
            	<para>
            		<list type="table">
            			<listheader>
            				<term>Return Value</term>
            				<description>Description</description>
            			</listheader>
            			<item>
            				<term><c>true</c></term>
            				<description>
            					<para>
            						<paramref name="left"/> and
                                    <paramref name="right"/> are not
                                    <see cref="F:Teradata.Client.Provider.TdIntervalDay.Null"/> and
                                    <paramref name="left"/> is less than or equal to
                                    <paramref name="right"/>
            					</para>
            					<para>-or-</para>
            					<para>
            						<paramref name="left"/> is <strong>Null</strong>
                                    and <paramref name="right"/> is
                                    <strong>Null</strong>.
            					</para>
            				</description>
            			</item>
            			<item>
            				<term><c>false</c></term>
            				<description>
            					<para>
                                    The <paramref name="left"/> is greater than
                                    <paramref name="right"/>
            					</para>
            					<para>-or-</para>
            					<para>
                                    Either <paramref name="left"/> or
                                    <paramref name="right"/> is <strong>Null</strong>.
            					</para>
            				</description>
            			</item>
            		</list>
            	</para>
            </returns>
            <remarks>
            	<para>
                    Comparison operators always return <c>false</c> if one of the operands is
                    <strong>Null</strong>. Therefore you should not assume that the reverse
                    condition is <c>true</c>. For example you cannot assume that the
                    <paramref name="left"/> is greater than the
                    <paramref name="right"/> if the <c>LessThanOrEqual</c> method returns
                    <c>false</c>.
                </para>
            	<para>
                    The reverse condition is <c>true</c> when the
                    <paramref name="left"/> and the
                    <paramref name="right"/> are not <strong>Null</strong>.
                </para>
            </remarks>
            <param name="left">An instance of <see cref="T:Teradata.Client.Provider.TdIntervalDay"/>.</param>
            <param name="right">An instance of <strong>TdIntervalDay</strong>.</param>
        </member>
        <member name="M:Teradata.Client.Provider.TdIntervalDay.ToInt32(Teradata.Client.Provider.TdIntervalDay)">
            <summary>
               Convert a <see cref="T:Teradata.Client.Provider.TdIntervalDay"/> implictly to an Int32 representing a day interval.
            </summary>
            <returns>
               <strong>TdIntervalDay</strong> converted to an Int32 representing a day interval.
            </returns>
            <exception cref="T:System.ArgumentNullException">
               The <strong>TdIntervalDay</strong> value is <see cref="F:Teradata.Client.Provider.TdIntervalDay.Null"/>.
            </exception>
            <param name="value">A <strong>TdIntervalDay</strong> interval.</param>
        </member>
        <member name="M:Teradata.Client.Provider.TdIntervalDay.Equals(System.Object)">
            <summary>
               Compares this instance and <paramref name="obj"/> to determine whether they
               are equal. 
            </summary>
            <returns>
               <c>true</c> if the two <see cref="T:Teradata.Client.Provider.TdIntervalDay"/>s are equal, 
               <c>false</c> otherwise.
            </returns>
            <remarks>
            	<para>
                    The return value is <c>true</c> if the instance is equal to the
                    <paramref name="obj"/>, <c>false</c> otherwise.
                </para>
            	<para>
            		<list type="table">
            			<listheader>
            				<term>Return Value</term>
            				<description>Description</description>
            			</listheader>
            			<item>
            				<term>
            					<c>true</c>
            				</term>
            				<description>
            					<para>
                                    This instance and <paramref name="obj"/> are
                                    <see cref="F:Teradata.Client.Provider.TdIntervalDay.Null"/>.
                                </para>
            					<para>-or-</para>
            					<para>
                                    This instance is equal to <paramref name="obj"/>.
                                </para>
            				</description>
            			</item>
            			<item>
            				<term>
            					<c>false</c>
            				</term>
            				<description>
            					<para>
                                    This instance is not equal to
                                    <paramref name="obj"/>.
                                </para>
            					<para>-or-</para>
            					<para>
                                    This instance is not <strong>Null</strong> and
                                    <paramref name="obj"/> is <strong>Null</strong>.
                                </para>
            					<para>-or-</para>
            					<para>
                                    This instance is <strong>Null</strong> and
                                    <paramref name="obj"/> is not <strong>Null</strong>
            					</para>
            					<para>-or-</para>
            					<para>
            						<paramref name="obj"/> is a <strong>null</strong>
                                    reference.
                                </para>
            				</description>
            			</item>
            		</list>
            	</para>
            </remarks>
            <example>
                The following code example uses various comparison methods and operators.
                <code lang="CS">
            // Create TdIntervalDay with 5 days and max precision
            TdIntervalDay firstInterval = new TdIntervalDay(5, 4);
            // Create TdIntervalDay with 20 days and max precision
            Object intervalObj = new TdIntervalDay(20, 4);
             
            // The following comparison methods and operators are equivalent
            if (false == TdIntervalDay.Equals(firstInterval, (TdIntervalDay)intervalObj) ||
                firstInterval != (TdIntervalDay)intervalObj ||
                false == firstInterval.Equals(intervalObj) )
            {
               Console.WriteLine(“firstInterval does not equal intervalObj”);
            }
                </code>
            </example>
            <param name="obj">
               <strong>TdIntervalDay</strong> that will be compared to this instance 
               of <strong>TdIntervalDay</strong>.
            </param>
        </member>
        <member name="M:Teradata.Client.Provider.TdIntervalDay.GetHashCode">
            <summary>
            Returns the hash code for this instance. 
            </summary>
            <returns>The hash code is returned.</returns>
        </member>
        <member name="M:Teradata.Client.Provider.TdIntervalDay.ToString(System.String)">
            <summary>
               Converts this instance to its equivalent String representation using the specified format.
            </summary>
            <remarks>
            	<para>This method supports the following format specifiers:</para>
            	<para>
            		<list type="table">
            			<listheader>
            				<term>Format Specifier</term>
            				<description>Description</description>
            			</listheader>
            			<item>
            				<term>G</term>
            				<description>
            					<para>General interval format.</para>
            					<para>[sign][days]</para>
            				</description>
            			</item>
            			<item>
            				<term>L</term>
            				<description>
            					<para>Teradata literal format. This string may be used in
                                generating SQL against the Teradata database.</para>
            					<para>INTERVAL [sign]'[days]' DAY</para>
            				</description>
            			</item>
            		</list>
            	</para>
            	<para>Below is the description of each format item.</para>
            	<para>
            		<list type="table">
            			<listheader>
            				<term>Format Item</term>
            				<description>Description</description>
            			</listheader>
            			<item>
            				<term>sign</term>
            				<description>If negative a minus sign will be displayed.</description>
            			</item>
            			<item>
            				<term>days</term>
            				<description>The number of days (one to four digits in
                            length).</description>
            			</item>
            		</list>
            	</para>
            	<para>
                    The <paramref name="format"/> is not used, as cultural settings are
                    not supported.
                </para>
            </remarks>
            <returns>
               A string representation of the <strong>TdIntervalDay</strong> will be returned.
            </returns>
            <exception cref="T:System.FormatException" caption="FormatException">
               <paramref name="format"/> contains an invalid format specifier.
            </exception>
            <param name="format">
               The format string that will be used to format the <strong>TdIntervalDay</strong>.
            </param>
        </member>
        <member name="M:Teradata.Client.Provider.TdIntervalDay.ToString">
            <summary>
               Converts this instance to its equivalent String representation based upon
               the current culture setting of the running thread.
            </summary>
            <remarks>
               <para>The string returned will follow this format:</para>
            	<para>[sign][days]</para>
            	<para>Below is the description of each format item.</para>
            	<para>
            		<list type="table">
            			<listheader>
            				<term>Format Item</term>
            				<description>Description</description>
            			</listheader>
            			<item>
            				<term>sign</term>
            				<description>If negative a minus sign will be displayed.</description>
            			</item>
            			<item>
            				<term>days</term>
            				<description>The number of days (one to four digits in
                            length).</description>
            			</item>
            		</list>
            	</para>
            	<para>
                    Culture specific settings are not supported.
            	</para>
            </remarks>
            <returns>
               A string representation of the <strong>TdIntervalDay</strong> will be returned.
            </returns>
        </member>
        <member name="M:Teradata.Client.Provider.TdIntervalDay.Parse(System.String)">
            <summary>
               The specified string is converted into an equivalent <see cref="T:Teradata.Client.Provider.TdIntervalDay"/>.
            </summary>
            <returns>
               A <strong>TdIntervalDay</strong> is returned that is equivalent to the  
               <strong>TdIntervalDay</strong> contained in the input string.
            </returns>
            <exception cref="T:System.FormatException" caption="FormatException">
               <paramref name="value"/> cannot be converted into a <strong>TdIntervalDay</strong> 
               interval.
            </exception>
            <exception cref="T:System.ArgumentNullException" caption="ArgumentNullException">
               <paramref name="value"/> is a <c>null</c> reference.
            </exception>
            <exception cref="T:System.OverflowException">
               The resultant operation returns a value greater than the <see cref="F:Teradata.Client.Provider.TdIntervalDay.MaxValue"/> 
               or less than the <see cref="F:Teradata.Client.Provider.TdIntervalDay.MinValue"/>.
            </exception>
            <remarks>
            	<para>This method supports the following string formats:</para>
            	<para>
            		<list type="table">
            			<listheader>
            				<term>String Format</term>
            				<description>Description</description>
            			</listheader>
            			<item>
            				<term>General interval format.</term>
            				<description>
            					<para>[sign][days]</para>
            				</description>
            			</item>
            			<item>
            				<term>Teradata literal format. This string may be used in
                                generating SQL against the Teradata database.</term>
            				<description>
            					<para>INTERVAL [sign]'[days]' DAY</para>
            				</description>
            			</item>
            		</list>
            	</para>
            	<para>Below is the description of each format item.</para>
            	<para>
            		<list type="table">
            			<listheader>
            				<term>Format Item</term>
            				<description>Description</description>
            			</listheader>
            			<item>
            				<term>sign</term>
            				<description>If negative a minus sign will be displayed.</description>
            			</item>
            			<item>
            				<term>days</term>
            				<description>The number of days (one to four digits in
                            length).</description>
            			</item>
            		</list>
            	</para>
            	<para>
                    Cultural settings are not supported.
                </para>
            	<para>
                    While parsing the <paramref name="value"/> the
                    <see cref="P:Teradata.Client.Provider.TdIntervalDay.Precision"/> will be set to the number of digits contained
                    within the day component.
                </para>
            	<para>
                    For example a <paramref name="value"/> of "100" will contain a
                    precision of 3.
                </para>
            </remarks>
            <overloads>
            	The specified string is converted into an equivalent 
               <strong>TdIntervalDay</strong> interval.
            </overloads>
            <param name="value">A string to be converted into a <strong>TdIntervalDay</strong>.</param>
        </member>
        <member name="M:Teradata.Client.Provider.TdIntervalDay.TryParse(System.String,Teradata.Client.Provider.TdIntervalDay@)">
            <summary>
               The specified string is converted into an equivalent <see cref="T:Teradata.Client.Provider.TdIntervalDay"/>. 
            </summary>
            <returns>
                <c>true</c> if the conversion of <paramref name="value"/> succeeded, 
                <c>false</c> otherwise.
            </returns>
            <remarks>
            	<para>This method supports the following string formats:</para>
            	<para>
            		<list type="table">
            			<listheader>
            				<term>String Format</term>
            				<description>Description</description>
            			</listheader>
            			<item>
            				<term>General interval format.</term>
            				<description>
            					<para>[sign][days]</para>
            				</description>
            			</item>
            			<item>
            				<term>Teradata literal format. This string may be used in
                                generating SQL against the Teradata database.</term>
            				<description>
            					<para>INTERVAL [sign]'[days]' DAY</para>
            				</description>
            			</item>
            		</list>
            	</para>
            	<para>Below is the description of each format item.</para>
            	<para>
            		<list type="table">
            			<listheader>
            				<term>Format Item</term>
            				<description>Description</description>
            			</listheader>
            			<item>
            				<term>sign</term>
            				<description>If negative a minus sign will be displayed.</description>
            			</item>
            			<item>
            				<term>days</term>
            				<description>The number of days (one to four digits in
                            length).</description>
            			</item>
            		</list>
            	</para>
            	<para>
                    Cultural settings are not supported.
            	</para>
            	<para>
            		While parsing the <paramref name="value"/> the <see cref="P:Teradata.Client.Provider.TdIntervalDay.Precision"/> will be
            		set to the number of digits contained within the day component.  
            	</para>
            	<para>
            		For example a <paramref name="value"/> of "100" will
            		contain a precision of 3.
            	</para>
            </remarks>
            <overloads>
               The specified string is converted into an equivalent 
               <see cref="T:Teradata.Client.Provider.TdIntervalDay"/> interval.  A <c>true</c> is returned 
               if the conversion succeeded, <c>false</c> otherwise.
            </overloads>
            <param name="value">
               A string to be converted into a <strong>TdIntervalDay</strong>.
            </param>
            <param name="result">
               The converted string into a <strong>TdIntervalDay</strong>.
            </param>
        </member>
        <member name="M:Teradata.Client.Provider.TdIntervalDay.GetXmlSchema(System.Xml.Schema.XmlSchemaSet)">
             <summary>
                Gets the XML Qualified name for <see cref="T:Teradata.Client.Provider.TdIntervalDay"/> XML type mapping.
             </summary>
             <param name="xmlSchemaSet">
                Holds zero or more XML Schema definition language (XSD) schemas.
             </param>
             <returns>
                Returns <strong>xs:duration</strong>.
             </returns>
             <example>
             This example shows how to use the <strong>TdIntervalDay</strong> with 
             <see cref="T:System.Xml.Serialization.XmlSerializer"/> class. <see cref="T:System.Xml.Serialization.XmlElementAttribute"/> is used to 
              indicate that the Teradata Database column can be <strong>Null</strong>.
             <code>
              public class Order
              {
                  public TdTimestamp Date;
             
                  public TdIntervalDay ExpirationPeriod;
             
                  public TdTimestamp ExpirationDate;
            
                  public Int32 ProductId;
            
                  public Int32 Quantity;
            
                  public Int32? BackOrderQuantity;
            
                  [XmlElementAttribute(IsNullable = true)]        
                  public TdDecimal BackOrderPrice;
              }
             
              internal class OrderWriter
              {
              
                  public static void Write()
                  {
                      // Setup the order
                      Order x = new Order();
              
                      x.Date = new TdTimestamp(DateTime.Today);
                      // 5 days 
                      x.ExpirationPeriod = new TdIntervalDay(5);
                      x.ExpirationDate = x.Date + x.ExpirationPeriod;
                      x.ProductId = 100;
                      x.Quantity = 2000;
                      x.BackOrderQuantity = null;
                      x.BackOrderPrice = TdDecimal.Null;
            
                      // Write out today's orders to the file.
                      //
                      // Open the file.
                      XmlWriterSettings settings = new XmlWriterSettings();
                      settings.Indent = true;
                      XmlWriter writer = XmlWriter.Create(@"C:\Temp\TodayOrders.XML", settings);
                      writer.WriteStartElement("TodayOrders");
                
                      // Write out the schema.
                      XmlSchemas schemas = new XmlSchemas();
                      XmlSchemaExporter schExporter = new XmlSchemaExporter(schemas);
                      schExporter.ExportTypeMapping(new XmlReflectionImporter().ImportTypeMapping(typeof(Order)));
                      schemas[0].Write(writer);
            
                      // Write out the orders.
                      XmlSerializer xml = new XmlSerializer(typeof(Order));
                      xml.Serialize(writer, x);
              
                      // Close the document.
                      writer.WriteEndDocument();
                      writer.Close();
                  }
              }
             
              /* Output is:
             
              &lt;TodayOrders&gt;
                &lt;xs:schema elementFormDefault="qualified" xmlns:xs="http://www.w3.org/2001/XMLSchema"&gt;
                  &lt;xs:element name="Order" nillable="true" type="Order" /&gt;
                  &lt;xs:complexType name="Order"&gt;
                    &lt;xs:sequence&gt;
                      &lt;xs:element minOccurs="1" maxOccurs="1" name="Date" type="xs:dateTime" /&gt;
                      &lt;xs:element minOccurs="1" maxOccurs="1" name="ExpirationPeriod" type="xs:duration" /&gt;
                      &lt;xs:element minOccurs="1" maxOccurs="1" name="ExpirationDate" type="xs:dateTime" /&gt;
                      &lt;xs:element minOccurs="1" maxOccurs="1" name="ProductId" type="xs:int" /&gt;
                      &lt;xs:element minOccurs="1" maxOccurs="1" name="Quantity" type="xs:int" /&gt;
                      &lt;xs:element minOccurs="1" maxOccurs="1" name="BackOrderQuantity" nillable="true" type="xs:int" /&gt;
                      &lt;xs:element minOccurs="1" maxOccurs="1" name="BackOrderPrice" nillable="true" type="xs:decimal" /&gt;
                    &lt;/xs:sequence&gt;
                  &lt;/xs:complexType&gt;
                &lt;/xs:schema&gt;
                &lt;Order xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xmlns:xsd="http://www.w3.org/2001/XMLSchema"&gt;
                  &lt;Date&gt;2008-02-01T00:00:00-08:00&lt;/Date&gt;
                  &lt;ExpirationPeriod&gt;P5D&lt;/ExpirationPeriod&gt;
                  &lt;ExpirationDate&gt;2008-02-06T04:00:00-08:00&lt;/ExpirationDate&gt;
                  &lt;ProductId&gt;100&lt;/ProductId&gt;
                  &lt;Quantity&gt;2000&lt;/Quantity&gt;
                  &lt;BackOrderQuantity xsi:nil="true" /&gt;
                  &lt;BackOrderPrice xsi:nil="true" /&gt;
                &lt;/Order&gt;
              &lt;/TodayOrders&gt;
             
              */
             </code>
             </example>        
        </member>
        <member name="M:Teradata.Client.Provider.TdIntervalDay.op_Addition(Teradata.Client.Provider.TdIntervalDay,System.Int32)">
            <summary>
               The specified number of days is added to the <see cref="T:Teradata.Client.Provider.TdIntervalDay"/>.
            </summary>
            <remarks>
            <para>
               If <paramref name="interval"/> is <see cref="F:Teradata.Client.Provider.TdIntervalDay.Null"/> a <strong>Null</strong> will be returned.
            </para>
            <para>
               The returned <strong>TdIntervalDay</strong> will contain a precision 
               set to the <see cref="F:Teradata.Client.Provider.TdIntervalDay.MaxPrecision"/>.
            </para>
            </remarks>
            <returns>
               A new <strong>TdIntervalDay</strong> as the result of adding an Int32 to 
               <strong>TdIntervalDay</strong>.
            </returns> 
            <overloads>
               Two operands are added to return a <strong>TdIntervalDay</strong>.
            </overloads>
            <exception cref="T:System.OverflowException">
               The resultant operation returns a value greater than the <see cref="F:Teradata.Client.Provider.TdIntervalDay.MaxValue"/> 
               or less than the <see cref="F:Teradata.Client.Provider.TdIntervalDay.MinValue"/>.
            </exception>
            <param name="interval">A <strong>TdIntervalDay</strong>.</param>
            <param name="days">Number of days to add.</param>
        </member>
        <member name="M:Teradata.Client.Provider.TdIntervalDay.op_Addition(System.Int32,Teradata.Client.Provider.TdIntervalDay)">
            <summary>
               The specified number of days is added to the <see cref="T:Teradata.Client.Provider.TdIntervalDay"/>.
            </summary>
            <remarks>
            <para>
               If <paramref name="interval"/> is <see cref="F:Teradata.Client.Provider.TdIntervalDay.Null"/> a <strong>Null</strong> will be returned.
            </para>
            <para>
               The returned <strong>TdIntervalDay</strong> will contain a precision 
               set to the <see cref="F:Teradata.Client.Provider.TdIntervalDay.MaxPrecision"/>.
            </para>
            </remarks>
            <returns>
               A new <strong>TdIntervalDay</strong> as the result of adding an Int32 to 
               <strong>TdIntervalDay</strong>.
            </returns> 
            <overloads>
               Two operands are added to return a <strong>TdIntervalDay</strong>.
            </overloads>
            <exception cref="T:System.OverflowException">
               The resultant operation returns a value greater than the <see cref="F:Teradata.Client.Provider.TdIntervalDay.MaxValue"/> 
               or less than the <see cref="F:Teradata.Client.Provider.TdIntervalDay.MinValue"/>.
            </exception>
            <param name="interval">A <strong>TdIntervalDay</strong>.</param>
            <param name="days">Number of days to add.</param>
        </member>
        <member name="M:Teradata.Client.Provider.TdIntervalDay.op_Subtraction(Teradata.Client.Provider.TdIntervalDay,System.Int32)">
            <summary>
               The specified number of days is subtracted from the <see cref="T:Teradata.Client.Provider.TdIntervalDay"/>.
            </summary>
            <remarks>
            <para>
               If <paramref name="interval"/> is <see cref="F:Teradata.Client.Provider.TdIntervalDay.Null"/> a <strong>Null</strong> will be returned.
            </para>
            <para>
               The returned <strong>TdIntervalDay</strong> will contain a precision 
               set to the <see cref="F:Teradata.Client.Provider.TdIntervalDay.MaxPrecision"/>.
            </para>
            </remarks>
            <exception cref="T:System.OverflowException">
               The resultant operation returns a value greater than the <see cref="F:Teradata.Client.Provider.TdIntervalDay.MaxValue"/> 
               or less than the <see cref="F:Teradata.Client.Provider.TdIntervalDay.MinValue"/>.
            </exception>
            <param name="interval">A <strong>TdIntervalDay</strong>.</param>
            <param name="days">Number of days to subtract.</param>
            <returns>
               A new <strong>TdIntervalDay</strong> as the result of substracting an Int32 from 
               <strong>TdIntervalDay</strong>.
            </returns>
        </member>
        <member name="M:Teradata.Client.Provider.TdIntervalDay.op_Addition(Teradata.Client.Provider.TdIntervalDay,Teradata.Client.Provider.TdIntervalDay)">
            <summary>
               A <see cref="T:Teradata.Client.Provider.TdIntervalDay"/> is added to another <strong>TdIntervalDay</strong>.
            </summary>
            <returns>
               A new <strong>TdIntervalDay</strong> as the result of adding a 
               <strong>TdIntervalDay</strong> to another 
               <strong>TdIntervalDay</strong>.
            </returns>
            <remarks>
            <para>
            <para>
               If either parameter is <strong>Null</strong> a <see cref="F:Teradata.Client.Provider.TdIntervalDay.Null"/> will be returned.
            </para>
            <para>
               The returned <strong>TdIntervalDay</strong> will contain a precision 
               set to the <see cref="F:Teradata.Client.Provider.TdIntervalDay.MaxPrecision"/>.
            </para>
            </para>
            <para>
               The returned <strong>TdIntervalDay</strong> will contain a precision 
               adjusted to contain the sum of the <strong>TdIntervalDay</strong> operands 
               without truncation of the result.
            </para>        
            </remarks>
            <exception cref="T:System.OverflowException">
               The resultant operation returns a value greater than the <see cref="F:Teradata.Client.Provider.TdIntervalDay.MaxValue"/> 
               or less than the <see cref="F:Teradata.Client.Provider.TdIntervalDay.MinValue"/>.
            </exception>
            <param name="left">A <strong>TdIntervalDay</strong>.</param>
            <param name="right">A <strong>TdIntervalDay</strong>.</param>
        </member>
        <member name="M:Teradata.Client.Provider.TdIntervalDay.op_Subtraction(Teradata.Client.Provider.TdIntervalDay,Teradata.Client.Provider.TdIntervalDay)">
            <summary>
               A <see cref="T:Teradata.Client.Provider.TdIntervalDay"/> is subtracted from another <strong>TdIntervalDay</strong>.
            </summary>
            <returns>
               A new <strong>TdIntervalDay</strong> as the result 
               of subtracting <paramref name="right"/> from the <paramref name="left"/>.
            </returns>
            <remarks>
            <para>
               If either parameter is <strong>Null</strong> a <see cref="F:Teradata.Client.Provider.TdIntervalDay.Null"/> will be returned.
            </para>
            <para>
               The returned <strong>TdIntervalDay</strong> will contain a precision  
               set to the <see cref="F:Teradata.Client.Provider.TdIntervalDay.MaxPrecision"/>.
            </para>        
            </remarks>
            <overloads>
               The right operand is subtracted from the left operand returning a 
               <strong>TdIntervalDay</strong>.
            </overloads>
            <exception cref="T:System.OverflowException">
               The resultant operation returns a value greater than the <see cref="F:Teradata.Client.Provider.TdIntervalDay.MaxValue"/> 
               or less than the <see cref="F:Teradata.Client.Provider.TdIntervalDay.MinValue"/>.
            </exception>
            <param name="left">A <strong>TdIntervalDay</strong> to subtract from.</param>
            <param name="right">A <strong>TdIntervalDay</strong> to subtract.</param>
        </member>
        <member name="M:Teradata.Client.Provider.TdIntervalDay.op_Multiply(Teradata.Client.Provider.TdIntervalDay,System.Int32)">
            <summary>
               A <see cref="T:Teradata.Client.Provider.TdIntervalDay"/> is multiplied by an integer value.
            </summary>
            <remarks>
            <para>
               If either parameter is <strong>Null</strong> a <see cref="F:Teradata.Client.Provider.TdIntervalDay.Null"/> will be returned.
            </para>
            <para>
               The returned <strong>TdIntervalDay</strong> will contain a precision
               set to the <see cref="F:Teradata.Client.Provider.TdIntervalDay.MaxPrecision"/>.
            </para>
            </remarks>
            <returns>
               A new <strong>TdIntervalDay</strong> as the result of multiplying a 
               <strong>TdIntervalDay</strong> and an integer value.
            </returns>        
            <exception cref="T:System.OverflowException">
               The resultant operation returns a value greater than the <see cref="F:Teradata.Client.Provider.TdIntervalDay.MaxValue"/> 
               or less than the <see cref="F:Teradata.Client.Provider.TdIntervalDay.MinValue"/>.
            </exception>
            <param name="interval">A <strong>TdIntervalDay</strong>.</param>
            <param name="value">A multiplier.</param>
        </member>
        <member name="M:Teradata.Client.Provider.TdIntervalDay.op_Multiply(System.Int32,Teradata.Client.Provider.TdIntervalDay)">
            <summary>
               A <see cref="T:Teradata.Client.Provider.TdIntervalDay"/> is multiplied by an integer value.
            </summary>
            <remarks>
            <para>
               If either parameter is <strong>Null</strong> a <see cref="F:Teradata.Client.Provider.TdIntervalDay.Null"/> will be returned.
            </para>
            <para>
               The returned <strong>TdIntervalDay</strong> will contain a precision
               set to the <see cref="F:Teradata.Client.Provider.TdIntervalDay.MaxPrecision"/>.
            </para>
            </remarks>
            <returns>
               A new <strong>TdIntervalDay</strong> as the result of multiplying a 
               <strong>TdIntervalDay</strong> and an integer value.
            </returns>        
            <exception cref="T:System.OverflowException">
               The resultant operation returns a value greater than the <see cref="F:Teradata.Client.Provider.TdIntervalDay.MaxValue"/> 
               or less than the <see cref="F:Teradata.Client.Provider.TdIntervalDay.MinValue"/>.
            </exception>
            <param name="value">A multiplier.</param>
            <param name="interval">A <strong>TdIntervalDay</strong>.</param>
        </member>
        <member name="M:Teradata.Client.Provider.TdIntervalDay.op_Division(Teradata.Client.Provider.TdIntervalDay,System.Int32)">
            <summary>
               A <see cref="T:Teradata.Client.Provider.TdIntervalDay"/> is divided by an integer value.
            </summary>
            <remarks>
            <para>
               If either parameter is <strong>Null</strong> a <see cref="F:Teradata.Client.Provider.TdIntervalDay.Null"/> will be returned.
            </para>
            <para>
               The returned <strong>TdIntervalDay</strong> will contain a precision 
               which matches the precision of the <strong>interval</strong> parameter.
            </para>
            </remarks>
            <returns>
               A new <strong>TdIntervalDay</strong> as the result of dividing a 
               <strong>TdIntervalDay</strong> and an integer value.
            </returns>        
            <exception cref="T:System.OverflowException">
               The resultant operation returns a value greater than the <see cref="F:Teradata.Client.Provider.TdIntervalDay.MaxValue"/> 
               or less than the <see cref="F:Teradata.Client.Provider.TdIntervalDay.MinValue"/>.
            </exception>
            <exception cref="T:System.DivideByZeroException">
               The <paramref name="value"/> divisor cannot be 0.
            </exception>
            <param name="interval">A <strong>TdIntervalDay</strong>.</param>
            <param name="value">A divisor.</param>
        </member>
        <member name="M:Teradata.Client.Provider.TdIntervalDay.Add(Teradata.Client.Provider.TdIntervalDay,Teradata.Client.Provider.TdIntervalDay)">
            <summary>
               Calculates the sum of two <see cref="T:Teradata.Client.Provider.TdIntervalDay"/> operands.
            </summary>
            <returns>
               A <strong>TdIntervalDay</strong> containing the sum.
            </returns>
            <remarks>
            <para>
               If either parameter is <strong>Null</strong> a <see cref="F:Teradata.Client.Provider.TdIntervalDay.Null"/> will be returned.
            </para>
            <para>
               The returned <strong>TdIntervalDay</strong> will contain a precision 
               set to the <see cref="F:Teradata.Client.Provider.TdIntervalDay.MaxPrecision"/>.
            </para>
            </remarks>
            <overloads>
               Calculates the sum of two operands and returns a <strong>TdIntervalDay</strong>.
            </overloads>
            <exception cref="T:System.OverflowException">
               The resultant operation returns a value greater than the <see cref="F:Teradata.Client.Provider.TdIntervalDay.MaxValue"/> 
               or less than the <see cref="F:Teradata.Client.Provider.TdIntervalDay.MinValue"/>.
            </exception>
            <param name="left">A <strong>TdIntervalDay</strong>.</param>
            <param name="right">A <strong>TdIntervalDay</strong>.</param>
        </member>
        <member name="M:Teradata.Client.Provider.TdIntervalDay.Add(Teradata.Client.Provider.TdIntervalDay,System.Int32)">
            <summary>
               The specified number of days is added to the <see cref="T:Teradata.Client.Provider.TdIntervalDay"/>.
            </summary>
            <remarks>
            <para>
               If <paramref name="interval"/> is <see cref="F:Teradata.Client.Provider.TdIntervalDay.Null"/> a <strong>Null</strong> will be returned.
            </para>
            <para>
               The returned <strong>TdIntervalDay</strong> will contain a precision 
               set to the <see cref="F:Teradata.Client.Provider.TdIntervalDay.MaxPrecision"/>.
            </para>
            </remarks>
            <returns>
               A new <strong>TdIntervalDay</strong> as the result of adding an Int32 to 
               <strong>TdIntervalDay</strong>.
            </returns>        
            <exception cref="T:System.OverflowException">
               The resultant operation returns a value greater than the <see cref="F:Teradata.Client.Provider.TdIntervalDay.MaxValue"/> 
               or less than the <see cref="F:Teradata.Client.Provider.TdIntervalDay.MinValue"/>.
            </exception>
            <param name="interval">A <strong>TdIntervalDay</strong>.</param>
            <param name="days">Number of days to add.</param>
        </member>
        <member name="M:Teradata.Client.Provider.TdIntervalDay.Add(System.Int32,Teradata.Client.Provider.TdIntervalDay)">
            <summary>
               The specified number of days is added to the <see cref="T:Teradata.Client.Provider.TdIntervalDay"/>.
            </summary>
            <remarks>
            <para>
               If <paramref name="interval"/> is <see cref="F:Teradata.Client.Provider.TdIntervalDay.Null"/> a <strong>Null</strong> will be returned.
            </para>
            <para>
               The returned <strong>TdIntervalDay</strong> will contain a precision 
               set to the <see cref="F:Teradata.Client.Provider.TdIntervalDay.MaxPrecision"/>.
            </para>
            </remarks>
            <returns>
               A new <strong>TdIntervalDay</strong> as the result of adding an Int32 to 
               <strong>TdIntervalDay</strong>.
            </returns> 
            <overloads>
               Two operands are added to return a <strong>TdIntervalDay</strong>.
            </overloads>
            <exception cref="T:System.OverflowException">
               The resultant operation returns a value greater than the <see cref="F:Teradata.Client.Provider.TdIntervalDay.MaxValue"/> 
               or less than the <see cref="F:Teradata.Client.Provider.TdIntervalDay.MinValue"/>.
            </exception>
            <param name="interval">A <strong>TdIntervalDay</strong>.</param>
            <param name="days">Number of days to add.</param>
        </member>
        <member name="M:Teradata.Client.Provider.TdIntervalDay.Subtract(Teradata.Client.Provider.TdIntervalDay,System.Int32)">
            <summary>
               The specified number of days is subtracted from the <see cref="T:Teradata.Client.Provider.TdIntervalDay"/>.
            </summary>
            <remarks>
            <para>
               If <paramref name="interval"/> is <see cref="F:Teradata.Client.Provider.TdIntervalDay.Null"/> a <strong>Null</strong> will be returned.
            </para>
            <para>
               The returned <strong>TdIntervalDay</strong> will contain a precision  
               set to the <see cref="F:Teradata.Client.Provider.TdIntervalDay.MaxPrecision"/>.
            </para>       
            </remarks>
            <exception cref="T:System.OverflowException">
               The resultant operation returns a value greater than the <see cref="F:Teradata.Client.Provider.TdIntervalDay.MaxValue"/> 
               or less than the <see cref="F:Teradata.Client.Provider.TdIntervalDay.MinValue"/>.
            </exception>
            <param name="interval">A <strong>TdIntervalDay</strong>.</param>
            <param name="days">Number of days to subtract.</param>
            <returns>
               A new <strong>TdIntervalDay</strong> as the result of substracting an Int32 from 
               <strong>TdIntervalDay</strong>.
            </returns>
        </member>
        <member name="M:Teradata.Client.Provider.TdIntervalDay.Subtract(Teradata.Client.Provider.TdIntervalDay,Teradata.Client.Provider.TdIntervalDay)">
            <summary>
               A <see cref="T:Teradata.Client.Provider.TdIntervalDay"/> is subtracted from another <strong>TdIntervalDay</strong>.
            </summary>
            <returns>
               A new <strong>TdIntervalDay</strong> as the result 
               of subtracting <paramref name="right"/> from the <paramref name="left"/>.
            </returns>
            <remarks>
            <para>
               If either parameter is <strong>Null</strong> a <see cref="F:Teradata.Client.Provider.TdIntervalDay.Null"/> will be returned.
            </para>
            <para>
               The returned <strong>TdIntervalDay</strong> will contain a precision  
               set to the <see cref="F:Teradata.Client.Provider.TdIntervalDay.MaxPrecision"/>.
            </para>        
            </remarks>
            <overloads>
               The right operand is subtracted from the left operand returning a 
               <strong>TdIntervalDay</strong>.
            </overloads>
            <exception cref="T:System.OverflowException">
               The resultant operation returns a value greater than the <see cref="F:Teradata.Client.Provider.TdIntervalDay.MaxValue"/> 
               or less than the <see cref="F:Teradata.Client.Provider.TdIntervalDay.MinValue"/>.
            </exception>
            <param name="left">A <strong>TdIntervalDay</strong> to subtract from.</param>
            <param name="right">A <strong>TdIntervalDay</strong> to subtract.</param>
        </member>
        <member name="M:Teradata.Client.Provider.TdIntervalDay.Multiply(Teradata.Client.Provider.TdIntervalDay,System.Int32)">
            <summary>
               A <see cref="T:Teradata.Client.Provider.TdIntervalDay"/> is multiplied by an integer value.
            </summary>
            <remarks>
            <para>
               If either parameter is <strong>Null</strong> a <see cref="F:Teradata.Client.Provider.TdIntervalDay.Null"/> will be returned.
            </para>
            <para>
               The returned <strong>TdIntervalDay</strong> will contain a precision
               set to the <see cref="F:Teradata.Client.Provider.TdIntervalDay.MaxPrecision"/>.
            </para>
            </remarks>
            <returns>
               A new <strong>TdIntervalDay</strong> as the result of multiplying a 
               <strong>TdIntervalDay</strong> and an integer value.
            </returns>        
            <exception cref="T:System.OverflowException">
               The resultant operation returns a value greater than the <see cref="F:Teradata.Client.Provider.TdIntervalDay.MaxValue"/> 
               or less than the <see cref="F:Teradata.Client.Provider.TdIntervalDay.MinValue"/>.
            </exception>
            <param name="interval">A <strong>TdIntervalDay</strong>.</param>
            <param name="value">A multiplier.</param>
        </member>
        <member name="M:Teradata.Client.Provider.TdIntervalDay.Multiply(System.Int32,Teradata.Client.Provider.TdIntervalDay)">
            <summary>
               A <see cref="T:Teradata.Client.Provider.TdIntervalDay"/> is multiplied by an integer value.
            </summary>
            <remarks>
            <para>
               If either parameter is <strong>Null</strong> a <see cref="F:Teradata.Client.Provider.TdIntervalDay.Null"/> will be returned.
            </para>
            <para>
               The returned <strong>TdIntervalDay</strong> will contain a precision
               set to the <see cref="F:Teradata.Client.Provider.TdIntervalDay.MaxPrecision"/>.
            </para>
            </remarks>
            <returns>
               A new <strong>TdIntervalDay</strong> as the result of multiplying a 
               <strong>TdIntervalDay</strong> and an integer value.
            </returns>        
            <exception cref="T:System.OverflowException">
               The resultant operation returns a value greater than the <see cref="F:Teradata.Client.Provider.TdIntervalDay.MaxValue"/> 
               or less than the <see cref="F:Teradata.Client.Provider.TdIntervalDay.MinValue"/>.
            </exception>
            <param name="value">A multiplier.</param>
            <param name="interval">A <strong>TdIntervalDay</strong>.</param>
        </member>
        <member name="M:Teradata.Client.Provider.TdIntervalDay.Divide(Teradata.Client.Provider.TdIntervalDay,System.Int32)">
            <summary>
               A <see cref="T:Teradata.Client.Provider.TdIntervalDay"/> is divided by an integer value.
            </summary>
            <remarks>
            <para>
               If either parameter is <strong>Null</strong> a <see cref="F:Teradata.Client.Provider.TdIntervalDay.Null"/> will be returned.
            </para>
            <para>
               The returned <strong>TdIntervalDay</strong> will contain a precision 
               which matches the precision of the <strong>interval</strong> parameter.
            </para>
            </remarks>
            <returns>
               A new <strong>TdIntervalDay</strong> as the result of dividing a 
               <strong>TdIntervalDay</strong> and an integer value.
            </returns>        
            <exception cref="T:System.OverflowException">
               The resultant operation returns a value greater than the <see cref="F:Teradata.Client.Provider.TdIntervalDay.MaxValue"/> 
               or less than the <see cref="F:Teradata.Client.Provider.TdIntervalDay.MinValue"/>.
            </exception>
            <exception cref="T:System.DivideByZeroException">
               The <paramref name="value"/> divisor cannot be 0.
            </exception>
            <param name="interval">A <strong>TdIntervalDay</strong>.</param>
            <param name="value">A divisor.</param>
        </member>
        <member name="M:Teradata.Client.Provider.TdIntervalDay.op_GreaterThan(Teradata.Client.Provider.TdIntervalDay,Teradata.Client.Provider.TdIntervalDay)">
            <summary>
               This operator determines whether the <paramref name="left"/> is greater 
               than the <paramref name="right"/>.
            </summary>
            <returns>
            	<para>
            		<c>true</c> indicates the <paramref name="left"/> is greater than
                    the <paramref name="right"/>, <c>false</c> otherwise.
                </para>
            	<para>
            		<list type="table">
            			<listheader>
            				<term>Return Value</term>
            				<description>Description</description>
            			</listheader>
            			<item>
            				<term><c>true</c></term>
            				<description>
            					<paramref name="left"/> and
                                <paramref name="right"/> are not
                                <see cref="F:Teradata.Client.Provider.TdIntervalDay.Null"/> and
                                <paramref name="left"/> is greater than
                                <paramref name="right"/>.
            				</description>
            			</item>
            			<item>
            				<term><c>false</c></term>
            				<description>
            					<para>
                                    The <paramref name="left"/> is less than or equal
                                    to <paramref name="right"/>
                                </para>
            					<para>-or-</para>
            					<para>
                                    Either <paramref name="left"/> and / or
                                    <paramref name="right"/> is <strong>Null</strong>.
                                </para>
            				</description>
            			</item>
            		</list>
            	</para>
            </returns>
            <remarks>
            	<para>
                   Comparison operators always return <c>false</c> if one of the operands is
                   <strong>Null</strong>. Therefore you should not assume that the reverse condition
                   is <c>true</c>. For example you cannot assume that the <paramref name="left"/> is less 
                   than or equal to the <paramref name="right"/> if the "&gt;" operator returns <c>false</c>.
               </para>
            	<para>
                   The reverse condition is <c>true</c> when the <paramref name="left"/> and the 
                   <paramref name="right"/> are not <strong>Null</strong>.
               </para>
            </remarks>
            <param name="left">An instance of <see cref="T:Teradata.Client.Provider.TdIntervalDay"/>.</param>
            <param name="right">An instance of <strong>TdIntervalDay</strong>.</param>
        </member>
        <member name="M:Teradata.Client.Provider.TdIntervalDay.op_GreaterThanOrEqual(Teradata.Client.Provider.TdIntervalDay,Teradata.Client.Provider.TdIntervalDay)">
            <summary>
               This operator determines whether the <paramref name="left"/> is greater than or 
               equal to the <paramref name="right"/>.
            </summary>
            <returns>
            	<para>
            		<c>true</c> indicates the <paramref name="left"/> is greater than
                    or equal to the <paramref name="right"/>, <c>false</c> otherwise.
                </para>
            	<para>
            		<list type="table">
            			<listheader>
            				<term>Return Value</term>
            				<description>Description</description>
            			</listheader>
            			<item>
            				<term><c>true</c></term>
            				<description>
            					<para>
            						<paramref name="left"/> and
                                    <paramref name="right"/> are not
                                    <see cref="F:Teradata.Client.Provider.TdIntervalDay.Null"/> and
                                    <paramref name="left"/> is greater than or equal
                                    to <paramref name="right"/>
            					</para>
            					<para>-or-</para>
            					<para>
            						<paramref name="left"/> is <strong>Null</strong>
                                    and <paramref name="right"/> is
                                    <strong>Null</strong>.
            					</para>
            				</description>
            			</item>
            			<item>
            				<term><c>false</c></term>
            				<description>
            					<para>
                                    The <paramref name="left"/> is less than
                                    <paramref name="right"/>
            					</para>
            					<para>-or-</para>
            					<para>
                                    Either <paramref name="left"/> or
                                    <paramref name="right"/> is <strong>Null</strong>.
            					</para>
            				</description>
            			</item>
            		</list>
            	</para>
            </returns>
            <remarks>
            	<para>
                    Comparison operators always return <c>false</c> if one of the operands is
                    <strong>Null</strong>. Therefore you should not assume that the reverse
                    condition is <c>true</c>. For example you cannot assume that the
                    <paramref name="left"/> is less than the
                    <paramref name="right"/> if the "&gt;=" operator returns
                    <c>false</c>.
                </para>
            	<para>
                    The reverse condition is <c>true</c> when the
                    <paramref name="left"/> and the
                    <paramref name="right"/> are not <strong>Null</strong>.
                </para>
            </remarks>
            <param name="left">An instance of <see cref="T:Teradata.Client.Provider.TdIntervalDay"/>.</param>
            <param name="right">An instance of <strong>TdIntervalDay</strong>.</param>
        </member>
        <member name="M:Teradata.Client.Provider.TdIntervalDay.op_Inequality(Teradata.Client.Provider.TdIntervalDay,Teradata.Client.Provider.TdIntervalDay)">
            <summary>
               This operator determines whether the <paramref name="left"/> and the  
               <paramref name="right"/> are not equal.
            </summary>
            <returns>
            	<para>
                   A Boolean is returned that indicates whether the two operands are not equal.
                   <c>true</c> indicates the two operands are not equal, <c>false</c>
                   otherwise.
               </para>
            	<para>
            		<list type="table">
            			<listheader>
            				<term>Return Value</term>
            				<description>Description</description>
            			</listheader>
            			<item>
            				<term><c>true</c></term>
            				<description>
                                <para>
            					   <paramref name="left"/> is less than or greater than
                                   <paramref name="right"/>.
                                </para>
            					<para>-or-</para>
                               <para>
            					    <paramref name="left"/> is
                                   <see cref="F:Teradata.Client.Provider.TdIntervalDay.Null"/> and
                                   <paramref name="right"/> is not <strong>Null.</strong> 
                               </para>
            					<para>-or-</para>
            					<para>
                                   <paramref name="left"/> is not <strong>Null</strong>
                                   and <paramref name="right"/> is <strong>Null.</strong>
                                </para>
                            </description>
            			</item>
            			<item>
            				<term><c>false</c></term>
            				<description>
            					<para>
                                  <paramref name="left"/> is equal to
                                  <paramref name="right"/>.
                               </para>
            					<para>-or-</para>
            					<para>
                                   <paramref name="left"/> and
                                   <paramref name="right"/> are <strong>Null</strong>.
                                </para>
                            </description>
            			</item>
            		</list>
            	</para>
            </returns>
            <param name="left">An instance of <see cref="T:Teradata.Client.Provider.TdIntervalDay"/>.</param>
            <param name="right">An instance of <strong>TdIntervalDay</strong>.</param>
        </member>
        <member name="M:Teradata.Client.Provider.TdIntervalDay.op_Equality(Teradata.Client.Provider.TdIntervalDay,Teradata.Client.Provider.TdIntervalDay)">
            <summary>
               This operator determines whether the <paramref name="left"/> and the  
               <paramref name="right"/> are equal.
            </summary>
            <returns>
            	<para>
                   A Boolean is returned that indicates whether the two operands are equal.
                   <c>True</c> indicates the two operands are equal, <c>false</c> otherwise.
               </para>
            	<para>
            		<list type="table">
            			<listheader>
            				<term>Return Value</term>
            				<description>Description</description>
            			</listheader>
            			<item>
            				<term><c>true</c></term>
            				<description>
            					<para>
            					   <paramref name="left"/> is equal to
                                   <paramref name="right"/>
            					</para>
            					<para>-or-</para>
            					<para>
            					   <paramref name="left"/> is
                                   <see cref="F:Teradata.Client.Provider.TdIntervalDay.Null"/> and
                                   <paramref name="right"/> is <strong>Null</strong>.
            					</para>
            				</description>
            			</item>
            			<item>
            				<term><c>false</c></term>
            				<description>
            					<para>
            					   <paramref name="left"/> is not <strong>Null</strong>
                                   and <paramref name="right"/> is <strong>Null</strong>
            					</para>
            					<para>-or-</para>
            					<para>
            					   <paramref name="left"/> is <strong>Null</strong> and
                                   <paramref name="right"/> is not <strong>Null</strong>
            					</para>
            					<para>-or-</para>
            					<para>
                                   The <paramref name="left"/> is not equal to
                                   <paramref name="right"/>.
            					</para>
            				</description>
            			</item>
            		</list>
            	</para>
            </returns>
            <param name="left">An instance of <see cref="T:Teradata.Client.Provider.TdIntervalDay"/>.</param>
            <param name="right">An instance of <strong>TdIntervalDay</strong>.</param>
        </member>
        <member name="M:Teradata.Client.Provider.TdIntervalDay.op_LessThan(Teradata.Client.Provider.TdIntervalDay,Teradata.Client.Provider.TdIntervalDay)">
            <summary>
               This operator determines whether the <paramref name="left"/> is less than the 
               <paramref name="right"/>.
            </summary>
            <returns>
            	<para>
            		<c>True</c> indicates the <paramref name="left"/> is less than
                    the <paramref name="right"/>, <c>false</c> otherwise.
                </para>
            	<para>
            		<list type="table">
            			<listheader>
            				<term>Return Value</term>
            				<description>Description</description>
            			</listheader>
            			<item>
            				<term><c>true</c></term>
            				<description>
            					<para>
            					    <paramref name="left"/> and
                                   <paramref name="right"/> are not
                                   <see cref="F:Teradata.Client.Provider.TdIntervalDay.Null"/> and
                                   <paramref name="left"/> is less than
                                   <paramref name="right"/>.
            					</para>
            				</description>
            			</item>
            			<item>
            				<term><c>false</c></term>
            				<description>
            					<para>
                                    The <paramref name="left"/> is greater than or
                                    equal to <paramref name="right"/>
            					</para>
            					<para>-or-</para>
            					<para>
                                    Either <paramref name="left"/> and / or
                                    <paramref name="right"/> is <strong>Null</strong>.
            					</para>
            				</description>
            			</item>
            		</list>
            	</para>
            </returns>
            <remarks>
            	<para>
                    Comparison operators always return <c>false</c> if one of the operands is
                    <strong>Null</strong>. Therefore you should not assume that the reverse
                    condition is <c>true</c>. For example you cannot assume that the
                    <paramref name="left"/> is greater than or equal to the
                    <paramref name="right"/> if the "&lt;" operator returns
                    <c>false</c>.
                </para>
            	<para>
                    The reverse condition is <c>true</c> when the
                    <paramref name="left"/> and the
                    <paramref name="right"/> are not <strong>Null</strong>.
                </para>
            </remarks>
            <param name="left">An instance of <see cref="T:Teradata.Client.Provider.TdIntervalDay"/>.</param>
            <param name="right">An instance of <strong>TdIntervalDay</strong>.</param>
        </member>
        <member name="M:Teradata.Client.Provider.TdIntervalDay.op_LessThanOrEqual(Teradata.Client.Provider.TdIntervalDay,Teradata.Client.Provider.TdIntervalDay)">
            <summary>
               This operator determines whether the <paramref name="left"/> is less than  
               or equal to the <paramref name="right"/>.
            </summary>
            <returns>
            	<para>
            		<c>true</c> indicates the <paramref name="left"/> is less than or
                    equal to the <paramref name="right"/>, <c>false</c> otherwise.
                </para>
            	<para>
            		<list type="table">
            			<listheader>
            				<term>Return Value</term>
            				<description>Description</description>
            			</listheader>
            			<item>
            				<term><c>true</c></term>
            				<description>
            					<para>
            						<paramref name="left"/> and
                                    <paramref name="right"/> are not
                                    <see cref="F:Teradata.Client.Provider.TdIntervalDay.Null"/> and
                                    <paramref name="left"/> is less than or equal to
                                    <paramref name="right"/>
            					</para>
            					<para>-or-</para>
            					<para>
            						<paramref name="left"/> is <strong>Null</strong>
                                    and <paramref name="right"/> is
                                    <strong>Null</strong>.
            					</para>
            				</description>
            			</item>
            			<item>
            				<term><c>false</c></term>
            				<description>
            					<para>
                                    The <paramref name="left"/> is greater than
                                    <paramref name="right"/>
            					</para>
            					<para>-or-</para>
            					<para>
                                    Either <paramref name="left"/> or
                                    <paramref name="right"/> is <strong>Null</strong>.
            					</para>
            				</description>
            			</item>
            		</list>
            	</para>
            </returns>
            <remarks>
            	<para>
                    Comparison operators always return <c>false</c> if one of the operands is
                    <strong>Null</strong>. Therefore you should not assume that the reverse
                    condition is <c>true</c>. For example you cannot assume that the
                    <paramref name="left"/> is greater than the <paramref name="right"/>
                     if the "&lt;=" operator returns <c>false</c>.
                </para>
            	<para>
                    The reverse condition is <c>true</c> when the
                    <paramref name="left"/> and the
                    <paramref name="right"/> are not <strong>Null</strong>.
                </para>
            </remarks>
            <param name="left">An instance of <see cref="T:Teradata.Client.Provider.TdIntervalDay"/>.</param>
            <param name="right">An instance of <strong>TdIntervalDay</strong>.</param>
        </member>
        <member name="M:Teradata.Client.Provider.TdIntervalDay.op_Explicit(System.TimeSpan)~Teradata.Client.Provider.TdIntervalDay">
            <summary>
               Converts a <see cref="T:System.TimeSpan"/> to a <see cref="T:Teradata.Client.Provider.TdIntervalDay"/>.
            </summary>
            <returns>
               A <strong>TdIntervalDay</strong> interval.
            </returns>
            <remarks>
               <strong>TimeSpan</strong> fractional seconds, seconds, minutes and hours  
               will be truncated during conversion into a <strong>TdIntervalDay</strong> interval.
            </remarks>
            <exception cref="T:System.OverflowException">
               The resultant operation returns a value greater than the <see cref="F:Teradata.Client.Provider.TdIntervalDay.MaxValue"/> 
               or less than the <see cref="F:Teradata.Client.Provider.TdIntervalDay.MinValue"/>.
            </exception>
            <param name="value">A <strong>TimeSpan</strong>.</param>
        </member>
        <member name="M:Teradata.Client.Provider.TdIntervalDay.op_Explicit(Teradata.Client.Provider.TdIntervalDay)~System.TimeSpan">
            <summary>
               Converts a <see cref="T:Teradata.Client.Provider.TdIntervalDay"/> to a <see cref="T:System.TimeSpan"/>.
            </summary>
            <returns>
               A <strong>TimeSpan</strong>.
            </returns>
            <remarks>
               The <strong>TimeSpan</strong> time components are represented in 24 hour format.
            </remarks>
            <exception cref="T:System.ArgumentNullException">
               The <strong>TdIntervalDay</strong> value is <see cref="F:Teradata.Client.Provider.TdIntervalDay.Null"/>.
            </exception>
            <param name="value">A <strong>TdIntervalDay</strong> interval.</param>
        </member>
        <member name="M:Teradata.Client.Provider.TdIntervalDay.op_Explicit(System.Int32)~Teradata.Client.Provider.TdIntervalDay">
            <summary>
               Converts an <c>Int32</c> to <see cref="T:Teradata.Client.Provider.TdIntervalDay"/>.
            </summary>
            <returns>A <strong>TdIntervalDay</strong>.</returns>
            <remarks>
               The conversion may produce exceptions due to exceeding <see cref="F:Teradata.Client.Provider.TdIntervalDay.MinValue"/>
               or <see cref="F:Teradata.Client.Provider.TdIntervalDay.MaxValue"/>.
            </remarks>
            <exception cref="T:System.OverflowException">
               The resultant conversion returns a value greater than the <see cref="F:Teradata.Client.Provider.TdIntervalDay.MaxValue"/> 
               or less than the <see cref="F:Teradata.Client.Provider.TdIntervalDay.MinValue"/>.
            </exception>
            <param name="value">An Int32 representing a <strong>TdIntervalDay</strong> interval.</param>
        </member>
        <member name="M:Teradata.Client.Provider.TdIntervalDay.op_Explicit(Teradata.Client.Provider.TdIntervalDay)~System.Int32">
            <summary>
               Convert a <see cref="T:Teradata.Client.Provider.TdIntervalDay"/> implictly to an Int32 representing a day interval.
            </summary>
            <returns>
               <strong>TdIntervalDay</strong> converted to an Int32 representing a day interval.
            </returns>
            <exception cref="T:System.ArgumentNullException">
               The <strong>TdIntervalDay</strong> value is <see cref="F:Teradata.Client.Provider.TdIntervalDay.Null"/>.
            </exception>
            <param name="value">A <strong>TdIntervalDay</strong> interval.</param>
        </member>
        <member name="M:Teradata.Client.Provider.TdIntervalDay.op_Implicit(Teradata.Client.Provider.TdIntervalDay)~Teradata.Client.Provider.TdIntervalDayToHour">
            <summary>
               Converts a <see cref="T:Teradata.Client.Provider.TdIntervalDay"/> to <see cref="T:Teradata.Client.Provider.TdIntervalDayToHour"/>.
            </summary>
            <param name="value">A <strong>TdIntervalDay</strong> interval.</param>
            <returns>A <strong>TdIntervalDayToHour</strong>.</returns>
        </member>
        <member name="M:Teradata.Client.Provider.TdIntervalDay.op_Implicit(Teradata.Client.Provider.TdIntervalDay)~Teradata.Client.Provider.TdIntervalDayToSecond">
            <summary>
               Converts a <see cref="T:Teradata.Client.Provider.TdIntervalDay"/> to a <see cref="T:Teradata.Client.Provider.TdIntervalDayToSecond"/>.
            </summary>
            <remarks>
            <para>
               The <see cref="P:Teradata.Client.Provider.TdIntervalDay.Precision"/> is set to the precision of the <paramref name="value"/>
               and the <see cref="P:Teradata.Client.Provider.TdIntervalDayToSecond.Scale"/> is set to zero. since the 
               <strong>value</strong> does not contain any seconds. 
            </para>
            </remarks>
            <param name="value">A <strong>TdIntervalDay</strong> interval.</param>
            <returns>A <strong>TdIntervalDayToSecond</strong>.</returns>
        </member>
        <member name="M:Teradata.Client.Provider.TdIntervalDay.op_Implicit(Teradata.Client.Provider.TdIntervalDay)~Teradata.Client.Provider.TdIntervalDayToMinute">
            <summary>
               Converts a <see cref="T:Teradata.Client.Provider.TdIntervalDay"/> to <see cref="T:Teradata.Client.Provider.TdIntervalDayToMinute"/>.
            </summary>
            <param name="value">A <Strong>TdIntervalDay</Strong> interval.</param>
            <returns>A <strong>TdIntervalDayToMinute</strong>.</returns>
        </member>
        <member name="P:Teradata.Client.Provider.TdIntervalDay.IsNull">
            <summary>
               Indicates whether this <see cref="T:Teradata.Client.Provider.TdIntervalDay"/> instance is <see cref="F:Teradata.Client.Provider.TdIntervalDay.Null"/>. 
            </summary>
            <value>
               <c>true</c> if this <strong>TdIntervalDay</strong> is <strong>Null</strong>; 
               <c>false</c> otherwise.
            </value>
        </member>
        <member name="P:Teradata.Client.Provider.TdIntervalDay.Days">
            <summary>
               The number of interval days is returned. The return value ranges from -9999 to 9999.
            </summary>
            <remarks>
            <para>
               A <see cref="T:Teradata.Client.Provider.TdIntervalDay"/> is represented as [-][days]. 
               The minus sign is optional and represents a negative interval of time.  The value of the 
               Days property is the days component.
            </para>
            </remarks>
            <exception cref="T:Teradata.Client.Provider.TdException">
               This property is not available when this instance is <see cref="F:Teradata.Client.Provider.TdIntervalDay.Null"/>.
            </exception>
        </member>
        <member name="P:Teradata.Client.Provider.TdIntervalDay.Precision">
            <summary>
               The number of significant digits in the day is returned. The return value
               ranges from 1 to 4.
            </summary>
            <exception cref="T:Teradata.Client.Provider.TdException">
               This property is not available when this instance is <see cref="F:Teradata.Client.Provider.TdIntervalDay.Null"/>.
            </exception>
        </member>
        <member name="P:Teradata.Client.Provider.TdIntervalDay.Value">
            <summary>
               Gets the .NET data type representation of <see cref="T:Teradata.Client.Provider.TdIntervalDay"/> 
               as a <see cref="T:System.TimeSpan"/>.
            </summary>
            <remarks>
               This property in concept parallels <see cref="M:Teradata.Client.Provider.TdDataReader.GetValue(System.Int32)"/> and
               <see cref="P:Teradata.Client.Provider.TdParameter.Value"/>. That is they all represent the .NET Framework 
               Class Library(FCL) primitive data type that correspond to the Teradata 
               Interval Day data type.
            </remarks>
            <value>The interval represented as a <strong>TimeSpan</strong> is returned.</value>
            <exception cref="T:Teradata.Client.Provider.TdException">
               This property is not available when this instance is <see cref="F:Teradata.Client.Provider.TdIntervalDay.Null"/>.
            </exception>
        </member>
        <member name="P:Teradata.Client.Provider.TdIntervalDay.InternalTimespan">
            <summary>
               Return the internal TimeSpan representing the interval.
            </summary>
            <remarks>
               The internal timespan is used in calculating arithmetic operations and in storing
               day-time intervals.
            </remarks>
        </member>
        <member name="P:Teradata.Client.Provider.TdIntervalDay.ObjectId">
            <summary>
               Gets the instance object identifier.
            </summary>
        </member>
        <member name="P:Teradata.Client.Provider.TdIntervalDay.IsNegative">
            <summary>
               Indicate if the interval is negative.
            </summary>
            <remarks>
               Timespan.ticks will indicate a negative interval.  Other values (days, hours, minutes, 
                milliseconds) may be 0 and the interval may still be negative.
            </remarks>
        </member>
        <member name="P:Teradata.Client.Provider.TdIntervalDay.InternalAccessor">
            <summary>
               Accessor to the internal storage for this interval.
            </summary>
        </member>
        <member name="T:Teradata.Client.Provider.TdIntervalDayToHour">
            <summary>
                <see cref="T:Teradata.Client.Provider.TdIntervalDayToHour"/> represents an interval of time defining a duration in
                days and hours. The day precision is configurable.
            </summary>
            <remarks>
            	<para>
                   <strong>TdIntervalDayToHour</strong> is a .NET Data Provider for Teradata specific type,
                   designed to support a Teradata Database Interval Day To Hour data type.
               </para>
            	<para>
                    The <strong>TdIntervalDayToHour</strong> supports the Teradata Interval Day (precision)
                    To Hour data type where precision indicates the number of digits in the day
                    (from 1 - 4).
                </para>
                <para>
                    The interval value must be specified in the following format :
                </para>
            	<para>[sign][days][space character][hh]</para>
            	<para>Below is the description of each format item.</para>
            	<para>
            		<list type="table">
            			<listheader>
            				<term>Format Item</term>
            				<description>Description</description>
            			</listheader>
            			<item>
            				<term>sign</term>
            				<description>Optional - . Defaults as space character (+).</description>
            			</item>
            			<item>
            				<term>days</term>
            				<description>Required number of days (one to four digits in
                            length).</description>
            			</item>
            			<item>
            				<term>hh</term>
            				<description>Required number of hours from 00 - 23.</description>
            			</item>
            		</list>
            	</para>
            	<para>
                   The .Net Framework does not have a system type that directly corresponds to
                   the Teradata Database Interval Day To Hour data type. The .NET Data Provider for 
                   Teradata Version 13.0 version and prior versions map Interval Day To Hour to 
                   System.String. With version 13.1 of the provider, <strong>TdIntervalDayToHour</strong> 
                   is available to retrieve and manipulate data of type Interval Day To Hour.
               </para>
            	<para>The range of values for each TdInterval precision is as follows:</para>
            	<para>
            		<table class="xmldoctable" cellspacing="0">
            			<tbody>
            				<tr>
            					<th>Type and Precision</th>
            					<th>Minimum</th>
            					<th>Maximum</th>
            				</tr>
            				<tr>
            					<td class="xmldoctable">TdIntervalDayToHour(1)</td>
            					<td class="xmldoctable">
            						<para>-'9 23'</para>
            					</td>
            					<td>'9 23'</td>
            				</tr>
            				<tr>
            					<td class="xmldoctable">TdIntervalDayToHour(2)</td>
            					<td class="xmldoctable">
            						<para>-'99 23'</para>
            					</td>
            					<td>'99 23'</td>
            				</tr>
            				<tr>
            					<td class="xmldoctable">TdIntervalDayToHour(3)</td>
            					<td class="xmldoctable">
            						<para>-'999 23'</para>
            					</td>
            					<td>'999 23'</td>
            				</tr>
            				<tr>
            					<td class="xmldoctable">TdIntervalDayToHour(4)</td>
            					<td class="xmldoctable">
            						<para>-'9999 23'</para>
            					</td>
            					<td>'9999 23'</td>
            				</tr>
            			</tbody>
            		</table>
            	</para>
                <para>
                    <strong>TdIntervalDayToHour</strong> also supports <see cref="F:Teradata.Client.Provider.TdIntervalDayToHour.Null"/>.  
                    This is a very important feature. An application is no longer required to call
                    <see cref="M:Teradata.Client.Provider.TdDataReader.IsDBNull(System.Int32)"/> before invoking the corresponding 
                    TdDataReader "Get" method.  This will improve overall performance.
                </para>
                <para>
                    A <strong>TdIntervalDayToHour</strong> structure allows arithmetic,
                    comparision and conversion operations to be performed. 
                </para>
            	<para>
                    A <strong>TdIntervalDayToHour</strong> may also be specified as an in, out, 
                    or in/out parameter to a stored procedure. In order to maintain backward  
                    compatibility with previous versions of the provider (release 13.0 and prior), 
                    a Connection String Attribute
                    <see cref="P:Teradata.Client.Provider.TdConnectionStringBuilder.EnableTdIntervals">EnableTdIntervals</see>
                    has been added. When the <strong>EnableTdIntervals</strong> attribute
                    is <c>true</c>, <see cref="P:Teradata.Client.Provider.TdParameter.ProviderSpecificValue"/> will
                    return the data as the provider specific type of <strong>TdIntervalDayToHour</strong>.
                    When <strong>EnableTdIntervals</strong> is <c>false</c>, 
                    <strong>TdParameter.ProviderSpecificValue</strong> will return the data as a
                    .NET Framework Library data type of <see cref="T:System.String"/>.
                </para>
            	<para>
                    The <see cref="P:Teradata.Client.Provider.TdParameter.Value"/> will also return the .NET Framework Library
                    data type of <strong>System.String</strong> when <strong>EnableTdIntervals</strong>
                    is <c>false</c> to maintain backward compatibility. 
                    The <strong>TdParameter.Value</strong> will return a .NET Framework data type of
                    <see cref="T:System.TimeSpan"/> when <strong>EnableTdIntervals</strong>
                    is <c>true</c>.
                </para>
            	<para>
                   For more information on the Teradata Interval Day To Hour data type please
                   see the Teradata Database SQL Reference - 'Data Types and Literals'.
               </para>
            </remarks>
            <example>
            	<para>
                   The following example shows how to retrieve a <strong>TdIntervalDayToHour</strong>, 
                   modify the interval, and then update the table.
               </para>
            	<code lang="CS">
            Public void IntervalExample(TdCommand cmd, String model)
            {
               cmd.Parameters.Clear();
               
               cmd.CommandText = "SELECT StartDate, LeaseReturn, DelayPeriod " +
                                 "FROM AutoLeases " +
                                 "WHERE Model = ?";
             
               cmd.CommandType = CommandType.Text;
             
               cmd.Parameters.Add(null, TdType.VarChar, 10,
                    ParameterDirection.Input, true, 0, 0, null,    
                    DataRowVersion.Default, model);
             
               Int32 row = 0;
               TdDate [] startDate;
               TdTimestamp [] leaseReturn;
               TdIntervalDayToHour [] leaseLen;
               
               using (TdDataReader dr = cmd.ExecuteReader())
               {
                  startDate = new TdDate[dr.RecordsReturned];
                  leaseReturn = new TdTimestamp[dr.RecordsReturned];
                  leaseLen = new TdIntervalDayToHour [dr.RecordsReturned];
             
                  // Specifying an interval of 7 days, 1 hour with a day precision of 4
                  TdIntervalDayToHour leaseReturnExtension = new TdIntervalDayToHour(7, 1, 4);
               
                  while (dr.Read())
                  {
                     // Retrieving the dates
                     startDate[row] = dr.GetTdDate(0);
                     leaseReturn[row] = dr.GetTimestamp(1);
                     leaseLen[row] = dr.GetTdIntervalDayToHour(2);
             
                     // Adding extension to the lease return
                     leaseReturn[row] = leaseReturn[row] + leaseReturnExtension;
             
                     // Adding extension to the lease length;
                     leaseLen[row] = leaseLen[row] + leaseReturnExtension;
             
                     row++;
                  } 
               }
             
               cmd.Parameters.Clear();
             
               cmd.CommandText = "UPDATE AutoLeases " +
                                 "SET LeaseReturn = ?, LeaseLen = ? " +
                                 "WHERE Model = ?";
             
               cmd.Parameters.Add(null, TdType.Timestamp, 0,
                     ParameterDirection.Input, true, 0, 0, null,    
                     DataRowVersion.Default, null);
             
               cmd.Parameters.Add(null, TdType.IntervalDayToHour, 0,
                     ParameterDirection.Input, true, 0, 0, null,    
                     DataRowVersion.Default, null);
             
               cmd.Parameters.Add(null, TdType.VarChar, 9,
                     ParameterDirection.Input, true, 0, 0, null,    
                     DataRowVersion.Default, model);
             
               row--;
               while(row &gt;= 0)
               {
                  cmd.Parameters[0].Value = leaseReturn[row];
                  cmd.Parameters[1].Value = leaseLen[row];
                  cmd.Parameters[2].Value = model;
             
                  cmd.ExecuteNonQuery();
                  row--;
               }
            }
            </code>
            </example>
            <seealso cref="!:EnableProviderSpecificTypes.html">Enabling Provider Specific Types</seealso>
            <seealso cref="P:Teradata.Client.Provider.TdConnectionStringBuilder.EnableTdIntervals"/> 
            <seealso cref="!:IntervalConnectionString.html">Interval Connection String Attribute</seealso>
            <seealso cref="!:IntervalTypeOverview.html">Provider Specific Type:  Interval Type Overview</seealso>
        </member>
        <member name="F:Teradata.Client.Provider.TdIntervalDayToHour.MaxPrecision">
            <summary>
               A constant representing the maximum number of significant digits in the 
               <see cref="P:Teradata.Client.Provider.TdIntervalDayToHour.Days"/> interval component.
            </summary>
            <remarks>
               The value of this constant is 4.
            </remarks>
        </member>
        <member name="F:Teradata.Client.Provider.TdIntervalDayToHour.MinPrecision">
            <summary>
               A constant representing the minimum number of significant digits in the 
               <see cref="P:Teradata.Client.Provider.TdIntervalDayToHour.Days"/> interval component.
            </summary>
            <remarks>
               The value of this constant is 1.
            </remarks>
        </member>
        <member name="F:Teradata.Client.Provider.TdIntervalDayToHour.Null">
            <summary>
               Gets a Null <see cref="T:Teradata.Client.Provider.TdIntervalDayToHour"/> instance.
            </summary>
            <value>
               Returns a <strong>TdIntervalDayToHour</strong> instance that represents a 
               <strong>Null</strong> value.
            </value>
            <remarks>
               Conceptually it is the constructor for a <strong>Null</strong> instance of 
               <strong>TdIntervalDayToHour</strong>.
            </remarks>
            <example>
            This example shows how to send a <strong>Null</strong> value to a Teradata database.
            <code>
            TdParameter col1 = new TdParameter();
            col1.TdType = TdType.TdIntervalDayToHour;
            col1.Value = TdIntervalDayToHour.Null;
            </code>
            </example>
        </member>
        <member name="F:Teradata.Client.Provider.TdIntervalDayToHour.Zero">
            <summary>
               Gets an <see cref="T:Teradata.Client.Provider.TdIntervalDayToHour"/> instance that contains all zero elements
               for each interval field.
            </summary>
            <remarks>
               A Zero <Strong>TdIntervalDayToHour</Strong> may be used to determine whether
               other instances of intervals represent postive, negative or non-zero intervals.
            </remarks>
            <example>
            This example shows how to determine if an interval is negative.
            <code>
            TdIntervalDayTo Second dthInterval = new TdIntervalDayToHour(0, -1);
            if (dthInterval &lt; TdIntervalDayToHour.Zero)
            {
               Console.WriteLine("The Interval is negative");
            }
            // The output of the console is "The interval is negative"
            </code>
            </example>
        </member>
        <member name="F:Teradata.Client.Provider.TdIntervalDayToHour.MinValue">
            <summary>
               The smallest possible value for <see cref="T:Teradata.Client.Provider.TdIntervalDayToHour"/>.
            </summary>
            <remarks>
               The value is -'9999 23'.
            </remarks>
        </member>
        <member name="F:Teradata.Client.Provider.TdIntervalDayToHour.MaxValue">
            <summary>
               The largest possible value for <see cref="T:Teradata.Client.Provider.TdIntervalDayToHour"/>.
            </summary>
            <remarks>
               The value is '9999 23'.
            </remarks>
        </member>
        <member name="M:Teradata.Client.Provider.TdIntervalDayToHour.#ctor(System.Int32,System.Int32,System.Byte)">
            <summary>
               An instance of <see cref="T:Teradata.Client.Provider.TdIntervalDayToHour"/> is created from a day and time  
               components specified as integers while precision is specified as a byte.
            </summary>
            <remarks>
            <para>
               The number of days, hours and minutes are constructed into a
               <strong>TdIntervalDayToHour</strong> to determine if the <see cref="F:Teradata.Client.Provider.TdIntervalDayToHour.MinValue"/>
               or the <see cref="F:Teradata.Client.Provider.TdIntervalDayToHour.MaxValue"/> values are exceeded.  If the values are not
               exceeded but the resulting days component exceeds the supplied
               <paramref name="precision"/> value, an exception is generated.
            </para>
            <para>
               For example a constructor for TdIntervalDayToHour(444, 4, 2) requests
               444 days and 4 hours with a precision of 2. The resulting days value 
               cannot be represented in 2 digits, therefore an exception is generated,
               even though the <strong>MinValue</strong> and the
               <strong>MaxValue</strong> values have not been exceeded.
            </para>
            <para>
               Negative constructor parameters may be supplied to represent negative durations of time.
               Mixed positive and negative constructor parameters are added together that result in a
               negative or positive <strong>TdIntervalDayToHour</strong>.  For instance, a day
               value of 200, and an hour value of -4900 will result in a <strong>TdIntervalDayToHour</strong>
                interval value of -'4 04'.
            </para>
            </remarks>
            <exception cref="T:System.OverflowException" caption="OverflowException">
               The parameters specify a <strong>TdIntervalDayToHour</strong> value less than 
               <see cref="F:Teradata.Client.Provider.TdIntervalDayToHour.MinValue"/> or greater than <see cref="F:Teradata.Client.Provider.TdIntervalDayToHour.MaxValue"/>.
            </exception>
            <exception cref="T:System.ArgumentOutOfRangeException" caption="ArgumentOutOfRangeException">
               The <strong>precision</strong> parameter is outside the <see cref="F:Teradata.Client.Provider.TdIntervalDayToHour.MinPrecision"/> 
               or <see cref="F:Teradata.Client.Provider.TdIntervalDayToHour.MaxPrecision"/> range of values.
            </exception>
            <exception cref="T:System.ArgumentException" caption="ArgumentException">
               The <strong>precision</strong> parameter is not large enough to represent the 
               number of days.
            </exception>
            <overloads>
               Initializes a new instance of <strong>TdIntervalDayToHour</strong>.
            </overloads>
            <param name="days">Number of days.</param>
            <param name="hours">Number of hours.</param>
            <param name="precision">Number of significant digits of the day.</param>
        </member>
        <member name="M:Teradata.Client.Provider.TdIntervalDayToHour.#ctor(System.Int32,System.Int32)">
            <summary>
               An instance of <see cref="T:Teradata.Client.Provider.TdIntervalDayToHour"/> is created from a day and time  
               components specified as integers.        
            </summary>
            <remarks>
            <para>
               The number of days and hours are constructed into a <strong>TdIntervalDayToHour</strong>
               and evaluated against  <see cref="F:Teradata.Client.Provider.TdIntervalDayToHour.MinValue"/> and <see cref="F:Teradata.Client.Provider.TdIntervalDayToHour.MaxValue"/>.  The 
               <see cref="P:Teradata.Client.Provider.TdIntervalDayToHour.Precision"/> is then calculated from the number of digits contained within
               the interval day component.
            </para>
            <para>
               For example, 99 days and 28 hours is first constructed into a
               <strong>TdIntervalDayToHour</strong>.  The <strong>TdIntervalDayToHour</strong> literal 
               representation results in a <strong>TdIntervalDayToHour</strong> value of 100 days and 
               4 hours within the range of less than or equal to <strong>MaxValue</strong> 
               and greater than or equal to the <strong>MinValue</strong>. Precision is calculated to be a 
               value of 3 representing three significant digits in the day.
            </para>
            <para>
               A day value of 2000 and 200000 hours is first constructed into a
               <strong>TdIntervalDayToHour</strong>. The <strong>TdIntervalDayToHour</strong> literal
                representation results in a <strong>TdIntervalDayToHour</strong> value of 10,333 days 
               and 8 hours exceeding the maximum value of '9999 23'.
            </para>
            <para>
               Negative constructor parameters may be supplied to represent negative durations of time.
               Mixed positive and negative constructor parameters are added together that result in a
               negative or positive <strong>TdIntervalDayToHour</strong>.  For instance, a day
               value of 200, and an hour value of -4900 will result in a <strong>TdIntervalDayToHour</strong>
                interval value of -'4 04' with a calculated precision value of 1.
            </para>
            </remarks>
            <exception cref="T:System.OverflowException" caption="OverflowException">
               The parameters specify a <strong>TdIntervalDayToHour</strong> value less than 
               <see cref="F:Teradata.Client.Provider.TdIntervalDayToHour.MinValue"/> or greater than <see cref="F:Teradata.Client.Provider.TdIntervalDayToHour.MaxValue"/>.
            </exception>
            <param name="days">Number of days.</param>
            <param name="hours">Number of hours.</param>
        </member>
        <member name="M:Teradata.Client.Provider.TdIntervalDayToHour.#ctor(System.TimeSpan)">
            <summary>
               An instance of <see cref="T:Teradata.Client.Provider.TdIntervalDayToHour"/> is created from a <see cref="T:System.TimeSpan"/>.
            </summary>
            <remarks>
            <para>
               The  <see cref="T:System.TimeSpan"/> value is converted into a <strong>TdIntervalDayToHour</strong>
               and evaluated against <see cref="F:Teradata.Client.Provider.TdIntervalDayToHour.MinValue"/> and <see cref="F:Teradata.Client.Provider.TdIntervalDayToHour.MaxValue"/>.  The 
               <see cref="P:Teradata.Client.Provider.TdIntervalDayToHour.Precision"/> is then calculated from the number of digits contained within 
               the interval day component.
            </para>
            <para>
               After conversion of the <strong>TimeSpan</strong> value into a
               <strong>TdIntervalDayToHour</strong>, any minutes, seconds or microseconds will be truncated.
               For example, a TimeSpan value created with a <see cref="P:System.TimeSpan.Ticks"/> value
               of 9378401234567 results in a value of 10 days, 20 hours, 30 minutes and 
               40.1234567 seconds.  The <strong>TdIntervalDayToHour</strong> literal 
               representation results in a <strong>TdIntervalDayToHour</strong> value of  
               '10 20'. The 30 minutes and the 40.1234567 seconds values are truncated. 
               Precision is calculated to be a value of 2 representing two significant digits in the day.
            </para>
            </remarks>
            <exception cref="T:System.OverflowException" caption="OverflowException">
               The <strong>timespan</strong> parameter specifies a <strong>TdIntervalDayToHour</strong> 
               value less than <see cref="F:Teradata.Client.Provider.TdIntervalDayToHour.MinValue"/> or greater than <see cref="F:Teradata.Client.Provider.TdIntervalDayToHour.MaxValue"/>.
            </exception>
            <param name="timeSpan">A TimeSpan to initialize <strong>TdIntervalDayToHour</strong>.</param>
        </member>
        <member name="M:Teradata.Client.Provider.TdIntervalDayToHour.#ctor(System.TimeSpan,System.Byte)">
            <summary>
               An instance of <see cref="T:Teradata.Client.Provider.TdIntervalDayToHour"/> is created using a <see cref="T:System.TimeSpan"/> 
               specifying the day precision as a byte.
            </summary>
            <remarks>
            <para>
               The  <see cref="T:System.TimeSpan"/> value is converted into a <strong>TdIntervalDayToHour</strong>
               and evaluated against <see cref="F:Teradata.Client.Provider.TdIntervalDayToHour.MinValue"/> and <see cref="F:Teradata.Client.Provider.TdIntervalDayToHour.MaxValue"/>.  If the values 
               are not exceeded but the resulting days component exceeds the supplied parameter
                <paramref name="precision"/> value, an exception is generated.
            </para>
            <para>
               After conversion of the <strong>TimeSpan</strong> value into a
               <strong>TdIntervalDayToHour</strong>, any minutes, seconds or microseconds will be 
               truncated. For example, a TimeSpan value created with a <see cref="P:System.TimeSpan.Ticks"/> 
               value of 9378401234567 results in a value of 10 days, 20 hours, 30 minutes and 
               40.1234567 seconds.  The <strong>TdIntervalDayToHour</strong> literal 
               representation results in a <strong>TdIntervalDayToHour</strong> value of  
               '10 20'. The 30 minutes and the 40.1234567 seconds values are truncated. 
            </para>
            </remarks>
            <exception cref="T:System.OverflowException" caption="OverflowException">
               The <strong>timespan</strong> parameter specifies a <strong>TdIntervalDayToHour</strong> 
               value less than <see cref="F:Teradata.Client.Provider.TdIntervalDayToHour.MinValue"/> or greater than <see cref="F:Teradata.Client.Provider.TdIntervalDayToHour.MaxValue"/>.
            </exception>
            <exception cref="T:System.ArgumentOutOfRangeException" caption="ArgumentOutOfRangeException">
               The <strong>precision</strong> parameter is outside the <see cref="F:Teradata.Client.Provider.TdIntervalDayToHour.MinPrecision"/> 
               or <see cref="F:Teradata.Client.Provider.TdIntervalDayToHour.MaxPrecision"/> range of values.
            </exception>
            <exception cref="T:System.ArgumentException" caption="ArgumentException">
               The <strong>precision</strong> parameter is not large enough to represent the 
               number of days.
            </exception>
            <param name="timeSpan">A TimeSpan to initialize <strong>TdIntervalDayToHour</strong>.</param>
            <param name="precision">Number of significant digits of the day.</param>
        </member>
        <member name="M:Teradata.Client.Provider.TdIntervalDayToHour.CompareTo(Teradata.Client.Provider.TdIntervalDayToHour)">
            <summary>
               Compares this instance to the specified <see cref="T:Teradata.Client.Provider.TdIntervalDayToHour"/>  
               parameter <paramref name="other"/>.        
            </summary>
            <returns>
               The result of the comparison is returned as a signed integer.
            </returns>
            <remarks>
            	<para>
                    The integer returned when this instance is compared to <paramref name="other"/>
                    indicates the following:
                </para>
            	<para>
            		<list type="table">
            			<listheader>
            				<term>Return Value</term>
            				<description>Meaning</description>
            			</listheader>
            			<item>
            				<term>Less than Zero</term>
            				<description>
            					<para>
                                    This instance is less than <paramref name="other"/>
                                </para>
            					<para>-or-</para>
            					<para>This instance is <see cref="F:Teradata.Client.Provider.TdIntervalDayToHour.Null"/> and
                                   <paramref name="other"/> is non-null.
                               </para>
            				</description>
            			</item>
            			<item>
            				<term>Zero</term>
            				<description>
            					<para>
                                    This instance is equal to <paramref name="other"/>
                                </para>
            					<para>-or-</para>
            					<para>
                                   This instance is <Strong>Null</Strong> and <paramref name="other"/>
                                    is <Strong>Null</Strong>.
                                </para>
            				</description>
            			</item>
            			<item>
            				<term>Greater than Zero</term>
            				<description>
            					<para>
                                    This instance is greater than
                                    <paramref name="other"/>
                                </para>
            					<para>-or-</para>
            					<para>
            						<paramref name="other"/> is <Strong>Null</Strong> and this instance is non-null.
                                </para>
            				</description>
            			</item>
            		</list>
            	</para>
            </remarks>
            <param name="other">The <strong>TdIntervalDayToHour</strong> to compare.</param>
        </member>
        <member name="M:Teradata.Client.Provider.TdIntervalDayToHour.CompareTo(System.Object)">
            <summary>
               Compares this instance to the specified <see cref="T:Teradata.Client.Provider.TdIntervalDayToHour"/> parameter 
               <paramref name="obj"/>. 
            </summary>
            <returns>
               The result of the comparison is returned as a signed integer.
            </returns>
            <remarks>
            	<para>
                    The integer returned when this instance is compared to <paramref name="obj"/>
                    indicates the following:
                </para>
            	<para>
            		<list type="table">
            			<listheader>
            				<term>Return Value</term>
            				<description>Meaning</description>
            			</listheader>
            			<item>
            				<term>Less than Zero</term>
            				<description>
            					<para>This instance is less than <paramref name="obj"/></para>
            					<para>-or-</para>
            					<para>
                                   This instance is <see cref="F:Teradata.Client.Provider.TdIntervalDayToHour.Null"/> and <paramref name="obj"/> is non-null.
                               </para>
            				</description>
            			</item>
            			<item>
            				<term>Zero</term>
            				<description>
            					<para>
                                    This instance is equal to <paramref name="obj"/>
                                </para>
            					<para>-or-</para>
            					<para>
                                   This instance is <Strong>Null</Strong> and <paramref name="obj"/>
                                    is <Strong>Null</Strong>.
                                </para>
            				</description>
            			</item>
            			<item>
            				<term>Greater than Zero</term>
            				<description>
            					<para>
                                    This instance is greater than <paramref name="obj"/>.
                                </para>
            					<para>-or-</para>
            					<para>
            						<paramref name="obj"/> is <Strong>Null</Strong> and this instance is non-null
                                </para>
            					<para>-or-</para>
            					<para>
            						<paramref name="obj"/> is a <c>null</c> reference.
                                </para>
            				</description>
            			</item>
            		</list>
            	</para>
              <para>
                <paramref name="obj"/> must be an instance of 
                <strong>TdIntervalDayToHour</strong> type or <c>null</c> reference.
               </para>
            </remarks>
            <exception cref="T:System.ArgumentException">
               <paramref name="obj"/> is not of same type as <strong>TdIntervalDayToHour</strong>.
            </exception>
            <seealso cref="M:Teradata.Client.Provider.TdIntervalDayToHour.CompareTo(Teradata.Client.Provider.TdIntervalDayToHour)"/>
            <overloads>
               Compares this instance to the supplied <strong>TdIntervalDayToHour</strong>
                and returns whether this instance is less than, equal or greater than the supplied
               <strong>TdIntervalDayToHour</strong>.
            </overloads>
            <param name="obj">A <strong>TdIntervalDayToHour</strong> object to compare.</param>
        </member>
        <member name="M:Teradata.Client.Provider.TdIntervalDayToHour.Equals(Teradata.Client.Provider.TdIntervalDayToHour)">
            <summary>
               Compares this instance and another <see cref="T:Teradata.Client.Provider.TdIntervalDayToHour"/> to determine 
               whether they are equal. 
            </summary>
            <returns>
               <c>true</c> if the two <strong>TdIntervalDayToHour</strong> objects are equal, 
               <c>false</c> otherwise.
            </returns>
            <remarks>
            	<para>
            		The return value is <c>true</c> if the instance is 
                    equal to the <paramref name="other"/>, <c>false</c> otherwise.
                </para>
            	<para>
            		<list type="table">
            			<listheader>
            				<term>Return Value</term>
            				<description>Description</description>
            			</listheader>
            			<item>
            				<term><c>true</c></term>
                            <description>
                                <para>
                                   This instance and <paramref name="other"/> are <see cref="F:Teradata.Client.Provider.TdIntervalDayToHour.Null"/>
                                </para>
                                <para>-or-</para>
                                <para>This instance is equal to <paramref name="other"/>.</para>
                            </description>
            			</item>
            			<item>
            				<term><c>false</c></term>
                            <description>
                            <para>
                               This instance is <strong>Null</strong> and <paramref name="other"/> 
                               is not <strong>Null</strong>
                            </para>
                            <para>-or-</para>
                            <para>
                               This instance is not <strong>Null</strong> and <paramref name="other"/>
                               is <strong>Null</strong>
                            </para>
                            <para>-or-</para>
                            <para>This instance is not equal to <paramref name="other"/>.</para>
                            </description>
            			</item>
            		</list>
            	</para>
            </remarks>
            <overloads>
               Returns a value indicating whether two instances of 
               <strong>TdIntervalDayToHour</strong> are equal.
            </overloads>
            <param name="other">
               <strong>TdIntervalDayToHour</strong> that will be compared to this instance 
               of <strong>TdIntervalDayToHour</strong>.
            </param>
        </member>
        <member name="M:Teradata.Client.Provider.TdIntervalDayToHour.Equals(Teradata.Client.Provider.TdIntervalDayToHour,Teradata.Client.Provider.TdIntervalDayToHour)">
            <summary>
               Compares two <see cref="T:Teradata.Client.Provider.TdIntervalDayToHour"/> instances to determine 
               whether they are equal.
            </summary>
            <returns>
               <c>true</c> if the two <strong>TdIntervalDayToHour</strong> instances are equal, 
               <c>false</c> otherwise.
            </returns>
            <remarks>
            	<para>
            		The return value is <c>true</c> if the <paramref name="left"/> is 
                    equal to the <paramref name="right"/>, <c>false</c> otherwise.
                </para>
            	<para>
            		<list type="table">
            			<listheader>
            				<term>Return Value</term>
            				<description>Description</description>
            			</listheader>
            			<item>
            				<term><c>true</c></term>
                            <description>
                                <para><paramref name="left"/> is equal to <paramref name="right"/></para>
                                <para>-or-</para>
                                <para>
                                   <paramref name="left"/> and <paramref name="right"/> are <see cref="F:Teradata.Client.Provider.TdIntervalDayToHour.Null"/>.
                                </para>
                            </description>
            			</item>
            			<item>
            				<term><c>false</c></term>
                            <description>
                              <para><paramref name="left"/> is not equal to <paramref name="right"/></para>
                              <para>-or-</para>
                              <para>
                                   <paramref name="left"/> is not <strong>Null</strong> and 
                                   <paramref name="right"/> is <strong>Null</strong>
                              </para>
                              <para>-or-</para>
                              <para>
                                <paramref name="left"/> is <strong>Null</strong> and <paramref name="right"/>
                                is not <strong>Null</strong>.
                              </para>
                            </description>
            			</item>
            		</list>
            	</para>
            </remarks>
            <example>
                The following code example uses various comparison methods and operators.
                <code lang="CS">
            // Create a <strong>TdIntervalDayToHour</strong> with 5 days, 4 hours and default precision
            TdIntervalDayToHour firstInterval = new TdIntervalDayToHour(5, 4);
            // Create a TdIntervalDayToHour with 20 days, 4 hours and default precision
            TdIntervalDayToHour secondInterval = new TdIntervalDayToHour(20, 4);
             
            // The following comparison methods and operators are equivalent
            if (false == TdIntervalDayToHour.Equals(firstInterval, secondInterval) ||
                firstInterval != secondInterval ||
                true == TdIntervalDayToHour.NotEquals(firstInterval, secondInterval) )
            {
               Console.WriteLine(“firstInterval does not equal secondInterval”);
            }
                </code>
            </example>
            <overloads>
               Returns a value indicating whether two instances of 
               <strong>TdIntervalDayToHour</strong> are equal.
            </overloads>
            <param name="left">A <strong>TdIntervalDayToHour</strong> instance.</param>
            <param name="right">A <strong>TdIntervalDayToHour</strong> instance.</param>
        </member>
        <member name="M:Teradata.Client.Provider.TdIntervalDayToHour.Compare(Teradata.Client.Provider.TdIntervalDayToHour,Teradata.Client.Provider.TdIntervalDayToHour)">
            <summary>
                Two <see cref="T:Teradata.Client.Provider.TdIntervalDayToHour"/> intervals are compared and a value is returned 
                that indicates <paramref name="left"/> is greater than, less than or equal to
                <paramref name="right"/>.
            </summary>
            <returns>
               The result of the comparison is returned as a signed integer.
            </returns>
            <remarks>
            	<list type="table">
            		<listheader>
            			<term>Return Value</term>
            			<description>Description</description>
            		</listheader>
            		<item>
            			<term>Less than Zero</term>
            			<description>
                           <para><paramref name="left"/> is less than <paramref name="right"/></para>
            				<para>-or-</para>
                           <para>
                              <paramref name="left"/> is <see cref="F:Teradata.Client.Provider.TdIntervalDayToHour.Null"/>
                              and <paramref name="right"/> is not <strong>Null</strong>.
                           </para>
                        </description>
            		</item>
            		<item>
            			<term>Zero</term>
            			<description>
            				<para><paramref name="left"/> equals <paramref name="right"/></para>
            				<para>-or-</para>
                           <para>
                                <paramref name="left"/> is <strong>Null</strong> 
                                 and <paramref name="right"/> is <strong>Null</strong>.
                           </para>
                        </description>
            		</item>
            		<item>
            			<term>Greater than Zero</term>
            			<description>
            				<para><paramref name="left"/> is greater than <paramref name="right"/></para>
            				<para>-or-</para>
            				<para><paramref name="left"/> is not <strong>Null</strong> and
                            <paramref name="right"/> is <strong>Null</strong>.</para>
                        </description>
            		</item>
            	</list>
            </remarks>
            <param name="left">An instance of <strong>TdIntervalDayToHour</strong>.</param>
            <param name="right">An instance of <strong>TdIntervalDayToHour</strong>.</param>
        </member>
        <member name="M:Teradata.Client.Provider.TdIntervalDayToHour.NotEquals(Teradata.Client.Provider.TdIntervalDayToHour,Teradata.Client.Provider.TdIntervalDayToHour)">
            <summary>
                Compares two <see cref="T:Teradata.Client.Provider.TdIntervalDayToHour"/> interval types to determine whether the
                <paramref name="left"/> is not equal to <paramref name="right"/>.
            </summary>
            <returns>
            	<para>
            		<c>true</c> indicates <paramref name="left"/> is not equal to
                    <paramref name="right"/>, <c>false</c> otherwise.
                </para>
            	<para>
            		<list type="table">
            			<listheader>
            				<term>Return Value</term>
            				<description>Description</description>
            			</listheader>
            			<item>
            				<term><c>true</c></term>
            				<description>
            					<para>
            						<paramref name="left"/> is less than or greater
                                    than <paramref name="right"/>
            					</para>
            					<para>-or-</para>
            					<para>
            						Either <paramref name="left"/> or <paramref name="right"/> is
                                   <see cref="F:Teradata.Client.Provider.TdIntervalDayToHour.Null"/>.
                               </para>
            				</description>
            			</item>
            			<item>
            				<term><c>false</c></term>
            				<description>
            					<para>
            						<paramref name="left"/> is equal to
                                    <paramref name="right"/>
            					</para>
            					<para>-or-</para>
            					<para>
            						<paramref name="left"/> and <paramref name="right"/> are
                                   <strong>Null</strong>.
                               </para>
            				</description>
            			</item>
            		</list>
            	</para>
            </returns>
            <param name="left">An instance of <strong>TdIntervalDayToHour</strong>.</param>
            <param name="right">An instance of <strong>TdIntervalDayToHour</strong>.</param>
        </member>
        <member name="M:Teradata.Client.Provider.TdIntervalDayToHour.GreaterThan(Teradata.Client.Provider.TdIntervalDayToHour,Teradata.Client.Provider.TdIntervalDayToHour)">
            <summary>
               Determines whether the <paramref name="left"/> is greater than the <paramref name="right"/>.
            </summary>
            <returns>
            	<para>
            		<c>true</c> indicates the <paramref name="left"/> is greater than
                    the <paramref name="right"/>, <c>false</c> otherwise.
                </para>
            	<para>
            		<list type="table">
            			<listheader>
            				<term>Return Value</term>
            				<description>Description</description>
            			</listheader>
            			<item>
            				<term><c>true</c></term>
            				<description>
            					<paramref name="left"/> and
                                <paramref name="right"/> are not
                                <see cref="F:Teradata.Client.Provider.TdIntervalDayToHour.Null"/> and
                                <paramref name="left"/> is greater than
                                <paramref name="right"/>.
            				</description>
            			</item>
            			<item>
            				<term><c>false</c></term>
            				<description>
            					<para>
                                    The <paramref name="left"/> is less than or equal
                                    to <paramref name="right"/>
            					</para>
            					<para>-or-</para>
            					<para>
                                   <paramref name="left"/> and / or <paramref name="right"/>
                                   is <strong>Null</strong>.
                                </para>
            				</description>
            			</item>
            		</list>
            	</para>
            </returns>
            <remarks>
            	<para>
                    Comparison operators always return <c>false</c> if one of the operands is
                    <strong>Null</strong>. Therefore you should not assume that the reverse
                    condition is <c>true</c>. For example you cannot assume that the
                    <paramref name="left"/> is less than or equal to the
                    <paramref name="right"/> if <c>GreaterThan</c> returns <c>false</c>.
                </para>
            	<para>
                    The reverse condition is <c>true</c> when the
                    <paramref name="left"/> and the
                    <paramref name="right"/> are not <strong>Null</strong>.
                </para>
            </remarks>
            <param name="left">
               An instance of <see cref="T:Teradata.Client.Provider.TdIntervalDayToHour"/>.
            </param>
            <param name="right">
               An instance of <strong>TdIntervalDayToHour</strong>.
            </param>
        </member>
        <member name="M:Teradata.Client.Provider.TdIntervalDayToHour.GreaterThanOrEqual(Teradata.Client.Provider.TdIntervalDayToHour,Teradata.Client.Provider.TdIntervalDayToHour)">
            <summary>
               This operator determines whether the <paramref name="left"/> is greater than or 
               equal to the <paramref name="right"/>.
            </summary>
            <returns>
            	<para>
            		<c>true</c> indicates the <paramref name="left"/> is greater than
                    or equal to the <paramref name="right"/>, <c>false</c> otherwise.
                </para>
            	<para>
            		<list type="table">
            			<listheader>
            				<term>Return Value</term>
            				<description>Description</description>
            			</listheader>
            			<item>
            				<term><c>true</c></term>
            				<description>
            					<para>
            						<paramref name="left"/> and
                                    <paramref name="right"/> are not
                                    <see cref="F:Teradata.Client.Provider.TdIntervalDayToHour.Null"/> and
                                    <paramref name="left"/> is greater than or equal
                                    to <paramref name="right"/>
            					</para>
            					<para>-or-</para>
            					<para>
            						<paramref name="left"/> is <strong>Null</strong>
                                    and <paramref name="right"/> is
                                    <strong>Null</strong>.
            					</para>
            				</description>
            			</item>
            			<item>
            				<term><c>false</c></term>
            				<description>
            					<para>
                                    The <paramref name="left"/> is less than
                                    <paramref name="right"/>
            					</para>
            					<para>-or-</para>
            					<para>
                                    Either <paramref name="left"/> or
                                    <paramref name="right"/> is <strong>Null</strong>.
            					</para>
            				</description>
            			</item>
            		</list>
            	</para>
            </returns>
            <remarks>
            	<para>
                    Comparison operators always return <c>false</c> if one of the operands is
                    <strong>Null</strong>. Therefore you should not assume that the reverse
                    condition is <c>true</c>. For example you cannot assume that the
                    <paramref name="left"/> is less than the
                    <paramref name="right"/> if the <c>GreaterThanOrEqual</c> method returns
                    <c>false</c>.
                </para>
            	<para>
                    The reverse condition is <c>true</c> when the
                    <paramref name="left"/> and the
                    <paramref name="right"/> are not <strong>Null</strong>.
                </para>
            </remarks>
            <param name="left">An instance of <see cref="T:Teradata.Client.Provider.TdIntervalDayToHour"/>.</param>
            <param name="right">An instance of <strong>TdIntervalDayToHour</strong>.</param>
        </member>
        <member name="M:Teradata.Client.Provider.TdIntervalDayToHour.LessThan(Teradata.Client.Provider.TdIntervalDayToHour,Teradata.Client.Provider.TdIntervalDayToHour)">
            <summary>
               This method determines whether the <paramref name="left"/> is less than the 
               <paramref name="right"/>.
            </summary>
            <returns>
            	<para>
            		<c>true</c> indicates the <paramref name="left"/> is less than
                    the <paramref name="right"/>, <c>false</c> otherwise.
                </para>
            	<para>
            		<list type="table">
            			<listheader>
            				<term>Return Value</term>
            				<description>Description</description>
            			</listheader>
            			<item>
            				<term><c>true</c></term>
            				<description>
            					<paramref name="left"/> and <paramref name="right"/> are
                                not <see cref="F:Teradata.Client.Provider.TdIntervalDayToHour.Null"/> and
                                <paramref name="left"/> is less than
                                <paramref name="right"/>.
            				</description>
            			</item>
            			<item>
            				<term><c>false</c></term>
            				<description>
            					<para>
                                    The <paramref name="left"/> is greater than or
                                    equal to <paramref name="right"/>
            					</para>
            					<para>-or-</para>
            					<para>
                                    <paramref name="left"/> and / or <paramref name="right"/> is
                                    <strong>Null</strong>.
            					</para>
            				</description>
            			</item>
            		</list>
            	</para>
            </returns>
            <remarks>
            	<para>
                    Comparison operators always return <c>false</c> if one of the operands is
                    <strong>Null</strong>. Therefore you should not assume that the reverse
                    condition is <c>true</c>. For example you cannot assume that the
                    <paramref name="left"/> is greater than or equal to the
                    <paramref name="right"/> if the <c>LessThan</c> method returns
                    <c>false</c>.
                </para>
            	<para>
                    The reverse condition is <c>true</c> when the
                    <paramref name="left"/> and the
                    <paramref name="right"/> are not <strong>Null</strong>.
                </para>
            </remarks>
            <param name="left">An instance of <see cref="T:Teradata.Client.Provider.TdIntervalDayToHour"/>.</param>
            <param name="right">An instance of <strong>TdIntervalDayToHour</strong>.</param>
        </member>
        <member name="M:Teradata.Client.Provider.TdIntervalDayToHour.LessThanOrEqual(Teradata.Client.Provider.TdIntervalDayToHour,Teradata.Client.Provider.TdIntervalDayToHour)">
            <summary>
                This method determines whether the <paramref name="left"/> is less
                than or equal to the <paramref name="right"/>.
            </summary>
            <returns>
            	<para>
            		<c>true</c> indicates the <paramref name="left"/> is less than or
                    equal to the <paramref name="right"/>, <c>false</c> otherwise.
                </para>
            	<para>
            		<list type="table">
            			<listheader>
            				<term>Return Value</term>
            				<description>Description</description>
            			</listheader>
            			<item>
            				<term><c>true</c></term>
            				<description>
            					<para>
            						<paramref name="left"/> and
                                    <paramref name="right"/> are not
                                    <see cref="F:Teradata.Client.Provider.TdIntervalDayToHour.Null"/> and
                                    <paramref name="left"/> is less than or equal to
                                    <paramref name="right"/>
            					</para>
            					<para>-or-</para>
            					<para>
            						<paramref name="left"/> is <strong>Null</strong>
                                    and <paramref name="right"/> is
                                    <strong>Null</strong>.
            					</para>
            				</description>
            			</item>
            			<item>
            				<term><c>false</c></term>
            				<description>
            					<para>
                                    The <paramref name="left"/> is greater than
                                    <paramref name="right"/>
            					</para>
            					<para>-or-</para>
            					<para>
                                    Either <paramref name="left"/> or
                                    <paramref name="right"/> is <strong>Null</strong>.
            					</para>
            				</description>
            			</item>
            		</list>
            	</para>
            </returns>
            <remarks>
            	<para>
                    Comparison operators always return <c>false</c> if one of the operands is
                    <strong>Null</strong>. Therefore you should not assume that the reverse
                    condition is <c>true</c>. For example you cannot assume that the
                    <paramref name="left"/> is greater than the
                    <paramref name="right"/> if the <c>LessThanOrEqual</c> method returns
                    <c>false</c>.
                </para>
            	<para>
                    The reverse condition is <c>true</c> when the
                    <paramref name="left"/> and the
                    <paramref name="right"/> are not <strong>Null</strong>.
                </para>
            </remarks>
            <param name="left">An instance of <see cref="T:Teradata.Client.Provider.TdIntervalDayToHour"/>.</param>
            <param name="right">An instance of <strong>TdIntervalDayToHour</strong>.</param>
        </member>
        <member name="M:Teradata.Client.Provider.TdIntervalDayToHour.Equals(System.Object)">
            <summary>
               Compares this instance and <paramref name="obj"/> to determine whether they
               are equal. 
            </summary>
            <returns>
               <c>true</c> if the two <see cref="T:Teradata.Client.Provider.TdIntervalDayToHour"/>s are equal, 
               <c>false</c> otherwise.
            </returns>
            <remarks>
            	<para>
                    The return value is <c>true</c> if the instance is equal to the
                    <paramref name="obj"/>, <c>false</c> otherwise.
                </para>
            	<para>
            		<list type="table">
            			<listheader>
            				<term>Return Value</term>
            				<description>Description</description>
            			</listheader>
            			<item>
            				<term>
            					<c>true</c>
            				</term>
            				<description>
            					<para>
                                    This instance and <paramref name="obj"/> are
                                    <see cref="F:Teradata.Client.Provider.TdIntervalDayToHour.Null"/>.
                                </para>
            					<para>-or-</para>
            					<para>
                                    This instance is equal to <paramref name="obj"/>.
                                </para>
            				</description>
            			</item>
            			<item>
            				<term>
            					<c>false</c>
            				</term>
            				<description>
            					<para>
                                    This instance is not equal to
                                    <paramref name="obj"/>.
                                </para>
            					<para>-or-</para>
            					<para>
                                    This instance is not <strong>Null</strong> and
                                    <paramref name="obj"/> is <strong>Null</strong>.
                                </para>
            					<para>-or-</para>
            					<para>
                                    This instance is <strong>Null</strong> and
                                    <paramref name="obj"/> is not <strong>Null</strong>
            					</para>
            					<para>-or-</para>
            					<para>
            						<paramref name="obj"/> is a <strong>null</strong>
                                    reference.
                                </para>
            				</description>
            			</item>
            		</list>
            	</para>
            </remarks>
            <example>
                The following code example uses various comparison methods and operators.
                <code lang="CS">
            // Create TdIntervalDayToHour with 5 days, 1 hour and default precision
            TdIntervalDayToHour firstInterval = new TdIntervalDayToHour(5, 1);
            // Create TdIntervalDayToHour with 20 days, 2 hours and default precision
            Object intervalObj = new TdIntervalDayToHour(20, 2);
             
            // The following comparison methods and operators are equivalent
            if (false == TdIntervalDayToHour.Equals(firstInterval, (TdIntervalDayToHour)intervalObj) ||
                firstInterval != (TdIntervalDayToHour)intervalObj ||
                false == firstInterval.Equals(intervalObj) )
            {
               Console.WriteLine(“firstInterval does not equal intervalObj”);
            }
                </code>
            </example>
            <overloads>
               Returns a value indicating whether two instances of <strong>TdIntervalDayToHour</strong> 
               are equal.
            </overloads>
            <param name="obj">
               <strong>TdIntervalDayToHour</strong> that will be compared to this instance 
               of <strong>TdIntervalDayToHour</strong>.
            </param>
        </member>
        <member name="M:Teradata.Client.Provider.TdIntervalDayToHour.GetHashCode">
            <summary>
                Returns the hash code for this instance. 
            </summary>
            <returns>The hash code is returned.</returns>
        </member>
        <member name="M:Teradata.Client.Provider.TdIntervalDayToHour.ToString(System.String)">
            <summary>
               Converts this instance to its equivalent String representation using the specified format.
            </summary>
            <remarks>
            	<para>This method supports the following format specifiers:</para>
            	<para>
            		<list type="table">
            			<listheader>
            				<term>Format Specifier</term>
            				<description>Description</description>
            			</listheader>
            			<item>
            				<term>G</term>
            				<description>
            					<para>General interval format.</para>
            					<para>[sign][days] [hh]</para>
            				</description>
            			</item>
            			<item>
            				<term>L</term>
            				<description>
            					<para>Teradata literal format. This string may be used in
                                generating SQL against the Teradata database.</para>
            					<para>INTERVAL [sign]'[days] [hh]' DAY TO HOUR</para>
            				</description>
            			</item>
            		</list>
            	</para>
            	<para>Below is the description of each format item.</para>
            	<para>
            		<list type="table">
            			<listheader>
            				<term>Format Item</term>
            				<description>Description</description>
            			</listheader>
            			<item>
            				<term>sign</term>
            				<description>If negative a minus sign will be displayed.</description>
            			</item>
            			<item>
            				<term>days</term>
            				<description>The number of days (one to four digits in
                            length).</description>
            			</item>
            			<item>
            				<term>hh</term>
            				<description>The number of hours from 00 - 23.</description>
            			</item>
            		</list>
            	</para>
            	<para>
                    The <paramref name="format"/> is not used, as cultural settings are
                    not supported.
                </para>
            </remarks>
            <returns>
               A string representation of the <strong>TdIntervalDayToHour</strong> will be returned.
            </returns>
            <exception cref="T:System.FormatException" caption="FormatException">
               <paramref name="format"/> contains an invalid format specifier.
            </exception>
            <param name="format">
               The format string that will be used to format the <strong>TdIntervalDayToHour</strong>.
            </param>
        </member>
        <member name="M:Teradata.Client.Provider.TdIntervalDayToHour.ToString">
            <summary>
               Converts this instance to its equivalent String representation.
            </summary>
            <remarks>
               <para>The string returned will follow this format:</para>
            	<para>[sign][days][space character][hh]</para>
            	<para>Below is the description of each format item.</para>
            	<para>
            		<list type="table">
            			<listheader>
            				<term>Format Item</term>
            				<description>Description</description>
            			</listheader>
            			<item>
            				<term>sign</term>
            				<description>If negative a minus sign will be displayed.</description>
            			</item>
            			<item>
            				<term>days</term>
            				<description>The number of days (one to four digits in
                            length).</description>
            			</item>
            			<item>
            				<term>hh</term>
            				<description>The number of hours from 00 - 23.</description>
            			</item>
            		</list>
            	</para>
            	<para>
                    Culture settings are not supported.
            	</para>
            </remarks>
            <returns>
               A string representation of the <strong>TdIntervalDayToHour</strong> will be returned.
            </returns>
        </member>
        <member name="M:Teradata.Client.Provider.TdIntervalDayToHour.Parse(System.String)">
            <summary>
               The specified string is converted into an equivalent <see cref="T:Teradata.Client.Provider.TdIntervalDayToHour"/>.
            </summary>
            <returns>
               A <strong>TdIntervalDayToHour</strong> is returned that is equivalent to the  
               <strong>TdIntervalDayToHour</strong> contained in the input string.
            </returns>
            <exception cref="T:System.FormatException" caption="FormatException">
               <paramref name="value"/> cannot be converted into a 
               <strong>TdIntervalDayToHour</strong> interval.
            </exception>
            <exception cref="T:System.ArgumentNullException" caption="ArgumentNullException">
               <paramref name="value"/> is a <c>null</c> reference.
            </exception>
            <exception cref="T:System.OverflowException">
               The resultant operation returns a value greater than the <see cref="F:Teradata.Client.Provider.TdIntervalDayToHour.MaxValue"/> 
               or less than the <see cref="F:Teradata.Client.Provider.TdIntervalDayToHour.MinValue"/>.
            </exception>
            <remarks>
            	<para>This method supports the following string formats:</para>
            	<para>
            		<list type="table">
            			<listheader>
            				<term>String Format</term>
            				<description>Description</description>
            			</listheader>
            			<item>
            				<term>General interval format.</term>
            				<description>
            					<para>[sign][days] [hh]</para>
            				</description>
            			</item>
            			<item>
            				<term>Teradata literal format. This string may be used in
                                generating SQL against the Teradata database.</term>
            				<description>
            					<para>INTERVAL [sign]'[days] [hh]' DAY TO HOUR</para>
            				</description>
            			</item>
            		</list>
            	</para>
            	<para>Below is the description of each format item.</para>
            	<para>
            		<list type="table">
            			<listheader>
            				<term>Format Item</term>
            				<description>Description</description>
            			</listheader>
            			<item>
            				<term>sign</term>
            				<description>If negative a minus sign will be displayed.</description>
            			</item>
            			<item>
            				<term>days</term>
            				<description>The number of days (one to four digits in
                            length).</description>
            			</item>
            			<item>
            				<term>hh</term>
            				<description>The number of hours from 00 - 23.</description>
            			</item>
            		</list>
            	</para>
            	<para>
                    Cultural settings are not supported.
            	</para>
            	<para>
            		While parsing the <paramref name="value"/> the <see cref="P:Teradata.Client.Provider.TdIntervalDayToHour.Precision"/> will be
            		set to the number of digits contained within the day component. 
            	</para>
            	<para>
            		For example a <paramref name="value"/> of "100 10" will
            		contain a precision of 3.
            	</para>
            </remarks>
            <overloads>
            	The specified string is converted into an equivalent <strong>TdIntervalDayToHour</strong>
                interval.
            </overloads>
            <param name="value">A string to be converted into a <strong>TdIntervalDayToHour</strong>.</param>
        </member>
        <member name="M:Teradata.Client.Provider.TdIntervalDayToHour.TryParse(System.String,Teradata.Client.Provider.TdIntervalDayToHour@)">
            <summary>
               The specified string is converted into an equivalent <see cref="T:Teradata.Client.Provider.TdIntervalDayToHour"/>. 
            </summary>
            <returns>
                <c>true</c> if the conversion of <paramref name="value"/> succeeded, 
                <c>false</c> otherwise.
            </returns>
            <remarks>
            	<para>This method supports the following string formats:</para>
            	<para>
            		<list type="table">
            			<listheader>
            				<term>String Format</term>
            				<description>Description</description>
            			</listheader>
            			<item>
            				<term>General interval format.</term>
            				<description>
            					<para>[sign][days] [hh]</para>
            				</description>
            			</item>
            			<item>
            				<term>Teradata literal format. This string may be used in
                                generating SQL against the Teradata database.</term>
            				<description>
            					<para>INTERVAL [sign]'[days] [hh]' DAY TO HOUR</para>
            				</description>
            			</item>
            		</list>
            	</para>
            	<para>Below is the description of each format item.</para>
            	<para>
            		<list type="table">
            			<listheader>
            				<term>Format Item</term>
            				<description>Description</description>
            			</listheader>
            			<item>
            				<term>sign</term>
            				<description>If negative a minus sign will be displayed.</description>
            			</item>
            			<item>
            				<term>days</term>
            				<description>The number of days (one to four digits in
                            length).</description>
            			</item>
            			<item>
            				<term>hh</term>
            				<description>The number of hours from 00 - 23.</description>
            			</item>
            		</list>
            	</para>
            	<para>
                    Cultural settings are not supported.
            	</para>
            	<para>
            		While parsing the <paramref name="value"/> the <see cref="P:Teradata.Client.Provider.TdIntervalDayToHour.Precision"/> will be
            		set to the number of digits contained within the day component.  
            	</para>
            	<para>
            		For example a <paramref name="value"/> of "100 10" will
            		contain a precision of 3.
            	</para>
            </remarks>
            <overloads>
               The specified string is converted into an equivalent 
               <see cref="T:Teradata.Client.Provider.TdIntervalDayToHour"/> interval.  A <c>true</c> is returned 
               if the conversion succeeded, <c>false</c> otherwise.
            </overloads>
            <param name="value">
               A string to be converted into a <strong>TdIntervalDayToHour</strong>.
            </param>
            <param name="result">
               The converted string into a <strong>TdIntervalDayToHour</strong>.
            </param>
        </member>
        <member name="M:Teradata.Client.Provider.TdIntervalDayToHour.GetXmlSchema(System.Xml.Schema.XmlSchemaSet)">
             <summary>
                Gets the XML Qualified name for <see cref="T:Teradata.Client.Provider.TdIntervalDayToHour"/> XML type mapping.
             </summary>
             <param name="xmlSchemaSet">
                Holds zero or more XML Schema definition language (XSD) schemas.
             </param>
             <returns>
                Returns <strong>xs:duration</strong>.
             </returns>
             <example>
             This example shows how to use the <strong>TdIntervalDayToHour</strong> with 
             <see cref="T:System.Xml.Serialization.XmlSerializer"/> class. <see cref="T:System.Xml.Serialization.XmlElementAttribute"/> is used to 
              indicate that the Teradata Database column can be <strong>Null</strong>.
             <code>
              public class Order
              {
                  public TdTimestamp Date;
             
                  public TdIntervalDayToHour ExpirationPeriod;
             
                  public TdTimestamp ExpirationDate;
            
                  public Int32 ProductId;
            
                  public Int32 Quantity;
            
                  public Int32? BackOrderQuantity;
            
                  [XmlElementAttribute(IsNullable = true)]        
                  public TdDecimal BackOrderPrice;
              }
             
              internal class OrderWriter
              {
              
                  public static void Write()
                  {
                      // Setup the order
                      Order x = new Order();
              
                      x.Date = new TdTimestamp(DateTime.Today);
                      // 5 days 4 hours
                      x.ExpirationPeriod = new TdIntervalDayToHour(5, 4);
                      x.ExpirationDate = x.Date + x.ExpirationPeriod;
                      x.ProductId = 100;
                      x.Quantity = 2000;
                      x.BackOrderQuantity = null;
                      x.BackOrderPrice = TdDecimal.Null;
            
                      // Write out today's orders to the file.
                      //
                      // Open the file.
                      XmlWriterSettings settings = new XmlWriterSettings();
                      settings.Indent = true;
                      XmlWriter writer = XmlWriter.Create(@"C:\Temp\TodayOrders.XML", settings);
                      writer.WriteStartElement("TodayOrders");
                
                      // Write out the schema.
                      XmlSchemas schemas = new XmlSchemas();
                      XmlSchemaExporter schExporter = new XmlSchemaExporter(schemas);
                      schExporter.ExportTypeMapping(new XmlReflectionImporter().ImportTypeMapping(typeof(Order)));
                      schemas[0].Write(writer);
            
                      // Write out the orders.
                      XmlSerializer xml = new XmlSerializer(typeof(Order));
                      xml.Serialize(writer, x);
              
                      // Close the document.
                      writer.WriteEndDocument();
                      writer.Close();
                  }
              }
             
              /* Output is:
             
              &lt;TodayOrders&gt;
                &lt;xs:schema elementFormDefault="qualified" xmlns:xs="http://www.w3.org/2001/XMLSchema"&gt;
                  &lt;xs:element name="Order" nillable="true" type="Order" /&gt;
                  &lt;xs:complexType name="Order"&gt;
                    &lt;xs:sequence&gt;
                      &lt;xs:element minOccurs="1" maxOccurs="1" name="Date" type="xs:dateTime" /&gt;
                      &lt;xs:element minOccurs="1" maxOccurs="1" name="ExpirationPeriod" type="xs:duration" /&gt;
                      &lt;xs:element minOccurs="1" maxOccurs="1" name="ExpirationDate" type="xs:dateTime" /&gt;
                      &lt;xs:element minOccurs="1" maxOccurs="1" name="ProductId" type="xs:int" /&gt;
                      &lt;xs:element minOccurs="1" maxOccurs="1" name="Quantity" type="xs:int" /&gt;
                      &lt;xs:element minOccurs="1" maxOccurs="1" name="BackOrderQuantity" nillable="true" type="xs:int" /&gt;
                      &lt;xs:element minOccurs="1" maxOccurs="1" name="BackOrderPrice" nillable="true" type="xs:decimal" /&gt;
                    &lt;/xs:sequence&gt;
                  &lt;/xs:complexType&gt;
                &lt;/xs:schema&gt;
                &lt;Order xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xmlns:xsd="http://www.w3.org/2001/XMLSchema"&gt;
                  &lt;Date&gt;2008-02-01T00:00:00-08:00&lt;/Date&gt;
                  &lt;ExpirationPeriod&gt;P5DT4H&lt;/ExpirationPeriod&gt;
                  &lt;ExpirationDate&gt;2008-02-06T04:00:00-08:00&lt;/ExpirationDate&gt;
                  &lt;ProductId&gt;100&lt;/ProductId&gt;
                  &lt;Quantity&gt;2000&lt;/Quantity&gt;
                  &lt;BackOrderQuantity xsi:nil="true" /&gt;
                  &lt;BackOrderPrice xsi:nil="true" /&gt;
                &lt;/Order&gt;
              &lt;/TodayOrders&gt;
             
              */
             </code>
             </example>        
        </member>
        <member name="M:Teradata.Client.Provider.TdIntervalDayToHour.op_Addition(Teradata.Client.Provider.TdIntervalDayToHour,Teradata.Client.Provider.TdIntervalDayToHour)">
            <summary>
               A <see cref="T:Teradata.Client.Provider.TdIntervalDayToHour"/> is added to another <strong>TdIntervalDayToHour</strong>.
            </summary>
            <returns>
               A new <strong>TdIntervalDayToHour</strong> as the result of adding a 
               <strong>TdIntervalDayToHour</strong> to another 
               <strong>TdIntervalDayToHour</strong>.
            </returns>
            <remarks>
            <para>
               If either parameter is <strong>Null</strong> a <see cref="F:Teradata.Client.Provider.TdIntervalDayToHour.Null"/> will be returned.
            </para>
            <para>
               The returned <strong>TdIntervalDayToHour</strong> will contain a precision 
               set to the <see cref="F:Teradata.Client.Provider.TdIntervalDayToHour.MaxPrecision"/>.
            </para>        
            </remarks>
            <exception cref="T:System.OverflowException">
               The resultant operation returns a value greater than the <see cref="F:Teradata.Client.Provider.TdIntervalDayToHour.MaxValue"/> 
               or less than the <see cref="F:Teradata.Client.Provider.TdIntervalDayToHour.MinValue"/>.
            </exception>
            <param name="left">A <strong>TdIntervalDayToHour</strong>.</param>
            <param name="right">A <strong>TdIntervalDayToHour</strong>.</param>
        </member>
        <member name="M:Teradata.Client.Provider.TdIntervalDayToHour.op_Subtraction(Teradata.Client.Provider.TdIntervalDayToHour,Teradata.Client.Provider.TdIntervalDayToHour)">
            <summary>
               A <see cref="T:Teradata.Client.Provider.TdIntervalDayToHour"/> is subtracted from another <strong>TdIntervalDayToHour</strong>.
            </summary>
            <returns>
               A new <strong>TdIntervalDayToHour</strong> as the result 
               of subtracting <paramref name="right"/> from the <paramref name="left"/>.
            </returns>
            <remarks>
            <para>
               If either parameter is <strong>Null</strong> a <see cref="F:Teradata.Client.Provider.TdIntervalDayToHour.Null"/> will be returned.
            </para>
            <para>
               The returned <strong>TdIntervalDayToHour</strong> will contain a precision  
               set to the <see cref="F:Teradata.Client.Provider.TdIntervalDayToHour.MaxPrecision"/>.
            </para>        
            </remarks>
            <exception cref="T:System.OverflowException">
               The resultant operation returns a value greater than the <see cref="F:Teradata.Client.Provider.TdIntervalDayToHour.MaxValue"/> 
               or less than the <see cref="F:Teradata.Client.Provider.TdIntervalDayToHour.MinValue"/>.
            </exception>
            <param name="left">A <strong>TdIntervalDayToHour</strong> to subtract from.</param>
            <param name="right">A <strong>TdIntervalDayToHour</strong> to subtract.</param>
        </member>
        <member name="M:Teradata.Client.Provider.TdIntervalDayToHour.op_Multiply(Teradata.Client.Provider.TdIntervalDayToHour,System.Int32)">
            <summary>
               A <see cref="T:Teradata.Client.Provider.TdIntervalDayToHour"/> is multiplied by an integer value.
            </summary>
            <remarks>
            <para>
               If <paramref name="interval"/> is <see cref="F:Teradata.Client.Provider.TdIntervalDayToHour.Null"/> a <strong>Null</strong> will be returned.
            </para>
            <para>
               The returned <strong>TdIntervalDayToHour</strong> will contain a precision 
               set to the <see cref="F:Teradata.Client.Provider.TdIntervalDayToHour.MaxPrecision"/>.
            </para>
            </remarks>
            <returns>
               A new <strong>TdIntervalDayToHour</strong> as the result of multiplying a 
               <strong>TdIntervalDayToHour</strong> and an integer value.
            </returns>        
            <exception cref="T:System.OverflowException">
               The resultant operation returns a value greater than the <see cref="F:Teradata.Client.Provider.TdIntervalDayToHour.MaxValue"/> 
               or less than the <see cref="F:Teradata.Client.Provider.TdIntervalDayToHour.MinValue"/>.
            </exception>
            <param name="interval">A <strong>TdIntervalDayToHour</strong>.</param>
            <param name="value">A multiplier.</param>
        </member>
        <member name="M:Teradata.Client.Provider.TdIntervalDayToHour.op_Multiply(System.Int32,Teradata.Client.Provider.TdIntervalDayToHour)">
            <summary>
               A <see cref="T:Teradata.Client.Provider.TdIntervalDayToHour"/> is multiplied by an integer value.
            </summary>
            <remarks>
            <para>
               If <paramref name="interval"/> is <see cref="F:Teradata.Client.Provider.TdIntervalDayToHour.Null"/> a <strong>Null</strong> will be returned.
            </para>
            <para>
               The returned <strong>TdIntervalDayToHour</strong> will contain a precision 
               set to the <see cref="F:Teradata.Client.Provider.TdIntervalDayToHour.MaxPrecision"/>.
            </para>
            </remarks>
            <returns>
               A new <strong>TdIntervalDayToHour</strong> as the result of multiplying a 
               <strong>TdIntervalDayToHour</strong> and an integer value.
            </returns>        
            <exception cref="T:System.OverflowException">
               The resultant operation returns a value greater than the <see cref="F:Teradata.Client.Provider.TdIntervalDayToHour.MaxValue"/> 
               or less than the <see cref="F:Teradata.Client.Provider.TdIntervalDayToHour.MinValue"/>.
            </exception>
            <param name="value">A multiplier.</param>
            <param name="interval">A <strong>TdIntervalDayToHour</strong>.</param>
        </member>
        <member name="M:Teradata.Client.Provider.TdIntervalDayToHour.op_Division(Teradata.Client.Provider.TdIntervalDayToHour,System.Int32)">
            <summary>
               A <see cref="T:Teradata.Client.Provider.TdIntervalDayToHour"/> is divided by an integer value.
            </summary>
            <remarks>
            <para>
               If <paramref name="interval"/> is <see cref="F:Teradata.Client.Provider.TdIntervalDayToHour.Null"/> a <strong>Null</strong> will be returned.
            </para>
            <para>
               The returned <strong>TdIntervalDayToHour</strong> will contain a precision 
               which matches the precision of the <strong>interval</strong> parameter.
            </para>
            </remarks>
            <returns>
               A new <strong>TdIntervalDayToHour</strong> as the result of dividing a 
               <strong>TdIntervalDayToHour</strong> and an integer value.
            </returns>        
            <exception cref="T:System.DivideByZeroException">
               The <paramref name="value"/> divisor cannot be 0.
            </exception>
            <param name="interval">A <strong>TdIntervalDayToHour</strong>.</param>
            <param name="value">A divisor.</param>
        </member>
        <member name="M:Teradata.Client.Provider.TdIntervalDayToHour.Add(Teradata.Client.Provider.TdIntervalDayToHour,Teradata.Client.Provider.TdIntervalDayToHour)">
            <summary>
               Calculates the sum of two <see cref="T:Teradata.Client.Provider.TdIntervalDayToHour"/> operands.
            </summary>
            <returns>
               A <strong>TdIntervalDayToHour</strong> containing the sum.
            </returns>
            <remarks>
            <para>
               If either parameter is <strong>Null</strong> a <see cref="F:Teradata.Client.Provider.TdIntervalDayToHour.Null"/> will be returned.
            </para>
            <para>
               The returned <strong>TdIntervalDayToHour</strong> will contain a precision 
               set to the <see cref="F:Teradata.Client.Provider.TdIntervalDayToHour.MaxPrecision"/>.
            </para>
            </remarks>
            <exception cref="T:System.OverflowException">
               The resultant operation returns a value greater than the <see cref="F:Teradata.Client.Provider.TdIntervalDayToHour.MaxValue"/> 
               or less than the <see cref="F:Teradata.Client.Provider.TdIntervalDayToHour.MinValue"/>.
            </exception>
            <param name="left">A <strong>TdIntervalDayToHour</strong>.</param>
            <param name="right">A <strong>TdIntervalDayToHour</strong>.</param>
        </member>
        <member name="M:Teradata.Client.Provider.TdIntervalDayToHour.Subtract(Teradata.Client.Provider.TdIntervalDayToHour,Teradata.Client.Provider.TdIntervalDayToHour)">
            <summary>
               A <see cref="T:Teradata.Client.Provider.TdIntervalDayToHour"/> is subtracted from another <strong>TdIntervalDayToHour</strong>.
            </summary>
            <returns>
               A new <strong>TdIntervalDayToHour</strong> as the result 
               of subtracting <paramref name="right"/> from the <paramref name="left"/>.
            </returns>
            <remarks>
            <para>
               If either parameter is <strong>Null</strong> a <see cref="F:Teradata.Client.Provider.TdIntervalDayToHour.Null"/> will be returned.
            </para>
            <para>
               The returned <strong>TdIntervalDayToHour</strong> will contain a precision  
               set to the <see cref="F:Teradata.Client.Provider.TdIntervalDayToHour.MaxPrecision"/>.
            </para>        
            </remarks>
            <exception cref="T:System.OverflowException">
               The resultant operation returns a value greater than the <see cref="F:Teradata.Client.Provider.TdIntervalDayToHour.MaxValue"/> 
               or less than the <see cref="F:Teradata.Client.Provider.TdIntervalDayToHour.MinValue"/>.
            </exception>
            <param name="left">A <strong>TdIntervalDayToHour</strong> to subtract from.</param>
            <param name="right">A <strong>TdIntervalDayToHour</strong> to subtract.</param>
        </member>
        <member name="M:Teradata.Client.Provider.TdIntervalDayToHour.Multiply(Teradata.Client.Provider.TdIntervalDayToHour,System.Int32)">
            <summary>
               A <see cref="T:Teradata.Client.Provider.TdIntervalDayToHour"/> is multiplied by an integer value.
            </summary>
            <remarks>
            <para>
               If <paramref name="interval"/> is <see cref="F:Teradata.Client.Provider.TdIntervalDayToHour.Null"/> a <strong>Null</strong> will be returned.
            </para>
            <para>
               The returned <strong>TdIntervalDayToHour</strong> will contain a precision 
               set to the <see cref="F:Teradata.Client.Provider.TdIntervalDayToHour.MaxPrecision"/>.
            </para>
            </remarks>
            <returns>
               A new <strong>TdIntervalDayToHour</strong> as the result of multiplying a 
               <strong>TdIntervalDayToHour</strong> and an integer value.
            </returns>        
            <exception cref="T:System.OverflowException">
               The resultant operation returns a value greater than the <see cref="F:Teradata.Client.Provider.TdIntervalDayToHour.MaxValue"/> 
               or less than the <see cref="F:Teradata.Client.Provider.TdIntervalDayToHour.MinValue"/>.
            </exception>
            <param name="interval">A <strong>TdIntervalDayToHour</strong>.</param>
            <param name="value">A multiplier.</param>
        </member>
        <member name="M:Teradata.Client.Provider.TdIntervalDayToHour.Multiply(System.Int32,Teradata.Client.Provider.TdIntervalDayToHour)">
            <summary>
               A <see cref="T:Teradata.Client.Provider.TdIntervalDayToHour"/> is multiplied by an integer value.
            </summary>
            <remarks>
            <para>
               If <paramref name="interval"/> is <see cref="F:Teradata.Client.Provider.TdIntervalDayToHour.Null"/> a <strong>Null</strong> will be returned.
            </para>
            <para>
               The returned <strong>TdIntervalDayToHour</strong> will contain a precision 
               set to the <see cref="F:Teradata.Client.Provider.TdIntervalDayToHour.MaxPrecision"/>.
            </para>
            </remarks>
            <returns>
               A new <strong>TdIntervalDayToHour</strong> as the result of multiplying a 
               <strong>TdIntervalDayToHour</strong> and an integer value.
            </returns>        
            <exception cref="T:System.OverflowException">
               The resultant operation returns a value greater than the <see cref="F:Teradata.Client.Provider.TdIntervalDayToHour.MaxValue"/> 
               or less than the <see cref="F:Teradata.Client.Provider.TdIntervalDayToHour.MinValue"/>.
            </exception>
            <param name="value">A multiplier.</param>
            <param name="interval">A <strong>TdIntervalDayToHour</strong>.</param>
        </member>
        <member name="M:Teradata.Client.Provider.TdIntervalDayToHour.Divide(Teradata.Client.Provider.TdIntervalDayToHour,System.Int32)">
            <summary>
               A <see cref="T:Teradata.Client.Provider.TdIntervalDayToHour"/> is divided by an integer value.
            </summary>
            <remarks>
            <para>
               If <paramref name="interval"/> is <see cref="F:Teradata.Client.Provider.TdIntervalDayToHour.Null"/> a <strong>Null</strong> will be returned.
            </para>
            <para>
               The returned <strong>TdIntervalDayToHour</strong> will contain a precision 
               which matches the precision of the <strong>interval</strong> parameter.
            </para>
            </remarks>
            <returns>
               A new <strong>TdIntervalDayToHour</strong> as the result of dividing a 
               <strong>TdIntervalDayToHour</strong> and an integer value.
            </returns>        
            <exception cref="T:System.DivideByZeroException">
               The <paramref name="value"/> divisor cannot be 0.
            </exception>
            <param name="interval">A <strong>TdIntervalDayToHour</strong>.</param>
            <param name="value">A divisor.</param>
        </member>
        <member name="M:Teradata.Client.Provider.TdIntervalDayToHour.op_GreaterThan(Teradata.Client.Provider.TdIntervalDayToHour,Teradata.Client.Provider.TdIntervalDayToHour)">
            <summary>
               This operator determines whether the <paramref name="left"/> is greater 
               than the <paramref name="right"/>.
            </summary>
            <returns>
            	<para>
            		<c>true</c> indicates the <paramref name="left"/> is greater than
                    the <paramref name="right"/>, <c>false</c> otherwise.
                </para>
            	<para>
            		<list type="table">
            			<listheader>
            				<term>Return Value</term>
            				<description>Description</description>
            			</listheader>
            			<item>
            				<term><c>true</c></term>
            				<description>
            					<paramref name="left"/> and
                                <paramref name="right"/> are not
                                <see cref="F:Teradata.Client.Provider.TdIntervalDayToHour.Null"/> and
                                <paramref name="left"/> is greater than
                                <paramref name="right"/>.
            				</description>
            			</item>
            			<item>
            				<term><c>false</c></term>
            				<description>
            					<para>
                                    The <paramref name="left"/> is less than or equal
                                    to <paramref name="right"/>
                                </para>
            					<para>-or-</para>
            					<para>
                                    Either <paramref name="left"/> and / or
                                    <paramref name="right"/> is <strong>Null</strong>.
                                </para>
            				</description>
            			</item>
            		</list>
            	</para>
            </returns>
            <remarks>
            	<para>
                   Comparison operators always return <c>false</c> if one of the operands is
                   <strong>Null</strong>. Therefore you should not assume that the reverse condition
                   is <c>true</c>. For example you cannot assume that the <paramref name="left"/> is less 
                   than or equal to the <paramref name="right"/> if the "&gt;" operator returns <c>false</c>.
               </para>
            	<para>
                   The reverse condition is <c>true</c> when the <paramref name="left"/> and the 
                   <paramref name="right"/> are not <strong>Null</strong>.
               </para>
            </remarks>
            <param name="left">An instance of <see cref="T:Teradata.Client.Provider.TdIntervalDayToHour"/>.</param>
            <param name="right">An instance of <strong>TdIntervalDayToHour</strong>.</param>
        </member>
        <member name="M:Teradata.Client.Provider.TdIntervalDayToHour.op_GreaterThanOrEqual(Teradata.Client.Provider.TdIntervalDayToHour,Teradata.Client.Provider.TdIntervalDayToHour)">
            <summary>
               This operator determines whether the <paramref name="left"/> is greater than or 
               equal to the <paramref name="right"/>.
            </summary>
            <returns>
            	<para>
            		<c>true</c> indicates the <paramref name="left"/> is greater than
                    or equal to the <paramref name="right"/>, <c>false</c> otherwise.
                </para>
            	<para>
            		<list type="table">
            			<listheader>
            				<term>Return Value</term>
            				<description>Description</description>
            			</listheader>
            			<item>
            				<term><c>true</c></term>
            				<description>
            					<para>
            						<paramref name="left"/> and
                                    <paramref name="right"/> are not
                                    <see cref="F:Teradata.Client.Provider.TdIntervalDayToHour.Null"/> and
                                    <paramref name="left"/> is greater than or equal
                                    to <paramref name="right"/>
            					</para>
            					<para>-or-</para>
            					<para>
            						<paramref name="left"/> is <strong>Null</strong>
                                    and <paramref name="right"/> is
                                    <strong>Null</strong>.
            					</para>
            				</description>
            			</item>
            			<item>
            				<term><c>false</c></term>
            				<description>
            					<para>
                                    The <paramref name="left"/> is less than
                                    <paramref name="right"/>
            					</para>
            					<para>-or-</para>
            					<para>
                                    Either <paramref name="left"/> or
                                    <paramref name="right"/> is <strong>Null</strong>.
            					</para>
            				</description>
            			</item>
            		</list>
            	</para>
            </returns>
            <remarks>
            	<para>
                    Comparison operators always return <c>false</c> if one of the operands is
                    <strong>Null</strong>. Therefore you should not assume that the reverse
                    condition is <c>true</c>. For example you cannot assume that the
                    <paramref name="left"/> is less than the
                    <paramref name="right"/> if the "&gt;=" operator returns
                    <c>false</c>.
                </para>
            	<para>
                    The reverse condition is <c>true</c> when the
                    <paramref name="left"/> and the
                    <paramref name="right"/> are not <strong>Null</strong>.
                </para>
            </remarks>
            <param name="left">An instance of <see cref="T:Teradata.Client.Provider.TdIntervalDayToHour"/>.</param>
            <param name="right">An instance of <strong>TdIntervalDayToHour</strong>.</param>
        </member>
        <member name="M:Teradata.Client.Provider.TdIntervalDayToHour.op_Inequality(Teradata.Client.Provider.TdIntervalDayToHour,Teradata.Client.Provider.TdIntervalDayToHour)">
            <summary>
               This operator determines whether the <paramref name="left"/> and the  
               <paramref name="right"/> are not equal.
            </summary>
            <returns>
            	<para>
                   A Boolean is returned that indicates whether the two operands are not equal.
                   <c>true</c> indicates the two operands are not equal, <c>false</c>
                   otherwise.
               </para>
            	<para>
            		<list type="table">
            			<listheader>
            				<term>Return Value</term>
            				<description>Description</description>
            			</listheader>
            			<item>
            				<term><c>true</c></term>
            				<description>
                                <para>
            					   <paramref name="left"/> is less than or greater than
                                   <paramref name="right"/>.
                                </para>
            					<para>-or-</para>
                               <para>
            					    <paramref name="left"/> is
                                   <see cref="F:Teradata.Client.Provider.TdIntervalDayToHour.Null"/> and
                                   <paramref name="right"/> is not <strong>Null.</strong> 
                               </para>
            					<para>-or-</para>
            					<para>
                                   <paramref name="left"/> is not <strong>Null</strong>
                                   and <paramref name="right"/> is <strong>Null.</strong>
                                </para>
                            </description>
            			</item>
            			<item>
            				<term><c>false</c></term>
            				<description>
            					<para>
                                  <paramref name="left"/> is equal to
                                  <paramref name="right"/>.
                               </para>
            					<para>-or-</para>
            					<para>
                                   <paramref name="left"/> and
                                   <paramref name="right"/> are <strong>Null</strong>.
                                </para>
                            </description>
            			</item>
            		</list>
            	</para>
            </returns>
            <param name="left">An instance of <see cref="T:Teradata.Client.Provider.TdIntervalDayToHour"/>.</param>
            <param name="right">An instance of <strong>TdIntervalDayToHour</strong>.</param>
        </member>
        <member name="M:Teradata.Client.Provider.TdIntervalDayToHour.op_Equality(Teradata.Client.Provider.TdIntervalDayToHour,Teradata.Client.Provider.TdIntervalDayToHour)">
            <summary>
               This operator determines whether the <paramref name="left"/> and the  
               <paramref name="right"/> are equal.
            </summary>
            <returns>
            	<para>
                   A Boolean is returned that indicates whether the two operands are equal.
                   <c>True</c> indicates the two operands are equal, <c>false</c> otherwise.
               </para>
            	<para>
            		<list type="table">
            			<listheader>
            				<term>Return Value</term>
            				<description>Description</description>
            			</listheader>
            			<item>
            				<term><c>true</c></term>
            				<description>
            					<para>
            					   <paramref name="left"/> is equal to
                                   <paramref name="right"/>
            					</para>
            					<para>-or-</para>
            					<para>
            					   <paramref name="left"/> is
                                   <see cref="F:Teradata.Client.Provider.TdIntervalDayToHour.Null"/> and
                                   <paramref name="right"/> is <strong>Null</strong>.
            					</para>
            				</description>
            			</item>
            			<item>
            				<term><c>false</c></term>
            				<description>
            					<para>
            					   <paramref name="left"/> is not <strong>Null</strong>
                                   and <paramref name="right"/> is <strong>Null</strong>
            					</para>
            					<para>-or-</para>
            					<para>
            					   <paramref name="left"/> is <strong>Null</strong> and
                                   <paramref name="right"/> is not <strong>Null</strong>
            					</para>
            					<para>-or-</para>
            					<para>
                                   The <paramref name="left"/> is not equal to
                                   <paramref name="right"/>.
            					</para>
            				</description>
            			</item>
            		</list>
            	</para>
            </returns>
            <param name="left">An instance of <see cref="T:Teradata.Client.Provider.TdIntervalDayToHour"/>.</param>
            <param name="right">An instance of <strong>TdIntervalDayToHour</strong>.</param>
        </member>
        <member name="M:Teradata.Client.Provider.TdIntervalDayToHour.op_LessThan(Teradata.Client.Provider.TdIntervalDayToHour,Teradata.Client.Provider.TdIntervalDayToHour)">
            <summary>
               This operator determines whether the <paramref name="left"/> is less than the 
               <paramref name="right"/>.
            </summary>
            <returns>
            	<para>
            		<c>True</c> indicates the <paramref name="left"/> is less than
                    the <paramref name="right"/>, <c>false</c> otherwise.
                </para>
            	<para>
            		<list type="table">
            			<listheader>
            				<term>Return Value</term>
            				<description>Description</description>
            			</listheader>
            			<item>
            				<term><c>true</c></term>
            				<description>
            					<para>
            					    <paramref name="left"/> and
                                   <paramref name="right"/> are not
                                   <see cref="F:Teradata.Client.Provider.TdIntervalDayToHour.Null"/> and
                                   <paramref name="left"/> is less than
                                   <paramref name="right"/>.
            					</para>
            				</description>
            			</item>
            			<item>
            				<term><c>false</c></term>
            				<description>
            					<para>
                                    The <paramref name="left"/> is greater than or
                                    equal to <paramref name="right"/>
            					</para>
            					<para>-or-</para>
            					<para>
                                    Either <paramref name="left"/> and / or
                                    <paramref name="right"/> is <strong>Null</strong>.
            					</para>
            				</description>
            			</item>
            		</list>
            	</para>
            </returns>
            <remarks>
            	<para>
                    Comparison operators always return <c>false</c> if one of the operands is
                    <strong>Null</strong>. Therefore you should not assume that the reverse
                    condition is <c>true</c>. For example you cannot assume that the
                    <paramref name="left"/> is greater than or equal to the
                    <paramref name="right"/> if the "&lt;" operator returns
                    <c>false</c>.
                </para>
            	<para>
                    The reverse condition is <c>true</c> when the
                    <paramref name="left"/> and the
                    <paramref name="right"/> are not <strong>Null</strong>.
                </para>
            </remarks>
            <param name="left">An instance of <see cref="T:Teradata.Client.Provider.TdIntervalDayToHour"/>.</param>
            <param name="right">An instance of <strong>TdIntervalDayToHour</strong>.</param>
        </member>
        <member name="M:Teradata.Client.Provider.TdIntervalDayToHour.op_LessThanOrEqual(Teradata.Client.Provider.TdIntervalDayToHour,Teradata.Client.Provider.TdIntervalDayToHour)">
            <summary>
               This operator determines whether the <paramref name="left"/> is less than  
               or equal to the <paramref name="right"/>.
            </summary>
            <returns>
            	<para>
            		<c>true</c> indicates the <paramref name="left"/> is less than or
                    equal to the <paramref name="right"/>, <c>false</c> otherwise.
                </para>
            	<para>
            		<list type="table">
            			<listheader>
            				<term>Return Value</term>
            				<description>Description</description>
            			</listheader>
            			<item>
            				<term><c>true</c></term>
            				<description>
            					<para>
            						<paramref name="left"/> and
                                    <paramref name="right"/> are not
                                    <see cref="F:Teradata.Client.Provider.TdIntervalDayToHour.Null"/> and
                                    <paramref name="left"/> is less than or equal to
                                    <paramref name="right"/>
            					</para>
            					<para>-or-</para>
            					<para>
            						<paramref name="left"/> is <strong>Null</strong>
                                    and <paramref name="right"/> is
                                    <strong>Null</strong>.
            					</para>
            				</description>
            			</item>
            			<item>
            				<term><c>false</c></term>
            				<description>
            					<para>
                                    The <paramref name="left"/> is greater than
                                    <paramref name="right"/>
            					</para>
            					<para>-or-</para>
            					<para>
                                    Either <paramref name="left"/> or
                                    <paramref name="right"/> is <strong>Null</strong>.
            					</para>
            				</description>
            			</item>
            		</list>
            	</para>
            </returns>
            <remarks>
            	<para>
                    Comparison operators always return <c>false</c> if one of the operands is
                    <strong>Null</strong>. Therefore you should not assume that the reverse
                    condition is <c>true</c>. For example you cannot assume that the
                    <paramref name="left"/> is greater than the <paramref name="right"/>
                     if the "&lt;=" operator returns <c>false</c>.
                </para>
            	<para>
                    The reverse condition is <c>true</c> when the
                    <paramref name="left"/> and the
                    <paramref name="right"/> are not <strong>Null</strong>.
                </para>
            </remarks>
            <param name="left">An instance of <see cref="T:Teradata.Client.Provider.TdIntervalDayToHour"/>.</param>
            <param name="right">An instance of <strong>TdIntervalDayToHour</strong>.</param>
        </member>
        <member name="M:Teradata.Client.Provider.TdIntervalDayToHour.op_Explicit(System.TimeSpan)~Teradata.Client.Provider.TdIntervalDayToHour">
            <summary>
               Converts a <see cref="T:System.TimeSpan"/> to a <see cref="T:Teradata.Client.Provider.TdIntervalDayToHour"/>.
            </summary>
            <returns>
               A <strong>TdIntervalDayToHour</strong> interval.
            </returns>
            <remarks>
               <strong>TimeSpan</strong> fractional seconds, seconds and minutes will be truncated 
               during conversion into a <strong>TdIntervalDayToHour</strong> interval.
            </remarks>
            <exception cref="T:System.OverflowException">
               The resultant operation returns a value greater than the <see cref="F:Teradata.Client.Provider.TdIntervalDayToHour.MaxValue"/> 
               or less than the <see cref="F:Teradata.Client.Provider.TdIntervalDayToHour.MinValue"/>.
            </exception>
            <param name="value">A <strong>TimeSpan</strong>.</param>
        </member>
        <member name="M:Teradata.Client.Provider.TdIntervalDayToHour.op_Explicit(Teradata.Client.Provider.TdIntervalDayToHour)~System.TimeSpan">
            <summary>
               Converts a <see cref="T:Teradata.Client.Provider.TdIntervalDayToHour"/> to a <see cref="T:System.TimeSpan"/>.
            </summary>
            <returns>
               A <strong>TimeSpan</strong>.
            </returns>
            <remarks>
               The <strong>TimeSpan</strong> time components are represented in 24 hour format.
            </remarks>
            <exception cref="T:System.ArgumentNullException">
               The <strong>TdIntervalDayToHour</strong> value is <see cref="F:Teradata.Client.Provider.TdIntervalDayToHour.Null"/>.
            </exception>
            <param name="value">A <strong>TdIntervalDayToHour</strong> interval.</param>
        </member>
        <member name="M:Teradata.Client.Provider.TdIntervalDayToHour.op_Implicit(Teradata.Client.Provider.TdIntervalDayToHour)~Teradata.Client.Provider.TdIntervalDayToSecond">
            <summary>
               Converts a <see cref="T:Teradata.Client.Provider.TdIntervalDayToHour"/> implictly to a <see cref="T:Teradata.Client.Provider.TdIntervalDayToSecond"/>.
            </summary>
            <remarks>
            <para>
               The <see cref="P:Teradata.Client.Provider.TdIntervalDayToSecond.Precision"/> is set to the precision of the 
               <paramref name="value"/> and the <see cref="P:Teradata.Client.Provider.TdIntervalDayToSecond.Scale"/> is 
               set to zero, since the <strong>value</strong> does not contain any seconds. 
            </para>
            </remarks>
            <param name="value">A <strong>TdIntervalDayToHour</strong> interval.</param>
            <returns><strong>TdIntervalDayToSecond</strong>.</returns>
        </member>
        <member name="M:Teradata.Client.Provider.TdIntervalDayToHour.op_Implicit(Teradata.Client.Provider.TdIntervalDayToHour)~Teradata.Client.Provider.TdIntervalDayToMinute">
            <summary>
               Converts a <see cref="T:Teradata.Client.Provider.TdIntervalDayToHour"/> implictly to a <see cref="T:Teradata.Client.Provider.TdIntervalDayToMinute"/>.
            </summary>
            <param name="value">A <strong>TdIntervalDayToHour</strong> interval.</param>
            <returns>A <strong>TdIntervalDayToMinute</strong>.</returns>
        </member>
        <member name="P:Teradata.Client.Provider.TdIntervalDayToHour.IsNull">
            <summary>
               Indicates whether this <see cref="T:Teradata.Client.Provider.TdIntervalDayToHour"/> instance is <see cref="F:Teradata.Client.Provider.TdIntervalDayToHour.Null"/>. 
            </summary>
            <value>
               <c>true</c> if this <strong>TdIntervalDayToHour</strong> is <strong>Null</strong>; 
               <c>false</c> otherwise.
            </value>
        </member>
        <member name="P:Teradata.Client.Provider.TdIntervalDayToHour.Days">
            <summary>
               The number of interval days is returned. The return value ranges from -9999 to 9999.
            </summary>
            <remarks>
            <para>
               A <see cref="T:Teradata.Client.Provider.TdIntervalDayToHour"/> is represented as [-][days][space character][hh].  
               The minus sign is optional and represents a negative interval of time.  The days component 
               represents days. The space character (whitespace) separates the day from the hour. The hh
               component represents hours. The value of the Days property is the days component.
            </para>
            <para>
               A negative interval will return all properties (days and hours) as negative values.
            </para>
            </remarks>
            <exception cref="T:Teradata.Client.Provider.TdException">
               This property is not available when this instance is <see cref="F:Teradata.Client.Provider.TdIntervalDayToHour.Null"/>.
            </exception>
        </member>
        <member name="P:Teradata.Client.Provider.TdIntervalDayToHour.Hours">
            <summary>
               The number of interval hours is returned. The return value ranges from -23 to 23.
            </summary>
            <remarks>
            <para>
               A <see cref="T:Teradata.Client.Provider.TdIntervalDayToHour"/> is represented as [-][days][space character][hh].  
               The minus sign is optional and represents a negative interval of time.  The days component 
               represents days. The space character (whitespace) separates the day from the hour. The hh
               component represents hours. The value of the Hours property is the hh component.
            </para>
            <para>
               A negative interval will return all properties (days and hours) as negative values.
            </para>
            </remarks>
            <exception cref="T:Teradata.Client.Provider.TdException">
               This property is not available when this instance is <see cref="F:Teradata.Client.Provider.TdIntervalDayToHour.Null"/>.
            </exception>
        </member>
        <member name="P:Teradata.Client.Provider.TdIntervalDayToHour.Precision">
            <summary>
               The number of significant digits in the day is returned. The return value
               ranges from 1 to 4.
            </summary>
            <exception cref="T:Teradata.Client.Provider.TdException">
               This property is not available when this instance is <see cref="F:Teradata.Client.Provider.TdIntervalDayToHour.Null"/>.
            </exception>
        </member>
        <member name="P:Teradata.Client.Provider.TdIntervalDayToHour.Value">
            <summary>
               Gets the .NET data type representation of <see cref="T:Teradata.Client.Provider.TdIntervalDayToHour"/> 
               as a <see cref="T:System.TimeSpan"/>.
            </summary>
            <remarks>
               This property in concept parallels <see cref="M:Teradata.Client.Provider.TdDataReader.GetValue(System.Int32)"/> and
               <see cref="P:Teradata.Client.Provider.TdParameter.Value"/>. That is they all represent the .NET Framework 
               Class Library(FCL) primitive data type that correspond to the Teradata 
               Interval Day To Hour data type.
            </remarks>
            <value>The interval represented as a <strong>TimeSpan</strong> is returned.</value>
            <exception cref="T:Teradata.Client.Provider.TdException">
               This property is not available when this instance is <see cref="F:Teradata.Client.Provider.TdIntervalDayToHour.Null"/>.
            </exception>
        </member>
        <member name="P:Teradata.Client.Provider.TdIntervalDayToHour.InternalTimespan">
            <summary>
               Return the internal TimeSpan representing the interval.
            </summary>
            <remarks>
               The internal timespan is used in calculating arithmetic operations and in storing
               day-time intervals.
            </remarks>
        </member>
        <member name="P:Teradata.Client.Provider.TdIntervalDayToHour.ObjectId">
            <summary>
               Gets the instance object identifier.
            </summary>
        </member>
        <member name="P:Teradata.Client.Provider.TdIntervalDayToHour.IsNegative">
            <summary>
               Indicate if the interval is negative.
            </summary>
            <remarks>
               Timespan.ticks will indicate a negative interval.  Other values (days, hours, minutes, 
                milliseconds) may be 0 and the interval may still be negative.
            </remarks>
        </member>
        <member name="P:Teradata.Client.Provider.TdIntervalDayToHour.InternalAccessor">
            <summary>
               Accessor to the internal storage for this interval.
            </summary>
        </member>
        <member name="T:Teradata.Client.Provider.TdIntervalDayToMinute">
            <summary>
            	<see cref="T:Teradata.Client.Provider.TdIntervalDayToMinute"/> represents an interval of time defining a duration in
                days, hours and minutes. The day precision is configurable.
            </summary>
            <remarks>
            	<para>
                   <strong>TdIntervalDayToMinute</strong> is a .NET Data Provider for Teradata specific
                    type, designed to support a Teradata Database Interval Day To Minute data type.
               </para>
            	<para>
                    The <strong>TdIntervalDayToMinute</strong> supports the Teradata Interval Day (precision)
                    To Minute data type where precision indicates the number of digits in the day
                    (from 1 - 4).
                </para>
                <para>
                    The interval value must be specified in the following format :
                </para>
            	<para>[sign][days][space character][hh]:[mm]</para>
            	<para>Below is the description of each format item.</para>
            	<para>
            		<list type="table">
            			<listheader>
            				<term>Format Item</term>
            				<description>Description</description>
            			</listheader>
            			<item>
            				<term>sign</term>
            				<description>Optional - . Defaults as space character (+).</description>
            			</item>
            			<item>
            				<term>days</term>
            				<description>Required number of days (one to four digits in
                            length).</description>
            			</item>
            			<item>
            				<term>hh</term>
            				<description>Required number of hours from 00 - 23.</description>
            			</item>
            			<item>
            				<term>mm</term>
            				<description>Required number of minutes from 00 - 59.</description>
            			</item>
            		</list>
            	</para>
            	<para>
                   The .Net Framework does not have a system type that directly corresponds to
                   the Teradata Database Interval Day To Minute data type. The .NET Data Provider for 
                   Teradata Version 13.0 version and earlier versions map Interval Day To Minute to  
                   System.String. With version 13.1 of the provider, <strong>TdIntervalDayToMinute</strong> 
                   is available to retrieve and manipulate data of type Interval Day To Minute.
               </para>
            	<para>
                   The range of values for each <strong>TdIntervalDayToMinute</strong> precision
                   is as follows:
               </para>
            	<para>
            		<table class="xmldoctable" cellspacing="0">
            			<tbody>
            				<tr>
            					<th>Type and Precision</th>
            					<th>Minimum</th>
            					<th>Maximum</th>
            				</tr>
            				<tr>
            					<td class="xmldoctable">TdIntervalDayToMinute(1)</td>
            					<td class="xmldoctable">
            						<para>-'9 23:59'</para>
            					</td>
            					<td>'9 23:59'</td>
            				</tr>
            				<tr>
            					<td class="xmldoctable">TdIntervalDayToMinute(2)</td>
            					<td class="xmldoctable">
            						<para>-'99 23:59'</para>
            					</td>
            					<td>'99 23:59'</td>
            				</tr>
            				<tr>
            					<td class="xmldoctable">TdIntervalDayToMinute(3)</td>
            					<td class="xmldoctable">
            						<para>-'999 23:59'</para>
            					</td>
            					<td>'999 23:59'</td>
            				</tr>
            				<tr>
            					<td class="xmldoctable">TdIntervalDayToMinute(4)</td>
            					<td class="xmldoctable">
            						<para>-'9999 23:59'</para>
            					</td>
            					<td>'9999 23:59'</td>
            				</tr>
            			</tbody>
            		</table>
            	</para>
                <para>
                    <strong>TdIntervalDayToMinute</strong> also supports 
                    <see cref="F:Teradata.Client.Provider.TdIntervalDayToMinute.Null"/>. This is a very important feature.
                    An application is no longer required to call
                    <see cref="M:Teradata.Client.Provider.TdDataReader.IsDBNull(System.Int32)"/> before invoking the corresponding 
                    TdDataReader "Get" method.  This will improve overall performance.
                </para>
                <para>
                    A <strong>TdIntervalDayToMinute</strong> structure allows arithmetic,
                    comparision and conversion operations to be performed. 
                </para>
            	<para>
                    A <strong>TdIntervalDayToMinute</strong> may also be specified as an in, out, 
                    or in/out parameter to a stored procedure. In order to maintain backward  
                    compatibility with previous versions of the provider (release 13.0 and prior), 
                    a Connection String Attribute
                    <see cref="P:Teradata.Client.Provider.TdConnectionStringBuilder.EnableTdIntervals">EnableTdIntervals</see>
                    has been added. When the <strong>EnableTdIntervals</strong> attribute
                    is <c>true</c>, <see cref="P:Teradata.Client.Provider.TdParameter.ProviderSpecificValue"/> will
                    return the data as the provider specific type of <strong>TdIntervalDayToMinute</strong>.
                    When <strong>EnableTdIntervals</strong> is <c>false</c>, 
                    <strong>TdParameter.ProviderSpecificValue</strong> will return the data as a
                    .NET Framework Library data type of <see cref="T:System.String"/>.
                </para>
            	<para>
                    The <see cref="P:Teradata.Client.Provider.TdParameter.Value"/> will also return the .NET Framework Library
                    data type of <strong>System.String</strong> when <strong>EnableTdIntervals</strong>
                    is <c>false</c> to maintain backward compatibility. 
                    The <strong>TdParameter.Value</strong> will return a .NET Framework data type of
                    <see cref="T:System.TimeSpan"/> when <strong>EnableTdIntervals</strong>
                    is <c>true</c>.
                </para>
            	<para>For more information on the Teradata Interval Day To Minute data type please
                see the Teradata Database SQL Reference - 'Data Types and Literals'.</para>
            </remarks>
            <example>
            	<para>
                   The following example shows how to retrieve a <strong>TdIntervalDayToMinute</strong>, 
                   modify the interval, and then update the table.
               </para>
            	<code lang="CS">
            Public void IntervalExample(TdCommand cmd, String model)
            {
               cmd.Parameters.Clear();
               
               cmd.CommandText = "SELECT StartDate, LeaseReturn, DelayPeriod " +
                                 "FROM AutoLeases " +
                                 "WHERE Model = ?";
             
               cmd.CommandType = CommandType.Text;
             
               cmd.Parameters.Add(null, TdType.VarChar, 10,
                    ParameterDirection.Input, true, 0, 0, null,    
                    DataRowVersion.Default, model);
             
               Int32 row = 0;
               TdDate [] startDate;
               TdTimestamp [] leaseReturn;
               TdIntervalDayToMinute [] leaseLen;
               
               using (TdDataReader dr = cmd.ExecuteReader())
               {
                  startDate = new TdDate[dr.RecordsReturned];
                  leaseReturn = new TdTimestamp[dr.RecordsReturned];
                  leaseLen = new TdIntervalDayToMinute [dr.RecordsReturned];
             
                  // Specifying an interval of 7 days, 1 hour, 30 minutes 
                  // with a day precision of 4
                  TdIntervalDayToMinute leaseReturnExtension = new TdIntervalDayToMinute(7, 1, 30, 4);
               
                  while (dr.Read())
                  {
                     // Retrieving the dates
                     startDate[row] = dr.GetTdDate(0);
                     leaseReturn[row] = dr.GetTimestamp(1);
                     leaseLen[row] = dr.GetTdIntervalDayToMinute(2);
             
                     // Adding extension to the lease return
                     leaseReturn[row] = leaseReturn[row] + leaseReturnExtension;
             
                     // Adding extension to the lease length;
                     leaseLen[row] = leaseLen[row] + leaseReturnExtension;
             
                     row++;
                  } 
               }
             
               cmd.Parameters.Clear();
             
               cmd.CommandText = "UPDATE AutoLeases " +
                                 "SET LeaseReturn = ?, LeaseLen = ? " +
                                 "WHERE Model = ?";
             
               cmd.Parameters.Add(null, TdType.Timestamp, 0,
                     ParameterDirection.Input, true, 0, 0, null,    
                     DataRowVersion.Default, null);
             
               cmd.Parameters.Add(null, TdType.IntervalDayToMinute, 0,
                     ParameterDirection.Input, true, 0, 0, null,    
                     DataRowVersion.Default, null);
             
               cmd.Parameters.Add(null, TdType.VarChar, 9,
                     ParameterDirection.Input, true, 0, 0, null,    
                     DataRowVersion.Default, model);
             
               row--;
               while(row &gt;= 0)
               {
                  cmd.Parameters[0].Value = leaseReturn[row];
                  cmd.Parameters[1].Value = leaseLen[row];
                  cmd.Parameters[2].Value = model;
             
                  cmd.ExecuteNonQuery();
                  row--;
               }
            }
            </code>
            </example>
            <seealso cref="P:Teradata.Client.Provider.TdConnectionStringBuilder.EnableTdIntervals"/> 
            <seealso cref="!:IntervalConnectionString.html">Interval Connection String Attribute</seealso>
            <seealso cref="!:EnableProviderSpecificTypes.html">Enabling Provider Specific Types</seealso>
            <seealso cref="!:IntervalTypeOverview.html">Provider Specific Type:  Interval Type Overview</seealso>
        </member>
        <member name="F:Teradata.Client.Provider.TdIntervalDayToMinute.MaxPrecision">
            <summary>
               A constant representing the maximum number of significant digits in the 
               <see cref="P:Teradata.Client.Provider.TdIntervalDayToMinute.Days"/> interval component.
            </summary>
            <remarks>
               The value of this constant is 4.
            </remarks>
        </member>
        <member name="F:Teradata.Client.Provider.TdIntervalDayToMinute.MinPrecision">
            <summary>
               A constant representing the minimum number of significant digits in the 
               <see cref="P:Teradata.Client.Provider.TdIntervalDayToMinute.Days"/> interval component.
            </summary>
            <remarks>
               The value of this constant is 1.
            </remarks>
        </member>
        <member name="F:Teradata.Client.Provider.TdIntervalDayToMinute.Null">
            <summary>
               Gets a <strong>Null</strong> instance of <see cref="T:Teradata.Client.Provider.TdIntervalDayToMinute"/>.
            </summary>
            <value>
               Returns a <strong>TdIntervalDayToMinute</strong> instance that represents a 
               <strong>Null</strong> value.
            </value>
            <remarks>
               Conceptually it is the constructor for <strong>Null</strong> instances of <strong>TdIntervalDayToMinute</strong>.
            </remarks>
            <example>
            This example shows how to send a <strong>Null</strong> value to a Teradata database.
            <code>
            TdParameter col1 = new TdParameter();
            col1.TdType = TdType.TdIntervalDayToMinute;
            col1.Value = TdIntervalDayToMinute.Null;
            </code>
            </example>
        </member>
        <member name="F:Teradata.Client.Provider.TdIntervalDayToMinute.Zero">
            <summary>
               Gets an <see cref="T:Teradata.Client.Provider.TdIntervalDayToMinute"/> instance that contains all zero elements
               for each interval field.
            </summary>
            <remarks>
               A Zero <Strong>TdIntervalDayToMinute</Strong> may be used to determine whether
               other instances of intervals represent postive, negative or non-zero intervals.
            </remarks>
            <example>
            This example shows how to determine if an interval is negative.
            <code>
            TdIntervalDayTo Second dtmInterval = new TdIntervalDayToMinute(0, 0, -15);
            if (dtmInterval &lt; TdIntervalDayToMinute.Zero)
            {
               Console.WriteLine("The Interval is negative");
            }
            // The output of the console is "The interval is negative"
            </code>
            </example>
        </member>
        <member name="F:Teradata.Client.Provider.TdIntervalDayToMinute.MinValue">
            <summary>
               The smallest possible value for <see cref="T:Teradata.Client.Provider.TdIntervalDayToMinute"/>.
            </summary>
            <remarks>
               The value is -'9999 23:59'.
            </remarks>
        </member>
        <member name="F:Teradata.Client.Provider.TdIntervalDayToMinute.MaxValue">
            <summary>
               The largest possible value for <see cref="T:Teradata.Client.Provider.TdIntervalDayToMinute"/>.
            </summary>
            <remarks>
               The value is '9999 23:59'.
            </remarks>
        </member>
        <member name="M:Teradata.Client.Provider.TdIntervalDayToMinute.#ctor(System.Int32,System.Int32,System.Int32,System.Byte)">
            <summary>
               An instance of <see cref="T:Teradata.Client.Provider.TdIntervalDayToMinute"/> is created from a day and time  
               components specified as integers while the precision component is specified as a Byte.
            </summary>
            <remarks>
            <para>
               The number of days, hours and minutes are constructed into a
               <strong>TdIntervalDayToMinute</strong> to determine if the <see cref="F:Teradata.Client.Provider.TdIntervalDayToMinute.MinValue"/> 
               or the <see cref="F:Teradata.Client.Provider.TdIntervalDayToMinute.MaxValue"/> values are exceeded.  If the values are not exceeded 
               but the resulting days component exceeds the supplied <paramref name="precision"/>
               value, an exception is generated.
            </para>
            <para>
               For example a constructor for TdIntervalDayToMinute(444, 4, 9, 2) requests
               444 days, 4 hours and 9 minutes with a precision of 2. The resulting days value 
               cannot be represented in 2 digits, therefore an exception is generated,
               even though the <strong>MinValue</strong> and the
               <strong>MaxValue</strong> values have not been exceeded.
            </para>
            <para>
               Negative constructor parameters may be supplied to represent negative durations of time.
               Mixed positive and negative constructor parameters are added together that result in a
               negative or positive <strong>TdIntervalDayToMinute</strong>.  For instance, a day
               value of 200, an hour value of -4900 and a minute value of 30 will result in a 
               <strong>TdIntervalDayToMinute</strong> interval value of -'4 03:30'.
            </para>
            </remarks>
            <exception cref="T:System.OverflowException" caption="OverflowException">
               The parameters specify a <strong>TdIntervalDayToMinute</strong> value less than 
               <see cref="F:Teradata.Client.Provider.TdIntervalDayToMinute.MinValue"/> or greater than <see cref="F:Teradata.Client.Provider.TdIntervalDayToMinute.MaxValue"/>.
            </exception>
            <exception cref="T:System.ArgumentOutOfRangeException" caption="ArgumentOutOfRangeException">
               The <strong>precision</strong> parameter is outside the <see cref="F:Teradata.Client.Provider.TdIntervalDayToMinute.MinPrecision"/> 
               or <see cref="F:Teradata.Client.Provider.TdIntervalDayToMinute.MaxPrecision"/> range of values.
            </exception>
            <exception cref="T:System.ArgumentException" caption="ArgumentException">
               The <strong>precision</strong> parameter is not large enough to represent the 
               number of days.
            </exception>
            <overloads>
               Initializes a new instance of <strong>TdIntervalDayToMinute</strong>.
            </overloads>
            <param name="days">Number of days.</param>
            <param name="hours">Number of hours.</param>
            <param name="minutes">Number of minutes.</param>
            <param name="precision">Number of significant digits of the day.</param>
        </member>
        <member name="M:Teradata.Client.Provider.TdIntervalDayToMinute.#ctor(System.Int32,System.Int32,System.Int32)">
            <summary>
               An instance of <see cref="T:Teradata.Client.Provider.TdIntervalDayToMinute"/> is created from a day and time  
               components specified as integers.
            </summary>
            <remarks>
            <para>
               The number of days, hours and minutes are constructed into a 
               <strong>TdIntervalDayToMinute</strong> and evaluated against <see cref="F:Teradata.Client.Provider.TdIntervalDayToMinute.MinValue"/> 
               and <see cref="F:Teradata.Client.Provider.TdIntervalDayToMinute.MaxValue"/>.  The <see cref="P:Teradata.Client.Provider.TdIntervalDayToMinute.Precision"/> is then calculated from the 
               number of digits contained within the interval day component.
            </para>
            <para>
               For example, 99 days, 28 hours and 75 minutes is first constructed into a
               <strong>TdIntervalDayToMinute</strong>.  The <strong>TdIntervalDayToMinute</strong> literal 
               representation results in a <strong>TdIntervalDayToMinute</strong> value of 100 days, 
               5 hours and 15 minutes within the range of less than or equal to <strong>MaxValue</strong> 
               and greater than or equal to the <strong>MinValue</strong>. Precision is calculated to be a 
               value of 3 representing three significant digits in the day.
            </para>
            <para>
               A day value of 2000, 200000 hours and 0 minutes is first constructed into 
               <strong>TdIntervalDayToMinute</strong>. The <strong>TdIntervalDayToMinute</strong> literal
                representation results in a <strong>TdIntervalDayToMinute</strong> value of 10,333 days 
               and 8 hours exceeding the maximum value of '9999 23:59'.
            </para>
            <para>
               Negative constructor parameters may be supplied to represent negative durations of time.
               Mixed positive and negative constructor parameters are added together that result in a
               negative or positive <strong>TdIntervalDayToMinute</strong>.  For instance, a day
               value of 200, an hour value of -4900 and a minute value of 30 will result in a 
               <strong>TdIntervalDayToMinute</strong> interval value of -'4 03:30' with
               a calculated precision value of 1.
            </para>
            </remarks>
            <exception cref="T:System.OverflowException" caption="OverflowException">
               The parameters specify a <strong>TdIntervalDayToMinute</strong> value less than 
               <see cref="F:Teradata.Client.Provider.TdIntervalDayToMinute.MinValue"/> or greater than <see cref="F:Teradata.Client.Provider.TdIntervalDayToMinute.MaxValue"/>.
            </exception>
            <param name="days">Number of days.</param>
            <param name="hours">Number of hours.</param>
            <param name="minutes">Number of minutes.</param>
        </member>
        <member name="M:Teradata.Client.Provider.TdIntervalDayToMinute.#ctor(System.TimeSpan)">
            <summary>
               An instance of <see cref="T:Teradata.Client.Provider.TdIntervalDayToMinute"/> is created from a <see cref="T:System.TimeSpan"/>.
            </summary>
            <remarks>
            <para>
               The  <strong>TimeSpan</strong> value is converted into a <strong>TdIntervalDayToMinute</strong>
               and evaluated against <see cref="F:Teradata.Client.Provider.TdIntervalDayToMinute.MinValue"/> and <see cref="F:Teradata.Client.Provider.TdIntervalDayToMinute.MaxValue"/>.  The 
               <see cref="P:Teradata.Client.Provider.TdIntervalDayToMinute.Precision"/> is then calculated from the number of digits contained within 
               the interval day component.
            </para>
            <para>
               After conversion of the <strong>TimeSpan</strong> value into a
               <strong>TdIntervalDayToMinute</strong>, any seconds or microseconds will be truncated.
               For example, a TimeSpan value created with a <see cref="P:System.TimeSpan.Ticks"/> value
               of 9378401234567 results in a value of 10 days, 20 hours, 30 minutes and 
               40.1234567 seconds.  The <strong>TdIntervalDayToMinute</strong> literal 
               representation results in a <strong>TdIntervalDayToMinute</strong> value of  
               '10 20:30'. The 40.1234567 seconds value is truncated. 
               Precision is calculated to be a value of 2 representing two significant digits in the day.
            </para>
            </remarks>
            <exception cref="T:System.OverflowException" caption="OverflowException">
               The <strong>timespan</strong> parameter specifies a 
               <strong>TdIntervalDayToMinute</strong> value less than <see cref="F:Teradata.Client.Provider.TdIntervalDayToMinute.MinValue"/> 
               or greater than <see cref="F:Teradata.Client.Provider.TdIntervalDayToMinute.MaxValue"/>.
            </exception>
            <param name="timeSpan">A TimeSpan to initialize <strong>TdIntervalDayToMinute</strong>.</param>
        </member>
        <member name="M:Teradata.Client.Provider.TdIntervalDayToMinute.#ctor(System.TimeSpan,System.Byte)">
            <summary>
               An instance of <see cref="T:Teradata.Client.Provider.TdIntervalDayToMinute"/> is created using a <see cref="T:System.TimeSpan"/> 
               specifying the day precision as a byte.
            </summary>
            <remarks>
            <para>
               The  <strong>TimeSpan</strong> value is converted into a <strong>TdIntervalDayToMinute</strong>"/&gt;
               and evaluated against <see cref="F:Teradata.Client.Provider.TdIntervalDayToMinute.MinValue"/> and <see cref="F:Teradata.Client.Provider.TdIntervalDayToMinute.MaxValue"/>.  If the values 
               are not exceeded but the resulting days component exceeds the supplied parameter
                <paramref name="precision"/> value, an exception is generated.
            </para>
            <para>
               After conversion of the <strong>TimeSpan</strong> value into a
               <strong>TdIntervalDayToMinute</strong>, any seconds or microseconds will be truncated.
               For example, a TimeSpan value created with a <see cref="P:System.TimeSpan.Ticks"/> value
               of 9378401234567 results in a value of 10 days, 20 hours, 30 minutes and 
               40.1234567 seconds.  The <strong>TdIntervalDayToMinute</strong> literal 
               representation results in a <strong>TdIntervalDayToMinute</strong> value of  
               '10 20:30'. The 40.1234567 seconds value is truncated. 
            </para>
            </remarks>
            <exception cref="T:System.OverflowException" caption="OverflowException">
               The <strong>timespan</strong> parameter specifies a 
               <strong>TdIntervalDayToMinute</strong> value less than <see cref="F:Teradata.Client.Provider.TdIntervalDayToMinute.MinValue"/> 
               or greater than <see cref="F:Teradata.Client.Provider.TdIntervalDayToMinute.MaxValue"/>.
            </exception>
            <exception cref="T:System.ArgumentOutOfRangeException" caption="ArgumentOutOfRangeException">
               The <strong>precision</strong> parameter is outside the <see cref="F:Teradata.Client.Provider.TdIntervalDayToMinute.MinPrecision"/> 
               or <see cref="F:Teradata.Client.Provider.TdIntervalDayToMinute.MaxPrecision"/> range of values.
            </exception>
            <exception cref="T:System.ArgumentException" caption="ArgumentException">
               The <strong>precision</strong> parameter is not large enough to represent the 
               number of days.
            </exception>
            <param name="timeSpan">
               A <strong>TimeSpan</strong> to initialize <strong>TdIntervalDayToMinute</strong>.
            </param>
            <param name="precision">Number of significant digits of the day.</param>
        </member>
        <member name="M:Teradata.Client.Provider.TdIntervalDayToMinute.CompareTo(Teradata.Client.Provider.TdIntervalDayToMinute)">
            <summary>
               Compares this instance to the specified <see cref="T:Teradata.Client.Provider.TdIntervalDayToMinute"/>  
               parameter <paramref name="other"/>.
            </summary>
            <returns>
               The result of the comparison is returned as a signed integer.
            </returns>
            <remarks>
            	<para>
                    The integer returned when this instance is compared to <paramref name="other"/>
                    indicates the following:
                </para>
            	<para>
            		<list type="table">
            			<listheader>
            				<term>Return Value</term>
            				<description>Meaning</description>
            			</listheader>
            			<item>
            				<term>Less than Zero</term>
            				<description>
            					<para>
                                    This instance is less than <paramref name="other"/>
                                </para>
            					<para>-or-</para>
            					<para>This instance is <see cref="F:Teradata.Client.Provider.TdIntervalDayToMinute.Null"/> and
                                   <paramref name="other"/> is non-null.
                               </para>
            				</description>
            			</item>
            			<item>
            				<term>Zero</term>
            				<description>
            					<para>
                                    This instance is equal to <paramref name="other"/>
                                </para>
            					<para>-or-</para>
            					<para>
                                   This instance is <Strong>Null</Strong> and <paramref name="other"/> is
                                   <Strong>Null</Strong>.
                                </para>
            				</description>
            			</item>
            			<item>
            				<term>Greater than Zero</term>
            				<description>
            					<para>
                                    This instance is greater than
                                    <paramref name="other"/>
                                </para>
            					<para>-or-</para>
            					<para>
            						<paramref name="other"/> is <Strong>Null</Strong> and this instance is non-null.
                                </para>
            				</description>
            			</item>
            		</list>
            	</para>
            </remarks>
            <param name="other">The <strong>TdIntervalDayToMinute</strong> to compare.</param>
        </member>
        <member name="M:Teradata.Client.Provider.TdIntervalDayToMinute.CompareTo(System.Object)">
            <summary>
               Compares this instance to the specified <see cref="T:Teradata.Client.Provider.TdIntervalDayToMinute"/> 
               <paramref name="obj"/>. 
            </summary>
            <returns>
               The result of the comparison is returned as a signed integer.
            </returns>
            <remarks>
            	<para>
                    The integer returned when this instance is compared to <paramref name="obj"/>
                    indicates the following:
                </para>
            	<para>
            		<list type="table">
            			<listheader>
            				<term>Return Value</term>
            				<description>Meaning</description>
            			</listheader>
            			<item>
            				<term>Less than Zero</term>
            				<description>
            					<para>This instance is less than <paramref name="obj"/></para>
            					<para>-or-</para>
            					<para>
                                   This instance is <see cref="F:Teradata.Client.Provider.TdIntervalDayToMinute.Null"/> and 
                                   <paramref name="obj"/> is non-null.
                               </para>
            				</description>
            			</item>
            			<item>
            				<term>Zero</term>
            				<description>
            					<para>
                                    This instance is equal to <paramref name="obj"/>
                                </para>
            					<para>-or-</para>
            					<para>
                                   This instance is <Strong>Null</Strong> and <paramref name="obj"/> is
                                   <Strong>Null</Strong>.
                                </para>
            				</description>
            			</item>
            			<item>
            				<term>Greater than Zero</term>
            				<description>
            					<para>
                                    This instance is greater than <paramref name="obj"/>.
                                </para>
            					<para>-or-</para>
            					<para>
            						<paramref name="obj"/> is <Strong>Null</Strong> and this instance is non-null
                                </para>
            					<para>-or-</para>
            					<para>
            						<paramref name="obj"/> is a <c>null</c> reference.
                                </para>
            				</description>
            			</item>
            		</list>
            	</para>
               <para>
                   <paramref name="obj"/> must be an instance of <strong>TdIntervalDayToMinute</strong> type or 
                   <c>null</c> reference.
               </para>
            </remarks>
            <exception cref="T:System.ArgumentException">
               <paramref name="obj"/> is not of same type as <strong>TdIntervalDayToMinute</strong>.
            </exception>
            <seealso cref="M:Teradata.Client.Provider.TdIntervalDayToMinute.CompareTo(Teradata.Client.Provider.TdIntervalDayToMinute)"/>
            <overloads>
               Compares this instance to the supplied <strong>TdIntervalDayToMinute</strong> 
               and returns whether this instance is less than, equal or greater than the supplied 
               <strong>TdIntervalDayToMinute</strong>.
            </overloads>
            <param name="obj">A <strong>TdIntervalDayToMinute</strong> object to compare.</param>
        </member>
        <member name="M:Teradata.Client.Provider.TdIntervalDayToMinute.Equals(Teradata.Client.Provider.TdIntervalDayToMinute)">
            <summary>
               Compares this instance and another <see cref="T:Teradata.Client.Provider.TdIntervalDayToMinute"/> to determine 
               whether they are equal. 
            </summary>
            <returns>
               <c>true</c> if the two <strong>TdIntervalDayToMinute</strong> objects are equal, 
               <c>false</c> otherwise.
            </returns>
            <remarks>
            	<para>
            		The return value is <c>true</c> if the instance is 
                    equal to the <paramref name="other"/>, <c>false</c> otherwise.
                </para>
            	<para>
            		<list type="table">
            			<listheader>
            				<term>Return Value</term>
            				<description>Description</description>
            			</listheader>
            			<item>
            				<term><c>true</c></term>
                            <description>
                                <para>This instance and <paramref name="other"/> are <see cref="F:Teradata.Client.Provider.TdIntervalDayToMinute.Null"/></para>
                                <para>-or-</para>
                                <para>This instance is equal to <paramref name="other"/>.</para>
                            </description>
            			</item>
            			<item>
            				<term><c>false</c></term>
                            <description>
                            <para>This instance is <strong>Null</strong> and <paramref name="other"/> is not <strong>Null</strong></para>
                            <para>-or-</para>
                            <para>This instance is not <strong>Null</strong> and <paramref name="other"/> is <strong>Null</strong></para>
                            <para>-or-</para>
                            <para>This instance is not equal to <paramref name="other"/>.</para>
                            </description>
            			</item>
            		</list>
            	</para>
            </remarks>
            <overloads>
               Returns a value indicating whether two instances of 
               <strong>TdIntervalDayToMinute</strong> are equal.
            </overloads>
            <param name="other">
               <strong>TdIntervalDayToMinute</strong> that will be compared to this instance 
               of <strong>TdIntervalDayToMinute</strong>.
            </param>
        </member>
        <member name="M:Teradata.Client.Provider.TdIntervalDayToMinute.Equals(Teradata.Client.Provider.TdIntervalDayToMinute,Teradata.Client.Provider.TdIntervalDayToMinute)">
            <summary>
               Compares two <see cref="T:Teradata.Client.Provider.TdIntervalDayToMinute"/> instances to determine whether they are equal.
            </summary>
            <returns>
               <c>true</c> if the two <strong>TdIntervalDayToMinute</strong> instances are equal, 
               <c>false</c> otherwise.
            </returns>
            <remarks>
            	<para>
            		The return value is <c>true</c> if the <paramref name="left"/> is 
                    equal to the <paramref name="right"/>, <c>false</c> otherwise.
                </para>
            	<para>
            		<list type="table">
            			<listheader>
            				<term>Return Value</term>
            				<description>Description</description>
            			</listheader>
            			<item>
            				<term><c>true</c></term>
                            <description>
                                <para>
                                    <paramref name="left"/> is equal to <paramref name="right"/>
                                </para>
                                <para>-or-</para>
                                <para>
                                   <paramref name="left"/> and <paramref name="right"/> 
                                   are <see cref="F:Teradata.Client.Provider.TdIntervalDayToMinute.Null"/>.
                                </para>
                            </description>
            			</item>
            			<item>
            				<term><c>false</c></term>
                            <description>
                              <para>
                                   <paramref name="left"/> is not equal to <paramref name="right"/>
                              </para>
                              <para>-or-</para>
                              <para>
                                   <paramref name="left"/> is not <strong>Null</strong> and 
                                   <paramref name="right"/> is <strong>Null</strong>
                               </para>
                              <para>-or-</para>
                              <para>
                                   <paramref name="left"/> is <strong>Null</strong> and 
                                    <paramref name="right"/> is not <strong>Null</strong>.
                               </para>
                            </description>
            			</item>
            		</list>
            	</para>
            </remarks>
            <example>
                The following code example uses various comparison methods and operators.
                <code lang="CS">
            TdIntervalDayToMinute firstInterval = new TdIntervalDayToMinute(5, 4, 15);
            TdIntervalDayToMinute secondInterval = new TdIntervalDayToMinute(20, 4, 15);
             
            // The following comparison methods and operators are equivalent
            if (false == TdIntervalDayToMinute.Equals(firstInterval, secondInterval) ||
                firstInterval != secondInterval ||
                true == TdIntervalDayToMinute.NotEquals(firstInterval, secondInterval) )
            {
               Console.WriteLine(“firstInterval does not equal secondInterval”);
            }
                </code>
            </example>
            <overloads>
               Returns a value indicating whether two instances of 
               <strong>TdIntervalDayToMinute</strong> are equal.
            </overloads>
            <param name="left">A <strong>TdIntervalDayToMinute</strong> instance.</param>
            <param name="right">A <strong>TdIntervalDayToMinute</strong> instance.</param>
        </member>
        <member name="M:Teradata.Client.Provider.TdIntervalDayToMinute.Compare(Teradata.Client.Provider.TdIntervalDayToMinute,Teradata.Client.Provider.TdIntervalDayToMinute)">
            <summary>
               Two <see cref="T:Teradata.Client.Provider.TdIntervalDayToMinute"/> intervals are compared and a value is 
               returned that indicates <paramref name="left"/> is greater than, less than or 
               equal to <paramref name="right"/>.
            </summary>
            <returns>The result of the comparison is returned as a signed integer.</returns>
            <remarks>
            	<list type="table">
            		<listheader>
            			<term>Return Value</term>
            			<description>Description</description>
            		</listheader>
            		<item>
            			<term>Less than Zero</term>
            			<description>
                           <para>
                               <paramref name="left"/> is less than <paramref name="right"/>
                           </para>
            				<para>-or-</para>
                           <para>
                              <paramref name="left"/> is <see cref="F:Teradata.Client.Provider.TdIntervalDayToMinute.Null"/>
                              and <paramref name="right"/> is not <strong>Null</strong>.
                           </para>
                        </description>
            		</item>
            		<item>
            			<term>Zero</term>
            			<description>
            				<para>
                               <paramref name="left"/> equals <paramref name="right"/>
                           </para>
            				<para>-or-</para>
                           <para>
                                <paramref name="left"/> is <strong>Null</strong> 
                                 and <paramref name="right"/> is <strong>Null</strong>.
                           </para>
                        </description>
            		</item>
            		<item>
            			<term>Greater than Zero</term>
            			<description>
            				<para><paramref name="left"/> is greater than <paramref name="right"/></para>
            				<para>-or-</para>
            				<para><paramref name="left"/> is not <strong>Null</strong> and
                            <paramref name="right"/> is <strong>Null</strong>.</para>
                        </description>
            		</item>
            	</list>
            </remarks>
            <param name="left">An instance of <strong>TdIntervalDayToMinute</strong>.</param>
            <param name="right">An instance of <strong>TdIntervalDayToMinute</strong>.</param>
        </member>
        <member name="M:Teradata.Client.Provider.TdIntervalDayToMinute.NotEquals(Teradata.Client.Provider.TdIntervalDayToMinute,Teradata.Client.Provider.TdIntervalDayToMinute)">
            <summary>
                Compares two <see cref="T:Teradata.Client.Provider.TdIntervalDayToMinute"/> interval types to determine whether the
                <paramref name="left"/> is not equal to <paramref name="right"/>.
            </summary>
            <returns>
            	<para>
            		<c>true</c> indicates <paramref name="left"/> is not equal to
                    <paramref name="right"/>, <c>false</c> otherwise.
                </para>
            	<para>
            		<list type="table">
            			<listheader>
            				<term>Return Value</term>
            				<description>Description</description>
            			</listheader>
            			<item>
            				<term><c>true</c></term>
            				<description>
            					<para>
            						<paramref name="left"/> is less than or greater
                                    than <paramref name="right"/>
            					</para>
            					<para>-or-</para>
            					<para>
            						Either <paramref name="left"/> or <paramref name="right"/> is
                                   <see cref="F:Teradata.Client.Provider.TdIntervalDayToMinute.Null"/>.
                                </para>
            				</description>
            			</item>
            			<item>
            				<term><c>false</c></term>
            				<description>
            					<para>
            						<paramref name="left"/> is equal to
                                    <paramref name="right"/>
            					</para>
            					<para>-or-</para>
            					<para>
            						<paramref name="left"/> and <paramref name="right"/> are
                                   <strong>Null</strong>.
                                </para>
            				</description>
            			</item>
            		</list>
            	</para>
            </returns>
            <param name="left">An instance of <strong>TdIntervalDayToMinute</strong>.</param>
            <param name="right">An instance of <strong>TdIntervalDayToMinute</strong>.</param>
        </member>
        <member name="M:Teradata.Client.Provider.TdIntervalDayToMinute.GreaterThan(Teradata.Client.Provider.TdIntervalDayToMinute,Teradata.Client.Provider.TdIntervalDayToMinute)">
            <summary>
               Determines whether the <paramref name="left"/> is greater than the <paramref name="right"/>.
            </summary>
            <returns>
            	<para>
            		<c>true</c> indicates the <paramref name="left"/> is greater than
                    the <paramref name="right"/>, <c>false</c> otherwise.
                </para>
            	<para>
            		<list type="table">
            			<listheader>
            				<term>Return Value</term>
            				<description>Description</description>
            			</listheader>
            			<item>
            				<term><c>true</c></term>
            				<description>
            					<paramref name="left"/> and
                                <paramref name="right"/> are not
                                <see cref="F:Teradata.Client.Provider.TdIntervalDayToMinute.Null"/> and
                                <paramref name="left"/> is greater than
                                <paramref name="right"/>.
            				</description>
            			</item>
            			<item>
            				<term><c>false</c></term>
            				<description>
            					<para>
                                    The <paramref name="left"/> is less than or equal
                                    to <paramref name="right"/>
            					</para>
            					<para>-or-</para>
            					<para>
                                   <paramref name="left"/> and / or <paramref name="right"/>
                                   is <strong>Null</strong>.
                                </para>
            				</description>
            			</item>
            		</list>
            	</para>
            </returns>
            <remarks>
            	<para>
                    Comparison operators always return <c>false</c> if one of the operands is
                    <strong>Null</strong>. Therefore you should not assume that the reverse
                    condition is <c>true</c>. For example you cannot assume that the
                    <paramref name="left"/> is less than or equal to the
                    <paramref name="right"/> if <c>GreaterThan</c> returns <c>false</c>.
                </para>
            	<para>
                    The reverse condition is <c>true</c> when the
                    <paramref name="left"/> and the
                    <paramref name="right"/> are not <strong>Null</strong>.
                </para>
            </remarks>
            <param name="left">An instance of <see cref="T:Teradata.Client.Provider.TdIntervalDayToMinute"/>.</param>
            <param name="right">An instance of <strong>TdIntervalDayToMinute</strong>.</param>
        </member>
        <member name="M:Teradata.Client.Provider.TdIntervalDayToMinute.GreaterThanOrEqual(Teradata.Client.Provider.TdIntervalDayToMinute,Teradata.Client.Provider.TdIntervalDayToMinute)">
            <summary>
               This operator determines whether the <paramref name="left"/> is greater than or 
               equal to the <paramref name="right"/>.
            </summary>
            <returns>
            	<para>
            		<c>true</c> indicates the <paramref name="left"/> is greater than
                    or equal to the <paramref name="right"/>, <c>false</c> otherwise.
                </para>
            	<para>
            		<list type="table">
            			<listheader>
            				<term>Return Value</term>
            				<description>Description</description>
            			</listheader>
            			<item>
            				<term><c>true</c></term>
            				<description>
            					<para>
            						<paramref name="left"/> and
                                    <paramref name="right"/> are not
                                    <see cref="F:Teradata.Client.Provider.TdIntervalDayToMinute.Null"/> and
                                    <paramref name="left"/> is greater than or equal
                                    to <paramref name="right"/>
            					</para>
            					<para>-or-</para>
            					<para>
            						<paramref name="left"/> is <strong>Null</strong>
                                    and <paramref name="right"/> is
                                    <strong>Null</strong>.
            					</para>
            				</description>
            			</item>
            			<item>
            				<term><c>false</c></term>
            				<description>
            					<para>
                                    The <paramref name="left"/> is less than
                                    <paramref name="right"/>
            					</para>
            					<para>-or-</para>
            					<para>
                                    Either <paramref name="left"/> or
                                    <paramref name="right"/> is <strong>Null</strong>.
            					</para>
            				</description>
            			</item>
            		</list>
            	</para>
            </returns>
            <remarks>
            	<para>
                    Comparison operators always return <c>false</c> if one of the operands is
                    <strong>Null</strong>. Therefore you should not assume that the reverse
                    condition is <c>true</c>. For example you cannot assume that the
                    <paramref name="left"/> is less than the
                    <paramref name="right"/> if the <c>GreaterThanOrEqual</c> method returns
                    <c>false</c>.
                </para>
            	<para>
                    The reverse condition is <c>true</c> when the
                    <paramref name="left"/> and the
                    <paramref name="right"/> are not <strong>Null</strong>.
                </para>
            </remarks>
            <param name="left">An instance of <see cref="T:Teradata.Client.Provider.TdIntervalDayToMinute"/>.</param>
            <param name="right">An instance of <strong>TdIntervalDayToMinute</strong>.</param>
        </member>
        <member name="M:Teradata.Client.Provider.TdIntervalDayToMinute.LessThan(Teradata.Client.Provider.TdIntervalDayToMinute,Teradata.Client.Provider.TdIntervalDayToMinute)">
            <summary>
               This method determines whether the <paramref name="left"/> is less than the <paramref name="right"/>.
            </summary>
            <returns>
            	<para>
            		<c>true</c> indicates the <paramref name="left"/> is less than
                    the <paramref name="right"/>, <c>false</c> otherwise.
                </para>
            	<para>
            		<list type="table">
            			<listheader>
            				<term>Return Value</term>
            				<description>Description</description>
            			</listheader>
            			<item>
            				<term><c>true</c></term>
            				<description>
            					<paramref name="left"/> and <paramref name="right"/> are
                                not <see cref="F:Teradata.Client.Provider.TdIntervalDayToMinute.Null"/> and
                                <paramref name="left"/> is less than
                                <paramref name="right"/>.
            				</description>
            			</item>
            			<item>
            				<term><c>false</c></term>
            				<description>
            					<para>
                                    The <paramref name="left"/> is greater than or
                                    equal to <paramref name="right"/>
            					</para>
            					<para>-or-</para>
            					<para>
                                    <paramref name="left"/> and / or <paramref name="right"/> is
                                    <strong>Null</strong>.
            					</para>
            				</description>
            			</item>
            		</list>
            	</para>
            </returns>
            <remarks>
            	<para>
                    Comparison operators always return <c>false</c> if one of the operands is
                    <strong>Null</strong>. Therefore you should not assume that the reverse
                    condition is <c>true</c>. For example you cannot assume that the
                    <paramref name="left"/> is greater than or equal to the
                    <paramref name="right"/> if the <c>LessThan</c> method returns
                    <c>false</c>.
                </para>
            	<para>
                    The reverse condition is <c>true</c> when the
                    <paramref name="left"/> and the
                    <paramref name="right"/> are not <strong>Null</strong>.
                </para>
            </remarks>
            <param name="left">An instance of <see cref="T:Teradata.Client.Provider.TdIntervalDayToMinute"/>.</param>
            <param name="right">An instance of <strong>TdIntervalDayToMinute</strong>.</param>
        </member>
        <member name="M:Teradata.Client.Provider.TdIntervalDayToMinute.LessThanOrEqual(Teradata.Client.Provider.TdIntervalDayToMinute,Teradata.Client.Provider.TdIntervalDayToMinute)">
            <summary>
                This method determines whether the <paramref name="left"/> is less
                than or equal to the <paramref name="right"/>.
            </summary>
            <returns>
            	<para>
            		<c>true</c> indicates the <paramref name="left"/> is less than or
                    equal to the <paramref name="right"/>, <c>false</c> otherwise.
                </para>
            	<para>
            		<list type="table">
            			<listheader>
            				<term>Return Value</term>
            				<description>Description</description>
            			</listheader>
            			<item>
            				<term><c>true</c></term>
            				<description>
            					<para>
            						<paramref name="left"/> and
                                    <paramref name="right"/> are not
                                    <see cref="F:Teradata.Client.Provider.TdIntervalDayToMinute.Null"/> and
                                    <paramref name="left"/> is less than or equal to
                                    <paramref name="right"/>
            					</para>
            					<para>-or-</para>
            					<para>
            						<paramref name="left"/> is <strong>Null</strong>
                                    and <paramref name="right"/> is
                                    <strong>Null</strong>.
            					</para>
            				</description>
            			</item>
            			<item>
            				<term><c>false</c></term>
            				<description>
            					<para>
                                    The <paramref name="left"/> is greater than
                                    <paramref name="right"/>
            					</para>
            					<para>-or-</para>
            					<para>
                                    Either <paramref name="left"/> or
                                    <paramref name="right"/> is <strong>Null</strong>.
            					</para>
            				</description>
            			</item>
            		</list>
            	</para>
            </returns>
            <remarks>
            	<para>
                    Comparison operators always return <c>false</c> if one of the operands is
                    <strong>Null</strong>. Therefore you should not assume that the reverse
                    condition is <c>true</c>. For example you cannot assume that the
                    <paramref name="left"/> is greater than the
                    <paramref name="right"/> if the <c>LessThanOrEqual</c> method returns
                    <c>false</c>.
                </para>
            	<para>
                    The reverse condition is <c>true</c> when the
                    <paramref name="left"/> and the
                    <paramref name="right"/> are not <strong>Null</strong>.
                </para>
            </remarks>
            <param name="left">An instance of <see cref="T:Teradata.Client.Provider.TdIntervalDayToMinute"/>.</param>
            <param name="right">An instance of <strong>TdIntervalDayToMinute</strong>.</param>
        </member>
        <member name="M:Teradata.Client.Provider.TdIntervalDayToMinute.Equals(System.Object)">
            <summary>
               Compares this instance and <paramref name="obj"/> to determine whether they
               are equal. 
            </summary>
            <returns>
               <c>true</c> if the two TdIntervalDayToMinutes are equal, 
               <c>false</c> otherwise.
            </returns>
            <remarks>
            	<para>
                    The return value is <c>true</c> if the instance is equal to the
                    <paramref name="obj"/>, <c>false</c> otherwise.
                </para>
            	<para>
            		<list type="table">
            			<listheader>
            				<term>Return Value</term>
            				<description>Description</description>
            			</listheader>
            			<item>
            				<term>
            					<c>true</c>
            				</term>
            				<description>
            					<para>
                                    This instance and <paramref name="obj"/> are
                                    <see cref="F:Teradata.Client.Provider.TdIntervalDayToMinute.Null"/>.
                                </para>
            					<para>-or-</para>
            					<para>
                                    This instance is equal to <paramref name="obj"/>.
                                </para>
            				</description>
            			</item>
            			<item>
            				<term>
            					<c>false</c>
            				</term>
            				<description>
            					<para>
                                    This instance is not equal to
                                    <paramref name="obj"/>.
                                </para>
            					<para>-or-</para>
            					<para>
                                    This instance is not <strong>Null</strong> and
                                    <paramref name="obj"/> is <strong>Null</strong>.
                                </para>
            					<para>-or-</para>
            					<para>
                                    This instance is <strong>Null</strong> and
                                    <paramref name="obj"/> is not <strong>Null</strong>
            					</para>
            					<para>-or-</para>
            					<para>
            						<paramref name="obj"/> is a <strong>null</strong>
                                    reference.
                                </para>
            				</description>
            			</item>
            		</list>
            	</para>
            </remarks>
            <example>
                The following code example uses various comparison methods and operators.
                <code lang="CS">
            // Create TdIntervalDayToMinute with 5 days, 1 hour, 30 minutes and default precision
            TdIntervalDayToMinute firstInterval = new TdIntervalDayToMinute(5, 1, 30);
            // Create TdIntervalDayToMinute with 20 days, 2 hour, 30 minutes and default precision
            Object intervalObj = new TdIntervalDayToMinute(20, 2, 30);
             
            // The following comparison methods and operators are equivalent
            if (false == TdIntervalDayToMinute.Equals(firstInterval, (TdIntervalDayToMinute)intervalObj) ||
                firstInterval != (TdIntervalDayToMinute)intervalObj ||
                false == firstInterval.Equals(intervalObj) )
            {
               Console.WriteLine(“firstInterval does not equal intervalObj”);
            }
                </code>
            </example>
            <overloads>
               Returns a value indicating whether two instances of <strong>TdIntervalDayToMinute</strong> 
               are equal.
            </overloads>
            <param name="obj">
               <strong>TdIntervalDayToMinute</strong> that will be compared to this instance 
               of <strong>TdIntervalDayToMinute</strong>.
            </param>
        </member>
        <member name="M:Teradata.Client.Provider.TdIntervalDayToMinute.GetHashCode">
            <summary>
               Returns the hash code for this instance. 
            </summary>
            <returns>The hash code is returned.</returns>
        </member>
        <member name="M:Teradata.Client.Provider.TdIntervalDayToMinute.ToString(System.String)">
            <summary>
               Converts this instance to its equivalent String representation using the specified format.
            </summary>
            <remarks>
            	<para>This method supports the following format specifiers:</para>
            	<para>
            		<list type="table">
            			<listheader>
            				<term>Format Specifier</term>
            				<description>Description</description>
            			</listheader>
            			<item>
            				<term>G</term>
            				<description>
            					<para>General interval format.</para>
            					<para>[sign][days] [hh]:[mm]</para>
            				</description>
            			</item>
            			<item>
            				<term>L</term>
            				<description>
            					<para>Teradata literal format. This string may be used in
                                generating SQL against the Teradata database.</para>
            					<para>INTERVAL [sign]'[days] [hh]:[mm]' DAY TO MINUTE</para>
            				</description>
            			</item>
            		</list>
            	</para>
            	<para>Below is the description of each format item.</para>
            	<para>
            		<list type="table">
            			<listheader>
            				<term>Format Item</term>
            				<description>Description</description>
            			</listheader>
            			<item>
            				<term>sign</term>
            				<description>If negative a minus sign will be displayed.</description>
            			</item>
            			<item>
            				<term>days</term>
            				<description>The number of days (one to four digits in
                            length).</description>
            			</item>
            			<item>
            				<term>hh</term>
            				<description>The number of hours from 00 - 23.</description>
            			</item>
            			<item>
            				<term>mm</term>
            				<description>The number of minutes from 00 - 59.</description>
            			</item>
            		</list>
            	</para>
            </remarks>
            <returns>
               A string representation of the <strong>TdIntervalDayToMinute</strong> 
               will be returned.
            </returns>
            <exception cref="T:System.FormatException" caption="FormatException">
               <paramref name="format"/> contains an invalid format specifier.
            </exception>
            <param name="format">
               The format string that will be used to format the <strong>TdIntervalDayToMinute</strong>. 
            </param>
        </member>
        <member name="M:Teradata.Client.Provider.TdIntervalDayToMinute.ToString">
            <summary>
               Converts this instance to its equivalent String representation.
            </summary>
            <remarks>
               <para>The string returned will follow this format:</para>
            	<para>[sign][days][space character][hh]:[mm]</para>
            	<para>Below is the description of each format item.</para>
            	<para>
            		<list type="table">
            			<listheader>
            				<term>Format Item</term>
            				<description>Description</description>
            			</listheader>
            			<item>
            				<term>sign</term>
            				<description>If negative a minus sign will be displayed.</description>
            			</item>
            			<item>
            				<term>days</term>
            				<description>The number of days (one to four digits in
                            length).</description>
            			</item>
            			<item>
            				<term>hh</term>
            				<description>The number of hours from 00 - 23.</description>
            			</item>
            			<item>
            				<term>mm</term>
            				<description>The number of minutes from 00 - 59.</description>
            			</item>
            		</list>
            	</para>
            	<para>
                    Culture specific settings are not supported.
            	</para>
            </remarks>
            <returns>
               A string representation of the <strong>TdIntervalDayToMinute</strong> 
               will be returned.
            </returns>
        </member>
        <member name="M:Teradata.Client.Provider.TdIntervalDayToMinute.Parse(System.String)">
            <summary>
               The specified string is converted into an equivalent <see cref="T:Teradata.Client.Provider.TdIntervalDayToMinute"/>.
            </summary>
            <returns>
               A <strong>TdIntervalDayToMinute</strong> is returned that is equivalent to the <strong>TdIntervalDayToMinute</strong> 
               contained in the input string.
            </returns>
            <exception cref="T:System.FormatException" caption="FormatException">
               <paramref name="value"/> cannot be converted into a 
               <strong>TdIntervalDayToMinute</strong> interval.
            </exception>
            <exception cref="T:System.ArgumentNullException" caption="ArgumentNullException">
               <paramref name="value"/> is a <c>null</c> reference.
            </exception>
            <exception cref="T:System.OverflowException">
               The resultant operation returns a value greater than the <see cref="F:Teradata.Client.Provider.TdIntervalDayToMinute.MaxValue"/> 
               or less than the <see cref="F:Teradata.Client.Provider.TdIntervalDayToMinute.MinValue"/>.
            </exception>
            <remarks>
            	<para>This method supports the following string formats:</para>
            	<para>
            		<list type="table">
            			<listheader>
            				<term>String Format</term>
            				<description>Description</description>
            			</listheader>
            			<item>
            				<term>General interval format</term>
            				<description>
            					<para>[sign][days] [hh]:[mm]</para>
            				</description>
            			</item>
            			<item>
            				<term>Teradata literal format. This string may be used in
                                generating SQL against the Teradata database.</term>
            				<description>
            					<para>INTERVAL [sign]'[days] [hh]:[mm]' DAY TO MINUTE</para>
            				</description>
            			</item>
            		</list>
            	</para>
            	<para>Below is the description of each format item.</para>
            	<para>
            		<list type="table">
            			<listheader>
            				<term>Format Item</term>
            				<description>Description</description>
            			</listheader>
            			<item>
            				<term>sign</term>
            				<description>If negative a minus sign will be displayed.</description>
            			</item>
            			<item>
            				<term>days</term>
            				<description>The number of days (one to four digits in
                            length).</description>
            			</item>
            			<item>
            				<term>hh</term>
            				<description>The number of hours from 00 - 23.</description>
            			</item>
            			<item>
            				<term>mm</term>
            				<description>The number of minutes from 00 - 59.</description>
            			</item>
            		</list>
            	</para>
            	<para>
                    Cultural settings are not supported.
            	</para>
            	<para>
            		While parsing the <paramref name="value"/> the <see cref="P:Teradata.Client.Provider.TdIntervalDayToMinute.Precision"/> will be
            		set to the number of digits contained within the day component. 
            	</para>
            	<para>
            		For example a <paramref name="value"/> of "100 5:25" will
            		contain a precision of 3.
            	</para>
            </remarks>
            <overloads>
            	The specified string is converted into an equivalent <strong>TdIntervalDayToMinute</strong>
                interval.
            </overloads>
            <param name="value">A string to be converted into a <strong>TdIntervalDayToMinute</strong>.</param>
        </member>
        <member name="M:Teradata.Client.Provider.TdIntervalDayToMinute.TryParse(System.String,Teradata.Client.Provider.TdIntervalDayToMinute@)">
            <summary>
               The specified string is converted into an equivalent <see cref="T:Teradata.Client.Provider.TdIntervalDayToMinute"/>. 
            </summary>
            <returns>
                <c>true</c> if the conversion of <paramref name="value"/> succeeded, 
                <c>false</c> otherwise.
            </returns>
            <remarks>
            	<para>This method supports the following string formats:</para>
            	<para>
            		<list type="table">
            			<listheader>
            				<term>String Format</term>
            				<description>Description</description>
            			</listheader>
            			<item>
            				<term>General interval format</term>
            				<description>
            					<para>[sign][days] [hh]:[mm]</para>
            				</description>
            			</item>
            			<item>
            				<term>Teradata literal format. This string may be used in
                                generating SQL against the Teradata database.</term>
            				<description>
            					<para>INTERVAL [sign]'[days] [hh]:[mm]' DAY TO MINUTE</para>
            				</description>
            			</item>
            		</list>
            	</para>
            	<para>Below is the description of each format item.</para>
            	<para>
            		<list type="table">
            			<listheader>
            				<term>Format Item</term>
            				<description>Description</description>
            			</listheader>
            			<item>
            				<term>sign</term>
            				<description>If negative a minus sign will be displayed.</description>
            			</item>
            			<item>
            				<term>days</term>
            				<description>The number of days (one to four digits in
                            length).</description>
            			</item>
            			<item>
            				<term>hh</term>
            				<description>The number of hours from 00 - 23.</description>
            			</item>
            			<item>
            				<term>mm</term>
            				<description>The number of minutes from 00 - 59.</description>
            			</item>
            		</list>
            	</para>
            	<para>
                    Cultural settings are not supported.
            	</para>
            	<para>
            		While parsing the <paramref name="value"/> the <see cref="P:Teradata.Client.Provider.TdIntervalDayToMinute.Precision"/> will be
            		set to the number of digits contained within the day component.  
            	</para>
            	<para>
            		For example a <paramref name="value"/> of "20 10:25" will
            		contain a precision of 2.
            	</para>
            </remarks>
            <overloads>
               The specified string is converted into an equivalent 
               <see cref="T:Teradata.Client.Provider.TdIntervalDayToMinute"/> interval.  A <c>true</c> is returned 
               if the conversion succeeded, <c>false</c> otherwise.
            </overloads>
            <param name="value">A string to be converted into a <strong>TdIntervalDayToMinute</strong>.</param>
            <param name="result">The converted string into a <strong>TdIntervalDayToMinute</strong>.</param>
        </member>
        <member name="M:Teradata.Client.Provider.TdIntervalDayToMinute.GetXmlSchema(System.Xml.Schema.XmlSchemaSet)">
             <summary>
                Gets the XML Qualified name for <see cref="T:Teradata.Client.Provider.TdIntervalDayToMinute"/> XML type mapping.
             </summary>
             <param name="xmlSchemaSet">
                Holds zero or more XML Schema definition language (XSD) schemas.
             </param>
             <returns>
                Returns <strong>xs:duration</strong>.
             </returns>
             <example>
             This example shows how to use the <strong>TdIntervalDayToMinute</strong> with <see cref="T:System.Xml.Serialization.XmlSerializer"/> class.
             <see cref="T:System.Xml.Serialization.XmlElementAttribute"/> is used to indicate that the Teradata Database column can be <strong>Null</strong>.
             <code>
              public class Order
              {
                  public TdTimestamp Date;
             
                  public TdIntervalDayToMinute ExpirationPeriod;
             
                  public TdTimestamp ExpirationDate;
            
                  public Int32 ProductId;
            
                  public Int32 Quantity;
            
                  public Int32? BackOrderQuantity;
            
                  [XmlElementAttribute(IsNullable = true)]        
                  public TdDecimal BackOrderPrice;
              }
             
              internal class OrderWriter
              {
              
                  public static void Write()
                  {
                      // Setup the order
                      Order x = new Order();
              
                      x.Date = new TdTimestamp(DateTime.Today);
                      // 5 days, 4 hours and 30 minutes
                      x.ExpirationPeriod = new TdIntervalDayToMinute(5, 4, 30);
                      x.ExpirationDate = x.Date + x.ExpirationPeriod;
                      x.ProductId = 100;
                      x.Quantity = 2000;
                      x.BackOrderQuantity = null;
                      x.BackOrderPrice = TdDecimal.Null;
            
                      // Write out today's orders to the file.
                      //
                      // Open the file.
                      XmlWriterSettings settings = new XmlWriterSettings();
                      settings.Indent = true;
                      XmlWriter writer = XmlWriter.Create(@"C:\Temp\TodayOrders.XML", settings);
                      writer.WriteStartElement("TodayOrders");
                
                      // Write out the schema.
                      XmlSchemas schemas = new XmlSchemas();
                      XmlSchemaExporter schExporter = new XmlSchemaExporter(schemas);
                      schExporter.ExportTypeMapping(new XmlReflectionImporter().ImportTypeMapping(typeof(Order)));
                      schemas[0].Write(writer);
            
                      // Write out the orders.
                      XmlSerializer xml = new XmlSerializer(typeof(Order));
                      xml.Serialize(writer, x);
              
                      // Close the document.
                      writer.WriteEndDocument();
                      writer.Close();
                  }
              }
             
              /* Output is:
             
              &lt;TodayOrders&gt;
                &lt;xs:schema elementFormDefault="qualified" xmlns:xs="http://www.w3.org/2001/XMLSchema"&gt;
                  &lt;xs:element name="Order" nillable="true" type="Order" /&gt;
                  &lt;xs:complexType name="Order"&gt;
                    &lt;xs:sequence&gt;
                      &lt;xs:element minOccurs="1" maxOccurs="1" name="Date" type="xs:dateTime" /&gt;
                      &lt;xs:element minOccurs="1" maxOccurs="1" name="ExpirationPeriod" type="xs:duration" /&gt;
                      &lt;xs:element minOccurs="1" maxOccurs="1" name="ExpirationDate" type="xs:dateTime" /&gt;
                      &lt;xs:element minOccurs="1" maxOccurs="1" name="ProductId" type="xs:int" /&gt;
                      &lt;xs:element minOccurs="1" maxOccurs="1" name="Quantity" type="xs:int" /&gt;
                      &lt;xs:element minOccurs="1" maxOccurs="1" name="BackOrderQuantity" nillable="true" type="xs:int" /&gt;
                      &lt;xs:element minOccurs="1" maxOccurs="1" name="BackOrderPrice" nillable="true" type="xs:decimal" /&gt;
                    &lt;/xs:sequence&gt;
                  &lt;/xs:complexType&gt;
                &lt;/xs:schema&gt;
                &lt;Order xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xmlns:xsd="http://www.w3.org/2001/XMLSchema"&gt;
                  &lt;Date&gt;2008-02-01T00:00:00-08:00&lt;/Date&gt;
                  &lt;ExpirationPeriod&gt;P5DT4H30M&lt;/ExpirationPeriod&gt;
                  &lt;ExpirationDate&gt;2008-02-06T04:30:00-08:00&lt;/ExpirationDate&gt;
                  &lt;ProductId&gt;100&lt;/ProductId&gt;
                  &lt;Quantity&gt;2000&lt;/Quantity&gt;
                  &lt;BackOrderQuantity xsi:nil="true" /&gt;
                  &lt;BackOrderPrice xsi:nil="true" /&gt;
                &lt;/Order&gt;
              &lt;/TodayOrders&gt;
             
              */
             </code>
             </example>        
        </member>
        <member name="M:Teradata.Client.Provider.TdIntervalDayToMinute.op_Addition(Teradata.Client.Provider.TdIntervalDayToMinute,Teradata.Client.Provider.TdIntervalDayToMinute)">
            <summary>
               A <see cref="T:Teradata.Client.Provider.TdIntervalDayToMinute"/> is added to another 
               <strong>TdIntervalDayToMinute</strong>.
            </summary>
            <remarks>
            <para>
               If either parameter is <strong>Null</strong> a <see cref="F:Teradata.Client.Provider.TdIntervalDayToMinute.Null"/> will be returned.
            </para>
            <para>
               The returned <strong>TdIntervalDayToMinute</strong> will contain a precision 
               set to the <see cref="F:Teradata.Client.Provider.TdIntervalDayToMinute.MaxPrecision"/>.
            </para>        
            </remarks>
            <returns>
               A new <strong>TdIntervalDayToMinute</strong> as the result of adding a
               <strong>TdIntervalDayToMinute</strong> to another <strong>TdIntervalDayToMinute</strong>.
            </returns>        
            <exception cref="T:System.OverflowException">
               The resultant operation returns a value greater than the <see cref="F:Teradata.Client.Provider.TdIntervalDayToMinute.MaxValue"/> 
               or less than the <see cref="F:Teradata.Client.Provider.TdIntervalDayToMinute.MinValue"/>.
            </exception>
            <param name="left">A <strong>TdIntervalDayToMinute</strong>.</param>
            <param name="right">A <strong>TdIntervalDayToMinute</strong>.</param>
        </member>
        <member name="M:Teradata.Client.Provider.TdIntervalDayToMinute.op_Subtraction(Teradata.Client.Provider.TdIntervalDayToMinute,Teradata.Client.Provider.TdIntervalDayToMinute)">
            <summary>
               A <see cref="T:Teradata.Client.Provider.TdIntervalDayToMinute"/> is subtracted from another 
               <strong>TdIntervalDayToMinute</strong>.
            </summary>
            <remarks>
            <para>
               If either parameter is <strong>Null</strong> a <see cref="F:Teradata.Client.Provider.TdIntervalDayToMinute.Null"/> will be returned.
            </para>
            <para>
               The returned <strong>TdIntervalDayToMinute</strong> will contain a precision  
               set to the <see cref="F:Teradata.Client.Provider.TdIntervalDayToMinute.MaxPrecision"/>.
            </para>
            </remarks>
            <returns>
               A new <strong>TdIntervalDayToMinute</strong> as the result of subtracting 
               <paramref name="right"/> from the <paramref name="left"/>.
            </returns>
            <exception cref="T:System.OverflowException">
               The resultant operation returns a value greater than the <see cref="F:Teradata.Client.Provider.TdIntervalDayToMinute.MaxValue"/> 
               or less than the <see cref="F:Teradata.Client.Provider.TdIntervalDayToMinute.MinValue"/>.
            </exception>
            <param name="left">A <strong>TdIntervalDayToMinute</strong> to subtract from.</param>
            <param name="right">A <strong>TdIntervalDayToMinute</strong> to subtract.</param>
        </member>
        <member name="M:Teradata.Client.Provider.TdIntervalDayToMinute.op_Multiply(Teradata.Client.Provider.TdIntervalDayToMinute,System.Int32)">
            <summary>
               A <see cref="T:Teradata.Client.Provider.TdIntervalDayToMinute"/> is multiplied by an integer value.
            </summary>
            <remarks>
            <para>
               If <paramref name="interval"/> is <see cref="F:Teradata.Client.Provider.TdIntervalDayToMinute.Null"/> a <strong>Null</strong> will be returned.
            </para>
            <para>
               The returned <strong>TdIntervalDayToMinute</strong> will contain a precision 
               set to the <see cref="F:Teradata.Client.Provider.TdIntervalDayToMinute.MaxPrecision"/>.
            </para>
            </remarks>
            <returns>
               A new <strong>TdIntervalDayToMinute</strong> as the result of multiplying a 
               <strong>TdIntervalDayToMinute</strong> and an integer value.
            </returns>        
            <exception cref="T:System.OverflowException">
               The resultant operation returns a value greater than the <see cref="F:Teradata.Client.Provider.TdIntervalDayToMinute.MaxValue"/> 
               or less than the <see cref="F:Teradata.Client.Provider.TdIntervalDayToMinute.MinValue"/>.
            </exception>
            <param name="interval">A <strong>TdIntervalDayToMinute</strong>.</param>
            <param name="value">A multiplier.</param>
        </member>
        <member name="M:Teradata.Client.Provider.TdIntervalDayToMinute.op_Multiply(System.Int32,Teradata.Client.Provider.TdIntervalDayToMinute)">
            <summary>
               A <see cref="T:Teradata.Client.Provider.TdIntervalDayToMinute"/> is multiplied by an integer value.
            </summary>
            <remarks>
            <para>
               If <paramref name="interval"/> is <see cref="F:Teradata.Client.Provider.TdIntervalDayToMinute.Null"/> a <strong>Null</strong> will be returned.
            </para>
            <para>
               The returned <strong>TdIntervalDayToMinute</strong> will contain a precision 
               set to the <see cref="F:Teradata.Client.Provider.TdIntervalDayToMinute.MaxPrecision"/>.
            </para>
            </remarks>
            <returns>
               A new <strong>TdIntervalDayToMinute</strong> as the result of multiplying a 
               <strong>TdIntervalDayToMinute</strong> and an integer value.
            </returns>        
            <exception cref="T:System.OverflowException">
               The resultant operation returns a value greater than the <see cref="F:Teradata.Client.Provider.TdIntervalDayToMinute.MaxValue"/> 
               or less than the <see cref="F:Teradata.Client.Provider.TdIntervalDayToMinute.MinValue"/>.
            </exception>
            <param name="value">A multiplier.</param>
            <param name="interval">A <strong>TdIntervalDayToMinute</strong>.</param>
        </member>
        <member name="M:Teradata.Client.Provider.TdIntervalDayToMinute.op_Division(Teradata.Client.Provider.TdIntervalDayToMinute,System.Int32)">
            <summary>
               A <see cref="T:Teradata.Client.Provider.TdIntervalDayToMinute"/> is divided by an integer value.
            </summary>
            <remarks>
            <para>
               If <paramref name="interval"/> is <see cref="F:Teradata.Client.Provider.TdIntervalDayToMinute.Null"/> a <strong>Null</strong> will be returned.
            </para>
            <para>
               The returned <strong>TdIntervalDayToMinute</strong> will contain a precision 
               which matches the precision of <strong>interval</strong> parameter.
            </para>
            </remarks>
            <returns>
               A new <strong>TdIntervalDayToMinute</strong> as the result of dividing a 
               <strong>TdIntervalDayToMinute</strong> and an integer value.
            </returns>        
            <exception cref="T:System.DivideByZeroException">
               The <paramref name="value"/> divisor cannot be 0.
            </exception>
            <param name="interval">A <strong>TdIntervalDayToMinute</strong>.</param>
            <param name="value">A divisor.</param>
        </member>
        <member name="M:Teradata.Client.Provider.TdIntervalDayToMinute.Add(Teradata.Client.Provider.TdIntervalDayToMinute,Teradata.Client.Provider.TdIntervalDayToMinute)">
            <summary>
               Calculates the sum of two <see cref="T:Teradata.Client.Provider.TdIntervalDayToMinute"/> operands.
            </summary>
            <remarks>
            <para>
               If either parameter is <strong>Null</strong> a <see cref="F:Teradata.Client.Provider.TdIntervalDayToMinute.Null"/> will be returned.
            </para>
            <para>
               The returned <strong>TdIntervalDayToMinute</strong> will contain a precision 
               set to the <see cref="F:Teradata.Client.Provider.TdIntervalDayToMinute.MaxPrecision"/>.
            </para>
            </remarks>
            <exception cref="T:System.OverflowException">
               The resultant operation returns a value greater than the <see cref="F:Teradata.Client.Provider.TdIntervalDayToMinute.MaxValue"/> 
               or less than the <see cref="F:Teradata.Client.Provider.TdIntervalDayToMinute.MinValue"/>.
            </exception>
            <returns>A <strong>TdIntervalDayToMinute</strong> containing the sum.</returns>
            <param name="left">A <strong>TdIntervalDayToMinute</strong>.</param>
            <param name="right">A <strong>TdIntervalDayToMinute</strong>.</param>
        </member>
        <member name="M:Teradata.Client.Provider.TdIntervalDayToMinute.Subtract(Teradata.Client.Provider.TdIntervalDayToMinute,Teradata.Client.Provider.TdIntervalDayToMinute)">
            <summary>
               A <see cref="T:Teradata.Client.Provider.TdIntervalDayToMinute"/> is subtracted from another 
               <strong>TdIntervalDayToMinute</strong>.
            </summary>
            <remarks>
            <para>
               If either parameter is <strong>Null</strong> a <see cref="F:Teradata.Client.Provider.TdIntervalDayToMinute.Null"/> will be returned.
            </para>
            <para>
               The returned <strong>TdIntervalDayToMinute</strong> will contain a precision  
               set to the <see cref="F:Teradata.Client.Provider.TdIntervalDayToMinute.MaxPrecision"/>.
            </para>
            </remarks>
            <returns>
               A new <strong>TdIntervalDayToMinute</strong> as the result of subtracting 
               <paramref name="right"/> from the <paramref name="left"/>.
            </returns>
            <exception cref="T:System.OverflowException">
               The resultant operation returns a value greater than the <see cref="F:Teradata.Client.Provider.TdIntervalDayToMinute.MaxValue"/> 
               or less than the <see cref="F:Teradata.Client.Provider.TdIntervalDayToMinute.MinValue"/>.
            </exception>
            <param name="left">A <strong>TdIntervalDayToMinute</strong> to subtract from.</param>
            <param name="right">A <strong>TdIntervalDayToMinute</strong> to subtract.</param>
        </member>
        <member name="M:Teradata.Client.Provider.TdIntervalDayToMinute.Multiply(Teradata.Client.Provider.TdIntervalDayToMinute,System.Int32)">
            <summary>
               A <see cref="T:Teradata.Client.Provider.TdIntervalDayToMinute"/> is multiplied by an integer value.
            </summary>
            <remarks>
            <para>
               If <paramref name="interval"/> is <see cref="F:Teradata.Client.Provider.TdIntervalDayToMinute.Null"/> a <strong>Null</strong> will be returned.
            </para>
            <para>
               The returned <strong>TdIntervalDayToMinute</strong> will contain a precision 
               set to the <see cref="F:Teradata.Client.Provider.TdIntervalDayToMinute.MaxPrecision"/>.
            </para>
            </remarks>
            <returns>
               A new <strong>TdIntervalDayToMinute</strong> as the result of multiplying a 
               <strong>TdIntervalDayToMinute</strong> and an integer value.
            </returns>        
            <exception cref="T:System.OverflowException">
               The resultant operation returns a value greater than the <see cref="F:Teradata.Client.Provider.TdIntervalDayToMinute.MaxValue"/> 
               or less than the <see cref="F:Teradata.Client.Provider.TdIntervalDayToMinute.MinValue"/>.
            </exception>
            <param name="interval">A <strong>TdIntervalDayToMinute</strong>.</param>
            <param name="value">A multiplier.</param>
        </member>
        <member name="M:Teradata.Client.Provider.TdIntervalDayToMinute.Multiply(System.Int32,Teradata.Client.Provider.TdIntervalDayToMinute)">
            <summary>
               A <see cref="T:Teradata.Client.Provider.TdIntervalDayToMinute"/> is multiplied by an integer value.
            </summary>
            <remarks>
            <para>
               If <paramref name="interval"/> is <see cref="F:Teradata.Client.Provider.TdIntervalDayToMinute.Null"/> a <strong>Null</strong> will be returned.
            </para>
            <para>
               The returned <strong>TdIntervalDayToMinute</strong> will contain a precision 
               set to the <see cref="F:Teradata.Client.Provider.TdIntervalDayToMinute.MaxPrecision"/>.
            </para>
            </remarks>
            <returns>
               A new <strong>TdIntervalDayToMinute</strong> as the result of multiplying a 
               <strong>TdIntervalDayToMinute</strong> and an integer value.
            </returns>        
            <exception cref="T:System.OverflowException">
               The resultant operation returns a value greater than the <see cref="F:Teradata.Client.Provider.TdIntervalDayToMinute.MaxValue"/> 
               or less than the <see cref="F:Teradata.Client.Provider.TdIntervalDayToMinute.MinValue"/>.
            </exception>
            <param name="value">A multiplier.</param>
            <param name="interval">A <strong>TdIntervalDayToMinute</strong>.</param>
        </member>
        <member name="M:Teradata.Client.Provider.TdIntervalDayToMinute.Divide(Teradata.Client.Provider.TdIntervalDayToMinute,System.Int32)">
            <summary>
               A <see cref="T:Teradata.Client.Provider.TdIntervalDayToMinute"/> is divided by an integer value.
            </summary>
            <remarks>
            <para>
               If <paramref name="interval"/> is <see cref="F:Teradata.Client.Provider.TdIntervalDayToMinute.Null"/> a <strong>Null</strong> will be returned.
            </para>
            <para>
               The returned <strong>TdIntervalDayToMinute</strong> will contain a precision 
               which matches the precision of the <strong>interval</strong> parameter.
            </para>
            </remarks>
            <returns>
               A new <strong>TdIntervalDayToMinute</strong> as the result of dividing a 
               <strong>TdIntervalDayToMinute</strong> and an integer value.
            </returns>        
            <exception cref="T:System.DivideByZeroException">
               The <paramref name="value"/> divisor cannot be 0.
            </exception>
            <param name="interval">A <strong>TdIntervalDayToMinute</strong>.</param>
            <param name="value">A divisor.</param>
        </member>
        <member name="M:Teradata.Client.Provider.TdIntervalDayToMinute.op_GreaterThan(Teradata.Client.Provider.TdIntervalDayToMinute,Teradata.Client.Provider.TdIntervalDayToMinute)">
            <summary>
               This operator determines whether the <paramref name="left"/> is greater 
               than the <paramref name="right"/>.
            </summary>
            <returns>
            	<para>
            		<c>true</c> indicates the <paramref name="left"/> is greater than
                    the <paramref name="right"/>, <c>false</c> otherwise.
                </para>
            	<para>
            		<list type="table">
            			<listheader>
            				<term>Return Value</term>
            				<description>Description</description>
            			</listheader>
            			<item>
            				<term><c>true</c></term>
            				<description>
            					<paramref name="left"/> and
                                <paramref name="right"/> are not
                                <see cref="F:Teradata.Client.Provider.TdIntervalDayToMinute.Null"/> and
                                <paramref name="left"/> is greater than
                                <paramref name="right"/>.
            				</description>
            			</item>
            			<item>
            				<term><c>false</c></term>
            				<description>
            					<para>
                                    The <paramref name="left"/> is less than or equal
                                    to <paramref name="right"/>
                                </para>
            					<para>-or-</para>
            					<para>
                                    Either <paramref name="left"/> and / or
                                    <paramref name="right"/> is <strong>Null</strong>.
                                </para>
            				</description>
            			</item>
            		</list>
            	</para>
            </returns>
            <remarks>
            	<para>
                   Comparison operators always return <c>false</c> if one of the operands is
                   <strong>Null</strong>. Therefore you should not assume that the reverse 
                   condition is <c>true</c>. For example you cannot assume that the 
                   <paramref name="left"/> is less than or equal to the <paramref name="right"/> 
                   if the "&gt;" operator returns <c>false</c>.
               </para>
            	<para>
                   The reverse condition is <c>true</c> when the <paramref name="left"/> and the 
                   <paramref name="right"/> are not <strong>Null</strong>.
               </para>
            </remarks>
            <param name="left">An instance of <see cref="T:Teradata.Client.Provider.TdIntervalDayToMinute"/>.</param>
            <param name="right">An instance of <strong>TdIntervalDayToMinute</strong>.</param>
        </member>
        <member name="M:Teradata.Client.Provider.TdIntervalDayToMinute.op_GreaterThanOrEqual(Teradata.Client.Provider.TdIntervalDayToMinute,Teradata.Client.Provider.TdIntervalDayToMinute)">
            <summary>
               This operator determines whether the <paramref name="left"/> is greater than or 
               equal to the <paramref name="right"/>.
            </summary>
            <returns>
            	<para>
            		<c>true</c> indicates the <paramref name="left"/> is greater than
                    or equal to the <paramref name="right"/>, <c>false</c> otherwise.
                </para>
            	<para>
            		<list type="table">
            			<listheader>
            				<term>Return Value</term>
            				<description>Description</description>
            			</listheader>
            			<item>
            				<term><c>true</c></term>
            				<description>
            					<para>
            						<paramref name="left"/> and
                                    <paramref name="right"/> are not
                                    <see cref="F:Teradata.Client.Provider.TdIntervalDayToMinute.Null"/> and
                                    <paramref name="left"/> is greater than or equal
                                    to <paramref name="right"/>
            					</para>
            					<para>-or-</para>
            					<para>
            						<paramref name="left"/> is <strong>Null</strong>
                                    and <paramref name="right"/> is
                                    <strong>Null</strong>.
            					</para>
            				</description>
            			</item>
            			<item>
            				<term><c>false</c></term>
            				<description>
            					<para>
                                    The <paramref name="left"/> is less than
                                    <paramref name="right"/>
            					</para>
            					<para>-or-</para>
            					<para>
                                    Either <paramref name="left"/> or
                                    <paramref name="right"/> is <strong>Null</strong>.
            					</para>
            				</description>
            			</item>
            		</list>
            	</para>
            </returns>
            <remarks>
            	<para>
                    Comparison operators always return <c>false</c> if one of the operands is
                    <strong>Null</strong>. Therefore you should not assume that the reverse
                    condition is <c>true</c>. For example you cannot assume that the
                    <paramref name="left"/> is less than the <paramref name="right"/> 
                    if the "&gt;=" operator returns <c>false</c>.
                </para>
            	<para>
                    The reverse condition is <c>true</c> when the
                    <paramref name="left"/> and the
                    <paramref name="right"/> are not <strong>Null</strong>.
                </para>
            </remarks>
            <param name="left">An instance of <see cref="T:Teradata.Client.Provider.TdIntervalDayToMinute"/>.</param>
            <param name="right">An instance of <strong>TdIntervalDayToMinute</strong>.</param>
        </member>
        <member name="M:Teradata.Client.Provider.TdIntervalDayToMinute.op_Inequality(Teradata.Client.Provider.TdIntervalDayToMinute,Teradata.Client.Provider.TdIntervalDayToMinute)">
            <summary>
               This operator determines whether the <paramref name="left"/> and the  
               <paramref name="right"/> are not equal.
            </summary>
            <returns>
            	<para>
                   A Boolean is returned that indicates whether the two operands are not equal.
                   <c>true</c> indicates the two operands are not equal, <c>false</c> otherwise.
               </para>
            	<para>
            		<list type="table">
            			<listheader>
            				<term>Return Value</term>
            				<description>Description</description>
            			</listheader>
            			<item>
            				<term><c>true</c></term>
            				<description>
                                <para>
            					   <paramref name="left"/> is less than or greater than
                                   <paramref name="right"/>.
                                </para>
            					<para>-or-</para>
                               <para>
            					    <paramref name="left"/> is
                                   <see cref="F:Teradata.Client.Provider.TdIntervalDayToMinute.Null"/> and
                                   <paramref name="right"/> is not <strong>Null.</strong> 
                               </para>
            					<para>-or-</para>
            					<para>
                                   <paramref name="left"/> is not <strong>Null</strong>
                                   and <paramref name="right"/> is <strong>Null.</strong>
                                </para>
                            </description>
            			</item>
            			<item>
            				<term><c>false</c></term>
            				<description>
            					<para>
                                  <paramref name="left"/> is equal to
                                  <paramref name="right"/>.
                               </para>
            					<para>-or-</para>
            					<para>
                                   <paramref name="left"/> and
                                   <paramref name="right"/> are <strong>Null</strong>.
                                </para>
                            </description>
            			</item>
            		</list>
            	</para>
            </returns>
            <param name="left">An instance of <see cref="T:Teradata.Client.Provider.TdIntervalDayToMinute"/>.</param>
            <param name="right">An instance of <strong>TdIntervalDayToMinute</strong>.</param>
        </member>
        <member name="M:Teradata.Client.Provider.TdIntervalDayToMinute.op_Equality(Teradata.Client.Provider.TdIntervalDayToMinute,Teradata.Client.Provider.TdIntervalDayToMinute)">
            <summary>
               This operator determines whether the <paramref name="left"/> and the  
            <paramref name="right"/> are equal.
            </summary>
            <returns>
            	<para>
                   A Boolean is returned that indicates whether the two operands are equal.
                   <c>True</c> indicates the two operands are equal, <c>false</c> otherwise.
                </para>
            	<para>
            		<list type="table">
            			<listheader>
            				<term>Return Value</term>
            				<description>Description</description>
            			</listheader>
            			<item>
            				<term><c>true</c></term>
            				<description>
            					<para>
            					   <paramref name="left"/> is equal to
                                   <paramref name="right"/>
            					</para>
            					<para>-or-</para>
            					<para>
            					   <paramref name="left"/> is
                                   <see cref="F:Teradata.Client.Provider.TdIntervalDayToMinute.Null"/> and
                                   <paramref name="right"/> is <strong>Null</strong>.
            					</para>
            				</description>
            			</item>
            			<item>
            				<term><c>false</c></term>
            				<description>
            					<para>
            					   <paramref name="left"/> is not <strong>Null</strong>
                                   and <paramref name="right"/> is <strong>Null</strong>
            					</para>
            					<para>-or-</para>
            					<para>
            					   <paramref name="left"/> is <strong>Null</strong> and
                                   <paramref name="right"/> is not <strong>Null</strong>
            					</para>
            					<para>-or-</para>
            					<para>
                                   The <paramref name="left"/> is not equal to
                                   <paramref name="right"/>.
            					</para>
            				</description>
            			</item>
            		</list>
            	</para>
            </returns>
            <param name="left">An instance of <see cref="T:Teradata.Client.Provider.TdIntervalDayToMinute"/>.</param>
            <param name="right">An instance of <strong>TdIntervalDayToMinute</strong>.</param>
        </member>
        <member name="M:Teradata.Client.Provider.TdIntervalDayToMinute.op_LessThan(Teradata.Client.Provider.TdIntervalDayToMinute,Teradata.Client.Provider.TdIntervalDayToMinute)">
            <summary>
               This operator determines whether the <paramref name="left"/> is less 
               than the <paramref name="right"/>.
            </summary>
            <returns>
            	<para>
            		<c>True</c> indicates the <paramref name="left"/> is less than
                    the <paramref name="right"/>, <c>false</c> otherwise.
                </para>
            	<para>
            		<list type="table">
            			<listheader>
            				<term>Return Value</term>
            				<description>Description</description>
            			</listheader>
            			<item>
            				<term><c>true</c></term>
            				<description>
            					<para>
            					    <paramref name="left"/> and
                                   <paramref name="right"/> are not
                                   <see cref="F:Teradata.Client.Provider.TdIntervalDayToMinute.Null"/> and
                                   <paramref name="left"/> is less than
                                   <paramref name="right"/>.
            					</para>
            				</description>
            			</item>
            			<item>
            				<term><c>false</c></term>
            				<description>
            					<para>
                                    The <paramref name="left"/> is greater than or
                                    equal to <paramref name="right"/>
            					</para>
            					<para>-or-</para>
            					<para>
                                    Either <paramref name="left"/> and / or
                                    <paramref name="right"/> is <strong>Null</strong>.
            					</para>
            				</description>
            			</item>
            		</list>
            	</para>
            </returns>
            <remarks>
            	<para>
                    Comparison operators always return <c>false</c> if one of the operands is
                    <strong>Null</strong>. Therefore you should not assume that the reverse
                    condition is <c>true</c>. For example you cannot assume that the
                    <paramref name="left"/> is greater than or equal to the <paramref name="right"/>
                     if the "&lt;" operator returns <c>false</c>.
                </para>
            	<para>
                    The reverse condition is <c>true</c> when the
                    <paramref name="left"/> and the
                    <paramref name="right"/> are not <strong>Null</strong>.
                </para>
            </remarks>
            <param name="left">An instance of <see cref="T:Teradata.Client.Provider.TdIntervalDayToMinute"/>.</param>
            <param name="right">An instance of <strong>TdIntervalDayToMinute</strong>.</param>
        </member>
        <member name="M:Teradata.Client.Provider.TdIntervalDayToMinute.op_LessThanOrEqual(Teradata.Client.Provider.TdIntervalDayToMinute,Teradata.Client.Provider.TdIntervalDayToMinute)">
            <summary>
               This operator determines whether the <paramref name="left"/> is less 
               than or equal the <paramref name="right"/>.
            </summary>
            <returns>
            	<para>
            		<c>true</c> indicates the <paramref name="left"/> is less than or
                    equal to the <paramref name="right"/>, <c>false</c> otherwise.
                </para>
            	<para>
            		<list type="table">
            			<listheader>
            				<term>Return Value</term>
            				<description>Description</description>
            			</listheader>
            			<item>
            				<term><c>true</c></term>
            				<description>
            					<para>
            						<paramref name="left"/> and
                                    <paramref name="right"/> are not
                                    <see cref="F:Teradata.Client.Provider.TdIntervalDayToMinute.Null"/> and
                                    <paramref name="left"/> is less than or equal to
                                    <paramref name="right"/>
            					</para>
            					<para>-or-</para>
            					<para>
            						<paramref name="left"/> is <strong>Null</strong>
                                    and <paramref name="right"/> is
                                    <strong>Null</strong>.
            					</para>
            				</description>
            			</item>
            			<item>
            				<term><c>false</c></term>
            				<description>
            					<para>
                                    The <paramref name="left"/> is greater than
                                    <paramref name="right"/>
            					</para>
            					<para>-or-</para>
            					<para>
                                    Either <paramref name="left"/> or
                                    <paramref name="right"/> is <strong>Null</strong>.
            					</para>
            				</description>
            			</item>
            		</list>
            	</para>
            </returns>
            <remarks>
            	<para>
                    Comparison operators always return <c>false</c> if one of the operands is
                    <strong>Null</strong>. Therefore you should not assume that the reverse
                    condition is <c>true</c>. For example you cannot assume that the
                    <paramref name="left"/> is greater than the
                    <paramref name="right"/> if the "&lt;=" operator returns
                    <c>false</c>.
                </para>
            	<para>
                    The reverse condition is <c>true</c> when the
                    <paramref name="left"/> and the
                    <paramref name="right"/> are not <strong>Null</strong>.
                </para>
            </remarks>
            <param name="left">An instance of <see cref="T:Teradata.Client.Provider.TdIntervalDayToMinute"/>.</param>
            <param name="right">An instance of <strong>TdIntervalDayToMinute</strong>.</param>
        </member>
        <member name="M:Teradata.Client.Provider.TdIntervalDayToMinute.op_Explicit(System.TimeSpan)~Teradata.Client.Provider.TdIntervalDayToMinute">
            <summary>
               Converts a <see cref="T:System.TimeSpan"/> to a <see cref="T:Teradata.Client.Provider.TdIntervalDayToMinute"/>.
            </summary>
            <remarks>
               <strong>TimeSpan</strong> fractional seconds and seconds will be truncated during  
               conversion into a <strong>TdIntervalDayToMinute</strong> interval.
            </remarks>
            <exception cref="T:System.OverflowException">
               The resultant operation returns a value greater than the <see cref="F:Teradata.Client.Provider.TdIntervalDayToMinute.MaxValue"/> 
               or less than the <see cref="F:Teradata.Client.Provider.TdIntervalDayToMinute.MinValue"/>.
            </exception>
            <param name="value">A <strong>TimeSpan</strong>.</param>
            <returns>A <strong>TdIntervalDayToMinute</strong> interval.</returns>
        </member>
        <member name="M:Teradata.Client.Provider.TdIntervalDayToMinute.op_Explicit(Teradata.Client.Provider.TdIntervalDayToMinute)~System.TimeSpan">
            <summary>
               Converts a <see cref="T:Teradata.Client.Provider.TdIntervalDayToMinute"/> to a <see cref="T:System.TimeSpan"/>.
            </summary>
            <remarks>
               The <strong>TimeSpan</strong> time components are represented in 24 hour format.
            </remarks>
            <exception cref="T:System.ArgumentNullException">
               The <strong>TdIntervalDayToMinute</strong> value is <see cref="F:Teradata.Client.Provider.TdIntervalDayToMinute.Null"/>.
            </exception>
            <param name="value">A <strong>TdIntervalDayToMinute</strong> interval.</param>
            <returns>A <strong>TimeSpan</strong>.</returns>
        </member>
        <member name="M:Teradata.Client.Provider.TdIntervalDayToMinute.op_Implicit(Teradata.Client.Provider.TdIntervalDayToMinute)~Teradata.Client.Provider.TdIntervalDayToSecond">
            <summary>
               Converts a <see cref="T:Teradata.Client.Provider.TdIntervalDayToMinute"/> to <see cref="T:Teradata.Client.Provider.TdIntervalDayToSecond"/>.
            </summary>
            <remarks>
            <para>
               The <see cref="P:Teradata.Client.Provider.TdIntervalDayToSecond.Precision"/> is set to the precision of the 
               <paramref name="value"/> and the <see cref="P:Teradata.Client.Provider.TdIntervalDayToSecond.Scale"/> 
               is set to zero, since the <strong>value</strong> does not contain any seconds. 
            </para>
            </remarks>
            <param name="value">A <strong>TdIntervalDayToMinute</strong> interval.</param>
            <returns>A <strong>TdIntervalDayToSecond</strong>.</returns>
        </member>
        <member name="P:Teradata.Client.Provider.TdIntervalDayToMinute.IsNull">
            <summary>
               Indicates whether this <see cref="T:Teradata.Client.Provider.TdIntervalDayToMinute"/> instance is <see cref="F:Teradata.Client.Provider.TdIntervalDayToMinute.Null"/>. 
            </summary>
            <value>
               <c>true</c> if this <strong>TdIntervalDayToMinute</strong> is <strong>Null</strong>; 
               <c>false</c> otherwise.
            </value>
        </member>
        <member name="P:Teradata.Client.Provider.TdIntervalDayToMinute.Days">
            <summary>
               The number of interval days is returned. The return value ranges from -9999 to 9999.
            </summary>
            <remarks>
            <para>
               A <see cref="T:Teradata.Client.Provider.TdIntervalDayToMinute"/> is represented as [-]days hh:mm.  The 
               minus sign is optional and represents a negative interval of time.  The days component 
               represents days, the hh hours and the mm minutes. The value of the Days property is the 
               days component.
            </para>
            <para>
               A negative interval will return all properties (days, hours and minutes) as negative values.
            </para>
            </remarks>
            <exception cref="T:Teradata.Client.Provider.TdException">
               This property is not available when this instance is <see cref="F:Teradata.Client.Provider.TdIntervalDayToMinute.Null"/>.
            </exception>
        </member>
        <member name="P:Teradata.Client.Provider.TdIntervalDayToMinute.Hours">
            <summary>
               The number of interval hours is returned. The return value ranges from -23 to 23.
            </summary>
            <remarks>
            <para>
               A <see cref="T:Teradata.Client.Provider.TdIntervalDayToMinute"/> is represented as [-]days hh:mm.  The 
               minus sign is optional and represents a negative interval of time.  The days component 
               represents days, the hh hours and the mm minutes. The value of the Hours property
               is the hh component.
            </para>
            <para>
               A negative interval will return all properties (days, hours and minutes) as negative values.
            </para>
            </remarks>
            <exception cref="T:Teradata.Client.Provider.TdException">
               This property is not available when this instance is <see cref="F:Teradata.Client.Provider.TdIntervalDayToMinute.Null"/>.
            </exception>
        </member>
        <member name="P:Teradata.Client.Provider.TdIntervalDayToMinute.Minutes">
            <summary>
               The number of interval minutes is returned.  The return value ranges from -59 to 59.
            </summary>
            <remarks>
            <para>
               A <see cref="T:Teradata.Client.Provider.TdIntervalDayToMinute"/> is represented as [-]days hh:mm.  The 
               minus sign is optional and represents a negative interval of time.  The days component 
               represents days, the hh hours and the mm minutes. The value of the Minutes property
               is the mm component.
            </para>
            <para>
               A negative interval will return all properties (days, hours and minutes) as negative values.
            </para>
            </remarks>
            <exception cref="T:Teradata.Client.Provider.TdException">
               This property is not available when this instance is <see cref="F:Teradata.Client.Provider.TdIntervalDayToMinute.Null"/>.
            </exception>
        </member>
        <member name="P:Teradata.Client.Provider.TdIntervalDayToMinute.Precision">
            <summary>
               The number of significant digits in the day is returned. The return value ranges
               from 1 to 4.
            </summary>
            <exception cref="T:Teradata.Client.Provider.TdException">
               This property is not available when this instance is <see cref="F:Teradata.Client.Provider.TdIntervalDayToMinute.Null"/>.
            </exception>
        </member>
        <member name="P:Teradata.Client.Provider.TdIntervalDayToMinute.Value">
            <summary>
               Gets the .NET data type representation of <see cref="T:Teradata.Client.Provider.TdIntervalDayToMinute"/> 
               as a <see cref="T:System.TimeSpan"/>.
            </summary>
            <remarks>
               This property in concept parallels <see cref="M:Teradata.Client.Provider.TdDataReader.GetValue(System.Int32)"/> and
               <see cref="P:Teradata.Client.Provider.TdParameter.Value"/>. That is they all represent the .NET Framework 
               Class Library(FCL) primitive data type that correspond to the Teradata 
               Interval Day To Minute data type.
            </remarks>
            <value>The interval represented as a <strong>TimeSpan</strong> is returned.</value>
            <exception cref="T:Teradata.Client.Provider.TdException">
               This property is not available when this instance is <see cref="F:Teradata.Client.Provider.TdIntervalDayToMinute.Null"/>.
            </exception>
        </member>
        <member name="P:Teradata.Client.Provider.TdIntervalDayToMinute.InternalTimespan">
            <summary>
               Return the internal TimeSpan representing the interval.
            </summary>
            <remarks>
               The internal timespan is used in calculating arithmetic operations and in storing
               day-time intervals.
            </remarks>
        </member>
        <member name="P:Teradata.Client.Provider.TdIntervalDayToMinute.ObjectId">
            <summary>
               Gets the instance object identifier.
            </summary>
        </member>
        <member name="P:Teradata.Client.Provider.TdIntervalDayToMinute.IsNegative">
            <summary>
               Indicate if the interval is negative.
            </summary>
            <remarks>
               Timespan.ticks will indicate a negative interval.  Other values (days, hours, minutes, 
                milliseconds) may be 0 and the interval may still be negative.
            </remarks>
        </member>
        <member name="P:Teradata.Client.Provider.TdIntervalDayToMinute.InternalAccessor">
            <summary>
               Accessor to the internal storage for this interval.
            </summary>
        </member>
        <member name="T:Teradata.Client.Provider.TdIntervalDayToSecond">
            <summary>
                <see cref="T:Teradata.Client.Provider.TdIntervalDayToSecond"/> represents an interval of time defining a duration in
                days, hours, minutes, seconds and microseconds. The day precision and 
                the second scale are configurable.
            </summary>
            <remarks>
            	<para>
                   <strong>TdIntervalDayToSecond</strong> is a .NET Data Provider for Teradata specific type,
                   designed to support a Teradata Database Interval Day To Second data type.
                </para>
            	<para>
                    The <strong>TdIntervalDayToSecond</strong> supports the Teradata Interval Day (precision)
                    To Second (scale) data type where precision indicates the number of digits in the day
                    (from 1 - 4) and scale indicates the fractional precision for the values of seconds.  
                    The scale may range from 0 to 6.
                </para>
                <para>
                    The interval value must be specified in the following format :
                </para>
            	<para>[sign][days][space character][hh]:[mm]:[ss].[ffffff]</para>
            	<para>Below is the description of each format item.</para>
            	<para>
            		<list type="table">
            			<listheader>
            				<term>Format Item</term>
            				<description>Description</description>
            			</listheader>
            			<item>
            				<term>sign</term>
            				<description>Optional - . Defaults as space character (+).</description>
            			</item>
            			<item>
            				<term>days</term>
            				<description>Required number of days (one to four digits in
                            length).</description>
            			</item>
            			<item>
            				<term>hh</term>
            				<description>Required number of hours from 00 - 23.</description>
            			</item>
            			<item>
            				<term>mm</term>
            				<description>Required number of minutes from 00 - 59.</description>
            			</item>
            			<item>
            				<term>ss</term>
            				<description>Required number of seconds from 00 - 59.</description>
            			</item>
            			<item>
            				<term>ffffff</term>
            				<description>Optionally the number of fractional seconds (0 to 6
                            digits in length).</description>
            			</item>
            		</list>
            	</para>
            	<para>
                   The .Net Framework does not have a system type that directly corresponds to
                   the Teradata Database Interval Day To Second data type. The .NET Data Provider for 
                   Teradata Version 13.0 version and earlier versions map Interval Day To Second to 
                   System.String. With version 13.1 of the provider, 
                   <strong>TdIntervalDayToSecond</strong> is available to retrieve and manipulate
                   data of type Interval Day To Second.
               </para>
            	<para>
                   The range of values for the <strong>TdIntervalDayToSecond</strong> containing a day precision
                   of 1 is as follows:
                </para>
            	<para>
            		<table class="xmldoctable" cellspacing="0">
            			<tbody>
            				<tr>
            					<th width="127">Day Precision</th>
            					<th width="127">Second Scale</th>
            					<th>
            						<para>Minimum</para>
            					</th>
            					<th>
                                   <para>Maximum</para>
                               </th>
            				</tr>
            				<tr>
            					<td class="xmldoctable" width="127">1</td>
            					<td width="127">0</td>
            					<td class="xmldoctable">
            						<para>-'9 23:59:59'</para>
            					</td>
            					<td>
            						<para>'9 23:59:59'</para>
            					</td>
            				</tr>
            				<tr>
            					<td class="xmldoctable" width="127">1</td>
            					<td width="127">1</td>
            					<td class="xmldoctable">
            						<para>-'9 23:59:59.9'</para>
            					</td>
            					<td>
            						<para>'9 23:59:59.9'</para>
            					</td>
            				</tr>
            				<tr>
            					<td class="xmldoctable" width="127">1</td>
            					<td width="127">2</td>
            					<td class="xmldoctable">
            						<para>-'9 23:59:59.99'</para>
            					</td>
            					<td>
            						<para>'9 23:59:59.99'</para>
            					</td>
            				</tr>
            				<tr>
            					<td class="xmldoctable" width="127">1</td>
            					<td width="127">3</td>
            					<td class="xmldoctable">
            						<para>-'9 23:59:59.999'</para>
            					</td>
            					<td>
            						<para>'9 23:59:59.999'</para>
            					</td>
            				</tr>
            				<tr>
            					<td width="127">1</td>
            					<td width="127">4</td>
            					<td class="xmldoctable">
            						<para>-'9 23:59:59.9999'</para>
            					</td>
            					<td>
            						<para>'9 23:59:59.9999'</para>
            					</td>
            				</tr>
            				<tr>
            					<td width="127">1</td>
            					<td width="127">5</td>
            					<td>
            						<para>-'9 23:59:59.99999'</para>
            					</td>
            					<td>
            						<para>'9 23:59:59.99999'</para>
            					</td>
            				</tr>
            				<tr>
            					<td width="127">1</td>
            					<td width="127">6</td>
            					<td>
            						<para>-'9 23:59:59.999999'</para>
            					</td>
            					<td>
            						<para>'9 23:59:59.999999'</para>
            					</td>
            				</tr>
            			</tbody>
            		</table>
            	</para>
            	<para>The range of values for day precision values of 2,3 and 4 all follow the same
                pattern. For completeness, the following chart displays the range of values for a
                <strong>TdIntervalDayToSecond</strong> with a day precision of 4.</para>
            	<para>
            		<table class="xmldoctable" cellspacing="0">
            			<tbody>
            				<tr>
            					<th width="127">
            						<para>Day Precision</para>
            					</th>
            					<th width="127">
            						<para>Second Scale</para>
            					</th>
            					<th>
            						<para>Minimum</para>
            					</th>
            					<th>
                                   <para>Maximum</para>
                               </th>
            				</tr>
            				<tr>
            					<td class="xmldoctable" width="127">4</td>
            					<td width="127">0</td>
            					<td class="xmldoctable">
            						<para>-'9999 23:59:59'</para>
            					</td>
            					<td>
            						<para>'9999 23:59:59'</para>
            					</td>
            				</tr>
            				<tr>
            					<td class="xmldoctable" width="127">4</td>
            					<td width="127">1</td>
            					<td class="xmldoctable">
            						<para>-'9999 23:59:59.9'</para>
            					</td>
            					<td>
            						<para>'9999 23:59:59.9'</para>
            					</td>
            				</tr>
            				<tr>
            					<td class="xmldoctable" width="127">4</td>
            					<td width="127">2</td>
            					<td class="xmldoctable">
            						<para>-'9999 23:59:59.99'</para>
            					</td>
            					<td>
            						<para>'9999 23:59:59.99'</para>
            					</td>
            				</tr>
            				<tr>
            					<td class="xmldoctable" width="127">4</td>
            					<td width="127">3</td>
            					<td class="xmldoctable">
            						<para>-'9999 23:59:59.999'</para>
            					</td>
            					<td>
            						<para>'9999 23:59:59.999'</para>
            					</td>
            				</tr>
            				<tr>
            					<td width="127">4</td>
            					<td width="127">4</td>
            					<td class="xmldoctable">
            						<para>-'9999 23:59:59.9999'</para>
            					</td>
            					<td>
            						<para>'9999 23:59:59.9999'</para>
            					</td>
            				</tr>
            				<tr>
            					<td width="127">4</td>
            					<td width="127">5</td>
            					<td>
            						<para>-'9999 23:59:59.99999'</para>
            					</td>
            					<td>
            						<para>'9999 23:59:59.99999'</para>
            					</td>
            				</tr>
            				<tr>
            					<td width="127">4</td>
            					<td width="127">6</td>
            					<td>
            						<para>-'9999 23:59:59.999999'</para>
            					</td>
            					<td>
            						<para>'9999 23:59:59.999999'</para>
            					</td>
            				</tr>
            			</tbody>
            		</table>
            	</para>
                <para>
                    <strong>TdIntervalDayToSecond</strong> also supports 
                    <see cref="F:Teradata.Client.Provider.TdIntervalDayToSecond.Null"/>. This is a very important feature. 
                    An application is no longer required to call
                    <see cref="M:Teradata.Client.Provider.TdDataReader.IsDBNull(System.Int32)"/> before invoking the corresponding 
                    TdDataReader "Get" method.  This will improve overall performance.
                </para>
                <para>
                    A <strong>TdIntervalDayToSecond</strong> structure allows arithmetic,
                    comparision and conversion operations to be performed. 
                </para>
            	<para>
                    A <strong>TdIntervalDayToSecond</strong> may also be specified as an in, out, 
                    or in/out parameter to a stored procedure. In order to maintain backward  
                    compatibility with previous versions of the provider (release 13.0 and prior), 
                    a Connection String Attribute
                    <see cref="P:Teradata.Client.Provider.TdConnectionStringBuilder.EnableTdIntervals">EnableTdIntervals</see>
                    has been added. When the <strong>EnableTdIntervals</strong> attribute
                    is <c>true</c>, <see cref="P:Teradata.Client.Provider.TdParameter.ProviderSpecificValue"/> will
                    return the data as the provider specific type of <strong>TdIntervalDayToSecond</strong>.
                    When <strong>EnableTdIntervals</strong> is <c>false</c>, 
                    <strong>TdParameter.ProviderSpecificValue</strong> will return the data as a
                    .NET Framework Library data type of <see cref="T:System.String"/>.
                </para>
            	<para>
                    The <see cref="P:Teradata.Client.Provider.TdParameter.Value"/> will also return the .NET Framework Library
                    data type of <strong>System.String</strong> when <strong>EnableTdIntervals</strong>
                    is <c>false</c> to maintain backward compatibility. 
                    The <strong>TdParameter.Value</strong> will return a .NET Framework data type of
                    <see cref="T:System.TimeSpan"/> when <strong>EnableTdIntervals</strong>
                    is <c>true</c>.
                </para>
            	<para>
            	    For more information on the Teradata Interval Day To Second data type please
                    see the Teradata Database SQL Reference - 'Data Types and Literals'.
                </para>
            </remarks>
            <example>
            	<para>The following example shows how to retrieve a <strong>TdIntervalDayToSecond</strong>, modify
                the interval, and then update the table.</para>
            	<code lang="CS">
            Public void IntervalExample(TdCommand cmd, String model)
            {
               cmd.Parameters.Clear();
               
               cmd.CommandText = "SELECT StartDate, LeaseReturn, DelayPeriod " +
                                 "FROM AutoLeases " +
                                 "WHERE Model = ?";
             
               cmd.CommandType = CommandType.Text;
             
               cmd.Parameters.Add(null, TdType.VarChar, 10,
                    ParameterDirection.Input, true, 0, 0, null,    
                    DataRowVersion.Default, model);
             
               Int32 row = 0;
               TdDate [] startDate;
               TdTimestamp [] leaseReturn;
               TdIntervalDayToSecond [] leaseLen;
             
               using (TdDataReader dr = cmd.ExecuteReader())
               { 
                  startDate = new TdDate[dr.RecordsReturned];
                  leaseReturn = new TdTimestamp[dr.RecordsReturned];
                  leaseLen = new TdIntervalDayToSecond [dr.RecordsReturned];
             
                  // Specifying an interval of 7 days, 1 hour, 30 minutes, 0 seconds, 0 fractional seconds
                  // with a day precision of 4 and 0 scale
                  TdIntervalDayToSecond leaseReturnExtension = new TdIntervalDayToSecond(7, 1, 30, 0, 0, 4, 0);
               
                  while (dr.Read())
                  {
                     // Retrieving the dates
                     startDate[row] = dr.GetTdDate(0);
                     leaseReturn[row] = dr.GetTimestamp(1);
                     leaseLen[row] = dr.GetTdIntervalDayToSecond(2);
             
                     // Adding extension to the lease return
                     leaseReturn[row] = leaseReturn[row] + leaseReturnExtension;
             
                     // Adding extension to the lease length;
                     leaseLen[row] = leaseLen[row] + leaseReturnExtension;
             
                     row++;
                  } 
               }
             
               cmd.Parameters.Clear();
             
               cmd.CommandText = "UPDATE AutoLeases " +
                                 "SET LeaseReturn = ?, LeaseLen = ? " +
                                 "WHERE Model = ?";
             
               cmd.Parameters.Add(null, TdType.Timestamp, 0,
                     ParameterDirection.Input, true, 0, 0, null,    
                     DataRowVersion.Default, null);
             
               cmd.Parameters.Add(null, TdType.IntervalDayToSecond, 0,
                     ParameterDirection.Input, true, 0, 0, null,    
                     DataRowVersion.Default, null);
             
               cmd.Parameters.Add(null, TdType.VarChar, 9,
                     ParameterDirection.Input, true, 0, 0, null,    
                     DataRowVersion.Default, model);
             
               row--;
               while(row &gt;= 0)
               {
                  cmd.Parameters[0].Value = leaseReturn[row];
                  cmd.Parameters[1].Value = leaseLen[row];
                  cmd.Parameters[2].Value = model;
             
                  cmd.ExecuteNonQuery();
                  row--;
               }
            }
            </code>
            </example>
            <seealso cref="P:Teradata.Client.Provider.TdConnectionStringBuilder.EnableTdIntervals"/> 
            <seealso cref="!:IntervalConnectionString.html">Interval Connection String Attribute</seealso>
            <seealso cref="!:EnableProviderSpecificTypes.html">Enabling Provider Specific Types</seealso>
            <seealso cref="!:IntervalTypeOverview.html">Provider Specific Type:  Interval Type Overview</seealso>
        </member>
        <member name="F:Teradata.Client.Provider.TdIntervalDayToSecond.MaxPrecision">
            <summary>
               A constant representing the maximum number of significant digits in the 
               <see cref="P:Teradata.Client.Provider.TdIntervalDayToSecond.Days"/> interval component.
            </summary>
            <remarks>
               The value of this constant is 4.
            </remarks>
        </member>
        <member name="F:Teradata.Client.Provider.TdIntervalDayToSecond.MinPrecision">
            <summary>
               A constant representing the minimum number of significant digits in the 
               <see cref="P:Teradata.Client.Provider.TdIntervalDayToSecond.Days"/> interval component.
            </summary>
            <remarks>
               The value of this constant is 1.
            </remarks>
        </member>
        <member name="F:Teradata.Client.Provider.TdIntervalDayToSecond.MaxScale">
            <summary>
               A constant representing the maximum scale of the 
               <see cref="P:Teradata.Client.Provider.TdIntervalDayToSecond.Microseconds"/> interval component.
            </summary>
            <remarks>The value of this constant is 6.</remarks>
        </member>
        <member name="F:Teradata.Client.Provider.TdIntervalDayToSecond.MinScale">
            <summary>
               A constant representing the minimum scale of the 
               <see cref="P:Teradata.Client.Provider.TdIntervalDayToSecond.Microseconds"/> interval component.
            </summary>
            <remarks>The value of this constant is 0.</remarks>
        </member>
        <member name="F:Teradata.Client.Provider.TdIntervalDayToSecond.Null">
            <summary>
               Gets a Null <see cref="T:Teradata.Client.Provider.TdIntervalDayToSecond"/> instance.
            </summary>
            <value>
               Returns a <strong>TdIntervalDayToSecond</strong> instance that represents a 
               <strong>Null</strong> value.
            </value>
            <remarks>
               Conceptually it is a constructor for <strong>Null</strong> instances
               of <strong>TdIntervalDayToSecond</strong>.
            </remarks>
            <example>
            This example shows how to send a <strong>Null</strong> value to a Teradata database.
            <code>
            TdParameter col1 = new TdParameter();
            col1.TdType = TdType.TdIntervalDayToSecond;
            col1.Value = TdIntervalDayToSecond.Null;
            </code>
            </example>
        </member>
        <member name="F:Teradata.Client.Provider.TdIntervalDayToSecond.Zero">
            <summary>
               Gets an <see cref="T:Teradata.Client.Provider.TdIntervalDayToSecond"/> instance that contains all zero elements
               for each interval field.
            </summary>
            <remarks>
               A Zero <Strong>TdIntervalDayToSecond</Strong> may be used to determine whether
               other instances of intervals represent postive, negative or non-zero intervals.
            </remarks>
            <example>
            This example shows how to determine if an interval is negative.
            <code>
            TdIntervalDayTo Second dtsInterval = new TdIntervalDayToSecond(0, 0, 0, 0, -100000);
            if (dtsInterval &lt; TdIntervalDayToSecond.Zero)
            {
               Console.WriteLine("The Interval is negative");
            }
            // The output of the console is "The interval is negative"
            </code>
            </example>
        </member>
        <member name="F:Teradata.Client.Provider.TdIntervalDayToSecond.MinValue">
            <summary>
               The smallest possible value for <see cref="T:Teradata.Client.Provider.TdIntervalDayToSecond"/>.
            </summary>
            <remarks>
               The value is -'9999 23:59:59.999999'.
            </remarks>
        </member>
        <member name="F:Teradata.Client.Provider.TdIntervalDayToSecond.MaxValue">
            <summary>
               The largest possible value for <see cref="T:Teradata.Client.Provider.TdIntervalDayToSecond"/>.
            </summary>
            <remarks>
               The value is '9999 23:59:59.999999'.
            </remarks>
        </member>
        <member name="M:Teradata.Client.Provider.TdIntervalDayToSecond.#ctor(System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Byte,System.Byte)">
            <summary>
               An instance of <see cref="T:Teradata.Client.Provider.TdIntervalDayToSecond"/> is created from a day and time components 
               specified as integers while precision and scale components are specified as bytes.
            </summary>
            <remarks>
            <para>
               The microsecond parameter is divided by 10^-6 (.000001) to create a fractional number
               of seconds. The supplied scale is used to used to truncate any fractional seconds at the
               position indicated by the scale.
            </para>
            <para>
               For example, a microseconds value of 12345678 and a scale of 6 will be divided by 10^-6 
               and truncated at the 6th position resulting in a value of .123456.  A microseconds value of 
               123 and a scale of 6 will result in a value of .000123.
            </para>
            <para>
               All values are constructed into a <strong>TdIntervalDayToSecond</strong> to
               determine if the <see cref="F:Teradata.Client.Provider.TdIntervalDayToSecond.MinValue"/> or the <see cref="F:Teradata.Client.Provider.TdIntervalDayToSecond.MaxValue"/>
               values are exceeded.  If the values are not exceeded but the resulting days component 
               exceeds the supplied <paramref name="precision"/> value, an exception is generated.
            </para>
            <para>
               For example a constructor for TdIntervalDayToSecond(444, 4, 9, 2, 90, 2, 6) requests
               444 days, 4 hours, 9 minutes, 2 seconds, 90 microseconds with a precision of 2 and
               a scale of 6.  The resulting days value cannot be represented in 2 digits, therefore
               an exception is generated, even though the <strong>MinValue</strong> and the
               <strong>MaxValue</strong> values have not been exceeded.
            </para>
            <para>
               Negative constructor parameters may be supplied to represent negative durations of time.
               Mixed positive and negative constructor parameters are added together that result in a
               negative or positive <strong>TdIntervalDayToSecond</strong>.  For instance, a day
               value of 200, an hour value of -4900, a minute value of 30, a second value of 400
               and 1,200,510 microseconds will result in a <strong>TdIntervalDayToSecond</strong> 
               interval value of -'4 03:23:18.799490'.
            </para>
            </remarks>
            <exception cref="T:System.OverflowException" caption="OverflowException">
               The parameters specify a <strong>TdIntervalDayToSecond</strong> value less than 
               <see cref="F:Teradata.Client.Provider.TdIntervalDayToSecond.MinValue"/> or greater than <see cref="F:Teradata.Client.Provider.TdIntervalDayToSecond.MaxValue"/>.
            </exception>
            <exception cref="T:System.ArgumentOutOfRangeException" caption="ArgumentOutOfRangeException">
               The <strong>precision</strong> or <strong>scale</strong> parameters are outside the 
               minimum or maximum range of values."/&gt;.
            </exception>
            <exception cref="T:System.ArgumentException" caption="ArgumentException">
               The <strong>precision</strong> parameter is not large enough to represent the 
               number of days.
            </exception>
            <overloads>
               Initializes a new instance of <strong>TdIntervalDayToSecond</strong>.
            </overloads>
            <param name="days">Number of days.</param>
            <param name="hours">Number of hours.</param>
            <param name="minutes">Number of minutes.</param>
            <param name="seconds">Number of seconds.</param>
            <param name="microseconds">The fractional number of seconds.</param>
            <param name="precision">Number of significant digits of the day.</param>
            <param name="scale">The number of decimal places for the second.</param>
        </member>
        <member name="M:Teradata.Client.Provider.TdIntervalDayToSecond.#ctor(System.Int32,System.Int32,System.Int32,System.Int32,System.Int32)">
            <summary>
               An instance of <see cref="T:Teradata.Client.Provider.TdIntervalDayToSecond"/> is created from a day and time  
               components specified as integers. 
            </summary>
            <remarks>
            <para>
               The number of days, hours, minutes, seconds and microseconds are constructed into
               a <strong>TdIntervalDayToSecond</strong> and evaluated against  <see cref="F:Teradata.Client.Provider.TdIntervalDayToSecond.MinValue"/> 
               and <see cref="F:Teradata.Client.Provider.TdIntervalDayToSecond.MaxValue"/>.  The microseconds parameter represents 10 ^-6 seconds
               and the microsecond parameter is divided by 10^-6 (.000001) to create a fractional number 
               of seconds. The <see cref="P:Teradata.Client.Provider.TdIntervalDayToSecond.Scale"/> is then calculated from the number of fractional 
               seconds required. The <see cref="P:Teradata.Client.Provider.TdIntervalDayToSecond.Precision"/> is calculated from the number of digits 
               contained within the interval day component. 
            </para>
            <para>
               For example, 99 days, 28 hours, 75 minutes, 300 seconds and 455666 microseconds
               is first constructed into <strong>TdIntervalDayToSecond</strong> and evaluated against 
               <strong>MinValue</strong> and <strong>MaxValue</strong>. The  
               <strong>TdIntervalDayToSecond</strong> literal representation results in a  
               <strong>TdIntervalDayToSecond</strong> value of '100 5:20:00.455666'. 
               Precision is calculated to be a value of 3 representing 3 significant digits of 100 days.
               The scale is calculated to be 6 from the number of decimal places right of the seconds
               interval which equals the <see cref="F:Teradata.Client.Provider.TdIntervalDayToSecond.MaxScale"/> value.
            </para>
            <para>
               Negative constructor parameters may be supplied to represent negative durations of time.
               Mixed positive and negative constructor parameters are added together that result in a
               negative or positive <strong>TdIntervalDayToSecond</strong>.  For instance, a day
               value of 200, an hour value of -4900, a minute value of 30, a second value of 400
               and 1,200,510 microseconds will result in a <strong>TdIntervalDayToSecond</strong> 
               interval value of -'4 03:23:18.799490' with a calculated precision value of 1
               and a calculated scale of 6.
            </para>
            </remarks>
            <exception cref="T:System.OverflowException" caption="OverflowException">
               The parameters specify a <strong>TdIntervalDayToSecond</strong> value 
               less than <see cref="F:Teradata.Client.Provider.TdIntervalDayToSecond.MinValue"/> or greater than <see cref="F:Teradata.Client.Provider.TdIntervalDayToSecond.MaxValue"/>.
            </exception>
            <param name="days">Number of days.</param>
            <param name="hours">Number of hours.</param>
            <param name="minutes">Number of minutes.</param>
            <param name="seconds">Number of seconds.</param>
            <param name="microseconds">The number of fractional seconds.</param>
        </member>
        <member name="M:Teradata.Client.Provider.TdIntervalDayToSecond.#ctor(System.TimeSpan)">
            <summary>
               An instance of <see cref="T:Teradata.Client.Provider.TdIntervalDayToSecond"/> is created from a <see cref="T:System.TimeSpan"/>.
            </summary>
            <remarks>
            <para>
               The  <strong>TimeSpan</strong> value is converted into a <see cref="T:Teradata.Client.Provider.TdIntervalDayToSecond"/>
               and evaluated against <see cref="F:Teradata.Client.Provider.TdIntervalDayToSecond.MinValue"/> and <see cref="F:Teradata.Client.Provider.TdIntervalDayToSecond.MaxValue"/>.  The 
               <see cref="P:Teradata.Client.Provider.TdIntervalDayToSecond.Precision"/> is then calculated from the number of digits contained within 
               the interval day component and the <see cref="P:Teradata.Client.Provider.TdIntervalDayToSecond.Scale"/> is calculated from the number of 
               decimal places required to represent the fractional seconds.
            </para>
            <para>
               After conversion of the <strong>TimeSpan</strong> value into 
               <strong>TdIntervalDayToSecond</strong>, any fractional seconds will be truncated
               according the the <see cref="F:Teradata.Client.Provider.TdIntervalDayToSecond.MaxScale"/> value of 6 decimal places.
               For example, a TimeSpan value created with a <see cref="P:System.TimeSpan.Ticks"/> value
               of 8726341234567 results in a value of 10 days, 2 hours, 23 minutes, and
               54.1234567 seconds.  The <strong>TdIntervalDayToSecond</strong> literal 
               representation results in a <strong>TdIntervalDayToSecond</strong> value of  
               '10 02:23.123456'. The .1234567 seconds value is truncated by  
               one significant digit. Precision is calculated to be a value of 2 representing two significant 
               digits in the day.
            </para>
            </remarks>
            <exception cref="T:System.OverflowException" caption="OverflowException">
               The <strong>timespan</strong> parameter specifies a 
               <strong>TdIntervalDayToSecond</strong> value less than <see cref="F:Teradata.Client.Provider.TdIntervalDayToSecond.MinValue"/> 
               or greater than <see cref="F:Teradata.Client.Provider.TdIntervalDayToSecond.MaxValue"/>.
            </exception>
            <param name="timeSpan">A TimeSpan to initialize <strong>TdIntervalDayToSecond</strong>.</param>
        </member>
        <member name="M:Teradata.Client.Provider.TdIntervalDayToSecond.#ctor(System.TimeSpan,System.Byte,System.Byte)">
            <summary>
               An instance of <see cref="T:Teradata.Client.Provider.TdIntervalDayToSecond"/> is created using a <see cref="T:System.TimeSpan"/>  
               specifying the precision and the scale as bytes.
            </summary>
            <remarks>
            <para>
               The  <strong>TimeSpan</strong> value is converted into a <see cref="T:Teradata.Client.Provider.TdIntervalDayToSecond"/> 
               and evaluated against <see cref="F:Teradata.Client.Provider.TdIntervalDayToSecond.MinValue"/> and <see cref="F:Teradata.Client.Provider.TdIntervalDayToSecond.MaxValue"/>.  If the values 
               are not exceeded but the resulting days component exceeds the supplied parameter 
               <paramref name="precision"/> value, an exception is generated.
            </para>
            <para>
               After conversion of the <strong>TimeSpan</strong> value into a
               <strong>TdIntervalDayToSecond</strong>, any fractional seconds will be truncated
               according the the supplied parameter <paramref name="scale"/>.
            </para>
            <para>
               For example, a TimeSpan value created with a <see cref="P:System.TimeSpan.Ticks"/> value
               of 8726341234567 results in a value of 10 days, 2 hours, 23 minutes, and
               54.1234567 seconds.  The <strong>TdIntervalDayToSecond</strong> literal 
               representation results in a <strong>TdIntervalDayToSecond</strong> value of  
               '10 02:23.123456'. The .1234567 seconds value will truncated by  
               the supplied parameter <paramref name="scale"/>. The supplied parameter 
               <paramref name="precision"/> must be a value greater than or equal to 2, to 
               eliminate an exceptions due to truncation of the days component.
            </para>
            </remarks>
            <exception cref="T:System.OverflowException" caption="OverflowException">
               The <strong>timespan</strong> parameter specifies a 
               <strong>TdIntervalDayToSecond</strong> value less than <see cref="F:Teradata.Client.Provider.TdIntervalDayToSecond.MinValue"/> 
               or greater than <see cref="F:Teradata.Client.Provider.TdIntervalDayToSecond.MaxValue"/>.
            </exception>
            <exception cref="T:System.ArgumentOutOfRangeException" caption="ArgumentOutOfRangeException">
               The <strong>precision</strong> or <strong>scale</strong> parameters are outside the 
               minimum or maximum range of values."/&gt;.
            </exception>
            <exception cref="T:System.ArgumentException" caption="ArgumentException">
               The <strong>precision</strong> parameter is not large enough to represent 
               the number of days.
            </exception>
            <param name="timeSpan">A TimeSpan to initialize <strong>TdIntervalDayToSecond</strong>.</param>
            <param name="precision">Number of significant digits of the day.</param>
            <param name="scale">The number of decimal places for the second.</param>
        </member>
        <member name="M:Teradata.Client.Provider.TdIntervalDayToSecond.CompareTo(Teradata.Client.Provider.TdIntervalDayToSecond)">
            <summary>
               Compares this instance to the specified <see cref="T:Teradata.Client.Provider.TdIntervalDayToSecond"/>  
               parameter <paramref name="other"/>.
            </summary>
            <returns>
               The result of the comparison is returned as a signed integer.
            </returns>
            <remarks>
            	<para>
                    The integer returned when this instance is compared to <paramref name="other"/>
                    indicates the following:
                </para>
            	<para>
            		<list type="table">
            			<listheader>
            				<term>Return Value</term>
            				<description>Meaning</description>
            			</listheader>
            			<item>
            				<term>Less than Zero</term>
            				<description>
            					<para>
                                    This instance is less than <paramref name="other"/>
                                </para>
            					<para>-or-</para>
            					<para>This instance is <see cref="F:Teradata.Client.Provider.TdIntervalDayToSecond.Null"/> and
                                   <paramref name="other"/> is non-null.
                               </para>
            				</description>
            			</item>
            			<item>
            				<term>Zero</term>
            				<description>
            					<para>
                                    This instance is equal to <paramref name="other"/>
                                </para>
            					<para>-or-</para>
            					<para>
                                   This instance is <Strong>Null</Strong> and <paramref name="other"/> is
                                   <Strong>Null</Strong>.
                                </para>
            				</description>
            			</item>
            			<item>
            				<term>Greater than Zero</term>
            				<description>
            					<para>
                                    This instance is greater than
                                    <paramref name="other"/>
                                </para>
            					<para>-or-</para>
            					<para>
            						<paramref name="other"/> is <Strong>Null</Strong> and this instance is non-null.
                                </para>
            				</description>
            			</item>
            		</list>
            	</para>
            </remarks>
            <param name="other">The <strong>TdIntervalDayToSecond</strong> to compare.</param>
        </member>
        <member name="M:Teradata.Client.Provider.TdIntervalDayToSecond.CompareTo(System.Object)">
            <summary>
               Compares this instance to the specified <see cref="T:Teradata.Client.Provider.TdIntervalDayToSecond"/> 
               parameter <paramref name="obj"/>. 
            </summary>
            <returns>
               The result of the comparison is returned as a signed integer.
            </returns>
            <remarks>
            	<para>
                    The integer returned when this instance is compared to <paramref name="obj"/>
                    indicates the following:
                </para>
            	<para>
            		<list type="table">
            			<listheader>
            				<term>Return Value</term>
            				<description>Meaning</description>
            			</listheader>
            			<item>
            				<term>Less than Zero</term>
            				<description>
            					<para>This instance is less than <paramref name="obj"/></para>
            					<para>-or-</para>
            					<para>This instance is <see cref="F:Teradata.Client.Provider.TdIntervalDayToSecond.Null"/> and <paramref name="obj"/> is non-null.</para>
            				</description>
            			</item>
            			<item>
            				<term>Zero</term>
            				<description>
            					<para>
                                    This instance is equal to <paramref name="obj"/>
                                </para>
            					<para>-or-</para>
            					<para>
                                   This instance is <Strong>Null</Strong> and <paramref name="obj"/> is
                                   <Strong>Null</Strong>.
                                </para>
            				</description>
            			</item>
            			<item>
            				<term>Greater than Zero</term>
            				<description>
            					<para>
                                    This instance is greater than <paramref name="obj"/>.
                                </para>
            					<para>-or-</para>
            					<para>
            						<paramref name="obj"/> is <Strong>Null</Strong> and this instance is non-null
                                </para>
            					<para>-or-</para>
            					<para>
            						<paramref name="obj"/> is a <c>null</c> reference.
                                </para>
            				</description>
            			</item>
            		</list>
            	</para>
              <para>
                 <paramref name="obj"/> must be an instance of <strong>TdIntervalDayToSecond</strong> 
                 type or a <c>null</c> reference.
              </para>
            </remarks>
            <exception cref="T:System.ArgumentException">
               <paramref name="obj"/> is not of same type as <strong>TdIntervalDayToSecond</strong>.
            </exception>
            <seealso cref="M:Teradata.Client.Provider.TdIntervalDayToSecond.CompareTo(Teradata.Client.Provider.TdIntervalDayToSecond)"/>
            <overloads>
               Compares this instance to the supplied <strong>TdIntervalDayToSecond</strong> 
               and returns whether this instance is less than, equal or greater than the supplied 
               <strong>TdIntervalDayToSecond</strong>.
            </overloads>
            <param name="obj">A <strong>TdIntervalDayToSecond</strong> object to compare.</param>
        </member>
        <member name="M:Teradata.Client.Provider.TdIntervalDayToSecond.Equals(Teradata.Client.Provider.TdIntervalDayToSecond)">
            <summary>
               Compares this instance and another <see cref="T:Teradata.Client.Provider.TdIntervalDayToSecond"/> 
               to determine whether they are equal. 
            </summary>
            <returns>
               <c>true</c> if the two <strong>TdIntervalDayToSecond</strong> objects are equal, 
               <c>false</c> otherwise.
            </returns>
            <remarks>
            	<para>
            		The return value is <c>true</c> if the instance is 
                    equal to the <paramref name="other"/>, <c>false</c> otherwise.
                </para>
            	<para>
            		<list type="table">
            			<listheader>
            				<term>Return Value</term>
            				<description>Description</description>
            			</listheader>
            			<item>
            				<term><c>true</c></term>
                            <description>
                                <para>This instance and <paramref name="other"/> are <see cref="F:Teradata.Client.Provider.TdIntervalDayToSecond.Null"/></para>
                                <para>-or-</para>
                                <para>This instance is equal to <paramref name="other"/>.</para>
                            </description>
            			</item>
            			<item>
            				<term><c>false</c></term>
                            <description>
                            <para>
                               This instance is <strong>Null</strong> and <paramref name="other"/> 
                               is not <strong>Null</strong>
                           </para>
                            <para>-or-</para>
                            <para>
                               This instance is not <strong>Null</strong> and <paramref name="other"/>
                               is <strong>Null</strong>
                            </para>
                            <para>-or-</para>
                            <para>This instance is not equal to <paramref name="other"/>.</para>
                            </description>
            			</item>
            		</list>
            	</para>
            </remarks>
            <overloads>
               Returns a value indicating whether two instances of 
               <strong>TdIntervalDayToSecond</strong> are equal.
            </overloads>
            <param name="other">
               <strong>TdIntervalDayToSecond</strong> that will be compared to this instance 
               of TdIntervalDayToSecond.
            </param>
        </member>
        <member name="M:Teradata.Client.Provider.TdIntervalDayToSecond.Equals(Teradata.Client.Provider.TdIntervalDayToSecond,Teradata.Client.Provider.TdIntervalDayToSecond)">
            <summary>
               Compares two <see cref="T:Teradata.Client.Provider.TdIntervalDayToSecond"/> instances to determine whether they are equal.
            </summary>
            <returns>
               <c>true</c> if the two <strong>TdIntervalDayToSecond</strong> instances are equal, 
               <c>false</c> otherwise.
            </returns>
            <remarks>
            	<para>
            		The return value is <c>true</c> if the <paramref name="left"/> is 
                    equal to the <paramref name="right"/>, <c>false</c> otherwise.
                </para>
            	<para>
            		<list type="table">
            			<listheader>
            				<term>Return Value</term>
            				<description>Description</description>
            			</listheader>
            			<item>
            				<term><c>true</c></term>
                            <description>
                                <para>
                                    <paramref name="left"/> is equal to <paramref name="right"/>
                                </para>
                                <para>-or-</para>
                                <para>
                                   <paramref name="left"/> and <paramref name="right"/> are 
                                   <see cref="F:Teradata.Client.Provider.TdIntervalDayToSecond.Null"/>.
                                </para>
                            </description>
            			</item>
            			<item>
            				<term><c>false</c></term>
                            <description>
                              <para>
                                   <paramref name="left"/> is not equal to <paramref name="right"/>
                               </para>
                              <para>-or-</para>
                              <para>
                                   <paramref name="left"/> is not <strong>Null</strong> and 
                                   <paramref name="right"/> is <strong>Null</strong>
                               </para>
                              <para>-or-</para>
                              <para>
                                   <paramref name="left"/> is <strong>Null</strong> and 
                                   <paramref name="right"/> is not <strong>Null</strong>.
                               </para>
                            </description>
            			</item>
            		</list>
            	</para>
            </remarks>
            <example>
                The following code example uses various comparison methods and operators.
                <code lang="CS">
            // Create interval with 5 days, 4 hours, 15 minutes and 0 seconds
            TdIntervalDayToSecond firstInterval = new TdIntervalDayToSecond(5, 4, 15, 0);
            // Create interval with 20 days, 4 hours, 15 minutes and 0 seconds
            TdIntervalDayToSecond secondInterval = new TdIntervalDayToSecond(20, 4, 15, 0);
             
            // The following comparison methods and operators are equivalent
            if (false == TdIntervalDayToSecond.Equals(firstInterval, secondInterval) ||
                firstInterval != secondInterval ||
                true == TdIntervalDayToSecond.NotEquals(firstInterval, secondInterval) )
            {
               Console.WriteLine(“firstInterval does not equal secondInterval”);
            }
                </code>
            </example>
            <overloads>
               Returns a value indicating whether two instances of 
               <strong>TdIntervalDayToSecond</strong> are equal.
            </overloads>
            <param name="left">A <strong>TdIntervalDayToSecond</strong> instance.</param>
            <param name="right">A <strong>TdIntervalDayToSecond</strong> instance.</param>
        </member>
        <member name="M:Teradata.Client.Provider.TdIntervalDayToSecond.Compare(Teradata.Client.Provider.TdIntervalDayToSecond,Teradata.Client.Provider.TdIntervalDayToSecond)">
            <summary>
                Two <see cref="T:Teradata.Client.Provider.TdIntervalDayToSecond"/> intervals are compared and a value is 
                returned that indicates <paramref name="left"/> is greater than, less than or equal 
                to <paramref name="right"/>.
            </summary>
            <returns>
               The result of the comparison is returned as a signed integer.
            </returns>
            <remarks>
            	<list type="table">
            		<listheader>
            			<term>Return Value</term>
            			<description>Description</description>
            		</listheader>
            		<item>
            			<term>Less than Zero</term>
            			<description>
                           <para><paramref name="left"/> is less than <paramref name="right"/></para>
            				<para>-or-</para>
                           <para>
                              <paramref name="left"/> is <see cref="F:Teradata.Client.Provider.TdIntervalDayToSecond.Null"/>
                              and <paramref name="right"/> is not <strong>Null</strong>.
                           </para>
                        </description>
            		</item>
            		<item>
            			<term>Zero</term>
            			<description>
            				<para><paramref name="left"/> equals <paramref name="right"/></para>
            				<para>-or-</para>
                           <para>
                                <paramref name="left"/> is <strong>Null</strong> 
                                 and <paramref name="right"/> is <strong>Null</strong>.
                           </para>
                        </description>
            		</item>
            		<item>
            			<term>Greater than Zero</term>
            			<description>
            				<para><paramref name="left"/> is greater than <paramref name="right"/></para>
            				<para>-or-</para>
            				<para><paramref name="left"/> is not <strong>Null</strong> and
                            <paramref name="right"/> is <strong>Null</strong>.</para>
                        </description>
            		</item>
            	</list>
            </remarks>
            <param name="left">An instance of <strong>TdIntervalDayToSecond</strong>.</param>
            <param name="right">An instance of <strong>TdIntervalDayToSecond</strong>.</param>
        </member>
        <member name="M:Teradata.Client.Provider.TdIntervalDayToSecond.NotEquals(Teradata.Client.Provider.TdIntervalDayToSecond,Teradata.Client.Provider.TdIntervalDayToSecond)">
            <summary>
                Compares two <see cref="T:Teradata.Client.Provider.TdIntervalDayToSecond"/> interval types to determine whether
                 the <paramref name="left"/> is not equal to <paramref name="right"/>.
            </summary>
            <returns>
            	<para>
            		<c>true</c> indicates <paramref name="left"/> is not equal to
                    <paramref name="right"/>, <c>false</c> otherwise.
                </para>
            	<para>
            		<list type="table">
            			<listheader>
            				<term>Return Value</term>
            				<description>Description</description>
            			</listheader>
            			<item>
            				<term><c>true</c></term>
            				<description>
            					<para>
            						<paramref name="left"/> is less than or greater
                                    than <paramref name="right"/>
            					</para>
            					<para>-or-</para>
            					<para>
            						Either <paramref name="left"/> or <paramref name="right"/> is
                                   <see cref="F:Teradata.Client.Provider.TdIntervalDayToSecond.Null"/>.
                                </para>
            				</description>
            			</item>
            			<item>
            				<term><c>false</c></term>
            				<description>
            					<para>
            						<paramref name="left"/> is equal to
                                    <paramref name="right"/>
            					</para>
            					<para>-or-</para>
            					<para>
            						<paramref name="left"/> and <paramref name="right"/> are
                                   <strong>Null</strong>.
                                </para>
            				</description>
            			</item>
            		</list>
            	</para>
            </returns>
            <param name="left">An instance of <strong>TdIntervalDayToSecond</strong>.</param>
            <param name="right">An instance of <strong>TdIntervalDayToSecond</strong>.</param>
        </member>
        <member name="M:Teradata.Client.Provider.TdIntervalDayToSecond.GreaterThan(Teradata.Client.Provider.TdIntervalDayToSecond,Teradata.Client.Provider.TdIntervalDayToSecond)">
            <summary>
               Determines whether the <paramref name="left"/> is greater than the <paramref name="right"/>.
            </summary>
            <returns>
            	<para>
            		<c>true</c> indicates the <paramref name="left"/> is greater than
                    the <paramref name="right"/>, <c>false</c> otherwise.
                </para>
            	<para>
            		<list type="table">
            			<listheader>
            				<term>Return Value</term>
            				<description>Description</description>
            			</listheader>
            			<item>
            				<term><c>true</c></term>
            				<description>
            					<paramref name="left"/> and
                                <paramref name="right"/> are not
                                <see cref="F:Teradata.Client.Provider.TdIntervalDayToSecond.Null"/> and
                                <paramref name="left"/> is greater than
                                <paramref name="right"/>.
            				</description>
            			</item>
            			<item>
            				<term><c>false</c></term>
            				<description>
            					<para>
                                    The <paramref name="left"/> is less than or equal
                                    to <paramref name="right"/>
            					</para>
            					<para>-or-</para>
            					<para>
                                   <paramref name="left"/> and / or <paramref name="right"/>
                                   is <strong>Null</strong>.
                                </para>
            				</description>
            			</item>
            		</list>
            	</para>
            </returns>
            <remarks>
            	<para>
                    Comparison operators always return <c>false</c> if one of the operands is
                    <strong>Null</strong>. Therefore you should not assume that the reverse
                    condition is <c>true</c>. For example you cannot assume that the
                    <paramref name="left"/> is less than or equal to the
                    <paramref name="right"/> if <c>GreaterThan</c> returns <c>false</c>.
                </para>
            	<para>
                    The reverse condition is <c>true</c> when the
                    <paramref name="left"/> and the
                    <paramref name="right"/> are not <strong>Null</strong>.
                </para>
            </remarks>
            <param name="left">An instance of <see cref="T:Teradata.Client.Provider.TdIntervalDayToSecond"/>.</param>
            <param name="right">An instance of <strong>TdIntervalDayToSecond</strong>.</param>
        </member>
        <member name="M:Teradata.Client.Provider.TdIntervalDayToSecond.GreaterThanOrEqual(Teradata.Client.Provider.TdIntervalDayToSecond,Teradata.Client.Provider.TdIntervalDayToSecond)">
            <summary>
               This operator determines whether the <paramref name="left"/> is greater than or 
               equal to the <paramref name="right"/>.
            </summary>
            <returns>
            	<para>
            		<c>true</c> indicates the <paramref name="left"/> is greater than
                    or equal to the <paramref name="right"/>, <c>false</c> otherwise.
                </para>
            	<para>
            		<list type="table">
            			<listheader>
            				<term>Return Value</term>
            				<description>Description</description>
            			</listheader>
            			<item>
            				<term><c>true</c></term>
            				<description>
            					<para>
            						<paramref name="left"/> and
                                    <paramref name="right"/> are not
                                    <see cref="F:Teradata.Client.Provider.TdIntervalDayToSecond.Null"/> and
                                    <paramref name="left"/> is greater than or equal
                                    to <paramref name="right"/>
            					</para>
            					<para>-or-</para>
            					<para>
            						<paramref name="left"/> is <strong>Null</strong>
                                    and <paramref name="right"/> is
                                    <strong>Null</strong>.
            					</para>
            				</description>
            			</item>
            			<item>
            				<term><c>false</c></term>
            				<description>
            					<para>
                                    The <paramref name="left"/> is less than
                                    <paramref name="right"/>
            					</para>
            					<para>-or-</para>
            					<para>
                                    Either <paramref name="left"/> or
                                    <paramref name="right"/> is <strong>Null</strong>.
            					</para>
            				</description>
            			</item>
            		</list>
            	</para>
            </returns>
            <remarks>
            	<para>
                    Comparison operators always return <c>false</c> if one of the operands is
                    <strong>Null</strong>. Therefore you should not assume that the reverse
                    condition is <c>true</c>. For example you cannot assume that the
                    <paramref name="left"/> is less than the
                    <paramref name="right"/> if the <c>GreaterThanOrEqual</c> method returns
                    <c>false</c>.
                </para>
            	<para>
                    The reverse condition is <c>true</c> when the
                    <paramref name="left"/> and the
                    <paramref name="right"/> are not <strong>Null</strong>.
                </para>
            </remarks>
            <param name="left">An instance of <see cref="T:Teradata.Client.Provider.TdIntervalDayToSecond"/>.</param>
            <param name="right">An instance of <strong>TdIntervalDayToSecond</strong>.</param>
        </member>
        <member name="M:Teradata.Client.Provider.TdIntervalDayToSecond.LessThan(Teradata.Client.Provider.TdIntervalDayToSecond,Teradata.Client.Provider.TdIntervalDayToSecond)">
            <summary>
               This method determines whether the <paramref name="left"/> is 
               less than the <paramref name="right"/>.
            </summary>
            <returns>
            	<para>
            		<c>true</c> indicates the <paramref name="left"/> is less than
                    the <paramref name="right"/>, <c>false</c> otherwise.
                </para>
            	<para>
            		<list type="table">
            			<listheader>
            				<term>Return Value</term>
            				<description>Description</description>
            			</listheader>
            			<item>
            				<term><c>true</c></term>
            				<description>
            					<paramref name="left"/> and <paramref name="right"/> are
                                not <see cref="F:Teradata.Client.Provider.TdIntervalDayToSecond.Null"/> and
                                <paramref name="left"/> is less than
                                <paramref name="right"/>.
            				</description>
            			</item>
            			<item>
            				<term><c>false</c></term>
            				<description>
            					<para>
                                    The <paramref name="left"/> is greater than or
                                    equal to <paramref name="right"/>
            					</para>
            					<para>-or-</para>
            					<para>
                                    <paramref name="left"/> and / or <paramref name="right"/> is
                                    <strong>Null</strong>.
            					</para>
            				</description>
            			</item>
            		</list>
            	</para>
            </returns>
            <remarks>
            	<para>
                    Comparison operators always return <c>false</c> if one of the operands is
                    <strong>Null</strong>. Therefore you should not assume that the reverse
                    condition is <c>true</c>. For example you cannot assume that the
                    <paramref name="left"/> is greater than or equal to the
                    <paramref name="right"/> if the <c>LessThan</c> method returns
                    <c>false</c>.
                </para>
            	<para>
                    The reverse condition is <c>true</c> when the
                    <paramref name="left"/> and the
                    <paramref name="right"/> are not <strong>Null</strong>.
                </para>
            </remarks>
            <param name="left">An instance of <see cref="T:Teradata.Client.Provider.TdIntervalDayToSecond"/>.</param>
            <param name="right">An instance of <strong>TdIntervalDayToSecond</strong>.</param>
        </member>
        <member name="M:Teradata.Client.Provider.TdIntervalDayToSecond.LessThanOrEqual(Teradata.Client.Provider.TdIntervalDayToSecond,Teradata.Client.Provider.TdIntervalDayToSecond)">
            <summary>
                This method determines whether the <paramref name="left"/> is less
                than or equal to the <paramref name="right"/>.
            </summary>
            <returns>
            	<para>
            		<c>true</c> indicates the <paramref name="left"/> is less than or
                    equal to the <paramref name="right"/>, <c>false</c> otherwise.
                </para>
            	<para>
            		<list type="table">
            			<listheader>
            				<term>Return Value</term>
            				<description>Description</description>
            			</listheader>
            			<item>
            				<term><c>true</c></term>
            				<description>
            					<para>
            						<paramref name="left"/> and
                                    <paramref name="right"/> are not
                                    <see cref="F:Teradata.Client.Provider.TdIntervalDayToSecond.Null"/> and
                                    <paramref name="left"/> is less than or equal to
                                    <paramref name="right"/>
            					</para>
            					<para>-or-</para>
            					<para>
            						<paramref name="left"/> is <strong>Null</strong>
                                    and <paramref name="right"/> is
                                    <strong>Null</strong>.
            					</para>
            				</description>
            			</item>
            			<item>
            				<term><c>false</c></term>
            				<description>
            					<para>
                                    The <paramref name="left"/> is greater than
                                    <paramref name="right"/>
            					</para>
            					<para>-or-</para>
            					<para>
                                    Either <paramref name="left"/> or
                                    <paramref name="right"/> is <strong>Null</strong>.
            					</para>
            				</description>
            			</item>
            		</list>
            	</para>
            </returns>
            <remarks>
            	<para>
                    Comparison operators always return <c>false</c> if one of the operands is
                    <strong>Null</strong>. Therefore you should not assume that the reverse
                    condition is <c>true</c>. For example you cannot assume that the
                    <paramref name="left"/> is greater than the
                    <paramref name="right"/> if the <c>LessThanOrEqual</c> method returns
                    <c>false</c>.
                </para>
            	<para>
                    The reverse condition is <c>true</c> when the
                    <paramref name="left"/> and the
                    <paramref name="right"/> are not <strong>Null</strong>.
                </para>
            </remarks>
            <param name="left">An instance of <see cref="T:Teradata.Client.Provider.TdIntervalDayToSecond"/>.</param>
            <param name="right">An instance of <strong>TdIntervalDayToSecond</strong>.</param>
        </member>
        <member name="M:Teradata.Client.Provider.TdIntervalDayToSecond.Equals(System.Object)">
            <summary>
               Compares this instance and <paramref name="obj"/> to determine whether they
               are equal. 
            </summary>
            <returns>
               <c>true</c> if the two <see cref="T:Teradata.Client.Provider.TdIntervalDayToSecond"/>s are equal, 
               <c>false</c> otherwise.
            </returns>
            <remarks>
            	<para>
                    The return value is <c>true</c> if the instance is equal to the
                    <paramref name="obj"/>, <c>false</c> otherwise.
                </para>
            	<para>
            		<list type="table">
            			<listheader>
            				<term>Return Value</term>
            				<description>Description</description>
            			</listheader>
            			<item>
            				<term>
            					<c>true</c>
            				</term>
            				<description>
            					<para>
                                    This instance and <paramref name="obj"/> are
                                    <see cref="F:Teradata.Client.Provider.TdIntervalDayToSecond.Null"/>.
                                </para>
            					<para>-or-</para>
            					<para>
                                    This instance is equal to <paramref name="obj"/>.
                                </para>
            				</description>
            			</item>
            			<item>
            				<term>
            					<c>false</c>
            				</term>
            				<description>
            					<para>
                                    This instance is not equal to
                                    <paramref name="obj"/>.
                                </para>
            					<para>-or-</para>
            					<para>
                                    This instance is not <strong>Null</strong> and
                                    <paramref name="obj"/> is <strong>Null</strong>.
                                </para>
            					<para>-or-</para>
            					<para>
                                    This instance is <strong>Null</strong> and
                                    <paramref name="obj"/> is not <strong>Null</strong>
            					</para>
            					<para>-or-</para>
            					<para>
            						<paramref name="obj"/> is a <strong>null</strong>
                                    reference.
                                </para>
            				</description>
            			</item>
            		</list>
            	</para>
            </remarks>
            <example>
                The following code example uses various comparison methods and operators.
                <code lang="CS">
            // Create TdIntervalDayToSecond with 5 days, 1 hour, 30 minutes, 0 seconds,
            //   0 fractional seconds with maximum precision and maximum scale
            TdIntervalDayToSecond firstInterval = new TdIntervalDayToSecond(5, 1, 30, 0, 0);
            // Create TdIntervalDayToSecond with 20 days, 2 hour, 30 minutes, 0 seconds,
            //   0 fractional seconds with maximum precision and maximum scale
            Object intervalObj = new TdIntervalDayToSecond(20, 2, 30, 0, 0);
             
            // The following comparison methods and operators are equivalent
            if (false == TdIntervalDayToSecond.Equals(firstInterval, (TdIntervalDayToSecond)intervalObj) ||
                firstInterval != (TdIntervalDayToSecond)intervalObj ||
                false == firstInterval.Equals(intervalObj) )
            {
               Console.WriteLine(“firstInterval does not equal intervalObj”);
            }
                </code>
            </example>
            <overloads>
               Returns a value indicating whether two instances of <strong>TdIntervalDayToSecond</strong> 
               are equal.
            </overloads>
            <param name="obj">
               <strong>TdIntervalDayToSecond</strong> that will be compared to this instance 
               of <strong>TdIntervalDayToSecond</strong>.
            </param>
        </member>
        <member name="M:Teradata.Client.Provider.TdIntervalDayToSecond.GetHashCode">
            <summary>
               Returns the hash code for this instance. 
            </summary>
            <returns>The hash code is returned.</returns>
        </member>
        <member name="M:Teradata.Client.Provider.TdIntervalDayToSecond.ToString(System.String)">
            <summary>
               Converts this instance to its equivalent String representation using the specified format.
            </summary>
            <remarks>
            	<para>This method supports the following format specifiers:</para>
            	<para>
            		<list type="table">
            			<listheader>
            				<term>Format Specifier</term>
            				<description>Description</description>
            			</listheader>
            			<item>
            				<term>G</term>
            				<description>
            					<para>General interval format.</para>
            					<para>[sign][days][space character][hh]:[mm]:[ss].[ffffff]</para>
            				</description>
            			</item>
            			<item>
            				<term>L</term>
            				<description>
            					<para>Teradata literal format. This string may be used in
                                generating SQL against the Teradata database.</para>
            					<para>INTERVAL [sign]'[days][space
                                character][hh]:[mm]:[ss].[ffffff]' DAY TO SECOND</para>
            				</description>
            			</item>
            		</list>
            	</para>
            	<para>Below is the description of each format item.</para>
            	<para>
            		<list type="table">
            			<listheader>
            				<term>Format Item</term>
            				<description>Description</description>
            			</listheader>
            			<item>
            				<term>sign</term>
            				<description>If negative a minus sign will be displayed.</description>
            			</item>
            			<item>
            				<term>days</term>
            				<description>The number of days (one to four digits in
                            length).</description>
            			</item>
            			<item>
            				<term>hh</term>
            				<description>The number of hours from 00 - 23.</description>
            			</item>
            			<item>
            				<term>mm</term>
            				<description>The number of minutes from 00 - 59.</description>
            			</item>
            			<item>
            				<term>ss</term>
            				<description>The number of seconds from 00 - 59.</description>
            			</item>
            			<item>
            				<term>ffffff</term>
            				<description>The number of fractional seconds (0 to 6 digits in
                            length).</description>
            			</item>
            		</list>
            	</para>
            	<para>
                    Cultural settings are not supported.
                </para>
            </remarks>
            <returns>
               A string representation of the <strong>TdIntervalDayToSecond</strong> will be returned.
            </returns>
            <exception cref="T:System.FormatException" caption="FormatException">
               <paramref name="format"/> contains an invalid format specifier.
            </exception>
            <param name="format">
               The format string that will be used to format the <see cref="T:Teradata.Client.Provider.TdIntervalDayToSecond"/>.
            </param>
        </member>
        <member name="M:Teradata.Client.Provider.TdIntervalDayToSecond.ToString">
            <summary>
               Converts this instance to its equivalent String representation.
            </summary>
            <remarks>
               <para>The string returned will follow this format:</para>
            	<para>[sign][days][space character][hh]:[mm]:[ss].[ffffff]</para>
            	<para>Below is the description of each format item.</para>
            	<para>
            		<list type="table">
            			<listheader>
            				<term>Format Item</term>
            				<description>Description</description>
            			</listheader>
            			<item>
            				<term>sign</term>
            				<description>If negative a minus sign will be displayed.</description>
            			</item>
            			<item>
            				<term>days</term>
            				<description>The number of days (one to four digits in
                            length).</description>
            			</item>
            			<item>
            				<term>hh</term>
            				<description>The number of hours from 00 - 23.</description>
            			</item>
            			<item>
            				<term>mm</term>
            				<description>The number of minutes from 00 - 59.</description>
            			</item>
            			<item>
            				<term>ss</term>
            				<description>The number of seconds from 00 - 59.</description>
            			</item>
            			<item>
            				<term>ffffff</term>
            				<description>The number of fractional seconds (0 to 6
                            digits in length).</description>
            			</item>
            		</list>
            	</para>
            	<para>
                    Cultural settings are not supported.
                </para>
            </remarks>
            <returns>
               A string representation of the <strong>TdIntervalDayToSecond</strong> will be returned.
            </returns>
        </member>
        <member name="M:Teradata.Client.Provider.TdIntervalDayToSecond.Parse(System.String)">
            <summary>
               The specified string is converted into an equivalent <see cref="T:Teradata.Client.Provider.TdIntervalDayToSecond"/>.
            </summary>
            <returns>
               A <strong>TdIntervalDayToSecond</strong> is returned that is equivalent to the 
               <strong>TdIntervalDayToSecond</strong> contained in the input string.
            </returns>
            <exception cref="T:System.FormatException" caption="FormatException">
               <paramref name="value"/> cannot be converted into a 
               <strong>TdIntervalDayToSecond</strong> interval.
            </exception>
            <exception cref="T:System.ArgumentNullException" caption="ArgumentNullException">
               <paramref name="value"/> is a <c>null</c> reference.
            </exception>
            <exception cref="T:System.OverflowException">
               The resultant operation returns a value greater than the <see cref="F:Teradata.Client.Provider.TdIntervalDayToSecond.MaxValue"/> 
               or less than the <see cref="F:Teradata.Client.Provider.TdIntervalDayToSecond.MinValue"/>.
            </exception>
            <remarks>
            	<para>This method supports the following string formats:</para>
            	<para>
            		<list type="table">
            			<listheader>
            				<term>String Format</term>
            				<description>Description</description>
            			</listheader>
            			<item>
            				<term>General interval format.</term>
            				<description>
            					<para>[sign][days][space character][hh]:[mm]:[ss].[ffffff]</para>
            				</description>
            			</item>
            			<item>
            				<term>Teradata literal format. This string may be used in
                                generating SQL against the Teradata database.</term>
            				<description>
            					<para>INTERVAL [sign]'[days][space
                                character][hh]:[mm]:[ss].[ffffff]' DAY TO SECOND</para>
            				</description>
            			</item>
            		</list>
            	</para>
            	<para>Below is the description of each format item.</para>
            	<para>
            		<list type="table">
            			<listheader>
            				<term>Format Item</term>
            				<description>Description</description>
            			</listheader>
            			<item>
            				<term>sign</term>
            				<description>If negative a minus sign will be displayed.</description>
            			</item>
            			<item>
            				<term>days</term>
            				<description>The number of days (one to four digits in
                            length).</description>
            			</item>
            			<item>
            				<term>hh</term>
            				<description>The number of hours from 00 - 23.</description>
            			</item>
            			<item>
            				<term>mm</term>
            				<description>The number of minutes from 00 - 59.</description>
            			</item>
            			<item>
            				<term>ss</term>
            				<description>The number of seconds from 00 - 59.</description>
            			</item>
            			<item>
            				<term>ffffff</term>
            				<description>The number of fractional seconds (0 to 6 digits in
                            length).</description>
            			</item>
            		</list>
            	</para>
            	<para>
                    Cultural settings are not supported.
                </para>
            	<para>
            		While parsing the <paramref name="value"/> the <see cref="P:Teradata.Client.Provider.TdIntervalDayToSecond.Precision"/> will be
            		set to the number of digits contained within the day component.  The 
            		<see cref="P:Teradata.Client.Provider.TdIntervalDayToSecond.Scale"/> will be set to the number of digits in the fractional
            		seconds component (digits that are to the right of the decimal point).
            	</para>
            	<para>
            		For example a <paramref name="value"/> of "222 10:25:40.1234" will
            		contain a precision of 3 and a scale of 4.
            	</para>
            </remarks>
            <overloads>
            	The specified string is converted into an equivalent 
               <strong>TdIntervalDayToSecond</strong> interval.
            </overloads>
            <param name="value">
               A string to be converted into a <strong>TdIntervalDayToSecond</strong>.
             </param>
        </member>
        <member name="M:Teradata.Client.Provider.TdIntervalDayToSecond.TryParse(System.String,Teradata.Client.Provider.TdIntervalDayToSecond@)">
            <summary>
               The specified string is converted into an equivalent <see cref="T:Teradata.Client.Provider.TdIntervalDayToSecond"/>. 
            </summary>
            <returns>
                <c>true</c> if the conversion of <paramref name="value"/> succeeded, 
                <c>false</c> otherwise.
            </returns>
            <remarks>
            	<para>This method supports the following string formats:</para>
            	<para>
            		<list type="table">
            			<listheader>
            				<term>String Format</term>
            				<description>Description</description>
            			</listheader>
            			<item>
            				<term>General interval format.</term>
            				<description>
            					<para>[sign][days][space character][hh]:[mm]:[ss].[ffffff]</para>
            				</description>
            			</item>
            			<item>
            				<term>Teradata literal format. This string may be used in
                                generating SQL against the Teradata database.</term>
            				<description>
            					<para>INTERVAL [sign]'[days][space
                                character][hh]:[mm]:[ss].[ffffff]' DAY TO SECOND</para>
            				</description>
            			</item>
            		</list>
            	</para>
            	<para>Below is the description of each format item.</para>
            	<para>
            		<list type="table">
            			<listheader>
            				<term>Format Item</term>
            				<description>Description</description>
            			</listheader>
            			<item>
            				<term>sign</term>
            				<description>If negative a minus sign will be displayed.</description>
            			</item>
            			<item>
            				<term>days</term>
            				<description>The number of days (one to four digits in
                            length).</description>
            			</item>
            			<item>
            				<term>hh</term>
            				<description>The number of hours from 00 - 23.</description>
            			</item>
            			<item>
            				<term>mm</term>
            				<description>The number of minutes from 00 - 59.</description>
            			</item>
            			<item>
            				<term>ss</term>
            				<description>The number of seconds from 00 - 59.</description>
            			</item>
            			<item>
            				<term>ffffff</term>
            				<description>The number of fractional seconds (0 to 6 digits in
                            length).</description>
            			</item>
            		</list>
            	</para>
            	<para>
                    Cultural settings are not supported.
                </para>
            	<para>
            		While parsing the <paramref name="value"/> the <see cref="P:Teradata.Client.Provider.TdIntervalDayToSecond.Precision"/> will be
            		set to the number of digits contained within the day component.  The 
            		<see cref="P:Teradata.Client.Provider.TdIntervalDayToSecond.Scale"/> will be set to the number of digits in the fractional
            		seconds component (digits that are to the right of the decimal point).
            	</para>
            	<para>
            		For example a <paramref name="value"/> of "222 10:25:40.1234" will
            		contain a precision of 3 and a scale of 4.
            	</para>
            </remarks>
            <overloads>
               The specified string is converted into an equivalent 
               <see cref="T:Teradata.Client.Provider.TdIntervalDayToSecond"/> interval.  A <c>true</c> is returned 
               if the conversion succeeded, <c>false</c> otherwise.
            </overloads>
            <param name="value">A string to be converted into a <strong>TdIntervalDayToSecond</strong>.</param>
            <param name="result">The converted string into a <strong>TdIntervalDayToSecond</strong>.</param>
        </member>
        <member name="M:Teradata.Client.Provider.TdIntervalDayToSecond.GetXmlSchema(System.Xml.Schema.XmlSchemaSet)">
             <summary>
                Gets the XML Qualified name for <see cref="T:Teradata.Client.Provider.TdIntervalDayToSecond"/> XML type mapping.
             </summary>
             <param name="xmlSchemaSet">
                Holds zero or more XML Schema definition language (XSD) schemas.
             </param>
             <returns>
                Returns <strong>xs:duration</strong>.
             </returns>
             <example>
             This example shows how to use the <strong>TdIntervalDayToSecond</strong> with 
             <see cref="T:System.Xml.Serialization.XmlSerializer"/> class. <see cref="T:System.Xml.Serialization.XmlElementAttribute"/> is used to 
             indicate that the Teradata Database column can be <strong>Null</strong>.
             <code>
              public class Order
              {
                  public TdTimestamp Date;
             
                  public TdIntervalDayToSecond ExpirationPeriod;
             
                  public TdTimestamp ExpirationDate;
            
                  public Int32 ProductId;
            
                  public Int32 Quantity;
            
                  public Int32? BackOrderQuantity;
            
                  [XmlElementAttribute(IsNullable = true)]        
                  public TdDecimal BackOrderPrice;
              }
             
              internal class OrderWriter
              {
              
                  public static void Write()
                  {
                      // Setup the order
                      Order x = new Order();
              
                      x.Date = new TdTimestamp(DateTime.Today);
                      // 5 days 4 hours 30 minutes 0 seconds and 0 fractional seconds
                      x.ExpirationPeriod = new TdIntervalDayToSecond(5, 4, 30, 0, 0);
                      x.ExpirationDate = x.Date + x.ExpirationPeriod;
                      x.ProductId = 100;
                      x.Quantity = 2000;
                      x.BackOrderQuantity = null;
                      x.BackOrderPrice = TdDecimal.Null;
            
                      // Write out today's orders to the file.
                      //
                      // Open the file.
                      XmlWriterSettings settings = new XmlWriterSettings();
                      settings.Indent = true;
                      XmlWriter writer = XmlWriter.Create(@"C:\Temp\TodayOrders.XML", settings);
                      writer.WriteStartElement("TodayOrders");
                
                      // Write out the schema.
                      XmlSchemas schemas = new XmlSchemas();
                      XmlSchemaExporter schExporter = new XmlSchemaExporter(schemas);
                      schExporter.ExportTypeMapping(new XmlReflectionImporter().ImportTypeMapping(typeof(Order)));
                      schemas[0].Write(writer);
            
                      // Write out the orders.
                      XmlSerializer xml = new XmlSerializer(typeof(Order));
                      xml.Serialize(writer, x);
              
                      // Close the document.
                      writer.WriteEndDocument();
                      writer.Close();
                  }
              }
             
              /* Output is:
             
              &lt;TodayOrders&gt;
                &lt;xs:schema elementFormDefault="qualified" xmlns:xs="http://www.w3.org/2001/XMLSchema"&gt;
                  &lt;xs:element name="Order" nillable="true" type="Order" /&gt;
                  &lt;xs:complexType name="Order"&gt;
                    &lt;xs:sequence&gt;
                      &lt;xs:element minOccurs="1" maxOccurs="1" name="Date" type="xs:dateTime" /&gt;
                      &lt;xs:element minOccurs="1" maxOccurs="1" name="ExpirationPeriod" type="xs:duration" /&gt;
                      &lt;xs:element minOccurs="1" maxOccurs="1" name="ExpirationDate" type="xs:dateTime" /&gt;
                      &lt;xs:element minOccurs="1" maxOccurs="1" name="ProductId" type="xs:int" /&gt;
                      &lt;xs:element minOccurs="1" maxOccurs="1" name="Quantity" type="xs:int" /&gt;
                      &lt;xs:element minOccurs="1" maxOccurs="1" name="BackOrderQuantity" nillable="true" type="xs:int" /&gt;
                      &lt;xs:element minOccurs="1" maxOccurs="1" name="BackOrderPrice" nillable="true" type="xs:decimal" /&gt;
                    &lt;/xs:sequence&gt;
                  &lt;/xs:complexType&gt;
                &lt;/xs:schema&gt;
                &lt;Order xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xmlns:xsd="http://www.w3.org/2001/XMLSchema"&gt;
                  &lt;Date&gt;2008-02-01T00:00:00-08:00&lt;/Date&gt;
                  &lt;ExpirationPeriod&gt;P5DT4H30M&lt;/ExpirationPeriod&gt;
                  &lt;ExpirationDate&gt;2008-02-06T04:30:00-08:00&lt;/ExpirationDate&gt;
                  &lt;ProductId&gt;100&lt;/ProductId&gt;
                  &lt;Quantity&gt;2000&lt;/Quantity&gt;
                  &lt;BackOrderQuantity xsi:nil="true" /&gt;
                  &lt;BackOrderPrice xsi:nil="true" /&gt;
                &lt;/Order&gt;
              &lt;/TodayOrders&gt;
             
              */
             </code>
             </example>        
        </member>
        <member name="M:Teradata.Client.Provider.TdIntervalDayToSecond.op_Addition(Teradata.Client.Provider.TdIntervalDayToSecond,Teradata.Client.Provider.TdIntervalDayToSecond)">
            <summary>
               A <see cref="T:Teradata.Client.Provider.TdIntervalDayToSecond"/> is added to another 
               <strong>TdIntervalDayToSecond</strong>.
            </summary>
            <remarks>
            <para>
               If either parameter is <strong>Null</strong> a <see cref="F:Teradata.Client.Provider.TdIntervalDayToSecond.Null"/> will be returned.
            </para>
            <para>
               The returned <strong>TdIntervalDayToSecond</strong> will contain a precision 
               set to the <see cref="F:Teradata.Client.Provider.TdIntervalDayToSecond.MaxPrecision"/>. The scale will always be set to the the scale 
               of the operand containing the greatest scale.
            </para>
            </remarks>
            <returns>
               A new <strong>TdIntervalDayToSecond</strong> as the result of adding a 
               <strong>TdIntervalDayToSecond</strong> to another <strong>TdIntervalDayToSecond</strong>.
            </returns>        
            <exception cref="T:System.OverflowException">
               The resultant operation returns a value greater than the <see cref="F:Teradata.Client.Provider.TdIntervalDayToSecond.MaxValue"/> 
               or less than the <see cref="F:Teradata.Client.Provider.TdIntervalDayToSecond.MinValue"/>.
            </exception>
            <param name="left">A <strong>TdIntervalDayToSecond</strong>.</param>
            <param name="right">A <strong>TdIntervalDayToSecond</strong>.</param>
        </member>
        <member name="M:Teradata.Client.Provider.TdIntervalDayToSecond.op_Subtraction(Teradata.Client.Provider.TdIntervalDayToSecond,Teradata.Client.Provider.TdIntervalDayToSecond)">
            <summary>
               A <see cref="T:Teradata.Client.Provider.TdIntervalDayToSecond"/> is subtracted from another <strong>TdIntervalDayToSecond</strong>.
            </summary>
            <remarks>
            <para>
               If either parameter is <strong>Null</strong> a <see cref="F:Teradata.Client.Provider.TdIntervalDayToSecond.Null"/> will be returned.
            </para>
            <para>
               The returned <strong>TdIntervalDayToSecond</strong> will contain a precision 
               set to the <see cref="F:Teradata.Client.Provider.TdIntervalDayToSecond.MaxPrecision"/>. The scale will always be set to the the scale 
               of the operand containing the greatest scale.
            </para>
            </remarks>
            <returns>
               A new <strong>TdIntervalDayToSecond</strong> as the result of subtracting 
               <paramref name="right"/> from the <paramref name="left"/>.
            </returns>
            <exception cref="T:System.OverflowException">
               The resultant operation returns a value greater than the <see cref="F:Teradata.Client.Provider.TdIntervalDayToSecond.MaxValue"/> 
               or less than the <see cref="F:Teradata.Client.Provider.TdIntervalDayToSecond.MinValue"/>.
            </exception>
            <param name="left">A <strong>TdIntervalDayToSecond</strong> to subtract from.</param>
            <param name="right">A <strong>TdIntervalDayToSecond</strong> to subtract.</param>
        </member>
        <member name="M:Teradata.Client.Provider.TdIntervalDayToSecond.op_Multiply(Teradata.Client.Provider.TdIntervalDayToSecond,System.Int32)">
            <summary>
               A <see cref="T:Teradata.Client.Provider.TdIntervalDayToSecond"/> is multiplied by an integer value.
            </summary>
            <remarks>
            <para>
               If <paramref name="interval"/> is <see cref="F:Teradata.Client.Provider.TdIntervalDayToSecond.Null"/> a <strong>Null</strong> will be returned.
            </para>
            <para>
               The returned <strong>TdIntervalDayToSecond</strong> will contain a precision 
               set to the <see cref="F:Teradata.Client.Provider.TdIntervalDayToSecond.MaxPrecision"/>. The scale will always
               be set to the scale of the <paramref name="interval"/>.
            </para>
            </remarks>
            <returns>
               A new <strong>TdIntervalDayToSecond</strong> as the result of multiplying a 
               <strong>TdIntervalDayToSecond</strong> and an integer value.
            </returns>        
            <exception cref="T:System.OverflowException">
               The resultant operation returns a value greater than the <see cref="F:Teradata.Client.Provider.TdIntervalDayToSecond.MaxValue"/> 
               or less than the <see cref="F:Teradata.Client.Provider.TdIntervalDayToSecond.MinValue"/>.
            </exception>
            <param name="interval">A <strong>TdIntervalDayToSecond</strong>.</param>
            <param name="value">A multiplier.</param>
        </member>
        <member name="M:Teradata.Client.Provider.TdIntervalDayToSecond.op_Multiply(System.Int32,Teradata.Client.Provider.TdIntervalDayToSecond)">
            <summary>
               A <see cref="T:Teradata.Client.Provider.TdIntervalDayToSecond"/> is multiplied by an integer value.
            </summary>
            <remarks>
            <para>
               If <paramref name="interval"/> is <see cref="F:Teradata.Client.Provider.TdIntervalDayToSecond.Null"/> a <strong>Null</strong> will be returned.
            </para>
            <para>
               The returned <strong>TdIntervalDayToSecond</strong> will contain a precision 
               set to the <see cref="F:Teradata.Client.Provider.TdIntervalDayToSecond.MaxPrecision"/>. The scale will always 
               be set to the scale of the <paramref name="interval"/>.
            </para>
            </remarks>
            <returns>
               A new <strong>TdIntervalDayToSecond</strong> as the result of multiplying a 
               <strong>TdIntervalDayToSecond</strong> and an integer value.
            </returns>        
            <exception cref="T:System.OverflowException">
               The resultant operation returns a value greater than the <see cref="F:Teradata.Client.Provider.TdIntervalDayToSecond.MaxValue"/> 
               or less than the <see cref="F:Teradata.Client.Provider.TdIntervalDayToSecond.MinValue"/>.
            </exception>
            <param name="value">A multiplier.</param>
            <param name="interval">A <strong>TdIntervalDayToSecond</strong>.</param>
        </member>
        <member name="M:Teradata.Client.Provider.TdIntervalDayToSecond.op_Division(Teradata.Client.Provider.TdIntervalDayToSecond,System.Int32)">
            <summary>
               A <see cref="T:Teradata.Client.Provider.TdIntervalDayToSecond"/> is divided by an integer value.
            </summary>
            <remarks>
            <para>
               If <paramref name="interval"/> is <see cref="F:Teradata.Client.Provider.TdIntervalDayToSecond.Null"/> a <strong>Null</strong> will be returned.
            </para>
            <para>
               The returned <strong>TdIntervalDayToSecond</strong> will contain a precision 
               and scale which matches the precision and scale of the <strong>interval</strong> 
               parameter.
            </para>
            </remarks>
            <returns>
               A new <strong>TdIntervalDayToSecond</strong> as the result of dividing a 
               <strong>TdIntervalDayToSecond</strong> and an integer value.
            </returns>        
            <exception cref="T:System.DivideByZeroException">
               The <paramref name="value"/> divisor cannot be 0.
            </exception>
            <param name="interval">A <strong>TdIntervalDayToSecond</strong>.</param>
            <param name="value">A divisor.</param>
        </member>
        <member name="M:Teradata.Client.Provider.TdIntervalDayToSecond.Add(Teradata.Client.Provider.TdIntervalDayToSecond,Teradata.Client.Provider.TdIntervalDayToSecond)">
            <summary>
               Calculates the sum of two <see cref="T:Teradata.Client.Provider.TdIntervalDayToSecond"/> operands.
            </summary>
            <remarks>
            <para>
               If either parameter is <strong>Null</strong> a <see cref="F:Teradata.Client.Provider.TdIntervalDayToSecond.Null"/> will be returned.
            </para>
            <para>
               The returned <strong>TdIntervalDayToSecond</strong> will contain a precision 
               set to the <see cref="F:Teradata.Client.Provider.TdIntervalDayToSecond.MaxPrecision"/>. The scale will always be set to the 
               scale of the operand containing the greatest scale.
            </para>
            </remarks>
            <returns>A <strong>TdIntervalDayToSecond</strong> containing the sum.</returns>
            <exception cref="T:System.OverflowException">
               The resultant operation returns a value greater than the <see cref="F:Teradata.Client.Provider.TdIntervalDayToSecond.MaxValue"/> 
               or less than the <see cref="F:Teradata.Client.Provider.TdIntervalDayToSecond.MinValue"/>.
            </exception>
            <param name="left">A <strong>TdIntervalDayToSecond</strong>.</param>
            <param name="right">A <strong>TdIntervalDayToSecond</strong>.</param>
        </member>
        <member name="M:Teradata.Client.Provider.TdIntervalDayToSecond.Subtract(Teradata.Client.Provider.TdIntervalDayToSecond,Teradata.Client.Provider.TdIntervalDayToSecond)">
            <summary>
               A <see cref="T:Teradata.Client.Provider.TdIntervalDayToSecond"/> is subtracted from another 
               <strong>TdIntervalDayToSecond</strong>.
            </summary>
            <remarks>
            <para>
               If either parameter is <strong>Null</strong> a <see cref="F:Teradata.Client.Provider.TdIntervalDayToSecond.Null"/> will be returned.
            </para>
            <para>
               The returned <strong>TdIntervalDayToSecond</strong> will contain a precision  
               set to the <see cref="F:Teradata.Client.Provider.TdIntervalDayToSecond.MaxPrecision"/>. The scale will always be set to the the scale 
               of the operand containing the greatest scale.
            </para>
            </remarks>
            <returns>
               A new <strong>TdIntervalDayToSecond</strong> as the result of subtracting 
               <paramref name="right"/> from the <paramref name="left"/>.
            </returns>
            <exception cref="T:System.OverflowException">
               The resultant operation returns a value greater than the <see cref="F:Teradata.Client.Provider.TdIntervalDayToSecond.MaxValue"/> 
               or less than the <see cref="F:Teradata.Client.Provider.TdIntervalDayToSecond.MinValue"/>.
            </exception>
            <param name="left">A <strong>TdIntervalDayToSecond</strong> to subtract from.</param>
            <param name="right">A <strong>TdIntervalDayToSecond</strong> to subtract.</param>
        </member>
        <member name="M:Teradata.Client.Provider.TdIntervalDayToSecond.Multiply(Teradata.Client.Provider.TdIntervalDayToSecond,System.Int32)">
            <summary>
               A <see cref="T:Teradata.Client.Provider.TdIntervalDayToSecond"/> is multiplied by an integer value.
            </summary>
            <remarks>
            <para>
               If <paramref name="interval"/> is <see cref="F:Teradata.Client.Provider.TdIntervalDayToSecond.Null"/> a <strong>Null</strong> will be returned.
            </para>
            <para>
               The returned <strong>TdIntervalDayToSecond</strong> will contain a precision 
               set to the <see cref="F:Teradata.Client.Provider.TdIntervalDayToSecond.MaxPrecision"/>. The scale will always 
               be set to the scale of the <paramref name="interval"/>.
            </para>
            </remarks>
            <returns>
               A new <strong>TdIntervalDayToSecond</strong> as the result of multiplying a 
               <strong>TdIntervalDayToSecond</strong> and an integer value.
            </returns>        
            <exception cref="T:System.OverflowException">
               The resultant operation returns a value greater than the <see cref="F:Teradata.Client.Provider.TdIntervalDayToSecond.MaxValue"/> 
               or less than the <see cref="F:Teradata.Client.Provider.TdIntervalDayToSecond.MinValue"/>.
            </exception>
            <param name="interval">A <strong>TdIntervalDayToSecond</strong>.</param>
            <param name="value">A multiplier.</param>
        </member>
        <member name="M:Teradata.Client.Provider.TdIntervalDayToSecond.Multiply(System.Int32,Teradata.Client.Provider.TdIntervalDayToSecond)">
            <summary>
               A <see cref="T:Teradata.Client.Provider.TdIntervalDayToSecond"/> is multiplied by an integer value.
            </summary>
            <remarks>
            <para>
               If <paramref name="interval"/> is <see cref="F:Teradata.Client.Provider.TdIntervalDayToSecond.Null"/> a <strong>Null</strong> will be returned.
            </para>
            <para>
               The returned <strong>TdIntervalDayToSecond</strong> will contain a precision 
               set to the <see cref="F:Teradata.Client.Provider.TdIntervalDayToSecond.MaxPrecision"/>. The scale will always 
               be set to the scale of the <paramref name="interval"/>.
            </para>
            </remarks>
            <returns>
               A new <strong>TdIntervalDayToSecond</strong> as the result of multiplying a 
               <strong>TdIntervalDayToSecond</strong> and an integer value.
            </returns>        
            <exception cref="T:System.OverflowException">
               The resultant operation returns a value greater than the <see cref="F:Teradata.Client.Provider.TdIntervalDayToSecond.MaxValue"/> 
               or less than the <see cref="F:Teradata.Client.Provider.TdIntervalDayToSecond.MinValue"/>.
            </exception>
            <param name="value">A multiplier.</param>
            <param name="interval">A <strong>TdIntervalDayToSecond</strong>.</param>
        </member>
        <member name="M:Teradata.Client.Provider.TdIntervalDayToSecond.Divide(Teradata.Client.Provider.TdIntervalDayToSecond,System.Int32)">
            <summary>
               A <see cref="T:Teradata.Client.Provider.TdIntervalDayToSecond"/> is divided by an integer value.
            </summary>
            <remarks>
            <para>
               If <paramref name="interval"/> is <see cref="F:Teradata.Client.Provider.TdIntervalDayToSecond.Null"/> a <strong>Null</strong> will be returned.
            </para>
            <para>
               The returned <strong>TdIntervalDayToSecond</strong> will contain a precision 
               and scale which matches the precision and scale of the <strong>interval</strong> 
               parameter.
            </para>
            </remarks>
            <returns>
               A new <strong>TdIntervalDayToSecond</strong> as the result of dividing a 
               <strong>TdIntervalDayToSecond</strong> and an integer value.
            </returns>        
            <exception cref="T:System.DivideByZeroException">
               The <paramref name="value"/> divisor cannot be 0.
            </exception>
            <param name="interval">A <strong>TdIntervalDayToSecond</strong>.</param>
            <param name="value">A divisor.</param>
        </member>
        <member name="M:Teradata.Client.Provider.TdIntervalDayToSecond.op_GreaterThan(Teradata.Client.Provider.TdIntervalDayToSecond,Teradata.Client.Provider.TdIntervalDayToSecond)">
            <summary>
               This operator determines whether the <paramref name="left"/> is greater than 
               the <paramref name="right"/>.
            </summary>
            <returns>
            	<para>
            		<c>true</c> indicates the <paramref name="left"/> is greater than
                    the <paramref name="right"/>, <c>false</c> otherwise.
                </para>
            	<para>
            		<list type="table">
            			<listheader>
            				<term>Return Value</term>
            				<description>Description</description>
            			</listheader>
            			<item>
            				<term><c>true</c></term>
            				<description>
            					<paramref name="left"/> and
                                <paramref name="right"/> are not
                                <see cref="F:Teradata.Client.Provider.TdIntervalDayToSecond.Null"/> and
                                <paramref name="left"/> is greater than
                                <paramref name="right"/>.
            				</description>
            			</item>
            			<item>
            				<term><c>false</c></term>
            				<description>
            					<para>
                                    The <paramref name="left"/> is less than or equal
                                    to <paramref name="right"/>
                                </para>
            					<para>-or-</para>
            					<para>
                                    Either <paramref name="left"/> and / or
                                    <paramref name="right"/> is <strong>Null</strong>.
                                </para>
            				</description>
            			</item>
            		</list>
            	</para>
            </returns>
            <remarks>
            <para>
               Comparison operators always return <c>false</c> if one of the operands is
               <strong>Null</strong>. Therefore you should not assume that the reverse condition
               is <c>true</c>. For example you cannot assume that the <paramref name="left"/> is 
               less than or equal to the <paramref name="right"/> if the "&gt;" operator returns 
               <c>false</c>.
            </para>
            <para>
               The reverse condition is <c>true</c> when the <paramref name="left"/> and the 
                <paramref name="right"/> are not <strong>Null</strong>.
            </para>
            </remarks>
            <param name="left">An instance of <strong>TdIntervalDayToSecond</strong>.</param>
            <param name="right">An instance of <strong>TdIntervalDayToSecond</strong>.</param>
        </member>
        <member name="M:Teradata.Client.Provider.TdIntervalDayToSecond.op_GreaterThanOrEqual(Teradata.Client.Provider.TdIntervalDayToSecond,Teradata.Client.Provider.TdIntervalDayToSecond)">
            <summary>
               This operator determines whether the <paramref name="left"/> is greater than or 
               equal to the <paramref name="right"/>.
            </summary>
            <returns>
            	<para>
            		<c>true</c> indicates the <paramref name="left"/> is greater than
                    or equal to the <paramref name="right"/>, <c>false</c> otherwise.
                </para>
            	<para>
            		<list type="table">
            			<listheader>
            				<term>Return Value</term>
            				<description>Description</description>
            			</listheader>
            			<item>
            				<term><c>true</c></term>
            				<description>
            					<para>
            						<paramref name="left"/> and
                                    <paramref name="right"/> are not
                                    <see cref="F:Teradata.Client.Provider.TdIntervalDayToSecond.Null"/> and
                                    <paramref name="left"/> is greater than or equal
                                    to <paramref name="right"/>
            					</para>
            					<para>-or-</para>
            					<para>
            						<paramref name="left"/> is <strong>Null</strong>
                                    and <paramref name="right"/> is
                                    <strong>Null</strong>.
            					</para>
            				</description>
            			</item>
            			<item>
            				<term><c>false</c></term>
            				<description>
            					<para>
                                    The <paramref name="left"/> is less than
                                    <paramref name="right"/>
            					</para>
            					<para>-or-</para>
            					<para>
                                    Either <paramref name="left"/> or
                                    <paramref name="right"/> is <strong>Null</strong>.
            					</para>
            				</description>
            			</item>
            		</list>
            	</para>
            </returns>
            <remarks>
            	<para>
                    Comparison operators always return <c>false</c> if one of the operands is
                    <strong>Null</strong>. Therefore you should not assume that the reverse
                    condition is <c>true</c>. For example you cannot assume that the
                    <paramref name="left"/> is less than the
                    <paramref name="right"/> if the "&gt;=" operator returns
                    <c>false</c>.
                </para>
            	<para>
                    The reverse condition is <c>true</c> when the
                    <paramref name="left"/> and the
                    <paramref name="right"/> are not <strong>Null</strong>.
                </para>
            </remarks>
            <param name="left">An instance of <see cref="T:Teradata.Client.Provider.TdIntervalDayToSecond"/>.</param>
            <param name="right">An instance of <strong>TdIntervalDayToSecond</strong>.</param>
        </member>
        <member name="M:Teradata.Client.Provider.TdIntervalDayToSecond.op_Inequality(Teradata.Client.Provider.TdIntervalDayToSecond,Teradata.Client.Provider.TdIntervalDayToSecond)">
            <summary>
               This operator determines whether the <paramref name="left"/> and the  
               <paramref name="right"/> are not equal.
            </summary>
            <returns>
            	<para>A Boolean is returned that indicates whether the two operands are not equal.
                <c>true</c> indicates the two operands are not equal, <c>false</c>
                otherwise.</para>
            	<para>
            		<list type="table">
            			<listheader>
            				<term>Return Value</term>
            				<description>Description</description>
            			</listheader>
            			<item>
            				<term><c>true</c></term>
            				<description>
                                <para>
            					   <paramref name="left"/> is less than or greater than
                                   <paramref name="right"/>.
                                </para>
            					<para>-or-</para>
                               <para>
            					    <paramref name="left"/> is
                                   <see cref="F:Teradata.Client.Provider.TdIntervalDayToSecond.Null"/> and
                                   <paramref name="right"/> is not <strong>Null.</strong> 
                               </para>
            					<para>-or-</para>
            					<para>
                                   <paramref name="left"/> is not <strong>Null</strong>
                                   and <paramref name="right"/> is <strong>Null.</strong>
                                </para>
                            </description>
            			</item>
            			<item>
            				<term><c>false</c></term>
            				<description>
            					<para>
                                  <paramref name="left"/> is equal to
                                  <paramref name="right"/>.
                               </para>
            					<para>-or-</para>
            					<para>
                                   <paramref name="left"/> and
                                   <paramref name="right"/> are <strong>Null</strong>.
                                </para>
                            </description>
            			</item>
            		</list>
            	</para>
            </returns>
            <param name="left">An instance of <see cref="T:Teradata.Client.Provider.TdIntervalDayToSecond"/>.</param>
            <param name="right">An instance of <strong>TdIntervalDayToSecond</strong>.</param>
        </member>
        <member name="M:Teradata.Client.Provider.TdIntervalDayToSecond.op_Equality(Teradata.Client.Provider.TdIntervalDayToSecond,Teradata.Client.Provider.TdIntervalDayToSecond)">
            <summary>
               This operator determines whether the <paramref name="left"/> and the  
               <paramref name="right"/> are equal.
            </summary>
            <returns>
            	<para>
                   A Boolean is returned that indicates whether the two operands are equal.
                   <c>True</c> indicates the two operands are equal, <c>false</c> otherwise.
               </para>
            	<para>
            		<list type="table">
            			<listheader>
            				<term>Return Value</term>
            				<description>Description</description>
            			</listheader>
            			<item>
            				<term><c>true</c></term>
            				<description>
            					<para>
            					   <paramref name="left"/> is equal to
                                   <paramref name="right"/>
            					</para>
            					<para>-or-</para>
            					<para>
            					   <paramref name="left"/> is
                                   <see cref="F:Teradata.Client.Provider.TdIntervalDayToSecond.Null"/> and
                                   <paramref name="right"/> is <strong>Null</strong>.
            					</para>
            				</description>
            			</item>
            			<item>
            				<term><c>false</c></term>
            				<description>
            					<para>
            					   <paramref name="left"/> is not <strong>Null</strong>
                                   and <paramref name="right"/> is <strong>Null</strong>
            					</para>
            					<para>-or-</para>
            					<para>
            					   <paramref name="left"/> is <strong>Null</strong> and
                                   <paramref name="right"/> is not <strong>Null</strong>
            					</para>
            					<para>-or-</para>
            					<para>
                                   The <paramref name="left"/> is not equal to
                                   <paramref name="right"/>.
            					</para>
            				</description>
            			</item>
            		</list>
            	</para>
            </returns>
            <param name="left">An instance of <see cref="T:Teradata.Client.Provider.TdIntervalDayToSecond"/>.</param>
            <param name="right">An instance of <strong>TdIntervalDayToSecond</strong>.</param>
        </member>
        <member name="M:Teradata.Client.Provider.TdIntervalDayToSecond.op_LessThan(Teradata.Client.Provider.TdIntervalDayToSecond,Teradata.Client.Provider.TdIntervalDayToSecond)">
            <summary>
               This operator determines whether the <paramref name="left"/> is less than 
               the <paramref name="right"/>.
            </summary>
            <returns>
            	<para>
            		<c>True</c> indicates the <paramref name="left"/> is less than
                    the <paramref name="right"/>, <c>false</c> otherwise.
                </para>
            	<para>
            		<list type="table">
            			<listheader>
            				<term>Return Value</term>
            				<description>Description</description>
            			</listheader>
            			<item>
            				<term><c>true</c></term>
            				<description>
            					<para>
            					    <paramref name="left"/> and
                                   <paramref name="right"/> are not
                                   <see cref="F:Teradata.Client.Provider.TdIntervalDayToSecond.Null"/> and
                                   <paramref name="left"/> is less than
                                   <paramref name="right"/>.
            					</para>
            				</description>
            			</item>
            			<item>
            				<term><c>false</c></term>
            				<description>
            					<para>
                                    The <paramref name="left"/> is greater than or
                                    equal to <paramref name="right"/>
            					</para>
            					<para>-or-</para>
            					<para>
                                    Either <paramref name="left"/> and / or
                                    <paramref name="right"/> is <strong>Null</strong>.
            					</para>
            				</description>
            			</item>
            		</list>
            	</para>
            </returns>
            <remarks>
            	<para>
                    Comparison operators always return <c>false</c> if one of the operands is
                    <strong>Null</strong>. Therefore you should not assume that the reverse
                    condition is <c>true</c>. For example you cannot assume that the
                    <paramref name="left"/> is greater than or equal to the
                    <paramref name="right"/> if the "&lt;" operator returns
                    <c>false</c>.
                </para>
            	<para>
                    The reverse condition is <c>true</c> when the
                    <paramref name="left"/> and the
                    <paramref name="right"/> are not <strong>Null</strong>.
                </para>
            </remarks>
            <param name="left">An instance of <see cref="T:Teradata.Client.Provider.TdIntervalDayToSecond"/>.</param>
            <param name="right">An instance of <strong>TdIntervalDayToSecond</strong>.</param>
        </member>
        <member name="M:Teradata.Client.Provider.TdIntervalDayToSecond.op_LessThanOrEqual(Teradata.Client.Provider.TdIntervalDayToSecond,Teradata.Client.Provider.TdIntervalDayToSecond)">
            <summary>
               This operator determines whether the <paramref name="left"/> is less than or 
               equal the <paramref name="right"/>.
            </summary>
            <returns>
            	<para>
            		<c>true</c> indicates the <paramref name="left"/> is less than or
                    equal to the <paramref name="right"/>, <c>false</c> otherwise.
                </para>
            	<para>
            		<list type="table">
            			<listheader>
            				<term>Return Value</term>
            				<description>Description</description>
            			</listheader>
            			<item>
            				<term><c>true</c></term>
            				<description>
            					<para>
            						<paramref name="left"/> and
                                    <paramref name="right"/> are not
                                    <see cref="F:Teradata.Client.Provider.TdIntervalDayToSecond.Null"/> and
                                    <paramref name="left"/> is less than or equal to
                                    <paramref name="right"/>
            					</para>
            					<para>-or-</para>
            					<para>
            						<paramref name="left"/> is <strong>Null</strong>
                                    and <paramref name="right"/> is
                                    <strong>Null</strong>.
            					</para>
            				</description>
            			</item>
            			<item>
            				<term><c>false</c></term>
            				<description>
            					<para>
                                    The <paramref name="left"/> is greater than
                                    <paramref name="right"/>
            					</para>
            					<para>-or-</para>
            					<para>
                                    Either <paramref name="left"/> or
                                    <paramref name="right"/> is <strong>Null</strong>.
            					</para>
            				</description>
            			</item>
            		</list>
            	</para>
            </returns>
            <remarks>
            	<para>
                    Comparison operators always return <c>false</c> if one of the operands is
                    <strong>Null</strong>. Therefore you should not assume that the reverse
                    condition is <c>true</c>. For example you cannot assume that the
                    <paramref name="left"/> is greater than the
                    <paramref name="right"/> if the "&lt;=" operator returns
                    <c>false</c>.
                </para>
            	<para>
                    The reverse condition is <c>true</c> when the
                    <paramref name="left"/> and the
                    <paramref name="right"/> are not <strong>Null</strong>.
                </para>
            </remarks>
            <param name="left">An instance of <see cref="T:Teradata.Client.Provider.TdIntervalDayToSecond"/>.</param>
            <param name="right">An instance of <strong>TdIntervalDayToSecond</strong>.</param>
        </member>
        <member name="M:Teradata.Client.Provider.TdIntervalDayToSecond.op_Explicit(System.TimeSpan)~Teradata.Client.Provider.TdIntervalDayToSecond">
            <summary>
               Converts a <see cref="T:System.TimeSpan"/> to a <see cref="T:Teradata.Client.Provider.TdIntervalDayToSecond"/>.
            </summary>
            <remarks>
               <strong>TimeSpan</strong> fractional seconds may be truncated during conversion into 
               a <strong>TdIntervalDayToSecond</strong> interval.  <strong>TimeSpan</strong>
               supports seven digits right of the decimal for fractional seconds, while
               <strong>TdIntervalDayToSecond</strong> supports six digits right of the decimal
               for fractional seconds (microseconds).
            </remarks>
            <exception cref="T:System.OverflowException">
               The resultant operation returns a value greater than the <see cref="F:Teradata.Client.Provider.TdIntervalDayToSecond.MaxValue"/> 
               or less than the <see cref="F:Teradata.Client.Provider.TdIntervalDayToSecond.MinValue"/>.
            </exception>
            <param name="value">A <strong>TimeSpan</strong>.</param>
            <returns>A <strong>TdIntervalDayToSecond</strong> interval.</returns>
        </member>
        <member name="M:Teradata.Client.Provider.TdIntervalDayToSecond.op_Explicit(Teradata.Client.Provider.TdIntervalDayToSecond)~System.TimeSpan">
            <summary>
               Converts a <see cref="T:Teradata.Client.Provider.TdIntervalDayToSecond"/> to a <see cref="T:System.TimeSpan"/>.
            </summary>
            <remarks>
               The <strong>TimeSpan</strong> time components are represented in 24 hour format.
            </remarks>
            <exception cref="T:System.ArgumentNullException">
               The <strong>TdIntervalDayToSecond</strong> value is <see cref="F:Teradata.Client.Provider.TdIntervalDayToSecond.Null"/>.
            </exception>
            <param name="value">A <strong>TdIntervalDayToSecond</strong> interval.</param>
            <returns>A <strong>TimeSpan</strong>.</returns>
        </member>
        <member name="P:Teradata.Client.Provider.TdIntervalDayToSecond.IsNull">
            <summary>
               Indicates whether this <see cref="T:Teradata.Client.Provider.TdIntervalDayToSecond"/> instance is <see cref="F:Teradata.Client.Provider.TdIntervalDayToSecond.Null"/>. 
            </summary>
            <value>
               <c>true</c> if this <strong>TdIntervalDayToSecond</strong> is <strong>Null</strong>; 
               <c>false</c> otherwise.
            </value>
        </member>
        <member name="P:Teradata.Client.Provider.TdIntervalDayToSecond.Days">
            <summary>
               The number of interval days is returned. The return value ranges from 
               -9999 to 9999.
            </summary>
            <remarks>
            <para>
               A <see cref="T:Teradata.Client.Provider.TdIntervalDayToSecond"/> is represented as 
               [-][days][space][hh]:[mm]:[ss].[ffffff]. The minus sign is optional 
               and represents a negative interval of time. The days component represents days. The single  
               space character (0x40) separates the days from the hours. The hh represents hours, the mm 
               minutes, the ss seconds and the ffffff fractional seconds.  The value of the Days property
               is the days component.
            </para>
            <para>
               A negative interval will return all properties (days, minutes, hours, seconds and fractional 
               seconds) as negative values.
            </para>
            </remarks>
            <exception cref="T:Teradata.Client.Provider.TdException">
               This property is not available when this instance is <see cref="F:Teradata.Client.Provider.TdIntervalDayToSecond.Null"/>.
            </exception>
        </member>
        <member name="P:Teradata.Client.Provider.TdIntervalDayToSecond.Hours">
            <summary>
               The number of interval hours is returned. The return value ranges from -23 to 23.
            </summary>
            <remarks>
            <para>
               A <see cref="T:Teradata.Client.Provider.TdIntervalDayToSecond"/> is represented as 
               [-][days][space][hh]:[mm]:[ss].[ffffff]. The minus sign is optional 
               and represents a negative interval of time. The days component represents days. The single  
               space character (0x40) separates the days from the hours. The hh represents hours, the mm 
               minutes, the ss seconds and the ffffff fractional seconds.  The value of the Hours property
               is the hh component.
            </para>
            <para>
               A negative interval will return all properties (days, minutes, hours, seconds and fractional 
               seconds) as negative values.
            </para>
            </remarks>
            <exception cref="T:Teradata.Client.Provider.TdException">
               This property is not available when this instance is <see cref="F:Teradata.Client.Provider.TdIntervalDayToSecond.Null"/>.
            </exception>
        </member>
        <member name="P:Teradata.Client.Provider.TdIntervalDayToSecond.Minutes">
            <summary>
               The number of interval minutes is returned. The return value ranges from -59 to 59.
            </summary>
            <remarks>
            <para>
               A <see cref="T:Teradata.Client.Provider.TdIntervalDayToSecond"/> is represented as 
               [-][days][space][hh]:[mm]:[ss].[ffffff]. The minus sign is optional 
               and represents a negative interval of time. The days component represents days. The single  
               space character (0x40) separates the days from the hours. The hh represents hours, the mm 
               minutes, the ss seconds and the ffffff fractional seconds.  The value of the Minutes property
               is the mm component.
            </para>
            <para>
               A negative interval will return all properties (days, minutes, hours, seconds and fractional 
               seconds) as negative values.
            </para>
            </remarks>
            <exception cref="T:Teradata.Client.Provider.TdException">
               This property is not available when this instance is <see cref="F:Teradata.Client.Provider.TdIntervalDayToSecond.Null"/>.
            </exception>
        </member>
        <member name="P:Teradata.Client.Provider.TdIntervalDayToSecond.Seconds">
            <summary>
               The number of interval seconds is returned. The return value ranges from -59 to 59.
            </summary>
            <remarks>
            <para>
               A <see cref="T:Teradata.Client.Provider.TdIntervalDayToSecond"/> is represented as 
               [-][days][space][hh]:[mm]:[ss].[ffffff]. The minus sign is optional 
               and represents a negative interval of time. The days component represents days. The single  
               space character (0x40) separates the days from the hours. The hh represents hours, the mm 
               minutes, the ss seconds and the ffffff fractional seconds.  The value of the Seconds property
               is the ss component.
            </para>
            <para>
               A negative interval will return all properties (days, minutes, hours, seconds and fractional 
               seconds) as negative values.
            </para>
            </remarks>
            <exception cref="T:Teradata.Client.Provider.TdException">
               This property is not available when this instance is <see cref="F:Teradata.Client.Provider.TdIntervalDayToSecond.Null"/>.
            </exception>
        </member>
        <member name="P:Teradata.Client.Provider.TdIntervalDayToSecond.Microseconds">
            <summary>
               The number of interval microseconds is returned. The return value ranges from
               -999999 to 999999.
            </summary>
            <remarks>
            <para>
               A <see cref="T:Teradata.Client.Provider.TdIntervalDayToSecond"/> is represented as 
               [-][days][space][hh]:[mm]:[ss].[ffffff]. The minus sign is optional 
               and represents a negative interval of time. The days component represents days. The single  
               space character (0x40) separates the days from the hours. The hh represents hours, the mm 
               minutes, the ss seconds and the ffffff fractional seconds.  The value of the Microseconds property
               is the ffffff component.
            </para>
            <para>
               A negative interval will return all properties (days, minutes, hours, seconds and fractional 
               seconds) as negative values.
            </para>
            </remarks>
            <exception cref="T:Teradata.Client.Provider.TdException">
               This property is not available when this instance is <see cref="F:Teradata.Client.Provider.TdIntervalDayToSecond.Null"/>.
            </exception>
        </member>
        <member name="P:Teradata.Client.Provider.TdIntervalDayToSecond.Precision">
            <summary>
               The number of significant digits in the day is returned. The return value
               ranges from 1 to 4.
            </summary>
            <exception cref="T:Teradata.Client.Provider.TdException">
               This property is not available when this instance is <see cref="F:Teradata.Client.Provider.TdIntervalDayToSecond.Null"/>.
            </exception>
        </member>
        <member name="P:Teradata.Client.Provider.TdIntervalDayToSecond.Scale">
            <summary>
               The number of decimal places for the second is returned. The return value ranges 
               from 0 to 6.
            </summary>
            <exception cref="T:Teradata.Client.Provider.TdException">
               This property is not available when this instance is <see cref="F:Teradata.Client.Provider.TdIntervalDayToSecond.Null"/>.
            </exception>
        </member>
        <member name="P:Teradata.Client.Provider.TdIntervalDayToSecond.Value">
            <summary>
               Gets the .NET data type representation of <see cref="T:Teradata.Client.Provider.TdIntervalDayToSecond"/> 
               as a <see cref="T:System.TimeSpan"/>.
            </summary>
            <remarks>
               This property in concept parallels <see cref="M:Teradata.Client.Provider.TdDataReader.GetValue(System.Int32)"/> and
               <see cref="P:Teradata.Client.Provider.TdParameter.Value"/>. That is they all represent the .NET Framework 
               Class Library(FCL) primitive data type that correspond to the Teradata 
               Interval Day To Second data type.
            </remarks>
            <value>The interval represented as a <strong>TimeSpan</strong> is returned.</value>
            <exception cref="T:Teradata.Client.Provider.TdException">
               This property is not available when this instance is <see cref="F:Teradata.Client.Provider.TdIntervalDayToSecond.Null"/>.
            </exception>
        </member>
        <member name="P:Teradata.Client.Provider.TdIntervalDayToSecond.InternalTimespan">
            <summary>
               Return the internal TimeSpan representing the interval.
            </summary>
            <remarks>
               The internal timespan is used in calculating arithmetic operations and in storing
               day-time intervals.
            </remarks>
        </member>
        <member name="P:Teradata.Client.Provider.TdIntervalDayToSecond.ObjectId">
            <summary>
               Gets the instance object identifier.
            </summary>
        </member>
        <member name="P:Teradata.Client.Provider.TdIntervalDayToSecond.DecimalFractionalSecond">
            <summary>
               The decimal fractional seconds are returned. The return value ranges from
               -999999 to 999999.
            </summary>
            <remarks>
            <para>
               A <see cref="T:Teradata.Client.Provider.TdIntervalDayToSecond"/> is represented as 
               [-][days][space][hh]:[mm]:[ss].[ffffff]. The minus sign is optional 
               and represents a negative interval of time. The days component represents days. The single  
               space character (0x40) separates the days from the hours. The hh represents hours, the mm 
               minutes, the ss seconds and the ffffff fractional seconds.  The value of the Microseconds property
               is the ffffff component.
            </para>
            <para>
               A negative interval will return all properties (days, minutes, hours, seconds and fractional 
               seconds) as negative values.
            </para>
            <para>
               This property is used in ToString to display the interval as a decimal fractional second.
            </para>
            </remarks>
        </member>
        <member name="P:Teradata.Client.Provider.TdIntervalDayToSecond.IsNegative">
            <summary>
               Indicate if the interval is negative.
            </summary>
            <remarks>
               Timespan.ticks will indicate a negative interval.  Other values (days, hours, minutes, 
                milliseconds) may be 0 and the interval may still be negative.
            </remarks>
        </member>
        <member name="P:Teradata.Client.Provider.TdIntervalDayToSecond.InternalAccessor">
            <summary>
               Accessor to the internal storage for this interval.
            </summary>
        </member>
        <member name="T:Teradata.Client.Provider.TdIntervalHour">
            <summary>
                <see cref="T:Teradata.Client.Provider.TdIntervalHour"/> represents an interval of time defining a duration in
                hours. The hour precision is configurable.
            </summary>
            <remarks>
            	<para>
                   <strong>TdIntervalHour</strong> is a .NET Data Provider for Teradata specific type,
                   designed to support a Teradata Database Interval Hour data type.
               </para>
            	<para>
                    The <strong>TdIntervalHour</strong> supports the Teradata Interval Hour 
                    (precision) data type where precision indicates the number of digits in the
                    hours (from 1 - 4).
                </para>
                <para>
                    The interval value must be specified in the following format :
                </para>
            	<para>[sign][hours]</para>
            	<para>Below is the description of each format item.</para>
            	<para>
            		<list type="table">
            			<listheader>
            				<term>Format Item</term>
            				<description>Description</description>
            			</listheader>
            			<item>
            				<term>sign</term>
            				<description>Optional - . Defaults as space character (+).</description>
            			</item>
            			<item>
            				<term>hours</term>
            				<description>Required number of hours (one to four digits in
                            length).</description>
            			</item>
            		</list>
            	</para>
            	<para>
                   The .Net Framework does not have a system type that directly corresponds to
                   the Teradata Database Interval Hour data type. The .NET Data Provider for 
                   Teradata Version 13.0 version and prior versions map Interval Hour to System.String.  
                   With version 13.1 of the provider, <strong>TdIntervalHour</strong> is available to 
                   retrieve and manipulate data of type Interval Hour.
               </para>
            	<para>The range of values for each TdInterval precision is as follows:</para>
            	<para>
            		<table class="xmldoctable" cellspacing="0">
            			<tbody>
            				<tr>
            					<th>Type and Precision</th>
            					<th>Minimum</th>
            					<th>Maximum</th>
            				</tr>
            				<tr>
            					<td class="xmldoctable">TdIntervalHour(1)</td>
            					<td class="xmldoctable">
            						<para>-'9'</para>
            					</td>
            					<td>'9'</td>
            				</tr>
            				<tr>
            					<td class="xmldoctable">TdIntervalHour(2)</td>
            					<td class="xmldoctable">
            						<para>-'99'</para>
            					</td>
            					<td>'99'</td>
            				</tr>
            				<tr>
            					<td class="xmldoctable">TdIntervalHour(3)</td>
            					<td class="xmldoctable">
            						<para>-'999'</para>
            					</td>
            					<td>'999'</td>
            				</tr>
            				<tr>
            					<td class="xmldoctable">TdIntervalHour(4)</td>
            					<td class="xmldoctable">
            						<para>-'9999'</para>
            					</td>
            					<td>'9999'</td>
            				</tr>
            			</tbody>
            		</table>
            	</para>
                <para>
                    <strong>TdIntervalHour</strong> also supports <see cref="F:Teradata.Client.Provider.TdIntervalHour.Null"/>.  
                    This is a very important feature. An application is no longer required to call
                    <see cref="M:Teradata.Client.Provider.TdDataReader.IsDBNull(System.Int32)"/> before invoking the corresponding 
                    TdDataReader "Get" method.  This will improve overall performance.
                </para>
                <para>
                    A <strong>TdIntervalHour</strong> structure allows arithmetic,
                    comparision and conversion operations to be performed. 
                </para>
            	<para>
                    A <strong>TdIntervalHour</strong> may also be specified as an in, out, 
                    or in/out parameter to a stored procedure. In order to maintain backward  
                    compatibility with previous versions of the provider (release 13.0 and prior), 
                    a Connection String Attribute
                    <see cref="P:Teradata.Client.Provider.TdConnectionStringBuilder.EnableTdIntervals">EnableTdIntervals</see>
                    has been added. When the <strong>EnableTdIntervals</strong> attribute
                    is <c>true</c>, <see cref="P:Teradata.Client.Provider.TdParameter.ProviderSpecificValue"/> will
                    return the data as the provider specific type of <strong>TdIntervalHour</strong>.
                    When <strong>EnableTdIntervals</strong> is <c>false</c>, 
                    <strong>TdParameter.ProviderSpecificValue</strong> will return the data as a
                    .NET Framework Library data type of <see cref="T:System.String"/>.
                </para>
            	<para>
                    The <see cref="P:Teradata.Client.Provider.TdParameter.Value"/> will also return the .NET Framework Library
                    data type of <strong>System.String</strong> when <strong>EnableTdIntervals</strong>
                    is <c>false</c> to maintain backward compatibility. 
                    The <strong>TdParameter.Value</strong> will return a .NET Framework data type of
                    <see cref="T:System.TimeSpan"/> when <strong>EnableTdIntervals</strong>
                    is <c>true</c>.
                </para>
            	<para>
                   For more information on the Teradata Interval Hour data type please
                   see the Teradata Database SQL Reference - 'Data Types and Literals'.
               </para>
            </remarks>
            <example>
            	<para>
                   The following example shows how to retrieve a <strong>TdIntervalHour</strong>, 
                   modify the interval, and then update the table.
               </para>
            	<code lang="CS">
            Public void IntervalExample(TdCommand cmd, String model)
            {
               cmd.Parameters.Clear();
               
               cmd.CommandText = "SELECT StartDate, LeaseReturn, DelayPeriod " +
                                 "FROM AutoLeases " +
                                 "WHERE Model = ?";
             
               cmd.CommandType = CommandType.Text;
             
               cmd.Parameters.Add(null, TdType.VarChar, 10,
                    ParameterDirection.Input, true, 0, 0, null,    
                    DataRowVersion.Default, model);
             
               Int32 row = 0;
               TdDate [] startDate;
               TdTimestamp [] leaseReturn;
               TdIntervalHour [] leaseLen;
               
               using (TdDataReader dr = cmd.ExecuteReader())
               {
                  startDate = new TdDate[dr.RecordsReturned];
                  leaseReturn = new TdTimestamp[dr.RecordsReturned];
                  leaseLen = new TdIntervalHour[dr.RecordsReturned];
             
                  // Specifying an interval of 7 days, 1 hour with a day precision of 4
                  TdIntervalHour leaseReturnExtension = new TdIntervalHour(169, 4);
               
                  while (dr.Read())
                  {
                     // Retrieving the dates
                     startDate[row] = dr.GetTdDate(0);
                     leaseReturn[row] = dr.GetTimestamp(1);
                     leaseLen[row] = dr.GetTdIntervalHour(2);
             
                     // Adding extension to the lease return
                     leaseReturn[row] = leaseReturn[row] + leaseReturnExtension;
             
                     // Adding extension to the lease length;
                     leaseLen[row] = leaseLen[row] + leaseReturnExtension;
             
                     row++;
                  } 
               }
             
               cmd.Parameters.Clear();
             
               cmd.CommandText = "UPDATE AutoLeases " +
                                 "SET LeaseReturn = ?, LeaseLen = ? " +
                                 "WHERE Model = ?";
             
               cmd.Parameters.Add(null, TdType.Timestamp, 0,
                     ParameterDirection.Input, true, 0, 0, null,    
                     DataRowVersion.Default, null);
             
               cmd.Parameters.Add(null, TdType.IntervalHour, 0,
                     ParameterDirection.Input, true, 0, 0, null,    
                     DataRowVersion.Default, null);
             
               cmd.Parameters.Add(null, TdType.VarChar, 9,
                     ParameterDirection.Input, true, 0, 0, null,    
                     DataRowVersion.Default, model);
             
               row--;
               while(row &gt;= 0)
               {
                  cmd.Parameters[0].Value = leaseReturn[row];
                  cmd.Parameters[1].Value = leaseLen[row];
                  cmd.Parameters[2].Value = model;
             
                  cmd.ExecuteNonQuery();
                  row--;
               }
            }
            </code>
            </example>
            <seealso cref="P:Teradata.Client.Provider.TdConnectionStringBuilder.EnableTdIntervals"/> 
            <seealso cref="!:IntervalConnectionString.html">Interval Connection String Attribute</seealso>
            <seealso cref="!:EnableProviderSpecificTypes.html">Enabling Provider Specific Types</seealso>
            <seealso cref="!:IntervalTypeOverview.html">Provider Specific Type:  Interval Type Overview</seealso>
        </member>
        <member name="F:Teradata.Client.Provider.TdIntervalHour.MaxPrecision">
            <summary>
               A constant representing the maximum number of significant digits in the 
               <see cref="P:Teradata.Client.Provider.TdIntervalHour.Hours"/> interval component.
            </summary>
            <remarks>
               The value of this constant is 4.
            </remarks>
        </member>
        <member name="F:Teradata.Client.Provider.TdIntervalHour.MinPrecision">
            <summary>
               A constant representing the minimum number of significant digits in the 
               <see cref="P:Teradata.Client.Provider.TdIntervalHour.Hours"/> interval component.
            </summary>
            <remarks>
               The value of this constant is 1.
            </remarks>
        </member>
        <member name="F:Teradata.Client.Provider.TdIntervalHour.Null">
            <summary>
               Gets a Null <see cref="T:Teradata.Client.Provider.TdIntervalHour"/> instance.
            </summary>
            <value>
               Returns a <strong>TdIntervalHour</strong> instance that represents a 
               <strong>Null</strong> value.
            </value>
            <remarks>
               Conceptually it is the constructor for a <strong>Null</strong> instance of 
               <strong>TdIntervalHour</strong>.
            </remarks>
            <example>
            This example shows how to send a <strong>Null</strong> value to a Teradata database.
            <code>
            TdParameter col1 = new TdParameter();
            col1.TdType = TdType.TdIntervalHour;
            col1.Value = TdIntervalHour.Null;
            </code>
            </example>
        </member>
        <member name="F:Teradata.Client.Provider.TdIntervalHour.Zero">
            <summary>
               Gets an <see cref="T:Teradata.Client.Provider.TdIntervalHour"/> instance that contains all zero elements
               for each interval field.
            </summary>
            <remarks>
               A Zero <Strong>TdIntervalHour</Strong> may be used to determine whether
               other instances of intervals represent postive, negative or non-zero intervals.
            </remarks>
            <example>
            This example shows how to determine if an interval is negative.
            <code>
            TdIntervalDayTo Second hourInterval = new TdIntervalHour(-23);
            if (hourInterval &lt; TdIntervalHour.Zero)
            {
               Console.WriteLine("The Interval is negative");
            }
            // The output of the console is "The interval is negative"
            </code>
            </example>
        </member>
        <member name="F:Teradata.Client.Provider.TdIntervalHour.MinValue">
            <summary>
               The smallest possible value for <see cref="T:Teradata.Client.Provider.TdIntervalHour"/>.
            </summary>
            <remarks>
               The value is -'9999'.
            </remarks>
        </member>
        <member name="F:Teradata.Client.Provider.TdIntervalHour.MaxValue">
            <summary>
               The largest possible value for <see cref="T:Teradata.Client.Provider.TdIntervalHour"/>.
            </summary>
            <remarks>
               The value is '9999'.
            </remarks>
        </member>
        <member name="M:Teradata.Client.Provider.TdIntervalHour.#ctor(System.Int32,System.Byte)">
            <summary>
               An instance of <see cref="T:Teradata.Client.Provider.TdIntervalHour"/> is created from a time  
               component specified as an integer while precision is specified as a byte.
            </summary>
            <remarks>
            <para>
               The number of hours is converted into a <strong>TdIntervalHour</strong>
               and validated to determine if the <see cref="F:Teradata.Client.Provider.TdIntervalHour.MinValue"/>
               or the <see cref="F:Teradata.Client.Provider.TdIntervalHour.MaxValue"/> values have been exceeded. If the values are
               not exceeded but the resulting hours component exceeds the supplied 
               <paramref name="precision"/> value, an exception is generated.
            </para>
            <para>
               For example a constructor for TdIntervalHour(444, 2) requests
               444 hours with a precision of 2. The resulting hours value 
               cannot be represented in 2 digits, therefore an exception is generated,
               even though the <strong>MinValue</strong> and the
               <strong>MaxValue</strong> values have not been exceeded.
            </para>
            <para>
               Negative constructor parameters may be supplied to represent negative durations of time.
            </para>
            </remarks>
            <exception cref="T:System.ArgumentOutOfRangeException" caption="ArgumentOutOfRangeException">
               The <strong>precision</strong> parameter is less than the <see cref="F:Teradata.Client.Provider.TdIntervalHour.MinPrecision"/> 
               or greater than the <see cref="F:Teradata.Client.Provider.TdIntervalHour.MaxPrecision"/> range of values.
            </exception>
            <exception cref="T:System.OverflowException" caption="OverflowException">
               The <strong>hours</strong> parameter specifies a <strong>TdIntervalHour</strong> 
               value less than <see cref="F:Teradata.Client.Provider.TdIntervalHour.MinValue"/> or greater than <see cref="F:Teradata.Client.Provider.TdIntervalHour.MaxValue"/>.
            </exception>
            <exception cref="T:System.ArgumentException" caption="ArgumentException">
               The <strong>precision</strong> parameter is not large enough to represent the 
               number of hours.
            </exception>
            <overloads>
               Initializes a new instance of <strong>TdIntervalHour</strong>.
            </overloads>
            <param name="hours">Number of hours.</param>
            <param name="precision">Number of significant digits of the hour.</param>
        </member>
        <member name="M:Teradata.Client.Provider.TdIntervalHour.#ctor(System.Int32)">
            <summary>
               An instance of <see cref="T:Teradata.Client.Provider.TdIntervalHour"/> is created from a time  
               component specified as an integer.        
            </summary>
            <remarks>
            <para>
               The number of hours are converted into a <strong>TdIntervalHour</strong>
               and evaluated against  <see cref="F:Teradata.Client.Provider.TdIntervalHour.MinValue"/> and <see cref="F:Teradata.Client.Provider.TdIntervalHour.MaxValue"/>.  The 
               <see cref="P:Teradata.Client.Provider.TdIntervalHour.Precision"/> is then calculated from the number of digits contained within
               the interval hour component.
            </para>
            <para>
               For example, 99 hours is first constructed into <strong>TdIntervalHour</strong>.
               Precision is calculated to be a value of 2 representing two significant digits in the hour.
            </para>
            <para>
               Negative constructor parameters may be supplied to represent negative durations of time.
            </para>
            </remarks>
            <exception cref="T:System.OverflowException" caption="OverflowException">
               The <strong>hours</strong> parameter specifies a <strong>TdIntervalHour</strong> 
               value less than <see cref="F:Teradata.Client.Provider.TdIntervalHour.MinValue"/> or greater than <see cref="F:Teradata.Client.Provider.TdIntervalHour.MaxValue"/>.
            </exception>
            <param name="hours">Number of hours.</param>
        </member>
        <member name="M:Teradata.Client.Provider.TdIntervalHour.#ctor(System.TimeSpan)">
            <summary>
               An instance of <see cref="T:Teradata.Client.Provider.TdIntervalHour"/> is created from a <see cref="T:System.TimeSpan"/>.
            </summary>
            <remarks>
            <para>
               The  <see cref="T:System.TimeSpan"/> value is converted into a <strong>TdIntervalHour</strong>
               and evaluated against <see cref="F:Teradata.Client.Provider.TdIntervalHour.MinValue"/> and <see cref="F:Teradata.Client.Provider.TdIntervalHour.MaxValue"/>.  The 
               <see cref="P:Teradata.Client.Provider.TdIntervalHour.Precision"/> is then calculated from the number of digits contained within 
               the interval hour component.
            </para>
            <para>
               After conversion of the <strong>TimeSpan</strong> value into a
               <strong>TdIntervalHour</strong>, any minutes, seconds or microseconds will be truncated.
               For example, a TimeSpan value created with a <see cref="P:System.TimeSpan.Ticks"/> value
               of 9378401234567 results in a value of 10 days, 20 hours, 30 minutes and 
               40.1234567 seconds.  The <strong>TdIntervalHour</strong> literal 
               representation results in a <strong>TdIntervalHour</strong> value of  
               '260'. The 30 minutes and the 40.1234567 seconds values are truncated. 
               Precision is calculated to be a value of 3 representing three significant digits in the hour.
            </para>
            </remarks>
            <exception cref="T:System.OverflowException" caption="OverflowException">
               The <strong>timespan</strong> parameter specifies a <strong>TdIntervalHour</strong> 
               value less than <see cref="F:Teradata.Client.Provider.TdIntervalHour.MinValue"/> or greater than <see cref="F:Teradata.Client.Provider.TdIntervalHour.MaxValue"/>.
            </exception>
            <param name="timeSpan">A TimeSpan to initialize <strong>TdIntervalHour</strong>.</param>
        </member>
        <member name="M:Teradata.Client.Provider.TdIntervalHour.#ctor(System.TimeSpan,System.Byte)">
            <summary>
               An instance of <see cref="T:Teradata.Client.Provider.TdIntervalHour"/> is created using a <see cref="T:System.TimeSpan"/> 
               specifying the hour precision as a byte.
            </summary>
            <remarks>
            <para>
               The  <see cref="T:System.TimeSpan"/> value is converted into a <strong>TdIntervalHour</strong>
               and evaluated against <see cref="F:Teradata.Client.Provider.TdIntervalHour.MinValue"/> and <see cref="F:Teradata.Client.Provider.TdIntervalHour.MaxValue"/>.  If the values 
               are not exceeded but the resulting hours component exceeds the supplied parameter
                <paramref name="precision"/> value, an exception is generated.
            </para>
            <para>
               After conversion of the <strong>TimeSpan</strong> value into a
               <strong>TdIntervalHour</strong>, any minutes, seconds or microseconds will be 
               truncated. For example, a TimeSpan value created with a <see cref="P:System.TimeSpan.Ticks"/> 
               value of 9378401234567 results in a value of 10 days, 20 hours, 30 minutes and 
               40.1234567 seconds.  The <strong>TdIntervalHour</strong> literal 
               representation results in a <strong>TdIntervalHour</strong> value of  
               '260'. The 30 minutes and the 40.1234567 seconds values are truncated. 
            </para>
            </remarks>
            <exception cref="T:System.OverflowException" caption="OverflowException">
               The <strong>timespan</strong> parameter specifies a <strong>TdIntervalHour</strong> 
               value less than <see cref="F:Teradata.Client.Provider.TdIntervalHour.MinValue"/> or greater than <see cref="F:Teradata.Client.Provider.TdIntervalHour.MaxValue"/>.
            </exception>
            <exception cref="T:System.ArgumentOutOfRangeException" caption="ArgumentOutOfRangeException">
               The <strong>precision</strong> parameter is outside the <see cref="F:Teradata.Client.Provider.TdIntervalHour.MinPrecision"/> 
               or <see cref="F:Teradata.Client.Provider.TdIntervalHour.MaxPrecision"/> range of values.
            </exception>
            <exception cref="T:System.ArgumentException" caption="ArgumentException">
               The <strong>precision</strong> parameter is not large enough to represent the 
               number of hours.
            </exception>
            <param name="timeSpan">A TimeSpan to initialize <strong>TdIntervalHour</strong>.</param>
            <param name="precision">Number of significant digits of the hour.</param>
        </member>
        <member name="M:Teradata.Client.Provider.TdIntervalHour.CompareTo(Teradata.Client.Provider.TdIntervalHour)">
            <summary>
               Compares this instance to the specified <see cref="T:Teradata.Client.Provider.TdIntervalHour"/>  
               parameter <paramref name="other"/>.
            </summary>
            <returns>
               The result of the comparison is returned as a signed integer.
            </returns>
            <remarks>
            	<para>
                    The integer returned when this instance is compared to <paramref name="other"/>
                    indicates the following:
                </para>
            	<para>
            		<list type="table">
            			<listheader>
            				<term>Return Value</term>
            				<description>Meaning</description>
            			</listheader>
            			<item>
            				<term>Less than Zero</term>
            				<description>
            					<para>
                                    This instance is less than <paramref name="other"/>
                                </para>
            					<para>-or-</para>
            					<para>This instance is <see cref="F:Teradata.Client.Provider.TdIntervalHour.Null"/> and
                                   <paramref name="other"/> is non-null.
                               </para>
            				</description>
            			</item>
            			<item>
            				<term>Zero</term>
            				<description>
            					<para>
                                    This instance is equal to <paramref name="other"/>
                                </para>
            					<para>-or-</para>
            					<para>
                                   This instance is <Strong>Null</Strong> and <paramref name="other"/> is
                                   <Strong>Null</Strong>.
                                </para>
            				</description>
            			</item>
            			<item>
            				<term>Greater than Zero</term>
            				<description>
            					<para>
                                    This instance is greater than
                                    <paramref name="other"/>
                                </para>
            					<para>-or-</para>
            					<para>
            						<paramref name="other"/> is <Strong>Null</Strong> and this instance is non-null.
                                </para>
            				</description>
            			</item>
            		</list>
            	</para>
            </remarks>
            <param name="other">The <strong>TdIntervalHour</strong> to compare.</param>
        </member>
        <member name="M:Teradata.Client.Provider.TdIntervalHour.CompareTo(System.Object)">
            <summary>
               Compares this instance to the specified <see cref="T:Teradata.Client.Provider.TdIntervalHour"/> 
               <paramref name="obj"/>. 
            </summary>
            <returns>
               The result of the comparison is returned as a signed integer.
            </returns>
            <remarks>
            	<para>
                    The integer returned when this instance is compared to <paramref name="obj"/>
                    indicates the following:
                </para>
            	<para>
            		<list type="table">
            			<listheader>
            				<term>Return Value</term>
            				<description>Meaning</description>
            			</listheader>
            			<item>
            				<term>Less than Zero</term>
            				<description>
            					<para>This instance is less than <paramref name="obj"/></para>
            					<para>-or-</para>
            					<para>
                                   This instance is <see cref="F:Teradata.Client.Provider.TdIntervalHour.Null"/> and 
                                   <paramref name="obj"/> is non-null.
                               </para>
            				</description>
            			</item>
            			<item>
            				<term>Zero</term>
            				<description>
            					<para>
                                    This instance is equal to <paramref name="obj"/>
                                </para>
            					<para>-or-</para>
            					<para>
                                   This instance is <Strong>Null</Strong> and <paramref name="obj"/> is
                                   <Strong>Null</Strong>.
                                </para>
            				</description>
            			</item>
            			<item>
            				<term>Greater than Zero</term>
            				<description>
            					<para>
                                    This instance is greater than <paramref name="obj"/>.
                                </para>
            					<para>-or-</para>
            					<para>
            						<paramref name="obj"/> is <Strong>Null</Strong> and this instance is non-null
                                </para>
            					<para>-or-</para>
            					<para>
            						<paramref name="obj"/> is a <c>null</c> reference.
                                </para>
            				</description>
            			</item>
            		</list>
            	</para>
               <para>
                   <paramref name="obj"/> must be an instance of <strong>TdIntervalHour</strong> type or 
                   <c>null</c> reference.
               </para>
            </remarks>
            <exception cref="T:System.ArgumentException">
               <paramref name="obj"/> is not of same type as <strong>TdIntervalHour</strong>.
            </exception>
            <seealso cref="M:Teradata.Client.Provider.TdIntervalHour.CompareTo(Teradata.Client.Provider.TdIntervalHour)"/>
            <overloads>
               Compares this instance to the supplied <strong>TdIntervalHour</strong> 
               and returns whether this instance is less than, equal or greater than the supplied 
               <strong>TdIntervalHour</strong>.
            </overloads>
            <param name="obj">A <strong>TdIntervalHour</strong> object to compare.</param>
        </member>
        <member name="M:Teradata.Client.Provider.TdIntervalHour.Equals(Teradata.Client.Provider.TdIntervalHour)">
            <summary>
               Compares this instance and another <see cref="T:Teradata.Client.Provider.TdIntervalHour"/> to determine 
               whether they are equal. 
            </summary>
            <returns>
               <c>true</c> if the two <strong>TdIntervalHour</strong> objects are equal, 
               <c>false</c> otherwise.
            </returns>
            <remarks>
            	<para>
            		The return value is <c>true</c> if the instance is 
                    equal to the <paramref name="other"/>, <c>false</c> otherwise.
                </para>
            	<para>
            		<list type="table">
            			<listheader>
            				<term>Return Value</term>
            				<description>Description</description>
            			</listheader>
            			<item>
            				<term><c>true</c></term>
                            <description>
                                <para>
                                   This instance and <paramref name="other"/> are <see cref="F:Teradata.Client.Provider.TdIntervalHour.Null"/>
                                </para>
                                <para>-or-</para>
                                <para>This instance is equal to <paramref name="other"/>.</para>
                            </description>
            			</item>
            			<item>
            				<term><c>false</c></term>
                            <description>
                            <para>
                               This instance is <strong>Null</strong> and <paramref name="other"/> 
                               is not <strong>Null</strong>
                            </para>
                            <para>-or-</para>
                            <para>
                               This instance is not <strong>Null</strong> and <paramref name="other"/>
                               is <strong>Null</strong>
                            </para>
                            <para>-or-</para>
                            <para>This instance is not equal to <paramref name="other"/>.</para>
                            </description>
            			</item>
            		</list>
            	</para>
            </remarks>
            <overloads>
               Returns a value indicating whether two instances of 
               <strong>TdIntervalHour</strong> are equal.
            </overloads>
            <param name="other">
               <strong>TdIntervalHour</strong> that will be compared to this instance 
               of <strong>TdIntervalHour</strong>.
            </param>
        </member>
        <member name="M:Teradata.Client.Provider.TdIntervalHour.Equals(Teradata.Client.Provider.TdIntervalHour,Teradata.Client.Provider.TdIntervalHour)">
            <summary>
               Compares two <see cref="T:Teradata.Client.Provider.TdIntervalHour"/> instances to determine 
               whether they are equal.
            </summary>
            <returns>
               <c>true</c> if the two <strong>TdIntervalHour</strong> instances are equal, 
               <c>false</c> otherwise.
            </returns>
            <remarks>
            	<para>
            		The return value is <c>true</c> if the <paramref name="left"/> is 
                    equal to the <paramref name="right"/>, <c>false</c> otherwise.
                </para>
            	<para>
            		<list type="table">
            			<listheader>
            				<term>Return Value</term>
            				<description>Description</description>
            			</listheader>
            			<item>
            				<term><c>true</c></term>
                            <description>
                                <para><paramref name="left"/> is equal to <paramref name="right"/></para>
                                <para>-or-</para>
                                <para>
                                   <paramref name="left"/> and <paramref name="right"/> are <see cref="F:Teradata.Client.Provider.TdIntervalHour.Null"/>.
                                </para>
                            </description>
            			</item>
            			<item>
            				<term><c>false</c></term>
                            <description>
                              <para><paramref name="left"/> is not equal to <paramref name="right"/></para>
                              <para>-or-</para>
                              <para>
                                   <paramref name="left"/> is not <strong>Null</strong> and 
                                   <paramref name="right"/> is <strong>Null</strong>
                              </para>
                              <para>-or-</para>
                              <para>
                                <paramref name="left"/> is <strong>Null</strong> and <paramref name="right"/>
                                is not <strong>Null</strong>.
                              </para>
                            </description>
            			</item>
            		</list>
            	</para>
            </remarks>
            <example>
                The following code example uses various comparison methods and operators.
                <code lang="CS">
            // Create a TdIntervalHour with 5 days, 4 hours and max precision
            TdIntervalHour firstInterval = new TdIntervalHour(124, 4);
            // Create a TdIntervalHour with 20 days, 4 hours and max precision
            TdIntervalHour secondInterval = new TdIntervalHour(484, 4);
             
            // The following comparison methods and operators are equivalent
            if (false == TdIntervalHour.Equals(firstInterval, secondInterval) ||
                firstInterval != secondInterval ||
                true == TdIntervalHour.NotEquals(firstInterval, secondInterval) )
            {
               Console.WriteLine(“firstInterval does not equal secondInterval”);
            }
                </code>
            </example>
            <overloads>
               Returns a value indicating whether two instances of 
               <strong>TdIntervalHour</strong> are equal.
            </overloads>
            <param name="left">A <strong>TdIntervalHour</strong> instance.</param>
            <param name="right">A <strong>TdIntervalHour</strong> instance.</param>
        </member>
        <member name="M:Teradata.Client.Provider.TdIntervalHour.Compare(Teradata.Client.Provider.TdIntervalHour,Teradata.Client.Provider.TdIntervalHour)">
            <summary>
                Two <see cref="T:Teradata.Client.Provider.TdIntervalHour"/> intervals are compared and a value is returned 
                that indicates <paramref name="left"/> is greater than, less than or equal to
                <paramref name="right"/>.
            </summary>
            <returns>
               The result of the comparison is returned as a signed integer.
            </returns>
            <remarks>
            	<list type="table">
            		<listheader>
            			<term>Return Value</term>
            			<description>Description</description>
            		</listheader>
            		<item>
            			<term>Less than Zero</term>
            			<description>
                           <para><paramref name="left"/> is less than <paramref name="right"/></para>
            				<para>-or-</para>
                           <para>
                              <paramref name="left"/> is <see cref="F:Teradata.Client.Provider.TdIntervalHour.Null"/>
                              and <paramref name="right"/> is not <strong>Null</strong>.
                           </para>
                        </description>
            		</item>
            		<item>
            			<term>Zero</term>
            			<description>
            				<para><paramref name="left"/> equals <paramref name="right"/></para>
            				<para>-or-</para>
                           <para>
                                <paramref name="left"/> is <strong>Null</strong> 
                                 and <paramref name="right"/> is <strong>Null</strong>.
                           </para>
                        </description>
            		</item>
            		<item>
            			<term>Greater than Zero</term>
            			<description>
            				<para><paramref name="left"/> is greater than <paramref name="right"/></para>
            				<para>-or-</para>
            				<para><paramref name="left"/> is not <strong>Null</strong> and
                            <paramref name="right"/> is <strong>Null</strong>.</para>
                        </description>
            		</item>
            	</list>
            </remarks>
            <param name="left">An instance of <strong>TdIntervalHour</strong>.</param>
            <param name="right">An instance of <strong>TdIntervalHour</strong>.</param>
        </member>
        <member name="M:Teradata.Client.Provider.TdIntervalHour.NotEquals(Teradata.Client.Provider.TdIntervalHour,Teradata.Client.Provider.TdIntervalHour)">
            <summary>
                Compares two <see cref="T:Teradata.Client.Provider.TdIntervalHour"/> interval types to determine whether the
                <paramref name="left"/> is not equal to <paramref name="right"/>.
            </summary>
            <returns>
            	<para>
            		<c>true</c> indicates <paramref name="left"/> is not equal to
                    <paramref name="right"/>, <c>false</c> otherwise.
                </para>
            	<para>
            		<list type="table">
            			<listheader>
            				<term>Return Value</term>
            				<description>Description</description>
            			</listheader>
            			<item>
            				<term><c>true</c></term>
            				<description>
            					<para>
            						<paramref name="left"/> is less than or greater
                                    than <paramref name="right"/>
            					</para>
            					<para>-or-</para>
            					<para>
            						Either <paramref name="left"/> or <paramref name="right"/> is
                                   <see cref="F:Teradata.Client.Provider.TdIntervalHour.Null"/>.
                               </para>
            				</description>
            			</item>
            			<item>
            				<term><c>false</c></term>
            				<description>
            					<para>
            						<paramref name="left"/> is equal to
                                    <paramref name="right"/>
            					</para>
            					<para>-or-</para>
            					<para>
            						<paramref name="left"/> and <paramref name="right"/> are
                                   <strong>Null</strong>.
                               </para>
            				</description>
            			</item>
            		</list>
            	</para>
            </returns>
            <param name="left">An instance of <strong>TdIntervalHour</strong>.</param>
            <param name="right">An instance of <strong>TdIntervalHour</strong>.</param>
        </member>
        <member name="M:Teradata.Client.Provider.TdIntervalHour.GreaterThan(Teradata.Client.Provider.TdIntervalHour,Teradata.Client.Provider.TdIntervalHour)">
            <summary>
               Determines whether the <paramref name="left"/> is greater than the <paramref name="right"/>.
            </summary>
            <returns>
            	<para>
            		<c>true</c> indicates the <paramref name="left"/> is greater than
                    the <paramref name="right"/>, <c>false</c> otherwise.
                </para>
            	<para>
            		<list type="table">
            			<listheader>
            				<term>Return Value</term>
            				<description>Description</description>
            			</listheader>
            			<item>
            				<term><c>true</c></term>
            				<description>
            					<paramref name="left"/> and
                                <paramref name="right"/> are not
                                <see cref="F:Teradata.Client.Provider.TdIntervalHour.Null"/> and
                                <paramref name="left"/> is greater than
                                <paramref name="right"/>.
            				</description>
            			</item>
            			<item>
            				<term><c>false</c></term>
            				<description>
            					<para>
                                    The <paramref name="left"/> is less than or equal
                                    to <paramref name="right"/>
            					</para>
            					<para>-or-</para>
            					<para>
                                   <paramref name="left"/> and / or <paramref name="right"/>
                                   is <strong>Null</strong>.
                                </para>
            				</description>
            			</item>
            		</list>
            	</para>
            </returns>
            <remarks>
            	<para>
                    Comparison operators always return <c>false</c> if one of the operands is
                    <strong>Null</strong>. Therefore you should not assume that the reverse
                    condition is <c>true</c>. For example you cannot assume that the
                    <paramref name="left"/> is less than or equal to the
                    <paramref name="right"/> if <c>GreaterThan</c> returns <c>false</c>.
                </para>
            	<para>
                    The reverse condition is <c>true</c> when the
                    <paramref name="left"/> and the
                    <paramref name="right"/> are not <strong>Null</strong>.
                </para>
            </remarks>
            <param name="left">
               An instance of <see cref="T:Teradata.Client.Provider.TdIntervalHour"/>.
            </param>
            <param name="right">
               An instance of <strong>TdIntervalHour</strong>.
            </param>
        </member>
        <member name="M:Teradata.Client.Provider.TdIntervalHour.GreaterThanOrEqual(Teradata.Client.Provider.TdIntervalHour,Teradata.Client.Provider.TdIntervalHour)">
            <summary>
               This operator determines whether the <paramref name="left"/> is greater than or 
               equal to the <paramref name="right"/>.
            </summary>
            <returns>
            	<para>
            		<c>true</c> indicates the <paramref name="left"/> is greater than
                    or equal to the <paramref name="right"/>, <c>false</c> otherwise.
                </para>
            	<para>
            		<list type="table">
            			<listheader>
            				<term>Return Value</term>
            				<description>Description</description>
            			</listheader>
            			<item>
            				<term><c>true</c></term>
            				<description>
            					<para>
            						<paramref name="left"/> and
                                    <paramref name="right"/> are not
                                    <see cref="F:Teradata.Client.Provider.TdIntervalHour.Null"/> and
                                    <paramref name="left"/> is greater than or equal
                                    to <paramref name="right"/>
            					</para>
            					<para>-or-</para>
            					<para>
            						<paramref name="left"/> is <strong>Null</strong>
                                    and <paramref name="right"/> is
                                    <strong>Null</strong>.
            					</para>
            				</description>
            			</item>
            			<item>
            				<term><c>false</c></term>
            				<description>
            					<para>
                                    The <paramref name="left"/> is less than
                                    <paramref name="right"/>
            					</para>
            					<para>-or-</para>
            					<para>
                                    Either <paramref name="left"/> or
                                    <paramref name="right"/> is <strong>Null</strong>.
            					</para>
            				</description>
            			</item>
            		</list>
            	</para>
            </returns>
            <remarks>
            	<para>
                    Comparison operators always return <c>false</c> if one of the operands is
                    <strong>Null</strong>. Therefore you should not assume that the reverse
                    condition is <c>true</c>. For example you cannot assume that the
                    <paramref name="left"/> is less than the <paramref name="right"/>
                    if the <c>GreaterThanOrEqual</c> method returns <c>false</c>.
                </para>
            	<para>
                    The reverse condition is <c>true</c> when the
                    <paramref name="left"/> and the
                    <paramref name="right"/> are not <strong>Null</strong>.
                </para>
            </remarks>
            <param name="left">An instance of <see cref="T:Teradata.Client.Provider.TdIntervalHour"/>.</param>
            <param name="right">An instance of <strong>TdIntervalHour</strong>.</param>
        </member>
        <member name="M:Teradata.Client.Provider.TdIntervalHour.LessThan(Teradata.Client.Provider.TdIntervalHour,Teradata.Client.Provider.TdIntervalHour)">
            <summary>
               This method determines whether the <paramref name="left"/> is less than the 
               <paramref name="right"/>.
            </summary>
            <returns>
            	<para>
            		<c>true</c> indicates the <paramref name="left"/> is less than
                    the <paramref name="right"/>, <c>false</c> otherwise.
                </para>
            	<para>
            		<list type="table">
            			<listheader>
            				<term>Return Value</term>
            				<description>Description</description>
            			</listheader>
            			<item>
            				<term><c>true</c></term>
            				<description>
            					<paramref name="left"/> and <paramref name="right"/> are
                                not <see cref="F:Teradata.Client.Provider.TdIntervalHour.Null"/> and
                                <paramref name="left"/> is less than
                                <paramref name="right"/>.
            				</description>
            			</item>
            			<item>
            				<term><c>false</c></term>
            				<description>
            					<para>
                                    The <paramref name="left"/> is greater than or
                                    equal to <paramref name="right"/>
            					</para>
            					<para>-or-</para>
            					<para>
                                    <paramref name="left"/> and / or <paramref name="right"/> is
                                    <strong>Null</strong>.
            					</para>
            				</description>
            			</item>
            		</list>
            	</para>
            </returns>
            <remarks>
            	<para>
                    Comparison operators always return <c>false</c> if one of the operands is
                    <strong>Null</strong>. Therefore you should not assume that the reverse
                    condition is <c>true</c>. For example you cannot assume that the
                    <paramref name="left"/> is greater than or equal to the <paramref name="right"/>
                    if the <c>LessThan</c> method returns <c>false</c>.
                </para>
            	<para>
                    The reverse condition is <c>true</c> when the
                    <paramref name="left"/> and the
                    <paramref name="right"/> are not <strong>Null</strong>.
                </para>
            </remarks>
            <param name="left">An instance of <see cref="T:Teradata.Client.Provider.TdIntervalHour"/>.</param>
            <param name="right">An instance of <strong>TdIntervalHour</strong>.</param>
        </member>
        <member name="M:Teradata.Client.Provider.TdIntervalHour.LessThanOrEqual(Teradata.Client.Provider.TdIntervalHour,Teradata.Client.Provider.TdIntervalHour)">
            <summary>
                This method determines whether the <paramref name="left"/> is less
                than or equal to the <paramref name="right"/>.
            </summary>
            <returns>
            	<para>
            		<c>true</c> indicates the <paramref name="left"/> is less than or
                    equal to the <paramref name="right"/>, <c>false</c> otherwise.
                </para>
            	<para>
            		<list type="table">
            			<listheader>
            				<term>Return Value</term>
            				<description>Description</description>
            			</listheader>
            			<item>
            				<term><c>true</c></term>
            				<description>
            					<para>
            						<paramref name="left"/> and
                                    <paramref name="right"/> are not
                                    <see cref="F:Teradata.Client.Provider.TdIntervalHour.Null"/> and
                                    <paramref name="left"/> is less than or equal to
                                    <paramref name="right"/>
            					</para>
            					<para>-or-</para>
            					<para>
            						<paramref name="left"/> is <strong>Null</strong>
                                    and <paramref name="right"/> is
                                    <strong>Null</strong>.
            					</para>
            				</description>
            			</item>
            			<item>
            				<term><c>false</c></term>
            				<description>
            					<para>
                                    The <paramref name="left"/> is greater than
                                    <paramref name="right"/>
            					</para>
            					<para>-or-</para>
            					<para>
                                    Either <paramref name="left"/> or
                                    <paramref name="right"/> is <strong>Null</strong>.
            					</para>
            				</description>
            			</item>
            		</list>
            	</para>
            </returns>
            <remarks>
            	<para>
                    Comparison operators always return <c>false</c> if one of the operands is
                    <strong>Null</strong>. Therefore you should not assume that the reverse
                    condition is <c>true</c>. For example you cannot assume that the
                    <paramref name="left"/> is greater than the <paramref name="right"/>
                    if the <c>LessThanOrEqual</c> method returns <c>false</c>.
                </para>
            	<para>
                    The reverse condition is <c>true</c> when the
                    <paramref name="left"/> and the
                    <paramref name="right"/> are not <strong>Null</strong>.
                </para>
            </remarks>
            <param name="left">An instance of <see cref="T:Teradata.Client.Provider.TdIntervalHour"/>.</param>
            <param name="right">An instance of <strong>TdIntervalHour</strong>.</param>
        </member>
        <member name="M:Teradata.Client.Provider.TdIntervalHour.ToInt32(Teradata.Client.Provider.TdIntervalHour)">
            <summary>
               Convert a <see cref="T:Teradata.Client.Provider.TdIntervalHour"/> implictly to an Int32 representing an hour interval.
            </summary>
            <returns>
               <strong>TdIntervalHour</strong> converted to an Int32 representing an hour interval.
            </returns>
            <exception cref="T:System.ArgumentNullException">
               The <strong>TdIntervalHour</strong> value is <see cref="F:Teradata.Client.Provider.TdIntervalHour.Null"/>.
            </exception>
            <param name="value">A <strong>TdIntervalHour</strong> interval.</param>
        </member>
        <member name="M:Teradata.Client.Provider.TdIntervalHour.Equals(System.Object)">
            <summary>
               Compares this instance and <paramref name="obj"/> to determine whether they
               are equal. 
            </summary>
            <returns>
               <c>true</c> if the two <see cref="T:Teradata.Client.Provider.TdIntervalHour"/>s are equal, 
               <c>false</c> otherwise.
            </returns>
            <remarks>
            	<para>
                    The return value is <c>true</c> if the instance is equal to the
                    <paramref name="obj"/>, <c>false</c> otherwise.
                </para>
            	<para>
            		<list type="table">
            			<listheader>
            				<term>Return Value</term>
            				<description>Description</description>
            			</listheader>
            			<item>
            				<term>
            					<c>true</c>
            				</term>
            				<description>
            					<para>
                                    This instance and <paramref name="obj"/> are
                                    <see cref="F:Teradata.Client.Provider.TdIntervalHour.Null"/>.
                                </para>
            					<para>-or-</para>
            					<para>
                                    This instance is equal to <paramref name="obj"/>.
                                </para>
            				</description>
            			</item>
            			<item>
            				<term>
            					<c>false</c>
            				</term>
            				<description>
            					<para>
                                    This instance is not equal to
                                    <paramref name="obj"/>.
                                </para>
            					<para>-or-</para>
            					<para>
                                    This instance is not <strong>Null</strong> and
                                    <paramref name="obj"/> is <strong>Null</strong>.
                                </para>
            					<para>-or-</para>
            					<para>
                                    This instance is <strong>Null</strong> and
                                    <paramref name="obj"/> is not <strong>Null</strong>
            					</para>
            					<para>-or-</para>
            					<para>
            						<paramref name="obj"/> is a <strong>null</strong>
                                    reference.
                                </para>
            				</description>
            			</item>
            		</list>
            	</para>
            </remarks>
            <example>
                The following code example uses various comparison methods and operators.
                <code lang="CS">
            // Create TdIntervalHour with 5 days, 1 hour and max precision
            TdIntervalHour firstInterval = new TdIntervalHour(121, 4);
            // Create TdIntervalHour with 20 days, 2 hours and max precision
            Object intervalObj = new TdIntervalHour(482, 4);
             
            // The following comparison methods and operators are equivalent
            if (false == TdIntervalHour.Equals(firstInterval, (TdIntervalHour)intervalObj) ||
                firstInterval != (TdIntervalHour)intervalObj ||
                false == firstInterval.Equals(intervalObj) )
            {
               Console.WriteLine(“firstInterval does not equal intervalObj”);
            }
                </code>
            </example>
            <overloads>
               Returns a value indicating whether two instances of <strong>TdIntervalHour</strong> 
               are equal.
            </overloads>
            <param name="obj">
               <strong>TdIntervalHour</strong> that will be compared to this instance 
               of <strong>TdIntervalHour</strong>.
            </param>
        </member>
        <member name="M:Teradata.Client.Provider.TdIntervalHour.GetHashCode">
            <summary>
                Returns the hash code for this instance. 
            </summary>
            <returns>The hash code is returned.</returns>
        </member>
        <member name="M:Teradata.Client.Provider.TdIntervalHour.ToString(System.String)">
            <summary>
               Converts this instance to its equivalent String representation using the specified format.
            </summary>
            <remarks>
            	<para>This method supports the following format specifiers:</para>
            	<para>
            		<list type="table">
            			<listheader>
            				<term>Format Specifier</term>
            				<description>Description</description>
            			</listheader>
            			<item>
            				<term>G</term>
            				<description>
            					<para>General interval format.</para>
            					<para>[sign][[hours]</para>
            				</description>
            			</item>
            			<item>
            				<term>L</term>
            				<description>
            					<para>Teradata literal format. This string may be used in
                                generating SQL against the Teradata database.</para>
            					<para>INTERVAL [sign]'[hours]' HOUR</para>
            				</description>
            			</item>
            		</list>
            	</para>
            	<para>Below is the description of each format item.</para>
            	<para>
            		<list type="table">
            			<listheader>
            				<term>Format Item</term>
            				<description>Description</description>
            			</listheader>
            			<item>
            				<term>sign</term>
            				<description>If negative a minus sign will be displayed.</description>
            			</item>
            			<item>
            				<term>hours</term>
            				<description>The number of hours (one to four digits in
                            length).</description>
            			</item>
            		</list>
            	</para>
            	<para>
                    The <paramref name="format"/> is not used, as cultural settings are
                    not supported.
                </para>
            </remarks>
            <returns>
               A string representation of the <strong>TdIntervalHour</strong> will be returned.
            </returns>
            <exception cref="T:System.FormatException" caption="FormatException">
               <paramref name="format"/> contains an invalid format specifier.
            </exception>
            <param name="format">
               The format string that will be used to format the <strong>TdIntervalHour</strong>.
            </param>
        </member>
        <member name="M:Teradata.Client.Provider.TdIntervalHour.ToString">
            <summary>
               Converts this instance to its equivalent String representation.
            </summary>
            <remarks>
               <para>The string returned will follow this format:</para>
            	<para>[sign][hours]</para>
            	<para>Below is the description of each format item.</para>
            	<para>
            		<list type="table">
            			<listheader>
            				<term>Format Item</term>
            				<description>Description</description>
            			</listheader>
            			<item>
            				<term>sign</term>
            				<description>If negative a minus sign will be displayed.</description>
            			</item>
            			<item>
            				<term>hours</term>
            				<description>The number of hours (one to four digits in
                            length).</description>
            			</item>
            		</list>
            	</para>
            	<para>
                    Cultural settings are not supported.
                </para>
            </remarks>
            <returns>
               A string representation of the <strong>TdIntervalHour</strong> will be returned.
            </returns>
        </member>
        <member name="M:Teradata.Client.Provider.TdIntervalHour.Parse(System.String)">
            <summary>
               The specified string is converted into an equivalent <see cref="T:Teradata.Client.Provider.TdIntervalHour"/>.
            </summary>
            <returns>
               A <strong>TdIntervalHour</strong> is returned that is equivalent to the  
               <strong>TdIntervalHour</strong> contained in the input string.
            </returns>
            <exception cref="T:System.FormatException" caption="FormatException">
               <paramref name="value"/> cannot be converted into a <strong>TdIntervalHour</strong> 
               interval.
            </exception>
            <exception cref="T:System.ArgumentNullException" caption="ArgumentNullException">
               <paramref name="value"/> is a <c>null</c> reference.
            </exception>
            <exception cref="T:System.OverflowException">
               The resultant operation returns a value greater than the <see cref="F:Teradata.Client.Provider.TdIntervalHour.MaxValue"/> 
               or less than the <see cref="F:Teradata.Client.Provider.TdIntervalHour.MinValue"/>.
            </exception>
            <remarks>
            	<para>This method supports the following string formats:</para>
            	<para>
            		<list type="table">
            			<listheader>
            				<term>String Format</term>
            				<description>Description</description>
            			</listheader>
            			<item>
            				<term>General interval format.</term>
            				<description>
            					<para>[sign][hours]</para>
            				</description>
            			</item>
            			<item>
            				<term>Teradata literal format. This string may be used in
                                generating SQL against the Teradata database.</term>
            				<description>
            					<para>INTERVAL [sign]'[hours]' HOUR</para>
            				</description>
            			</item>
            		</list>
            	</para>
            	<para>Below is the description of each format item.</para>
            	<para>
            		<list type="table">
            			<listheader>
            				<term>Format Item</term>
            				<description>Description</description>
            			</listheader>
            			<item>
            				<term>sign</term>
            				<description>If negative a minus sign will be displayed.</description>
            			</item>
            			<item>
            				<term>hours</term>
            				<description>The number of hours (one to four digits in
                            length).</description>
            			</item>
            		</list>
                </para>
            	<para>
            		While parsing the <paramref name="value"/> the <see cref="P:Teradata.Client.Provider.TdIntervalHour.Precision"/> will be
            		set to the number of digits contained within the hour component. 
            	</para>
            	<para>
            		For example a <paramref name="value"/> of "100" will
            		contain a precision of 3.
            	</para>
            </remarks>
            <overloads>
            	The specified string is converted into an equivalent 
               <strong>TdIntervalHour</strong> interval.
            </overloads>
            <param name="value">A string to be converted into a <strong>TdIntervalHour</strong>.</param>
        </member>
        <member name="M:Teradata.Client.Provider.TdIntervalHour.TryParse(System.String,Teradata.Client.Provider.TdIntervalHour@)">
            <summary>
               The specified string is converted into an equivalent <see cref="T:Teradata.Client.Provider.TdIntervalHour"/>. 
            </summary>
            <returns>
                <c>true</c> if the conversion of <paramref name="value"/> succeeded, 
                <c>false</c> otherwise.
            </returns>
            <remarks>
            	<para>This method supports the following string formats:</para>
            	<para>
            		<list type="table">
            			<listheader>
            				<term>String Format</term>
            				<description>Description</description>
            			</listheader>
            			<item>
            				<term>General interval format.</term>
            				<description>
            					<para>[sign][hours]</para>
            				</description>
            			</item>
            			<item>
            				<term>Teradata literal format. This string may be used in
                                generating SQL against the Teradata database.</term>
            				<description>
            					<para>INTERVAL [sign]'[hours]' HOUR</para>
            				</description>
            			</item>
            		</list>
            	</para>
            	<para>Below is the description of each format item.</para>
            	<para>
            		<list type="table">
            			<listheader>
            				<term>Format Item</term>
            				<description>Description</description>
            			</listheader>
            			<item>
            				<term>sign</term>
            				<description>If negative a minus sign will be displayed.</description>
            			</item>
            			<item>
            				<term>hours</term>
            				<description>The number of hours (one to four digits in
                            length).</description>
            			</item>
            		</list>
                </para>
            	<para>
            		While parsing the <paramref name="value"/> the <see cref="P:Teradata.Client.Provider.TdIntervalHour.Precision"/> will be
            		set to the number of digits contained within the hour component.  
            	</para>
            	<para>
            		For example a <paramref name="value"/> of "100" will
            		contain a precision of 3.
            	</para>
            </remarks>
            <overloads>
               The specified string is converted into an equivalent 
               <see cref="T:Teradata.Client.Provider.TdIntervalHour"/> interval.  A <c>true</c> is returned 
               if the conversion succeeded, <c>false</c> otherwise.
            </overloads>
            <param name="value">
               A string to be converted into a <strong>TdIntervalHour</strong>.
            </param>
            <param name="result">
               The converted string into a <strong>TdIntervalHour</strong>.
            </param>
        </member>
        <member name="M:Teradata.Client.Provider.TdIntervalHour.GetXmlSchema(System.Xml.Schema.XmlSchemaSet)">
             <summary>
                Gets the XML Qualified name for <see cref="T:Teradata.Client.Provider.TdIntervalHour"/> XML type mapping.
             </summary>
             <param name="xmlSchemaSet">
                Holds zero or more XML Schema definition language (XSD) schemas.
             </param>
             <returns>
                Returns <strong>xs:duration</strong>.
             </returns>
             <example>
             This example shows how to use the <strong>TdIntervalHour</strong> with 
             <see cref="T:System.Xml.Serialization.XmlSerializer"/> class. <see cref="T:System.Xml.Serialization.XmlElementAttribute"/> is used to 
              indicate that the Teradata Database column can be <strong>Null</strong>.
             <code>
              public class Order
              {
                  public TdTimestamp Date;
             
                  public TdIntervalHour ExpirationPeriod;
             
                  public TdTimestamp ExpirationDate;
            
                  public Int32 ProductId;
            
                  public Int32 Quantity;
            
                  public Int32? BackOrderQuantity;
            
                  [XmlElementAttribute(IsNullable = true)]        
                  public TdDecimal BackOrderPrice;
              }
             
              internal class OrderWriter
              {
              
                  public static void Write()
                  {
                      // Setup the order
                      Order x = new Order();
              
                      x.Date = new TdTimestamp(DateTime.Today);
                      // 5 days 4 hours
                      x.ExpirationPeriod = new TdIntervalHour(124);
                      x.ExpirationDate = x.Date + x.ExpirationPeriod;
                      x.ProductId = 100;
                      x.Quantity = 2000;
                      x.BackOrderQuantity = null;
                      x.BackOrderPrice = TdDecimal.Null;
            
                      // Write out today's orders to the file.
                      //
                      // Open the file.
                      XmlWriterSettings settings = new XmlWriterSettings();
                      settings.Indent = true;
                      XmlWriter writer = XmlWriter.Create(@"C:\Temp\TodayOrders.XML", settings);
                      writer.WriteStartElement("TodayOrders");
                
                      // Write out the schema.
                      XmlSchemas schemas = new XmlSchemas();
                      XmlSchemaExporter schExporter = new XmlSchemaExporter(schemas);
                      schExporter.ExportTypeMapping(new XmlReflectionImporter().ImportTypeMapping(typeof(Order)));
                      schemas[0].Write(writer);
            
                      // Write out the orders.
                      XmlSerializer xml = new XmlSerializer(typeof(Order));
                      xml.Serialize(writer, x);
              
                      // Close the document.
                      writer.WriteEndDocument();
                      writer.Close();
                  }
              }
             
              /* Output is:
             
              &lt;TodayOrders&gt;
                &lt;xs:schema elementFormDefault="qualified" xmlns:xs="http://www.w3.org/2001/XMLSchema"&gt;
                  &lt;xs:element name="Order" nillable="true" type="Order" /&gt;
                  &lt;xs:complexType name="Order"&gt;
                    &lt;xs:sequence&gt;
                      &lt;xs:element minOccurs="1" maxOccurs="1" name="Date" type="xs:dateTime" /&gt;
                      &lt;xs:element minOccurs="1" maxOccurs="1" name="ExpirationPeriod" type="xs:duration" /&gt;
                      &lt;xs:element minOccurs="1" maxOccurs="1" name="ExpirationDate" type="xs:dateTime" /&gt;
                      &lt;xs:element minOccurs="1" maxOccurs="1" name="ProductId" type="xs:int" /&gt;
                      &lt;xs:element minOccurs="1" maxOccurs="1" name="Quantity" type="xs:int" /&gt;
                      &lt;xs:element minOccurs="1" maxOccurs="1" name="BackOrderQuantity" nillable="true" type="xs:int" /&gt;
                      &lt;xs:element minOccurs="1" maxOccurs="1" name="BackOrderPrice" nillable="true" type="xs:decimal" /&gt;
                    &lt;/xs:sequence&gt;
                  &lt;/xs:complexType&gt;
                &lt;/xs:schema&gt;
                &lt;Order xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xmlns:xsd="http://www.w3.org/2001/XMLSchema"&gt;
                  &lt;Date&gt;2008-02-01T00:00:00-08:00&lt;/Date&gt;
                  &lt;ExpirationPeriod&gt;PT124H&lt;/ExpirationPeriod&gt;
                  &lt;ExpirationDate&gt;2008-02-06T04:00:00-08:00&lt;/ExpirationDate&gt;
                  &lt;ProductId&gt;100&lt;/ProductId&gt;
                  &lt;Quantity&gt;2000&lt;/Quantity&gt;
                  &lt;BackOrderQuantity xsi:nil="true" /&gt;
                  &lt;BackOrderPrice xsi:nil="true" /&gt;
                &lt;/Order&gt;
              &lt;/TodayOrders&gt;
             
              */
             </code>
             </example>        
        </member>
        <member name="M:Teradata.Client.Provider.TdIntervalHour.op_Addition(Teradata.Client.Provider.TdIntervalHour,Teradata.Client.Provider.TdIntervalHour)">
            <summary>
               A <see cref="T:Teradata.Client.Provider.TdIntervalHour"/> is added to another <strong>TdIntervalHour</strong>.
            </summary>
            <returns>
               A new <strong>TdIntervalHour</strong> as the result of adding a 
               <strong>TdIntervalHour</strong> to another 
               <strong>TdIntervalHour</strong>.
            </returns>
            <remarks>
            <para>
               If either parameter is <strong>Null</strong> a <see cref="F:Teradata.Client.Provider.TdIntervalHour.Null"/> will be returned.
            </para>
            <para>
               The returned <strong>TdIntervalHour</strong> will contain a precision 
               set to the <see cref="F:Teradata.Client.Provider.TdIntervalHour.MaxPrecision"/>.
            </para>        
            </remarks>
            <exception cref="T:System.OverflowException">
               The resultant operation returns a value greater than the <see cref="F:Teradata.Client.Provider.TdIntervalHour.MaxValue"/> 
               or less than the <see cref="F:Teradata.Client.Provider.TdIntervalHour.MinValue"/>.
            </exception>
            <overloads>
               Calculates the sum of two operands and returns a <strong>TdIntervalHour</strong>.
            </overloads>
            <param name="left">A <strong>TdIntervalHour</strong>.</param>
            <param name="right">A <strong>TdIntervalHour</strong>.</param>
        </member>
        <member name="M:Teradata.Client.Provider.TdIntervalHour.op_Subtraction(Teradata.Client.Provider.TdIntervalHour,Teradata.Client.Provider.TdIntervalHour)">
            <summary>
               A <see cref="T:Teradata.Client.Provider.TdIntervalHour"/> is subtracted from another <strong>TdIntervalHour</strong>.
            </summary>
            <returns>
               A new <strong>TdIntervalHour</strong> as the result 
               of subtracting <paramref name="right"/> from the <paramref name="left"/>.
            </returns>
            <remarks>
            <para>
               If either parameter is <strong>Null</strong> a <see cref="F:Teradata.Client.Provider.TdIntervalHour.Null"/> will be returned.
            </para>
            <para>
               The returned <strong>TdIntervalHour</strong> will contain a precision  
               set to the <see cref="F:Teradata.Client.Provider.TdIntervalHour.MaxPrecision"/>.
            </para>        
            </remarks>
            <overloads>
               The right operand is subtracted from the left operand returning a 
               <strong>TdIntervalHour</strong>.
            </overloads>
            <exception cref="T:System.OverflowException">
               The resultant operation returns a value greater than the <see cref="F:Teradata.Client.Provider.TdIntervalHour.MaxValue"/> 
               or less than the <see cref="F:Teradata.Client.Provider.TdIntervalHour.MinValue"/>.
            </exception>
            <param name="left">A <strong>TdIntervalHour</strong> to subtract from.</param>
            <param name="right">A <strong>TdIntervalHour</strong> to subtract.</param>
        </member>
        <member name="M:Teradata.Client.Provider.TdIntervalHour.op_Addition(Teradata.Client.Provider.TdIntervalHour,System.Int32)">
            <summary>
               The specified number of hours is added to the <see cref="T:Teradata.Client.Provider.TdIntervalHour"/>.
            </summary>
            <remarks>
            <para>
               If <paramref name="interval"/> is <see cref="F:Teradata.Client.Provider.TdIntervalHour.Null"/> a <strong>Null</strong> will be returned.
            </para>
            <para>
               The returned <strong>TdIntervalHour</strong> will contain a precision  
               set to the <see cref="F:Teradata.Client.Provider.TdIntervalHour.MaxPrecision"/>.
            </para>        
            </remarks>
            <exception cref="T:System.OverflowException">
               The resultant operation returns a value greater than the <see cref="F:Teradata.Client.Provider.TdIntervalHour.MaxValue"/> 
               or less than the <see cref="F:Teradata.Client.Provider.TdIntervalHour.MinValue"/>.
            </exception>
            <param name="interval">A <strong>TdIntervalHour</strong>.</param>
            <param name="hours">Number of hours to add.</param>
            <returns>
               A new <strong>TdIntervalHour</strong> as the result of adding an Int32 to 
               <strong>TdIntervalHour</strong>.
            </returns>
        </member>
        <member name="M:Teradata.Client.Provider.TdIntervalHour.op_Addition(System.Int32,Teradata.Client.Provider.TdIntervalHour)">
            <summary>
               The specified number of hours is added to the <see cref="T:Teradata.Client.Provider.TdIntervalHour"/>.
            </summary>
            <remarks>
            <para>
               If <paramref name="interval"/> is <see cref="F:Teradata.Client.Provider.TdIntervalHour.Null"/> a <strong>Null</strong> will be returned.
            </para>
            <para>
               The returned <strong>TdIntervalHour</strong> will contain a precision  
               set to the <see cref="F:Teradata.Client.Provider.TdIntervalHour.MaxPrecision"/>.
            </para>        
            </remarks>
            <exception cref="T:System.OverflowException">
               The resultant operation returns a value greater than the <see cref="F:Teradata.Client.Provider.TdIntervalHour.MaxValue"/> 
               or less than the <see cref="F:Teradata.Client.Provider.TdIntervalHour.MinValue"/>.
            </exception>
            <param name="hours">Number of hours to add.</param>
            <param name="interval">A <strong>TdIntervalHour</strong>.</param>
            <returns>
               A new <strong>TdIntervalHour</strong> as the result of adding an Int32 to 
               <strong>TdIntervalHour</strong>.
            </returns>
        </member>
        <member name="M:Teradata.Client.Provider.TdIntervalHour.op_Subtraction(Teradata.Client.Provider.TdIntervalHour,System.Int32)">
            <summary>
               The specified number of hours is subtracted from the <see cref="T:Teradata.Client.Provider.TdIntervalHour"/>.
            </summary>
            <remarks>
            <para>
               If <paramref name="interval"/> is <see cref="F:Teradata.Client.Provider.TdIntervalHour.Null"/> a <strong>Null</strong> will be returned.
            </para>
            <para>
               The returned <strong>TdIntervalHour</strong> will contain a precision  
               set to the <see cref="F:Teradata.Client.Provider.TdIntervalHour.MaxPrecision"/>.
            </para>        
            </remarks>
            <exception cref="T:System.OverflowException">
               The resultant operation returns a value greater than the <see cref="F:Teradata.Client.Provider.TdIntervalHour.MaxValue"/> 
               or less than the <see cref="F:Teradata.Client.Provider.TdIntervalHour.MinValue"/>.
            </exception>
            <param name="interval">A <strong>TdIntervalHour</strong>.</param>
            <param name="hours">Number of hours to subtract.</param>
            <returns>
               A new <strong>TdIntervalHour</strong> as the result of substracting an Int32 from 
               <strong>TdIntervalHour</strong>.
            </returns>
        </member>
        <member name="M:Teradata.Client.Provider.TdIntervalHour.op_Multiply(Teradata.Client.Provider.TdIntervalHour,System.Int32)">
            <summary>
               A <see cref="T:Teradata.Client.Provider.TdIntervalHour"/> is multiplied by an integer value.
            </summary>
            <remarks>
            <para>
               If <paramref name="interval"/> is <see cref="F:Teradata.Client.Provider.TdIntervalHour.Null"/> a <strong>Null</strong> will be returned.
            </para>
            <para>
               The returned <strong>TdIntervalHour</strong> will contain a precision 
               set to the <see cref="F:Teradata.Client.Provider.TdIntervalHour.MaxPrecision"/>.
            </para>
            </remarks>
            <returns>
               A new <strong>TdIntervalHour</strong> as the result of multiplying a 
               <strong>TdIntervalHour</strong> and an integer value.
            </returns>        
            <exception cref="T:System.OverflowException">
               The resultant operation returns a value greater than the <see cref="F:Teradata.Client.Provider.TdIntervalHour.MaxValue"/> 
               or less than the <see cref="F:Teradata.Client.Provider.TdIntervalHour.MinValue"/>.
            </exception>
            <param name="interval">A <strong>TdIntervalHour</strong>.</param>
            <param name="value">A multiplier.</param>
        </member>
        <member name="M:Teradata.Client.Provider.TdIntervalHour.op_Multiply(System.Int32,Teradata.Client.Provider.TdIntervalHour)">
            <summary>
               A <see cref="T:Teradata.Client.Provider.TdIntervalHour"/> is multiplied by an integer value.
            </summary>
            <remarks>
            <para>
               If <paramref name="interval"/> is <see cref="F:Teradata.Client.Provider.TdIntervalHour.Null"/> a <strong>Null</strong> will be returned.
            </para>
            <para>
               The returned <strong>TdIntervalHour</strong> will contain a precision 
               set to the <see cref="F:Teradata.Client.Provider.TdIntervalHour.MaxPrecision"/>.
            </para>
            </remarks>
            <returns>
               A new <strong>TdIntervalHour</strong> as the result of multiplying a 
               <strong>TdIntervalHour</strong> and an integer value.
            </returns>        
            <exception cref="T:System.OverflowException">
               The resultant operation returns a value greater than the <see cref="F:Teradata.Client.Provider.TdIntervalHour.MaxValue"/> 
               or less than the <see cref="F:Teradata.Client.Provider.TdIntervalHour.MinValue"/>.
            </exception>
            <param name="value">A multiplier.</param>
            <param name="interval">A <strong>TdIntervalHour</strong>.</param>
        </member>
        <member name="M:Teradata.Client.Provider.TdIntervalHour.op_Division(Teradata.Client.Provider.TdIntervalHour,System.Int32)">
            <summary>
               A <see cref="T:Teradata.Client.Provider.TdIntervalHour"/> is divided by an integer value.
            </summary>
            <remarks>
            <para>
               If <paramref name="interval"/> is <see cref="F:Teradata.Client.Provider.TdIntervalHour.Null"/> a <strong>Null</strong> will be returned.
            </para>
            <para>
               The returned <strong>TdIntervalHour</strong> will contain a precision 
               which matches the precision of <strong>interval</strong> parameter.
            </para>
            </remarks>
            <returns>
               A new <strong>TdIntervalHour</strong> as the result of dividing a 
               <strong>TdIntervalHour</strong> and an integer value.
            </returns>        
            <exception cref="T:System.DivideByZeroException">
               The <paramref name="value"/> divisor cannot be 0.
            </exception>
            <param name="interval">A <strong>TdIntervalHour</strong>.</param>
            <param name="value">A divisor.</param>
        </member>
        <member name="M:Teradata.Client.Provider.TdIntervalHour.Add(Teradata.Client.Provider.TdIntervalHour,Teradata.Client.Provider.TdIntervalHour)">
            <summary>
               Calculates the sum of two <see cref="T:Teradata.Client.Provider.TdIntervalHour"/> operands.
            </summary>
            <returns>
               A <strong>TdIntervalHour</strong> containing the sum.
            </returns>
            <remarks>
            <para>
               If either parameter is <strong>Null</strong> a <see cref="F:Teradata.Client.Provider.TdIntervalHour.Null"/> will be returned.
            </para>
            <para>
               The returned <strong>TdIntervalHour</strong> will contain a precision 
               set to the <see cref="F:Teradata.Client.Provider.TdIntervalHour.MaxPrecision"/>.
            </para>
            </remarks>
            <exception cref="T:System.OverflowException">
               The resultant operation returns a value greater than the <see cref="F:Teradata.Client.Provider.TdIntervalHour.MaxValue"/> 
               or less than the <see cref="F:Teradata.Client.Provider.TdIntervalHour.MinValue"/>.
            </exception>
            <overloads>
               Calculates the sum of two operands and returns a <strong>TdIntervalHour</strong>.
            </overloads>
            <param name="left">A <strong>TdIntervalHour</strong>.</param>
            <param name="right">A <strong>TdIntervalHour</strong>.</param>
        </member>
        <member name="M:Teradata.Client.Provider.TdIntervalHour.Add(Teradata.Client.Provider.TdIntervalHour,System.Int32)">
            <summary>
               The specified number of hours is added to the <see cref="T:Teradata.Client.Provider.TdIntervalHour"/>.
            </summary>
            <remarks>
            <para>
               If <paramref name="interval"/> is <see cref="F:Teradata.Client.Provider.TdIntervalHour.Null"/> a <strong>Null</strong> will be returned.
            </para>
            <para>
               The returned <strong>TdIntervalHour</strong> will contain a precision 
               set to the <see cref="F:Teradata.Client.Provider.TdIntervalHour.MaxPrecision"/>.
            </para>
            </remarks>
            <returns>
               A new <strong>TdIntervalHour</strong> as the result of adding an Int32 to 
               <strong>TdIntervalHour</strong>.
            </returns>        
            <exception cref="T:System.OverflowException">
               The resultant operation returns a value greater than the <see cref="F:Teradata.Client.Provider.TdIntervalHour.MaxValue"/> 
               or less than the <see cref="F:Teradata.Client.Provider.TdIntervalHour.MinValue"/>.
            </exception>
            <param name="interval">A <strong>TdIntervalHour</strong>.</param>
            <param name="hours">Number of hours to add.</param>
        </member>
        <member name="M:Teradata.Client.Provider.TdIntervalHour.Add(System.Int32,Teradata.Client.Provider.TdIntervalHour)">
            <summary>
               The specified number of hours is added to the <see cref="T:Teradata.Client.Provider.TdIntervalHour"/>.
            </summary>
            <remarks>
            <para>
               If <paramref name="interval"/> is <see cref="F:Teradata.Client.Provider.TdIntervalHour.Null"/> a <strong>Null</strong> will be returned.
            </para>
            <para>
               The returned <strong>TdIntervalHour</strong> will contain a precision 
               set to the <see cref="F:Teradata.Client.Provider.TdIntervalHour.MaxPrecision"/>.
            </para>
            </remarks>
            <returns>
               A new <strong>TdIntervalHour</strong> as the result of adding an Int32 to 
               <strong>TdIntervalHour</strong>.
            </returns> 
            <overloads>
               Two operands are added to return a <strong>TdIntervalHour</strong>.
            </overloads>
            <exception cref="T:System.OverflowException">
               The resultant operation returns a value greater than the <see cref="F:Teradata.Client.Provider.TdIntervalHour.MaxValue"/> 
               or less than the <see cref="F:Teradata.Client.Provider.TdIntervalHour.MinValue"/>.
            </exception>
            <param name="interval">A <strong>TdIntervalHour</strong>.</param>
            <param name="hours">Number of hours to add.</param>
        </member>
        <member name="M:Teradata.Client.Provider.TdIntervalHour.Subtract(Teradata.Client.Provider.TdIntervalHour,Teradata.Client.Provider.TdIntervalHour)">
            <summary>
               A <see cref="T:Teradata.Client.Provider.TdIntervalHour"/> is subtracted from another <strong>TdIntervalHour</strong>.
            </summary>
            <returns>
               A new <strong>TdIntervalHour</strong> as the result 
               of subtracting <paramref name="right"/> from the <paramref name="left"/>.
            </returns>
            <remarks>
            <para>
               If either parameter is <strong>Null</strong> a <see cref="F:Teradata.Client.Provider.TdIntervalHour.Null"/> will be returned.
            </para>
            <para>
               The returned <strong>TdIntervalHour</strong> will contain a precision  
               set to the <see cref="F:Teradata.Client.Provider.TdIntervalHour.MaxPrecision"/>.
            </para>        
            </remarks>
            <overloads>
               The right operand is subtracted from the left operand returning a 
               <strong>TdIntervalHour</strong>.
            </overloads>
            <exception cref="T:System.OverflowException">
               The resultant operation returns a value greater than the <see cref="F:Teradata.Client.Provider.TdIntervalHour.MaxValue"/> 
               or less than the <see cref="F:Teradata.Client.Provider.TdIntervalHour.MinValue"/>.
            </exception>
            <param name="left">A <strong>TdIntervalHour</strong> to subtract from.</param>
            <param name="right">A <strong>TdIntervalHour</strong> to subtract.</param>
        </member>
        <member name="M:Teradata.Client.Provider.TdIntervalHour.Subtract(Teradata.Client.Provider.TdIntervalHour,System.Int32)">
            <summary>
               The specified number of hours is subtracted from the <see cref="T:Teradata.Client.Provider.TdIntervalHour"/>.
            </summary>
            <remarks>
            <para>
               If <paramref name="interval"/> is <see cref="F:Teradata.Client.Provider.TdIntervalHour.Null"/> a <strong>Null</strong> will be returned.
            </para>
            <para>
               The returned <strong>TdIntervalHour</strong> will contain a precision  
               set to the <see cref="F:Teradata.Client.Provider.TdIntervalHour.MaxPrecision"/>.
            </para>       
            </remarks>
            <exception cref="T:System.OverflowException">
               The resultant operation returns a value greater than the <see cref="F:Teradata.Client.Provider.TdIntervalHour.MaxValue"/> 
               or less than the <see cref="F:Teradata.Client.Provider.TdIntervalHour.MinValue"/>.
            </exception>
            <param name="interval">A <strong>TdIntervalHour</strong>.</param>
            <param name="hours">Number of hours to subtract.</param>
            <returns>
               A new <strong>TdIntervalHour</strong> as the result of substracting an Int32 from 
               <strong>TdIntervalHour</strong>.
            </returns>
        </member>
        <member name="M:Teradata.Client.Provider.TdIntervalHour.Multiply(Teradata.Client.Provider.TdIntervalHour,System.Int32)">
            <summary>
               A <see cref="T:Teradata.Client.Provider.TdIntervalHour"/> is multiplied by an integer value.
            </summary>
            <remarks>
            <para>
               If <paramref name="interval"/> is <see cref="F:Teradata.Client.Provider.TdIntervalHour.Null"/> a <strong>Null</strong> will be returned.
            </para>
            <para>
               The returned <strong>TdIntervalHour</strong> will contain a precision 
               set to the <see cref="F:Teradata.Client.Provider.TdIntervalHour.MaxPrecision"/>.
            </para>
            </remarks>
            <returns>
               A new <strong>TdIntervalHour</strong> as the result of multiplying a 
               <strong>TdIntervalHour</strong> and an integer value.
            </returns>        
            <exception cref="T:System.OverflowException">
               The resultant operation returns a value greater than the <see cref="F:Teradata.Client.Provider.TdIntervalHour.MaxValue"/> 
               or less than the <see cref="F:Teradata.Client.Provider.TdIntervalHour.MinValue"/>.
            </exception>
            <param name="interval">A <strong>TdIntervalHour</strong>.</param>
            <param name="value">A multiplier.</param>
        </member>
        <member name="M:Teradata.Client.Provider.TdIntervalHour.Multiply(System.Int32,Teradata.Client.Provider.TdIntervalHour)">
            <summary>
               A <see cref="T:Teradata.Client.Provider.TdIntervalHour"/> is multiplied by an integer value.
            </summary>
            <remarks>
            <para>
               If <paramref name="interval"/> is <see cref="F:Teradata.Client.Provider.TdIntervalHour.Null"/> a <strong>Null</strong> will be returned.
            </para>
            <para>
               The returned <strong>TdIntervalHour</strong> will contain a precision 
               set to the <see cref="F:Teradata.Client.Provider.TdIntervalHour.MaxPrecision"/>.
            </para>
            </remarks>
            <returns>
               A new <strong>TdIntervalHour</strong> as the result of multiplying a 
               <strong>TdIntervalHour</strong> and an integer value.
            </returns>        
            <exception cref="T:System.OverflowException">
               The resultant operation returns a value greater than the <see cref="F:Teradata.Client.Provider.TdIntervalHour.MaxValue"/> 
               or less than the <see cref="F:Teradata.Client.Provider.TdIntervalHour.MinValue"/>.
            </exception>
            <param name="value">A multiplier.</param>
            <param name="interval">A <strong>TdIntervalHour</strong>.</param>
        </member>
        <member name="M:Teradata.Client.Provider.TdIntervalHour.Divide(Teradata.Client.Provider.TdIntervalHour,System.Int32)">
            <summary>
               A <see cref="T:Teradata.Client.Provider.TdIntervalHour"/> is divided by an integer value.
            </summary>
            <remarks>
            <para>
               If <paramref name="interval"/> is <see cref="F:Teradata.Client.Provider.TdIntervalHour.Null"/> a <strong>Null</strong> will be returned.
            </para>
            <para>
               The returned <strong>TdIntervalHour</strong> will contain a precision 
               which matches the precision of the <strong>interval</strong> parameter.
            </para>
            </remarks>
            <returns>
               A new <strong>TdIntervalHour</strong> as the result of dividing a 
               <strong>TdIntervalHour</strong> and an integer value.
            </returns>        
            <exception cref="T:System.DivideByZeroException">
               The <paramref name="value"/> divisor cannot be 0.
            </exception>
            <param name="interval">A <strong>TdIntervalHour</strong>.</param>
            <param name="value">A divisor.</param>
        </member>
        <member name="M:Teradata.Client.Provider.TdIntervalHour.op_GreaterThan(Teradata.Client.Provider.TdIntervalHour,Teradata.Client.Provider.TdIntervalHour)">
            <summary>
               This operator determines whether the <paramref name="left"/> is greater 
               than the <paramref name="right"/>.
            </summary>
            <returns>
            	<para>
            		<c>true</c> indicates the <paramref name="left"/> is greater than
                    the <paramref name="right"/>, <c>false</c> otherwise.
                </para>
            	<para>
            		<list type="table">
            			<listheader>
            				<term>Return Value</term>
            				<description>Description</description>
            			</listheader>
            			<item>
            				<term><c>true</c></term>
            				<description>
            					<paramref name="left"/> and
                                <paramref name="right"/> are not
                                <see cref="F:Teradata.Client.Provider.TdIntervalHour.Null"/> and
                                <paramref name="left"/> is greater than
                                <paramref name="right"/>.
            				</description>
            			</item>
            			<item>
            				<term><c>false</c></term>
            				<description>
            					<para>
                                    The <paramref name="left"/> is less than or equal
                                    to <paramref name="right"/>
                                </para>
            					<para>-or-</para>
            					<para>
                                    Either <paramref name="left"/> and / or
                                    <paramref name="right"/> is <strong>Null</strong>.
                                </para>
            				</description>
            			</item>
            		</list>
            	</para>
            </returns>
            <remarks>
            	<para>
                   Comparison operators always return <c>false</c> if one of the operands is
                   <strong>Null</strong>. Therefore you should not assume that the reverse condition
                   is <c>true</c>. For example you cannot assume that the <paramref name="left"/> is less 
                   than or equal to the <paramref name="right"/> if the "&gt;" operator returns <c>false</c>.
               </para>
            	<para>
                   The reverse condition is <c>true</c> when the <paramref name="left"/> and the 
                   <paramref name="right"/> are not <strong>Null</strong>.
               </para>
            </remarks>
            <param name="left">An instance of <see cref="T:Teradata.Client.Provider.TdIntervalHour"/>.</param>
            <param name="right">An instance of <strong>TdIntervalHour</strong>.</param>
        </member>
        <member name="M:Teradata.Client.Provider.TdIntervalHour.op_GreaterThanOrEqual(Teradata.Client.Provider.TdIntervalHour,Teradata.Client.Provider.TdIntervalHour)">
            <summary>
               This operator determines whether the <paramref name="left"/> is greater than or 
               equal to the <paramref name="right"/>.
            </summary>
            <returns>
            	<para>
            		<c>true</c> indicates the <paramref name="left"/> is greater than
                    or equal to the <paramref name="right"/>, <c>false</c> otherwise.
                </para>
            	<para>
            		<list type="table">
            			<listheader>
            				<term>Return Value</term>
            				<description>Description</description>
            			</listheader>
            			<item>
            				<term><c>true</c></term>
            				<description>
            					<para>
            						<paramref name="left"/> and
                                    <paramref name="right"/> are not
                                    <see cref="F:Teradata.Client.Provider.TdIntervalHour.Null"/> and
                                    <paramref name="left"/> is greater than or equal
                                    to <paramref name="right"/>
            					</para>
            					<para>-or-</para>
            					<para>
            						<paramref name="left"/> is <strong>Null</strong>
                                    and <paramref name="right"/> is
                                    <strong>Null</strong>.
            					</para>
            				</description>
            			</item>
            			<item>
            				<term><c>false</c></term>
            				<description>
            					<para>
                                    The <paramref name="left"/> is less than
                                    <paramref name="right"/>
            					</para>
            					<para>-or-</para>
            					<para>
                                    Either <paramref name="left"/> or
                                    <paramref name="right"/> is <strong>Null</strong>.
            					</para>
            				</description>
            			</item>
            		</list>
            	</para>
            </returns>
            <remarks>
            	<para>
                    Comparison operators always return <c>false</c> if one of the operands is
                    <strong>Null</strong>. Therefore you should not assume that the reverse
                    condition is <c>true</c>. For example you cannot assume that the
                    <paramref name="left"/> is less than the
                    <paramref name="right"/> if the "&gt;=" operator returns
                    <c>false</c>.
                </para>
            	<para>
                    The reverse condition is <c>true</c> when the
                    <paramref name="left"/> and the
                    <paramref name="right"/> are not <strong>Null</strong>.
                </para>
            </remarks>
            <param name="left">An instance of <see cref="T:Teradata.Client.Provider.TdIntervalHour"/>.</param>
            <param name="right">An instance of <strong>TdIntervalHour</strong>.</param>
        </member>
        <member name="M:Teradata.Client.Provider.TdIntervalHour.op_Inequality(Teradata.Client.Provider.TdIntervalHour,Teradata.Client.Provider.TdIntervalHour)">
            <summary>
               This operator determines whether the <paramref name="left"/> and the  
               <paramref name="right"/> are not equal.
            </summary>
            <returns>
            	<para>
                   A Boolean is returned that indicates whether the two operands are not equal.
                   <c>true</c> indicates the two operands are not equal, <c>false</c>
                   otherwise.
               </para>
            	<para>
            		<list type="table">
            			<listheader>
            				<term>Return Value</term>
            				<description>Description</description>
            			</listheader>
            			<item>
            				<term><c>true</c></term>
            				<description>
                                <para>
            					   <paramref name="left"/> is less than or greater than
                                   <paramref name="right"/>.
                                </para>
            					<para>-or-</para>
                               <para>
            					    <paramref name="left"/> is
                                   <see cref="F:Teradata.Client.Provider.TdIntervalHour.Null"/> and
                                   <paramref name="right"/> is not <strong>Null.</strong> 
                               </para>
            					<para>-or-</para>
            					<para>
                                   <paramref name="left"/> is not <strong>Null</strong>
                                   and <paramref name="right"/> is <strong>Null.</strong>
                                </para>
                            </description>
            			</item>
            			<item>
            				<term><c>false</c></term>
            				<description>
            					<para>
                                  <paramref name="left"/> is equal to
                                  <paramref name="right"/>.
                               </para>
            					<para>-or-</para>
            					<para>
                                   <paramref name="left"/> and
                                   <paramref name="right"/> are <strong>Null</strong>.
                                </para>
                            </description>
            			</item>
            		</list>
            	</para>
            </returns>
            <param name="left">An instance of <see cref="T:Teradata.Client.Provider.TdIntervalHour"/>.</param>
            <param name="right">An instance of <strong>TdIntervalHour</strong>.</param>
        </member>
        <member name="M:Teradata.Client.Provider.TdIntervalHour.op_Equality(Teradata.Client.Provider.TdIntervalHour,Teradata.Client.Provider.TdIntervalHour)">
            <summary>
               This operator determines whether the <paramref name="left"/> and the  
               <paramref name="right"/> are equal.
            </summary>
            <returns>
            	<para>
                   A Boolean is returned that indicates whether the two operands are equal.
                   <c>True</c> indicates the two operands are equal, <c>false</c> otherwise.
               </para>
            	<para>
            		<list type="table">
            			<listheader>
            				<term>Return Value</term>
            				<description>Description</description>
            			</listheader>
            			<item>
            				<term><c>true</c></term>
            				<description>
            					<para>
            					   <paramref name="left"/> is equal to
                                   <paramref name="right"/>
            					</para>
            					<para>-or-</para>
            					<para>
            					   <paramref name="left"/> is
                                   <see cref="F:Teradata.Client.Provider.TdIntervalHour.Null"/> and
                                   <paramref name="right"/> is <strong>Null</strong>.
            					</para>
            				</description>
            			</item>
            			<item>
            				<term><c>false</c></term>
            				<description>
            					<para>
            					   <paramref name="left"/> is not <strong>Null</strong>
                                   and <paramref name="right"/> is <strong>Null</strong>
            					</para>
            					<para>-or-</para>
            					<para>
            					   <paramref name="left"/> is <strong>Null</strong> and
                                   <paramref name="right"/> is not <strong>Null</strong>
            					</para>
            					<para>-or-</para>
            					<para>
                                   The <paramref name="left"/> is not equal to
                                   <paramref name="right"/>.
            					</para>
            				</description>
            			</item>
            		</list>
            	</para>
            </returns>
            <param name="left">An instance of <see cref="T:Teradata.Client.Provider.TdIntervalHour"/>.</param>
            <param name="right">An instance of <strong>TdIntervalHour</strong>.</param>
        </member>
        <member name="M:Teradata.Client.Provider.TdIntervalHour.op_LessThan(Teradata.Client.Provider.TdIntervalHour,Teradata.Client.Provider.TdIntervalHour)">
            <summary>
               This operator determines whether the <paramref name="left"/> is less than the 
               <paramref name="right"/>.
            </summary>
            <returns>
            	<para>
            		<c>True</c> indicates the <paramref name="left"/> is less than
                    the <paramref name="right"/>, <c>false</c> otherwise.
                </para>
            	<para>
            		<list type="table">
            			<listheader>
            				<term>Return Value</term>
            				<description>Description</description>
            			</listheader>
            			<item>
            				<term><c>true</c></term>
            				<description>
            					<para>
            					    <paramref name="left"/> and
                                   <paramref name="right"/> are not
                                   <see cref="F:Teradata.Client.Provider.TdIntervalHour.Null"/> and
                                   <paramref name="left"/> is less than
                                   <paramref name="right"/>.
            					</para>
            				</description>
            			</item>
            			<item>
            				<term><c>false</c></term>
            				<description>
            					<para>
                                    The <paramref name="left"/> is greater than or
                                    equal to <paramref name="right"/>
            					</para>
            					<para>-or-</para>
            					<para>
                                    Either <paramref name="left"/> and / or
                                    <paramref name="right"/> is <strong>Null</strong>.
            					</para>
            				</description>
            			</item>
            		</list>
            	</para>
            </returns>
            <remarks>
            	<para>
                    Comparison operators always return <c>false</c> if one of the operands is
                    <strong>Null</strong>. Therefore you should not assume that the reverse
                    condition is <c>true</c>. For example you cannot assume that the
                    <paramref name="left"/> is greater than or equal to the
                    <paramref name="right"/> if the "&lt;" operator returns
                    <c>false</c>.
                </para>
            	<para>
                    The reverse condition is <c>true</c> when the
                    <paramref name="left"/> and the
                    <paramref name="right"/> are not <strong>Null</strong>.
                </para>
            </remarks>
            <param name="left">An instance of <see cref="T:Teradata.Client.Provider.TdIntervalHour"/>.</param>
            <param name="right">An instance of <strong>TdIntervalHour</strong>.</param>
        </member>
        <member name="M:Teradata.Client.Provider.TdIntervalHour.op_LessThanOrEqual(Teradata.Client.Provider.TdIntervalHour,Teradata.Client.Provider.TdIntervalHour)">
            <summary>
               This operator determines whether the <paramref name="left"/> is less than  
               or equal to the <paramref name="right"/>.
            </summary>
            <returns>
            	<para>
            		<c>true</c> indicates the <paramref name="left"/> is less than or
                    equal to the <paramref name="right"/>, <c>false</c> otherwise.
                </para>
            	<para>
            		<list type="table">
            			<listheader>
            				<term>Return Value</term>
            				<description>Description</description>
            			</listheader>
            			<item>
            				<term><c>true</c></term>
            				<description>
            					<para>
            						<paramref name="left"/> and
                                    <paramref name="right"/> are not
                                    <see cref="F:Teradata.Client.Provider.TdIntervalHour.Null"/> and
                                    <paramref name="left"/> is less than or equal to
                                    <paramref name="right"/>
            					</para>
            					<para>-or-</para>
            					<para>
            						<paramref name="left"/> is <strong>Null</strong>
                                    and <paramref name="right"/> is
                                    <strong>Null</strong>.
            					</para>
            				</description>
            			</item>
            			<item>
            				<term><c>false</c></term>
            				<description>
            					<para>
                                    The <paramref name="left"/> is greater than
                                    <paramref name="right"/>
            					</para>
            					<para>-or-</para>
            					<para>
                                    Either <paramref name="left"/> or
                                    <paramref name="right"/> is <strong>Null</strong>.
            					</para>
            				</description>
            			</item>
            		</list>
            	</para>
            </returns>
            <remarks>
            	<para>
                    Comparison operators always return <c>false</c> if one of the operands is
                    <strong>Null</strong>. Therefore you should not assume that the reverse
                    condition is <c>true</c>. For example you cannot assume that the
                    <paramref name="left"/> is greater than the <paramref name="right"/>
                     if the "&lt;=" operator returns <c>false</c>.
                </para>
            	<para>
                    The reverse condition is <c>true</c> when the
                    <paramref name="left"/> and the
                    <paramref name="right"/> are not <strong>Null</strong>.
                </para>
            </remarks>
            <param name="left">An instance of <see cref="T:Teradata.Client.Provider.TdIntervalHour"/>.</param>
            <param name="right">An instance of <strong>TdIntervalHour</strong>.</param>
        </member>
        <member name="M:Teradata.Client.Provider.TdIntervalHour.op_Explicit(System.TimeSpan)~Teradata.Client.Provider.TdIntervalHour">
            <summary>
               Converts a <see cref="T:System.TimeSpan"/> to a <see cref="T:Teradata.Client.Provider.TdIntervalHour"/>.
            </summary>
            <returns>
               A <strong>TdIntervalHour</strong> interval.
            </returns>
            <remarks>
               <strong>TimeSpan</strong> fractional seconds, seconds and minutes will be truncated 
               during conversion into a <strong>TdIntervalHour</strong> interval.
            </remarks>
            <exception cref="T:System.OverflowException">
               The resultant operation returns a value greater than the <see cref="F:Teradata.Client.Provider.TdIntervalHour.MaxValue"/> 
               or less than the <see cref="F:Teradata.Client.Provider.TdIntervalHour.MinValue"/>.
            </exception>
            <param name="value">A <strong>TimeSpan</strong>.</param>
        </member>
        <member name="M:Teradata.Client.Provider.TdIntervalHour.op_Explicit(Teradata.Client.Provider.TdIntervalHour)~System.TimeSpan">
            <summary>
               Converts a <see cref="T:Teradata.Client.Provider.TdIntervalHour"/> to a <see cref="T:System.TimeSpan"/>.
            </summary>
            <returns>
               A <strong>TimeSpan</strong>.
            </returns>
            <remarks>
               The <strong>TimeSpan</strong> time components are represented in 24 hour format.
            </remarks>
            <exception cref="T:System.ArgumentNullException">
               The <strong>TdIntervalHour</strong> value is <see cref="F:Teradata.Client.Provider.TdIntervalHour.Null"/>.
            </exception>
            <param name="value">A <strong>TdIntervalHour</strong> interval.</param>
        </member>
        <member name="M:Teradata.Client.Provider.TdIntervalHour.op_Explicit(System.Int32)~Teradata.Client.Provider.TdIntervalHour">
            <summary>
                Converts an <c>Int32</c> to <see cref="T:Teradata.Client.Provider.TdIntervalHour"/>.
            </summary>
            <returns>A <strong>TdIntervalHour</strong>.</returns>
            <remarks>
               The conversion may produce exceptions due to exceeding <see cref="F:Teradata.Client.Provider.TdIntervalHour.MinValue"/>
               or <see cref="F:Teradata.Client.Provider.TdIntervalHour.MaxValue"/>.
            </remarks>
            <exception cref="T:System.OverflowException">
               The resultant conversion returns a value greater than the <see cref="F:Teradata.Client.Provider.TdIntervalHour.MaxValue"/> 
               or less than the <see cref="F:Teradata.Client.Provider.TdIntervalHour.MinValue"/>.
            </exception>
            <param name="value">An Int32 representing a <strong>TdIntervalHour</strong> interval.</param>
        </member>
        <member name="M:Teradata.Client.Provider.TdIntervalHour.op_Explicit(Teradata.Client.Provider.TdIntervalHour)~System.Int32">
            <summary>
                Converts a <see cref="T:Teradata.Client.Provider.TdIntervalHour"/> implictly to an Int32 representing an hour interval.
            </summary>
            <returns>
               <strong>TdIntervalHour</strong> converted to an Int32 representing an hour interval.
            </returns>
            <exception cref="T:System.ArgumentNullException">
               The <strong>TdIntervalHour</strong> value is <see cref="F:Teradata.Client.Provider.TdIntervalHour.Null"/>.
            </exception>
            <param name="value">A <strong>TdIntervalHour</strong> interval.</param>
        </member>
        <member name="M:Teradata.Client.Provider.TdIntervalHour.op_Implicit(Teradata.Client.Provider.TdIntervalHour)~Teradata.Client.Provider.TdIntervalHourToSecond">
            <summary>
               Converts a <see cref="T:Teradata.Client.Provider.TdIntervalHour"/> to <see cref="T:Teradata.Client.Provider.TdIntervalHourToSecond"/>.
            </summary>
            <remarks>
            <para>
               The <see cref="P:Teradata.Client.Provider.TdIntervalHourToSecond.Precision"/> is calculated from the number of 
               digits contained within the interval hour component and the  
               <see cref="P:Teradata.Client.Provider.TdIntervalHourToSecond.Scale"/> is set to zero.
            </para>
            </remarks>
            <param name="value">A <strong>TdIntervalHour</strong> interval.</param>
            <returns>A <strong>TdIntervalHourToSecond</strong>.</returns>
        </member>
        <member name="M:Teradata.Client.Provider.TdIntervalHour.op_Explicit(Teradata.Client.Provider.TdIntervalHour)~Teradata.Client.Provider.TdIntervalDayToHour">
            <summary>
                Converts a <see cref="T:Teradata.Client.Provider.TdIntervalHour"/> to <see cref="T:Teradata.Client.Provider.TdIntervalDayToHour"/>.
            </summary>
            <exception cref="T:System.OverflowException">
               The resultant conversion returns a value greater than the <see cref="F:Teradata.Client.Provider.TdIntervalHour.MaxValue"/> 
               or less than the <see cref="F:Teradata.Client.Provider.TdIntervalHour.MinValue"/>.
            </exception>
            <param name="value">A <strong>TdIntervalHour</strong> interval.</param>
            <returns>A <strong>TdIntervalDayToHour</strong>.</returns>
        </member>
        <member name="M:Teradata.Client.Provider.TdIntervalHour.op_Implicit(Teradata.Client.Provider.TdIntervalHour)~Teradata.Client.Provider.TdIntervalHourToMinute">
            <summary>
               Converts a <see cref="T:Teradata.Client.Provider.TdIntervalHour"/> to <see cref="T:Teradata.Client.Provider.TdIntervalHourToMinute"/>.
            </summary>
            <param name="value">A <strong>TdIntervalHour</strong> interval.</param>
            <returns>A <strong>TdIntervalHourToMinute</strong>.</returns>
        </member>
        <member name="M:Teradata.Client.Provider.TdIntervalHour.op_Implicit(Teradata.Client.Provider.TdIntervalHour)~Teradata.Client.Provider.TdIntervalDayToSecond">
            <summary>
               Converts a <see cref="T:Teradata.Client.Provider.TdIntervalHour"/> to <see cref="T:Teradata.Client.Provider.TdIntervalDayToSecond"/>.
            </summary>
            <remarks>
            <para>
               The <see cref="P:Teradata.Client.Provider.TdIntervalDayToSecond.Precision"/> is set 1 (value = 0) since 
               <paramref name="value"/> does not contain the days interval component and the 
               <see cref="P:Teradata.Client.Provider.TdIntervalDayToSecond.Scale"/> is set to zero, since the 
               <strong>value</strong> does not contain the seconds interval component.
            </para>
            </remarks>
            <param name="value">A <strong>TdIntervalHour</strong> interval.</param>
            <returns>A <strong>TdIntervalDayToSecond</strong>.</returns>
        </member>
        <member name="M:Teradata.Client.Provider.TdIntervalHour.op_Implicit(Teradata.Client.Provider.TdIntervalHour)~Teradata.Client.Provider.TdIntervalDayToMinute">
            <summary>
               Converts a <see cref="T:Teradata.Client.Provider.TdIntervalHour"/> to <see cref="T:Teradata.Client.Provider.TdIntervalDayToMinute"/>.
            </summary>
            <param name="value">A <strong>TdIntervalHour</strong> interval.</param>
            <returns>A <strong>TdIntervalDayToMinute</strong>.</returns>
        </member>
        <member name="P:Teradata.Client.Provider.TdIntervalHour.IsNull">
            <summary>
               Indicates whether this <see cref="T:Teradata.Client.Provider.TdIntervalHour"/> instance is <see cref="F:Teradata.Client.Provider.TdIntervalHour.Null"/>. 
            </summary>
            <value>
               <c>true</c> if this <strong>TdIntervalHour</strong> is <strong>Null</strong>; 
               <c>false</c> otherwise.
            </value>
        </member>
        <member name="P:Teradata.Client.Provider.TdIntervalHour.Hours">
            <summary>
               The number of interval hours is returned. The return value ranges from -9999 to 9999.
            </summary>
            <remarks>
            <para>
               A <see cref="T:Teradata.Client.Provider.TdIntervalHour"/> is represented as [-][hours].  
               The minus sign is optional and represents a negative interval of time. The value of the 
               Hours property is the hours component.
            </para>
            </remarks>
            <exception cref="T:Teradata.Client.Provider.TdException">
               This property is not available when this instance is <see cref="F:Teradata.Client.Provider.TdIntervalHour.Null"/>.
            </exception>
        </member>
        <member name="P:Teradata.Client.Provider.TdIntervalHour.Precision">
            <summary>
               The number of significant digits in the hour is returned. The return value
               ranges from 1 to 4.
            </summary>
            <exception cref="T:Teradata.Client.Provider.TdException">
               This property is not available when this instance is <see cref="F:Teradata.Client.Provider.TdIntervalHour.Null"/>.
            </exception>
        </member>
        <member name="P:Teradata.Client.Provider.TdIntervalHour.Value">
            <summary>
               Gets the .NET data type representation of <see cref="T:Teradata.Client.Provider.TdIntervalHour"/> 
               as a <see cref="T:System.TimeSpan"/>.
            </summary>
            <remarks>
               This property in concept parallels <see cref="M:Teradata.Client.Provider.TdDataReader.GetValue(System.Int32)"/> and
               <see cref="P:Teradata.Client.Provider.TdParameter.Value"/>. That is they all represent the .NET Framework 
               Class Library(FCL) primitive data type that correspond to the Teradata 
               Interval Hour data type.
            </remarks>
            <value>The interval represented as a <strong>TimeSpan</strong> is returned.</value>
            <exception cref="T:Teradata.Client.Provider.TdException">
               This property is not available when this instance is <see cref="F:Teradata.Client.Provider.TdIntervalHour.Null"/>.
            </exception>
        </member>
        <member name="P:Teradata.Client.Provider.TdIntervalHour.InternalTimespan">
            <summary>
               Return the internal TimeSpan representing the interval.
            </summary>
            <remarks>
               The internal timespan is used in calculating arithmetic operations and in storing
               day-time intervals.
            </remarks>
        </member>
        <member name="P:Teradata.Client.Provider.TdIntervalHour.ObjectId">
            <summary>
               Gets the instance object identifier.
            </summary>
        </member>
        <member name="P:Teradata.Client.Provider.TdIntervalHour.IsNegative">
            <summary>
               Indicate if the interval is negative.
            </summary>
            <remarks>
               Timespan.ticks will indicate a negative interval.  Other values (days, hours, minutes, 
                milliseconds) may be 0 and the interval may still be negative.
            </remarks>
        </member>
        <member name="P:Teradata.Client.Provider.TdIntervalHour.InternalAccessor">
            <summary>
               Accessor to the internal storage for this interval.
            </summary>
        </member>
        <member name="T:Teradata.Client.Provider.TdIntervalHourToMinute">
            <summary>
            	<see cref="T:Teradata.Client.Provider.TdIntervalHourToMinute"/> represents an interval of time defining a duration in hours
                and minutes. The hour precision is configurable.
            </summary>
            <remarks>
            	<para>
                    <strong>TdIntervalHourToMinute</strong> is a .NET Data Provider for Teradata
                    specific type, designed to support a Teradata Database Interval Hour To Minute data
                    type.
                </para>
            	<para>
                    The <strong>TdIntervalHourToMinute</strong> supports the Teradata Interval Hour 
                    (precision) To Minute data type where precision indicates the number of digits in 
                    the hours (from 1 - 4).
                </para>
                <para>
                    The interval value must be specified in the following format :
                </para>
            	<para>[sign][hours]:[mm].</para>
            	<para>Below is the description of each format item.</para>
            	<para>
            		<list type="table">
            			<listheader>
            				<term>Format Item</term>
            				<description>Description</description>
            			</listheader>
            			<item>
            				<term>sign</term>
            				<description>Optional - . Defaults as space character (+).</description>
            			</item>
            			<item>
            				<term>hours</term>
            				<description>Required number of hours from 0 - 9999.</description>
            			</item>
            			<item>
            				<term>mm</term>
            				<description>Required number of minutes from 00 - 59.</description>
            			</item>
            		</list>
            	</para>
            	<para>
                    The .Net Framework does not have a system type that directly corresponds to
                    the Teradata Database Interval Hour To Minute data type. The .NET Data Provider for 
                    Teradata Version 13.0 version and prior versions map Interval Hour To Minute to  
                    System.String. With version 13.1 of the provider, 
                    <strong>TdIntervalHourToMinute</strong> is available to retrieve and manipulate
                    data of type Interval Hour To Minute.
                </para>
            	<para>
                    The range of values for the <strong>TdIntervalHourToMinute</strong> with hour
                    precision values of 1 - 4 is as follows:
                </para>
            	<para>
            		<table class="xmldoctable" cellspacing="0">
            			<tbody>
            				<tr>
            					<th>Type and Precision</th>
            					<th>
            						<para>Minimum</para>
            					</th>
            					<th>
            						<para>Maximum</para>
            					</th>
            				</tr>
            				<tr>
            					<td class="xmldoctable">TdIntervalHourToMinute(1)</td>
            					<td class="xmldoctable">
            						<para>-'9:59'</para>
            					</td>
            					<td>'9:59'</td>
            				</tr>
            				<tr>
            					<td class="xmldoctable">TdIntervalHourToMinute(2)</td>
            					<td class="xmldoctable">
            						<para>-'99:59'</para>
            					</td>
            					<td>'99:59:'</td>
            				</tr>
            				<tr>
            					<td class="xmldoctable">TdIntervalHourToMinute(3)</td>
            					<td class="xmldoctable">
            						<para>-'999:59'</para>
            					</td>
            					<td>'999:59'</td>
            				</tr>
            				<tr>
            					<td class="xmldoctable">TdIntervalHourToMinute(4)</td>
            					<td class="xmldoctable">
            						<para>-'9999:59'</para>
            					</td>
            					<td>'9999:59'</td>
            				</tr>
            			</tbody>
            		</table>
            	</para>
                <para>
                    <strong>TdIntervalHourToMinute</strong> also supports 
                    <see cref="F:Teradata.Client.Provider.TdIntervalHourToMinute.Null"/>. This is a very important feature.
                    An application is no longer required to call
                    <see cref="M:Teradata.Client.Provider.TdDataReader.IsDBNull(System.Int32)"/> before invoking the corresponding 
                    TdDataReader "Get" method.  This will improve overall performance.
                </para>
                <para>
                    A <strong>TdIntervalHourToMinute</strong> structure allows arithmetic,
                    comparision and conversion operations to be performed. 
                </para>
            	<para>
                    A <strong>TdIntervalHourToMinute</strong> may also be specified as an in, out, 
                    or in/out parameter to a stored procedure. In order to maintain backward  
                    compatibility with previous versions of the provider (release 13.0 and prior), 
                    a Connection String Attribute
                    <see cref="P:Teradata.Client.Provider.TdConnectionStringBuilder.EnableTdIntervals">EnableTdIntervals</see>
                    has been added. When the <strong>EnableTdIntervals</strong> attribute
                    is <c>true</c>, <see cref="P:Teradata.Client.Provider.TdParameter.ProviderSpecificValue"/> will
                    return the data as the provider specific type of <strong>TdIntervalHourToMinute</strong>.
                    When <strong>EnableTdIntervals</strong> is <c>false</c>, 
                    <strong>TdParameter.ProviderSpecificValue</strong> will return the data as a
                    .NET Framework Library data type of <see cref="T:System.String"/>.
                </para>
            	<para>
                    The <see cref="P:Teradata.Client.Provider.TdParameter.Value"/> will also return the .NET Framework Library
                    data type of <strong>System.String</strong> when <strong>EnableTdIntervals</strong>
                    is <c>false</c> to maintain backward compatibility. 
                    The <strong>TdParameter.Value</strong> will return a .NET Framework data type of
                    <see cref="T:System.TimeSpan"/> when <strong>EnableTdIntervals</strong>
                    is <c>true</c>.
                </para>
            	<para>
                   For more information on the Teradata Interval Hour To Minute data type please
                   see the Teradata Database SQL Reference - 'Data Types and Literals'.
                </para>
            </remarks>
            <example>
            	<para>
                   The following example shows how to retrieve a <strong>TdIntervalHourToMinute</strong>,
                   modify the interval, and then update the table.
               </para>
            	<code lang="CS">
            Public void IntervalExample(TdCommand cmd, String client)
            {
               cmd.Parameters.Clear();
               
               cmd.CommandText = "SELECT StartDate, AppointmentStart, DelayPeriod " +
                                 "FROM Appointments " +
                                 "WHERE Client = ?";
             
               cmd.CommandType = CommandType.Text;
             
               cmd.Parameters.Add(null, TdType.VarChar, 10,
                    ParameterDirection.Input, true, 0, 0, null,    
                    DataRowVersion.Default, client);
             
               Int32 row = 0;
               TdDate [] startDate;
               TdTimestamp [] appointmentStart;
               TdIntervalHourToMinute [] appointmentLength;
               
               using (TdDataReader dr = cmd.ExecuteReader())
               {
                  startDate = new TdDate[dr.RecordsReturned];
                  appointmentStart = new TdTimestamp[dr.RecordsReturned];
                  appointmentLength = new TdIntervalHourToMinute [dr.RecordsReturned];
             
                  // Specifying an interval of 1 hour, 30 minutes with an hour precision of 2
                  TdIntervalHourToMinute AppointmentExtension = new TdIntervalHourToMinute(1, 30, 2);
               
                  while (dr.Read())
                  {
                     // Retrieving the dates
                     startDate[row] = dr.GetTdDate(0);
                     appointmentStart[row] = dr.GetTimestamp(1);
                     appointmentLength[row] = dr.GetTdIntervalHourToMinute(2);
             
                     // Adding extension to the lease return
                     appointmentStart[row] = appointmentStart[row] + AppointmentExtension;
             
                     // Adding extension to the lease length;
                     appointmentLength[row] = appointmentLength[row] + AppointmentExtension;
             
                     row++;
                  } 
               }
             
               cmd.Parameters.Clear();
             
               cmd.CommandText = "UPDATE Appointments " +
                                 "SET AppointmentStart = ?, DelayPeriod = ? " +
                                 "WHERE Client = ?";
             
               cmd.Parameters.Add(null, TdType.Timestamp, 0,
                     ParameterDirection.Input, true, 0, 0, null,    
                     DataRowVersion.Default, null);
             
               cmd.Parameters.Add(null, TdType.IntervalHourToMinute, 0,
                     ParameterDirection.Input, true, 0, 0, null,    
                     DataRowVersion.Default, null);
             
               cmd.Parameters.Add(null, TdType.VarChar, 9,
                     ParameterDirection.Input, true, 0, 0, null,    
                     DataRowVersion.Default, model);
             
               row--;
               while(row &gt;= 0)
               {
                  cmd.Parameters[0].Value = appointmentStart[row];
                  cmd.Parameters[1].Value = appointmentLength[row];
                  cmd.Parameters[2].Value = model;
             
                  cmd.ExecuteNonQuery();
                  row--;
               }
            }
            </code>
            </example>
            <seealso cref="P:Teradata.Client.Provider.TdConnectionStringBuilder.EnableTdIntervals"/> 
            <seealso cref="!:IntervalConnectionString.html">Interval Connection String Attribute</seealso>
            <seealso cref="!:EnableProviderSpecificTypes.html">Enabling Provider Specific Types</seealso>
            <seealso cref="!:IntervalTypeOverview.html">Provider Specific Type:  Interval Type Overview</seealso>
        </member>
        <member name="F:Teradata.Client.Provider.TdIntervalHourToMinute.MaxPrecision">
            <summary>
               A constant representing the maximum number of significant digits in the 
               <see cref="P:Teradata.Client.Provider.TdIntervalHourToMinute.Hours"/> interval component.
            </summary>
            <remarks>
               The value of this constant is 4.
            </remarks>
        </member>
        <member name="F:Teradata.Client.Provider.TdIntervalHourToMinute.MinPrecision">
            <summary>
               A constant representing the minimum number of significant digits in the 
               <see cref="P:Teradata.Client.Provider.TdIntervalHourToMinute.Hours"/> interval component.
            </summary>
            <remarks>
               The value of this constant is 1.
            </remarks>
        </member>
        <member name="F:Teradata.Client.Provider.TdIntervalHourToMinute.Null">
            <summary>
               Gets a Null <see cref="T:Teradata.Client.Provider.TdIntervalHourToMinute"/> instance.
            </summary>
            <value>
               Returns a <strong>TdIntervalHourToMinute</strong> instance that represents a 
               <strong>Null</strong> value.
            </value>
            <remarks>
               Conceptually it is the constructor for a <strong>Null</strong> instance of 
               <strong>TdIntervalHourToMinute</strong>.
            </remarks>
            <example>
            This example shows how to send a <strong>Null</strong> value to a Teradata database.
            <code>
            TdParameter col1 = new TdParameter();
            col1.TdType = TdType.TdIntervalHourToMinute;
            col1.Value = TdIntervalHourToMinute.Null;
            </code>
            </example>
        </member>
        <member name="F:Teradata.Client.Provider.TdIntervalHourToMinute.Zero">
            <summary>
               Gets an <see cref="T:Teradata.Client.Provider.TdIntervalHourToMinute"/> instance that contains all zero elements
               for each interval field.
            </summary>
            <remarks>
               A Zero <Strong>TdIntervalHourToMinute</Strong> may be used to determine whether
               other instances of intervals represent postive, negative or non-zero intervals.
            </remarks>
            <example>
            This example shows how to determine if an interval is negative.
            <code>
            TdIntervalHourToMinute htmInterval = new TdIntervalHourToMinute(0, -1);
            if (htmInterval &lt; TdIntervalHourToMinute.Zero)
            {
               Console.WriteLine("The Interval is negative");
            }
            // The output of the console is "The interval is negative"
            </code>
            </example>
        </member>
        <member name="F:Teradata.Client.Provider.TdIntervalHourToMinute.MinValue">
            <summary>
               The smallest possible value for <see cref="T:Teradata.Client.Provider.TdIntervalHourToMinute"/>.
            </summary>
            <remarks>
               The value is -'9999:59'.
            </remarks>
        </member>
        <member name="F:Teradata.Client.Provider.TdIntervalHourToMinute.MaxValue">
            <summary>
               The largest possible value for <see cref="T:Teradata.Client.Provider.TdIntervalHourToMinute"/>.
            </summary>
            <remarks>
               The value is '9999:59'.
            </remarks>
        </member>
        <member name="M:Teradata.Client.Provider.TdIntervalHourToMinute.#ctor(System.Int32,System.Int32,System.Byte)">
            <summary>
               An instance of <see cref="T:Teradata.Client.Provider.TdIntervalHourToMinute"/> is created from time components 
               specified as integers while precision is specified as a byte.
            </summary>
            <remarks>
            <para>
               The number of hours and minutes are constructed into a
               <strong>TdIntervalHourToMinute</strong> to determine if the <see cref="F:Teradata.Client.Provider.TdIntervalHourToMinute.MinValue"/>
               or the <see cref="F:Teradata.Client.Provider.TdIntervalHourToMinute.MaxValue"/> values are exceeded.  If the values are not exceeded
               but the resulting hours component exceeds the supplied <paramref name="precision"/>
               value, an exception is generated.
            </para>
            <para>
               For example a constructor for TdIntervalHourToMinute(444, 4, 2) requests
               444 hours and 4 hours with a precision of 2. The resulting hours value 
               cannot be represented in 2 digits, therefore an exception is generated,
               even though the <strong>MinValue</strong> and the
               <strong>MaxValue</strong> values have not been exceeded.
            </para>
            <para>
               Negative constructor parameters may be supplied to represent negative durations of time.
               Mixed positive and negative constructor parameters are added together that result in a
               negative or positive <strong>TdIntervalHourToMinute</strong>.  For instance, an hour
               value of 20 and a minute value of -4900 will result in a 
               <strong>TdIntervalHourToMinute</strong> interval value of -'61:40'.
            </para>
            </remarks>
            <exception cref="T:System.OverflowException" caption="OverflowException">
               The parameters specify a <strong>TdIntervalHourToMinute</strong> value less than 
               <see cref="F:Teradata.Client.Provider.TdIntervalHourToMinute.MinValue"/> or greater than <see cref="F:Teradata.Client.Provider.TdIntervalHourToMinute.MaxValue"/>.
            </exception>
            <exception cref="T:System.ArgumentOutOfRangeException" caption="ArgumentOutOfRangeException">
               The <strong>precision</strong> parameter is outside the <see cref="F:Teradata.Client.Provider.TdIntervalHourToMinute.MinPrecision"/> 
               or <see cref="F:Teradata.Client.Provider.TdIntervalHourToMinute.MaxPrecision"/> range of values.
            </exception>
            <exception cref="T:System.ArgumentException" caption="ArgumentException">
               The <strong>precision</strong> parameter is not large enough to represent the 
               number of hours.
            </exception>
            <overloads>
               Initializes a new instance of <strong>TdIntervalHourToMinute</strong>.
            </overloads>
            <param name="hours">Number of hours.</param>
            <param name="minutes">Number of minutes.</param>
            <param name="precision">Number of significant digits of the hour.</param>
        </member>
        <member name="M:Teradata.Client.Provider.TdIntervalHourToMinute.#ctor(System.Int32,System.Int32)">
            <summary>
               An instance of <see cref="T:Teradata.Client.Provider.TdIntervalHourToMinute"/> is created from time components
               specified as integers.
            </summary>
            <remarks>
            <para>
               The number of hours and minutes are constructed into a 
               <strong>TdIntervalHourToMinute</strong> and evaluated against <see cref="F:Teradata.Client.Provider.TdIntervalHourToMinute.MinValue"/> 
               and <see cref="F:Teradata.Client.Provider.TdIntervalHourToMinute.MaxValue"/>.  The <see cref="P:Teradata.Client.Provider.TdIntervalHourToMinute.Precision"/> is then calculated from the 
               number of digits contained within the interval hour component.
            </para>
            <para>
               For example, 28 hours and 75 minutes is first constructed into a 
               <strong>TdIntervalHourToMinute</strong>. The <strong>TdIntervalHourToMinute</strong>
               literal representation results in a <strong>TdIntervalHourToMinute</strong> value
               of 29 hours and 15 minutes within the range of less than or equal to 
               <strong>MaxValue</strong> and greater than or equal to the <strong>MinValue</strong>. 
               Precision is calculated to be a value of 2 representing two significant digits in the hour.
            </para>
            <para>
               An hour value of 7000 and 200000 minutes is first converted into a
               <strong>TdIntervalHourToMinute</strong>. The <strong>TdIntervalHourToMinute</strong> 
               literal representation results in a <strong>TdIntervalHourToMinute</strong> value of 
               10,333 hours and 20 minutes exceeding the maximum value of '9999 59'.
            </para>
            <para>
               Negative constructor parameters may be supplied to represent negative durations of time.
               Mixed positive and negative constructor parameters are added together that result in a
               negative or positive <strong>TdIntervalHourToMinute</strong>.  For instance, an hour
               value of 20 and a minute value of -4900 will result in a 
               <strong>TdIntervalHourToMinute</strong> interval value of -'61:40' with
               a calculated precision value of 2.
            </para>
            </remarks>
            <exception cref="T:System.OverflowException" caption="OverflowException">
               The parameters specify a <strong>TdIntervalHourToMinute</strong> value less than 
               <see cref="F:Teradata.Client.Provider.TdIntervalHourToMinute.MinValue"/> or greater than <see cref="F:Teradata.Client.Provider.TdIntervalHourToMinute.MaxValue"/>.
            </exception>
            <param name="hours">Number of hours.</param>
            <param name="minutes">Number of minutes.</param>
        </member>
        <member name="M:Teradata.Client.Provider.TdIntervalHourToMinute.#ctor(System.TimeSpan)">
            <summary>
               Construct an instance of <see cref="T:Teradata.Client.Provider.TdIntervalHourToMinute"/> using a TimeSpan.
            </summary>
            <remarks>
            <para>
               The  <see cref="T:System.TimeSpan"/> value is converted into a <strong>TdIntervalHourToMinute</strong>
               and evaluated against <see cref="F:Teradata.Client.Provider.TdIntervalHourToMinute.MinValue"/> and <see cref="F:Teradata.Client.Provider.TdIntervalHourToMinute.MaxValue"/>.  The 
               <see cref="P:Teradata.Client.Provider.TdIntervalHourToMinute.Precision"/> is then calculated from the number of digits contained within 
               the interval hour component.
            </para>
            <para>
               After conversion of the <strong>TimeSpan</strong> value into a
               <strong>TdIntervalHourToMinute</strong>, any seconds or microseconds will be truncated.
               For example, a TimeSpan value created with a <see cref="P:System.TimeSpan.Ticks"/> value
               of 60201234567 results in a value of 0 days, 1 hours, 40 minutes and 
               20.1234567 seconds.  The <strong>TdIntervalHourToMinute</strong> literal 
               representation results in a <strong>TdIntervalHourToMinute</strong> value of  
               '1:40'. The 20.1234567 seconds value is truncated. 
               Precision is calculated to be a value of 1 representing one significant digit in the hour.
            </para>
            </remarks>
            <exception cref="T:System.OverflowException" caption="OverflowException">
               The <strong>timespan</strong> parameter specifies a 
               <strong>TdIntervalHourToMinute</strong> value less than <see cref="F:Teradata.Client.Provider.TdIntervalHourToMinute.MinValue"/> 
               or greater than <see cref="F:Teradata.Client.Provider.TdIntervalHourToMinute.MaxValue"/>.
            </exception>
            <param name="timeSpan">A TimeSpan to initialize <strong>TdIntervalHourToMinute</strong>.</param>
        </member>
        <member name="M:Teradata.Client.Provider.TdIntervalHourToMinute.#ctor(System.TimeSpan,System.Byte)">
            <summary>
               Construct an instance of <see cref="T:Teradata.Client.Provider.TdIntervalHourToMinute"/> using a TimeSpan and  
               specifying the hour precision as a byte.
            </summary>
            <remarks>
            <para>
               The  <see cref="T:System.TimeSpan"/> value is converted into a <strong>TdIntervalHourToMinute</strong>
               and evaluated against <see cref="F:Teradata.Client.Provider.TdIntervalHourToMinute.MinValue"/> and <see cref="F:Teradata.Client.Provider.TdIntervalHourToMinute.MaxValue"/>.  If the values 
               are not exceeded but the resulting hours component exceeds the supplied parameter
                <paramref name="precision"/> value, an exception is generated.
            </para>
            <para>
               After conversion of the <strong>TimeSpan</strong> value into a
               <strong>TdIntervalHourToMinute</strong>, any seconds or microseconds will be truncated.
               For example, a TimeSpan value created with a <see cref="P:System.TimeSpan.Ticks"/> value
               of 60201234567 results in a value of 0 days, 1 hours, 40 minutes and 
               20.1234567 seconds.  The <strong>TdIntervalHourToMinute</strong> literal 
               representation results in a <strong>TdIntervalHourToMinute</strong> value of  
               '1:40'. The 20.1234567 seconds value is truncated. 
            </para>
            </remarks>
            <exception cref="T:System.OverflowException" caption="OverflowException">
               The <strong>timespan</strong> parameter specifies a 
               <strong>TdIntervalHourToMinute</strong> value less than <see cref="F:Teradata.Client.Provider.TdIntervalHourToMinute.MinValue"/> 
               or greater than <see cref="F:Teradata.Client.Provider.TdIntervalHourToMinute.MaxValue"/>.
            </exception>
            <exception cref="T:System.ArgumentOutOfRangeException" caption="ArgumentOutOfRangeException">
               The <strong>precision</strong> parameter is outside the <see cref="F:Teradata.Client.Provider.TdIntervalHourToMinute.MinPrecision"/> 
               or <see cref="F:Teradata.Client.Provider.TdIntervalHourToMinute.MaxPrecision"/> range of values.
            </exception>
            <exception cref="T:System.ArgumentException" caption="ArgumentException">
               The <strong>precision</strong> parameter is not large enough to represent the 
               number of hours.
            </exception>
            <param name="timeSpan">A TimeSpan to initialize <strong>TdIntervalHourToMinute</strong>.</param>
            <param name="precision">Number of significant digits of the hour.</param>
        </member>
        <member name="M:Teradata.Client.Provider.TdIntervalHourToMinute.CompareTo(Teradata.Client.Provider.TdIntervalHourToMinute)">
            <summary>
               Compares this instance to the specified <see cref="T:Teradata.Client.Provider.TdIntervalHourToMinute"/>  
               parameter <paramref name="other"/>.
            </summary>
            <returns>
               The result of the comparison is returned as a signed integer.
            </returns>
            <remarks>
            	<para>
                    The integer returned when this instance is compared to <paramref name="other"/>
                    indicates the following:
                </para>
            	<para>
            		<list type="table">
            			<listheader>
            				<term>Return Value</term>
            				<description>Meaning</description>
            			</listheader>
            			<item>
            				<term>Less than Zero</term>
            				<description>
            					<para>
                                    This instance is less than <paramref name="other"/>
                                </para>
            					<para>-or-</para>
            					<para>This instance is <see cref="F:Teradata.Client.Provider.TdIntervalHourToMinute.Null"/> and
                                   <paramref name="other"/> is non-null.
                               </para>
            				</description>
            			</item>
            			<item>
            				<term>Zero</term>
            				<description>
            					<para>
                                    This instance is equal to <paramref name="other"/>
                                </para>
            					<para>-or-</para>
            					<para>
                                   This instance is <Strong>Null</Strong> and <paramref name="other"/>
                                    is <Strong>Null</Strong>.
                               </para>
            				</description>
            			</item>
            			<item>
            				<term>Greater than Zero</term>
            				<description>
            					<para>
                                    This instance is greater than <paramref name="other"/>
                                </para>
            					<para>-or-</para>
            					<para>
            						<paramref name="other"/> is <Strong>Null</Strong> and this instance is non-null.
                                </para>
            				</description>
            			</item>
            		</list>
            	</para>
            </remarks>
            <param name="other">The <strong>TdIntervalHourToMinute</strong> to compare.</param>
        </member>
        <member name="M:Teradata.Client.Provider.TdIntervalHourToMinute.CompareTo(System.Object)">
            <summary>
               Compares this instance to the specified <see cref="T:Teradata.Client.Provider.TdIntervalHourToMinute"/> 
               <paramref name="obj"/>. 
            </summary>
            <returns>
               The result of the comparison is returned as a signed integer.
            </returns>
            <remarks>
            	<para>
                    The integer returned when this instance is compared to <paramref name="obj"/>
                    indicates the following:
                </para>
            	<para>
            		<list type="table">
            			<listheader>
            				<term>Return Value</term>
            				<description>Meaning</description>
            			</listheader>
            			<item>
            				<term>Less than Zero</term>
            				<description>
            					<para>This instance is less than <paramref name="obj"/></para>
            					<para>-or-</para>
            					<para>
                                   This instance is <see cref="F:Teradata.Client.Provider.TdIntervalHourToMinute.Null"/> and <paramref name="obj"/> is non-null.
                               </para>
            				</description>
            			</item>
            			<item>
            				<term>Zero</term>
            				<description>
            					<para>
                                    This instance is equal to <paramref name="obj"/>
                                </para>
            					<para>-or-</para>
            					<para>
                                   This instance is <Strong>Null</Strong> and <paramref name="obj"/> is
                                   <Strong>Null</Strong>.
                                </para>
            				</description>
            			</item>
            			<item>
            				<term>Greater than Zero</term>
            				<description>
            					<para>
                                    This instance is greater than <paramref name="obj"/>.
                                </para>
            					<para>-or-</para>
            					<para>
            						<paramref name="obj"/> is <Strong>Null</Strong> and this instance is non-null
                                </para>
            					<para>-or-</para>
            					<para>
            						<paramref name="obj"/> is a <c>null</c> reference.
                                </para>
            				</description>
            			</item>
            		</list>
            	</para>
               <para>
                   <paramref name="obj"/> must be an instance of 
                   <strong>TdIntervalHourToMinute</strong> type or <c>null</c> reference.
                </para>
            </remarks>
            <exception cref="T:System.ArgumentException">
               <paramref name="obj"/> is not of same type as <strong>TdIntervalHourToMinute</strong>.
            </exception>
            <seealso cref="M:Teradata.Client.Provider.TdIntervalHourToMinute.CompareTo(Teradata.Client.Provider.TdIntervalHourToMinute)"/>
            <overloads>
               Compares this instance to the supplied <strong>TdIntervalHourToMinute</strong> 
               and returns whether this instance is less than, equal or greater than the supplied 
               <strong>TdIntervalHourToMinute</strong>.
            </overloads>
            <param name="obj">A <strong>TdIntervalHourToMinute</strong> object to compare.</param>
        </member>
        <member name="M:Teradata.Client.Provider.TdIntervalHourToMinute.Equals(Teradata.Client.Provider.TdIntervalHourToMinute)">
            <summary>
               Compares this instance and another <see cref="T:Teradata.Client.Provider.TdIntervalHourToMinute"/> to determine 
               whether they are equal. 
            </summary>
            <returns>
               <c>true</c> if the two <strong>TdIntervalHourToMinute</strong> objects are equal, 
               <c>false</c> otherwise.
            </returns>
            <remarks>
            	<para>
            		The return value is <c>true</c> if the instance is 
                    equal to the <paramref name="other"/>, <c>false</c> otherwise.
                </para>
            	<para>
            		<list type="table">
            			<listheader>
            				<term>Return Value</term>
            				<description>Description</description>
            			</listheader>
            			<item>
            				<term><c>true</c></term>
                            <description>
                                <para>
                                   This instance and <paramref name="other"/> are <see cref="F:Teradata.Client.Provider.TdIntervalHourToMinute.Null"/>
                                </para>
                                <para>-or-</para>
                                <para>This instance is equal to <paramref name="other"/>.</para>
                            </description>
            			</item>
            			<item>
            				<term><c>false</c></term>
                            <description>
                            <para>
                               This instance is <strong>Null</strong> and <paramref name="other"/> 
                               is not <strong>Null</strong>
                            </para>
                            <para>-or-</para>
                            <para>
                               This instance is not <strong>Null</strong> and <paramref name="other"/>
                               is <strong>Null</strong>
                            </para>
                            <para>-or-</para>
                            <para>This instance is not equal to <paramref name="other"/>.</para>
                            </description>
            			</item>
            		</list>
            	</para>
            </remarks>
            <overloads>
               Returns a value indicating whether two instances of 
               <strong>TdIntervalHourToMinute</strong> are equal.
            </overloads>
            <param name="other">
               <strong>TdIntervalHourToMinute</strong> that will be compared to this instance 
               of <strong>TdIntervalHourToMinute</strong>.
            </param>
        </member>
        <member name="M:Teradata.Client.Provider.TdIntervalHourToMinute.Equals(Teradata.Client.Provider.TdIntervalHourToMinute,Teradata.Client.Provider.TdIntervalHourToMinute)">
            <summary>
               Compares two <see cref="T:Teradata.Client.Provider.TdIntervalHourToMinute"/> instances to determine whether they are equal.
            </summary>
            <returns>
               <c>true</c> if the two <strong>TdIntervalHourToMinute</strong> instances are equal, 
               <c>false</c> otherwise.
            </returns>
            <remarks>
            	<para>
            		The return value is <c>true</c> if the <paramref name="left"/> is 
                    equal to the <paramref name="right"/>, <c>false</c> otherwise.
                </para>
            	<para>
            		<list type="table">
            			<listheader>
            				<term>Return Value</term>
            				<description>Description</description>
            			</listheader>
            			<item>
            				<term><c>true</c></term>
                            <description>
                                <para><paramref name="left"/> is equal to <paramref name="right"/></para>
                                <para>-or-</para>
                                <para>
                                   <paramref name="left"/> and <paramref name="right"/> are <see cref="F:Teradata.Client.Provider.TdIntervalHourToMinute.Null"/>.
                                </para>
                            </description>
            			</item>
            			<item>
            				<term><c>false</c></term>
                            <description>
                              <para><paramref name="left"/> is not equal to <paramref name="right"/></para>
                              <para>-or-</para>
                              <para>
                                   <paramref name="left"/> is not <strong>Null</strong> and 
                                   <paramref name="right"/> is <strong>Null</strong>
                               </para>
                              <para>-or-</para>
                              <para>
                                <paramref name="left"/> is <strong>Null</strong> and 
                                <paramref name="right"/> is not <strong>Null</strong>.
                               </para>
                            </description>
            			</item>
            		</list>
            	</para>
            </remarks>
            <example>
                The following code example uses various comparison methods and operators.
                <code lang="CS">
            TdIntervalHourToMinute firstInterval = new TdIntervalHourToMinute(5, 15);
            TdIntervalHourToMinute secondInterval = new TdIntervalHourToMinute(20, 15);
             
            // The following comparison methods and operators are equivalent
            if (false == TdIntervalHourToMinute.Equals(firstInterval, secondInterval) ||
                firstInterval != secondInterval ||
                true == TdIntervalHourToMinute.NotEquals(firstInterval, secondInterval) )
            {
               Console.WriteLine(“firstInterval does not equal secondInterval”);
            }
                </code>
            </example>
            <overloads>
               Returns a value indicating whether two instances of 
               <strong>TdIntervalHourToMinute</strong> are equal.
            </overloads>
            <param name="left">A <strong>TdIntervalHourToMinute</strong> instance.</param>
            <param name="right">A <strong>TdIntervalHourToMinute</strong> instance.</param>
        </member>
        <member name="M:Teradata.Client.Provider.TdIntervalHourToMinute.Compare(Teradata.Client.Provider.TdIntervalHourToMinute,Teradata.Client.Provider.TdIntervalHourToMinute)">
            <summary>
                Two <see cref="T:Teradata.Client.Provider.TdIntervalHourToMinute"/> intervals are compared and a value is 
                returned that indicates <paramref name="left"/> is greater than, less than or equal to 
               <paramref name="right"/>.
            </summary>
            <returns>The result of the comparison is returned as a signed integer.</returns>
            <remarks>
            	<list type="table">
            		<listheader>
            			<term>Return Value</term>
            			<description>Description</description>
            		</listheader>
            		<item>
            			<term>Less than Zero</term>
            			<description>
                           <para><paramref name="left"/> is less than <paramref name="right"/></para>
            				<para>-or-</para>
                           <para>
                              <paramref name="left"/> is <see cref="F:Teradata.Client.Provider.TdIntervalHourToMinute.Null"/>
                              and <paramref name="right"/> is not <strong>Null</strong>.
                           </para>
                        </description>
            		</item>
            		<item>
            			<term>Zero</term>
            			<description>
            				<para><paramref name="left"/> equals <paramref name="right"/></para>
            				<para>-or-</para>
                           <para>
                                <paramref name="left"/> is <strong>Null</strong> 
                                 and <paramref name="right"/> is <strong>Null</strong>.
                           </para>
                        </description>
            		</item>
            		<item>
            			<term>Greater than Zero</term>
            			<description>
            				<para><paramref name="left"/> is greater than <paramref name="right"/></para>
            				<para>-or-</para>
            				<para><paramref name="left"/> is not <strong>Null</strong> and
                            <paramref name="right"/> is <strong>Null</strong>.</para>
                        </description>
            		</item>
            	</list>
            </remarks>
            <param name="left">An instance of <strong>TdIntervalHourToMinute</strong>.</param>
            <param name="right">An instance of <strong>TdIntervalHourToMinute</strong>.</param>
        </member>
        <member name="M:Teradata.Client.Provider.TdIntervalHourToMinute.NotEquals(Teradata.Client.Provider.TdIntervalHourToMinute,Teradata.Client.Provider.TdIntervalHourToMinute)">
            <summary>
                Compares two <see cref="T:Teradata.Client.Provider.TdIntervalHourToMinute"/> interval types to determine 
                whether the <paramref name="left"/> is not equal to<paramref name="right"/>.
            </summary>
            <returns>
            	<para>
            		<c>true</c> indicates <paramref name="left"/> is not equal to
                    <paramref name="right"/>, <c>false</c> otherwise.
                </para>
            	<para>
            		<list type="table">
            			<listheader>
            				<term>Return Value</term>
            				<description>Description</description>
            			</listheader>
            			<item>
            				<term><c>true</c></term>
            				<description>
            					<para>
            						<paramref name="left"/> is less than or greater
                                    than <paramref name="right"/>
            					</para>
            					<para>-or-</para>
            					<para>
            						Either <paramref name="left"/> or <paramref name="right"/> is
                                   <see cref="F:Teradata.Client.Provider.TdIntervalHourToMinute.Null"/>.
                               </para>
            				</description>
            			</item>
            			<item>
            				<term><c>false</c></term>
            				<description>
            					<para>
            						<paramref name="left"/> is equal to
                                    <paramref name="right"/>
            					</para>
            					<para>-or-</para>
            					<para>
            						<paramref name="left"/> and <paramref name="right"/> are
                                   <strong>Null</strong>.
                                </para>
            				</description>
            			</item>
            		</list>
            	</para>
            </returns>
            <param name="left">An instance of <strong>TdIntervalHourToMinute</strong>.</param>
            <param name="right">An instance of <strong>TdIntervalHourToMinute</strong>.</param>
        </member>
        <member name="M:Teradata.Client.Provider.TdIntervalHourToMinute.GreaterThan(Teradata.Client.Provider.TdIntervalHourToMinute,Teradata.Client.Provider.TdIntervalHourToMinute)">
            <summary>
               Determines whether the <paramref name="left"/> is greater than the <paramref name="right"/>.
            </summary>
            <returns>
            	<para>
            		<c>true</c> indicates the <paramref name="left"/> is greater than
                    the <paramref name="right"/>, <c>false</c> otherwise.
                </para>
            	<para>
            		<list type="table">
            			<listheader>
            				<term>Return Value</term>
            				<description>Description</description>
            			</listheader>
            			<item>
            				<term><c>true</c></term>
            				<description>
            					<paramref name="left"/> and
                                <paramref name="right"/> are not
                                <see cref="F:Teradata.Client.Provider.TdIntervalHourToMinute.Null"/> and
                                <paramref name="left"/> is greater than
                                <paramref name="right"/>.
            				</description>
            			</item>
            			<item>
            				<term><c>false</c></term>
            				<description>
            					<para>
                                    The <paramref name="left"/> is less than or equal
                                    to <paramref name="right"/>
            					</para>
            					<para>-or-</para>
            					<para>
                                   <paramref name="left"/> and / or <paramref name="right"/>
                                   is <strong>Null</strong>.
                                </para>
            				</description>
            			</item>
            		</list>
            	</para>
            </returns>
            <remarks>
            	<para>
                    Comparison operators always return <c>false</c> if one of the operands is
                    <strong>Null</strong>. Therefore you should not assume that the reverse
                    condition is <c>true</c>. For example you cannot assume that the
                    <paramref name="left"/> is less than or equal to the
                    <paramref name="right"/> if <c>GreaterThan</c> returns <c>false</c>.
                </para>
            	<para>
                    The reverse condition is <c>true</c> when the
                    <paramref name="left"/> and the
                    <paramref name="right"/> are not <strong>Null</strong>.
                </para>
            </remarks>
            <param name="left">An instance of <see cref="T:Teradata.Client.Provider.TdIntervalHourToMinute"/>.</param>
            <param name="right">An instance of <strong>TdIntervalHourToMinute</strong>.</param>
        </member>
        <member name="M:Teradata.Client.Provider.TdIntervalHourToMinute.GreaterThanOrEqual(Teradata.Client.Provider.TdIntervalHourToMinute,Teradata.Client.Provider.TdIntervalHourToMinute)">
            <summary>
               This operator determines whether the <paramref name="left"/> is greater than or 
               equal to the <paramref name="right"/>.
            </summary>
            <returns>
            	<para>
            		<c>true</c> indicates the <paramref name="left"/> is greater than
                    or equal to the <paramref name="right"/>, <c>false</c> otherwise.
                </para>
            	<para>
            		<list type="table">
            			<listheader>
            				<term>Return Value</term>
            				<description>Description</description>
            			</listheader>
            			<item>
            				<term><c>true</c></term>
            				<description>
            					<para>
            						<paramref name="left"/> and
                                    <paramref name="right"/> are not
                                    <see cref="F:Teradata.Client.Provider.TdIntervalHourToMinute.Null"/> and
                                    <paramref name="left"/> is greater than or equal
                                    to <paramref name="right"/>
            					</para>
            					<para>-or-</para>
            					<para>
            						<paramref name="left"/> is <strong>Null</strong>
                                    and <paramref name="right"/> is
                                    <strong>Null</strong>.
            					</para>
            				</description>
            			</item>
            			<item>
            				<term><c>false</c></term>
            				<description>
            					<para>
                                    The <paramref name="left"/> is less than
                                    <paramref name="right"/>
            					</para>
            					<para>-or-</para>
            					<para>
                                    Either <paramref name="left"/> or
                                    <paramref name="right"/> is <strong>Null</strong>.
            					</para>
            				</description>
            			</item>
            		</list>
            	</para>
            </returns>
            <remarks>
            	<para>
                    Comparison operators always return <c>false</c> if one of the operands is
                    <strong>Null</strong>. Therefore you should not assume that the reverse
                    condition is <c>true</c>. For example you cannot assume that the
                    <paramref name="left"/> is less than the
                    <paramref name="right"/> if the <c>GreaterThanOrEqual</c> method returns
                    <c>false</c>.
                </para>
            	<para>
                    The reverse condition is <c>true</c> when the
                    <paramref name="left"/> and the
                    <paramref name="right"/> are not <strong>Null</strong>.
                </para>
            </remarks>
            <param name="left">An instance of <see cref="T:Teradata.Client.Provider.TdIntervalHourToMinute"/>.</param>
            <param name="right">An instance of <strong>TdIntervalHourToMinute</strong>.</param>
        </member>
        <member name="M:Teradata.Client.Provider.TdIntervalHourToMinute.LessThan(Teradata.Client.Provider.TdIntervalHourToMinute,Teradata.Client.Provider.TdIntervalHourToMinute)">
            <summary>
               This method determines whether the <paramref name="left"/> is less than the 
               <paramref name="right"/>.
            </summary>
            <returns>
            	<para>
            		<c>true</c> indicates the <paramref name="left"/> is less than
                    the <paramref name="right"/>, <c>false</c> otherwise.
                </para>
            	<para>
            		<list type="table">
            			<listheader>
            				<term>Return Value</term>
            				<description>Description</description>
            			</listheader>
            			<item>
            				<term><c>true</c></term>
            				<description>
            					<paramref name="left"/> and <paramref name="right"/> are
                                not <see cref="F:Teradata.Client.Provider.TdIntervalHourToMinute.Null"/> and
                                <paramref name="left"/> is less than
                                <paramref name="right"/>.
            				</description>
            			</item>
            			<item>
            				<term><c>false</c></term>
            				<description>
            					<para>
                                    The <paramref name="left"/> is greater than or
                                    equal to <paramref name="right"/>
            					</para>
            					<para>-or-</para>
            					<para>
                                    <paramref name="left"/> and / or <paramref name="right"/> is
                                    <strong>Null</strong>.
            					</para>
            				</description>
            			</item>
            		</list>
            	</para>
            </returns>
            <remarks>
            	<para>
                    Comparison operators always return <c>false</c> if one of the operands is
                    <strong>Null</strong>. Therefore you should not assume that the reverse
                    condition is <c>true</c>. For example you cannot assume that the
                    <paramref name="left"/> is greater than or equal to the
                    <paramref name="right"/> if the <c>LessThan</c> method returns
                    <c>false</c>.
                </para>
            	<para>
                    The reverse condition is <c>true</c> when the
                    <paramref name="left"/> and the
                    <paramref name="right"/> are not <strong>Null</strong>.
                </para>
            </remarks>
            <param name="left">An instance of <see cref="T:Teradata.Client.Provider.TdIntervalHourToMinute"/>.</param>
            <param name="right">An instance of <strong>TdIntervalHourToMinute</strong>.</param>
        </member>
        <member name="M:Teradata.Client.Provider.TdIntervalHourToMinute.LessThanOrEqual(Teradata.Client.Provider.TdIntervalHourToMinute,Teradata.Client.Provider.TdIntervalHourToMinute)">
            <summary>
                This method determines whether the <paramref name="left"/> is less
                than or equal to the <paramref name="right"/>.
            </summary>
            <returns>
            	<para>
            		<c>true</c> indicates the <paramref name="left"/> is less than or
                    equal to the <paramref name="right"/>, <c>false</c> otherwise.
                </para>
            	<para>
            		<list type="table">
            			<listheader>
            				<term>Return Value</term>
            				<description>Description</description>
            			</listheader>
            			<item>
            				<term><c>true</c></term>
            				<description>
            					<para>
            						<paramref name="left"/> and
                                    <paramref name="right"/> are not
                                    <see cref="F:Teradata.Client.Provider.TdIntervalHourToMinute.Null"/> and
                                    <paramref name="left"/> is less than or equal to
                                    <paramref name="right"/>
            					</para>
            					<para>-or-</para>
            					<para>
            						<paramref name="left"/> is <strong>Null</strong>
                                    and <paramref name="right"/> is
                                    <strong>Null</strong>.
            					</para>
            				</description>
            			</item>
            			<item>
            				<term><c>false</c></term>
            				<description>
            					<para>
                                    The <paramref name="left"/> is greater than
                                    <paramref name="right"/>
            					</para>
            					<para>-or-</para>
            					<para>
                                    Either <paramref name="left"/> or
                                    <paramref name="right"/> is <strong>Null</strong>.
            					</para>
            				</description>
            			</item>
            		</list>
            	</para>
            </returns>
            <remarks>
            	<para>
                    Comparison operators always return <c>false</c> if one of the operands is
                    <strong>Null</strong>. Therefore you should not assume that the reverse
                    condition is <c>true</c>. For example you cannot assume that the
                    <paramref name="left"/> is greater than the
                    <paramref name="right"/> if the <c>LessThanOrEqual</c> method returns
                    <c>false</c>.
                </para>
            	<para>
                    The reverse condition is <c>true</c> when the
                    <paramref name="left"/> and the
                    <paramref name="right"/> are not <strong>Null</strong>.
                </para>
            </remarks>
            <param name="left">An instance of <see cref="T:Teradata.Client.Provider.TdIntervalHourToMinute"/>.</param>
            <param name="right">An instance of <strong>TdIntervalHourToMinute</strong>.</param>
        </member>
        <member name="M:Teradata.Client.Provider.TdIntervalHourToMinute.Equals(System.Object)">
            <summary>
               Compares this instance and <paramref name="obj"/> to determine whether they
               are equal. 
            </summary>
            <returns>
               <c>true</c> if the two <see cref="T:Teradata.Client.Provider.TdIntervalHourToMinute"/>s are equal, 
               <c>false</c> otherwise.
            </returns>
            <remarks>
            	<para>
                    The return value is <c>true</c> if the instance is equal to the
                    <paramref name="obj"/>, <c>false</c> otherwise.
                </para>
            	<para>
            		<list type="table">
            			<listheader>
            				<term>Return Value</term>
            				<description>Description</description>
            			</listheader>
            			<item>
            				<term>
            					<c>true</c>
            				</term>
            				<description>
            					<para>
                                    This instance and <paramref name="obj"/> are
                                    <see cref="F:Teradata.Client.Provider.TdIntervalHourToMinute.Null"/>.
                                </para>
            					<para>-or-</para>
            					<para>
                                    This instance is equal to <paramref name="obj"/>.
                                </para>
            				</description>
            			</item>
            			<item>
            				<term>
            					<c>false</c>
            				</term>
            				<description>
            					<para>
                                    This instance is not equal to
                                    <paramref name="obj"/>.
                                </para>
            					<para>-or-</para>
            					<para>
                                    This instance is not <strong>Null</strong> and
                                    <paramref name="obj"/> is <strong>Null</strong>.
                                </para>
            					<para>-or-</para>
            					<para>
                                    This instance is <strong>Null</strong> and
                                    <paramref name="obj"/> is not <strong>Null</strong>
            					</para>
            					<para>-or-</para>
            					<para>
            						<paramref name="obj"/> is a <strong>null</strong>
                                    reference.
                                </para>
            				</description>
            			</item>
            		</list>
            	</para>
            </remarks>
            <example>
                The following code example uses various comparison methods and operators.
                <code lang="CS">
            // Create TdIntervalHourToMinute with 5 days, 1 hour, 30 minutes and default precision
            TdIntervalHourToMinute firstInterval = new TdIntervalHourToMinute(125, 30);
            // Create TdIntervalHourToMinute with 20 days, 2 hour, 30 minutes and default precision
            Object intervalObj = new TdIntervalHourToMinute(482, 30);
             
            // The following comparison methods and operators are equivalent
            if (false == TdIntervalHourToMinute.Equals(firstInterval, (TdIntervalHourToMinute)intervalObj) ||
                firstInterval != (TdIntervalHourToMinute)intervalObj ||
                false == firstInterval.Equals(intervalObj) )
            {
               Console.WriteLine(“firstInterval does not equal intervalObj”);
            }
                </code>
            </example>
            <overloads>
               Returns a value indicating whether two instances of 
               <strong>TdIntervalHourToMinute</strong> are equal.
            </overloads>
            <param name="obj">
               <strong>TdIntervalHourToMinute</strong> that will be compared to this instance 
               of <strong>TdIntervalHourToMinute</strong>.
            </param>
        </member>
        <member name="M:Teradata.Client.Provider.TdIntervalHourToMinute.GetHashCode">
            <summary>
               Returns the hash code for this instance. 
            </summary>
            <returns>The hash code is returned.</returns>
        </member>
        <member name="M:Teradata.Client.Provider.TdIntervalHourToMinute.ToString(System.String)">
            <summary>
               Converts this instance to its equivalent String representation using the specified format.
            </summary>
            <remarks>
            	<para>This method supports the following format specifiers:</para>
            	<para>
            		<list type="table">
            			<listheader>
            				<term>Format Specifier</term>
            				<description>Description</description>
            			</listheader>
            			<item>
            				<term>G</term>
            				<description>
            					<para>General interval format.</para>
            					<para>[sign][hours]:[mm]</para>
            				</description>
            			</item>
            			<item>
            				<term>L</term>
            				<description>
            					<para>Teradata literal format. This string may be used in
                                generating SQL against the Teradata database.</para>
            					<para>INTERVAL [sign]'[hours]:[mm]' HOUR TO MINUTE</para>
            				</description>
            			</item>
            		</list>
            	</para>
            	<para>Below is the description of each format item.</para>
            	<para>
            		<list type="table">
            			<listheader>
            				<term>Format Item</term>
            				<description>Description</description>
            			</listheader>
            			<item>
            				<term>sign</term>
            				<description>If negative a minus sign will be displayed.</description>
            			</item>
            			<item>
            				<term>hours</term>
            				<description>The number of hours (1 - 4 digits in length).</description>
            			</item>
            			<item>
            				<term>mm</term>
            				<description>The number of minutes from 00 - 59.</description>
            			</item>
            		</list>
            	</para>
            </remarks>
            <returns>
               A string representation of the <strong>TdIntervalHourToMinute</strong> will be returned.
            </returns>
            <exception cref="T:System.FormatException" caption="FormatException">
               <paramref name="format"/> contains an invalid format specifier.
            </exception>
            <param name="format">
               The format string that will be used to format the <strong>TdIntervalHourToMinute</strong>.
            </param>
        </member>
        <member name="M:Teradata.Client.Provider.TdIntervalHourToMinute.ToString">
            <summary>
               Converts this instance to its equivalent String representation.
            </summary>
            <remarks>
               <para>The string returned will follow this format:</para>
            	<para>[sign][hours]:[mm].</para>
            	<para>Below is the description of each format item.</para>
            	<para>
            		<list type="table">
            			<listheader>
            				<term>Format Item</term>
            				<description>Description</description>
            			</listheader>
            			<item>
            				<term>sign</term>
            				<description>If negative a minus sign will be displayed.</description>
            			</item>
            			<item>
            				<term>hours</term>
            				<description>The number of hours from 0 - 9999.</description>
            			</item>
            			<item>
            				<term>mm</term>
            				<description>The number of minutes from 00 - 59.</description>
            			</item>
            		</list>
            	</para>
            </remarks>
            <returns>
               A string representation of the <strong>TdIntervalHourToMinute</strong> will be returned.
            </returns>
        </member>
        <member name="M:Teradata.Client.Provider.TdIntervalHourToMinute.Parse(System.String)">
            <summary>
               The specified string is converted into an equivalent <see cref="T:Teradata.Client.Provider.TdIntervalHourToMinute"/>.
            </summary>
            <returns>
               A <strong>TdIntervalHourToMinute</strong> is returned that is equivalent to the  
               <strong>TdIntervalHourToMinute</strong> contained in the input string.
            </returns>
            <exception cref="T:System.FormatException" caption="FormatException">
               <paramref name="value"/> cannot be converted into a 
               <strong>TdIntervalHourToMinute</strong> interval.
            </exception>
            <exception cref="T:System.ArgumentNullException" caption="ArgumentNullException">
               <paramref name="value"/> is a <c>null</c> reference.
            </exception>
            <exception cref="T:System.OverflowException">
               The resultant operation returns a value greater than the <see cref="F:Teradata.Client.Provider.TdIntervalHourToMinute.MaxValue"/> 
               or less than the <see cref="F:Teradata.Client.Provider.TdIntervalHourToMinute.MinValue"/>.
            </exception>
            <remarks>
            	<para>This method supports the following string formats:</para>
            	<para>
            		<list type="table">
            			<listheader>
            				<term>String Format</term>
            				<description>Description</description>
            			</listheader>
            			<item>
            				<term>General interval format</term>
            				<description>
            					<para>[sign][hours]:[mm]</para>
            				</description>
            			</item>
            			<item>
            				<term>Teradata literal format. This string may be used in
                                generating SQL against the Teradata database.</term>
            				<description>
            					<para>INTERVAL [sign]'[hours]:[mm]' HOUR TO MINUTE</para>
            				</description>
            			</item>
            		</list>
            	</para>
            	<para>Below is the description of each format item.</para>
            	<para>
            		<list type="table">
            			<listheader>
            				<term>Format Item</term>
            				<description>Description</description>
            			</listheader>
            			<item>
            				<term>sign</term>
            				<description>Optional - . Defaults as space character (+).</description>
            			</item>
            			<item>
            				<term>hours</term>
            				<description>Required number of hours from 0 - 9999.</description>
            			</item>
            			<item>
            				<term>mm</term>
            				<description>Required number of minutes from 00 - 59.</description>
            			</item>
            		</list>
            	</para>
            	<para>
                    Cultural settings are not supported.
            	</para>
            	<para>
            		While parsing the <paramref name="value"/> the <see cref="P:Teradata.Client.Provider.TdIntervalHourToMinute.Precision"/> will be
            		set to the number of digits contained within the hour component. 
            	</para>
            	<para>
            		For example a <paramref name="value"/> of "100:25" will
            		contain a precision of 3.
            	</para>
            </remarks>
            <overloads>
            	The specified string is converted into an equivalent 
               <strong>TdIntervalHourToMinute</strong> interval.
            </overloads>
            <param name="value">A string to be converted into a <strong>TdIntervalHourToMinute</strong>.</param>
        </member>
        <member name="M:Teradata.Client.Provider.TdIntervalHourToMinute.TryParse(System.String,Teradata.Client.Provider.TdIntervalHourToMinute@)">
            <summary>
               The specified string is converted into an equivalent <see cref="T:Teradata.Client.Provider.TdIntervalHourToMinute"/>. 
            </summary>
            <returns>
                <c>true</c> if the conversion of <paramref name="value"/> succeeded, 
                <c>false</c> otherwise.
            </returns>
            <remarks>
            	<para>This method supports the following string formats:</para>
            	<para>
            		<list type="table">
            			<listheader>
            				<term>String Format</term>
            				<description>Description</description>
            			</listheader>
            			<item>
            				<term>General interval format</term>
            				<description>
            					<para>[sign][hours]:[mm]</para>
            				</description>
            			</item>
            			<item>
            				<term>Teradata literal format. This string may be used in
                                generating SQL against the Teradata database.</term>
            				<description>
            					<para>INTERVAL [sign]'[hours]:[mm]' HOUR TO MINUTE</para>
            				</description>
            			</item>
            		</list>
            	</para>
            	<para>Below is the description of each format item.</para>
            	<para>
            		<list type="table">
            			<listheader>
            				<term>Format Item</term>
            				<description>Description</description>
            			</listheader>
            			<item>
            				<term>sign</term>
            				<description>Optional - . Defaults as space character (+).</description>
            			</item>
            			<item>
            				<term>hours</term>
            				<description>Required number of hours from 0 - 9999.</description>
            			</item>
            			<item>
            				<term>mm</term>
            				<description>Required number of minutes from 00 - 59.</description>
            			</item>
            		</list>
            	</para>
            	<para>
                    Cultural settings are not supported.
            	</para>
            	<para>
            		While parsing the <paramref name="value"/> the <see cref="P:Teradata.Client.Provider.TdIntervalHourToMinute.Precision"/> will be
            		set to the number of digits contained within the hour component. 
            	</para>
            	<para>
            		For example a <paramref name="value"/> of "100:25" will
            		contain a precision of 3.
            	</para>
            </remarks>
            <overloads>
               The specified string is converted into an equivalent 
               <see cref="T:Teradata.Client.Provider.TdIntervalHourToMinute"/> interval.  A <c>true</c> is returned 
               if the conversion succeeded, <c>false</c> otherwise.
            </overloads>
            <param name="value">A string to be converted into a <strong>TdIntervalHourToMinute</strong>.</param>
            <param name="result">The converted string into a <strong>TdIntervalHourToMinute</strong>.</param>
        </member>
        <member name="M:Teradata.Client.Provider.TdIntervalHourToMinute.GetXmlSchema(System.Xml.Schema.XmlSchemaSet)">
             <summary>
                Gets the XML Qualified name for <see cref="T:Teradata.Client.Provider.TdIntervalHourToMinute"/> XML type mapping.
             </summary>
             <param name="xmlSchemaSet">Holds zero or more XML Schema definition language (XSD) schemas.</param>
             <returns>
                Returns <strong>xs:duration</strong>.
             </returns>
             <example>
             This example shows how to use the <strong>TdIntervalHourToMinute</strong> with <see cref="T:System.Xml.Serialization.XmlSerializer"/> class.
             <see cref="T:System.Xml.Serialization.XmlElementAttribute"/> is used to indicate that the Teradata Database column can be <strong>Null</strong>.
             <code>
              public class Order
              {
                  public TdTimestamp Date;
             
                  public TdIntervalHourToMinute ExpirationPeriod;
             
                  public TdTimestamp ExpirationDate;
            
                  public Int32 ProductId;
            
                  public Int32 Quantity;
            
                  public Int32? BackOrderQuantity;
            
                  [XmlElementAttribute(IsNullable = true)]        
                  public TdDecimal BackOrderPrice;
              }
             
              internal class OrderWriter
              {
              
                  public static void Write()
                  {
                      // Setup the order
                      Order x = new Order();
              
                      x.Date = new TdTimestamp(DateTime.Today);
                      // 5 days 4 hours and 30 minutes
                      x.ExpirationPeriod = new TdIntervalHourToMinute(124, 30);
                      x.ExpirationDate = x.Date + x.ExpirationPeriod;
                      x.ProductId = 100;
                      x.Quantity = 2000;
                      x.BackOrderQuantity = null;
                      x.BackOrderPrice = TdDecimal.Null;
            
                      // Write out today's orders to the file.
                      //
                      // Open the file.
                      XmlWriterSettings settings = new XmlWriterSettings();
                      settings.Indent = true;
                      XmlWriter writer = XmlWriter.Create(@"C:\Temp\TodayOrders.XML", settings);
                      writer.WriteStartElement("TodayOrders");
                
                      // Write out the schema.
                      XmlSchemas schemas = new XmlSchemas();
                      XmlSchemaExporter schExporter = new XmlSchemaExporter(schemas);
                      schExporter.ExportTypeMapping(new XmlReflectionImporter().ImportTypeMapping(typeof(Order)));
                      schemas[0].Write(writer);
            
                      // Write out the orders.
                      XmlSerializer xml = new XmlSerializer(typeof(Order));
                      xml.Serialize(writer, x);
              
                      // Close the document.
                      writer.WriteEndDocument();
                      writer.Close();
                  }
              }
             
              /* Output is:
             
              &lt;TodayOrders&gt;
                &lt;xs:schema elementFormDefault="qualified" xmlns:xs="http://www.w3.org/2001/XMLSchema"&gt;
                  &lt;xs:element name="Order" nillable="true" type="Order" /&gt;
                  &lt;xs:complexType name="Order"&gt;
                    &lt;xs:sequence&gt;
                      &lt;xs:element minOccurs="1" maxOccurs="1" name="Date" type="xs:dateTime" /&gt;
                      &lt;xs:element minOccurs="1" maxOccurs="1" name="ExpirationPeriod" type="xs:duration" /&gt;
                      &lt;xs:element minOccurs="1" maxOccurs="1" name="ExpirationDate" type="xs:dateTime" /&gt;
                      &lt;xs:element minOccurs="1" maxOccurs="1" name="ProductId" type="xs:int" /&gt;
                      &lt;xs:element minOccurs="1" maxOccurs="1" name="Quantity" type="xs:int" /&gt;
                      &lt;xs:element minOccurs="1" maxOccurs="1" name="BackOrderQuantity" nillable="true" type="xs:int" /&gt;
                      &lt;xs:element minOccurs="1" maxOccurs="1" name="BackOrderPrice" nillable="true" type="xs:decimal" /&gt;
                    &lt;/xs:sequence&gt;
                  &lt;/xs:complexType&gt;
                &lt;/xs:schema&gt;
                &lt;Order xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xmlns:xsd="http://www.w3.org/2001/XMLSchema"&gt;
                  &lt;Date&gt;2008-02-01T00:00:00-08:00&lt;/Date&gt;
                  &lt;ExpirationPeriod&gt;PT124H30M&lt;/ExpirationPeriod&gt;
                  &lt;ExpirationDate&gt;2008-02-06T04:30:00-08:00&lt;/ExpirationDate&gt;
                  &lt;ProductId&gt;100&lt;/ProductId&gt;
                  &lt;Quantity&gt;2000&lt;/Quantity&gt;
                  &lt;BackOrderQuantity xsi:nil="true" /&gt;
                  &lt;BackOrderPrice xsi:nil="true" /&gt;
                &lt;/Order&gt;
              &lt;/TodayOrders&gt;
             
              */
             </code>
             </example>        
        </member>
        <member name="M:Teradata.Client.Provider.TdIntervalHourToMinute.op_Addition(Teradata.Client.Provider.TdIntervalHourToMinute,Teradata.Client.Provider.TdIntervalHourToMinute)">
            <summary>
               A <see cref="T:Teradata.Client.Provider.TdIntervalHourToMinute"/> is added to another 
               <strong>TdIntervalHourToMinute</strong>.
            </summary>
            <remarks>
            <para>
               If either parameter is <strong>Null</strong> a <see cref="F:Teradata.Client.Provider.TdIntervalHourToMinute.Null"/> will be returned.
            </para>
            <para>
               The returned <strong>TdIntervalHourToMinute</strong> will contain a precision 
               set to the <see cref="F:Teradata.Client.Provider.TdIntervalHourToMinute.MaxPrecision"/>.
            </para>
            </remarks>
            <returns>
               A new <strong>TdIntervalHourToMinute</strong> as the result of adding a 
               <strong>TdIntervalHourToMinute</strong> to another <strong>TdIntervalHourToMinute</strong>.
            </returns>
            <exception cref="T:System.OverflowException">
               The resultant operation returns a value greater than the <see cref="F:Teradata.Client.Provider.TdIntervalHourToMinute.MaxValue"/> 
               or less than the <see cref="F:Teradata.Client.Provider.TdIntervalHourToMinute.MinValue"/>.
            </exception>
            <param name="left">A <strong>TdIntervalHourToMinute</strong>.</param>
            <param name="right">A <strong>TdIntervalHourToMinute</strong>.</param>
        </member>
        <member name="M:Teradata.Client.Provider.TdIntervalHourToMinute.op_Subtraction(Teradata.Client.Provider.TdIntervalHourToMinute,Teradata.Client.Provider.TdIntervalHourToMinute)">
            <summary>
               A <see cref="T:Teradata.Client.Provider.TdIntervalHourToMinute"/> is subtracted from another <strong>TdIntervalHourToMinute</strong>.
            </summary>
            <returns>
               A new <strong>TdIntervalHourToMinute</strong> as the result of 
               subtracting <paramref name="right"/> from the <paramref name="left"/>.
            </returns>        
            <remarks>
            <para>
               If either parameter is <strong>Null</strong> a <see cref="F:Teradata.Client.Provider.TdIntervalHourToMinute.Null"/> will be returned.
            </para>
            <para>
               The returned <strong>TdIntervalHourToMinute</strong> will contain a precision
               set to the <see cref="F:Teradata.Client.Provider.TdIntervalHourToMinute.MaxPrecision"/>.
            </para>
            </remarks>
            <exception cref="T:System.OverflowException">
               The resultant operation returns a value greater than the <see cref="F:Teradata.Client.Provider.TdIntervalHourToMinute.MaxValue"/> 
               or less than the <see cref="F:Teradata.Client.Provider.TdIntervalHourToMinute.MinValue"/>.
            </exception>
            <param name="left">A <strong>TdIntervalHourToMinute</strong> to subtract from.</param>
            <param name="right">A <strong>TdIntervalHourToMinute</strong> to subtract.</param>
        </member>
        <member name="M:Teradata.Client.Provider.TdIntervalHourToMinute.op_Multiply(Teradata.Client.Provider.TdIntervalHourToMinute,System.Int32)">
            <summary>
               A <see cref="T:Teradata.Client.Provider.TdIntervalHourToMinute"/> is multiplied by an integer value.
            </summary>
            <remarks>
            <para>
               If <paramref name="interval"/> is <see cref="F:Teradata.Client.Provider.TdIntervalHourToMinute.Null"/> a <strong>Null</strong> will be returned.
            </para>
            <para>
               The returned <strong>TdIntervalHourToMinute</strong> will contain a precision 
               set to the <see cref="F:Teradata.Client.Provider.TdIntervalHourToMinute.MaxPrecision"/>.
            </para>
            </remarks>
            <returns>
               A new <strong>TdIntervalHourToMinute</strong> as the result of multiplying a 
               <strong>TdIntervalHourToMinute</strong> and an integer value.
            </returns>        
            <exception cref="T:System.OverflowException">
               The resultant operation returns a value greater than the <see cref="F:Teradata.Client.Provider.TdIntervalHourToMinute.MaxValue"/> 
               or less than the <see cref="F:Teradata.Client.Provider.TdIntervalHourToMinute.MinValue"/>.
            </exception>
            <param name="interval">A <strong>TdIntervalHourToMinute</strong>.</param>
            <param name="value">A multiplier.</param>
        </member>
        <member name="M:Teradata.Client.Provider.TdIntervalHourToMinute.op_Multiply(System.Int32,Teradata.Client.Provider.TdIntervalHourToMinute)">
            <summary>
               A <see cref="T:Teradata.Client.Provider.TdIntervalHourToMinute"/> is multiplied by an integer value.
            </summary>
            <remarks>
            <para>
               If <paramref name="interval"/> is <see cref="F:Teradata.Client.Provider.TdIntervalHourToMinute.Null"/> a <strong>Null</strong> will be returned.
            </para>
            <para>
               The returned <strong>TdIntervalHourToMinute</strong> will contain a precision 
               set to the <see cref="F:Teradata.Client.Provider.TdIntervalHourToMinute.MaxPrecision"/>.
            </para>
            </remarks>
            <returns>
               A new <strong>TdIntervalHourToMinute</strong> as the result of multiplying a 
               <strong>TdIntervalHourToMinute</strong> and an integer value.
            </returns>        
            <exception cref="T:System.OverflowException">
               The resultant operation returns a value greater than the <see cref="F:Teradata.Client.Provider.TdIntervalHourToMinute.MaxValue"/> 
               or less than the <see cref="F:Teradata.Client.Provider.TdIntervalHourToMinute.MinValue"/>.
            </exception>
            <param name="value">A multiplier.</param>
            <param name="interval">A <strong>TdIntervalHourToMinute</strong>.</param>
        </member>
        <member name="M:Teradata.Client.Provider.TdIntervalHourToMinute.op_Division(Teradata.Client.Provider.TdIntervalHourToMinute,System.Int32)">
            <summary>
               A <see cref="T:Teradata.Client.Provider.TdIntervalHourToMinute"/> is divided by an integer value.
            </summary>
            <remarks>
            <para>
               If <paramref name="interval"/> is <see cref="F:Teradata.Client.Provider.TdIntervalHourToMinute.Null"/> a <strong>Null</strong> will be returned.
            </para>
            <para>
               The returned <strong>TdIntervalHourToMinute</strong> will contain a precision 
               which matches the precision of <strong>interval</strong> parameter.
            </para>
            </remarks>
            <returns>
               A new <strong>TdIntervalHourToMinute</strong> as the result of dividing a 
               <strong>TdIntervalHourToMinute</strong> and an integer value.
            </returns>        
            <exception cref="T:System.DivideByZeroException">
               The <paramref name="value"/> divisor cannot be 0.
            </exception>
            <param name="interval">A <strong>TdIntervalHourToMinute</strong>.</param>
            <param name="value">A divisor.</param>
        </member>
        <member name="M:Teradata.Client.Provider.TdIntervalHourToMinute.Add(Teradata.Client.Provider.TdIntervalHourToMinute,Teradata.Client.Provider.TdIntervalHourToMinute)">
            <summary>
               Calculates the sum of two <see cref="T:Teradata.Client.Provider.TdIntervalHourToMinute"/> operands.
            </summary>
            <returns>
               A <strong>TdIntervalHourToMinute</strong> containing the sum.
            </returns>
            <remarks>
            <para>
               If either parameter is <strong>Null</strong> a <see cref="F:Teradata.Client.Provider.TdIntervalHourToMinute.Null"/> will be returned.
            </para>
            <para>
               The returned <strong>TdIntervalHourToMinute</strong> will contain a precision 
               set to the <see cref="F:Teradata.Client.Provider.TdIntervalHourToMinute.MaxPrecision"/>.
            </para>
            </remarks>
            <exception cref="T:System.OverflowException">
               The resultant operation returns a value greater than the <see cref="F:Teradata.Client.Provider.TdIntervalHourToMinute.MaxValue"/> 
               or less than the <see cref="F:Teradata.Client.Provider.TdIntervalHourToMinute.MinValue"/>.
            </exception>
            <param name="left">A <strong>TdIntervalHourToMinute</strong>.</param>
            <param name="right">A <strong>TdIntervalHourToMinute</strong>.</param>
        </member>
        <member name="M:Teradata.Client.Provider.TdIntervalHourToMinute.Subtract(Teradata.Client.Provider.TdIntervalHourToMinute,Teradata.Client.Provider.TdIntervalHourToMinute)">
            <summary>
               A <see cref="T:Teradata.Client.Provider.TdIntervalHourToMinute"/> is subtracted from another <strong>TdIntervalHourToMinute</strong>.
            </summary>
            <returns>
               A new <strong>TdIntervalHourToMinute</strong> as the result of 
               subtracting <paramref name="right"/> from the <paramref name="left"/>.
            </returns>        
            <remarks>
            <para>
            <para>
               If either parameter is <strong>Null</strong> a <see cref="F:Teradata.Client.Provider.TdIntervalHourToMinute.Null"/> will be returned.
            </para>
            <para>
               The returned <strong>TdIntervalHourToMinute</strong> will contain a precision 
               set to the <see cref="F:Teradata.Client.Provider.TdIntervalHourToMinute.MaxPrecision"/>.
            </para>
            </para>
            <para>
               The returned <strong>TdIntervalHourToMinute</strong> will contain a precision  
               adjusted to contain the highest precision from either 
               <strong>TdIntervalHourToMinute</strong> operands.
            </para>
            </remarks>
            <exception cref="T:System.OverflowException">
               The resultant operation returns a value greater than the <see cref="F:Teradata.Client.Provider.TdIntervalHourToMinute.MaxValue"/> 
               or less than the <see cref="F:Teradata.Client.Provider.TdIntervalHourToMinute.MinValue"/>.
            </exception>
            <param name="left">A <strong>TdIntervalHourToMinute</strong> to subtract from.</param>
            <param name="right">A <strong>TdIntervalHourToMinute</strong> to subtract.</param>
        </member>
        <member name="M:Teradata.Client.Provider.TdIntervalHourToMinute.Multiply(Teradata.Client.Provider.TdIntervalHourToMinute,System.Int32)">
            <summary>
               A <see cref="T:Teradata.Client.Provider.TdIntervalHourToMinute"/> is multiplied by an integer value.
            </summary>
            <remarks>
            <para>
               If <paramref name="interval"/> is <see cref="F:Teradata.Client.Provider.TdIntervalHourToMinute.Null"/> a <strong>Null</strong> will be returned.
            </para>
            <para>
               The returned <strong>TdIntervalHourToMinute</strong> will contain a precision 
               set to the <see cref="F:Teradata.Client.Provider.TdIntervalHourToMinute.MaxPrecision"/>.
            </para>
            </remarks>
            <returns>
               A new <strong>TdIntervalHourToMinute</strong> as the result of multiplying a 
               <strong>TdIntervalHourToMinute</strong> and an integer value.
            </returns>        
            <exception cref="T:System.OverflowException">
               The resultant operation returns a value greater than the <see cref="F:Teradata.Client.Provider.TdIntervalHourToMinute.MaxValue"/> 
               or less than the <see cref="F:Teradata.Client.Provider.TdIntervalHourToMinute.MinValue"/>.
            </exception>
            <param name="interval">A <strong>TdIntervalHourToMinute</strong>.</param>
            <param name="value">A multiplier.</param>
        </member>
        <member name="M:Teradata.Client.Provider.TdIntervalHourToMinute.Multiply(System.Int32,Teradata.Client.Provider.TdIntervalHourToMinute)">
            <summary>
               A <see cref="T:Teradata.Client.Provider.TdIntervalHourToMinute"/> is multiplied by an integer value.
            </summary>
            <remarks>
            <para>
               If <paramref name="interval"/> is <see cref="F:Teradata.Client.Provider.TdIntervalHourToMinute.Null"/> a <strong>Null</strong> will be returned.
            </para>
            <para>
               The returned <strong>TdIntervalHourToMinute</strong> will contain a precision 
               set to the <see cref="F:Teradata.Client.Provider.TdIntervalHourToMinute.MaxPrecision"/>.
            </para>
            </remarks>
            <returns>
               A new <strong>TdIntervalHourToMinute</strong> as the result of multiplying a 
               <strong>TdIntervalHourToMinute</strong> and an integer value.
            </returns>        
            <exception cref="T:System.OverflowException">
               The resultant operation returns a value greater than the <see cref="F:Teradata.Client.Provider.TdIntervalHourToMinute.MaxValue"/> 
               or less than the <see cref="F:Teradata.Client.Provider.TdIntervalHourToMinute.MinValue"/>.
            </exception>
            <param name="value">A multiplier.</param>
            <param name="interval">A <strong>TdIntervalHourToMinute</strong>.</param>
        </member>
        <member name="M:Teradata.Client.Provider.TdIntervalHourToMinute.Divide(Teradata.Client.Provider.TdIntervalHourToMinute,System.Int32)">
            <summary>
               A <see cref="T:Teradata.Client.Provider.TdIntervalHourToMinute"/> is divided by an integer value.
            </summary>
            <remarks>
            <para>
               If <paramref name="interval"/> is <see cref="F:Teradata.Client.Provider.TdIntervalHourToMinute.Null"/> a <strong>Null</strong> will be returned.
            </para>
            <para>
               The returned <strong>TdIntervalHourToMinute</strong> will contain a precision 
               which matches the precision of the <strong>interval</strong> parameter.
            </para>
            </remarks>
            <returns>
               A new <strong>TdIntervalHourToMinute</strong> as the result of dividing a 
               <strong>TdIntervalHourToMinute</strong> and an integer value.
            </returns>        
            <exception cref="T:System.DivideByZeroException">
               The <paramref name="value"/> divisor cannot be 0.
            </exception>
            <param name="interval">A <strong>TdIntervalHourToMinute</strong>.</param>
            <param name="value">A divisor.</param>
        </member>
        <member name="M:Teradata.Client.Provider.TdIntervalHourToMinute.op_GreaterThan(Teradata.Client.Provider.TdIntervalHourToMinute,Teradata.Client.Provider.TdIntervalHourToMinute)">
            <summary>
               This operator determines whether the <paramref name="left"/> is greater 
               than the <paramref name="right"/>.
            </summary>
            <returns>
            	<para>
            		<c>true</c> indicates the <paramref name="left"/> is greater than
                    the <paramref name="right"/>, <c>false</c> otherwise.
                </para>
            	<para>
            		<list type="table">
            			<listheader>
            				<term>Return Value</term>
            				<description>Description</description>
            			</listheader>
            			<item>
            				<term><c>true</c></term>
            				<description>
            					<paramref name="left"/> and
                                <paramref name="right"/> are not
                                <see cref="F:Teradata.Client.Provider.TdIntervalHourToMinute.Null"/> and
                                <paramref name="left"/> is greater than
                                <paramref name="right"/>.
            				</description>
            			</item>
            			<item>
            				<term><c>false</c></term>
            				<description>
            					<para>
                                    The <paramref name="left"/> is less than or equal
                                    to <paramref name="right"/>
                                </para>
            					<para>-or-</para>
            					<para>
                                    Either <paramref name="left"/> and / or
                                    <paramref name="right"/> is <strong>Null</strong>.
                                </para>
            				</description>
            			</item>
            		</list>
            	</para>
            </returns>
            <remarks>
            	<para>
                   Comparison operators always return <c>false</c> if one of the operands is
                   <strong>Null</strong>. Therefore you should not assume that the reverse condition
                   is <c>true</c>. For example you cannot assume that the <paramref name="left"/> is less
                   than or equal to the <paramref name="right"/> if the "&gt;" operator returns <c>false</c>.
               </para>
            	<para>
                   The reverse condition is <c>true</c> when the <paramref name="left"/> and the 
                   <paramref name="right"/> are not <strong>Null</strong>.
                </para>
            </remarks>
            <param name="left">An instance of <see cref="T:Teradata.Client.Provider.TdIntervalHourToMinute"/>.</param>
            <param name="right">An instance of <strong>TdIntervalHourToMinute</strong>.</param>
        </member>
        <member name="M:Teradata.Client.Provider.TdIntervalHourToMinute.op_GreaterThanOrEqual(Teradata.Client.Provider.TdIntervalHourToMinute,Teradata.Client.Provider.TdIntervalHourToMinute)">
            <summary>
               This operator determines whether the <paramref name="left"/> is greater than or 
               equal to the <paramref name="right"/>.
            </summary>
            <returns>
            	<para>
            		<c>true</c> indicates the <paramref name="left"/> is greater than
                    or equal to the <paramref name="right"/>, <c>false</c> otherwise.
                </para>
            	<para>
            		<list type="table">
            			<listheader>
            				<term>Return Value</term>
            				<description>Description</description>
            			</listheader>
            			<item>
            				<term><c>true</c></term>
            				<description>
            					<para>
            						<paramref name="left"/> and
                                    <paramref name="right"/> are not
                                    <see cref="F:Teradata.Client.Provider.TdIntervalHourToMinute.Null"/> and
                                    <paramref name="left"/> is greater than or equal
                                    to <paramref name="right"/>
            					</para>
            					<para>-or-</para>
            					<para>
            						<paramref name="left"/> is <strong>Null</strong>
                                    and <paramref name="right"/> is
                                    <strong>Null</strong>.
            					</para>
            				</description>
            			</item>
            			<item>
            				<term><c>false</c></term>
            				<description>
            					<para>
                                    The <paramref name="left"/> is less than
                                    <paramref name="right"/>
            					</para>
            					<para>-or-</para>
            					<para>
                                    Either <paramref name="left"/> or
                                    <paramref name="right"/> is <strong>Null</strong>.
            					</para>
            				</description>
            			</item>
            		</list>
            	</para>
            </returns>
            <remarks>
            	<para>
                    Comparison operators always return <c>false</c> if one of the operands is
                    <strong>Null</strong>. Therefore you should not assume that the reverse
                    condition is <c>true</c>. For example you cannot assume that the
                    <paramref name="left"/> is less than the
                    <paramref name="right"/> if the "&gt;=" operator returns
                    <c>false</c>.
                </para>
            	<para>
                    The reverse condition is <c>true</c> when the
                    <paramref name="left"/> and the
                    <paramref name="right"/> are not <strong>Null</strong>.
                </para>
            </remarks>
            <param name="left">An instance of <see cref="T:Teradata.Client.Provider.TdIntervalHourToMinute"/>.</param>
            <param name="right">An instance of <strong>TdIntervalHourToMinute</strong>.</param>
        </member>
        <member name="M:Teradata.Client.Provider.TdIntervalHourToMinute.op_Inequality(Teradata.Client.Provider.TdIntervalHourToMinute,Teradata.Client.Provider.TdIntervalHourToMinute)">
            <summary>
               This operator determines whether the <paramref name="left"/> and the  
               <paramref name="right"/> are not equal.
            </summary>
            <returns>
            	<para>
                   A Boolean is returned that indicates whether the two operands are not equal.
                   <c>true</c> indicates the two operands are not equal, <c>false</c>
                   otherwise.
               </para>
            	<para>
            		<list type="table">
            			<listheader>
            				<term>Return Value</term>
            				<description>Description</description>
            			</listheader>
            			<item>
            				<term><c>true</c></term>
            				<description>
                                <para>
            					   <paramref name="left"/> is less than or greater than
                                   <paramref name="right"/>.
                                </para>
            					<para>-or-</para>
                               <para>
            					    <paramref name="left"/> is
                                   <see cref="F:Teradata.Client.Provider.TdIntervalHourToMinute.Null"/> and
                                   <paramref name="right"/> is not <strong>Null.</strong> 
                               </para>
            					<para>-or-</para>
            					<para>
                                   <paramref name="left"/> is not <strong>Null</strong>
                                   and <paramref name="right"/> is <strong>Null.</strong>
                                </para>
                            </description>
            			</item>
            			<item>
            				<term><c>false</c></term>
            				<description>
            					<para>
                                  <paramref name="left"/> is equal to
                                  <paramref name="right"/>.
                               </para>
            					<para>-or-</para>
            					<para>
                                   <paramref name="left"/> and
                                   <paramref name="right"/> are <strong>Null</strong>.
                                </para>
                            </description>
            			</item>
            		</list>
            	</para>
            </returns>
            <param name="left">An instance of <see cref="T:Teradata.Client.Provider.TdIntervalHourToMinute"/>.</param>
            <param name="right">An instance of <strong>TdIntervalHourToMinute</strong>.</param>
        </member>
        <member name="M:Teradata.Client.Provider.TdIntervalHourToMinute.op_Equality(Teradata.Client.Provider.TdIntervalHourToMinute,Teradata.Client.Provider.TdIntervalHourToMinute)">
            <summary>
               This operator determines whether the <paramref name="left"/> and the  
               <paramref name="right"/> are equal.
            </summary>
            <returns>
            	<para>
                   A Boolean is returned that indicates whether the two operands are equal.
                   <c>True</c> indicates the two operands are equal, <c>false</c> otherwise.
               </para>
            	<para>
            		<list type="table">
            			<listheader>
            				<term>Return Value</term>
            				<description>Description</description>
            			</listheader>
            			<item>
            				<term><c>true</c></term>
            				<description>
            					<para>
            					   <paramref name="left"/> is equal to
                                   <paramref name="right"/>
            					</para>
            					<para>-or-</para>
            					<para>
            					   <paramref name="left"/> is
                                   <see cref="F:Teradata.Client.Provider.TdIntervalHourToMinute.Null"/> and
                                   <paramref name="right"/> is <strong>Null</strong>.
            					</para>
            				</description>
            			</item>
            			<item>
            				<term><c>false</c></term>
            				<description>
            					<para>
            					   <paramref name="left"/> is not <strong>Null</strong>
                                   and <paramref name="right"/> is <strong>Null</strong>
            					</para>
            					<para>-or-</para>
            					<para>
            					   <paramref name="left"/> is <strong>Null</strong> and
                                   <paramref name="right"/> is not <strong>Null</strong>
            					</para>
            					<para>-or-</para>
            					<para>
                                   The <paramref name="left"/> is not equal to
                                   <paramref name="right"/>.
            					</para>
            				</description>
            			</item>
            		</list>
            	</para>
            </returns>
            <param name="left">An instance of <see cref="T:Teradata.Client.Provider.TdIntervalHourToMinute"/>.</param>
            <param name="right">An instance of <strong>TdIntervalHourToMinute</strong>.</param>
        </member>
        <member name="M:Teradata.Client.Provider.TdIntervalHourToMinute.op_LessThan(Teradata.Client.Provider.TdIntervalHourToMinute,Teradata.Client.Provider.TdIntervalHourToMinute)">
            <summary>
               This operator determines whether the <paramref name="left"/> is less than the 
               <paramref name="right"/>.
            </summary>
            <returns>
            	<para>
            		<c>True</c> indicates the <paramref name="left"/> is less than
                    the <paramref name="right"/>, <c>false</c> otherwise.
                </para>
            	<para>
            		<list type="table">
            			<listheader>
            				<term>Return Value</term>
            				<description>Description</description>
            			</listheader>
            			<item>
            				<term><c>true</c></term>
            				<description>
            					<para>
            					    <paramref name="left"/> and
                                   <paramref name="right"/> are not
                                   <see cref="F:Teradata.Client.Provider.TdIntervalHourToMinute.Null"/> and
                                   <paramref name="left"/> is less than
                                   <paramref name="right"/>.
            					</para>
            				</description>
            			</item>
            			<item>
            				<term><c>false</c></term>
            				<description>
            					<para>
                                    The <paramref name="left"/> is greater than or
                                    equal to <paramref name="right"/>
            					</para>
            					<para>-or-</para>
            					<para>
                                    Either <paramref name="left"/> and / or
                                    <paramref name="right"/> is <strong>Null</strong>.
            					</para>
            				</description>
            			</item>
            		</list>
            	</para>
            </returns>
            <remarks>
            	<para>
                    Comparison operators always return <c>false</c> if one of the operands is
                    <strong>Null</strong>. Therefore you should not assume that the reverse
                    condition is <c>true</c>. For example you cannot assume that the
                    <paramref name="left"/> is greater than or equal to the
                    <paramref name="right"/> if the "&lt;" operator returns
                    <c>false</c>.
                </para>
            	<para>
                    The reverse condition is <c>true</c> when the
                    <paramref name="left"/> and the
                    <paramref name="right"/> are not <strong>Null</strong>.
                </para>
            </remarks>
            <param name="left">An instance of <see cref="T:Teradata.Client.Provider.TdIntervalHourToMinute"/>.</param>
            <param name="right">An instance of <strong>TdIntervalHourToMinute</strong>.</param>
        </member>
        <member name="M:Teradata.Client.Provider.TdIntervalHourToMinute.op_LessThanOrEqual(Teradata.Client.Provider.TdIntervalHourToMinute,Teradata.Client.Provider.TdIntervalHourToMinute)">
            <summary>
               This operator determines whether the <paramref name="left"/> is less than 
               or equal the <paramref name="right"/>.
            </summary>
            <returns>
            	<para>
            		<c>true</c> indicates the <paramref name="left"/> is less than or
                    equal to the <paramref name="right"/>, <c>false</c> otherwise.
                </para>
            	<para>
            		<list type="table">
            			<listheader>
            				<term>Return Value</term>
            				<description>Description</description>
            			</listheader>
            			<item>
            				<term><c>true</c></term>
            				<description>
            					<para>
            						<paramref name="left"/> and
                                    <paramref name="right"/> are not
                                    <see cref="F:Teradata.Client.Provider.TdIntervalHourToMinute.Null"/> and
                                    <paramref name="left"/> is less than or equal to
                                    <paramref name="right"/>
            					</para>
            					<para>-or-</para>
            					<para>
            						<paramref name="left"/> is <strong>Null</strong>
                                    and <paramref name="right"/> is
                                    <strong>Null</strong>.
            					</para>
            				</description>
            			</item>
            			<item>
            				<term><c>false</c></term>
            				<description>
            					<para>
                                    The <paramref name="left"/> is greater than
                                    <paramref name="right"/>
            					</para>
            					<para>-or-</para>
            					<para>
                                    Either <paramref name="left"/> or
                                    <paramref name="right"/> is <strong>Null</strong>.
            					</para>
            				</description>
            			</item>
            		</list>
            	</para>
            </returns>
            <remarks>
            	<para>
                    Comparison operators always return <c>false</c> if one of the operands is
                    <strong>Null</strong>. Therefore you should not assume that the reverse
                    condition is <c>true</c>. For example you cannot assume that the
                    <paramref name="left"/> is greater than the
                    <paramref name="right"/> if the "&lt;=" operator returns
                    <c>false</c>.
                </para>
            	<para>
                    The reverse condition is <c>true</c> when the
                    <paramref name="left"/> and the
                    <paramref name="right"/> are not <strong>Null</strong>.
                </para>
            </remarks>
            <param name="left">An instance of <see cref="T:Teradata.Client.Provider.TdIntervalHourToMinute"/>.</param>
            <param name="right">An instance of <strong>TdIntervalHourToMinute</strong>.</param>
        </member>
        <member name="M:Teradata.Client.Provider.TdIntervalHourToMinute.op_Explicit(System.TimeSpan)~Teradata.Client.Provider.TdIntervalHourToMinute">
            <summary>
               Converts a <see cref="T:System.TimeSpan"/> to a <see cref="T:Teradata.Client.Provider.TdIntervalHourToMinute"/>.
            </summary>
            <remarks>
               <strong>TimeSpan</strong> fractional seconds and seconds will be truncated during  
               conversion into a <strong>TdIntervalHourToMinute</strong> interval.
            </remarks>
            <exception cref="T:System.OverflowException">
               The resultant operation returns a value greater than the <see cref="F:Teradata.Client.Provider.TdIntervalHourToMinute.MaxValue"/> 
               or less than the <see cref="F:Teradata.Client.Provider.TdIntervalHourToMinute.MinValue"/>.
            </exception>
            <param name="value">A <strong>TimeSpan</strong>.</param>
            <returns>A <strong>TdIntervalHourToMinute</strong> interval.</returns>
        </member>
        <member name="M:Teradata.Client.Provider.TdIntervalHourToMinute.op_Explicit(Teradata.Client.Provider.TdIntervalHourToMinute)~System.TimeSpan">
            <summary>
               Converts a <see cref="T:Teradata.Client.Provider.TdIntervalHourToMinute"/> to a <see cref="T:System.TimeSpan"/>.
            </summary>
            <returns>
               A <strong>TimeSpan</strong>.
            </returns>
            <remarks>
               The <strong>TimeSpan</strong> time components are represented in 24 hour format.
            </remarks>
            <exception cref="T:System.ArgumentNullException">
               The <strong>TdIntervalHourToMinute</strong> value is <see cref="F:Teradata.Client.Provider.TdIntervalHourToMinute.Null"/>.
            </exception>
            <param name="value">A <strong>TdIntervalHourToMinute</strong> interval.</param>
        </member>
        <member name="M:Teradata.Client.Provider.TdIntervalHourToMinute.op_Implicit(Teradata.Client.Provider.TdIntervalHourToMinute)~Teradata.Client.Provider.TdIntervalHourToSecond">
            <summary>
               Converts a <see cref="T:Teradata.Client.Provider.TdIntervalHourToMinute"/> to <see cref="T:Teradata.Client.Provider.TdIntervalHourToSecond"/>.
            </summary>
            <remarks>
            <para>
               The <see cref="P:Teradata.Client.Provider.TdIntervalHourToSecond.Precision"/> is then calculated from the 
               number of digits contained within the interval hour component and the <see cref="P:Teradata.Client.Provider.TdIntervalHourToSecond.Scale"/> 
               is set to zero.
            </para>
            </remarks>
            <param name="value">A <see cref="T:Teradata.Client.Provider.TdIntervalHourToMinute"/> interval.</param>
            <returns>A <strong>TdIntervalHourToSecond</strong>.</returns>
        </member>
        <member name="M:Teradata.Client.Provider.TdIntervalHourToMinute.op_Implicit(Teradata.Client.Provider.TdIntervalHourToMinute)~Teradata.Client.Provider.TdIntervalDayToSecond">
            <summary>
               Converts a <see cref="T:Teradata.Client.Provider.TdIntervalHourToMinute"/> to <see cref="T:Teradata.Client.Provider.TdIntervalDayToSecond"/>.
            </summary>
            <remarks>
            <para>
               The <see cref="P:Teradata.Client.Provider.TdIntervalDayToSecond.Precision"/> is set 1 (value = 0) since 
               <paramref name="value"/> does not contain the days interval component and the 
               <see cref="P:Teradata.Client.Provider.TdIntervalDayToSecond.Scale"/> is set to zero, since the 
               <strong>value</strong> does not contain the seconds interval component.
            </para>
            </remarks>
            <param name="value">A <strong>TdIntervalHourToMinute</strong> interval.</param>
            <returns>A <strong>TdIntervalDayToSecond</strong>.</returns>
        </member>
        <member name="P:Teradata.Client.Provider.TdIntervalHourToMinute.IsNull">
            <summary>
               Indicates whether this <see cref="T:Teradata.Client.Provider.TdIntervalHourToMinute"/> instance is <see cref="F:Teradata.Client.Provider.TdIntervalHourToMinute.Null"/>. 
            </summary>
            <value>
               <c>true</c> if this <strong>TdIntervalHourToMinute</strong> is <strong>Null</strong>; 
               <c>false</c> otherwise.
            </value>
        </member>
        <member name="P:Teradata.Client.Provider.TdIntervalHourToMinute.Hours">
            <summary>
               The number of interval hours is returned. The return value ranges from -9999 to 9999.
            </summary>
            <remarks>
            <para>
               A <see cref="T:Teradata.Client.Provider.TdIntervalHourToMinute"/> is represented as [-][hours]:mm.  The 
               minus sign is optional and represents a negative interval of time.  The hours 
               component represents hours and the mm component represents minutes. 
               The value of the Hours property is the hours component.
            </para>
            <para>
               A negative interval will return all properties (hours and minutes) as negative values.
            </para>
            </remarks>
            <exception cref="T:Teradata.Client.Provider.TdException">
               This property is not available when this instance is <see cref="F:Teradata.Client.Provider.TdIntervalHourToMinute.Null"/>.
            </exception>
        </member>
        <member name="P:Teradata.Client.Provider.TdIntervalHourToMinute.Minutes">
            <summary>
               The number of interval minutes is returned. The return value ranges from -59 to 59.
            </summary>
            <remarks>
            <para>
               A <see cref="T:Teradata.Client.Provider.TdIntervalHourToMinute"/> is represented as [-][hours]:mm.  The 
               minus sign is optional and represents a negative interval of time.  The hours 
               component represents hours and the mm component represents minutes. 
               The value of the Minutes property is the minutes component.
            </para>
            <para>
               A negative interval will return all properties (hours and minutes) as negative values.
            </para>
            </remarks>
            <exception cref="T:Teradata.Client.Provider.TdException">
               This property is not available when this instance is <see cref="F:Teradata.Client.Provider.TdIntervalHourToMinute.Null"/>.
            </exception>
        </member>
        <member name="P:Teradata.Client.Provider.TdIntervalHourToMinute.Precision">
            <summary>
               The number of significant digits of the hour is returned. The return value
               ranges from 1 to 4.
            </summary>
            <exception cref="T:Teradata.Client.Provider.TdException">
               This property is not available when this instance is <see cref="F:Teradata.Client.Provider.TdIntervalHourToMinute.Null"/>.
            </exception>
        </member>
        <member name="P:Teradata.Client.Provider.TdIntervalHourToMinute.Value">
            <summary>
               Gets the .NET data type representation of <see cref="T:Teradata.Client.Provider.TdIntervalHourToMinute"/> 
               as a <see cref="T:System.TimeSpan"/>.
            </summary>
            <remarks>
               This property in concept parallels <see cref="M:Teradata.Client.Provider.TdDataReader.GetValue(System.Int32)"/> and
               <see cref="P:Teradata.Client.Provider.TdParameter.Value"/>. That is they all represent the .NET Framework 
               Class Library(FCL) primitive data type that correspond to the Teradata 
               Interval Hour To Minute data type.
            </remarks>
            <value>The interval represented as a  <strong>TimeSpan</strong> is returned.</value>
            <exception cref="T:Teradata.Client.Provider.TdException">
               This property is not available when this instance is <see cref="F:Teradata.Client.Provider.TdIntervalHourToMinute.Null"/>.
            </exception>
        </member>
        <member name="P:Teradata.Client.Provider.TdIntervalHourToMinute.InternalTimespan">
            <summary>
               Return the internal TimeSpan representing the interval.
            </summary>
            <remarks>
               The internal timespan is used in calculating arithmetic operations and in storing
               day-time intervals.
            </remarks>
        </member>
        <member name="P:Teradata.Client.Provider.TdIntervalHourToMinute.ObjectId">
            <summary>
               Gets the instance object identifier.
            </summary>
        </member>
        <member name="P:Teradata.Client.Provider.TdIntervalHourToMinute.IsNegative">
            <summary>
               Indicate if the interval is negative.
            </summary>
            <remarks>
               Timespan.ticks will indicate a negative interval.  Other values (days, hours, minutes, 
                milliseconds) may be 0 and the interval may still be negative.
            </remarks>
        </member>
        <member name="P:Teradata.Client.Provider.TdIntervalHourToMinute.InternalAccessor">
            <summary>
               Accessor to the internal storage for this interval.
            </summary>
        </member>
        <member name="T:Teradata.Client.Provider.TdIntervalHourToSecond">
            <summary>
                <see cref="T:Teradata.Client.Provider.TdIntervalHourToSecond"/> represents an interval of time defining a 
                duration in hours, minutes, seconds and fractional seconds. The hour precision 
                and second scale are configurable.
            </summary>
            <remarks>
            	<para>
                   <strong>TdIntervalHourToSecond</strong> is a .NET Data Provider for Teradata 
                   specific type, designed to support a Teradata Database Interval Hour To Second 
                   data type.
               </para>
            	<para>
                    The <strong>TdIntervalHourToSecond</strong> supports the Teradata Interval 
                    Hour (precision) To Second (scale) data type where precision indicates the
                    number of digits in the hours (from 1 - 4) and scale indicates the 
                    fractional precision for the values of seconds. The scale may range from 0 to 6.
                </para>
                <para>
                    The interval value must be specified in the following format :
                </para>
            	<para>[sign][hours]:[mm]:[ss].[ffffff]</para>
            	<para>Below is the description of each format item.</para>
            	<para>
            		<list type="table">
            			<listheader>
            				<term>Format Item</term>
            				<description>Description</description>
            			</listheader>
            			<item>
            				<term>sign</term>
            				<description>Optional - . Defaults as space character (+).</description>
            			</item>
            			<item>
            				<term>hours</term>
            				<description>Required number of hours  (one to four digits in length).</description>
            			</item>
            			<item>
            				<term>mm</term>
            				<description>Required number of minutes from 00 - 59.</description>
            			</item>
            			<item>
            				<term>ss</term>
            				<description>Required number of seconds from 00 - 59.</description>
            			</item>
            			<item>
            				<term>ffffff</term>
            				<description>Optionally the number of fractional seconds (0 to 6
                            digits in length).</description>
            			</item>
            		</list>
            	</para>
            	<para>
                   The .Net Framework does not have a system type that directly corresponds to
                   the Teradata Database Interval Hour To Second data type. The .NET Data Provider for 
                   Teradata Version 13.0 version and prior versions map Interval Hour To Second to 
                   System.String. With version 13.1 of the provider, <strong>TdIntervalHourToSecond</strong>
                   is available to retrieve and manipulate data of type Interval Hour To Second.
               </para>
            	<para>
                   The range of values for the <strong>TdIntervalHourToSecond</strong> containing an 
                   hour precision of 1 is as follows:
               </para>
            	<para>
            		<table class="xmldoctable" cellspacing="0">
            			<tbody>
            				<tr>
            					<th width="181">Hour Precision</th>
            					<th width="127">Second Scale</th>
            					<th>
            						<para>Minimum</para>
            					</th>
            					<th>
            						<para>Maximum</para>
            					</th>
            				</tr>
            				<tr>
            					<td class="xmldoctable" width="181">1</td>
            					<td width="127">0</td>
            					<td class="xmldoctable">
            						<para>-'9:59:59'</para>
            					</td>
            					<td>
            						<para>'9:59:59'</para>
            					</td>
            				</tr>
            				<tr>
            					<td class="xmldoctable" width="181">1</td>
            					<td width="127">1</td>
            					<td class="xmldoctable">
            						<para>-'9:59:59.9'</para>
            					</td>
            					<td>
            						<para>'9:59:59.9'</para>
            					</td>
            				</tr>
            				<tr>
            					<td class="xmldoctable" width="181">1</td>
            					<td width="127">2</td>
            					<td class="xmldoctable">
            						<para>-'9:59:59.99'</para>
            					</td>
            					<td>
            						<para>'9:59:59.99'</para>
            					</td>
            				</tr>
            				<tr>
            					<td class="xmldoctable" width="181">1</td>
            					<td width="127">3</td>
            					<td class="xmldoctable">
            						<para>-'9:59:59.999'</para>
            					</td>
            					<td>
            						<para>'9:59:59.999'</para>
            					</td>
            				</tr>
            				<tr>
            					<td width="181">1</td>
            					<td width="127">4</td>
            					<td height="34">
            						<para>-'9:59:59.9999'</para>
            					</td>
            					<td>
            						<para>'9:59:59.9999'</para>
            					</td>
            				</tr>
            				<tr>
            					<td width="181">1</td>
            					<td width="127">5</td>
            					<td>
            						<para>-'9:59:59.99999'</para>
            					</td>
            					<td>
            						<para>'9:59:59.99999'</para>
            					</td>
            				</tr>
            				<tr>
            					<td width="181">1</td>
            					<td width="127">6</td>
            					<td>
            						<para>-'9:59:59.999999'</para>
            					</td>
            					<td>
            						<para>'9:59:59.999999'</para>
            					</td>
            				</tr>
            			</tbody>
            		</table>
            	</para>
            	<para>
                   The range of values for hour precision values of 2,3 and 4 all follow the
                   same pattern. For completeness, the following chart displays the range of values
                   for a <strong>TdIntervalHourToSecond</strong> with an hour precision of 4.
               </para>
            	<para>
            		<table class="xmldoctable" cellspacing="0">
            			<tbody>
            				<tr>
            					<th width="181">
            						<para>Hour Precision</para>
            					</th>
            					<th width="127">
            						<para>Second Scale</para>
            					</th>
            					<th>
            						<para>Minimum</para>
            					</th>
            					<th>
            						<para>Maximum</para>
            					</th>
            				</tr>
            				<tr>
            					<td class="xmldoctable" width="181">4</td>
            					<td width="127">0</td>
            					<td class="xmldoctable">
            						<para>-'9999:59:59'</para>
            					</td>
            					<td>
            						<para>'9999:59:59'</para>
            					</td>
            				</tr>
            				<tr>
            					<td class="xmldoctable" width="181">4</td>
            					<td width="127">1</td>
            					<td class="xmldoctable">
            						<para>-'9999:59:59.9'</para>
            					</td>
            					<td>
            						<para>'9999:59:59.9'</para>
            					</td>
            				</tr>
            				<tr>
            					<td class="xmldoctable" width="181">4</td>
            					<td width="127">2</td>
            					<td class="xmldoctable">
            						<para>-'9999:59:59.99'</para>
            					</td>
            					<td>
            						<para>'9999:59:59.99'</para>
            					</td>
            				</tr>
            				<tr>
            					<td class="xmldoctable" width="181">4</td>
            					<td width="127">3</td>
            					<td class="xmldoctable">
            						<para>-'9999:59:59.999'</para>
            					</td>
            					<td>
            						<para>'9999:59:59.999'</para>
            					</td>
            				</tr>
            				<tr>
            					<td width="181">4</td>
            					<td width="127">4</td>
            					<td height="34">
            						<para>-'9999:59:59.9999'</para>
            					</td>
            					<td>
            						<para>'9999:59:59.9999'</para>
            					</td>
            				</tr>
            				<tr>
            					<td width="181">4</td>
            					<td width="127">5</td>
            					<td>
            						<para>-'9999:59:59.99999'</para>
            					</td>
            					<td>
            						<para>'9999:59:59.99999'</para>
            					</td>
            				</tr>
            				<tr>
            					<td width="181">4</td>
            					<td width="127">6</td>
            					<td>
            						<para>-'9999:59:59.999999'</para>
            					</td>
            					<td>
            						<para>'9999:59:59.999999'</para>
            					</td>
            				</tr>
            			</tbody>
            		</table>
            	</para>
                <para>
                    <strong>TdIntervalHourToSecond</strong> also supports 
                    <see cref="F:Teradata.Client.Provider.TdIntervalHourToSecond.Null"/>. This is a very important feature.
                    An application is no longer required to call
                    <see cref="M:Teradata.Client.Provider.TdDataReader.IsDBNull(System.Int32)"/> before invoking the corresponding 
                    TdDataReader "Get" method.  This will improve overall performance.
                </para>
                <para>
                    A <strong>TdIntervalHourToSecond</strong> structure allows arithmetic,
                    comparision and conversion operations to be performed. 
                </para>
            	<para>
                    A <strong>TdIntervalHourToSecond</strong> may also be specified as an in, out, 
                    or in/out parameter to a stored procedure. In order to maintain backward  
                    compatibility with previous versions of the provider (release 13.0 and prior), 
                    a Connection String Attribute
                    <see cref="P:Teradata.Client.Provider.TdConnectionStringBuilder.EnableTdIntervals">EnableTdIntervals</see>
                    has been added. When the <strong>EnableTdIntervals</strong> attribute
                    is <c>true</c>, <see cref="P:Teradata.Client.Provider.TdParameter.ProviderSpecificValue"/> will
                    return the data as the provider specific type of 
                    <strong>TdIntervalHourToSecond</strong>. When <strong>EnableTdIntervals</strong>
                    is <c>false</c>, <strong>TdParameter.ProviderSpecificValue</strong>
                    will return the data as a .NET Framework Library data type of 
                    <see cref="T:System.String"/>. 
                </para>
            	<para>
                    The <see cref="P:Teradata.Client.Provider.TdParameter.Value"/> will also return the .NET Framework Library
                    data type of <strong>System.String</strong> when <strong>EnableTdIntervals</strong>
                    is <c>false</c> to maintain backward compatibility. 
                    The <strong>TdParameter.Value</strong> will return a .NET Framework data type of
                    <see cref="T:System.TimeSpan"/> when <strong>EnableTdIntervals</strong>
                    is <c>true</c>.
                </para>
            	<para>For more information on the Teradata Interval Hour To Second data type please
                see the Teradata Database SQL Reference - 'Data Types and Literals'.</para>
            </remarks>
            <example>
            	<para>The following example shows how to retrieve a <strong>TdIntervalHourToSecond</strong>,
                   modify the interval, and then update the table.
               </para>
               <code lang="CS">
            Public void IntervalExample(TdCommand cmd, String model)
            {
               cmd.Parameters.Clear();
               
               cmd.CommandText = "SELECT StartDate, LeaseReturn, DelayPeriod " +
                                 "FROM AutoLeases " +
                                 "WHERE Model = ?";
             
               cmd.CommandType = CommandType.Text;
             
               cmd.Parameters.Add(null, TdType.VarChar, 10,
                    ParameterDirection.Input, true, 0, 0, null,    
                    DataRowVersion.Default, model);
             
               Int32 row = 0;
               TdDate [] startDate;
               TdTimestamp [] leaseReturn;
               TdIntervalHourToSecond [] leaseLen;
               
               using (TdDataReader dr = cmd.ExecuteReader())
               {
                  startDate = new TdDate[dr.RecordsReturned];
                  leaseReturn = new TdTimestamp[dr.RecordsReturned];
                  leaseLen = new TdIntervalHourToSecond [dr.RecordsReturned];
             
                  // Specifying an interval of 7 days, 1 hour, 30 minutes 
                  // with an hour precision of 4 and 0 scale.
                  TdIntervalHourToSecond leaseReturnExtension = new TdIntervalHourToSecond(169, 30, 0, 0, 4, 0);
               
                  while (dr.Read())
                  {
                     // Retrieving the dates
                     startDate[row] = dr.GetTdDate(0);
                     leaseReturn[row] = dr.GetTimestamp(1);
                     leaseLen[row] = dr.GetTdIntervalHourToSecond(2);
             
                     // Adding extension to the lease return
                     leaseReturn[row] = leaseReturn[row] + leaseReturnExtension;
             
                     // Adding extension to the lease length;
                     leaseLen[row] = leaseLen[row] + leaseReturnExtension;
             
                     row++;
                  } 
               }
             
               cmd.Parameters.Clear();
             
               cmd.CommandText = "UPDATE AutoLeases " +
                                 "SET LeaseReturn = ?, LeaseLen = ? " +
                                 "WHERE Model = ?";
             
               cmd.Parameters.Add(null, TdType.Timestamp, 0,
                     ParameterDirection.Input, true, 0, 0, null,    
                     DataRowVersion.Default, null);
             
               cmd.Parameters.Add(null, TdType.IntervalHourToSecond, 0,
                     ParameterDirection.Input, true, 0, 0, null,    
                     DataRowVersion.Default, null);
             
               cmd.Parameters.Add(null, TdType.VarChar, 9,
                     ParameterDirection.Input, true, 0, 0, null,    
                     DataRowVersion.Default, model);
             
               row--;
               while(row &gt;= 0)
               {
                  cmd.Parameters[0].Value = leaseReturn[row];
                  cmd.Parameters[1].Value = leaseLen[row];
                  cmd.Parameters[2].Value = model;
             
                  cmd.ExecuteNonQuery();
                  row--;
               }
            }
            </code>
            </example>
            <seealso cref="P:Teradata.Client.Provider.TdConnectionStringBuilder.EnableTdIntervals"/> 
            <seealso cref="!:IntervalConnectionString.html">Interval Connection String Attribute</seealso>
            <seealso cref="!:EnableProviderSpecificTypes.html">Enabling Provider Specific Types</seealso>
            <seealso cref="!:IntervalTypeOverview.html">Provider Specific Type:  Interval Type Overview</seealso>
        </member>
        <member name="F:Teradata.Client.Provider.TdIntervalHourToSecond.MaxPrecision">
            <summary>
               A constant representing the maximum number of significant digits in the 
               <see cref="P:Teradata.Client.Provider.TdIntervalHourToSecond.Hours"/> interval component.
            </summary>
            <remarks>
               The value of this constant is 4.
            </remarks>
        </member>
        <member name="F:Teradata.Client.Provider.TdIntervalHourToSecond.MinPrecision">
            <summary>
               A constant representing the minimum number of significant digits in the 
               <see cref="P:Teradata.Client.Provider.TdIntervalHourToSecond.Hours"/> interval component.
            </summary>
            <remarks>
               The value of this constant is 1.
            </remarks>
        </member>
        <member name="F:Teradata.Client.Provider.TdIntervalHourToSecond.MaxScale">
            <summary>
               A constant representing the maximum scale of the 
               <see cref="P:Teradata.Client.Provider.TdIntervalHourToSecond.Microseconds"/> interval component.
            </summary>
            <remarks>The value of this constant is 6.</remarks>
        </member>
        <member name="F:Teradata.Client.Provider.TdIntervalHourToSecond.MinScale">
            <summary>
               A constant representing the minimum scale of the 
               <see cref="P:Teradata.Client.Provider.TdIntervalHourToSecond.Microseconds"/> interval component.
            </summary>
            <remarks>The value of this constant is 0.</remarks>
        </member>
        <member name="F:Teradata.Client.Provider.TdIntervalHourToSecond.Null">
            <summary>
               Gets a Null <see cref="T:Teradata.Client.Provider.TdIntervalHourToSecond"/> instance.
            </summary>
            <value>
               Returns a <strong>TdIntervalHourToSecond</strong> instance that represents a 
               <strong>Null</strong> value.
            </value>
            <remarks>
               Conceptually it is the constructor for a <strong>Null</strong> instance of 
               <strong>TdIntervalHourToSecond</strong>.
            </remarks>
            <example>
            This example shows how to send a <strong>Null</strong> value to a Teradata database.
            <code>
            TdParameter col1 = new TdParameter();
            col1.TdType = TdType.TdIntervalHourToSecond;
            col1.Value = TdIntervalHourToSecond.Null;
            </code>
            </example>
        </member>
        <member name="F:Teradata.Client.Provider.TdIntervalHourToSecond.Zero">
            <summary>
               Gets an <see cref="T:Teradata.Client.Provider.TdIntervalHourToSecond"/> instance that contains all zero elements
               for each interval field.
            </summary>
            <remarks>
               A Zero <Strong>TdIntervalHourToSecond</Strong> may be used to determine whether
               other instances of intervals represent postive, negative or non-zero intervals.
            </remarks>
            <example>
            This example shows how to determine if an interval is negative.
            <code>
            TdIntervalDayTo Second htsInterval = new TdIntervalHourToSecond(0, 0, 0, -100000);
            if (htsInterval &lt; TdIntervalHourToSecond.Zero)
            {
               Console.WriteLine("The Interval is negative");
            }
            // The output of the console is "The interval is negative"
            </code>
            </example>
        </member>
        <member name="F:Teradata.Client.Provider.TdIntervalHourToSecond.MinValue">
            <summary>
               The smallest possible value for <see cref="T:Teradata.Client.Provider.TdIntervalHourToSecond"/>.
            </summary>
            <remarks>
               The value is -'9999:59:59.999999'.
            </remarks>
        </member>
        <member name="F:Teradata.Client.Provider.TdIntervalHourToSecond.MaxValue">
            <summary>
               The largest possible value for <see cref="T:Teradata.Client.Provider.TdIntervalHourToSecond"/>.
            </summary>
            <remarks>
               The value is '9999:59:59.999999'.
            </remarks>
        </member>
        <member name="M:Teradata.Client.Provider.TdIntervalHourToSecond.#ctor(System.Int32,System.Int32,System.Int32,System.Int32,System.Byte,System.Byte)">
            <summary>
               An instance of <see cref="T:Teradata.Client.Provider.TdIntervalHourToSecond"/> is created from time components 
               specified as integers while precision and scale components are specified as bytes.
            </summary>
            <remarks>
            <para>
               The number of hours, minutes, seconds and microseconds are constructed into a
               <strong>TdIntervalHourToSecond</strong>.  The microseconds parameter represents 
               10 ^-6 seconds and the microsecond parameter is divided by 10^-6 (.000001) to create 
               a fractional number of seconds. The supplied scale is used to used to truncate any fractional 
               seconds at the position indicated by the scale.
            </para>
            <para>
               For example, a microseconds value of 12345678 and a scale of 6 will be divided by 10^-6 
               and truncated at the 6th position resulting in a value of .123456.  A microseconds value of 
               123 and a scale of 6 will result in a value of .000123.
            </para>
            <para>
               All values are converted into a <strong>TdIntervalHourToSecond</strong> to 
               determine if the <see cref="F:Teradata.Client.Provider.TdIntervalHourToSecond.MinValue"/> or the <see cref="F:Teradata.Client.Provider.TdIntervalHourToSecond.MaxValue"/>
               values are exceeded.  If the values are not exceeded but the resulting hours component 
               exceeds the supplied <paramref name="precision"/> value, an exception is generated.
            </para>
            <para>
               For example a constructor for TdIntervalHourToSecond(44, 6001, 10, 90, 2, 6) requests
               44 hours, 6001 minutes, 10 seconds and 90 microseconds with a precision of 2 and 
               a scale of 6. The resulting <strong>TdIntervalHourToSecond</strong> literal value of 
               '144:01:10.000090' contains an hours value which cannot be represented in 2 
               digits.  Therefore an exception is generated, even though the <strong>MinValue</strong> 
               and the <strong>MaxValue</strong> values have not been exceeded.
            </para>
            <para>
               Negative constructor parameters may be supplied to represent negative durations of time.
               Mixed positive and negative constructor parameters are added together that result in a
               negative or positive <strong>TdIntervalHourToSecond</strong>.  For instance, an hour
               value of 20, a minutes value of -4900, a seconds value of 30, a microsecond value of 123456, 
               a second precision of 4 and a scale of 6 will result in a <strong>TdIntervalHourToSecond</strong> 
               interval value of -'61:40:30.123456'.
            </para>
            </remarks>
            <exception cref="T:System.OverflowException" caption="OverflowException">
               The parameters specify a <strong>TdIntervalHourToSecond</strong> value less than 
               <see cref="F:Teradata.Client.Provider.TdIntervalHourToSecond.MinValue"/> or greater than <see cref="F:Teradata.Client.Provider.TdIntervalHourToSecond.MaxValue"/>.
            </exception>
            <exception cref="T:System.ArgumentOutOfRangeException" caption="ArgumentOutOfRangeException">
               The <strong>precision</strong> or <strong>scale</strong> parameters are outside the 
               minimum or maximum range of values.
            </exception>
            <exception cref="T:System.ArgumentException" caption="ArgumentException">
               The <strong>precision</strong> parameter is not large enough to represent the 
               number of hours.
            </exception>
            <overloads>
               Initializes a new instance of <strong>TdIntervalHourToSecond</strong>.
            </overloads>
            <param name="hours">Number of hours.</param>
            <param name="minutes">Number of minutes.</param>
            <param name="seconds">Number of seconds.</param>
            <param name="microseconds">The fractional number of seconds.</param>
            <param name="precision">Number of significant digits of the hour.</param>
            <param name="scale">The number of decimal places for the second.</param>
        </member>
        <member name="M:Teradata.Client.Provider.TdIntervalHourToSecond.#ctor(System.Int32,System.Int32,System.Int32,System.Int32)">
            <summary>
               An instance of <see cref="T:Teradata.Client.Provider.TdIntervalHourToSecond"/> is created from the time  
               components specified as integers. 
            </summary>
            <remarks>
            <para>
               The number of hours, minutes, seconds and microseconds are constructed into a
               <strong>TdIntervalHourToSecond</strong> and evaluated against  <see cref="F:Teradata.Client.Provider.TdIntervalHourToSecond.MinValue"/>
               and <see cref="F:Teradata.Client.Provider.TdIntervalHourToSecond.MaxValue"/>.  The microseconds parameter represents 10 ^-6 seconds
               and the microsecond parameter is divided by 10^-6 (.000001) to create a fractional number 
               of seconds. The <see cref="P:Teradata.Client.Provider.TdIntervalHourToSecond.Scale"/> is then calculated from the number of fractional 
               seconds required. The <see cref="P:Teradata.Client.Provider.TdIntervalHourToSecond.Precision"/> is calculated from the number of digits 
               contained within the interval hour component. 
            </para>
            <para>
               For example 100 hours, 75 minutes, 300 seconds and 455666 microseconds
               is first converted into a <strong>TdIntervalHourToSecond</strong> and evaluated 
               against <strong>MinValue</strong> and <strong>MaxValue</strong>. The  
               <strong>TdIntervalMinuteToSecond</strong> literal representation results in a  
               <strong>TdIntervalMinuteToSecond</strong> value of '101:20:00.455666'. 
               Precision is calculated to be a value of 3 representing three significant digits of 101 hours.
               The scale is calculated to be 6 from the number of decimal places right of the seconds
               interval which equals the <see cref="F:Teradata.Client.Provider.TdIntervalHourToSecond.MaxScale"/> value.
            </para>
            <para>
               Negative constructor parameters may be supplied to represent negative durations of time.
               Mixed positive and negative constructor parameters are added together that result in a
               negative or positive <strong>TdIntervalHourToSecond</strong>.  For instance, an hour
               value of 20, a minutes value of -4900, a seconds value of 30, and a microsecond value of  
               123456 will result in a <strong>TdIntervalHourToSecond</strong> interval value
               of -'61:40:30.123456' with a calculated precision of 2 and a calculated 
               scale of 6.
            </para>
            </remarks>
            <exception cref="T:System.OverflowException" caption="OverflowException">
               The parameters specify a <strong>TdIntervalHourToSecond</strong> value less than 
               <see cref="F:Teradata.Client.Provider.TdIntervalHourToSecond.MinValue"/> or greater than <see cref="F:Teradata.Client.Provider.TdIntervalHourToSecond.MaxValue"/>.
            </exception>
            <param name="hours">Number of hours.</param>
            <param name="minutes">Number of minutes.</param>
            <param name="seconds">Number of seconds.</param>
            <param name="microseconds">The number of fractional seconds.</param>
        </member>
        <member name="M:Teradata.Client.Provider.TdIntervalHourToSecond.#ctor(System.TimeSpan)">
            <summary>
               An instance of <see cref="T:Teradata.Client.Provider.TdIntervalHourToSecond"/> is created from a <see cref="T:System.TimeSpan"/>.
            </summary>
            <remarks>
            <para>
               The  <strong>TimeSpan</strong> value is converted into a 
               <strong>TdIntervalHourToSecond</strong> and evaluated against <see cref="F:Teradata.Client.Provider.TdIntervalHourToSecond.MinValue"/> 
               and <see cref="F:Teradata.Client.Provider.TdIntervalHourToSecond.MaxValue"/>.  The <see cref="P:Teradata.Client.Provider.TdIntervalHourToSecond.Precision"/> is then calculated from the 
               number of digits contained within the interval hour component and the <see cref="P:Teradata.Client.Provider.TdIntervalHourToSecond.Scale"/> 
               is calculated from the number of decimal places required to represent the fractional seconds.
            </para>
            <para>
               After conversion of the <strong>TimeSpan</strong> value into 
               <strong>TdIntervalHourToSecond</strong>, any fractional seconds will be truncated
               according the the <see cref="F:Teradata.Client.Provider.TdIntervalHourToSecond.MaxScale"/> value of 6 decimal places.
               For example, a TimeSpan value created with a <see cref="P:System.TimeSpan.Ticks"/> value
               of 368601234567 results in a value of 0 days, 10 hours, 14 minutes and 
               20.1234567 seconds.  The <strong>TdIntervalHourToSecond</strong> literal 
               representation results in a <strong>TdIntervalHourToSecond</strong> value of  
               '10:14:20.123456'. The .1234567 seconds value is truncated by  
               one significant digit. Precision is calculated to be a value of 2 representing two significant 
               digits in the hour.
            </para>
            </remarks>
            <exception cref="T:System.OverflowException" caption="OverflowException">
               The <strong>timespan</strong> parameter specifies a 
               <strong>TdIntervalHourToSecond</strong> value less than <see cref="F:Teradata.Client.Provider.TdIntervalHourToSecond.MinValue"/> 
               or greater than <see cref="F:Teradata.Client.Provider.TdIntervalHourToSecond.MaxValue"/>.
            </exception>
            <param name="timeSpan">
               A <strong>TimeSpan</strong> to initialize <strong>TdIntervalHourToSecond</strong>.
            </param>
        </member>
        <member name="M:Teradata.Client.Provider.TdIntervalHourToSecond.#ctor(System.TimeSpan,System.Byte,System.Byte)">
            <summary>
               An instance of <see cref="T:Teradata.Client.Provider.TdIntervalHourToSecond"/> is created using a <see cref="T:System.TimeSpan"/> 
               specifying the precision and the scale as bytes.
            </summary>
            <remarks>
            <para>
               The  <strong>TimeSpan</strong> value is converted into a  
               <strong>TdIntervalHourToSecond</strong> and evaluated against <see cref="F:Teradata.Client.Provider.TdIntervalHourToSecond.MinValue"/>  
               and <see cref="F:Teradata.Client.Provider.TdIntervalHourToSecond.MaxValue"/>.  If the values are not exceeded but the resulting hours 
               component exceeds the supplied parameter <paramref name="precision"/> value, 
               an exception is generated.
            </para>
            <para>
               After conversion of the <strong>TimeSpan</strong> value into a
               <strong>TdIntervalHourToSecond</strong>, any fractional seconds will be truncated
               according the the supplied parameter <paramref name="scale"/>.
            </para>
            <para>
               For example, a TimeSpan value created with a <see cref="P:System.TimeSpan.Ticks"/> value
               of 368601234567 results in a value of 0 days, 10 hours, 14 minutes and
               20.1234567 seconds.  The <strong>TdIntervalHourToSecond</strong> literal 
               representation results in a <strong>TdIntervalHourToSecond</strong> value of  
               '10:14:20.123456'. The .1234567 seconds value will truncated by  
               the supplied parameter <paramref name="scale"/>. The supplied parameter 
               <paramref name="precision"/> must be a value greater than or equal to 2 and 
               less than or equal to <see cref="F:Teradata.Client.Provider.TdIntervalHourToSecond.MaxScale"/> to eliminate exceptions due to 
               truncation of the minutes component.
            </para>
            </remarks>
            <exception cref="T:System.OverflowException" caption="OverflowException">
               The <strong>timespan</strong> parameter specifies a 
               <strong>TdIntervalHourToSecond</strong> value less than <see cref="F:Teradata.Client.Provider.TdIntervalHourToSecond.MinValue"/> 
               or greater than <see cref="F:Teradata.Client.Provider.TdIntervalHourToSecond.MaxValue"/>.
            </exception>
            <exception cref="T:System.ArgumentOutOfRangeException" caption="ArgumentOutOfRangeException">
               The <strong>precision</strong> or <strong>scale</strong> parameters are outside the 
               minimum or maximum range of values.
            </exception>
            <exception cref="T:System.ArgumentException" caption="ArgumentException">
               The <strong>precision</strong> parameter is not large enough to represent the 
               number of hours.
            </exception>
            <param name="timeSpan">
               A TimeSpan to initialize <strong>TdIntervalHourToSecond</strong>.
            </param>
            <param name="precision">The number of significant digits of the hour.</param>
            <param name="scale">The number of decimal places for the second.</param>
        </member>
        <member name="M:Teradata.Client.Provider.TdIntervalHourToSecond.CompareTo(Teradata.Client.Provider.TdIntervalHourToSecond)">
            <summary>
               Compares this instance to the specified <see cref="T:Teradata.Client.Provider.TdIntervalHourToSecond"/>  
               parameter <paramref name="other"/>.
            </summary>
            <returns>
               The result of the comparison is returned as a signed integer.
            </returns>
            <remarks>
            	<para>
                    The integer returned when this instance is compared to <paramref name="other"/>
                    indicates the following:
                </para>
            	<para>
            		<list type="table">
            			<listheader>
            				<term>Return Value</term>
            				<description>Meaning</description>
            			</listheader>
            			<item>
            				<term>Less than Zero</term>
            				<description>
            					<para>
                                    This instance is less than <paramref name="other"/>
                                </para>
            					<para>-or-</para>
            					<para>This instance is <see cref="F:Teradata.Client.Provider.TdIntervalHourToSecond.Null"/> and
                                   <paramref name="other"/> is non-null.
                               </para>
            				</description>
            			</item>
            			<item>
            				<term>Zero</term>
            				<description>
            					<para>
                                    This instance is equal to <paramref name="other"/>
                                </para>
            					<para>-or-</para>
            					<para>
                                   This instance is <Strong>Null</Strong> and <paramref name="other"/> is
                                   <Strong>Null</Strong>.
                               </para>
            				</description>
            			</item>
            			<item>
            				<term>Greater than Zero</term>
            				<description>
            					<para>
                                    This instance is greater than
                                    <paramref name="other"/>
                                </para>
            					<para>-or-</para>
            					<para>
            						<paramref name="other"/> is <Strong>Null</Strong> and this instance is non-null.
                                </para>
            				</description>
            			</item>
            		</list>
            	</para>
            </remarks>
            <param name="other">The <strong>TdIntervalHourToSecond</strong> to compare.</param>
        </member>
        <member name="M:Teradata.Client.Provider.TdIntervalHourToSecond.CompareTo(System.Object)">
            <summary>
               Compares this instance to the specified <see cref="T:Teradata.Client.Provider.TdIntervalHourToSecond"/> 
               parameter <paramref name="obj"/>. 
            </summary>
            <returns>
               The result of the comparison is returned as a signed integer.
            </returns>
            <remarks>
            	<para>
                    The integer returned when this instance is compared to <paramref name="obj"/>
                    indicates the following:
                </para>
            	<para>
            		<list type="table">
            			<listheader>
            				<term>Return Value</term>
            				<description>Meaning</description>
            			</listheader>
            			<item>
            				<term>Less than Zero</term>
            				<description>
            					<para>This instance is less than <paramref name="obj"/></para>
            					<para>-or-</para>
            					<para>
                                   This instance is <see cref="F:Teradata.Client.Provider.TdIntervalHourToSecond.Null"/> and <paramref name="obj"/> is non-null.
                               </para>
            				</description>
            			</item>
            			<item>
            				<term>Zero</term>
            				<description>
            					<para>
                                    This instance is equal to <paramref name="obj"/>
                                </para>
            					<para>-or-</para>
            					<para>
                                   This instance is <Strong>Null</Strong> and <paramref name="obj"/>
                                    is <Strong>Null</Strong>.
                               </para>
            				</description>
            			</item>
            			<item>
            				<term>Greater than Zero</term>
            				<description>
            					<para>
                                    This instance is greater than <paramref name="obj"/>.
                                </para>
            					<para>-or-</para>
            					<para>
            						<paramref name="obj"/> is <Strong>Null</Strong> and this instance is non-null
                                </para>
            					<para>-or-</para>
            					<para>
            						<paramref name="obj"/> is a <c>null</c> reference.
                                </para>
            				</description>
            			</item>
            		</list>
            	</para>
              <para>
                <paramref name="obj"/> must be an instance of <strong>TdIntervalHourToSecond</strong> 
                type or <c>null</c> reference.
            </para>
            </remarks>
            <exception cref="T:System.ArgumentException">
               <paramref name="obj"/> is not of same type as <strong>TdIntervalHourToSecond</strong>.
            </exception>
            <seealso cref="M:Teradata.Client.Provider.TdIntervalHourToSecond.CompareTo(Teradata.Client.Provider.TdIntervalHourToSecond)"/>
            <overloads>
               Compares this instance to the supplied <strong>TdIntervalHourToSecond</strong> 
               and returns whether this instance is less than, equal or greater than the supplied
               <strong>TdIntervalHourToSecond</strong>.
            </overloads>
            <param name="obj">A <strong>TdIntervalHourToSecond</strong> object to compare.</param>
        </member>
        <member name="M:Teradata.Client.Provider.TdIntervalHourToSecond.Equals(Teradata.Client.Provider.TdIntervalHourToSecond)">
            <summary>
               Compares this instance and another <see cref="T:Teradata.Client.Provider.TdIntervalHourToSecond"/> to determine 
               whether they are equal. 
            </summary>
            <returns>
               <c>true</c> if the two <strong>TdIntervalHourToSecond</strong> objects are equal, 
               <c>false</c> otherwise.
            </returns>
            <remarks>
            	<para>
            		The return value is <c>true</c> if the instance is 
                    equal to the <paramref name="other"/>, <c>false</c> otherwise.
                </para>
            	<para>
            		<list type="table">
            			<listheader>
            				<term>Return Value</term>
            				<description>Description</description>
            			</listheader>
            			<item>
            				<term><c>true</c></term>
                            <description>
                                <para>
                                   This instance and <paramref name="other"/> are <see cref="F:Teradata.Client.Provider.TdIntervalHourToSecond.Null"/>
                                </para>
                                <para>-or-</para>
                                <para>This instance is equal to <paramref name="other"/>.</para>
                            </description>
            			</item>
            			<item>
            				<term><c>false</c></term>
                            <description>
                            <para>
                               This instance is <strong>Null</strong> and <paramref name="other"/> 
                               is not <strong>Null</strong>
                            </para>
                            <para>-or-</para>
                            <para>
                               This instance is not <strong>Null</strong> and <paramref name="other"/> 
                               is <strong>Null</strong>
                            </para>
                            <para>-or-</para>
                            <para>This instance is not equal to <paramref name="other"/>.</para>
                            </description>
            			</item>
            		</list>
            	</para>
            </remarks>
            <overloads>
               Returns a value indicating whether two instances of 
               <strong>TdIntervalHourToSecond</strong> are equal.
            </overloads>
            <param name="other">
               <strong>TdIntervalHourToSecond</strong> that will be compared to this instance 
               of <strong>TdIntervalHourToSecond</strong>.
            </param>
        </member>
        <member name="M:Teradata.Client.Provider.TdIntervalHourToSecond.Equals(Teradata.Client.Provider.TdIntervalHourToSecond,Teradata.Client.Provider.TdIntervalHourToSecond)">
            <summary>
               Compares two <see cref="T:Teradata.Client.Provider.TdIntervalHourToSecond"/> instances to determine 
               whether they are equal.
            </summary>
            <returns>
               <c>true</c> if the two <strong>TdIntervalHourToSecond</strong> instances are equal, 
               <c>false</c> otherwise.
            </returns>
            <remarks>
            	<para>
            		The return value is <c>true</c> if the <paramref name="left"/> is 
                    equal to the <paramref name="right"/>, <c>false</c> otherwise.
                </para>
            	<para>
            		<list type="table">
            			<listheader>
            				<term>Return Value</term>
            				<description>Description</description>
            			</listheader>
            			<item>
            				<term><c>true</c></term>
                            <description>
                                <para><paramref name="left"/> is equal to <paramref name="right"/></para>
                                <para>-or-</para>
                                <para>
                                   <paramref name="left"/> and <paramref name="right"/> are <see cref="F:Teradata.Client.Provider.TdIntervalHourToSecond.Null"/>.
                                </para>
                            </description>
            			</item>
            			<item>
            				<term><c>false</c></term>
                            <description>
                              <para>
                                <paramref name="left"/> is not equal to <paramref name="right"/>
                              </para>
                              <para>-or-</para>
                              <para>
                                   <paramref name="left"/> is not <strong>Null</strong> and  
                                   <paramref name="right"/> is <strong>Null</strong>
                               </para>
                              <para>-or-</para>
                              <para>
                                   <paramref name="left"/> is <strong>Null</strong> and  
                                   <paramref name="right"/> is not <strong>Null</strong>.
                               </para>
                            </description>
            			</item>
            		</list>
            	</para>
            </remarks>
            <example>
                The following code example uses various comparison methods and operators.
                <code lang="CS">
            TdIntervalHourToSecond firstInterval = new TdIntervalHourToSecond(5, 15, 0);
            TdIntervalHourToSecond secondInterval = new TdIntervalHourToSecond(20, 15, 0);
             
            // The following comparison methods and operators are equivalent
            if (false == TdIntervalHourToSecond.Equals(firstInterval, secondInterval) ||
                firstInterval != secondInterval ||
                true == TdIntervalHourToSecond.NotEquals(firstInterval, secondInterval) )
            {
               Console.WriteLine(“firstInterval does not equal secondInterval”);
            }
                </code>
            </example>
            <overloads>
               Returns a value indicating whether two instances of 
               <strong>TdIntervalHourToSecond</strong> are equal.
            </overloads>
            <param name="left">A <strong>TdIntervalHourToSecond</strong> instance.</param>
            <param name="right">A <strong>TdIntervalHourToSecond</strong> instance.</param>
        </member>
        <member name="M:Teradata.Client.Provider.TdIntervalHourToSecond.Compare(Teradata.Client.Provider.TdIntervalHourToSecond,Teradata.Client.Provider.TdIntervalHourToSecond)">
            <summary>
                Two <see cref="T:Teradata.Client.Provider.TdIntervalHourToSecond"/> intervals are compared and a value
                 is returned that indicates <paramref name="left"/> is greater than, less than or equal to
                <paramref name="right"/>.
            </summary>
            <returns>
               The result of the comparison is returned as a signed integer.
            </returns>
            <remarks>
            	<list type="table">
            		<listheader>
            			<term>Return Value</term>
            			<description>Description</description>
            		</listheader>
            		<item>
            			<term>Less than Zero</term>
            			<description>
                           <para><paramref name="left"/> is less than <paramref name="right"/></para>
            				<para>-or-</para>
                           <para>
                              <paramref name="left"/> is <see cref="F:Teradata.Client.Provider.TdIntervalHourToSecond.Null"/>
                              and <paramref name="right"/> is not <strong>Null</strong>.
                           </para>
                        </description>
            		</item>
            		<item>
            			<term>Zero</term>
            			<description>
            				<para><paramref name="left"/> equals <paramref name="right"/></para>
            				<para>-or-</para>
                           <para>
                                <paramref name="left"/> is <strong>Null</strong> 
                                 and <paramref name="right"/> is <strong>Null</strong>.
                           </para>
                        </description>
            		</item>
            		<item>
            			<term>Greater than Zero</term>
            			<description>
            				<para><paramref name="left"/> is greater than <paramref name="right"/></para>
            				<para>-or-</para>
            				<para><paramref name="left"/> is not <strong>Null</strong> and
                            <paramref name="right"/> is <strong>Null</strong>.</para>
                        </description>
            		</item>
            	</list>
            </remarks>
            <param name="left">An instance of <strong>TdIntervalHourToSecond</strong>.</param>
            <param name="right">An instance of <strong>TdIntervalHourToSecond</strong>.</param>
        </member>
        <member name="M:Teradata.Client.Provider.TdIntervalHourToSecond.NotEquals(Teradata.Client.Provider.TdIntervalHourToSecond,Teradata.Client.Provider.TdIntervalHourToSecond)">
            <summary>
                Compares two <see cref="T:Teradata.Client.Provider.TdIntervalHourToSecond"/> interval types to determine 
                whether the <paramref name="left"/> is not equal to <paramref name="right"/>.
            </summary>
            <returns>
            	<para>
            		<c>true</c> indicates <paramref name="left"/> is not equal to
                    <paramref name="right"/>, <c>false</c> otherwise.
                </para>
            	<para>
            		<list type="table">
            			<listheader>
            				<term>Return Value</term>
            				<description>Description</description>
            			</listheader>
            			<item>
            				<term><c>true</c></term>
            				<description>
            					<para>
            						<paramref name="left"/> is less than or greater
                                    than <paramref name="right"/>
            					</para>
            					<para>-or-</para>
            					<para>
            						Either <paramref name="left"/> or <paramref name="right"/> is
                                   <see cref="F:Teradata.Client.Provider.TdIntervalHourToSecond.Null"/>.
                               </para>
            				</description>
            			</item>
            			<item>
            				<term><c>false</c></term>
            				<description>
            					<para>
            						<paramref name="left"/> is equal to
                                    <paramref name="right"/>
            					</para>
            					<para>-or-</para>
            					<para>
            						<paramref name="left"/> and <paramref name="right"/> are
                                   <strong>Null</strong>.
                               </para>
            				</description>
            			</item>
            		</list>
            	</para>
            </returns>
            <param name="left">An instance of <strong>TdIntervalHourToSecond</strong>.</param>
            <param name="right">An instance of <strong>TdIntervalHourToSecond</strong>.</param>
        </member>
        <member name="M:Teradata.Client.Provider.TdIntervalHourToSecond.GreaterThan(Teradata.Client.Provider.TdIntervalHourToSecond,Teradata.Client.Provider.TdIntervalHourToSecond)">
            <summary>
               Determines whether the <paramref name="left"/> is greater than the <paramref name="right"/>.
            </summary>
            <returns>
            	<para>
            		<c>true</c> indicates the <paramref name="left"/> is greater than
                    the <paramref name="right"/>, <c>false</c> otherwise.
                </para>
            	<para>
            		<list type="table">
            			<listheader>
            				<term>Return Value</term>
            				<description>Description</description>
            			</listheader>
            			<item>
            				<term><c>true</c></term>
            				<description>
            					<paramref name="left"/> and
                                <paramref name="right"/> are not
                                <see cref="F:Teradata.Client.Provider.TdIntervalHourToSecond.Null"/> and
                                <paramref name="left"/> is greater than
                                <paramref name="right"/>.
            				</description>
            			</item>
            			<item>
            				<term><c>false</c></term>
            				<description>
            					<para>
                                    The <paramref name="left"/> is less than or equal
                                    to <paramref name="right"/>
            					</para>
            					<para>-or-</para>
            					<para>
                                   <paramref name="left"/> and / or <paramref name="right"/>
                                   is <strong>Null</strong>.
                                </para>
            				</description>
            			</item>
            		</list>
            	</para>
            </returns>
            <remarks>
            	<para>
                    Comparison operators always return <c>false</c> if one of the operands is
                    <strong>Null</strong>. Therefore you should not assume that the reverse
                    condition is <c>true</c>. For example you cannot assume that the
                    <paramref name="left"/> is less than or equal to the
                    <paramref name="right"/> if <c>GreaterThan</c> returns <c>false</c>.
                </para>
            	<para>
                    The reverse condition is <c>true</c> when the
                    <paramref name="left"/> and the
                    <paramref name="right"/> are not <strong>Null</strong>.
                </para>
            </remarks>
            <param name="left">An instance of <see cref="T:Teradata.Client.Provider.TdIntervalHourToSecond"/>.</param>
            <param name="right">An instance of <strong>TdIntervalHourToSecond</strong>.</param>
        </member>
        <member name="M:Teradata.Client.Provider.TdIntervalHourToSecond.GreaterThanOrEqual(Teradata.Client.Provider.TdIntervalHourToSecond,Teradata.Client.Provider.TdIntervalHourToSecond)">
            <summary>
               This operator determines whether the <paramref name="left"/> is greater than or 
               equal to the <paramref name="right"/>.
            </summary>
            <returns>
            	<para>
            		<c>true</c> indicates the <paramref name="left"/> is greater than
                    or equal to the <paramref name="right"/>, <c>false</c> otherwise.
                </para>
            	<para>
            		<list type="table">
            			<listheader>
            				<term>Return Value</term>
            				<description>Description</description>
            			</listheader>
            			<item>
            				<term><c>true</c></term>
            				<description>
            					<para>
            						<paramref name="left"/> and
                                    <paramref name="right"/> are not
                                    <see cref="F:Teradata.Client.Provider.TdIntervalHourToSecond.Null"/> and
                                    <paramref name="left"/> is greater than or equal
                                    to <paramref name="right"/>
            					</para>
            					<para>-or-</para>
            					<para>
            						<paramref name="left"/> is <strong>Null</strong>
                                    and <paramref name="right"/> is
                                    <strong>Null</strong>.
            					</para>
            				</description>
            			</item>
            			<item>
            				<term><c>false</c></term>
            				<description>
            					<para>
                                    The <paramref name="left"/> is less than
                                    <paramref name="right"/>
            					</para>
            					<para>-or-</para>
            					<para>
                                    Either <paramref name="left"/> or
                                    <paramref name="right"/> is <strong>Null</strong>.
            					</para>
            				</description>
            			</item>
            		</list>
            	</para>
            </returns>
            <remarks>
            	<para>
                    Comparison operators always return <c>false</c> if one of the operands is
                    <strong>Null</strong>. Therefore you should not assume that the reverse
                    condition is <c>true</c>. For example you cannot assume that the
                    <paramref name="left"/> is less than the
                    <paramref name="right"/> if the <c>GreaterThanOrEqual</c> method returns
                    <c>false</c>.
                </para>
            	<para>
                    The reverse condition is <c>true</c> when the
                    <paramref name="left"/> and the
                    <paramref name="right"/> are not <strong>Null</strong>.
                </para>
            </remarks>
            <param name="left">An instance of <see cref="T:Teradata.Client.Provider.TdIntervalHourToSecond"/>.</param>
            <param name="right">An instance of <strong>TdIntervalHourToSecond</strong>.</param>
        </member>
        <member name="M:Teradata.Client.Provider.TdIntervalHourToSecond.LessThan(Teradata.Client.Provider.TdIntervalHourToSecond,Teradata.Client.Provider.TdIntervalHourToSecond)">
            <summary>
               This method determines whether the <paramref name="left"/> is less than the <paramref name="right"/>.
            </summary>
            <returns>
            	<para>
            		<c>true</c> indicates the <paramref name="left"/> is less than
                    the <paramref name="right"/>, <c>false</c> otherwise.
                </para>
            	<para>
            		<list type="table">
            			<listheader>
            				<term>Return Value</term>
            				<description>Description</description>
            			</listheader>
            			<item>
            				<term><c>true</c></term>
            				<description>
            					<paramref name="left"/> and <paramref name="right"/> are
                                not <see cref="F:Teradata.Client.Provider.TdIntervalHourToSecond.Null"/> and
                                <paramref name="left"/> is less than
                                <paramref name="right"/>.
            				</description>
            			</item>
            			<item>
            				<term><c>false</c></term>
            				<description>
            					<para>
                                    The <paramref name="left"/> is greater than or
                                    equal to <paramref name="right"/>
            					</para>
            					<para>-or-</para>
            					<para>
                                    <paramref name="left"/> and / or <paramref name="right"/> is
                                    <strong>Null</strong>.
            					</para>
            				</description>
            			</item>
            		</list>
            	</para>
            </returns>
            <remarks>
            	<para>
                    Comparison operators always return <c>false</c> if one of the operands is
                    <strong>Null</strong>. Therefore you should not assume that the reverse
                    condition is <c>true</c>. For example you cannot assume that the
                    <paramref name="left"/> is greater than or equal to the
                    <paramref name="right"/> if the <c>LessThan</c> method returns
                    <c>false</c>.
                </para>
            	<para>
                    The reverse condition is <c>true</c> when the
                    <paramref name="left"/> and the
                    <paramref name="right"/> are not <strong>Null</strong>.
                </para>
            </remarks>
            <param name="left">An instance of <see cref="T:Teradata.Client.Provider.TdIntervalHourToSecond"/>.</param>
            <param name="right">An instance of <strong>TdIntervalHourToSecond</strong>.</param>
        </member>
        <member name="M:Teradata.Client.Provider.TdIntervalHourToSecond.LessThanOrEqual(Teradata.Client.Provider.TdIntervalHourToSecond,Teradata.Client.Provider.TdIntervalHourToSecond)">
            <summary>
                This method determines whether the <paramref name="left"/> is less
                than or equal to the <paramref name="right"/>.
            </summary>
            <returns>
            	<para>
            		<c>true</c> indicates the <paramref name="left"/> is less than or
                    equal to the <paramref name="right"/>, <c>false</c> otherwise.
                </para>
            	<para>
            		<list type="table">
            			<listheader>
            				<term>Return Value</term>
            				<description>Description</description>
            			</listheader>
            			<item>
            				<term><c>true</c></term>
            				<description>
            					<para>
            						<paramref name="left"/> and
                                    <paramref name="right"/> are not
                                    <see cref="F:Teradata.Client.Provider.TdIntervalHourToSecond.Null"/> and
                                    <paramref name="left"/> is less than or equal to
                                    <paramref name="right"/>
            					</para>
            					<para>-or-</para>
            					<para>
            						<paramref name="left"/> is <strong>Null</strong>
                                    and <paramref name="right"/> is
                                    <strong>Null</strong>.
            					</para>
            				</description>
            			</item>
            			<item>
            				<term><c>false</c></term>
            				<description>
            					<para>
                                    The <paramref name="left"/> is greater than
                                    <paramref name="right"/>
            					</para>
            					<para>-or-</para>
            					<para>
                                    Either <paramref name="left"/> or
                                    <paramref name="right"/> is <strong>Null</strong>.
            					</para>
            				</description>
            			</item>
            		</list>
            	</para>
            </returns>
            <remarks>
            	<para>
                    Comparison operators always return <c>false</c> if one of the operands is
                    <strong>Null</strong>. Therefore you should not assume that the reverse
                    condition is <c>true</c>. For example you cannot assume that the
                    <paramref name="left"/> is greater than the
                    <paramref name="right"/> if the <c>LessThanOrEqual</c> method returns
                    <c>false</c>.
                </para>
            	<para>
                    The reverse condition is <c>true</c> when the
                    <paramref name="left"/> and the
                    <paramref name="right"/> are not <strong>Null</strong>.
                </para>
            </remarks>
            <param name="left">An instance of <see cref="T:Teradata.Client.Provider.TdIntervalHourToSecond"/>.</param>
            <param name="right">An instance of <strong>TdIntervalHourToSecond</strong>.</param>
        </member>
        <member name="M:Teradata.Client.Provider.TdIntervalHourToSecond.Equals(System.Object)">
            <summary>
               Compares this instance and <paramref name="obj"/> to determine whether they
               are equal. 
            </summary>
            <returns>
               <c>true</c> if the two <see cref="T:Teradata.Client.Provider.TdIntervalHourToSecond"/>s are equal, 
               <c>false</c> otherwise.
            </returns>
            <remarks>
            	<para>
                    The return value is <c>true</c> if the instance is equal to the
                    <paramref name="obj"/>, <c>false</c> otherwise.
                </para>
            	<para>
            		<list type="table">
            			<listheader>
            				<term>Return Value</term>
            				<description>Description</description>
            			</listheader>
            			<item>
            				<term>
            					<c>true</c>
            				</term>
            				<description>
            					<para>
                                    This instance and <paramref name="obj"/> are
                                    <see cref="F:Teradata.Client.Provider.TdIntervalHourToSecond.Null"/>.
                                </para>
            					<para>-or-</para>
            					<para>
                                    This instance is equal to <paramref name="obj"/>.
                                </para>
            				</description>
            			</item>
            			<item>
            				<term>
            					<c>false</c>
            				</term>
            				<description>
            					<para>
                                    This instance is not equal to
                                    <paramref name="obj"/>.
                                </para>
            					<para>-or-</para>
            					<para>
                                    This instance is not <strong>Null</strong> and
                                    <paramref name="obj"/> is <strong>Null</strong>.
                                </para>
            					<para>-or-</para>
            					<para>
                                    This instance is <strong>Null</strong> and
                                    <paramref name="obj"/> is not <strong>Null</strong>
            					</para>
            					<para>-or-</para>
            					<para>
            						<paramref name="obj"/> is a <strong>null</strong>
                                    reference.
                                </para>
            				</description>
            			</item>
            		</list>
            	</para>
            </remarks>
            <example>
                The following code example uses various comparison methods and operators.
                <code lang="CS">
            // Create TdIntervalHourToSecond with 5 days, 1 hour, 30 minutes, 0 seconds,
            //  default precision and scale
            TdIntervalHourToSecond firstInterval = new TdIntervalHourToSecond(125, 30, 0);
            // Create TdIntervalHourToSecond with 20 days, 2 hour, 30 minutes, 0 seconds,
            //  default precision and scale
            Object intervalObj = new TdIntervalHourToSecond(482, 30, 0);
             
            // The following comparison methods and operators are equivalent
            if (false == TdIntervalHourToSecond.Equals(firstInterval, (TdIntervalHourToSecond)intervalObj) ||
                firstInterval != (TdIntervalHourToSecond)intervalObj ||
                false == firstInterval.Equals(intervalObj) )
            {
               Console.WriteLine(“firstInterval does not equal intervalObj”);
            }
                </code>
            </example>
            <overloads>
               Returns a value indicating whether two instances of <strong>TdIntervalHourToSecond</strong> are equal.
            </overloads>
            <param name="obj">
               <strong>TdIntervalHourToSecond</strong> that will be compared to this instance 
               of <strong>TdIntervalHourToSecond</strong>.
            </param>
        </member>
        <member name="M:Teradata.Client.Provider.TdIntervalHourToSecond.GetHashCode">
            <summary>
               Returns the hash code for this instance. 
            </summary>
            <returns>The hash code is returned.</returns>
        </member>
        <member name="M:Teradata.Client.Provider.TdIntervalHourToSecond.ToString(System.String)">
            <summary>
               Converts this instance to its equivalent String representation using the specified format.
            </summary>
            <remarks>
            	<para>This method supports the following format specifiers:</para>
            	<para>
            		<list type="table">
            			<listheader>
            				<term>Format Specifier</term>
            				<description>Description</description>
            			</listheader>
            			<item>
            				<term>G</term>
            				<description>
            					<para>General interval format.</para>
            					<para>[sign][hours]:[mm]:[ss].[ffffff]</para>
            				</description>
            			</item>
            			<item>
            				<term>L</term>
            				<description>
            					<para>Teradata literal format. This string may be used in
                                generating SQL against the Teradata database.</para>
            					<para>INTERVAL [sign]'[hours]:[mm]:[ss].[ffffff]' HOUR TO SECOND</para>
            				</description>
            			</item>
            		</list>
            	</para>
            	<para>Below is the description of each format item.</para>
            	<para>
            		<list type="table">
            			<listheader>
            				<term>Format Item</term>
            				<description>Description</description>
            			</listheader>
            			<item>
            				<term>sign</term>
            				<description>If negative a minus sign will be displayed.</description>
            			</item>
            			<item>
            				<term>hours</term>
            				<description>The number of hours (one to four digits in length).</description>
            			</item>
            			<item>
            				<term>mm</term>
            				<description>The number of minutes from 00 - 59.</description>
            			</item>
            			<item>
            				<term>ss</term>
            				<description>The number of seconds from 00 - 59.</description>
            			</item>
            			<item>
            				<term>ffffff</term>
            				<description>The number of fractional seconds (0 to 6
                            digits in length).</description>
            			</item>
            		</list>
            	</para>
            	<para>
                    Cultural settings are not supported.
                </para>
            </remarks>
            <returns>
               A string representation of the <see cref="T:Teradata.Client.Provider.TdIntervalHourToSecond"/> will be returned.
            </returns>
            <exception cref="T:System.FormatException" caption="FormatException">
               <paramref name="format"/> contains an invalid format specifier.
            </exception>
            <param name="format">
               The format string that will be used to format the <strong>TdIntervalHourToSecond</strong>.
            </param>
        </member>
        <member name="M:Teradata.Client.Provider.TdIntervalHourToSecond.ToString">
            <summary>
               Converts this instance to its equivalent String representation.
            </summary>
            <remarks>
               <para>The string returned will follow this format:</para>
            	<para>[sign][hours]:[mm]:[ss].[ffffff]</para>
            	<para>Below is the description of each format item.</para>
            	<para>
            		<list type="table">
            			<listheader>
            				<term>Format Item</term>
            				<description>Description</description>
            			</listheader>
            			<item>
            				<term>sign</term>
            				<description>If negative a minus sign will be displayed.</description>
            			</item>
            			<item>
            				<term>hours</term>
            				<description>The number of hours (one to four digits in length).</description>
            			</item>
            			<item>
            				<term>mm</term>
            				<description>The number of minutes from 00 - 59.</description>
            			</item>
            			<item>
            				<term>ss</term>
            				<description>The number of seconds from 00 - 59.</description>
            			</item>
            			<item>
            				<term>ffffff</term>
            				<description>The number of fractional seconds (0 to 6
                            digits in length).</description>
            			</item>
            		</list>
            	</para>
            </remarks>
            <returns>
               A string representation of the <see cref="T:Teradata.Client.Provider.TdIntervalHourToSecond"/> will be returned.
            </returns>
        </member>
        <member name="M:Teradata.Client.Provider.TdIntervalHourToSecond.Parse(System.String)">
            <summary>
               The specified string is converted into an equivalent <see cref="T:Teradata.Client.Provider.TdIntervalHourToSecond"/>.
            </summary>
            <returns>
               A <strong>TdIntervalHourToSecond</strong> is returned that is equivalent to the 
               <strong>TdIntervalHourToSecond</strong> contained in the input string.
            </returns>
            <exception cref="T:System.FormatException" caption="FormatException">
               <paramref name="value"/> cannot be converted into a 
               <strong>TdIntervalHourToSecond</strong> interval.
            </exception>
            <exception cref="T:System.ArgumentNullException" caption="ArgumentNullException">
               <paramref name="value"/> is a <c>null</c> reference.
            </exception>
            <exception cref="T:System.OverflowException">
               The resultant operation returns a value greater than the <see cref="F:Teradata.Client.Provider.TdIntervalHourToSecond.MaxValue"/> 
               or less than the <see cref="F:Teradata.Client.Provider.TdIntervalHourToSecond.MinValue"/>.
            </exception>
            <remarks>
            	<para>This method supports the following string formats:</para>
            	<para>
            		<list type="table">
            			<listheader>
            				<term>String Format</term>
            				<description>Description</description>
            			</listheader>
            			<item>
            				<term>G</term>
            				<description>
            					<para>General interval format.</para>
            					<para>[sign][hours]:[mm]:[ss].[ffffff]</para>
            				</description>
            			</item>
            			<item>
            				<term>L</term>
            				<description>
            					<para>Teradata literal format. This string may be used in
                                generating SQL against the Teradata database.</para>
            					<para>INTERVAL [sign]'[hours]:[mm]:[ss].[ffffff]' HOUR TO SECOND</para>
            				</description>
            			</item>
            		</list>
            	</para>
            	<para>Below is the description of each format item.</para>
            	<para>
            		<list type="table">
            			<listheader>
            				<term>Format Item</term>
            				<description>Description</description>
            			</listheader>
            			<item>
            				<term>sign</term>
            				<description>Optional - . Defaults as space character (+).</description>
            			</item>
            			<item>
            				<term>hours</term>
            				<description>Required number of hours  (one to four digits in length).</description>
            			</item>
            			<item>
            				<term>mm</term>
            				<description>Required number of minutes from 00 - 59.</description>
            			</item>
            			<item>
            				<term>ss</term>
            				<description>Required number of seconds from 00 - 59.</description>
            			</item>
            			<item>
            				<term>ffffff</term>
            				<description>Optionally the number of fractional seconds (0 to 6
                            digits in length).</description>
            			</item>
            		</list>
            	</para>
            	<para>
                    Cultural settings are not supported.
            	</para>
            	<para>
            		While parsing the <paramref name="value"/> the <see cref="P:Teradata.Client.Provider.TdIntervalHourToSecond.Precision"/> will be
            		set to the number of digits contained within the hour component.  The 
            		<see cref="P:Teradata.Client.Provider.TdIntervalHourToSecond.Scale"/> will be set to the number of digits in the fractional
            		seconds component (digits that are to the right of the decimal point).
            	</para>
            	<para>
            		For example a <paramref name="value"/> of "10:25:40.1234" will
            		contain a precision of 2 and a scale of 4.
            	</para>
            </remarks>
            <overloads>
            	The specified string is converted into an equivalent 
               <strong>TdIntervalHourToSecond</strong> interval.
            </overloads>
            <param name="value">
               A string to be converted into a <strong>TdIntervalHourToSecond</strong>.
            </param>
        </member>
        <member name="M:Teradata.Client.Provider.TdIntervalHourToSecond.TryParse(System.String,Teradata.Client.Provider.TdIntervalHourToSecond@)">
            <summary>
               The specified string is converted into an equivalent <see cref="T:Teradata.Client.Provider.TdIntervalHourToSecond"/>. 
            </summary>
            <returns>
                <c>true</c> if the conversion of <paramref name="value"/> succeeded, 
                <c>false</c> otherwise.
            </returns>
            <remarks>
            	<para>This method supports the following string formats:</para>
            	<para>
            		<list type="table">
            			<listheader>
            				<term>String Format</term>
            				<description>Description</description>
            			</listheader>
            			<item>
            				<term>G</term>
            				<description>
            					<para>General interval format.</para>
            					<para>[sign][hours]:[mm]:[ss].[ffffff]</para>
            				</description>
            			</item>
            			<item>
            				<term>L</term>
            				<description>
            					<para>Teradata literal format. This string may be used in
                                generating SQL against the Teradata database.</para>
            					<para>INTERVAL [sign]'[hours]:[mm]:[ss].[ffffff]' HOUR TO SECOND</para>
            				</description>
            			</item>
            		</list>
            	</para>
            	<para>Below is the description of each format item.</para>
            	<para>
            		<list type="table">
            			<listheader>
            				<term>Format Item</term>
            				<description>Description</description>
            			</listheader>
            			<item>
            				<term>sign</term>
            				<description>Optional - . Defaults as space character (+).</description>
            			</item>
            			<item>
            				<term>hours</term>
            				<description>Required number of hours (one to four digits in length).</description>
            			</item>
            			<item>
            				<term>mm</term>
            				<description>Required number of minutes from 00 - 59.</description>
            			</item>
            			<item>
            				<term>ss</term>
            				<description>Required number of seconds from 00 - 59.</description>
            			</item>
            			<item>
            				<term>ffffff</term>
            				<description>Optionally the number of fractional seconds (0 to 6
                            digits in length).</description>
            			</item>
            		</list>
            	</para>
            	<para>
                    Cultural settings are not supported.
            	</para>
            	<para>
            		While parsing the <paramref name="value"/> the <see cref="P:Teradata.Client.Provider.TdIntervalHourToSecond.Precision"/> will be
            		set to the number of digits contained within the hour component.  The 
            		<see cref="P:Teradata.Client.Provider.TdIntervalHourToSecond.Scale"/> will be set to the number of digits in the fractional
            		seconds component (digits that are to the right of the decimal point).
            	</para>
            	<para>
            		For example a <paramref name="value"/> of "10:25:40.1234" will
            		contain a precision of 2 and a scale of 4.
            	</para>
            </remarks>
            <overloads>
               The specified string is converted into an equivalent 
               <see cref="T:Teradata.Client.Provider.TdIntervalHourToSecond"/> interval.  A <c>true</c> is returned 
               if the conversion succeeded, <c>false</c> otherwise.
            </overloads>
            <param name="value">
               A string to be converted into a <strong>TdIntervalHourToSecond</strong>.
            </param>
            <param name="result">
               The converted string into a <strong>TdIntervalHourToSecond</strong>.
            </param>
        </member>
        <member name="M:Teradata.Client.Provider.TdIntervalHourToSecond.GetXmlSchema(System.Xml.Schema.XmlSchemaSet)">
             <summary>
                Gets the XML Qualified name for <see cref="T:Teradata.Client.Provider.TdIntervalHourToSecond"/> XML type mapping.
             </summary>
             <param name="xmlSchemaSet">
                Holds zero or more XML Schema definition language (XSD) schemas.
             </param>
             <returns>
                Returns <strong>xs:duration</strong>.
             </returns>
             <example>
             This example shows how to use the <strong>TdIntervalHourToSecond</strong> with <see cref="T:System.Xml.Serialization.XmlSerializer"/> class.
             <see cref="T:System.Xml.Serialization.XmlElementAttribute"/> is used to indicate that the Teradata Database column can be <strong>Null</strong>.
             <code>
              public class Order
              {
                  public TdTimestamp Date;
             
                  public TdIntervalHourToSecond ExpirationPeriod;
             
                  public TdTimestamp ExpirationDate;
            
                  public Int32 ProductId;
            
                  public Int32 Quantity;
            
                  public Int32? BackOrderQuantity;
            
                  [XmlElementAttribute(IsNullable = true)]        
                  public TdDecimal BackOrderPrice;
              }
             
              internal class OrderWriter
              {
              
                  public static void Write()
                  {
                      // Setup the order
                      Order x = new Order();
              
                      x.Date = new TdTimestamp(DateTime.Today);
                      // 5 days 4 hours and 30 minutes
                      x.ExpirationPeriod = new TdIntervalHourToSecond(124, 30, 0);
                      x.ExpirationDate = x.Date + x.ExpirationPeriod;
                      x.ProductId = 100;
                      x.Quantity = 2000;
                      x.BackOrderQuantity = null;
                      x.BackOrderPrice = TdDecimal.Null;
            
                      // Write out today's orders to the file.
                      //
                      // Open the file.
                      XmlWriterSettings settings = new XmlWriterSettings();
                      settings.Indent = true;
                      XmlWriter writer = XmlWriter.Create(@"C:\Temp\TodayOrders.XML", settings);
                      writer.WriteStartElement("TodayOrders");
                
                      // Write out the schema.
                      XmlSchemas schemas = new XmlSchemas();
                      XmlSchemaExporter schExporter = new XmlSchemaExporter(schemas);
                      schExporter.ExportTypeMapping(new XmlReflectionImporter().ImportTypeMapping(typeof(Order)));
                      schemas[0].Write(writer);
            
                      // Write out the orders.
                      XmlSerializer xml = new XmlSerializer(typeof(Order));
                      xml.Serialize(writer, x);
              
                      // Close the document.
                      writer.WriteEndDocument();
                      writer.Close();
                  }
              }
             
              /* Output is:
             
              &lt;TodayOrders&gt;
                &lt;xs:schema elementFormDefault="qualified" xmlns:xs="http://www.w3.org/2001/XMLSchema"&gt;
                  &lt;xs:element name="Order" nillable="true" type="Order" /&gt;
                  &lt;xs:complexType name="Order"&gt;
                    &lt;xs:sequence&gt;
                      &lt;xs:element minOccurs="1" maxOccurs="1" name="Date" type="xs:dateTime" /&gt;
                      &lt;xs:element minOccurs="1" maxOccurs="1" name="ExpirationPeriod" type="xs:duration" /&gt;
                      &lt;xs:element minOccurs="1" maxOccurs="1" name="ExpirationDate" type="xs:dateTime" /&gt;
                      &lt;xs:element minOccurs="1" maxOccurs="1" name="ProductId" type="xs:int" /&gt;
                      &lt;xs:element minOccurs="1" maxOccurs="1" name="Quantity" type="xs:int" /&gt;
                      &lt;xs:element minOccurs="1" maxOccurs="1" name="BackOrderQuantity" nillable="true" type="xs:int" /&gt;
                      &lt;xs:element minOccurs="1" maxOccurs="1" name="BackOrderPrice" nillable="true" type="xs:decimal" /&gt;
                    &lt;/xs:sequence&gt;
                  &lt;/xs:complexType&gt;
                &lt;/xs:schema&gt;
                &lt;Order xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xmlns:xsd="http://www.w3.org/2001/XMLSchema"&gt;
                  &lt;Date&gt;2008-02-01T00:00:00-08:00&lt;/Date&gt;
                  &lt;ExpirationPeriod&gt;PT124H30M&lt;/ExpirationPeriod&gt;
                  &lt;ExpirationDate&gt;2008-02-06T04:30:00-08:00&lt;/ExpirationDate&gt;
                  &lt;ProductId&gt;100&lt;/ProductId&gt;
                  &lt;Quantity&gt;2000&lt;/Quantity&gt;
                  &lt;BackOrderQuantity xsi:nil="true" /&gt;
                  &lt;BackOrderPrice xsi:nil="true" /&gt;
                &lt;/Order&gt;
              &lt;/TodayOrders&gt;
             
              */
             </code>
             </example>        
        </member>
        <member name="M:Teradata.Client.Provider.TdIntervalHourToSecond.op_Addition(Teradata.Client.Provider.TdIntervalHourToSecond,Teradata.Client.Provider.TdIntervalHourToSecond)">
            <summary>
               A <see cref="T:Teradata.Client.Provider.TdIntervalHourToSecond"/> is added to another <strong>TdIntervalHourToSecond</strong>.
            </summary>
            <remarks>
            <para>
               If either parameter is <strong>Null</strong> a <see cref="F:Teradata.Client.Provider.TdIntervalHourToSecond.Null"/> will be returned.
            </para>
            <para>
               The returned <strong>TdIntervalHourToSecond</strong> will contain a precision
               set to the <see cref="F:Teradata.Client.Provider.TdIntervalHourToSecond.MaxPrecision"/>. The scale will always be set to the the scale 
               of the operand containing the greatest scale.
            </para>
            </remarks>
            <returns>
               A new <strong>TdIntervalHourToSecond</strong> as the result of adding a 
               <strong>TdIntervalHourToSecond</strong> to another <strong>TdIntervalHourToSecond</strong>.
            </returns>
            <exception cref="T:System.OverflowException">
               The resultant operation returns a value greater than the <see cref="F:Teradata.Client.Provider.TdIntervalHourToSecond.MaxValue"/> 
               or less than the <see cref="F:Teradata.Client.Provider.TdIntervalHourToSecond.MinValue"/>.
            </exception>
            <param name="left">A <strong>TdIntervalHourToSecond</strong>.</param>
            <param name="right">A <strong>TdIntervalHourToSecond</strong>.</param>
        </member>
        <member name="M:Teradata.Client.Provider.TdIntervalHourToSecond.op_Subtraction(Teradata.Client.Provider.TdIntervalHourToSecond,Teradata.Client.Provider.TdIntervalHourToSecond)">
            <summary>
               A <see cref="T:Teradata.Client.Provider.TdIntervalHourToSecond"/> is subtracted from another 
               <strong>TdIntervalHourToSecond</strong>.
            </summary>
            <remarks>
            <para>
               If either parameter is <strong>Null</strong> a <see cref="F:Teradata.Client.Provider.TdIntervalHourToSecond.Null"/> will be returned.
            </para>
            <para>
               The returned <strong>TdIntervalHourToSecond</strong> will contain a precision
               set to the <see cref="F:Teradata.Client.Provider.TdIntervalHourToSecond.MaxPrecision"/>. The scale will always be set to the the scale 
               of the operand containing the greatest scale.
            </para>        
            </remarks>        
            <returns>
               A new <strong>TdIntervalHourToSecond</strong> as the result of subtracting 
               <paramref name="right"/> from the <paramref name="left"/>.
            </returns>
            <exception cref="T:System.OverflowException">
               The resultant operation returns a value greater than the <see cref="F:Teradata.Client.Provider.TdIntervalHourToSecond.MaxValue"/> 
               or less than the <see cref="F:Teradata.Client.Provider.TdIntervalHourToSecond.MinValue"/>.
            </exception>
            <param name="left">A <strong>TdIntervalHourToSecond</strong> to subtract from.</param>
            <param name="right">A <strong>TdIntervalHourToSecond</strong> to subtract.</param>
        </member>
        <member name="M:Teradata.Client.Provider.TdIntervalHourToSecond.op_Multiply(Teradata.Client.Provider.TdIntervalHourToSecond,System.Int32)">
            <summary>
               A <see cref="T:Teradata.Client.Provider.TdIntervalHourToSecond"/> is multiplied by an integer value.
            </summary>
            <remarks>
            <para>
               If <paramref name="interval"/> is <see cref="F:Teradata.Client.Provider.TdIntervalHourToSecond.Null"/> a <strong>Null</strong> will be returned.
            </para>
            <para>
               The returned <strong>TdIntervalHourToSecond</strong> will contain a precision 
               set to the <see cref="F:Teradata.Client.Provider.TdIntervalHourToSecond.MaxPrecision"/>. The scale will always 
               be set to the scale of the <paramref name="interval"/>.
            </para>
            </remarks>
            <returns>
               A new <strong>TdIntervalHourToSecond</strong> as the result of multiplying a 
               <strong>TdIntervalHourToSecond</strong> and an integer value.
            </returns>        
            <exception cref="T:System.OverflowException">
               The resultant operation returns a value greater than the <see cref="F:Teradata.Client.Provider.TdIntervalHourToSecond.MaxValue"/> 
               or less than the <see cref="F:Teradata.Client.Provider.TdIntervalHourToSecond.MinValue"/>.
            </exception>
            <param name="interval">A <strong>TdIntervalHourToSecond</strong>.</param>
            <param name="value">A multiplier.</param>
        </member>
        <member name="M:Teradata.Client.Provider.TdIntervalHourToSecond.op_Multiply(System.Int32,Teradata.Client.Provider.TdIntervalHourToSecond)">
            <summary>
               A <see cref="T:Teradata.Client.Provider.TdIntervalHourToSecond"/> is multiplied by an integer value.
            </summary>
            <remarks>
            <para>
               If <paramref name="interval"/> is <see cref="F:Teradata.Client.Provider.TdIntervalHourToSecond.Null"/> a <strong>Null</strong> will be returned.
            </para>
            <para>
               The returned <strong>TdIntervalHourToSecond</strong> will contain a precision 
               set to the <see cref="F:Teradata.Client.Provider.TdIntervalHourToSecond.MaxPrecision"/>. The scale will always 
               be set to the scale of the <paramref name="interval"/>.
            </para>
            </remarks>
            <returns>
               A new <strong>TdIntervalHourToSecond</strong> as the result of multiplying a 
               <strong>TdIntervalHourToSecond</strong> and an integer value.
            </returns>        
            <exception cref="T:System.OverflowException">
               The resultant operation returns a value greater than the <see cref="F:Teradata.Client.Provider.TdIntervalHourToSecond.MaxValue"/> 
               or less than the <see cref="F:Teradata.Client.Provider.TdIntervalHourToSecond.MinValue"/>.
            </exception>
            <param name="value">A multiplier.</param>
            <param name="interval">A <strong>TdIntervalHourToSecond</strong>.</param>
        </member>
        <member name="M:Teradata.Client.Provider.TdIntervalHourToSecond.op_Division(Teradata.Client.Provider.TdIntervalHourToSecond,System.Int32)">
            <summary>
               A <see cref="T:Teradata.Client.Provider.TdIntervalHourToSecond"/> is divided by an integer value.
            </summary>
            <remarks>
            <para>
               If <paramref name="interval"/> is <see cref="F:Teradata.Client.Provider.TdIntervalHourToSecond.Null"/> a <strong>Null</strong> will be returned.
            </para>
            <para>
               The returned <strong>TdIntervalHourToSecond</strong> will contain a precision 
               and scale which matches the precision and scale of the <strong>interval</strong> 
               parameter.
            </para>
            </remarks>
            <returns>
               A new <strong>TdIntervalHourToSecond</strong> as the result of dividing a 
               <strong>TdIntervalHourToSecond</strong> and an integer value.
            </returns>        
            <exception cref="T:System.DivideByZeroException">
               The <paramref name="value"/> divisor cannot be 0.
            </exception>
            <param name="interval">A <strong>TdIntervalHourToSecond</strong>.</param>
            <param name="value">A divisor.</param>
        </member>
        <member name="M:Teradata.Client.Provider.TdIntervalHourToSecond.Add(Teradata.Client.Provider.TdIntervalHourToSecond,Teradata.Client.Provider.TdIntervalHourToSecond)">
            <summary>
               Calculates the sum of two <see cref="T:Teradata.Client.Provider.TdIntervalHourToSecond"/> operands.
            </summary>
            <remarks>
            <para>
               If either parameter is <strong>Null</strong> a <see cref="F:Teradata.Client.Provider.TdIntervalHourToSecond.Null"/> will be returned.
            </para>
            <para>
               The returned <strong>TdIntervalHourToSecond</strong> will contain a precision
               set to the <see cref="F:Teradata.Client.Provider.TdIntervalHourToSecond.MaxPrecision"/>. The scale will always be set to
               the the scale of the operand containing the greatest scale.
            </para>
            </remarks>
            <returns>
               A <strong>TdIntervalHourToSecond</strong> containing the sum.
            </returns>
            <exception cref="T:System.OverflowException">
               The resultant operation returns a value greater than the <see cref="F:Teradata.Client.Provider.TdIntervalHourToSecond.MaxValue"/> 
               or less than the <see cref="F:Teradata.Client.Provider.TdIntervalHourToSecond.MinValue"/>.
            </exception>
            <param name="left">A <strong>TdIntervalHourToSecond</strong>.</param>
            <param name="right">A <strong>TdIntervalHourToSecond</strong>.</param>
        </member>
        <member name="M:Teradata.Client.Provider.TdIntervalHourToSecond.Subtract(Teradata.Client.Provider.TdIntervalHourToSecond,Teradata.Client.Provider.TdIntervalHourToSecond)">
            <summary>
               A <see cref="T:Teradata.Client.Provider.TdIntervalHourToSecond"/> is subtracted from another 
               <strong>TdIntervalHourToSecond</strong>.
            </summary>
            <remarks>
            <para>
               If either parameter is <strong>Null</strong> a <see cref="F:Teradata.Client.Provider.TdIntervalHourToSecond.Null"/> will be returned.
            </para>
            <para>
               The returned <strong>TdIntervalHourToSecond</strong> will contain a precision
               set to the <see cref="F:Teradata.Client.Provider.TdIntervalHourToSecond.MaxPrecision"/>. The scale will always be set to the the scale 
               of the operand containing the greatest scale.
            </para>        
            </remarks>        
            <returns>
               A new <strong>TdIntervalHourToSecond</strong> as the result of subtracting 
               <paramref name="right"/> from the <paramref name="left"/>.
            </returns>
            <exception cref="T:System.OverflowException">
               The resultant operation returns a value greater than the <see cref="F:Teradata.Client.Provider.TdIntervalHourToSecond.MaxValue"/> 
               or less than the <see cref="F:Teradata.Client.Provider.TdIntervalHourToSecond.MinValue"/>.
            </exception>
            <param name="left">A <strong>TdIntervalHourToSecond</strong> to subtract from.</param>
            <param name="right">A <strong>TdIntervalHourToSecond</strong> to subtract.</param>
        </member>
        <member name="M:Teradata.Client.Provider.TdIntervalHourToSecond.Multiply(Teradata.Client.Provider.TdIntervalHourToSecond,System.Int32)">
            <summary>
               A <see cref="T:Teradata.Client.Provider.TdIntervalHourToSecond"/> is multiplied by an integer value.
            </summary>
            <remarks>
            <para>
               If <paramref name="interval"/> is <see cref="F:Teradata.Client.Provider.TdIntervalHourToSecond.Null"/> a <strong>Null</strong> will be returned.
            </para>
            <para>
               The returned <strong>TdIntervalHourToSecond</strong> will contain a precision 
               set to the <see cref="F:Teradata.Client.Provider.TdIntervalHourToSecond.MaxPrecision"/>. The scale will always 
               be set to the scale of the <paramref name="interval"/>.
            </para>
            </remarks>
            <returns>
               A new <strong>TdIntervalHourToSecond</strong> as the result of multiplying a 
               <strong>TdIntervalHourToSecond</strong> and an integer value.
            </returns>        
            <exception cref="T:System.OverflowException">
               The resultant operation returns a value greater than the <see cref="F:Teradata.Client.Provider.TdIntervalHourToSecond.MaxValue"/> 
               or less than the <see cref="F:Teradata.Client.Provider.TdIntervalHourToSecond.MinValue"/>.
            </exception>
            <param name="interval">A <strong>TdIntervalHourToSecond</strong>.</param>
            <param name="value">A multiplier.</param>
        </member>
        <member name="M:Teradata.Client.Provider.TdIntervalHourToSecond.Multiply(System.Int32,Teradata.Client.Provider.TdIntervalHourToSecond)">
            <summary>
               A <see cref="T:Teradata.Client.Provider.TdIntervalHourToSecond"/> is multiplied by an integer value.
            </summary>
            <remarks>
            <para>
               If <paramref name="interval"/> is <see cref="F:Teradata.Client.Provider.TdIntervalHourToSecond.Null"/> a <strong>Null</strong> will be returned.
            </para>
            <para>
               The returned <strong>TdIntervalHourToSecond</strong> will contain a precision 
               set to the <see cref="F:Teradata.Client.Provider.TdIntervalHourToSecond.MaxPrecision"/>. The scale will always 
               be set to the scale of the <paramref name="interval"/>.
            </para>
            </remarks>
            <returns>
               A new <strong>TdIntervalHourToSecond</strong> as the result of multiplying a 
               <strong>TdIntervalHourToSecond</strong> and an integer value.
            </returns>        
            <exception cref="T:System.OverflowException">
               The resultant operation returns a value greater than the <see cref="F:Teradata.Client.Provider.TdIntervalHourToSecond.MaxValue"/> 
               or less than the <see cref="F:Teradata.Client.Provider.TdIntervalHourToSecond.MinValue"/>.
            </exception>
            <param name="value">A multiplier.</param>
            <param name="interval">A <strong>TdIntervalHourToSecond</strong>.</param>
        </member>
        <member name="M:Teradata.Client.Provider.TdIntervalHourToSecond.Divide(Teradata.Client.Provider.TdIntervalHourToSecond,System.Int32)">
            <summary>
               A <see cref="T:Teradata.Client.Provider.TdIntervalHourToSecond"/> is divided by an integer value.
            </summary>
            <remarks>
            <para>
               If <paramref name="interval"/> is <see cref="F:Teradata.Client.Provider.TdIntervalHourToSecond.Null"/> a <strong>Null</strong> will be returned.
            </para>
            <para>
               The returned <strong>TdIntervalHourToSecond</strong> will contain a precision 
               and scale which matches the precision and scale of the <strong>interval</strong> 
               parameter.
            </para>
            </remarks>
            <returns>
               A new <strong>TdIntervalHourToSecond</strong> as the result of dividing a 
               <strong>TdIntervalHourToSecond</strong> and an integer value.
            </returns>        
            <exception cref="T:System.DivideByZeroException">
               The <paramref name="value"/> divisor cannot be 0.
            </exception>
            <param name="interval">A <strong>TdIntervalHourToSecond</strong>.</param>
            <param name="value">A divisor.</param>
        </member>
        <member name="M:Teradata.Client.Provider.TdIntervalHourToSecond.op_GreaterThan(Teradata.Client.Provider.TdIntervalHourToSecond,Teradata.Client.Provider.TdIntervalHourToSecond)">
            <summary>
               This operator determines whether the <paramref name="left"/> is greater than the <paramref name="right"/>.
            </summary>
            <returns>
            	<para>
            		<c>true</c> indicates the <paramref name="left"/> is greater than
                    the <paramref name="right"/>, <c>false</c> otherwise.
                </para>
            	<para>
            		<list type="table">
            			<listheader>
            				<term>Return Value</term>
            				<description>Description</description>
            			</listheader>
            			<item>
            				<term><c>true</c></term>
            				<description>
            					<paramref name="left"/> and
                                <paramref name="right"/> are not
                                <see cref="F:Teradata.Client.Provider.TdIntervalHourToSecond.Null"/> and
                                <paramref name="left"/> is greater than
                                <paramref name="right"/>.
            				</description>
            			</item>
            			<item>
            				<term><c>false</c></term>
            				<description>
            					<para>
                                    The <paramref name="left"/> is less than or equal
                                    to <paramref name="right"/>
                                </para>
            					<para>-or-</para>
            					<para>
                                    Either <paramref name="left"/> and / or
                                    <paramref name="right"/> is <strong>Null</strong>.
                                </para>
            				</description>
            			</item>
            		</list>
            	</para>
            </returns>
            <remarks>
            	<para>
                   Comparison operators always return <c>false</c> if one of the operands is
                   <strong>Null</strong>. Therefore you should not assume that the reverse condition
                   is <c>true</c>. For example you cannot assume that the <paramref name="left"/> 
                   is less than or equal to the <paramref name="right"/> if the "&gt;" operator returns 
                   <c>false</c>.
               </para>
            	<para>
                   The reverse condition is <c>true</c> when the <paramref name="left"/> and the 
                   <paramref name="right"/> are not <strong>Null</strong>.
               </para>
            </remarks>
            <param name="left">An instance of <see cref="T:Teradata.Client.Provider.TdIntervalHourToSecond"/>.</param>
            <param name="right">An instance of <strong>TdIntervalHourToSecond</strong>.</param>
        </member>
        <member name="M:Teradata.Client.Provider.TdIntervalHourToSecond.op_GreaterThanOrEqual(Teradata.Client.Provider.TdIntervalHourToSecond,Teradata.Client.Provider.TdIntervalHourToSecond)">
            <summary>
               This operator determines whether the <paramref name="left"/> is greater than or 
               equal to the <paramref name="right"/>.
            </summary>
            <returns>
            	<para>
            		<c>true</c> indicates the <paramref name="left"/> is greater than
                    or equal to the <paramref name="right"/>, <c>false</c> otherwise.
                </para>
            	<para>
            		<list type="table">
            			<listheader>
            				<term>Return Value</term>
            				<description>Description</description>
            			</listheader>
            			<item>
            				<term><c>true</c></term>
            				<description>
            					<para>
            						<paramref name="left"/> and
                                    <paramref name="right"/> are not
                                    <see cref="F:Teradata.Client.Provider.TdIntervalHourToSecond.Null"/> and
                                    <paramref name="left"/> is greater than or equal
                                    to <paramref name="right"/>
            					</para>
            					<para>-or-</para>
            					<para>
            						<paramref name="left"/> is <strong>Null</strong>
                                    and <paramref name="right"/> is
                                    <strong>Null</strong>.
            					</para>
            				</description>
            			</item>
            			<item>
            				<term><c>false</c></term>
            				<description>
            					<para>
                                    The <paramref name="left"/> is less than
                                    <paramref name="right"/>
            					</para>
            					<para>-or-</para>
            					<para>
                                    Either <paramref name="left"/> or
                                    <paramref name="right"/> is <strong>Null</strong>.
            					</para>
            				</description>
            			</item>
            		</list>
            	</para>
            </returns>
            <remarks>
            	<para>
                    Comparison operators always return <c>false</c> if one of the operands is
                    <strong>Null</strong>. Therefore you should not assume that the reverse
                    condition is <c>true</c>. For example you cannot assume that the
                    <paramref name="left"/> is less than the
                    <paramref name="right"/> if the "&gt;=" operator returns
                    <c>false</c>.
                </para>
            	<para>
                    The reverse condition is <c>true</c> when the
                    <paramref name="left"/> and the
                    <paramref name="right"/> are not <strong>Null</strong>.
                </para>
            </remarks>
            <param name="left">An instance of <see cref="T:Teradata.Client.Provider.TdIntervalHourToSecond"/>.</param>
            <param name="right">An instance of <strong>TdIntervalHourToSecond</strong>.</param>
        </member>
        <member name="M:Teradata.Client.Provider.TdIntervalHourToSecond.op_Inequality(Teradata.Client.Provider.TdIntervalHourToSecond,Teradata.Client.Provider.TdIntervalHourToSecond)">
            <summary>
               This operator determines whether the <paramref name="left"/> and the  
               <paramref name="right"/> are not equal.
            </summary>
            <returns>
            	<para>
                   A Boolean is returned that indicates whether the two operands are not equal.
                   <c>true</c> indicates the two operands are not equal, <c>false</c>
                   otherwise.
                </para>
            	<para>
            		<list type="table">
            			<listheader>
            				<term>Return Value</term>
            				<description>Description</description>
            			</listheader>
            			<item>
            				<term><c>true</c></term>
            				<description>
                                <para>
            					   <paramref name="left"/> is less than or greater than
                                   <paramref name="right"/>.
                                </para>
            					<para>-or-</para>
                               <para>
            					    <paramref name="left"/> is
                                   <see cref="F:Teradata.Client.Provider.TdIntervalHourToSecond.Null"/> and
                                   <paramref name="right"/> is not <strong>Null.</strong> 
                               </para>
            					<para>-or-</para>
            					<para>
                                   <paramref name="left"/> is not <strong>Null</strong>
                                   and <paramref name="right"/> is <strong>Null.</strong>
                                </para>
                            </description>
            			</item>
            			<item>
            				<term><c>false</c></term>
            				<description>
            					<para>
                                  <paramref name="left"/> is equal to
                                  <paramref name="right"/>.
                               </para>
            					<para>-or-</para>
            					<para>
                                   <paramref name="left"/> and
                                   <paramref name="right"/> are <strong>Null</strong>.
                                </para>
                            </description>
            			</item>
            		</list>
            	</para>
            </returns>
            <param name="left">An instance of <see cref="T:Teradata.Client.Provider.TdIntervalHourToSecond"/>.</param>
            <param name="right">An instance of <strong>TdIntervalHourToSecond</strong>.</param>
        </member>
        <member name="M:Teradata.Client.Provider.TdIntervalHourToSecond.op_Equality(Teradata.Client.Provider.TdIntervalHourToSecond,Teradata.Client.Provider.TdIntervalHourToSecond)">
            <summary>
               This operator determines whether the <paramref name="left"/> and the  
               <paramref name="right"/> are equal.
            </summary>
            <returns>
            	<para>
                   A Boolean is returned that indicates whether the two operands are equal.
                   <c>True</c> indicates the two operands are equal, <c>false</c> otherwise.
               </para>
            	<para>
            		<list type="table">
            			<listheader>
            				<term>Return Value</term>
            				<description>Description</description>
            			</listheader>
            			<item>
            				<term><c>true</c></term>
            				<description>
            					<para>
            					   <paramref name="left"/> is equal to
                                   <paramref name="right"/>
            					</para>
            					<para>-or-</para>
            					<para>
            					   <paramref name="left"/> is
                                   <see cref="F:Teradata.Client.Provider.TdIntervalHourToSecond.Null"/> and
                                   <paramref name="right"/> is <strong>Null</strong>.
            					</para>
            				</description>
            			</item>
            			<item>
            				<term><c>false</c></term>
            				<description>
            					<para>
            					   <paramref name="left"/> is not <strong>Null</strong>
                                   and <paramref name="right"/> is <strong>Null</strong>
            					</para>
            					<para>-or-</para>
            					<para>
            					   <paramref name="left"/> is <strong>Null</strong> and
                                   <paramref name="right"/> is not <strong>Null</strong>
            					</para>
            					<para>-or-</para>
            					<para>
                                   The <paramref name="left"/> is not equal to
                                   <paramref name="right"/>.
            					</para>
            				</description>
            			</item>
            		</list>
            	</para>
            </returns>
            <param name="left">An instance of <see cref="T:Teradata.Client.Provider.TdIntervalHourToSecond"/>.</param>
            <param name="right">An instance of <strong>TdIntervalHourToSecond</strong>.</param>
        </member>
        <member name="M:Teradata.Client.Provider.TdIntervalHourToSecond.op_LessThan(Teradata.Client.Provider.TdIntervalHourToSecond,Teradata.Client.Provider.TdIntervalHourToSecond)">
            <summary>
               This operator determines whether the <paramref name="left"/> is less than the <paramref name="right"/>.
            </summary>
            <returns>
            	<para>
            		<c>True</c> indicates the <paramref name="left"/> is less than
                    the <paramref name="right"/>, <c>false</c> otherwise.
                </para>
            	<para>
            		<list type="table">
            			<listheader>
            				<term>Return Value</term>
            				<description>Description</description>
            			</listheader>
            			<item>
            				<term><c>true</c></term>
            				<description>
            					<para>
            					    <paramref name="left"/> and
                                   <paramref name="right"/> are not
                                   <see cref="F:Teradata.Client.Provider.TdIntervalHourToSecond.Null"/> and
                                   <paramref name="left"/> is less than
                                   <paramref name="right"/>.
            					</para>
            				</description>
            			</item>
            			<item>
            				<term><c>false</c></term>
            				<description>
            					<para>
                                    The <paramref name="left"/> is greater than or
                                    equal to <paramref name="right"/>
            					</para>
            					<para>-or-</para>
            					<para>
                                    Either <paramref name="left"/> and / or
                                    <paramref name="right"/> is <strong>Null</strong>.
            					</para>
            				</description>
            			</item>
            		</list>
            	</para>
            </returns>
            <remarks>
            	<para>
                    Comparison operators always return <c>false</c> if one of the operands is
                    <strong>Null</strong>. Therefore you should not assume that the reverse
                    condition is <c>true</c>. For example you cannot assume that the
                    <paramref name="left"/> is greater than or equal to the
                    <paramref name="right"/> if the "&lt;" operator returns
                    <c>false</c>.
                </para>
            	<para>
                    The reverse condition is <c>true</c> when the
                    <paramref name="left"/> and the
                    <paramref name="right"/> are not <strong>Null</strong>.
                </para>
            </remarks>
            <param name="left">An instance of <see cref="T:Teradata.Client.Provider.TdIntervalHourToSecond"/>.</param>
            <param name="right">An instance of <strong>TdIntervalHourToSecond</strong>.</param>
        </member>
        <member name="M:Teradata.Client.Provider.TdIntervalHourToSecond.op_LessThanOrEqual(Teradata.Client.Provider.TdIntervalHourToSecond,Teradata.Client.Provider.TdIntervalHourToSecond)">
            <summary>
               This operator determines whether the <paramref name="left"/> is less than 
               or equal the <paramref name="right"/>.
            </summary>
            <returns>
            	<para>
            		<c>true</c> indicates the <paramref name="left"/> is less than or
                    equal to the <paramref name="right"/>, <c>false</c> otherwise.
                </para>
            	<para>
            		<list type="table">
            			<listheader>
            				<term>Return Value</term>
            				<description>Description</description>
            			</listheader>
            			<item>
            				<term><c>true</c></term>
            				<description>
            					<para>
            						<paramref name="left"/> and
                                    <paramref name="right"/> are not
                                    <see cref="F:Teradata.Client.Provider.TdIntervalHourToSecond.Null"/> and
                                    <paramref name="left"/> is less than or equal to
                                    <paramref name="right"/>
            					</para>
            					<para>-or-</para>
            					<para>
            						<paramref name="left"/> is <strong>Null</strong>
                                    and <paramref name="right"/> is
                                    <strong>Null</strong>.
            					</para>
            				</description>
            			</item>
            			<item>
            				<term><c>false</c></term>
            				<description>
            					<para>
                                    The <paramref name="left"/> is greater than
                                    <paramref name="right"/>
            					</para>
            					<para>-or-</para>
            					<para>
                                    Either <paramref name="left"/> or
                                    <paramref name="right"/> is <strong>Null</strong>.
            					</para>
            				</description>
            			</item>
            		</list>
            	</para>
            </returns>
            <remarks>
            	<para>
                    Comparison operators always return <c>false</c> if one of the operands is
                    <strong>Null</strong>. Therefore you should not assume that the reverse
                    condition is <c>true</c>. For example you cannot assume that the
                    <paramref name="left"/> is greater than the <paramref name="right"/>
                    if the "&lt;=" operator returns <c>false</c>.
                </para>
            	<para>
                    The reverse condition is <c>true</c> when the
                    <paramref name="left"/> and the
                    <paramref name="right"/> are not <strong>Null</strong>.
                </para>
            </remarks>
            <param name="left">An instance of <see cref="T:Teradata.Client.Provider.TdIntervalHourToSecond"/>.</param>
            <param name="right">An instance of <strong>TdIntervalHourToSecond</strong>.</param>
        </member>
        <member name="M:Teradata.Client.Provider.TdIntervalHourToSecond.op_Explicit(System.TimeSpan)~Teradata.Client.Provider.TdIntervalHourToSecond">
            <summary>
               Converts a <see cref="T:System.TimeSpan"/> to a <see cref="T:Teradata.Client.Provider.TdIntervalHourToSecond"/>.
            </summary>
            <remarks>
               <strong>TimeSpan</strong> fractional seconds may be truncated during conversion into 
               a <strong>TdIntervalHourToSecond</strong> interval.  <strong>TimeSpan</strong>
               supports seven digits right of the decimal for fractional seconds, while
               <strong>TdIntervalHourToSecond</strong> supports six digits right of the decimal
               for fractional seconds (microseconds).
            </remarks>
            <exception cref="T:System.OverflowException">
               The resultant operation returns a value greater than the <see cref="F:Teradata.Client.Provider.TdIntervalHourToSecond.MaxValue"/> 
               or less than the <see cref="F:Teradata.Client.Provider.TdIntervalHourToSecond.MinValue"/>.
            </exception>
            <param name="value">A <strong>TimeSpan</strong>.</param>
            <returns>A <strong>TdIntervalHourToSecond</strong> interval.</returns>
        </member>
        <member name="M:Teradata.Client.Provider.TdIntervalHourToSecond.op_Explicit(Teradata.Client.Provider.TdIntervalHourToSecond)~System.TimeSpan">
            <summary>
               Converts a <see cref="T:Teradata.Client.Provider.TdIntervalHourToSecond"/> to a <see cref="T:System.TimeSpan"/>.
            </summary>
            <remarks>
               The <strong>TimeSpan</strong> time components are represented in 24 hour format.
            </remarks>
            <exception cref="T:System.ArgumentNullException">
               The <strong>TdIntervalHourToSecond</strong> value is <see cref="F:Teradata.Client.Provider.TdIntervalHourToSecond.Null"/>.
            </exception>
            <param name="value">A <strong>TdIntervalHourToSecond</strong> interval.</param>
            <returns>A <strong>TimeSpan</strong>.</returns>
        </member>
        <member name="M:Teradata.Client.Provider.TdIntervalHourToSecond.op_Implicit(Teradata.Client.Provider.TdIntervalHourToSecond)~Teradata.Client.Provider.TdIntervalDayToSecond">
            <summary>
               Converts a <see cref="T:Teradata.Client.Provider.TdIntervalHourToSecond"/> to <see cref="T:Teradata.Client.Provider.TdIntervalDayToSecond"/>.
            </summary>
            <remarks>
            <para>
               The <see cref="P:Teradata.Client.Provider.TdIntervalDayToSecond.Precision"/> is set 1 (value = 0) since 
               <paramref name="value"/> does not contain the days interval component and the 
               <see cref="P:Teradata.Client.Provider.TdIntervalDayToSecond.Scale"/> is set to scale of the parameter 
               <strong>value</strong>.
            </para>
            </remarks>
            <param name="value">A <strong>TdIntervalHourToSecond</strong> interval.</param>
            <returns>A <strong>TdIntervalDayToSecond</strong>.</returns>
        </member>
        <member name="P:Teradata.Client.Provider.TdIntervalHourToSecond.IsNull">
            <summary>
               Indicates whether this <see cref="T:Teradata.Client.Provider.TdIntervalHourToSecond"/> instance is <see cref="F:Teradata.Client.Provider.TdIntervalHourToSecond.Null"/>. 
            </summary>
            <value>
               <c>true</c> if this <strong>TdIntervalHourToSecond</strong> is <strong>Null</strong>; 
               <c>false</c> otherwise.
            </value>
        </member>
        <member name="P:Teradata.Client.Provider.TdIntervalHourToSecond.Hours">
            <summary>
               The number of interval hours is returned. The return value ranges from -9999 to 9999.
            </summary>
            <remarks>
            <para>
               A <see cref="T:Teradata.Client.Provider.TdIntervalHourToSecond"/> is represented as [-][hours]:mm:ss.ffffff.  The 
               minus sign is optional and represents a negative interval of time.  The hours component
               represents hours, the mm component minutes, the ss seconds and the ffffff fractional   
               seconds.  The value of the Hours property is the hours component.
            </para>
            <para>
               A negative interval will return all properties (hours, minutes, seconds and fractional 
               seconds) as negative values.
            </para>
            </remarks>
            <exception cref="T:Teradata.Client.Provider.TdException">
               This property is not available when this instance is <see cref="F:Teradata.Client.Provider.TdIntervalHourToSecond.Null"/>.
            </exception>
        </member>
        <member name="P:Teradata.Client.Provider.TdIntervalHourToSecond.Minutes">
            <summary>
               The number of interval minutes is returned. The return value ranges from -59 to 59.
            </summary>
            <remarks>
            <para>
               A <see cref="T:Teradata.Client.Provider.TdIntervalHourToSecond"/> is represented as [-][hours]:mm:ss.ffffff.   
               The minus sign is optional and represents a negative interval of time.  The hours 
               component represents hours, the mm component minutes, the ss seconds and the   
               ffffff fractional seconds.  The value of the Minutes property is the mm component.
            </para>
            <para>
               A negative interval will return all properties (hours, minutes, seconds and fractional 
               seconds) as negative values.
            </para>
            </remarks>
            <exception cref="T:Teradata.Client.Provider.TdException">
               This property is not available when this instance is <see cref="F:Teradata.Client.Provider.TdIntervalHourToSecond.Null"/>.
            </exception>
        </member>
        <member name="P:Teradata.Client.Provider.TdIntervalHourToSecond.Seconds">
            <summary>
               The number of interval seconds is returned. The return value ranges from -59 to 59.
            </summary>
            <remarks>
            <para>
               A <see cref="T:Teradata.Client.Provider.TdIntervalHourToSecond"/> is represented as [-][hours]:mm:ss.ffffff.  The 
               minus sign is optional and represents a negative interval of time.  The hours component
               represents hours, the mm component minutes, the ss seconds and the ffffff fractional   
               seconds.  The value of the Seconds property is the ss component.
            </para>
            <para>
               A negative interval will return all properties (hours, minutes, seconds and fractional 
               seconds) as negative values.
            </para>
            </remarks>
            <exception cref="T:Teradata.Client.Provider.TdException">
               This property is not available when this instance is <see cref="F:Teradata.Client.Provider.TdIntervalHourToSecond.Null"/>.
            </exception>
        </member>
        <member name="P:Teradata.Client.Provider.TdIntervalHourToSecond.Microseconds">
            <summary>
               The number of interval microseconds is returned. The return value ranges from
               -999999 to 999999.
            </summary>
            <remarks>
            <para>
               A <see cref="T:Teradata.Client.Provider.TdIntervalHourToSecond"/> is represented as [-][hours]:mm:ss.ffffff.  The 
               minus sign is optional and represents a negative interval of time.  The hours component
               represents hours, the mm component minutes, the ss seconds and the ffffff fractional   
               seconds.  The value of the Microseconds property is the ffffff component.  The .ffffff 
               component is optional.
            </para>
            <para>
               A negative interval will return all properties (hours, minutes, seconds and fractional 
               seconds) as negative values.
            </para>
            </remarks>
            <exception cref="T:Teradata.Client.Provider.TdException">
               This property is not available when this instance is <see cref="F:Teradata.Client.Provider.TdIntervalHourToSecond.Null"/>.
            </exception>
        </member>
        <member name="P:Teradata.Client.Provider.TdIntervalHourToSecond.Precision">
            <summary>
               The number of significant digits of the hour is returned. The return value
               ranges from 1 to 4.
            </summary>
            <exception cref="T:Teradata.Client.Provider.TdException">
               This property is not available when this instance is <see cref="F:Teradata.Client.Provider.TdIntervalHourToSecond.Null"/>.
            </exception>
        </member>
        <member name="P:Teradata.Client.Provider.TdIntervalHourToSecond.Scale">
            <summary>
               The number of decimal places for the second is returned. The return value ranges 
               from 0 to 6.        
            </summary>
            <exception cref="T:Teradata.Client.Provider.TdException">
               This property is not available when this instance is <see cref="F:Teradata.Client.Provider.TdIntervalHourToSecond.Null"/>.
            </exception>
        </member>
        <member name="P:Teradata.Client.Provider.TdIntervalHourToSecond.Value">
            <summary>
               Gets the .NET data type representation of <see cref="T:Teradata.Client.Provider.TdIntervalHourToSecond"/> 
               as a <see cref="T:System.TimeSpan"/>.
            </summary>
            <remarks>
               This property in concept parallels <see cref="M:Teradata.Client.Provider.TdDataReader.GetValue(System.Int32)"/> and
               <see cref="P:Teradata.Client.Provider.TdParameter.Value"/>. That is they all represent the .NET Framework 
               Class Library(FCL) primitive data type that correspond to the Teradata 
               Interval Hour To Second data type.
            </remarks>
            <value>The interval represented as a <strong>TimeSpan</strong> is returned.</value>
            <exception cref="T:Teradata.Client.Provider.TdException">
               This property is not available when this instance is <see cref="F:Teradata.Client.Provider.TdIntervalHourToSecond.Null"/>.
            </exception>
        </member>
        <member name="P:Teradata.Client.Provider.TdIntervalHourToSecond.InternalTimespan">
            <summary>
               Return the internal TimeSpan representing the interval.
            </summary>
            <remarks>
               The internal timespan is used in calculating arithmetic operations and in storing
               day-time intervals.
            </remarks>
        </member>
        <member name="P:Teradata.Client.Provider.TdIntervalHourToSecond.ObjectId">
            <summary>
               Gets the instance object identifier.
            </summary>
        </member>
        <member name="P:Teradata.Client.Provider.TdIntervalHourToSecond.DecimalFractionalSecond">
            <summary>
               The decimal fractional seconds are returned. The return value ranges from
               -999999 to 999999.
            </summary>
            <remarks>
            <para>
               A <see cref="T:Teradata.Client.Provider.TdIntervalHourToSecond"/> is represented as 
               [-][hours]:[mm]:[ss].[ffffff]. The minus sign is optional 
               and represents a negative interval of time. The hours represents hours, the mm 
               minutes, the ss seconds and the ffffff fractional seconds.  The value of the Microseconds property
               is the ffffff component.
            </para>
            <para>
               A negative interval will return all properties (minutes, hours, seconds and fractional 
               seconds) as negative values.
            </para>
            <para>This property is used in ToString to display the interval as a decimal fractional second.</para>
            </remarks>
        </member>
        <member name="P:Teradata.Client.Provider.TdIntervalHourToSecond.IsNegative">
            <summary>
               Indicate if the interval is negative.
            </summary>
            <remarks>
               Timespan.ticks will indicate a negative interval.  Other values (days, hours, minutes, 
                milliseconds) may be 0 and the interval may still be negative.
            </remarks>
        </member>
        <member name="P:Teradata.Client.Provider.TdIntervalHourToSecond.InternalAccessor">
            <summary>
               Accessor to the internal storage for this interval.
            </summary>
        </member>
        <member name="T:Teradata.Client.Provider.TdIntervalMinute">
            <summary>
                <see cref="T:Teradata.Client.Provider.TdIntervalMinute"/> represents an interval of time defining a duration in
                minutes. The minute precision is configurable.
            </summary>
            <remarks>
                <para>
                    <strong>TdIntervalMinute</strong> is a .NET Data Provider for Teradata specific 
                    type, designed to support a Teradata Database Interval Minute data type.
                </para>
            	<para>
                    The <strong>TdIntervalMinute</strong> supports the Teradata Interval Minute 
                    (precision) data type where precision indicates the number of digits in the
                    minutes (from 1 - 4).
                </para>
                <para>
                    The interval value must be specified in the following format :
                </para>
            	<para>[sign][minutes]</para>
            	<para>Below is the description of each format item.</para>
            	<para>
            		<list type="table">
            			<listheader>
            				<term>Format Item</term>
            				<description>Description</description>
            			</listheader>
            			<item>
            				<term>sign</term>
            				<description>Optional - . Defaults as space character (+).</description>
            			</item>
            			<item>
            				<term>minutes</term>
            				<description>Required number of minutes (one to four digits in
                            length).</description>
            			</item>
            		</list>
            	</para>
                <para>
                    The .Net Framework does not have a system type that directly corresponds to the
                    Teradata Database Interval Minute data type. The .NET Data Provider for 
                    Teradata Version 13.0 version and prior versions map Interval Minute to System.String. 
                    With version 13.1 of the provider, <strong>TdIntervalMinute</strong> is 
                    available to retrieve and manipulate data of type Interval Minute. 
                </para>
                <para>
                   The range of values for each <strong>TdIntervalMinute</strong> precision 
                   is as follows:
            	</para>
            	<para>
            		<table class="xmldoctable" cellspacing="0">
            			<tbody>
            				<tr>
            					<th>Type and Precision</th>
            					<th>Minimum</th>
            					<th>Maximum</th>
            				</tr>
            				<tr>
            					<td class="xmldoctable">TdIntervalMinute(1)</td>
            					<td class="xmldoctable">
            						<para>-'9'</para>
            					</td>
            					<td>'9'</td>
            				</tr>
            				<tr>
            					<td class="xmldoctable">TdIntervalMinute(2)</td>
            					<td class="xmldoctable">
            						<para>-'99'</para>
            					</td>
            					<td>'99'</td>
            				</tr>
            				<tr>
            					<td class="xmldoctable">TdIntervalMinute(3)</td>
            					<td class="xmldoctable">
            						<para>-'999'</para>
            					</td>
            					<td>'999'</td>
            				</tr>
            				<tr>
            					<td class="xmldoctable">TdIntervalMinute(4)</td>
            					<td class="xmldoctable">
            						<para>-'9999'</para>
            					</td>
            					<td>'9999'</td>
            				</tr>
            			</tbody>
            		</table>
            	</para>
                <para>
                    <strong>TdIntervalMinute</strong> also supports 
                    <see cref="F:Teradata.Client.Provider.TdIntervalMinute.Null"/>. This is a very important feature.
                    An application is no longer required to call
                    <see cref="M:Teradata.Client.Provider.TdDataReader.IsDBNull(System.Int32)"/> before invoking the corresponding 
                    TdDataReader "Get" method.  This will improve overall performance.
                </para>
                <para>
                    A <strong>TdIntervalMinute</strong> structure allows arithmetic,
                    comparision and conversion operations to be performed. 
                </para>
            	<para>
                    A <strong>TdIntervalMinute</strong> may also be specified as an in, out, 
                    or in/out parameter to a stored procedure. In order to maintain backward  
                    compatibility with previous versions of the provider (release 13.0 and prior), 
                    a Connection String Attribute
                    <see cref="P:Teradata.Client.Provider.TdConnectionStringBuilder.EnableTdIntervals">EnableTdIntervals</see>
                    has been added. When the <strong>EnableTdIntervals</strong> attribute
                    is <c>true</c>, <see cref="P:Teradata.Client.Provider.TdParameter.ProviderSpecificValue"/> will
                    return the data as the provider specific type of <strong>TdIntervalMinute</strong>.
                    When <strong>EnableTdIntervals</strong> is <c>false</c>, 
                    <strong>TdParameter.ProviderSpecificValue</strong> will return the data as a
                    .NET Framework Library data type of <see cref="T:System.String"/>. 
                </para>
            	<para>
                    The <see cref="P:Teradata.Client.Provider.TdParameter.Value"/> will also return the .NET Framework Library
                    data type of <strong>System.String</strong> when <strong>EnableTdIntervals</strong>
                    is <c>false</c> to maintain backward compatibility. 
                    The <strong>TdParameter.Value</strong> will return a .NET Framework data type of
                    <see cref="T:System.TimeSpan"/> when <strong>EnableTdIntervals</strong>
                    is <c>true</c>.
                </para>
                <para>For more information on the Teradata Interval Minute data type please
                    see the Teradata Database SQL Reference - 'Data Types and Literals'.
                </para>
            </remarks>
            <example>
            	<para>
                   The following example shows how to retrieve a <strong>TdIntervalSecond</strong>, 
                   modify the interval, and then update the table.
               </para>
            	<code lang="CS">
            Public void IntervalExample(TdCommand cmd, Int32 task)
            {
               cmd.Parameters.Clear();
               
               cmd.CommandText = "SELECT StartDate, StartTime, TaskLen " +
                                 "FROM Schedule " +
                                 "WHERE Task = ?";
             
               cmd.CommandType = CommandType.Text;
             
               cmd.Parameters.Add(null, TdType.Integer, 4,
                    ParameterDirection.Input, true, 0, 0, null,    
                    DataRowVersion.Default, task);
             
               Int32 row = 0;
               TdDate [] startDate;
               TdTimestamp [] startTime;
               TdIntervalSecond [] taskLen;
             
               using (TdDataReader dr = cmd.ExecuteReader())
               {
                  startDate = new TdDate[dr.RecordsReturned];
                  startTime = new TdTimestamp[dr.RecordsReturned];
                  taskLen = new TdIntervalSecond [dr.RecordsReturned];
             
                  // Specifying an interval of 2 hours, 5 minutes 
                  // with an second precision of 4
                  TdIntervalSecond leaseReturnExtension = new TdIntervalSecond(125, 4);
               
                  while (dr.Read())
                  {
                     // Retrieving the dates
                     startDate[row] = dr.GetTdDate(0);
                     startTime[row] = dr.GetTimestamp(1);
                     taskLen[row] = dr.GetTdIntervalMinute(2);
             
                     // Adding extension to the lease return
                     startTime[row] = startTime[row] + leaseReturnExtension;
             
                     // Adding extension to the lease length;
                     taskLen[row] = taskLen[row] + leaseReturnExtension;
             
                     row++;
                  } 
               }
             
               cmd.Parameters.Clear();
             
               cmd.CommandText = "UPDATE Schedule " +
                                 "SET StartTime = ?, TaskLen = ? " +
                                 "WHERE Task = ?";
             
               cmd.Parameters.Add(null, TdType.Timestamp, 0,
                     ParameterDirection.Input, true, 0, 0, null,    
                     DataRowVersion.Default, null);
             
               cmd.Parameters.Add(null, TdType.IntervalMinute, 0,
                     ParameterDirection.Input, true, 0, 0, null,    
                     DataRowVersion.Default, null);
             
               cmd.Parameters.Add(null, TdType.Integer, 4,
                     ParameterDirection.Input, true, 0, 0, null,    
                     DataRowVersion.Default, task);
             
               row--;
               while(row &gt;= 0)
               {
                  cmd.Parameters[0].Value = startTime[row];
                  cmd.Parameters[1].Value = taskLen[row];
                  cmd.Parameters[2].Value = task;
             
                  cmd.ExecuteNonQuery();
                  row--;
               }
            }
            </code>
            </example>
            <seealso cref="P:Teradata.Client.Provider.TdConnectionStringBuilder.EnableTdIntervals"/> 
            <seealso cref="!:IntervalConnectionString.html">Interval Connection String Attribute</seealso>
            <seealso cref="!:EnableProviderSpecificTypes.html">Enabling Provider Specific Types</seealso>
            <seealso cref="!:IntervalTypeOverview.html">Provider Specific Type:  Interval Type Overview</seealso>
        </member>
        <member name="F:Teradata.Client.Provider.TdIntervalMinute.MaxPrecision">
            <summary>
               A constant representing the maximum number of significant digits in the 
               <see cref="P:Teradata.Client.Provider.TdIntervalMinute.Minutes"/> interval component.
            </summary>
            <remarks>
               The value of this constant is 4.
            </remarks>
        </member>
        <member name="F:Teradata.Client.Provider.TdIntervalMinute.MinPrecision">
            <summary>
               A constant representing the minimum number of significant digits in the 
               <see cref="P:Teradata.Client.Provider.TdIntervalMinute.Minutes"/> interval component.
            </summary>
            <remarks>
               The value of this constant is 1.
            </remarks>
        </member>
        <member name="F:Teradata.Client.Provider.TdIntervalMinute.Null">
            <summary>
               Gets a <strong>Null</strong> instance of <see cref="T:Teradata.Client.Provider.TdIntervalMinute"/>.
            </summary>
            <value>
               Returns a <strong>TdIntervalMinute</strong> instance that represents a 
               <strong>Null</strong> value.
            </value>
            <remarks>
               Conceptually it is the constructor for <strong>Null</strong> instances of <strong>TdIntervalMinute</strong>.
            </remarks>
            <example>
            This example shows how to send a <strong>Null</strong> value to a Teradata database.
            <code>
            TdParameter col1 = new TdParameter();
            col1.TdType = TdType.TdIntervalMinute;
            col1.Value = TdIntervalMinute.Null;
            </code>
            </example>
        </member>
        <member name="F:Teradata.Client.Provider.TdIntervalMinute.Zero">
            <summary>
               Gets an <see cref="T:Teradata.Client.Provider.TdIntervalMinute"/> instance that contains all zero elements
               for each interval field.
            </summary>
            <remarks>
               A Zero <Strong>TdIntervalMinute</Strong> may be used to determine whether
               other instances of intervals represent postive, negative or non-zero intervals.
            </remarks>
            <example>
            This example shows how to determine if an interval is negative.
            <code>
            TdIntervalDayTo Second minuteInterval = new TdIntervalMinute(-30);
            if (minuteInterval &lt; TdIntervalMinute.Zero)
            {
               Console.WriteLine("The Interval is negative");
            }
            // The output of the console is "The interval is negative"
            </code>
            </example>
        </member>
        <member name="F:Teradata.Client.Provider.TdIntervalMinute.MinValue">
            <summary>
               The smallest possible value for <see cref="T:Teradata.Client.Provider.TdIntervalMinute"/>.
            </summary>
            <remarks>
               The value is -'9999'.
            </remarks>
        </member>
        <member name="F:Teradata.Client.Provider.TdIntervalMinute.MaxValue">
            <summary>
               The largest possible value for <see cref="T:Teradata.Client.Provider.TdIntervalMinute"/>.
            </summary>
            <remarks>
               The value is '9999'.
            </remarks>
        </member>
        <member name="M:Teradata.Client.Provider.TdIntervalMinute.#ctor(System.Int32,System.Byte)">
            <summary>
               An instance of <see cref="T:Teradata.Client.Provider.TdIntervalMinute"/> is created from a time  
               component specified as an integer while precision is specified as a byte.
            </summary>
            <remarks>
            <para>
               The number of minutes is converted into a <strong>TdIntervalMinute</strong>
               and validated to determine if the <see cref="F:Teradata.Client.Provider.TdIntervalMinute.MinValue"/>
               or the <see cref="F:Teradata.Client.Provider.TdIntervalMinute.MaxValue"/> values have been exceeded. If the values are
               not exceeded but the resulting minutes component exceeds the supplied 
               <paramref name="precision"/> value, an exception is generated.
            </para>
            <para>
               For example a constructor for TdIntervalMinute(444, 2) requests
               444 minutes with a precision of 2. The resulting minutes value 
               cannot be represented in 2 digits, therefore an exception is generated,
               even though the <strong>MinValue</strong> and the
               <strong>MaxValue</strong> values have not been exceeded.
            </para>
            <para>
               Negative constructor parameters may be supplied to represent negative durations of time.
            </para>
            </remarks>
            <exception cref="T:System.OverflowException" caption="OverflowException">
               The <strong>minutes</strong> parameter specifies a <strong>TdIntervalMinute</strong> 
               value less than <see cref="F:Teradata.Client.Provider.TdIntervalMinute.MinValue"/> or greater than <see cref="F:Teradata.Client.Provider.TdIntervalMinute.MaxValue"/>.
            </exception>
            <exception cref="T:System.ArgumentOutOfRangeException" caption="ArgumentOutOfRangeException">
               The <strong>precision</strong> parameter is outside the <see cref="F:Teradata.Client.Provider.TdIntervalMinute.MinPrecision"/> 
               or <see cref="F:Teradata.Client.Provider.TdIntervalMinute.MaxPrecision"/> range of values."/&gt;.
            </exception>
            <exception cref="T:System.ArgumentException" caption="ArgumentException">
               The <strong>precision</strong> parameter is not large enough to represent the 
               number of minutes.
            </exception>
            <overloads>
               Initializes a new instance of <strong>TdIntervalMinute</strong>.
            </overloads>
            <param name="minutes">Number of minutes.</param>
            <param name="precision">Number of significant digits of the day.</param>
        </member>
        <member name="M:Teradata.Client.Provider.TdIntervalMinute.#ctor(System.Int32)">
            <summary>
               An instance of <see cref="T:Teradata.Client.Provider.TdIntervalMinute"/> is created from time  
               components specified as integers.
            </summary>
            <remarks>
            <para>
               The number of minutes is constructed into a <strong>TdIntervalMinute</strong>
               and evaluated against  <see cref="F:Teradata.Client.Provider.TdIntervalMinute.MinValue"/> and <see cref="F:Teradata.Client.Provider.TdIntervalMinute.MaxValue"/>.  The 
               <see cref="P:Teradata.Client.Provider.TdIntervalMinute.Precision"/> is then calculated from the number of digits contained within
               the interval minute component.
            </para>
            <para>
               For example, 99 minutes is first constructed into a
               <strong>TdIntervalMinute</strong>.  Precision is calculated to be a 
               value of 2 representing two significant digits in the minutes.
            </para>
            <para>
               Negative constructor parameters may be supplied to represent negative durations of time.
            </para>
            </remarks>
            <exception cref="T:System.OverflowException" caption="OverflowException">
               The <strong>minutes</strong> parameter specifies a <strong>TdIntervalMinute</strong> 
               value less than <see cref="F:Teradata.Client.Provider.TdIntervalMinute.MinValue"/> or greater than <see cref="F:Teradata.Client.Provider.TdIntervalMinute.MaxValue"/>.
            </exception>
            <param name="minutes">Number of minutes.</param>
        </member>
        <member name="M:Teradata.Client.Provider.TdIntervalMinute.#ctor(System.TimeSpan)">
            <summary>
               An instance of <see cref="T:Teradata.Client.Provider.TdIntervalMinute"/> is created from a <see cref="T:System.TimeSpan"/>.
            </summary>
            <remarks>
            <para>
               The  <strong>TimeSpan</strong> value is converted into a <strong>TdIntervalMinute</strong>
               and evaluated against <see cref="F:Teradata.Client.Provider.TdIntervalMinute.MinValue"/> and <see cref="F:Teradata.Client.Provider.TdIntervalMinute.MaxValue"/>.  The 
               <see cref="P:Teradata.Client.Provider.TdIntervalMinute.Precision"/> is then calculated from the number of digits contained within 
               the interval minute component.
            </para>
            <para>
               After conversion of the <strong>TimeSpan</strong> value into a
               <strong>TdIntervalMinute</strong>, any seconds or microseconds will be truncated.
               For example, a TimeSpan value created with a <see cref="P:System.TimeSpan.Ticks"/> value
               of 2400401234567 results in a value of 40 hours, 0 minutes and 
               40.1234567 seconds.  The <strong>TdIntervalMinute</strong> literal 
               representation results in a <strong>TdIntervalMinute</strong> value of  
               '4000'. The 40.1234567 seconds value is truncated. 
               Precision is calculated to be a value of 4 representing four significant digits in the minute.
            </para>
            </remarks>
            <exception cref="T:System.OverflowException" caption="OverflowException">
               The <strong>timespan</strong> parameter specifies a <strong>TdIntervalMinute</strong> 
               value less than <see cref="F:Teradata.Client.Provider.TdIntervalMinute.MinValue"/> or greater than <see cref="F:Teradata.Client.Provider.TdIntervalMinute.MaxValue"/>.
            </exception>
            <param name="timeSpan">A TimeSpan to initialize <strong>TdIntervalMinute</strong>.</param>
        </member>
        <member name="M:Teradata.Client.Provider.TdIntervalMinute.#ctor(System.TimeSpan,System.Byte)">
            <summary>
               An instance of <see cref="T:Teradata.Client.Provider.TdIntervalMinute"/> is created using a <see cref="T:System.TimeSpan"/> 
               specifying the minute precision as a byte.
            </summary>
            <remarks>
            <para>
               The  <strong>TimeSpan</strong> value is converted into a <strong>TdIntervalMinute</strong>"/&gt;
               and evaluated against <see cref="F:Teradata.Client.Provider.TdIntervalMinute.MinValue"/> and <see cref="F:Teradata.Client.Provider.TdIntervalMinute.MaxValue"/>.  If the values 
               are not exceeded but the resulting minutes component exceeds the supplied parameter
                <paramref name="precision"/> value, an exception is generated.
            </para>
            <para>
               After conversion of the <strong>TimeSpan</strong> value into a
               <strong>TdIntervalMinute</strong>, any seconds or microseconds will be truncated.
               For example, a TimeSpan value created with a <see cref="P:System.TimeSpan.Ticks"/> value
               of 2400401234567 results in a value of 40 hours, 0 minutes and 
               40.1234567 seconds.  The <strong>TdIntervalMinute</strong> literal 
               representation results in a <strong>TdIntervalMinute</strong> value of  
               '4000'. The 40.1234567 seconds value is truncated. 
            </para>
            </remarks>
            <exception cref="T:System.OverflowException" caption="OverflowException">
               The <strong>timespan</strong> parameter specifies a <strong>TdIntervalMinute</strong> 
               value less than <see cref="F:Teradata.Client.Provider.TdIntervalMinute.MinValue"/> or greater than <see cref="F:Teradata.Client.Provider.TdIntervalMinute.MaxValue"/>.
            </exception>
            <exception cref="T:System.ArgumentOutOfRangeException" caption="ArgumentOutOfRangeException">
               The <strong>precision</strong> parameter is outside the <see cref="F:Teradata.Client.Provider.TdIntervalMinute.MinPrecision"/> 
               or <see cref="F:Teradata.Client.Provider.TdIntervalMinute.MaxPrecision"/> range of values."/&gt;.
            </exception>
            <exception cref="T:System.ArgumentException" caption="ArgumentException">
               The <strong>precision</strong> parameter is not large enough to represent the number 
               of minutes.
            </exception>
            <param name="timeSpan">A <strong>TimeSpan</strong> to initialize <strong>TdIntervalMinute</strong>.</param>
            <param name="precision">Number of significant digits of the day.</param>
        </member>
        <member name="M:Teradata.Client.Provider.TdIntervalMinute.CompareTo(Teradata.Client.Provider.TdIntervalMinute)">
            <summary>
               Compares this instance to the specified <see cref="T:Teradata.Client.Provider.TdIntervalMinute"/>  
               parameter <paramref name="other"/>.
            </summary>
            <returns>
               The result of the comparison is returned as a signed integer.
            </returns>
            <remarks>
            	<para>
                    The integer returned when this instance is compared to <paramref name="other"/>
                    indicates the following:
                </para>
            	<para>
            		<list type="table">
            			<listheader>
            				<term>Return Value</term>
            				<description>Meaning</description>
            			</listheader>
            			<item>
            				<term>Less than Zero</term>
            				<description>
            					<para>
                                    This instance is less than <paramref name="other"/>
                                </para>
            					<para>-or-</para>
            					<para>This instance is <see cref="F:Teradata.Client.Provider.TdIntervalMinute.Null"/> and
                                   <paramref name="other"/> is non-null.
                               </para>
            				</description>
            			</item>
            			<item>
            				<term>Zero</term>
            				<description>
            					<para>
                                    This instance is equal to <paramref name="other"/>
                                </para>
            					<para>-or-</para>
            					<para>
                                   This instance is <Strong>Null</Strong> and <paramref name="other"/> is
                                   <Strong>Null</Strong>.
                                </para>
            				</description>
            			</item>
            			<item>
            				<term>Greater than Zero</term>
            				<description>
            					<para>
                                    This instance is greater than
                                    <paramref name="other"/>
                                </para>
            					<para>-or-</para>
            					<para>
            						<paramref name="other"/> is <Strong>Null</Strong> and this instance is non-null.
                                </para>
            				</description>
            			</item>
            		</list>
            	</para>
            </remarks>
            <param name="other">The <strong>TdIntervalMinute</strong> to compare.</param>
        </member>
        <member name="M:Teradata.Client.Provider.TdIntervalMinute.CompareTo(System.Object)">
            <summary>
               Compares this instance to the specified <see cref="T:Teradata.Client.Provider.TdIntervalMinute"/> 
               <paramref name="obj"/>. 
            </summary>
            <returns>
               The result of the comparison is returned as a signed integer.
            </returns>
            <remarks>
            	<para>
                    The integer returned when this instance is compared to <paramref name="obj"/>
                    indicates the following:
                </para>
            	<para>
            		<list type="table">
            			<listheader>
            				<term>Return Value</term>
            				<description>Meaning</description>
            			</listheader>
            			<item>
            				<term>Less than Zero</term>
            				<description>
            					<para>This instance is less than <paramref name="obj"/></para>
            					<para>-or-</para>
            					<para>
                                   This instance is <see cref="F:Teradata.Client.Provider.TdIntervalMinute.Null"/> and 
                                   <paramref name="obj"/> is non-null.
                               </para>
            				</description>
            			</item>
            			<item>
            				<term>Zero</term>
            				<description>
            					<para>
                                    This instance is equal to <paramref name="obj"/>
                                </para>
            					<para>-or-</para>
            					<para>
                                   This instance is <Strong>Null</Strong> and <paramref name="obj"/> is
                                   <Strong>Null</Strong>.
                                </para>
            				</description>
            			</item>
            			<item>
            				<term>Greater than Zero</term>
            				<description>
            					<para>
                                    This instance is greater than <paramref name="obj"/>.
                                </para>
            					<para>-or-</para>
            					<para>
            						<paramref name="obj"/> is <Strong>Null</Strong> and this instance is non-null
                                </para>
            					<para>-or-</para>
            					<para>
            						<paramref name="obj"/> is a <c>null</c> reference.
                                </para>
            				</description>
            			</item>
            		</list>
            	</para>
               <para>
                   <paramref name="obj"/> must be an instance of <strong>TdIntervalMinute</strong> type or 
                   <c>null</c> reference.
               </para>
            </remarks>
            <exception cref="T:System.ArgumentException"><paramref name="obj"/> is not of same type as <strong>TdIntervalMinute</strong>.</exception>
            <seealso cref="M:Teradata.Client.Provider.TdIntervalMinute.CompareTo(Teradata.Client.Provider.TdIntervalMinute)"/>
            <overloads>
               Compares this instance to the supplied <strong>TdIntervalMinute</strong> 
               and returns whether this instance is less than, equal or greater than the supplied 
               <strong>TdIntervalMinute</strong>.
            </overloads>
            <param name="obj">A <strong>TdIntervalMinute</strong> object to compare.</param>
        </member>
        <member name="M:Teradata.Client.Provider.TdIntervalMinute.Equals(Teradata.Client.Provider.TdIntervalMinute)">
            <summary>
               Compares this instance and another <see cref="T:Teradata.Client.Provider.TdIntervalMinute"/> to determine 
               whether they are equal. 
            </summary>
            <returns>
               <c>true</c> if the two <strong>TdIntervalMinute</strong> objects are equal, 
               <c>false</c> otherwise.
            </returns>
            <remarks>
            	<para>
            		The return value is <c>true</c> if the instance is 
                    equal to the <paramref name="other"/>, <c>false</c> otherwise.
                </para>
            	<para>
            		<list type="table">
            			<listheader>
            				<term>Return Value</term>
            				<description>Description</description>
            			</listheader>
            			<item>
            				<term><c>true</c></term>
                            <description>
                                <para>This instance and <paramref name="other"/> are <see cref="F:Teradata.Client.Provider.TdIntervalMinute.Null"/></para>
                                <para>-or-</para>
                                <para>This instance is equal to <paramref name="other"/>.</para>
                            </description>
            			</item>
            			<item>
            				<term><c>false</c></term>
                            <description>
                            <para>This instance is <strong>Null</strong> and <paramref name="other"/> is not <strong>Null</strong></para>
                            <para>-or-</para>
                            <para>This instance is not <strong>Null</strong> and <paramref name="other"/> is <strong>Null</strong></para>
                            <para>-or-</para>
                            <para>This instance is not equal to <paramref name="other"/>.</para>
                            </description>
            			</item>
            		</list>
            	</para>
            </remarks>
            <overloads>
               Returns a value indicating whether two instances of 
               <strong>TdIntervalMinute</strong> are equal.
            </overloads>
            <param name="other">
               <strong>TdIntervalMinute</strong> that will be compared to this instance 
               of <strong>TdIntervalMinute</strong>.
            </param>
        </member>
        <member name="M:Teradata.Client.Provider.TdIntervalMinute.Equals(Teradata.Client.Provider.TdIntervalMinute,Teradata.Client.Provider.TdIntervalMinute)">
            <summary>
               Compares two <see cref="T:Teradata.Client.Provider.TdIntervalMinute"/> instances to determine whether they are equal.
            </summary>
            <returns>
               <c>true</c> if the two <strong>TdIntervalMinute</strong> instances are equal, 
               <c>false</c> otherwise.
            </returns>
            <remarks>
            	<para>
            		The return value is <c>true</c> if the <paramref name="left"/> is 
                    equal to the <paramref name="right"/>, <c>false</c> otherwise.
                </para>
            	<para>
            		<list type="table">
            			<listheader>
            				<term>Return Value</term>
            				<description>Description</description>
            			</listheader>
            			<item>
            				<term><c>true</c></term>
                            <description>
                                <para>
                                    <paramref name="left"/> is equal to <paramref name="right"/>
                                </para>
                                <para>-or-</para>
                                <para>
                                   <paramref name="left"/> and <paramref name="right"/> 
                                   are <see cref="F:Teradata.Client.Provider.TdIntervalMinute.Null"/>.
                                </para>
                            </description>
            			</item>
            			<item>
            				<term><c>false</c></term>
                            <description>
                              <para>
                                   <paramref name="left"/> is not equal to <paramref name="right"/>
                              </para>
                              <para>-or-</para>
                              <para>
                                   <paramref name="left"/> is not <strong>Null</strong> and 
                                   <paramref name="right"/> is <strong>Null</strong>
                               </para>
                              <para>-or-</para>
                              <para>
                                   <paramref name="left"/> is <strong>Null</strong> and 
                                    <paramref name="right"/> is not <strong>Null</strong>.
                               </para>
                            </description>
            			</item>
            		</list>
            	</para>
            </remarks>
            <example>
                The following code example uses various comparison methods and operators.
                <code lang="CS">
            TdIntervalMinute firstInterval = new TdIntervalMinute(5, 15);
            TdIntervalMinute secondInterval = new TdIntervalMinute(20, 15);
             
            // The following comparison methods and operators are equivalent
            if (false == TdIntervalMinute.Equals(firstInterval, secondInterval) ||
                firstInterval != secondInterval ||
                true == TdIntervalMinute.NotEquals(firstInterval, secondInterval) )
            {
               Console.WriteLine(“firstInterval does not equal secondInterval”);
            }
                </code>
            </example>
            <overloads>
               Returns a value indicating whether two instances of 
               <strong>TdIntervalMinute</strong> are equal.
            </overloads>
            <param name="left">A <strong>TdIntervalMinute</strong> instance.</param>
            <param name="right">A <strong>TdIntervalMinute</strong> instance.</param>
        </member>
        <member name="M:Teradata.Client.Provider.TdIntervalMinute.Compare(Teradata.Client.Provider.TdIntervalMinute,Teradata.Client.Provider.TdIntervalMinute)">
            <summary>
               Two <see cref="T:Teradata.Client.Provider.TdIntervalMinute"/> intervals are compared and a value is 
               returned that indicates <paramref name="left"/> is greater than, less than or 
               equal to <paramref name="right"/>.
            </summary>
            <returns>The result of the comparison is returned as a signed integer.</returns>
            <remarks>
            	<list type="table">
            		<listheader>
            			<term>Return Value</term>
            			<description>Description</description>
            		</listheader>
            		<item>
            			<term>Less than Zero</term>
            			<description>
                           <para>
                               <paramref name="left"/> is less than <paramref name="right"/>
                           </para>
            				<para>-or-</para>
                           <para>
                              <paramref name="left"/> is <see cref="F:Teradata.Client.Provider.TdIntervalMinute.Null"/>
                              and <paramref name="right"/> is not <strong>Null</strong>.
                           </para>
                        </description>
            		</item>
            		<item>
            			<term>Zero</term>
            			<description>
            				<para>
                               <paramref name="left"/> equals <paramref name="right"/>
                           </para>
            				<para>-or-</para>
                           <para>
                                <paramref name="left"/> is <strong>Null</strong> 
                                 and <paramref name="right"/> is <strong>Null</strong>.
                           </para>
                        </description>
            		</item>
            		<item>
            			<term>Greater than Zero</term>
            			<description>
            				<para><paramref name="left"/> is greater than <paramref name="right"/></para>
            				<para>-or-</para>
            				<para><paramref name="left"/> is not <strong>Null</strong> and
                            <paramref name="right"/> is <strong>Null</strong>.</para>
                        </description>
            		</item>
            	</list>
            </remarks>
            <param name="left">An instance of <strong>TdIntervalMinute</strong>.</param>
            <param name="right">An instance of <strong>TdIntervalMinute</strong>.</param>
        </member>
        <member name="M:Teradata.Client.Provider.TdIntervalMinute.NotEquals(Teradata.Client.Provider.TdIntervalMinute,Teradata.Client.Provider.TdIntervalMinute)">
            <summary>
                Compares two <see cref="T:Teradata.Client.Provider.TdIntervalMinute"/> interval types to determine whether the
                <paramref name="left"/> is not equal to <paramref name="right"/>.
            </summary>
            <returns>
            	<para>
            		<c>true</c> indicates <paramref name="left"/> is not equal to
                    <paramref name="right"/>, <c>false</c> otherwise.
                </para>
            	<para>
            		<list type="table">
            			<listheader>
            				<term>Return Value</term>
            				<description>Description</description>
            			</listheader>
            			<item>
            				<term><c>true</c></term>
            				<description>
            					<para>
            						<paramref name="left"/> is less than or greater
                                    than <paramref name="right"/>
            					</para>
            					<para>-or-</para>
            					<para>
            						Either <paramref name="left"/> or <paramref name="right"/> is
                                   <see cref="F:Teradata.Client.Provider.TdIntervalMinute.Null"/>.
                                </para>
            				</description>
            			</item>
            			<item>
            				<term><c>false</c></term>
            				<description>
            					<para>
            						<paramref name="left"/> is equal to
                                    <paramref name="right"/>
            					</para>
            					<para>-or-</para>
            					<para>
            						<paramref name="left"/> and <paramref name="right"/> are
                                   <strong>Null</strong>.
                                </para>
            				</description>
            			</item>
            		</list>
            	</para>
            </returns>
            <param name="left">An instance of <strong>TdIntervalMinute</strong>.</param>
            <param name="right">An instance of <strong>TdIntervalMinute</strong>.</param>
        </member>
        <member name="M:Teradata.Client.Provider.TdIntervalMinute.GreaterThan(Teradata.Client.Provider.TdIntervalMinute,Teradata.Client.Provider.TdIntervalMinute)">
            <summary>
               Determines whether the <paramref name="left"/> is greater than the <paramref name="right"/>.
            </summary>
            <returns>
            	<para>
            		<c>true</c> indicates the <paramref name="left"/> is greater than
                    the <paramref name="right"/>, <c>false</c> otherwise.
                </para>
            	<para>
            		<list type="table">
            			<listheader>
            				<term>Return Value</term>
            				<description>Description</description>
            			</listheader>
            			<item>
            				<term><c>true</c></term>
            				<description>
            					<paramref name="left"/> and
                                <paramref name="right"/> are not
                                <see cref="F:Teradata.Client.Provider.TdIntervalMinute.Null"/> and
                                <paramref name="left"/> is greater than
                                <paramref name="right"/>.
            				</description>
            			</item>
            			<item>
            				<term><c>false</c></term>
            				<description>
            					<para>
                                    The <paramref name="left"/> is less than or equal
                                    to <paramref name="right"/>
            					</para>
            					<para>-or-</para>
            					<para>
                                   <paramref name="left"/> and / or <paramref name="right"/>
                                   is <strong>Null</strong>.
                                </para>
            				</description>
            			</item>
            		</list>
            	</para>
            </returns>
            <remarks>
            	<para>
                    Comparison operators always return <c>false</c> if one of the operands is
                    <strong>Null</strong>. Therefore you should not assume that the reverse
                    condition is <c>true</c>. For example you cannot assume that the
                    <paramref name="left"/> is less than or equal to the
                    <paramref name="right"/> if <c>GreaterThan</c> returns <c>false</c>.
                </para>
            	<para>
                    The reverse condition is <c>true</c> when the
                    <paramref name="left"/> and the
                    <paramref name="right"/> are not <strong>Null</strong>.
                </para>
            </remarks>
            <param name="left">An instance of <see cref="T:Teradata.Client.Provider.TdIntervalMinute"/>.</param>
            <param name="right">An instance of <strong>TdIntervalMinute</strong>.</param>
        </member>
        <member name="M:Teradata.Client.Provider.TdIntervalMinute.GreaterThanOrEqual(Teradata.Client.Provider.TdIntervalMinute,Teradata.Client.Provider.TdIntervalMinute)">
            <summary>
               This operator determines whether the <paramref name="left"/> is greater than or 
               equal to the <paramref name="right"/>.
            </summary>
            <returns>
            	<para>
            		<c>true</c> indicates the <paramref name="left"/> is greater than
                    or equal to the <paramref name="right"/>, <c>false</c> otherwise.
                </para>
            	<para>
            		<list type="table">
            			<listheader>
            				<term>Return Value</term>
            				<description>Description</description>
            			</listheader>
            			<item>
            				<term><c>true</c></term>
            				<description>
            					<para>
            						<paramref name="left"/> and
                                    <paramref name="right"/> are not
                                    <see cref="F:Teradata.Client.Provider.TdIntervalMinute.Null"/> and
                                    <paramref name="left"/> is greater than or equal
                                    to <paramref name="right"/>
            					</para>
            					<para>-or-</para>
            					<para>
            						<paramref name="left"/> is <strong>Null</strong>
                                    and <paramref name="right"/> is
                                    <strong>Null</strong>.
            					</para>
            				</description>
            			</item>
            			<item>
            				<term><c>false</c></term>
            				<description>
            					<para>
                                    The <paramref name="left"/> is less than
                                    <paramref name="right"/>
            					</para>
            					<para>-or-</para>
            					<para>
                                    Either <paramref name="left"/> or
                                    <paramref name="right"/> is <strong>Null</strong>.
            					</para>
            				</description>
            			</item>
            		</list>
            	</para>
            </returns>
            <remarks>
            	<para>
                    Comparison operators always return <c>false</c> if one of the operands is
                    <strong>Null</strong>. Therefore you should not assume that the reverse
                    condition is <c>true</c>. For example you cannot assume that the
                    <paramref name="left"/> is less than the
                    <paramref name="right"/> if the <c>GreaterThanOrEqual</c> method returns
                    <c>false</c>.
                </para>
            	<para>
                    The reverse condition is <c>true</c> when the
                    <paramref name="left"/> and the
                    <paramref name="right"/> are not <strong>Null</strong>.
                </para>
            </remarks>
            <param name="left">An instance of <see cref="T:Teradata.Client.Provider.TdIntervalMinute"/>.</param>
            <param name="right">An instance of <strong>TdIntervalMinute</strong>.</param>
        </member>
        <member name="M:Teradata.Client.Provider.TdIntervalMinute.LessThan(Teradata.Client.Provider.TdIntervalMinute,Teradata.Client.Provider.TdIntervalMinute)">
            <summary>
               This method determines whether the <paramref name="left"/> is less than the <paramref name="right"/>.
            </summary>
            <returns>
            	<para>
            		<c>true</c> indicates the <paramref name="left"/> is less than
                    the <paramref name="right"/>, <c>false</c> otherwise.
                </para>
            	<para>
            		<list type="table">
            			<listheader>
            				<term>Return Value</term>
            				<description>Description</description>
            			</listheader>
            			<item>
            				<term><c>true</c></term>
            				<description>
            					<paramref name="left"/> and <paramref name="right"/> are
                                not <see cref="F:Teradata.Client.Provider.TdIntervalMinute.Null"/> and
                                <paramref name="left"/> is less than
                                <paramref name="right"/>.
            				</description>
            			</item>
            			<item>
            				<term><c>false</c></term>
            				<description>
            					<para>
                                    The <paramref name="left"/> is greater than or
                                    equal to <paramref name="right"/>
            					</para>
            					<para>-or-</para>
            					<para>
                                    <paramref name="left"/> and / or <paramref name="right"/> is
                                    <strong>Null</strong>.
            					</para>
            				</description>
            			</item>
            		</list>
            	</para>
            </returns>
            <remarks>
            	<para>
                    Comparison operators always return <c>false</c> if one of the operands is
                    <strong>Null</strong>. Therefore you should not assume that the reverse
                    condition is <c>true</c>. For example you cannot assume that the
                    <paramref name="left"/> is greater than or equal to the
                    <paramref name="right"/> if the <c>LessThan</c> method returns
                    <c>false</c>.
                </para>
            	<para>
                    The reverse condition is <c>true</c> when the
                    <paramref name="left"/> and the
                    <paramref name="right"/> are not <strong>Null</strong>.
                </para>
            </remarks>
            <param name="left">An instance of <see cref="T:Teradata.Client.Provider.TdIntervalMinute"/>.</param>
            <param name="right">An instance of <strong>TdIntervalMinute</strong>.</param>
        </member>
        <member name="M:Teradata.Client.Provider.TdIntervalMinute.LessThanOrEqual(Teradata.Client.Provider.TdIntervalMinute,Teradata.Client.Provider.TdIntervalMinute)">
            <summary>
                This method determines whether the <paramref name="left"/> is less
                than or equal to the <paramref name="right"/>.
            </summary>
            <returns>
            	<para>
            		<c>true</c> indicates the <paramref name="left"/> is less than or
                    equal to the <paramref name="right"/>, <c>false</c> otherwise.
                </para>
            	<para>
            		<list type="table">
            			<listheader>
            				<term>Return Value</term>
            				<description>Description</description>
            			</listheader>
            			<item>
            				<term><c>true</c></term>
            				<description>
            					<para>
            						<paramref name="left"/> and
                                    <paramref name="right"/> are not
                                    <see cref="F:Teradata.Client.Provider.TdIntervalMinute.Null"/> and
                                    <paramref name="left"/> is less than or equal to
                                    <paramref name="right"/>
            					</para>
            					<para>-or-</para>
            					<para>
            						<paramref name="left"/> is <strong>Null</strong>
                                    and <paramref name="right"/> is
                                    <strong>Null</strong>.
            					</para>
            				</description>
            			</item>
            			<item>
            				<term><c>false</c></term>
            				<description>
            					<para>
                                    The <paramref name="left"/> is greater than
                                    <paramref name="right"/>
            					</para>
            					<para>-or-</para>
            					<para>
                                    Either <paramref name="left"/> or
                                    <paramref name="right"/> is <strong>Null</strong>.
            					</para>
            				</description>
            			</item>
            		</list>
            	</para>
            </returns>
            <remarks>
            	<para>
                    Comparison operators always return <c>false</c> if one of the operands is
                    <strong>Null</strong>. Therefore you should not assume that the reverse
                    condition is <c>true</c>. For example you cannot assume that the
                    <paramref name="left"/> is greater than the
                    <paramref name="right"/> if the <c>LessThanOrEqual</c> method returns
                    <c>false</c>.
                </para>
            	<para>
                    The reverse condition is <c>true</c> when the
                    <paramref name="left"/> and the
                    <paramref name="right"/> are not <strong>Null</strong>.
                </para>
            </remarks>
            <param name="left">An instance of <see cref="T:Teradata.Client.Provider.TdIntervalMinute"/>.</param>
            <param name="right">An instance of <strong>TdIntervalMinute</strong>.</param>
        </member>
        <member name="M:Teradata.Client.Provider.TdIntervalMinute.ToInt32(Teradata.Client.Provider.TdIntervalMinute)">
            <summary>
               Convert a <see cref="T:Teradata.Client.Provider.TdIntervalMinute"/> implictly to an Int32 representing a minute interval.
            </summary>
            <returns>
               <strong>TdIntervalMinute</strong> converted to an Int32 representing a minute interval.
            </returns>
            <exception cref="T:System.ArgumentNullException">The <strong>TdIntervalMinute</strong> value is <see cref="F:Teradata.Client.Provider.TdIntervalMinute.Null"/>.</exception>
            <param name="value">A <strong>TdIntervalMinute</strong> interval.</param>
        </member>
        <member name="M:Teradata.Client.Provider.TdIntervalMinute.Equals(System.Object)">
            <summary>
               Compares this instance and <paramref name="obj"/> to determine whether they
               are equal. 
            </summary>
            <returns>
               <c>true</c> if the two TdIntervalMinutes are equal, 
               <c>false</c> otherwise.
            </returns>
            <remarks>
            	<para>
                    The return value is <c>true</c> if the instance is equal to the
                    <paramref name="obj"/>, <c>false</c> otherwise.
                </para>
            	<para>
            		<list type="table">
            			<listheader>
            				<term>Return Value</term>
            				<description>Description</description>
            			</listheader>
            			<item>
            				<term>
            					<c>true</c>
            				</term>
            				<description>
            					<para>
                                    This instance and <paramref name="obj"/> are
                                    <see cref="F:Teradata.Client.Provider.TdIntervalMinute.Null"/>.
                                </para>
            					<para>-or-</para>
            					<para>
                                    This instance is equal to <paramref name="obj"/>.
                                </para>
            				</description>
            			</item>
            			<item>
            				<term>
            					<c>false</c>
            				</term>
            				<description>
            					<para>
                                    This instance is not equal to
                                    <paramref name="obj"/>.
                                </para>
            					<para>-or-</para>
            					<para>
                                    This instance is not <strong>Null</strong> and
                                    <paramref name="obj"/> is <strong>Null</strong>.
                                </para>
            					<para>-or-</para>
            					<para>
                                    This instance is <strong>Null</strong> and
                                    <paramref name="obj"/> is not <strong>Null</strong>
            					</para>
            					<para>-or-</para>
            					<para>
            						<paramref name="obj"/> is a <strong>null</strong>
                                    reference.
                                </para>
            				</description>
            			</item>
            		</list>
            	</para>
            </remarks>
            <example>
                The following code example uses various comparison methods and operators.
                <code lang="CS">
            // Create TdIntervalMinute with 5 days, 1 hour, 30 minutes
            TdIntervalMinute firstInterval = new TdIntervalMinute(7290);
            // Create TdIntervalMinute with 20 hours, 30 minutes
            Object intervalObj = new TdIntervalMinute(1230);
             
            // The following comparison methods and operators are equivalent
            if (false == TdIntervalMinute.Equals(firstInterval, (TdIntervalMinute)intervalObj) ||
                firstInterval != (TdIntervalMinute)intervalObj ||
                false == firstInterval.Equals(intervalObj) )
            {
               Console.WriteLine(“firstInterval does not equal intervalObj”);
            }
                </code>
            </example>
            <overloads>
               Returns a value indicating whether two instances of <strong>TdIntervalMinute</strong> 
               are equal.
            </overloads>
            <param name="obj">
               <strong>TdIntervalMinute</strong> that will be compared to this instance 
               of <strong>TdIntervalMinute</strong>.
            </param>
        </member>
        <member name="M:Teradata.Client.Provider.TdIntervalMinute.GetHashCode">
            <summary>
               Returns the hash code for this instance. 
            </summary>
            <returns>The hash code is returned.</returns>
        </member>
        <member name="M:Teradata.Client.Provider.TdIntervalMinute.ToString(System.String)">
            <summary>
               Converts this instance to its equivalent String representation using the specified format.
            </summary>
            <remarks>
            	<para>This method supports the following format specifiers:</para>
            	<para>
            		<list type="table">
            			<listheader>
            				<term>Format Specifier</term>
            				<description>Description</description>
            			</listheader>
            			<item>
            				<term>G</term>
            				<description>
            					<para>General interval format.</para>
            					<para>[sign][[minutes]</para>
            				</description>
            			</item>
            			<item>
            				<term>L</term>
            				<description>
            					<para>Teradata literal format. This string may be used in
                                generating SQL against the Teradata database.</para>
            					<para>INTERVAL [sign]'[minutes]' MINUTE</para>
            				</description>
            			</item>
            		</list>
            	</para>
            	<para>Below is the description of each format item.</para>
            	<para>
            		<list type="table">
            			<listheader>
            				<term>Format Item</term>
            				<description>Description</description>
            			</listheader>
            			<item>
            				<term>sign</term>
            				<description>If negative a minus sign will be displayed.</description>
            			</item>
            			<item>
            				<term>minutes</term>
            				<description>The number of minutes (one to four digits in
                            length).</description>
            			</item>
            		</list>
            	</para>
            	<para>
                    The <paramref name="format"/> is not used, as cultural settings are
                    not supported.
                </para>
            </remarks>
            <returns>
               A string representation of the <strong>TdIntervalMinute</strong> 
               will be returned.
            </returns>
            <exception cref="T:System.FormatException" caption="FormatException"><paramref name="format"/> contains an invalid format specifier.</exception>
            <param name="format">
               The format string that will be used to format the <strong>TdIntervalMinute</strong>. 
            </param>
        </member>
        <member name="M:Teradata.Client.Provider.TdIntervalMinute.ToString">
            <summary>
               Converts this instance to its equivalent String representation.
            </summary>
            <remarks>
               <para>The string returned will follow this format:</para>
            	<para>[sign][minutes]</para>
            	<para>Below is the description of each format item.</para>
            	<para>
            		<list type="table">
            			<listheader>
            				<term>Format Item</term>
            				<description>Description</description>
            			</listheader>
            			<item>
            				<term>sign</term>
            				<description>If negative a minus sign will be displayed.</description>
            			</item>
            			<item>
            				<term>minutes</term>
            				<description>The number of minutes (one to four digits in
                            length).</description>
            			</item>
            		</list>
            	</para>
            	<para>
                    Cultural settings are not supported.
                </para>
            </remarks>
            <returns>
               A string representation of the <strong>TdIntervalMinute</strong> 
               will be returned.
            </returns>
        </member>
        <member name="M:Teradata.Client.Provider.TdIntervalMinute.Parse(System.String)">
            <summary>
               The specified string is converted into an equivalent <see cref="T:Teradata.Client.Provider.TdIntervalMinute"/>.
            </summary>
            <returns>
               A <strong>TdIntervalMinute</strong> is returned that is equivalent to the <strong>TdIntervalMinute</strong> 
               contained in the input string.
            </returns>
            <exception cref="T:System.FormatException" caption="FormatException">
               <paramref name="value"/> cannot be converted into a 
               <strong>TdIntervalMinute</strong> interval.
            </exception>
            <exception cref="T:System.ArgumentNullException" caption="ArgumentNullException">
               <paramref name="value"/> is a <c>null</c> reference.
            </exception>
            <exception cref="T:System.OverflowException">
               The resultant operation returns a value greater than the <see cref="F:Teradata.Client.Provider.TdIntervalMinute.MaxValue"/> 
               or less than the <see cref="F:Teradata.Client.Provider.TdIntervalMinute.MinValue"/>.
            </exception>
            <remarks>
            	<para>This method supports the following string formats:</para>
            	<para>
            		<list type="table">
            			<listheader>
            				<term>String Format</term>
            				<description>Description</description>
            			</listheader>
            			<item>
            				<term>G</term>
            				<description>
            					<para>General interval format.</para>
            					<para>[sign][[minutes]</para>
            				</description>
            			</item>
            			<item>
            				<term>L</term>
            				<description>
            					<para>Teradata literal format. This string may be used in
                                generating SQL against the Teradata database.</para>
            					<para>INTERVAL [sign]'[minutes]' MINUTE</para>
            				</description>
            			</item>
            		</list>
            	</para>
            	<para>Below is the description of each format item.</para>
            	<para>
            		<list type="table">
            			<listheader>
            				<term>Format Item</term>
            				<description>Description</description>
            			</listheader>
            			<item>
            				<term>sign</term>
            				<description>Optional - . Defaults as space character (+).</description>
            			</item>
            			<item>
            				<term>minutes</term>
            				<description>Required number of minutes (one to four digits in
                            length).</description>
            			</item>
            		</list>
            	</para>
            	<para>
            		While parsing the <paramref name="value"/> the <see cref="P:Teradata.Client.Provider.TdIntervalMinute.Precision"/> will be
            		set to the number of digits contained within the minutes component. 
            	</para>
            	<para>
            		For example a <paramref name="value"/> of "100" will
            		contain a precision of 3.
            	</para>
            </remarks>
            <overloads>
            	The specified string is converted into an equivalent 
               <strong>TdIntervalMinute</strong> interval.
            </overloads>
            <param name="value">A string to be converted into a <strong>TdIntervalMinute</strong>.</param>
        </member>
        <member name="M:Teradata.Client.Provider.TdIntervalMinute.TryParse(System.String,Teradata.Client.Provider.TdIntervalMinute@)">
            <summary>
               The specified string is converted into an equivalent <see cref="T:Teradata.Client.Provider.TdIntervalMinute"/>. 
            </summary>
            <returns>
                <c>true</c> if the conversion of <paramref name="value"/> succeeded, 
                <c>false</c> otherwise.
            </returns>
            <remarks>
            	<para>This method supports the following string formats:</para>
            	<para>
            		<list type="table">
            			<listheader>
            				<term>String Format</term>
            				<description>Description</description>
            			</listheader>
            			<item>
            				<term>G</term>
            				<description>
            					<para>General interval format.</para>
            					<para>[sign][[minutes]</para>
            				</description>
            			</item>
            			<item>
            				<term>L</term>
            				<description>
            					<para>Teradata literal format. This string may be used in
                                generating SQL against the Teradata database.</para>
            					<para>INTERVAL [sign]'[minutes]' MINUTE</para>
            				</description>
            			</item>
            		</list>
            	</para>
            	<para>Below is the description of each format item.</para>
            	<para>
            		<list type="table">
            			<listheader>
            				<term>Format Item</term>
            				<description>Description</description>
            			</listheader>
            			<item>
            				<term>sign</term>
            				<description>Optional - . Defaults as space character (+).</description>
            			</item>
            			<item>
            				<term>minutes</term>
            				<description>Required number of minutes (one to four digits in
                            length).</description>
            			</item>
            		</list>
            	</para>
            	<para>
            		While parsing the <paramref name="value"/> the <see cref="P:Teradata.Client.Provider.TdIntervalMinute.Precision"/> will be
            		set to the number of digits contained within the minutes component.  
            	</para>
            	<para>
            		For example a <paramref name="value"/> of "20" will
            		contain a precision of 2.
            	</para>
            </remarks>
            <overloads>
               The specified string is converted into an equivalent 
               <see cref="T:Teradata.Client.Provider.TdIntervalMinute"/> interval.  A <c>true</c> is returned 
               if the conversion succeeded, <c>false</c> otherwise.
            </overloads>
            <param name="value">A string to be converted into a <strong>TdIntervalMinute</strong>.</param>
            <param name="result">The converted string into a <strong>TdIntervalMinute</strong>.</param>
        </member>
        <member name="M:Teradata.Client.Provider.TdIntervalMinute.GetXmlSchema(System.Xml.Schema.XmlSchemaSet)">
             <summary>
                Gets the XML Qualified name for <see cref="T:Teradata.Client.Provider.TdIntervalMinute"/> XML type mapping.
             </summary>
             <param name="xmlSchemaSet">
                Holds zero or more XML Schema definition language (XSD) schemas.
             </param>
             <returns>
                Returns <strong>xs:duration</strong>.
             </returns>
             <example>
                This example shows how to use the <strong>TdIntervalMinute</strong> with the 
                <see cref="T:System.Xml.Serialization.XmlSerializer"/> class. <see cref="T:System.Xml.Serialization.XmlElementAttribute"/> is used to 
                indicate that the Teradata Database column can be <strong>Null</strong>.
             <code>
              public class Order
              {
                  public TdTimestamp Date;
             
                  public TdIntervalMinute ExpirationPeriod;
             
                  public TdTimestamp ExpirationDate;
            
                  public Int32 ProductId;
            
                  public Int32 Quantity;
            
                  public Int32? BackOrderQuantity;
            
                  [XmlElementAttribute(IsNullable = true)]        
                  public TdDecimal BackOrderPrice;
              }
             
              internal class OrderWriter
              {
              
                  public static void Write()
                  {
                      // Setup the order
                      Order x = new Order();
              
                      x.Date = new TdTimestamp(DateTime.Today);
                      // 4 hours and 30 minutes
                      x.ExpirationPeriod = new TdIntervalMinute(270);
                      x.ExpirationDate = x.Date + x.ExpirationPeriod;
                      x.ProductId = 100;
                      x.Quantity = 2000;
                      x.BackOrderQuantity = null;
                      x.BackOrderPrice = TdDecimal.Null;
            
                      // Write out today's orders to the file.
                      //
                      // Open the file.
                      XmlWriterSettings settings = new XmlWriterSettings();
                      settings.Indent = true;
                      XmlWriter writer = XmlWriter.Create(@"C:\Temp\TodayOrders.XML", settings);
                      writer.WriteStartElement("TodayOrders");
                
                      // Write out the schema.
                      XmlSchemas schemas = new XmlSchemas();
                      XmlSchemaExporter schExporter = new XmlSchemaExporter(schemas);
                      schExporter.ExportTypeMapping(new XmlReflectionImporter().ImportTypeMapping(typeof(Order)));
                      schemas[0].Write(writer);
            
                      // Write out the orders.
                      XmlSerializer xml = new XmlSerializer(typeof(Order));
                      xml.Serialize(writer, x);
              
                      // Close the document.
                      writer.WriteEndDocument();
                      writer.Close();
                  }
              }
             
              /* Output is:
             
              &lt;TodayOrders&gt;
                &lt;xs:schema elementFormDefault="qualified" xmlns:xs="http://www.w3.org/2001/XMLSchema"&gt;
                  &lt;xs:element name="Order" nillable="true" type="Order" /&gt;
                  &lt;xs:complexType name="Order"&gt;
                    &lt;xs:sequence&gt;
                      &lt;xs:element minOccurs="1" maxOccurs="1" name="Date" type="xs:dateTime" /&gt;
                      &lt;xs:element minOccurs="1" maxOccurs="1" name="ExpirationPeriod" type="xs:duration" /&gt;
                      &lt;xs:element minOccurs="1" maxOccurs="1" name="ExpirationDate" type="xs:dateTime" /&gt;
                      &lt;xs:element minOccurs="1" maxOccurs="1" name="ProductId" type="xs:int" /&gt;
                      &lt;xs:element minOccurs="1" maxOccurs="1" name="Quantity" type="xs:int" /&gt;
                      &lt;xs:element minOccurs="1" maxOccurs="1" name="BackOrderQuantity" nillable="true" type="xs:int" /&gt;
                      &lt;xs:element minOccurs="1" maxOccurs="1" name="BackOrderPrice" nillable="true" type="xs:decimal" /&gt;
                    &lt;/xs:sequence&gt;
                  &lt;/xs:complexType&gt;
                &lt;/xs:schema&gt;
                &lt;Order xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xmlns:xsd="http://www.w3.org/2001/XMLSchema"&gt;
                  &lt;Date&gt;2008-02-01T00:00:00-08:00&lt;/Date&gt;
                  &lt;ExpirationPeriod&gt;PT270M&lt;/ExpirationPeriod&gt;
                  &lt;ExpirationDate&gt;2008-02-06T04:30:00-08:00&lt;/ExpirationDate&gt;
                  &lt;ProductId&gt;100&lt;/ProductId&gt;
                  &lt;Quantity&gt;2000&lt;/Quantity&gt;
                  &lt;BackOrderQuantity xsi:nil="true" /&gt;
                  &lt;BackOrderPrice xsi:nil="true" /&gt;
                &lt;/Order&gt;
              &lt;/TodayOrders&gt;
             
              */
             </code>
             </example>        
        </member>
        <member name="M:Teradata.Client.Provider.TdIntervalMinute.op_Addition(Teradata.Client.Provider.TdIntervalMinute,Teradata.Client.Provider.TdIntervalMinute)">
            <summary>
               A <see cref="T:Teradata.Client.Provider.TdIntervalMinute"/> is added to another <strong>TdIntervalMinute</strong>.
            </summary>
            <remarks>
            <para>
               If either parameter is <strong>Null</strong> a <see cref="F:Teradata.Client.Provider.TdIntervalMinute.Null"/> will be returned.
            </para>
            <para>
               The returned <strong>TdIntervalMinute</strong> will contain a precision 
               set to the <see cref="F:Teradata.Client.Provider.TdIntervalMinute.MaxPrecision"/>.
            </para>        
            </remarks>
            <returns>
               A new <strong>TdIntervalMinute</strong> as the result of adding a <strong>TdIntervalMinute</strong> to 
               another <strong>TdIntervalMinute</strong>.
            </returns>        
            <exception cref="T:System.OverflowException">
               The resultant operation returns a value greater than the <see cref="F:Teradata.Client.Provider.TdIntervalMinute.MaxValue"/> 
               or less than the <see cref="F:Teradata.Client.Provider.TdIntervalMinute.MinValue"/>.
            </exception>
            <overloads>
               Calculates the sum of two operands and returns a <strong>TdIntervalMinute</strong>.
            </overloads>
            <param name="left">A <strong>TdIntervalMinute</strong>.</param>
            <param name="right">A <strong>TdIntervalMinute</strong>.</param>
        </member>
        <member name="M:Teradata.Client.Provider.TdIntervalMinute.op_Subtraction(Teradata.Client.Provider.TdIntervalMinute,Teradata.Client.Provider.TdIntervalMinute)">
            <summary>
               A <see cref="T:Teradata.Client.Provider.TdIntervalMinute"/> is subtracted from another 
               <strong>TdIntervalMinute</strong>.
            </summary>
            <remarks>
            <para>
               If either parameter is <strong>Null</strong> a <see cref="F:Teradata.Client.Provider.TdIntervalMinute.Null"/> will be returned.
            </para>
            <para>
               The returned <strong>TdIntervalMinute</strong> will contain a precision  
               set to the <see cref="F:Teradata.Client.Provider.TdIntervalMinute.MaxPrecision"/>.
            </para>
            </remarks>
            <returns>
               A new <strong>TdIntervalMinute</strong> as the result of subtracting 
               <paramref name="right"/> from the <paramref name="left"/>.
            </returns>
            <overloads>
               The right operand is subtracted from the left operand returning a 
               <strong>TdIntervalMinute</strong>.
            </overloads>
            <exception cref="T:System.OverflowException">
               The resultant operation returns a value greater than the <see cref="F:Teradata.Client.Provider.TdIntervalMinute.MaxValue"/> 
               or less than the <see cref="F:Teradata.Client.Provider.TdIntervalMinute.MinValue"/>.
            </exception>
            <param name="left">A <strong>TdIntervalMinute</strong> to subtract from.</param>
            <param name="right">A <strong>TdIntervalMinute</strong> to subtract.</param>
        </member>
        <member name="M:Teradata.Client.Provider.TdIntervalMinute.op_Addition(Teradata.Client.Provider.TdIntervalMinute,System.Int32)">
            <summary>
               The specified number of minutes is added to the <see cref="T:Teradata.Client.Provider.TdIntervalMinute"/>.
            </summary>
            <remarks>
            <para>
               If <paramref name="interval"/> is <see cref="F:Teradata.Client.Provider.TdIntervalMinute.Null"/> a <strong>Null</strong> will be returned.
            </para>
            <para>
               The returned <strong>TdIntervalMinute</strong> will contain a precision 
               set to the <see cref="F:Teradata.Client.Provider.TdIntervalMinute.MaxPrecision"/>.
            </para>        
            </remarks>
            <exception cref="T:System.OverflowException">
               The resultant operation returns a value greater than the <see cref="F:Teradata.Client.Provider.TdIntervalMinute.MaxValue"/> 
               or less than the <see cref="F:Teradata.Client.Provider.TdIntervalMinute.MinValue"/>.
            </exception>
            <param name="interval">A <strong>TdIntervalMinute</strong>.</param>
            <param name="minutes">Number of minutes to add.</param>
            <returns>
               A new <strong>TdIntervalMinute</strong> as the result of adding an Int32 to 
               <strong>TdIntervalMinute</strong>.
            </returns>
        </member>
        <member name="M:Teradata.Client.Provider.TdIntervalMinute.op_Addition(System.Int32,Teradata.Client.Provider.TdIntervalMinute)">
            <summary>
               The specified number of minutes is added to the <see cref="T:Teradata.Client.Provider.TdIntervalMinute"/>.
            </summary>
            <remarks>
            <para>
               If <paramref name="interval"/> is <see cref="F:Teradata.Client.Provider.TdIntervalMinute.Null"/> a <strong>Null</strong> will be returned.
            </para>
            <para>
               The returned <strong>TdIntervalMinute</strong> will contain a precision 
               set to the <see cref="F:Teradata.Client.Provider.TdIntervalMinute.MaxPrecision"/>.
            </para>        
            </remarks>
            <exception cref="T:System.OverflowException">
               The resultant operation returns a value greater than the <see cref="F:Teradata.Client.Provider.TdIntervalMinute.MaxValue"/> 
               or less than the <see cref="F:Teradata.Client.Provider.TdIntervalMinute.MinValue"/>.
            </exception>
            <param name="minutes">Number of minutes to add.</param>
            <param name="interval">A <strong>TdIntervalMinute</strong>.</param>
            <returns>
               A new <strong>TdIntervalMinute</strong> as the result of adding an Int32 to 
               <strong>TdIntervalMinute</strong>.
            </returns>
        </member>
        <member name="M:Teradata.Client.Provider.TdIntervalMinute.op_Subtraction(Teradata.Client.Provider.TdIntervalMinute,System.Int32)">
            <summary>
               The specified number of minutes is subtracted from the <see cref="T:Teradata.Client.Provider.TdIntervalMinute"/>.
            </summary>
            <remarks>
            <para>
               If <paramref name="interval"/> is <see cref="F:Teradata.Client.Provider.TdIntervalMinute.Null"/> a <strong>Null</strong> will be returned.
            </para>
            <para>
               The returned <strong>TdIntervalMinute</strong> will contain a precision  
               set to the <see cref="F:Teradata.Client.Provider.TdIntervalMinute.MaxPrecision"/>.
            </para>        
            </remarks>
            <exception cref="T:System.OverflowException">
               The resultant operation returns a value greater than the <see cref="F:Teradata.Client.Provider.TdIntervalMinute.MaxValue"/> 
               or less than the <see cref="F:Teradata.Client.Provider.TdIntervalMinute.MinValue"/>.
            </exception>
            <param name="interval">A <strong>TdIntervalMinute</strong>.</param>
            <param name="minutes">Number of miinutes to subtract.</param>
            <returns>
               A new <strong>TdIntervalMinute</strong> as the result of substracting an Int32 from 
               <strong>TdIntervalMinute</strong>.
            </returns>
        </member>
        <member name="M:Teradata.Client.Provider.TdIntervalMinute.op_Multiply(Teradata.Client.Provider.TdIntervalMinute,System.Int32)">
            <summary>
               A <see cref="T:Teradata.Client.Provider.TdIntervalMinute"/> is multiplied by an integer value.
            </summary>
            <remarks>
            <para>
               If <paramref name="interval"/> is <see cref="F:Teradata.Client.Provider.TdIntervalMinute.Null"/> a <strong>Null</strong> will be returned.
            </para>
            <para>
               The returned <strong>TdIntervalMinute</strong> will contain a precision 
               set to the <see cref="F:Teradata.Client.Provider.TdIntervalMinute.MaxPrecision"/>.
            </para>
            </remarks>
            <returns>
               A new <strong>TdIntervalMinute</strong> as the result of multiplying a 
               <strong>TdIntervalMinute</strong> and an integer value.
            </returns>        
            <exception cref="T:System.OverflowException">
               The resultant operation returns a value greater than the <see cref="F:Teradata.Client.Provider.TdIntervalMinute.MaxValue"/> 
               or less than the <see cref="F:Teradata.Client.Provider.TdIntervalMinute.MinValue"/>.
            </exception>
            <param name="interval">A <strong>TdIntervalMinute</strong>.</param>
            <param name="value">A multiplier.</param>
        </member>
        <member name="M:Teradata.Client.Provider.TdIntervalMinute.op_Multiply(System.Int32,Teradata.Client.Provider.TdIntervalMinute)">
            <summary>
               A <see cref="T:Teradata.Client.Provider.TdIntervalMinute"/> is multiplied by an integer value.
            </summary>
            <remarks>
            <para>
               If <paramref name="interval"/> is <see cref="F:Teradata.Client.Provider.TdIntervalMinute.Null"/> a <strong>Null</strong> will be returned.
            </para>
            <para>
               The returned <strong>TdIntervalMinute</strong> will contain a precision 
               set to the <see cref="F:Teradata.Client.Provider.TdIntervalMinute.MaxPrecision"/>.
            </para>
            </remarks>
            <returns>
               A new <strong>TdIntervalMinute</strong> as the result of multiplying a 
               <strong>TdIntervalMinute</strong> and an integer value.
            </returns>        
            <exception cref="T:System.OverflowException">
               The resultant operation returns a value greater than the <see cref="F:Teradata.Client.Provider.TdIntervalMinute.MaxValue"/> 
               or less than the <see cref="F:Teradata.Client.Provider.TdIntervalMinute.MinValue"/>.
            </exception>
            <param name="value">A multiplier.</param>
            <param name="interval">A <strong>TdIntervalMinute</strong>.</param>
        </member>
        <member name="M:Teradata.Client.Provider.TdIntervalMinute.op_Division(Teradata.Client.Provider.TdIntervalMinute,System.Int32)">
            <summary>
               A <see cref="T:Teradata.Client.Provider.TdIntervalMinute"/> is divided by an integer value.
            </summary>
            <remarks>
            <para>
               If <paramref name="interval"/> is <see cref="F:Teradata.Client.Provider.TdIntervalMinute.Null"/> a <strong>Null</strong> will be returned.
            </para>
            <para>
               The returned <strong>TdIntervalMinute</strong> will contain a precision 
               which matches the precision of <strong>interval</strong> parameter.
            </para>
            </remarks>
            <returns>
               A new <strong>TdIntervalMinute</strong> as the result of dividing a 
               <strong>TdIntervalMinute</strong> and an integer value.
            </returns>        
            <exception cref="T:System.DivideByZeroException">The <paramref name="value"/> divisor cannot be 0.</exception>
            <param name="interval">A <strong>TdIntervalMinute</strong>.</param>
            <param name="value">A divisor.</param>
        </member>
        <member name="M:Teradata.Client.Provider.TdIntervalMinute.Add(Teradata.Client.Provider.TdIntervalMinute,Teradata.Client.Provider.TdIntervalMinute)">
            <summary>
               Calculates the sum of two <see cref="T:Teradata.Client.Provider.TdIntervalMinute"/> operands.
            </summary>
            <remarks>
            <para>
               If either parameter is <strong>Null</strong> a <see cref="F:Teradata.Client.Provider.TdIntervalMinute.Null"/> will be returned.
            </para>
            <para>
               The returned <strong>TdIntervalMinute</strong> will contain a precision 
               set to the <see cref="F:Teradata.Client.Provider.TdIntervalMinute.MaxPrecision"/>.
            </para>
            </remarks>
            <returns>A <strong>TdIntervalMinute</strong> containing the sum.</returns>
            <exception cref="T:System.OverflowException">
               The resultant operation returns a value greater than the <see cref="F:Teradata.Client.Provider.TdIntervalMinute.MaxValue"/> 
               or less than the <see cref="F:Teradata.Client.Provider.TdIntervalMinute.MinValue"/>.
            </exception>
            <overloads>
               Calculates the sum of two operands and returns a <strong>TdIntervalMinute</strong>.
            </overloads>
            <param name="left">A <strong>TdIntervalMinute</strong>.</param>
            <param name="right">A <strong>TdIntervalMinute</strong>.</param>
        </member>
        <member name="M:Teradata.Client.Provider.TdIntervalMinute.Add(Teradata.Client.Provider.TdIntervalMinute,System.Int32)">
            <summary>
               The specified number of minutes is added to the <see cref="T:Teradata.Client.Provider.TdIntervalMinute"/>.
            </summary>
            <remarks>
            <para>
               If <paramref name="interval"/> is <see cref="F:Teradata.Client.Provider.TdIntervalMinute.Null"/> a <strong>Null</strong> will be returned.
            </para>
            <para>
               The returned <strong>TdIntervalMinute</strong> will contain a precision 
               set to the <see cref="F:Teradata.Client.Provider.TdIntervalMinute.MaxPrecision"/>.
            </para>
            </remarks>
            <returns>
               A new <strong>TdIntervalMinute</strong> as the result of adding an Int32 to 
               <strong>TdIntervalMinute</strong>.
            </returns>        
            <exception cref="T:System.OverflowException">
               The resultant operation returns a value greater than the <see cref="F:Teradata.Client.Provider.TdIntervalMinute.MaxValue"/> 
               or less than the <see cref="F:Teradata.Client.Provider.TdIntervalMinute.MinValue"/>.
            </exception>
            <param name="interval">A <strong>TdIntervalMinute</strong>.</param>
            <param name="minutes">Number of minutes to add.</param>
        </member>
        <member name="M:Teradata.Client.Provider.TdIntervalMinute.Add(System.Int32,Teradata.Client.Provider.TdIntervalMinute)">
            <summary>
               The specified number of minutes is added to the <see cref="T:Teradata.Client.Provider.TdIntervalMinute"/>.
            </summary>
            <remarks>
            <para>
               If <paramref name="interval"/> is <see cref="F:Teradata.Client.Provider.TdIntervalMinute.Null"/> a <strong>Null</strong> will be returned.
            </para>
            <para>
               The returned <strong>TdIntervalMinute</strong> will contain a precision 
               set to the <see cref="F:Teradata.Client.Provider.TdIntervalMinute.MaxPrecision"/>.
            </para>
            </remarks>
            <returns>
               A new <strong>TdIntervalMinute</strong> as the result of adding an Int32 to 
               <strong>TdIntervalMinute</strong>.
            </returns>        
            <exception cref="T:System.OverflowException">
               The resultant operation returns a value greater than the <see cref="F:Teradata.Client.Provider.TdIntervalMinute.MaxValue"/> 
               or less than the <see cref="F:Teradata.Client.Provider.TdIntervalMinute.MinValue"/>.
            </exception>
            <param name="minutes">Number of minutes to add.</param>
            <param name="interval">A <strong>TdIntervalMinute</strong>.</param>
        </member>
        <member name="M:Teradata.Client.Provider.TdIntervalMinute.Subtract(Teradata.Client.Provider.TdIntervalMinute,Teradata.Client.Provider.TdIntervalMinute)">
            <summary>
               A <see cref="T:Teradata.Client.Provider.TdIntervalMinute"/> is subtracted from another 
               <strong>TdIntervalMinute</strong>.
            </summary>
            <remarks>
            <para>
               If either parameter is <strong>Null</strong> a <see cref="F:Teradata.Client.Provider.TdIntervalMinute.Null"/> will be returned.
            </para>
            <para>
               The returned <strong>TdIntervalMinute</strong> will contain a precision  
               set to the <see cref="F:Teradata.Client.Provider.TdIntervalMinute.MaxPrecision"/>.
            </para>
            </remarks>
            <returns>
               A new <strong>TdIntervalMinute</strong> as the result of subtracting 
               <paramref name="right"/> from the <paramref name="left"/>.
            </returns>
            <overloads>
               The right operand is subtracted from the left operand returning a 
               <strong>TdIntervalMinute</strong>.
            </overloads>
            <exception cref="T:System.OverflowException">
               The resultant operation returns a value greater than the <see cref="F:Teradata.Client.Provider.TdIntervalMinute.MaxValue"/> 
               or less than the <see cref="F:Teradata.Client.Provider.TdIntervalMinute.MinValue"/>.
            </exception>
            <param name="left">A <strong>TdIntervalMinute</strong> to subtract from.</param>
            <param name="right">A <strong>TdIntervalMinute</strong> to subtract.</param>
        </member>
        <member name="M:Teradata.Client.Provider.TdIntervalMinute.Subtract(Teradata.Client.Provider.TdIntervalMinute,System.Int32)">
            <summary>
               The specified number of minutes is subtracted from the <see cref="T:Teradata.Client.Provider.TdIntervalMinute"/>.
            </summary>
            <remarks>
            <para>
               If <paramref name="interval"/> is <see cref="F:Teradata.Client.Provider.TdIntervalMinute.Null"/> a <strong>Null</strong> will be returned.
            </para>
            <para>
               The returned <strong>TdIntervalMinute</strong> will contain a precision
               set to the <see cref="F:Teradata.Client.Provider.TdIntervalMinute.MaxPrecision"/>.
            </para>
            </remarks>
            <exception cref="T:System.OverflowException">
               The resultant operation returns a value greater than the <see cref="F:Teradata.Client.Provider.TdIntervalMinute.MaxValue"/> 
               or less than the <see cref="F:Teradata.Client.Provider.TdIntervalMinute.MinValue"/>.
            </exception>
            <param name="interval">A <strong>TdIntervalMinute</strong>.</param>
            <param name="minutes">Number of miinutes to subtract.</param>
            <returns>
               A new <strong>TdIntervalMinute</strong> as the result of substracting an Int32 from 
               <strong>TdIntervalMinute</strong>.
            </returns>
        </member>
        <member name="M:Teradata.Client.Provider.TdIntervalMinute.Multiply(Teradata.Client.Provider.TdIntervalMinute,System.Int32)">
            <summary>
               A <see cref="T:Teradata.Client.Provider.TdIntervalMinute"/> is multiplied by an integer value.
            </summary>
            <remarks>
            <para>
               If <paramref name="interval"/> is <see cref="F:Teradata.Client.Provider.TdIntervalMinute.Null"/> a <strong>Null</strong> will be returned.
            </para>
            <para>
               The returned <strong>TdIntervalMinute</strong> will contain a precision 
               set to the <see cref="F:Teradata.Client.Provider.TdIntervalMinute.MaxPrecision"/>.
            </para>
            </remarks>
            <returns>
               A new <strong>TdIntervalMinute</strong> as the result of multiplying a 
               <strong>TdIntervalMinute</strong> and an integer value.
            </returns>        
            <exception cref="T:System.OverflowException">
               The resultant operation returns a value greater than the <see cref="F:Teradata.Client.Provider.TdIntervalMinute.MaxValue"/> 
               or less than the <see cref="F:Teradata.Client.Provider.TdIntervalMinute.MinValue"/>.
            </exception>
            <param name="interval">A <strong>TdIntervalMinute</strong>.</param>
            <param name="value">A multiplier.</param>
        </member>
        <member name="M:Teradata.Client.Provider.TdIntervalMinute.Multiply(System.Int32,Teradata.Client.Provider.TdIntervalMinute)">
            <summary>
               A <see cref="T:Teradata.Client.Provider.TdIntervalMinute"/> is multiplied by an integer value.
            </summary>
            <remarks>
            <para>
               If <paramref name="interval"/> is <see cref="F:Teradata.Client.Provider.TdIntervalMinute.Null"/> a <strong>Null</strong> will be returned.
            </para>
            <para>
               The returned <strong>TdIntervalMinute</strong> will contain a precision 
               set to the <see cref="F:Teradata.Client.Provider.TdIntervalMinute.MaxPrecision"/>.
            </para>
            </remarks>
            <returns>
               A new <strong>TdIntervalMinute</strong> as the result of multiplying a 
               <strong>TdIntervalMinute</strong> and an integer value.
            </returns>        
            <exception cref="T:System.OverflowException">
               The resultant operation returns a value greater than the <see cref="F:Teradata.Client.Provider.TdIntervalMinute.MaxValue"/> 
               or less than the <see cref="F:Teradata.Client.Provider.TdIntervalMinute.MinValue"/>.
            </exception>
            <param name="value">A multiplier.</param>
            <param name="interval">A <strong>TdIntervalMinute</strong>.</param>
        </member>
        <member name="M:Teradata.Client.Provider.TdIntervalMinute.Divide(Teradata.Client.Provider.TdIntervalMinute,System.Int32)">
            <summary>
               A <see cref="T:Teradata.Client.Provider.TdIntervalMinute"/> is divided by an integer value.
            </summary>
            <remarks>
            <para>
               If <paramref name="interval"/> is <see cref="F:Teradata.Client.Provider.TdIntervalMinute.Null"/> a <strong>Null</strong> will be returned.
            </para>
            <para>
               The returned <strong>TdIntervalMinute</strong> will contain a precision 
               which matches the precision of the <strong>interval</strong> parameter.
            </para>
            </remarks>
            <returns>
               A new <strong>TdIntervalMinute</strong> as the result of dividing a 
               <strong>TdIntervalMinute</strong> and an integer value.
            </returns>        
            <exception cref="T:System.DivideByZeroException">The <paramref name="value"/> divisor cannot be 0.</exception>
            <param name="interval">A <strong>TdIntervalMinute</strong>.</param>
            <param name="value">A divisor.</param>
        </member>
        <member name="M:Teradata.Client.Provider.TdIntervalMinute.op_GreaterThan(Teradata.Client.Provider.TdIntervalMinute,Teradata.Client.Provider.TdIntervalMinute)">
            <summary>
               This operator determines whether the <paramref name="left"/> is greater 
               than the <paramref name="right"/>.
            </summary>
            <returns>
            	<para>
            		<c>true</c> indicates the <paramref name="left"/> is greater than
                    the <paramref name="right"/>, <c>false</c> otherwise.
                </para>
            	<para>
            		<list type="table">
            			<listheader>
            				<term>Return Value</term>
            				<description>Description</description>
            			</listheader>
            			<item>
            				<term><c>true</c></term>
            				<description>
            					<paramref name="left"/> and
                                <paramref name="right"/> are not
                                <see cref="F:Teradata.Client.Provider.TdIntervalMinute.Null"/> and
                                <paramref name="left"/> is greater than
                                <paramref name="right"/>.
            				</description>
            			</item>
            			<item>
            				<term><c>false</c></term>
            				<description>
            					<para>
                                    The <paramref name="left"/> is less than or equal
                                    to <paramref name="right"/>
                                </para>
            					<para>-or-</para>
            					<para>
                                    Either <paramref name="left"/> and / or
                                    <paramref name="right"/> is <strong>Null</strong>.
                                </para>
            				</description>
            			</item>
            		</list>
            	</para>
            </returns>
            <remarks>
            	<para>
                   Comparison operators always return <c>false</c> if one of the operands is
                   <strong>Null</strong>. Therefore you should not assume that the reverse condition
                   is <c>true</c>. For example you cannot assume that the <paramref name="left"/> 
                   is less than or equal to the <paramref name="right"/> if the "&gt;" operator returns 
                   <c>false</c>.
               </para>
            	<para>
                   The reverse condition is <c>true</c> when the <paramref name="left"/> and the 
                   <paramref name="right"/> are not <strong>Null</strong>.
               </para>
            </remarks>
            <param name="left">An instance of <see cref="T:Teradata.Client.Provider.TdIntervalMinute"/>.</param>
            <param name="right">An instance of <strong>TdIntervalMinute</strong>.</param>
        </member>
        <member name="M:Teradata.Client.Provider.TdIntervalMinute.op_GreaterThanOrEqual(Teradata.Client.Provider.TdIntervalMinute,Teradata.Client.Provider.TdIntervalMinute)">
            <summary>
               This operator determines whether the <paramref name="left"/> is greater than or 
               equal to the <paramref name="right"/>.
            </summary>
            <returns>
            	<para>
            		<c>true</c> indicates the <paramref name="left"/> is greater than
                    or equal to the <paramref name="right"/>, <c>false</c> otherwise.
                </para>
            	<para>
            		<list type="table">
            			<listheader>
            				<term>Return Value</term>
            				<description>Description</description>
            			</listheader>
            			<item>
            				<term><c>true</c></term>
            				<description>
            					<para>
            						<paramref name="left"/> and
                                    <paramref name="right"/> are not
                                    <see cref="F:Teradata.Client.Provider.TdIntervalMinute.Null"/> and
                                    <paramref name="left"/> is greater than or equal
                                    to <paramref name="right"/>
            					</para>
            					<para>-or-</para>
            					<para>
            						<paramref name="left"/> is <strong>Null</strong>
                                    and <paramref name="right"/> is
                                    <strong>Null</strong>.
            					</para>
            				</description>
            			</item>
            			<item>
            				<term><c>false</c></term>
            				<description>
            					<para>
                                    The <paramref name="left"/> is less than
                                    <paramref name="right"/>
            					</para>
            					<para>-or-</para>
            					<para>
                                    Either <paramref name="left"/> or
                                    <paramref name="right"/> is <strong>Null</strong>.
            					</para>
            				</description>
            			</item>
            		</list>
            	</para>
            </returns>
            <remarks>
            	<para>
                    Comparison operators always return <c>false</c> if one of the operands is
                    <strong>Null</strong>. Therefore you should not assume that the reverse
                    condition is <c>true</c>. For example you cannot assume that the
                    <paramref name="left"/> is less than the <paramref name="right"/>
                    if the "&gt;=" operator returns <c>false</c>.
                </para>
            	<para>
                    The reverse condition is <c>true</c> when the
                    <paramref name="left"/> and the
                    <paramref name="right"/> are not <strong>Null</strong>.
                </para>
            </remarks>
            <param name="left">An instance of <see cref="T:Teradata.Client.Provider.TdIntervalMinute"/>.</param>
            <param name="right">An instance of <strong>TdIntervalMinute</strong>.</param>
        </member>
        <member name="M:Teradata.Client.Provider.TdIntervalMinute.op_Inequality(Teradata.Client.Provider.TdIntervalMinute,Teradata.Client.Provider.TdIntervalMinute)">
            <summary>
               This operator determines whether the <paramref name="left"/> and the  
               <paramref name="right"/> are not equal.
            </summary>
            <returns>
            	<para>
                   A Boolean is returned that indicates whether the two operands are not equal.
                   <c>true</c> indicates the two operands are not equal, <c>false</c> otherwise.
               </para>
            	<para>
            		<list type="table">
            			<listheader>
            				<term>Return Value</term>
            				<description>Description</description>
            			</listheader>
            			<item>
            				<term><c>true</c></term>
            				<description>
                                <para>
            					   <paramref name="left"/> is less than or greater than
                                   <paramref name="right"/>.
                                </para>
            					<para>-or-</para>
                               <para>
            					    <paramref name="left"/> is
                                   <see cref="F:Teradata.Client.Provider.TdIntervalMinute.Null"/> and
                                   <paramref name="right"/> is not <strong>Null.</strong> 
                               </para>
            					<para>-or-</para>
            					<para>
                                   <paramref name="left"/> is not <strong>Null</strong>
                                   and <paramref name="right"/> is <strong>Null.</strong>
                                </para>
                            </description>
            			</item>
            			<item>
            				<term><c>false</c></term>
            				<description>
            					<para>
                                  <paramref name="left"/> is equal to
                                  <paramref name="right"/>.
                               </para>
            					<para>-or-</para>
            					<para>
                                   <paramref name="left"/> and
                                   <paramref name="right"/> are <strong>Null</strong>.
                                </para>
                            </description>
            			</item>
            		</list>
            	</para>
            </returns>
            <param name="left">An instance of <see cref="T:Teradata.Client.Provider.TdIntervalMinute"/>.</param>
            <param name="right">An instance of <strong>TdIntervalMinute</strong>.</param>
        </member>
        <member name="M:Teradata.Client.Provider.TdIntervalMinute.op_Equality(Teradata.Client.Provider.TdIntervalMinute,Teradata.Client.Provider.TdIntervalMinute)">
            <summary>
               This operator determines whether the <paramref name="left"/> and the  
               <paramref name="right"/> are equal.
            </summary>
            <returns>
            	<para>
                   A Boolean is returned that indicates whether the two operands are equal.
                   <c>True</c> indicates the two operands are equal, <c>false</c> otherwise.
               </para>
            	<para>
            		<list type="table">
            			<listheader>
            				<term>Return Value</term>
            				<description>Description</description>
            			</listheader>
            			<item>
            				<term><c>true</c></term>
            				<description>
            					<para>
            					   <paramref name="left"/> is equal to
                                   <paramref name="right"/>
            					</para>
            					<para>-or-</para>
            					<para>
            					   <paramref name="left"/> is
                                   <see cref="F:Teradata.Client.Provider.TdIntervalMinute.Null"/> and
                                   <paramref name="right"/> is <strong>Null</strong>.
            					</para>
            				</description>
            			</item>
            			<item>
            				<term><c>false</c></term>
            				<description>
            					<para>
            					   <paramref name="left"/> is not <strong>Null</strong>
                                   and <paramref name="right"/> is <strong>Null</strong>
            					</para>
            					<para>-or-</para>
            					<para>
            					   <paramref name="left"/> is <strong>Null</strong> and
                                   <paramref name="right"/> is not <strong>Null</strong>
            					</para>
            					<para>-or-</para>
            					<para>
                                   The <paramref name="left"/> is not equal to
                                   <paramref name="right"/>.
            					</para>
            				</description>
            			</item>
            		</list>
            	</para>
            </returns>
            <param name="left">An instance of <see cref="T:Teradata.Client.Provider.TdIntervalMinute"/>.</param>
            <param name="right">An instance of <strong>TdIntervalMinute</strong>.</param>
        </member>
        <member name="M:Teradata.Client.Provider.TdIntervalMinute.op_LessThan(Teradata.Client.Provider.TdIntervalMinute,Teradata.Client.Provider.TdIntervalMinute)">
            <summary>
               This operator determines whether the <paramref name="left"/> is less 
               than the <paramref name="right"/>.
            </summary>
            <returns>
            	<para>
            		<c>True</c> indicates the <paramref name="left"/> is less than
                    the <paramref name="right"/>, <c>false</c> otherwise.
                </para>
            	<para>
            		<list type="table">
            			<listheader>
            				<term>Return Value</term>
            				<description>Description</description>
            			</listheader>
            			<item>
            				<term><c>true</c></term>
            				<description>
            					<para>
            					    <paramref name="left"/> and
                                   <paramref name="right"/> are not
                                   <see cref="F:Teradata.Client.Provider.TdIntervalMinute.Null"/> and
                                   <paramref name="left"/> is less than
                                   <paramref name="right"/>.
            					</para>
            				</description>
            			</item>
            			<item>
            				<term><c>false</c></term>
            				<description>
            					<para>
                                    The <paramref name="left"/> is greater than or
                                    equal to <paramref name="right"/>
            					</para>
            					<para>-or-</para>
            					<para>
                                    Either <paramref name="left"/> and / or
                                    <paramref name="right"/> is <strong>Null</strong>.
            					</para>
            				</description>
            			</item>
            		</list>
            	</para>
            </returns>
            <remarks>
            	<para>
                    Comparison operators always return <c>false</c> if one of the operands is
                    <strong>Null</strong>. Therefore you should not assume that the reverse
                    condition is <c>true</c>. For example you cannot assume that the
                    <paramref name="left"/> is greater than or equal to the
                    <paramref name="right"/> if the "&lt;" operator returns <c>false</c>.
                </para>
            	<para>
                    The reverse condition is <c>true</c> when the
                    <paramref name="left"/> and the
                    <paramref name="right"/> are not <strong>Null</strong>.
                </para>
            </remarks>
            <param name="left">An instance of <see cref="T:Teradata.Client.Provider.TdIntervalMinute"/>.</param>
            <param name="right">An instance of <strong>TdIntervalMinute</strong>.</param>
        </member>
        <member name="M:Teradata.Client.Provider.TdIntervalMinute.op_LessThanOrEqual(Teradata.Client.Provider.TdIntervalMinute,Teradata.Client.Provider.TdIntervalMinute)">
            <summary>
               This operator determines whether the <paramref name="left"/> is less 
               than or equal the <paramref name="right"/>.
            </summary>
            <returns>
            	<para>
            		<c>true</c> indicates the <paramref name="left"/> is less than or
                    equal to the <paramref name="right"/>, <c>false</c> otherwise.
                </para>
            	<para>
            		<list type="table">
            			<listheader>
            				<term>Return Value</term>
            				<description>Description</description>
            			</listheader>
            			<item>
            				<term><c>true</c></term>
            				<description>
            					<para>
            						<paramref name="left"/> and
                                    <paramref name="right"/> are not
                                    <see cref="F:Teradata.Client.Provider.TdIntervalMinute.Null"/> and
                                    <paramref name="left"/> is less than or equal to
                                    <paramref name="right"/>
            					</para>
            					<para>-or-</para>
            					<para>
            						<paramref name="left"/> is <strong>Null</strong>
                                    and <paramref name="right"/> is
                                    <strong>Null</strong>.
            					</para>
            				</description>
            			</item>
            			<item>
            				<term><c>false</c></term>
            				<description>
            					<para>
                                    The <paramref name="left"/> is greater than
                                    <paramref name="right"/>
            					</para>
            					<para>-or-</para>
            					<para>
                                    Either <paramref name="left"/> or
                                    <paramref name="right"/> is <strong>Null</strong>.
            					</para>
            				</description>
            			</item>
            		</list>
            	</para>
            </returns>
            <remarks>
            	<para>
                    Comparison operators always return <c>false</c> if one of the operands is
                    <strong>Null</strong>. Therefore you should not assume that the reverse
                    condition is <c>true</c>. For example you cannot assume that the
                    <paramref name="left"/> is greater than the <paramref name="right"/>
                     if the "&lt;=" operator returns <c>false</c>.
                </para>
            	<para>
                    The reverse condition is <c>true</c> when the
                    <paramref name="left"/> and the
                    <paramref name="right"/> are not <strong>Null</strong>.
                </para>
            </remarks>
            <param name="left">An instance of <see cref="T:Teradata.Client.Provider.TdIntervalMinute"/>.</param>
            <param name="right">An instance of <strong>TdIntervalMinute</strong>.</param>
        </member>
        <member name="M:Teradata.Client.Provider.TdIntervalMinute.op_Explicit(System.TimeSpan)~Teradata.Client.Provider.TdIntervalMinute">
            <summary>
               Converts a <see cref="T:System.TimeSpan"/> to a <see cref="T:Teradata.Client.Provider.TdIntervalMinute"/>.
            </summary>
            <remarks>
               <strong>TimeSpan</strong> fractional seconds and seconds will be truncated during  
               conversion into a <strong>TdIntervalMinute</strong> interval.
            </remarks>
            <exception cref="T:System.OverflowException">
               The resultant operation returns a value greater than the <see cref="F:Teradata.Client.Provider.TdIntervalMinute.MaxValue"/> 
               or less than the <see cref="F:Teradata.Client.Provider.TdIntervalMinute.MinValue"/>.
            </exception>
            <param name="value">A <strong>TimeSpan</strong>.</param>
            <returns>A <strong>TdIntervalMinute</strong> interval.</returns>
        </member>
        <member name="M:Teradata.Client.Provider.TdIntervalMinute.op_Explicit(Teradata.Client.Provider.TdIntervalMinute)~System.TimeSpan">
            <summary>
               Converts a <see cref="T:Teradata.Client.Provider.TdIntervalMinute"/> to a <see cref="T:System.TimeSpan"/>.
            </summary>
            <remarks>
               The <strong>TimeSpan</strong> time components are represented in 24 hour format.
            </remarks>
            <exception cref="T:System.ArgumentNullException">The <strong>TdIntervalMinute</strong> value is <see cref="F:Teradata.Client.Provider.TdIntervalMinute.Null"/>.</exception>
            <param name="value">A <strong>TdIntervalMinute</strong> interval.</param>
            <returns>A <strong>TimeSpan</strong>.</returns>
        </member>
        <member name="M:Teradata.Client.Provider.TdIntervalMinute.op_Explicit(System.Int32)~Teradata.Client.Provider.TdIntervalMinute">
            <summary>
            Converts an <c>Int32</c> to <see cref="T:Teradata.Client.Provider.TdIntervalMinute"/>.
            </summary>
            <returns>A <strong>TdIntervalMinute</strong>.</returns>
            <remarks>
               The conversion may produce exceptions due to exceeding <see cref="F:Teradata.Client.Provider.TdIntervalMinute.MinValue"/>
               or <see cref="F:Teradata.Client.Provider.TdIntervalMinute.MaxValue"/>.
            </remarks>
            <exception cref="T:System.OverflowException">
               The resultant conversion returns a value greater than the <see cref="F:Teradata.Client.Provider.TdIntervalMinute.MaxValue"/> 
               or less than the <see cref="F:Teradata.Client.Provider.TdIntervalMinute.MinValue"/>.
            </exception>
            <param name="value">An Int32 representing a <strong>TdIntervalMinute</strong> interval.</param>
        </member>
        <member name="M:Teradata.Client.Provider.TdIntervalMinute.op_Explicit(Teradata.Client.Provider.TdIntervalMinute)~System.Int32">
            <summary>
            Convert a <see cref="T:Teradata.Client.Provider.TdIntervalMinute"/> implictly to an Int32 representing a minute interval.
            </summary>
            <returns>
               <strong>TdIntervalMinute</strong> converted to an Int32 representing a minute interval.
            </returns>
            <param name="value">A <strong>TdIntervalMinute</strong> interval.</param>
        </member>
        <member name="M:Teradata.Client.Provider.TdIntervalMinute.op_Implicit(Teradata.Client.Provider.TdIntervalMinute)~Teradata.Client.Provider.TdIntervalHourToSecond">
            <summary>
               Converts a <see cref="T:Teradata.Client.Provider.TdIntervalMinute"/> to <see cref="T:Teradata.Client.Provider.TdIntervalHourToSecond"/>.
            </summary>
            <remarks>
            <para>
               The <see cref="P:Teradata.Client.Provider.TdIntervalHourToSecond.Precision"/> is set to 1 (value of 0) and the 
               <see cref="P:Teradata.Client.Provider.TdIntervalHourToSecond.Scale"/> is set to zero. 
            </para>
            </remarks>
            <param name="value">A <strong>TdIntervalMinute</strong> interval.</param>
            <returns>A <strong>TdIntervalHourToSecond</strong>.</returns>
        </member>
        <member name="M:Teradata.Client.Provider.TdIntervalMinute.op_Implicit(Teradata.Client.Provider.TdIntervalMinute)~Teradata.Client.Provider.TdIntervalMinuteToSecond">
            <summary>
               Converts a <see cref="T:Teradata.Client.Provider.TdIntervalMinute"/> to <see cref="T:Teradata.Client.Provider.TdIntervalMinuteToSecond"/>.
            </summary>
            <param name="value">A <strong>TdIntervalMinute</strong> interval.</param>
            <returns>A <strong>TdIntervalMinuteToSecond</strong>.</returns>
        </member>
        <member name="M:Teradata.Client.Provider.TdIntervalMinute.op_Implicit(Teradata.Client.Provider.TdIntervalMinute)~Teradata.Client.Provider.TdIntervalHourToMinute">
            <summary>
               Converts a <see cref="T:Teradata.Client.Provider.TdIntervalMinute"/> to <see cref="T:Teradata.Client.Provider.TdIntervalHourToMinute"/>.
            </summary>
            <param name="value">A <strong>TdIntervalMinute</strong> interval.</param>
            <returns>A <strong>TdIntervalHourToMinute</strong>.</returns>
        </member>
        <member name="M:Teradata.Client.Provider.TdIntervalMinute.op_Implicit(Teradata.Client.Provider.TdIntervalMinute)~Teradata.Client.Provider.TdIntervalDayToSecond">
            <summary>
               Converts a <see cref="T:Teradata.Client.Provider.TdIntervalMinute"/> to <see cref="T:Teradata.Client.Provider.TdIntervalDayToSecond"/>.
            </summary>
            <returns>
               A <strong>TdIntervalDayToSecond</strong>.
            </returns>
            <remarks>
            <para>
               The <see cref="P:Teradata.Client.Provider.TdIntervalDayToSecond.Precision"/> is set 1 (value = 0) since 
               <paramref name="value"/> does not contain the days interval component and 
               the <see cref="P:Teradata.Client.Provider.TdIntervalDayToSecond.Scale"/> is set to zero, since the 
               <strong>value</strong> does not contain the seconds interval component.
            </para>
            </remarks>
            <param name="value">A <strong>TdIntervalMinute</strong> interval.</param>
        </member>
        <member name="M:Teradata.Client.Provider.TdIntervalMinute.op_Implicit(Teradata.Client.Provider.TdIntervalMinute)~Teradata.Client.Provider.TdIntervalDayToMinute">
            <summary>
               Converts a <see cref="T:Teradata.Client.Provider.TdIntervalMinute"/> to <see cref="T:Teradata.Client.Provider.TdIntervalDayToMinute"/>.
            </summary>
            <param name="value">A <strong>TdIntervalMinute</strong> interval.</param>
            <returns>A <strong>TdIntervalDayToMinute</strong>.</returns>
        </member>
        <member name="P:Teradata.Client.Provider.TdIntervalMinute.IsNull">
            <summary>
               Indicates whether this <see cref="T:Teradata.Client.Provider.TdIntervalMinute"/> instance is <see cref="F:Teradata.Client.Provider.TdIntervalMinute.Null"/>. 
            </summary>
            <value>
               <c>true</c> if this <strong>TdIntervalMinute</strong> is <strong>Null</strong>; 
               <c>false</c> otherwise.
            </value>
        </member>
        <member name="P:Teradata.Client.Provider.TdIntervalMinute.Minutes">
            <summary>
               The number of interval minutes is returned.  The return value ranges from -9999 to 9999.
            </summary>
            <remarks>
            <para>
               A <see cref="T:Teradata.Client.Provider.TdIntervalMinute"/> is represented as [-][minutes].  The 
               minus sign is optional and represents a negative interval of time.  The value 
               of the Minutes property is the minutes component.
            </para>
            </remarks>
            <exception cref="T:Teradata.Client.Provider.TdException">
               This property is not available when this instance is <see cref="F:Teradata.Client.Provider.TdIntervalMinute.Null"/>.
            </exception>
        </member>
        <member name="P:Teradata.Client.Provider.TdIntervalMinute.Precision">
            <summary>
               The number of significant digits in the minute is returned. The return value ranges
               from 1 to 4.
            </summary>
            <exception cref="T:Teradata.Client.Provider.TdException">
               This property is not available when this instance is <see cref="F:Teradata.Client.Provider.TdIntervalMinute.Null"/>.
            </exception>
        </member>
        <member name="P:Teradata.Client.Provider.TdIntervalMinute.Value">
            <summary>
               Gets the .NET data type representation of <see cref="T:Teradata.Client.Provider.TdIntervalMinute"/> 
               as a <see cref="T:System.TimeSpan"/>.
            </summary>
            <remarks>
               This property in concept parallels <see cref="M:Teradata.Client.Provider.TdDataReader.GetValue(System.Int32)"/> and
               <see cref="P:Teradata.Client.Provider.TdParameter.Value"/>. That is they all represent the .NET Framework 
               Class Library(FCL) primitive data type that correspond to the Teradata 
               Interval Minute data type.
            </remarks>
            <value>The interval represented as a <strong>TimeSpan</strong> is returned.</value>
            <exception cref="T:Teradata.Client.Provider.TdException">
               This property is not available when this instance is <see cref="F:Teradata.Client.Provider.TdIntervalMinute.Null"/>.
            </exception>
        </member>
        <member name="P:Teradata.Client.Provider.TdIntervalMinute.InternalTimespan">
            <summary>
               Return the internal TimeSpan representing the interval.
            </summary>
            <remarks>
               The internal timespan is used in calculating arithmetic operations and in storing
               day-time intervals.
            </remarks>
        </member>
        <member name="P:Teradata.Client.Provider.TdIntervalMinute.ObjectId">
            <summary>
               Gets the instance object identifier.
            </summary>
        </member>
        <member name="P:Teradata.Client.Provider.TdIntervalMinute.IsNegative">
            <summary>
               Indicate if the interval is negative.
            </summary>
            <remarks>
               Timespan.ticks will indicate a negative interval.  Other values (days, hours, minutes, 
                milliseconds) may be 0 and the interval may still be negative.
            </remarks>
        </member>
        <member name="P:Teradata.Client.Provider.TdIntervalMinute.InternalAccessor">
            <summary>
               Accessor to the internal storage for this interval.
            </summary>
        </member>
        <member name="T:Teradata.Client.Provider.TdIntervalMinuteToSecond">
            <summary>
            	<see cref="T:Teradata.Client.Provider.TdIntervalMinuteToSecond"/> represents an interval of time defining a duration in
                minutes, seconds and fractional seconds. The minute precision and second scale
                are configurable.
            </summary>
            <remarks>
            	<para>
                   <strong>TdIntervalMinuteToSecond</strong> is a .NET Data Provider for
                   Teradata specific type, designed to support a Teradata Database Interval 
                   Minute To Second data type.
               </para>
            	<para>
                    The <strong>TdIntervalMinuteToSecond</strong> supports the Teradata Interval 
                    Minute (precision) To Second (scale) data type where precision indicates the
                    number of digits in the minutes (from 1 - 4) and scale indicates the 
                    fractional precision for the values of seconds. The scale may range from 0 to 6.
                </para>
                <para>
                    The interval value must be specified in the following format :
                </para>
            	<para>[sign][minutes]:[ss].[ffffff]</para>
            	<para>Below is the description of each format item.</para>
            	<para>
            		<list type="table">
            			<listheader>
            				<term>Format Item</term>
            				<description>Description</description>
            			</listheader>
            			<item>
            				<term>sign</term>
            				<description>Optional - . Defaults as space character (+).</description>
            			</item>
            			<item>
            				<term>minutes</term>
            				<description>Required number of minutes (one to four digits in length).</description>
            			</item>
            			<item>
            				<term>ss</term>
            				<description>Required number of seconds from 00 - 59.</description>
            			</item>
            			<item>
            				<term>ffffff</term>
            				<description>Optionally the number of fractional seconds (0 to 6
                            digits in length).</description>
            			</item>
            		</list>
            	</para>
            	<para>
                   The .Net Framework does not have a system type that directly corresponds to
                   the Teradata Database Interval Minute To Second data type. The .NET Data Provider for 
                   Teradata Version 13.0 version and prior versions map Interval Minute To Second to 
                   System.String. With version 13.1 of the provider, <strong>TdIntervalMinuteToSecond</strong> 
                   is available to retrieve and manipulate data of type Interval Minute To Second.
               </para>
            	<para>
                   The range of values for the <strong>TdIntervalMinuteToSecond</strong>
                   containing a minute precision of 1 is as follows:
               </para>
            	<para>
            		<table class="xmldoctable" cellspacing="0">
            			<tbody>
            				<tr>
            					<th width="181">Minute Precision</th>
            					<th width="127">Second Scale</th>
            					<th>
            						<para>Minimum</para>
            					</th>
            					<th>
                                   <para>Maximum</para>
                                </th>
            				</tr>
            				<tr>
            					<td class="xmldoctable" width="181">1</td>
            					<td width="127">0</td>
            					<td class="xmldoctable">
            						<para>-'9:59'</para>
            					</td>
            					<td>
            						<para>'9:59'</para>
            					</td>
            				</tr>
            				<tr>
            					<td class="xmldoctable" width="181">1</td>
            					<td width="127">1</td>
            					<td class="xmldoctable">
            						<para>-'9:59.9'</para>
            					</td>
            					<td>
            						<para>'9:59.9'</para>
            					</td>
            				</tr>
            				<tr>
            					<td class="xmldoctable" width="181">1</td>
            					<td width="127">2</td>
            					<td class="xmldoctable">
            						<para>-'9:59.99'</para>
            					</td>
            					<td>
            						<para>'9:59.99'</para>
            					</td>
            				</tr>
            				<tr>
            					<td class="xmldoctable" width="181">1</td>
            					<td width="127">3</td>
            					<td class="xmldoctable">
            						<para>-'9:59.999'</para>
            					</td>
            					<td>
            						<para>'9:59.999'</para>
            					</td>
            				</tr>
            				<tr>
            					<td width="181" height="34">1</td>
            					<td width="127" height="34">4</td>
            					<td height="34">
            						<para>-'9:59.9999'</para>
            					</td>
            					<td>
            						<para>'9:59.9999'</para>
            					</td>
            				</tr>
            				<tr>
            					<td width="181">1</td>
            					<td width="127">5</td>
            					<td>
            						<para>-'9:59.99999'</para>
            					</td>
            					<td>
            						<para>'9:59.99999'</para>
            					</td>
            				</tr>
            				<tr>
            					<td width="181">1</td>
            					<td width="127">6</td>
            					<td>
            						<para>-'9:59.999999'</para>
            					</td>
            					<td>
            						<para>'9:59.999999'</para>
            					</td>
            				</tr>
            			</tbody>
            		</table>
            	</para>
            	<para>The range of values for minute precision values of 2,3 and 4 all follow the
                same pattern. For completeness, the following chart displays the range of values
                for a <strong>TdIntervalMinuteToSecond</strong> with a minute precision of
                4.</para>
            	<para>
            		<table class="xmldoctable" cellspacing="0">
            			<tbody>
            				<tr>
            					<th width="181">
            						<para>Minute Precision</para>
            					</th>
            					<th width="127">
            						<para>Second Scale</para>
            					</th>
            					<th>
            						<para>Minimum</para>
            					</th>
            					<th>
                                   <para>Maximum</para>
                                </th>
            				</tr>
            				<tr>
            					<td class="xmldoctable" width="181">4</td>
            					<td width="127">0</td>
            					<td class="xmldoctable">
            						<para>-'9999:59'</para>
            					</td>
            					<td>
            						<para>'9999:59'</para>
            					</td>
            				</tr>
            				<tr>
            					<td class="xmldoctable" width="181">4</td>
            					<td width="127">1</td>
            					<td class="xmldoctable">
            						<para>-'9999:59.9'</para>
            					</td>
            					<td>
            						<para>'9999:59.9'</para>
            					</td>
            				</tr>
            				<tr>
            					<td class="xmldoctable" width="181">4</td>
            					<td width="127">2</td>
            					<td class="xmldoctable">
            						<para>-'9999:59.99'</para>
            					</td>
            					<td>
            						<para>'9999:59.99'</para>
            					</td>
            				</tr>
            				<tr>
            					<td class="xmldoctable" width="181">4</td>
            					<td width="127">3</td>
            					<td class="xmldoctable">
            						<para>-'9999:59.999'</para>
            					</td>
            					<td>
            						<para>'9999:59.999'</para>
            					</td>
            				</tr>
            				<tr>
            					<td width="181" height="34">4</td>
            					<td width="127" height="34">4</td>
            					<td height="34">
            						<para>-'9999:59.9999'</para>
            					</td>
            					<td>
            						<para>'9999:59.9999'</para>
            					</td>
            				</tr>
            				<tr>
            					<td width="181">4</td>
            					<td width="127">5</td>
            					<td>
            						<para>-'9999:59.99999'</para>
            					</td>
            					<td>
            						<para>'9999:59.99999'</para>
            					</td>
            				</tr>
            				<tr>
            					<td width="181">4</td>
            					<td width="127">6</td>
            					<td>
            						<para>-'9999:59.999999'</para>
            					</td>
            					<td>
            						<para>'9999:59.999999'</para>
            					</td>
            				</tr>
            			</tbody>
            		</table>
            	</para>
                <para>
                    <strong>TdIntervalMinuteToSecond</strong> also supports 
                    <see cref="F:Teradata.Client.Provider.TdIntervalMinuteToSecond.Null"/>. This is a very important feature.
                    An application is no longer required to call
                    <see cref="M:Teradata.Client.Provider.TdDataReader.IsDBNull(System.Int32)"/> before invoking the corresponding 
                    TdDataReader "Get" method.  This will improve overall performance.
                </para>
                <para>
                    A <strong>TdIntervalMinuteToSecond</strong> structure allows arithmetic,
                    comparision and conversion operations to be performed. 
                </para>
            	<para>
                    A <strong>TdIntervalMinuteToSecond</strong> may also be specified as an in, out, 
                    or in/out parameter to a stored procedure. In order to maintain backward  
                    compatibility with previous versions of the provider (release 13.0 and prior), 
                    a Connection String Attribute
                    <see cref="P:Teradata.Client.Provider.TdConnectionStringBuilder.EnableTdIntervals">EnableTdIntervals</see>
                    has been added. When the <strong>EnableTdIntervals</strong>
                    is <c>true</c>, <see cref="P:Teradata.Client.Provider.TdParameter.ProviderSpecificValue"/> will
                    return the data as the provider specific type of 
                    <strong>TdIntervalMinuteToSecond</strong>. When <strong>EnableTdIntervals</strong>
                    is <c>false</c>, <strong>TdParameter.ProviderSpecificValue</strong>
                    will return the data as a .NET Framework Library data type of
                    <see cref="T:System.String"/>. 
                </para>
            	<para>
                    The <see cref="P:Teradata.Client.Provider.TdParameter.Value"/> will also return the .NET Framework Library
                    data type of <strong>System.String</strong> when <strong>EnableTdIntervals</strong>
                    is <c>false</c> to maintain backward compatibility. 
                    The <strong>TdParameter.Value</strong> will return a .NET Framework data type of
                    <see cref="T:System.TimeSpan"/> when <strong>EnableTdIntervals</strong>
                    is <c>true</c>.
                </para>
            	<para>For more information on the Teradata Interval Minute To Second data type
                please see the Teradata Database SQL Reference - 'Data Types and Literals'.</para>
            </remarks>
            <example>
            	<para>
                   The following example shows how to retrieve a <strong>TdIntervalMinuteToSecond</strong>, 
                   modify the interval, and then update the table.
               </para>
            	<code lang="CS">
            Public void IntervalExample(TdCommand cmd, String model)
            {
               cmd.Parameters.Clear();
               
               cmd.CommandText = "SELECT StartDate, LeaseReturn, DelayPeriod " +
                                 "FROM AutoLeases " +
                                 "WHERE Model = ?";
             
               cmd.CommandType = CommandType.Text;
             
               cmd.Parameters.Add(null, TdType.VarChar, 10,
                    ParameterDirection.Input, true, 0, 0, null,    
                    DataRowVersion.Default, model);
             
               Int32 row = 0;
               TdDate [] startDate;
               TdTimestamp [] leaseReturn;
               TdIntervalMinuteToSecond [] leaseLen;
             
               using (TdDataReader dr = cmd.ExecuteReader())
               {
                  startDate = new TdDate[dr.RecordsReturned];
                  leaseReturn = new TdTimestamp[dr.RecordsReturned];
                  leaseLen = new TdIntervalMinuteToSecond [dr.RecordsReturned];
             
                  // Specifying an interval of 2 days, 1 hour, 30 minutes 
                  // with an minute precision of 4 and scale of 0
                  TdIntervalMinuteToSecond leaseReturnExtension = new TdIntervalMinuteToSecond(2970, 0, 0, 4, 0);
               
                  while (dr.Read())
                  {
                     // Retrieving the dates
                    startDate[row] = dr.GetTdDate(0);
                    leaseReturn[row] = dr.GetTimestamp(1);
                    leaseLen[row] = dr.GetTdIntervalMinuteToSecond(2);
             
                     // Adding extension to the lease return
                     leaseReturn[row] = leaseReturn[row] + leaseReturnExtension;
             
                     // Adding extension to the lease length;
                     leaseLen[row] = leaseLen[row] + leaseReturnExtension;
             
                     row++;
                  } 
               }
             
               cmd.Parameters.Clear();
             
               cmd.CommandText = "UPDATE AutoLeases " +
                                 "SET LeaseReturn = ?, LeaseLen = ? " +
                                 "WHERE Model = ?";
             
               cmd.Parameters.Add(null, TdType.Timestamp, 0,
                     ParameterDirection.Input, true, 0, 0, null,    
                     DataRowVersion.Default, null);
             
               cmd.Parameters.Add(null, TdType.IntervalMinuteToSecond, 0,
                     ParameterDirection.Input, true, 0, 0, null,    
                     DataRowVersion.Default, null);
             
               cmd.Parameters.Add(null, TdType.VarChar, 9,
                     ParameterDirection.Input, true, 0, 0, null,    
                     DataRowVersion.Default, model);
             
               row--;
               while(row &gt;= 0)
               {
                  cmd.Parameters[0].Value = leaseReturn[row];
                  cmd.Parameters[1].Value = leaseLen[row];
                  cmd.Parameters[2].Value = model;
             
                  cmd.ExecuteNonQuery();
                  row--;
               }
            }
            </code>
            </example>
            <seealso cref="P:Teradata.Client.Provider.TdConnectionStringBuilder.EnableTdIntervals"/> 
            <seealso cref="!:IntervalConnectionString.html">Interval Connection String Attribute</seealso>
            <seealso cref="!:EnableProviderSpecificTypes.html">Enabling Provider Specific Types</seealso>
            <seealso cref="!:IntervalTypeOverview.html">Provider Specific Type:  Interval Type Overview</seealso>
        </member>
        <member name="F:Teradata.Client.Provider.TdIntervalMinuteToSecond.MaxPrecision">
            <summary>
               A constant representing the maximum number of significant digits in the 
               <see cref="P:Teradata.Client.Provider.TdIntervalMinuteToSecond.Minutes"/> interval component.
            </summary>
            <remarks>
               The value of this constant is 4.
            </remarks>
        </member>
        <member name="F:Teradata.Client.Provider.TdIntervalMinuteToSecond.MinPrecision">
            <summary>
               A constant representing the minimum number of significant digits in the 
               <see cref="P:Teradata.Client.Provider.TdIntervalMinuteToSecond.Minutes"/> interval component.
            </summary>
            <remarks>
               The value of this constant is 1.
            </remarks>
        </member>
        <member name="F:Teradata.Client.Provider.TdIntervalMinuteToSecond.MaxScale">
            <summary>
               A constant representing the maximum scale of the 
               <see cref="P:Teradata.Client.Provider.TdIntervalMinuteToSecond.Microseconds"/> interval component.
            </summary>
            <remarks>The value of this constant is 6.</remarks>
        </member>
        <member name="F:Teradata.Client.Provider.TdIntervalMinuteToSecond.MinScale">
            <summary>
               A constant representing the minimum scale of the 
               <see cref="P:Teradata.Client.Provider.TdIntervalMinuteToSecond.Microseconds"/> interval component.
            </summary>
            <remarks>The value of this constant is 0.</remarks>
        </member>
        <member name="F:Teradata.Client.Provider.TdIntervalMinuteToSecond.Null">
            <summary>
               Gets a Null <see cref="T:Teradata.Client.Provider.TdIntervalMinuteToSecond"/> instance.
            </summary>
            <value>
               Returns a <strong>TdIntervalMinuteToSecond</strong> instance that represents a <strong>Null</strong> value.
            </value>
            <remarks>
               Conceptually it is the constructor for <strong>Null</strong> instances 
               of <strong>TdIntervalMinuteToSecond</strong> .
            </remarks>
            <example>
            This example shows how to send a <strong>Null</strong> value to a Teradata database.
            <code>
            TdParameter col1 = new TdParameter();
            col1.TdType = TdType.TdIntervalMinuteToSecond;
            col1.Value = TdIntervalMinuteToSecond.Null;
            </code>
            </example>
        </member>
        <member name="F:Teradata.Client.Provider.TdIntervalMinuteToSecond.Zero">
            <summary>
               Gets an <see cref="T:Teradata.Client.Provider.TdIntervalMinuteToSecond"/> instance that contains all zero elements
               for each interval field.
            </summary>
            <remarks>
               A Zero <Strong>TdIntervalMinuteToSecond</Strong> may be used to determine whether
               other instances of intervals represent postive, negative or non-zero intervals.
            </remarks>
            <example>
            This example shows how to determine if an interval is negative.
            <code>
            TdIntervalDayTo Second mtsInterval = new TdIntervalMinuteToSecond(0, 0, -100000);
            if (mtsInterval &lt; TdIntervalMinuteToSecond.Zero)
            {
               Console.WriteLine("The Interval is negative");
            }
            // The output of the console is "The interval is negative"
            </code>
            </example>
        </member>
        <member name="F:Teradata.Client.Provider.TdIntervalMinuteToSecond.MinValue">
            <summary>
               The smallest possible value for <see cref="T:Teradata.Client.Provider.TdIntervalMinuteToSecond"/>.
            </summary>
            <remarks>
               The value is -'9999:59.999999'.
            </remarks>
        </member>
        <member name="F:Teradata.Client.Provider.TdIntervalMinuteToSecond.MaxValue">
            <summary>
               The largest possible value for <see cref="T:Teradata.Client.Provider.TdIntervalMinuteToSecond"/>.
            </summary>
            <remarks>
               The value is '9999:59.999999'.
            </remarks>
        </member>
        <member name="M:Teradata.Client.Provider.TdIntervalMinuteToSecond.#ctor(System.Int32,System.Int32,System.Int32,System.Byte,System.Byte)">
            <summary>
               An instance of <see cref="T:Teradata.Client.Provider.TdIntervalMinuteToSecond"/> is created from time components 
               specified as integers while precision and scale components are specified as bytes.
            </summary>
            <remarks>
            <para>
               The number of minutes, seconds and microseconds are converted into a
               <strong>TdIntervalMinuteToSecond</strong>.  The microseconds parameter represents 
               10 ^-6 seconds and the microsecond parameter is divided by 10^-6 (.000001) to create a 
               fractional number of seconds. The supplied scale is used to used to truncate any fractional 
               seconds at the position indicated by the scale.
            </para>
            <para>
               For example, a microseconds value of 12345678 and a scale of 6 will be divided by 10^-6 
               and truncated at the 6th position resulting in a value of .123456.  A microseconds value of 
               123 and a scale of 6 will result in a value of .000123.
            </para>
            <para>
               All values are converted into a <strong>TdIntervalMinuteToSecond</strong> to 
               determine if the <see cref="F:Teradata.Client.Provider.TdIntervalMinuteToSecond.MinValue"/> or the <see cref="F:Teradata.Client.Provider.TdIntervalMinuteToSecond.MaxValue"/>
               values are exceeded.  If the values are not exceeded but the resulting minutes component 
               exceeds the supplied <paramref name="precision"/> value, an exception is generated.
            </para>
            <para>
               For example a constructor for TdIntervalMinuteToSecond(444, 6001, 90, 2, 6) requests
               444 minutes, 2 seconds, 90 microseconds with a precision of 2 and a scale of 6. The
               resulting <strong>TdIntervalMinuteToSecond</strong> literal value of '544:01.000090' 
               contains a minutes value which cannot be represented in 2 digits.  Therefore an exception is 
               generated, even though the <strong>MinValue</strong> and the
               <strong>MaxValue</strong> values have not been exceeded.
            </para>
            <para>
               Negative constructor parameters may be supplied to represent negative durations of time.
               Mixed positive and negative constructor parameters are added together that result in a
               negative or positive <strong>TdIntervalMinuteToSecond</strong>.  For instance, a minute
               value of 20, a second value of -4900, a microsecond value of 30, a second precision of 4
               and a scale of 6 will result in a <strong>TdIntervalMinuteToSecond</strong> 
               interval value of -'61:40.000030'.
            </para>
            </remarks>
            <exception cref="T:System.OverflowException" caption="OverflowException">
               The parameters specify a <strong>TdIntervalMinuteToSecond</strong> value 
               less than <see cref="F:Teradata.Client.Provider.TdIntervalMinuteToSecond.MinValue"/> or greater than <see cref="F:Teradata.Client.Provider.TdIntervalMinuteToSecond.MaxValue"/>.
            </exception>
            <exception cref="T:System.ArgumentOutOfRangeException" caption="ArgumentOutOfRangeException">
               The <strong>precision</strong> or <strong>scale</strong> parameters are outside 
               the minimum or maximum range of values.
            </exception>
            <exception cref="T:System.ArgumentException" caption="ArgumentException">
               The <strong>precision</strong> parameter is not large enough to represent the number 
               of minutes.
            </exception>
            <overloads>
               Initializes a new instance of <strong>TdIntervalMinuteToSecond</strong>.
            </overloads>
            <param name="minutes">Number of minutes.</param>
            <param name="seconds">Number of seconds.</param>
            <param name="microseconds">The fractional number of seconds.</param>
            <param name="precision">Number of significant digits of the minute.</param>
            <param name="scale">The number of decimal places for the second.</param>
        </member>
        <member name="M:Teradata.Client.Provider.TdIntervalMinuteToSecond.#ctor(System.Int32,System.Int32,System.Int32)">
            <summary>
               An instance of <see cref="T:Teradata.Client.Provider.TdIntervalMinuteToSecond"/> is created from the time  
               components specified as integers. 
            </summary>
            <remarks>
            <para>
               The number of minutes, seconds and microseconds are constructed into a
               <strong>TdIntervalMinuteToSecond</strong> and evaluated against  <see cref="F:Teradata.Client.Provider.TdIntervalMinuteToSecond.MinValue"/>
               and <see cref="F:Teradata.Client.Provider.TdIntervalMinuteToSecond.MaxValue"/>.  The microseconds parameter represents 10 ^-6 seconds
               and the microsecond parameter is divided by 10^-6 (.000001) to create a fractional number 
               of seconds. The <see cref="P:Teradata.Client.Provider.TdIntervalMinuteToSecond.Scale"/> is then calculated from the number of fractional 
               seconds required. The <see cref="P:Teradata.Client.Provider.TdIntervalMinuteToSecond.Precision"/> is calculated from the number of digits 
               contained within the interval minute component. 
            </para>
            <para>
               For example 75 minutes, 300 seconds and 455666 microseconds
               is first converted into a <strong>TdIntervalMinuteToSecond</strong> and evaluated 
               against <strong>MinValue</strong> and <strong>MaxValue</strong>. The  
               <strong>TdIntervalMinuteToSecond</strong> literal representation results in a  
               <strong>TdIntervalMinuteToSecond</strong> value of '80:00.455666'. 
               Precision is calculated to be a value of 2 representing two significant digits of 80 minutes.
               The scale is calculated to be 6 from the number of decimal places right of the seconds
               interval which equals the <see cref="F:Teradata.Client.Provider.TdIntervalMinuteToSecond.MaxScale"/> value.
            </para>
            <para>
               Negative constructor parameters may be supplied to represent negative durations of time.
               Mixed positive and negative constructor parameters are added together that result in a
               negative or positive <strong>TdIntervalMinuteToSecond</strong>.  For instance, a minute
               value of 20, a second value of -4900, and a microsecond value of 30
               will result in a <strong>TdIntervalMinuteToSecond</strong> interval value of
               -'61:40.000030' with a calculated precision of 2 and a calculated scale of 6.
            </para>
            </remarks>
            <exception cref="T:System.OverflowException" caption="OverflowException">
               The parameters specify a <strong>TdIntervalMinuteToSecond</strong> value less 
               than <see cref="F:Teradata.Client.Provider.TdIntervalMinuteToSecond.MinValue"/> or greater than <see cref="F:Teradata.Client.Provider.TdIntervalMinuteToSecond.MaxValue"/>.
            </exception>
            <param name="minutes">Number of minutes.</param>
            <param name="seconds">Number of seconds.</param>
            <param name="microseconds">The number of fractional seconds.</param>
        </member>
        <member name="M:Teradata.Client.Provider.TdIntervalMinuteToSecond.#ctor(System.TimeSpan)">
            <summary>
               An instance of <see cref="T:Teradata.Client.Provider.TdIntervalMinuteToSecond"/> is created from a <see cref="T:System.TimeSpan"/>.
            </summary>
            <remarks>
            <para>
               The  <strong>TimeSpan</strong> value is converted into a <see cref="T:Teradata.Client.Provider.TdIntervalMinuteToSecond"/>
               and evaluated against <see cref="F:Teradata.Client.Provider.TdIntervalMinuteToSecond.MinValue"/> and <see cref="F:Teradata.Client.Provider.TdIntervalMinuteToSecond.MaxValue"/>.  The 
               <see cref="P:Teradata.Client.Provider.TdIntervalMinuteToSecond.Precision"/> is then calculated from the number of digits contained within 
               the interval minute component and the <see cref="P:Teradata.Client.Provider.TdIntervalMinuteToSecond.Scale"/> is calculated from the number of 
               decimal places required to represent the fractional seconds.
            </para>
            <para>
               After conversion of the <strong>TimeSpan</strong> value into 
               <strong>TdIntervalMinuteToSecond</strong>, any fractional seconds will be truncated
               according the the <see cref="F:Teradata.Client.Provider.TdIntervalMinuteToSecond.MaxScale"/> value of 6 decimal places.
               For example, a TimeSpan value created with a <see cref="P:System.TimeSpan.Ticks"/> value
               of 8601234567 results in a value of 0 days, 0 hours, 14 minutes and 
               20.1234567 seconds.  The <strong>TdIntervalMinuteToSecond</strong> literal 
               representation results in a <strong>TdIntervalMinuteToSecond</strong> value of  
               '14:20.123456'. The .1234567 seconds value is truncated by  
               one significant digit. Precision is calculated to be a value of 2 representing two significant 
               digits in the minute.
            </para>
            </remarks>
            <exception cref="T:System.OverflowException" caption="OverflowException">
               The <strong>timespan</strong> parameter specifies a 
               <strong>TdIntervalMinuteToSecond</strong> value less than <see cref="F:Teradata.Client.Provider.TdIntervalMinuteToSecond.MinValue"/> 
               or greater than <see cref="F:Teradata.Client.Provider.TdIntervalMinuteToSecond.MaxValue"/>.
            </exception>
            <param name="timeSpan">
               A <strong>TimeSpan</strong> to initialize <strong>TdIntervalMinuteToSecond</strong>.
            </param>
        </member>
        <member name="M:Teradata.Client.Provider.TdIntervalMinuteToSecond.#ctor(System.TimeSpan,System.Byte,System.Byte)">
            <summary>
               An instance of <see cref="T:Teradata.Client.Provider.TdIntervalMinuteToSecond"/> is created using a <see cref="T:System.TimeSpan"/> 
               specifying the precision and the scale as bytes.
            </summary>
            <remarks>
            <para>
               The  <strong>TimeSpan</strong> value is converted into a <strong>TdIntervalMinuteToSecond</strong> 
               and evaluated against <see cref="F:Teradata.Client.Provider.TdIntervalMinuteToSecond.MinValue"/> and <see cref="F:Teradata.Client.Provider.TdIntervalMinuteToSecond.MaxValue"/>.  If the values 
               are not exceeded but the resulting minutes component exceeds the supplied parameter 
               <paramref name="precision"/> value, an exception is generated.
            </para>
            <para>
               After conversion of the <strong>TimeSpan</strong> value into a
               <strong>TdIntervalMinuteToSecond</strong>, any fractional seconds will be truncated
               according the the supplied parameter <paramref name="scale"/>.
            </para>
            <para>
               For example, a TimeSpan value created with a <see cref="P:System.TimeSpan.Ticks"/> value
               of 8601234567 results in a value of 0 days, 0 hours, 14 minutes and
               20.1234567 seconds.  The <strong>TdIntervalMinuteToSecond</strong> literal 
               representation results in a <strong>TdIntervalMinuteToSecond</strong> value of  
               '14:20.123456'. The .1234567 seconds value will truncated by  
               the supplied parameter <paramref name="scale"/>. The supplied parameter 
               <paramref name="precision"/> must be a value greater than or equal to 2 and 
               less than or equal to <see cref="F:Teradata.Client.Provider.TdIntervalMinuteToSecond.MaxScale"/> to eliminate exceptions due to 
               truncation of the minutes component.
            </para>
            </remarks>
            <exception cref="T:System.OverflowException" caption="OverflowException">
               The <strong>timespan</strong>parameter specifies a 
               <strong>TdIntervalMinuteToSecond</strong> value less than <see cref="F:Teradata.Client.Provider.TdIntervalMinuteToSecond.MinValue"/> 
               or greater than <see cref="F:Teradata.Client.Provider.TdIntervalMinuteToSecond.MaxValue"/>.
            </exception>
            <exception cref="T:System.ArgumentOutOfRangeException" caption="ArgumentOutOfRangeException">
               The <strong>precision</strong> or <strong>scale</strong> parameters 
               are outside the minimum or maximum range of values.
            </exception>
            <exception cref="T:System.ArgumentException" caption="ArgumentException">
               The <strong>precision</strong> parameter is not large enough to represent the 
               number of minutes.
            </exception>
            <param name="timeSpan">A TimeSpan to initialize <strong>TdIntervalMinuteToSecond</strong>.</param>
            <param name="precision">Number of significant digits of the minute.</param>
            <param name="scale">The number of decimal places for the second.</param>
        </member>
        <member name="M:Teradata.Client.Provider.TdIntervalMinuteToSecond.CompareTo(Teradata.Client.Provider.TdIntervalMinuteToSecond)">
            <summary>
               Compares this instance to the specified <see cref="T:Teradata.Client.Provider.TdIntervalMinuteToSecond"/>  
               parameter <paramref name="other"/>.
            </summary>
            <returns>
               The result of the comparison is returned as a signed integer.
            </returns>
            <remarks>
            	<para>
                    The integer returned when this instance is compared to <paramref name="other"/>
                    indicates the following:
                </para>
            	<para>
            		<list type="table">
            			<listheader>
            				<term>Return Value</term>
            				<description>Meaning</description>
            			</listheader>
            			<item>
            				<term>Less than Zero</term>
            				<description>
            					<para>
                                    This instance is less than <paramref name="other"/>
                                </para>
            					<para>-or-</para>
            					<para>This instance is <see cref="F:Teradata.Client.Provider.TdIntervalMinuteToSecond.Null"/> and
                                   <paramref name="other"/> is non-null.
                               </para>
            				</description>
            			</item>
            			<item>
            				<term>Zero</term>
            				<description>
            					<para>
                                    This instance is equal to <paramref name="other"/>
                                </para>
            					<para>-or-</para>
            					<para>
                                   This instance is <Strong>Null</Strong> and <paramref name="other"/> is
                                   <Strong>Null</Strong>.
                               </para>
            				</description>
            			</item>
            			<item>
            				<term>Greater than Zero</term>
            				<description>
            					<para>
                                    This instance is greater than
                                    <paramref name="other"/>
                                </para>
            					<para>-or-</para>
            					<para>
            						<paramref name="other"/> is <Strong>Null</Strong> and this instance is non-null.
                                </para>
            				</description>
            			</item>
            		</list>
            	</para>
            </remarks>
            <param name="other">The <strong>TdIntervalMinuteToSecond</strong> to compare.</param>
        </member>
        <member name="M:Teradata.Client.Provider.TdIntervalMinuteToSecond.CompareTo(System.Object)">
            <summary>
               Compares this instance to the specified <see cref="T:Teradata.Client.Provider.TdIntervalMinuteToSecond"/> 
               parameter <paramref name="obj"/>. 
            </summary>
            <returns>
               The result of the comparison is returned as a signed integer.
            </returns>
            <remarks>
            	<para>
                    The integer returned when this instance is compared to <paramref name="obj"/>
                    indicates the following:
                </para>
            	<para>
            		<list type="table">
            			<listheader>
            				<term>Return Value</term>
            				<description>Meaning</description>
            			</listheader>
            			<item>
            				<term>Less than Zero</term>
            				<description>
            					<para>This instance is less than <paramref name="obj"/></para>
            					<para>-or-</para>
            					<para>This instance is <see cref="F:Teradata.Client.Provider.TdIntervalMinuteToSecond.Null"/> and <paramref name="obj"/> is non-null.</para>
            				</description>
            			</item>
            			<item>
            				<term>Zero</term>
            				<description>
            					<para>
                                    This instance is equal to <paramref name="obj"/>
                                </para>
            					<para>-or-</para>
            					<para>
                                   This instance is <Strong>Null</Strong> and <paramref name="obj"/> is
                                   <Strong>Null</Strong>.
                               </para>
            				</description>
            			</item>
            			<item>
            				<term>Greater than Zero</term>
            				<description>
            					<para>
                                    This instance is greater than <paramref name="obj"/>.
                                </para>
            					<para>-or-</para>
            					<para>
            						<paramref name="obj"/> is <Strong>Null</Strong> and this instance is non-null
                                </para>
            					<para>-or-</para>
            					<para>
            						<paramref name="obj"/> is a <c>null</c> reference.
                                </para>
            				</description>
            			</item>
            		</list>
            	</para>
              <para>
                <paramref name="obj"/> must be an instance of <strong>TdIntervalMinuteToSecond</strong> 
                type or <c>null</c> reference.
              </para>
            </remarks>
            <exception cref="T:System.ArgumentException">
               <paramref name="obj"/> is not of same type as <strong>TdIntervalMinuteToSecond</strong>.
            </exception>
            <seealso cref="M:Teradata.Client.Provider.TdIntervalMinuteToSecond.CompareTo(Teradata.Client.Provider.TdIntervalMinuteToSecond)"/>
            <overloads>
               Compares this instance to the supplied <strong>TdIntervalMinuteToSecond</strong>  
               and returns whether this instance is less than, equal or greater than the supplied 
               <strong>TdIntervalMinuteToSecond</strong>.
            </overloads>
            <param name="obj">A <strong>TdIntervalMinuteToSecond</strong> object to compare.</param>
        </member>
        <member name="M:Teradata.Client.Provider.TdIntervalMinuteToSecond.Equals(Teradata.Client.Provider.TdIntervalMinuteToSecond)">
            <summary>
               Compares this instance and another <see cref="T:Teradata.Client.Provider.TdIntervalMinuteToSecond"/> to determine 
               whether they are equal. 
            </summary>
            <returns>
               <c>true</c> if the two <strong>TdIntervalMinuteToSecond</strong> objects are equal, 
               <c>false</c> otherwise.
            </returns>
            <remarks>
            	<para>
            		The return value is <c>true</c> if the instance is 
                    equal to the <paramref name="other"/>, <c>false</c> otherwise.
                </para>
            	<para>
            		<list type="table">
            			<listheader>
            				<term>Return Value</term>
            				<description>Description</description>
            			</listheader>
            			<item>
            				<term><c>true</c></term>
                            <description>
                                <para>This instance and <paramref name="other"/> are <see cref="F:Teradata.Client.Provider.TdIntervalMinuteToSecond.Null"/></para>
                                <para>-or-</para>
                                <para>This instance is equal to <paramref name="other"/>.</para>
                            </description>
            			</item>
            			<item>
            				<term><c>false</c></term>
                            <description>
                            <para>
                               This instance is <strong>Null</strong> and <paramref name="other"/> 
                               is not <strong>Null</strong>
                            </para>
                            <para>-or-</para>
                            <para>
                               This instance is not <strong>Null</strong> and <paramref name="other"/> 
                               is <strong>Null</strong>
                            </para>
                            <para>-or-</para>
                            <para>This instance is not equal to <paramref name="other"/>.</para>
                            </description>
            			</item>
            		</list>
            	</para>
            </remarks>
            <overloads>
               Returns a value indicating whether two instances of 
               <strong>TdIntervalMinuteToSecond</strong> are equal.
            </overloads>
            <param name="other">
               <strong>TdIntervalMinuteToSecond</strong> that will be compared to this instance 
               of <strong>TdIntervalMinuteToSecond</strong>.
            </param>
        </member>
        <member name="M:Teradata.Client.Provider.TdIntervalMinuteToSecond.Equals(Teradata.Client.Provider.TdIntervalMinuteToSecond,Teradata.Client.Provider.TdIntervalMinuteToSecond)">
            <summary>
               Compares two <see cref="T:Teradata.Client.Provider.TdIntervalMinuteToSecond"/> instances to determine 
               whether they are equal.
            </summary>
            <returns>
               <c>true</c> if the two <strong>TdIntervalMinuteToSecond</strong> instances are equal, 
               <c>false</c> otherwise.
            </returns>
            <remarks>
            	<para>
            		The return value is <c>true</c> if the <paramref name="left"/> is 
                    equal to the <paramref name="right"/>, <c>false</c> otherwise.
                </para>
            	<para>
            		<list type="table">
            			<listheader>
            				<term>Return Value</term>
            				<description>Description</description>
            			</listheader>
            			<item>
            				<term><c>true</c></term>
                            <description>
                                <para><paramref name="left"/> is equal to <paramref name="right"/></para>
                                <para>-or-</para>
                                <para>
                                   <paramref name="left"/> and <paramref name="right"/> are <see cref="F:Teradata.Client.Provider.TdIntervalMinuteToSecond.Null"/>.
                                </para>
                            </description>
            			</item>
            			<item>
            				<term><c>false</c></term>
                            <description>
                              <para><paramref name="left"/> is not equal to <paramref name="right"/></para>
                              <para>-or-</para>
                              <para>
                                   <paramref name="left"/> is not <strong>Null</strong> and <paramref name="right"/> 
                                   is <strong>Null</strong>
                               </para>
                              <para>-or-</para>
                              <para>
                                   <paramref name="left"/> is <strong>Null</strong> and <paramref name="right"/> 
                                   is not <strong>Null</strong>.
                               </para>
                            </description>
            			</item>
            		</list>
            	</para>
            </remarks>
            <example>
                The following code example uses various comparison methods and operators.
                <code lang="CS">
            TdIntervalMinuteToSecond firstInterval = new TdIntervalMinuteToSecond(5, 15);
            TdIntervalMinuteToSecond secondInterval = new TdIntervalMinuteToSecond(20, 15);
             
            // The following comparison methods and operators are equivalent
            if (false == TdIntervalMinuteToSecond.Equals(firstInterval, secondInterval) ||
                firstInterval != secondInterval ||
                true == TdIntervalMinuteToSecond.NotEquals(firstInterval, secondInterval) )
            {
               Console.WriteLine(“firstInterval does not equal secondInterval”);
            }
                </code>
            </example>
            <overloads>
               Returns a value indicating whether two instances of <strong>TdIntervalMinuteToSecond</strong> are equal.
            </overloads>
            <param name="left">A <strong>TdIntervalMinuteToSecond</strong> instance.</param>
            <param name="right">A <strong>TdIntervalMinuteToSecond</strong> instance.</param>
        </member>
        <member name="M:Teradata.Client.Provider.TdIntervalMinuteToSecond.Compare(Teradata.Client.Provider.TdIntervalMinuteToSecond,Teradata.Client.Provider.TdIntervalMinuteToSecond)">
            <summary>
                Two <see cref="T:Teradata.Client.Provider.TdIntervalMinuteToSecond"/> intervals are compared and a value is 
                returned that indicates <paramref name="left"/> is greater than, less than or equal to
                <paramref name="right"/>.
            </summary>
            <returns>
               The result of the comparison is returned as a signed integer.
            </returns>
            <remarks>
            	<list type="table">
            		<listheader>
            			<term>Return Value</term>
            			<description>Description</description>
            		</listheader>
            		<item>
            			<term>Less than Zero</term>
            			<description>
                           <para><paramref name="left"/> is less than <paramref name="right"/></para>
            				<para>-or-</para>
                           <para>
                              <paramref name="left"/> is <see cref="F:Teradata.Client.Provider.TdIntervalMinuteToSecond.Null"/>
                              and <paramref name="right"/> is not <strong>Null</strong>.
                           </para>
                        </description>
            		</item>
            		<item>
            			<term>Zero</term>
            			<description>
            				<para><paramref name="left"/> equals <paramref name="right"/></para>
            				<para>-or-</para>
                           <para>
                                <paramref name="left"/> is <strong>Null</strong> 
                                 and <paramref name="right"/> is <strong>Null</strong>.
                           </para>
                        </description>
            		</item>
            		<item>
            			<term>Greater than Zero</term>
            			<description>
            				<para><paramref name="left"/> is greater than <paramref name="right"/></para>
            				<para>-or-</para>
            				<para><paramref name="left"/> is not <strong>Null</strong> and
                            <paramref name="right"/> is <strong>Null</strong>.</para>
                        </description>
            		</item>
            	</list>
            </remarks>
            <param name="left">An instance of <strong>TdIntervalMinuteToSecond</strong>.</param>
            <param name="right">An instance of <strong>TdIntervalMinuteToSecond</strong>.</param>
        </member>
        <member name="M:Teradata.Client.Provider.TdIntervalMinuteToSecond.NotEquals(Teradata.Client.Provider.TdIntervalMinuteToSecond,Teradata.Client.Provider.TdIntervalMinuteToSecond)">
            <summary>
                Compares two <see cref="T:Teradata.Client.Provider.TdIntervalMinuteToSecond"/> interval types to determine 
                whether the <paramref name="left"/> is not equal to <paramref name="right"/>.
            </summary>
            <returns>
            	<para>
            		<c>true</c> indicates <paramref name="left"/> is not equal to
                    <paramref name="right"/>, <c>false</c> otherwise.
                </para>
            	<para>
            		<list type="table">
            			<listheader>
            				<term>Return Value</term>
            				<description>Description</description>
            			</listheader>
            			<item>
            				<term><c>true</c></term>
            				<description>
            					<para>
            						<paramref name="left"/> is less than or greater
                                    than <paramref name="right"/>
            					</para>
            					<para>-or-</para>
            					<para>
            						Either <paramref name="left"/> or <paramref name="right"/> is
                                   <see cref="F:Teradata.Client.Provider.TdIntervalMinuteToSecond.Null"/>.
                               </para>
            				</description>
            			</item>
            			<item>
            				<term><c>false</c></term>
            				<description>
            					<para>
            						<paramref name="left"/> is equal to
                                    <paramref name="right"/>
            					</para>
            					<para>-or-</para>
            					<para>
            						<paramref name="left"/> and <paramref name="right"/> are
                                   <strong>Null</strong>.
                               </para>
            				</description>
            			</item>
            		</list>
            	</para>
            </returns>
            <param name="left">An instance of <strong>TdIntervalMinuteToSecond</strong>.</param>
            <param name="right">An instance of <strong>TdIntervalMinuteToSecond</strong>.</param>
        </member>
        <member name="M:Teradata.Client.Provider.TdIntervalMinuteToSecond.GreaterThan(Teradata.Client.Provider.TdIntervalMinuteToSecond,Teradata.Client.Provider.TdIntervalMinuteToSecond)">
            <summary>
               Determines whether the <paramref name="left"/> is greater than 
               the <paramref name="right"/>.
            </summary>
            <returns>
            	<para>
            		<c>true</c> indicates the <paramref name="left"/> is greater than
                    the <paramref name="right"/>, <c>false</c> otherwise.
                </para>
            	<para>
            		<list type="table">
            			<listheader>
            				<term>Return Value</term>
            				<description>Description</description>
            			</listheader>
            			<item>
            				<term><c>true</c></term>
            				<description>
            					<paramref name="left"/> and
                                <paramref name="right"/> are not
                                <see cref="F:Teradata.Client.Provider.TdIntervalMinuteToSecond.Null"/> and
                                <paramref name="left"/> is greater than
                                <paramref name="right"/>.
            				</description>
            			</item>
            			<item>
            				<term><c>false</c></term>
            				<description>
            					<para>
                                    The <paramref name="left"/> is less than or equal
                                    to <paramref name="right"/>
            					</para>
            					<para>-or-</para>
            					<para>
                                   <paramref name="left"/> and / or <paramref name="right"/>
                                   is <strong>Null</strong>.
                                </para>
            				</description>
            			</item>
            		</list>
            	</para>
            </returns>
            <remarks>
            	<para>
                    Comparison operators always return <c>false</c> if one of the operands is
                    <strong>Null</strong>. Therefore you should not assume that the reverse
                    condition is <c>true</c>. For example you cannot assume that the
                    <paramref name="left"/> is less than or equal to the
                    <paramref name="right"/> if <c>GreaterThan</c> returns <c>false</c>.
                </para>
            	<para>
                    The reverse condition is <c>true</c> when the
                    <paramref name="left"/> and the
                    <paramref name="right"/> are not <strong>Null</strong>.
                </para>
            </remarks>
            <param name="left">An instance of <see cref="T:Teradata.Client.Provider.TdIntervalMinuteToSecond"/>.</param>
            <param name="right">An instance of <strong>TdIntervalMinuteToSecond</strong>.</param>
        </member>
        <member name="M:Teradata.Client.Provider.TdIntervalMinuteToSecond.GreaterThanOrEqual(Teradata.Client.Provider.TdIntervalMinuteToSecond,Teradata.Client.Provider.TdIntervalMinuteToSecond)">
            <summary>
               This operator determines whether the <paramref name="left"/> is greater than or 
               equal to the <paramref name="right"/>.
            </summary>
            <returns>
            	<para>
            		<c>true</c> indicates the <paramref name="left"/> is greater than
                    or equal to the <paramref name="right"/>, <c>false</c> otherwise.
                </para>
            	<para>
            		<list type="table">
            			<listheader>
            				<term>Return Value</term>
            				<description>Description</description>
            			</listheader>
            			<item>
            				<term><c>true</c></term>
            				<description>
            					<para>
            						<paramref name="left"/> and
                                    <paramref name="right"/> are not
                                    <see cref="F:Teradata.Client.Provider.TdIntervalMinuteToSecond.Null"/> and
                                    <paramref name="left"/> is greater than or equal
                                    to <paramref name="right"/>
            					</para>
            					<para>-or-</para>
            					<para>
            						<paramref name="left"/> is <strong>Null</strong>
                                    and <paramref name="right"/> is
                                    <strong>Null</strong>.
            					</para>
            				</description>
            			</item>
            			<item>
            				<term><c>false</c></term>
            				<description>
            					<para>
                                    The <paramref name="left"/> is less than
                                    <paramref name="right"/>
            					</para>
            					<para>-or-</para>
            					<para>
                                    Either <paramref name="left"/> or
                                    <paramref name="right"/> is <strong>Null</strong>.
            					</para>
            				</description>
            			</item>
            		</list>
            	</para>
            </returns>
            <remarks>
            	<para>
                    Comparison operators always return <c>false</c> if one of the operands is
                    <strong>Null</strong>. Therefore you should not assume that the reverse
                    condition is <c>true</c>. For example you cannot assume that the
                    <paramref name="left"/> is less than the
                    <paramref name="right"/> if the <c>GreaterThanOrEqual</c> method returns
                    <c>false</c>.
                </para>
            	<para>
                    The reverse condition is <c>true</c> when the
                    <paramref name="left"/> and the
                    <paramref name="right"/> are not <strong>Null</strong>.
                </para>
            </remarks>
            <param name="left">An instance of <see cref="T:Teradata.Client.Provider.TdIntervalMinuteToSecond"/>.</param>
            <param name="right">An instance of <strong>TdIntervalMinuteToSecond</strong>.</param>
        </member>
        <member name="M:Teradata.Client.Provider.TdIntervalMinuteToSecond.LessThan(Teradata.Client.Provider.TdIntervalMinuteToSecond,Teradata.Client.Provider.TdIntervalMinuteToSecond)">
            <summary>
               This method determines whether the <paramref name="left"/> is less than 
               the <paramref name="right"/>.
            </summary>
            <returns>
            	<para>
            		<c>true</c> indicates the <paramref name="left"/> is less than
                    the <paramref name="right"/>, <c>false</c> otherwise.
                </para>
            	<para>
            		<list type="table">
            			<listheader>
            				<term>Return Value</term>
            				<description>Description</description>
            			</listheader>
            			<item>
            				<term><c>true</c></term>
            				<description>
            					<paramref name="left"/> and <paramref name="right"/> are
                                not <see cref="F:Teradata.Client.Provider.TdIntervalMinuteToSecond.Null"/> and
                                <paramref name="left"/> is less than
                                <paramref name="right"/>.
            				</description>
            			</item>
            			<item>
            				<term><c>false</c></term>
            				<description>
            					<para>
                                    The <paramref name="left"/> is greater than or
                                    equal to <paramref name="right"/>
            					</para>
            					<para>-or-</para>
            					<para>
                                    <paramref name="left"/> and / or <paramref name="right"/> is
                                    <strong>Null</strong>.
            					</para>
            				</description>
            			</item>
            		</list>
            	</para>
            </returns>
            <remarks>
            	<para>
                    Comparison operators always return <c>false</c> if one of the operands is
                    <strong>Null</strong>. Therefore you should not assume that the reverse
                    condition is <c>true</c>. For example you cannot assume that the
                    <paramref name="left"/> is greater than or equal to the
                    <paramref name="right"/> if the <c>LessThan</c> method returns
                    <c>false</c>.
                </para>
            	<para>
                    The reverse condition is <c>true</c> when the
                    <paramref name="left"/> and the
                    <paramref name="right"/> are not <strong>Null</strong>.
                </para>
            </remarks>
            <param name="left">An instance of <see cref="T:Teradata.Client.Provider.TdIntervalMinuteToSecond"/>.</param>
            <param name="right">An instance of <strong>TdIntervalMinuteToSecond</strong>.</param>
        </member>
        <member name="M:Teradata.Client.Provider.TdIntervalMinuteToSecond.LessThanOrEqual(Teradata.Client.Provider.TdIntervalMinuteToSecond,Teradata.Client.Provider.TdIntervalMinuteToSecond)">
            <summary>
                This method determines whether the <paramref name="left"/> is less
                than or equal to the <paramref name="right"/>.
            </summary>
            <returns>
            	<para>
            		<c>true</c> indicates the <paramref name="left"/> is less than or
                    equal to the <paramref name="right"/>, <c>false</c> otherwise.
                </para>
            	<para>
            		<list type="table">
            			<listheader>
            				<term>Return Value</term>
            				<description>Description</description>
            			</listheader>
            			<item>
            				<term><c>true</c></term>
            				<description>
            					<para>
            						<paramref name="left"/> and
                                    <paramref name="right"/> are not
                                    <see cref="F:Teradata.Client.Provider.TdIntervalMinuteToSecond.Null"/> and
                                    <paramref name="left"/> is less than or equal to
                                    <paramref name="right"/>
            					</para>
            					<para>-or-</para>
            					<para>
            						<paramref name="left"/> is <strong>Null</strong>
                                    and <paramref name="right"/> is
                                    <strong>Null</strong>.
            					</para>
            				</description>
            			</item>
            			<item>
            				<term><c>false</c></term>
            				<description>
            					<para>
                                    The <paramref name="left"/> is greater than
                                    <paramref name="right"/>
            					</para>
            					<para>-or-</para>
            					<para>
                                    Either <paramref name="left"/> or
                                    <paramref name="right"/> is <strong>Null</strong>.
            					</para>
            				</description>
            			</item>
            		</list>
            	</para>
            </returns>
            <remarks>
            	<para>
                    Comparison operators always return <c>false</c> if one of the operands is
                    <strong>Null</strong>. Therefore you should not assume that the reverse
                    condition is <c>true</c>. For example you cannot assume that the
                    <paramref name="left"/> is greater than the
                    <paramref name="right"/> if the <c>LessThanOrEqual</c> method returns
                    <c>false</c>.
                </para>
            	<para>
                    The reverse condition is <c>true</c> when the
                    <paramref name="left"/> and the
                    <paramref name="right"/> are not <strong>Null</strong>.
                </para>
            </remarks>
            <param name="left">An instance of <see cref="T:Teradata.Client.Provider.TdIntervalMinuteToSecond"/>.</param>
            <param name="right">An instance of <strong>TdIntervalMinuteToSecond</strong>.</param>
        </member>
        <member name="M:Teradata.Client.Provider.TdIntervalMinuteToSecond.Equals(System.Object)">
            <summary>
               Compares this instance and <paramref name="obj"/> to determine whether they
               are equal. 
            </summary>
            <returns>
               <c>true</c> if the two <see cref="T:Teradata.Client.Provider.TdIntervalMinuteToSecond"/>s are equal, 
               <c>false</c> otherwise.
            </returns>
            <remarks>
            	<para>
                    The return value is <c>true</c> if the instance is equal to the
                    <paramref name="obj"/>, <c>false</c> otherwise.
                </para>
            	<para>
            		<list type="table">
            			<listheader>
            				<term>Return Value</term>
            				<description>Description</description>
            			</listheader>
            			<item>
            				<term>
            					<c>true</c>
            				</term>
            				<description>
            					<para>
                                    This instance and <paramref name="obj"/> are
                                    <see cref="F:Teradata.Client.Provider.TdIntervalMinuteToSecond.Null"/>.
                                </para>
            					<para>-or-</para>
            					<para>
                                    This instance is equal to <paramref name="obj"/>.
                                </para>
            				</description>
            			</item>
            			<item>
            				<term>
            					<c>false</c>
            				</term>
            				<description>
            					<para>
                                    This instance is not equal to
                                    <paramref name="obj"/>.
                                </para>
            					<para>-or-</para>
            					<para>
                                    This instance is not <strong>Null</strong> and
                                    <paramref name="obj"/> is <strong>Null</strong>.
                                </para>
            					<para>-or-</para>
            					<para>
                                    This instance is <strong>Null</strong> and
                                    <paramref name="obj"/> is not <strong>Null</strong>
            					</para>
            					<para>-or-</para>
            					<para>
            						<paramref name="obj"/> is a <strong>null</strong>
                                    reference.
                                </para>
            				</description>
            			</item>
            		</list>
            	</para>
            </remarks>
            <example>
                The following code example uses various comparison methods and operators.
                <code lang="CS">
            // Create TdIntervalMinuteToSecond with 121 hours, 30 minutes
            // default precision and scale
            TdIntervalMinuteToSecond firstInterval = new TdIntervalMinuteToSecond(7290, 0);
            // Create TdIntervalMinuteToSecond with 50 hours, 30 minutes
            // default precision and scale
            Object intervalObj = new TdIntervalMinuteToSecond(3030, 0);
             
            // The following comparison methods and operators are equivalent
            if (false == TdIntervalMinuteToSecond.Equals(firstInterval, (TdIntervalMinuteToSecond)intervalObj) ||
                firstInterval != (TdIntervalMinuteToSecond)intervalObj ||
                false == firstInterval.Equals(intervalObj) )
            {
               Console.WriteLine(“firstInterval does not equal intervalObj”);
            }
                </code>
            </example>
            <overloads>
               Returns a value indicating whether two instances of <strong>TdIntervalMinuteToSecond</strong> are equal.
            </overloads>
            <param name="obj">
               <strong>TdIntervalMinuteToSecond</strong> that will be compared to this instance 
               of <strong>TdIntervalMinuteToSecond</strong>.
            </param>
        </member>
        <member name="M:Teradata.Client.Provider.TdIntervalMinuteToSecond.GetHashCode">
            <summary>
               Returns the hash code for this instance. 
            </summary>
            <returns>The hash code is returned.</returns>
        </member>
        <member name="M:Teradata.Client.Provider.TdIntervalMinuteToSecond.ToString(System.String)">
            <summary>
               Converts this instance to its equivalent String representation using the specified format.
            </summary>
            <remarks>
            	<para>This method supports the following format specifiers:</para>
            	<para>
            		<list type="table">
            			<listheader>
            				<term>Format Specifier</term>
            				<description>Description</description>
            			</listheader>
            			<item>
            				<term>G</term>
            				<description>
            					<para>General interval format.</para>
            					<para>[sign][minutes]:[ss].[ffffff]</para>
            				</description>
            			</item>
            			<item>
            				<term>L</term>
            				<description>
            					<para>Teradata literal format. This string may be used in
                                generating SQL against the Teradata database.</para>
            					<para>INTERVAL [sign]'[minutes]:[ss].[ffffff]' MINUTE TO SECOND</para>
            				</description>
            			</item>
            		</list>
            	</para>
            	<para>Below is the description of each format item.</para>
            	<para>
            		<list type="table">
            			<listheader>
            				<term>Format Item</term>
            				<description>Description</description>
            			</listheader>
            			<item>
            				<term>sign</term>
            				<description>If negative a minus sign will be displayed.</description>
            			</item>
            			<item>
            				<term>minutes</term>
            				<description>The number of minutes (one to four digits in length).</description>
            			</item>
            			<item>
            				<term>ss</term>
            				<description>The number of seconds from 00 - 59.</description>
            			</item>
            			<item>
            				<term>ffffff</term>
            				<description>The number of fractional seconds (0 to 6
                            digits in length).</description>
            			</item>
            		</list>
            	</para>
            	<para>
                    Cultural settings are not supported.
                </para>
            </remarks>
            <returns>
               A string representation of the <strong>TdIntervalMinuteToSecond</strong> will be returned.
            </returns>
            <exception cref="T:System.FormatException" caption="FormatException">
               <paramref name="format"/> contains an invalid format specifier.
            </exception>
            <param name="format">
               The format string that will be used to format the 
               <strong>TdIntervalMinuteToSecond</strong>. 
            </param>
        </member>
        <member name="M:Teradata.Client.Provider.TdIntervalMinuteToSecond.ToString">
            <summary>
               Converts this instance to its equivalent String representation.
            </summary>
            <remarks>
               <para>The string returned will follow this format:</para>
            	<para>[sign][minutes]:[ss].[ffffff]</para>
            	<para>Below is the description of each format item.</para>
            	<para>
            		<list type="table">
            			<listheader>
            				<term>Format Item</term>
            				<description>Description</description>
            			</listheader>
            			<item>
            				<term>sign</term>
            				<description>If negative a minus sign will be displayed.</description>
            			</item>
            			<item>
            				<term>minutes</term>
            				<description>The number of minutes (one to four digits in length).</description>
            			</item>
            			<item>
            				<term>ss</term>
            				<description>The number of seconds from 00 - 59.</description>
            			</item>
            			<item>
            				<term>ffffff</term>
            				<description>The number of fractional seconds (0 to 6
                            digits in length).</description>
            			</item>
            		</list>
            	</para>
            </remarks>
            <returns>
               A string representation of the <strong>TdIntervalMinuteToSecond</strong> will be returned.
            </returns>
        </member>
        <member name="M:Teradata.Client.Provider.TdIntervalMinuteToSecond.Parse(System.String)">
            <summary>
               The specified string is converted into an equivalent <see cref="T:Teradata.Client.Provider.TdIntervalMinuteToSecond"/>.
            </summary>
            <returns>
               A <strong>TdIntervalMinuteToSecond</strong> is returned that is equivalent to the 
               <strong>TdIntervalMinuteToSecond</strong> contained in the input string.
            </returns>
            <exception cref="T:System.FormatException" caption="FormatException">
               <paramref name="value"/> cannot be converted into a 
               <strong>TdIntervalMinuteToSecond</strong> interval.
            </exception>
            <exception cref="T:System.ArgumentNullException" caption="ArgumentNullException">
               <paramref name="value"/> is a <c>null</c> reference.
            </exception>
            <exception cref="T:System.OverflowException">
               The resultant operation returns a value greater than the <see cref="F:Teradata.Client.Provider.TdIntervalMinuteToSecond.MaxValue"/> 
               or less than the <see cref="F:Teradata.Client.Provider.TdIntervalMinuteToSecond.MinValue"/>.
            </exception>
            <remarks>
            	<para>This method supports the following string formats:</para>
            	<para>
            		<list type="table">
            			<listheader>
            				<term>String Format</term>
            				<description>Description</description>
            			</listheader>
            			<item>
            				<term>G</term>
            				<description>
            					<para>General interval format.</para>
            					<para>[sign][minutes]:[ss].[ffffff]</para>
            				</description>
            			</item>
            			<item>
            				<term>L</term>
            				<description>
            					<para>Teradata literal format. This string may be used in
                                generating SQL against the Teradata database.</para>
            					<para>INTERVAL [sign]'[minutes]:[ss].[ffffff]' MINUTE TO SECOND</para>
            				</description>
            			</item>
            		</list>
            	</para>
            	<para>Below is the description of each format item.</para>
             	<para>
            		<list type="table">
            			<listheader>
            				<term>Format Item</term>
            				<description>Description</description>
            			</listheader>
            			<item>
            				<term>sign</term>
            				<description>Optional - . Defaults as space character (+).</description>
            			</item>
            			<item>
            				<term>minutes</term>
            				<description>Required number of minutes (one to four digits in length).</description>
            			</item>
            			<item>
            				<term>ss</term>
            				<description>Required number of seconds from 00 - 59.</description>
            			</item>
            			<item>
            				<term>ffffff</term>
            				<description>Optionally the number of fractional seconds (0 to 6
                            digits in length).</description>
            			</item>
            		</list>
            	</para>
            	<para>
                    Cultural settings are not supported.
            	</para>
            	<para>
            		While parsing the <paramref name="value"/> the <see cref="P:Teradata.Client.Provider.TdIntervalMinuteToSecond.Precision"/> will be
            		set to the number of digits contained within the minute component.  The 
            		<see cref="P:Teradata.Client.Provider.TdIntervalMinuteToSecond.Scale"/> will be set to the number of digits in the fractional
            		seconds component (digits that are to the right of the decimal point).
            	</para>
            	<para>
            		For example a <paramref name="value"/> of "25:40.1234" will
            		contain a precision of 2 and a scale of 4.
            	</para>
            </remarks>
            <overloads>
            	The specified string is converted into an equivalent 
               <strong>TdIntervalMinuteToSecond</strong> interval.
            </overloads>
            <param name="value">
               A string to be converted into a <strong>TdIntervalMinuteToSecond</strong>.
            </param>
        </member>
        <member name="M:Teradata.Client.Provider.TdIntervalMinuteToSecond.TryParse(System.String,Teradata.Client.Provider.TdIntervalMinuteToSecond@)">
            <summary>
               The specified string is converted into an equivalent <see cref="T:Teradata.Client.Provider.TdIntervalMinuteToSecond"/>. 
            </summary>
            <returns>
                <c>true</c> if the conversion of <paramref name="value"/> succeeded, 
                <c>false</c> otherwise.
            </returns>
            <remarks>
            	<para>This method supports the following string formats:</para>
            	<para>
            		<list type="table">
            			<listheader>
            				<term>String Format</term>
            				<description>Description</description>
            			</listheader>
            			<item>
            				<term>G</term>
            				<description>
            					<para>General interval format.</para>
            					<para>[sign][minutes]:[ss].[ffffff]</para>
            				</description>
            			</item>
            			<item>
            				<term>L</term>
            				<description>
            					<para>Teradata literal format. This string may be used in
                                generating SQL against the Teradata database.</para>
            					<para>INTERVAL [sign]'[minutes]:[ss].[ffffff]' MINUTE TO SECOND</para>
            				</description>
            			</item>
            		</list>
            	</para>
            	<para>Below is the description of each format item.</para>
            	<para>
            		<list type="table">
            			<listheader>
            				<term>Format Item</term>
            				<description>Description</description>
            			</listheader>
            			<item>
            				<term>sign</term>
            				<description>Optional - . Defaults as space character (+).</description>
            			</item>
            			<item>
            				<term>minutes</term>
            				<description>Required number of minutes (one to four digits in length).</description>
            			</item>
            			<item>
            				<term>ss</term>
            				<description>Required number of seconds from 00 - 59.</description>
            			</item>
            			<item>
            				<term>ffffff</term>
            				<description>Optionally the number of fractional seconds (0 to 6
                            digits in length).</description>
            			</item>
            		</list>
            	</para>
            	<para>
                    Cultural settings are not supported.
            	</para>
            	<para>
            		While parsing the <paramref name="value"/> the <see cref="P:Teradata.Client.Provider.TdIntervalMinuteToSecond.Precision"/> will be
            		set to the number of digits contained within the minute component.  The 
            		<see cref="P:Teradata.Client.Provider.TdIntervalMinuteToSecond.Scale"/> will be set to the number of digits in the fractional
            		seconds component (digits that are to the right of the decimal point).
            	</para>
            	<para>
            		For example a <paramref name="value"/> of "25:40.1234" will
            		contain a precision of 2 and a scale of 4.
            	</para>
            </remarks>
            <overloads>
               The specified string is converted into an equivalent 
               <see cref="T:Teradata.Client.Provider.TdIntervalMinuteToSecond"/> interval.  A <c>true</c> is returned 
               if the conversion succeeded, <c>false</c> otherwise.
            </overloads>
            <param name="value">A string to be converted into a <strong>TdIntervalMinuteToSecond</strong>.</param>
            <param name="result">The converted string into a <strong>TdIntervalMinuteToSecond</strong>.</param>
        </member>
        <member name="M:Teradata.Client.Provider.TdIntervalMinuteToSecond.GetXmlSchema(System.Xml.Schema.XmlSchemaSet)">
             <summary>
                Gets the XML Qualified name for <see cref="T:Teradata.Client.Provider.TdIntervalMinuteToSecond"/> XML type mapping.
             </summary>
             <param name="xmlSchemaSet">
                Holds zero or more XML Schema definition language (XSD) schemas.
             </param>
             <returns>
                Returns <strong>xs:duration</strong>.
             </returns>
             <example>
             This example shows how to use the <strong>TdIntervalMinuteToSecond</strong> with <see cref="T:System.Xml.Serialization.XmlSerializer"/> class.
             <see cref="T:System.Xml.Serialization.XmlElementAttribute"/> is used to indicate that the Teradata Database column can be <strong>Null</strong>.
             <code>
              public class Order
              {
                  public TdTimestamp Date;
             
                  public TdIntervalMinuteToSecond ExpirationPeriod;
             
                  public TdTimestamp ExpirationDate;
            
                  public Int32 ProductId;
            
                  public Int32 Quantity;
            
                  public Int32? BackOrderQuantity;
            
                  [XmlElementAttribute(IsNullable = true)]        
                  public TdDecimal BackOrderPrice;
              }
             
              internal class OrderWriter
              {
              
                  public static void Write()
                  {
                      // Setup the order
                      Order x = new Order();
              
                      x.Date = new TdTimestamp(DateTime.Today);
                      // 5 days 4 hours and 30 minutes
                      x.ExpirationPeriod = new TdIntervalMinuteToSecond(7470, 0, 0, 0);
                      x.ExpirationDate = x.Date + x.ExpirationPeriod;
                      x.ProductId = 100;
                      x.Quantity = 2000;
                      x.BackOrderQuantity = null;
                      x.BackOrderPrice = TdDecimal.Null;
            
                      // Write out today's orders to the file.
                      //
                      // Open the file.
                      XmlWriterSettings settings = new XmlWriterSettings();
                      settings.Indent = true;
                      XmlWriter writer = XmlWriter.Create(@"C:\Temp\TodayOrders.XML", settings);
                      writer.WriteStartElement("TodayOrders");
                
                      // Write out the schema.
                      XmlSchemas schemas = new XmlSchemas();
                      XmlSchemaExporter schExporter = new XmlSchemaExporter(schemas);
                      schExporter.ExportTypeMapping(new XmlReflectionImporter().ImportTypeMapping(typeof(Order)));
                      schemas[0].Write(writer);
            
                      // Write out the orders.
                      XmlSerializer xml = new XmlSerializer(typeof(Order));
                      xml.Serialize(writer, x);
              
                      // Close the document.
                      writer.WriteEndDocument();
                      writer.Close();
                  }
              }
             
              /* Output is:
             
              &lt;TodayOrders&gt;
                &lt;xs:schema elementFormDefault="qualified" xmlns:xs="http://www.w3.org/2001/XMLSchema"&gt;
                  &lt;xs:element name="Order" nillable="true" type="Order" /&gt;
                  &lt;xs:complexType name="Order"&gt;
                    &lt;xs:sequence&gt;
                      &lt;xs:element minOccurs="1" maxOccurs="1" name="Date" type="xs:dateTime" /&gt;
                      &lt;xs:element minOccurs="1" maxOccurs="1" name="ExpirationPeriod" type="xs:duration" /&gt;
                      &lt;xs:element minOccurs="1" maxOccurs="1" name="ExpirationDate" type="xs:dateTime" /&gt;
                      &lt;xs:element minOccurs="1" maxOccurs="1" name="ProductId" type="xs:int" /&gt;
                      &lt;xs:element minOccurs="1" maxOccurs="1" name="Quantity" type="xs:int" /&gt;
                      &lt;xs:element minOccurs="1" maxOccurs="1" name="BackOrderQuantity" nillable="true" type="xs:int" /&gt;
                      &lt;xs:element minOccurs="1" maxOccurs="1" name="BackOrderPrice" nillable="true" type="xs:decimal" /&gt;
                    &lt;/xs:sequence&gt;
                  &lt;/xs:complexType&gt;
                &lt;/xs:schema&gt;
                &lt;Order xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xmlns:xsd="http://www.w3.org/2001/XMLSchema"&gt;
                  &lt;Date&gt;2008-02-01T00:00:00-08:00&lt;/Date&gt;
                  &lt;ExpirationPeriod&gt;PT7470M&lt;/ExpirationPeriod&gt;
                  &lt;ExpirationDate&gt;2008-02-06T04:30:00-08:00&lt;/ExpirationDate&gt;
                  &lt;ProductId&gt;100&lt;/ProductId&gt;
                  &lt;Quantity&gt;2000&lt;/Quantity&gt;
                  &lt;BackOrderQuantity xsi:nil="true" /&gt;
                  &lt;BackOrderPrice xsi:nil="true" /&gt;
                &lt;/Order&gt;
              &lt;/TodayOrders&gt;
             
              */
             </code>
             </example>        
        </member>
        <member name="M:Teradata.Client.Provider.TdIntervalMinuteToSecond.op_Addition(Teradata.Client.Provider.TdIntervalMinuteToSecond,Teradata.Client.Provider.TdIntervalMinuteToSecond)">
            <summary>
               A <see cref="T:Teradata.Client.Provider.TdIntervalMinuteToSecond"/> is added to another <strong>TdIntervalMinuteToSecond</strong>.
            </summary>
            <remarks>
            <para>
               If either parameter is <strong>Null</strong> a <see cref="F:Teradata.Client.Provider.TdIntervalMinuteToSecond.Null"/> will be returned.
            </para>
            <para>
               The returned <strong>TdIntervalMinuteToSecond</strong> will contain a precision
               set to the <see cref="F:Teradata.Client.Provider.TdIntervalMinuteToSecond.MaxPrecision"/>. The scale will always be set to the the scale 
               of the operand containing the greatest scale.
            </para>        
            </remarks>
            <returns>
               A new <strong>TdIntervalMinuteToSecond</strong> as the result of adding a 
               <strong>TdIntervalMinuteToSecond</strong> to another <strong>TdIntervalMinuteToSecond</strong>.
            </returns>        
            <exception cref="T:System.OverflowException">
               The resultant operation returns a value greater than the <see cref="F:Teradata.Client.Provider.TdIntervalMinuteToSecond.MaxValue"/> 
               or less than the <see cref="F:Teradata.Client.Provider.TdIntervalMinuteToSecond.MinValue"/>.
            </exception>
            <param name="left">A <strong>TdIntervalMinuteToSecond</strong>.</param>
            <param name="right">A <strong>TdIntervalMinuteToSecond</strong>.</param>
        </member>
        <member name="M:Teradata.Client.Provider.TdIntervalMinuteToSecond.op_Subtraction(Teradata.Client.Provider.TdIntervalMinuteToSecond,Teradata.Client.Provider.TdIntervalMinuteToSecond)">
            <summary>
               A <see cref="T:Teradata.Client.Provider.TdIntervalMinuteToSecond"/> is subtracted from another <strong>TdIntervalMinuteToSecond</strong>.
            </summary>
            <remarks>
            <para>
               If either parameter is <strong>Null</strong> a <see cref="F:Teradata.Client.Provider.TdIntervalMinuteToSecond.Null"/> will be returned.
            </para>
            <para>
               The returned <strong>TdIntervalMinuteToSecond</strong> will contain a precision
               set to the <see cref="F:Teradata.Client.Provider.TdIntervalMinuteToSecond.MaxPrecision"/>. The scale will always be set to the the scale 
               of the operand containing the greatest scale.
            </para>       
            </remarks>
            <returns>
               A new <strong>TdIntervalMinuteToSecond</strong> as the result of subtracting 
               <paramref name="right"/> from the <paramref name="left"/>.
            </returns>       
            <exception cref="T:System.OverflowException">
               The resultant operation returns a value greater than the <see cref="F:Teradata.Client.Provider.TdIntervalMinuteToSecond.MaxValue"/> 
               or less than the <see cref="F:Teradata.Client.Provider.TdIntervalMinuteToSecond.MinValue"/>.
            </exception>
            <param name="left">A <strong>TdIntervalMinuteToSecond</strong> to subtract from.</param>
            <param name="right">A <strong>TdIntervalMinuteToSecond</strong> to subtract.</param>
        </member>
        <member name="M:Teradata.Client.Provider.TdIntervalMinuteToSecond.op_Multiply(Teradata.Client.Provider.TdIntervalMinuteToSecond,System.Int32)">
            <summary>
               A <see cref="T:Teradata.Client.Provider.TdIntervalMinuteToSecond"/> is multiplied by an integer value.
            </summary>
            <remarks>
            <para>
               If <paramref name="interval"/> is <see cref="F:Teradata.Client.Provider.TdIntervalMinuteToSecond.Null"/> a <strong>Null</strong> will be returned.
            </para>
            <para>
               The returned <strong>TdIntervalMinuteToSecond</strong> will contain a precision 
               set to the <see cref="F:Teradata.Client.Provider.TdIntervalMinuteToSecond.MaxPrecision"/>. The scale will always 
               be set to the scale of the <paramref name="interval"/>.
            </para>
            </remarks>
            <returns>
               A new <strong>TdIntervalMinuteToSecond</strong> as the result of multiplying a 
               <strong>TdIntervalMinuteToSecond</strong> and an integer value.
            </returns>        
            <exception cref="T:System.OverflowException">
               The resultant operation returns a value greater than the <see cref="F:Teradata.Client.Provider.TdIntervalMinuteToSecond.MaxValue"/> 
               or less than the <see cref="F:Teradata.Client.Provider.TdIntervalMinuteToSecond.MinValue"/>.
            </exception>
            <param name="interval">A <strong>TdIntervalMinuteToSecond</strong>.</param>
            <param name="value">A multiplier.</param>
        </member>
        <member name="M:Teradata.Client.Provider.TdIntervalMinuteToSecond.op_Multiply(System.Int32,Teradata.Client.Provider.TdIntervalMinuteToSecond)">
            <summary>
               A <see cref="T:Teradata.Client.Provider.TdIntervalMinuteToSecond"/> is multiplied by an integer value.
            </summary>
            <remarks>
            <para>
               If <paramref name="interval"/> is <see cref="F:Teradata.Client.Provider.TdIntervalMinuteToSecond.Null"/> a <strong>Null</strong> will be returned.
            </para>
            <para>
               The returned <strong>TdIntervalMinuteToSecond</strong> will contain a precision 
               set to the <see cref="F:Teradata.Client.Provider.TdIntervalMinuteToSecond.MaxPrecision"/>. The scale will always 
               be set to the scale of the <paramref name="interval"/>.
            </para>
            </remarks>
            <returns>
               A new <strong>TdIntervalMinuteToSecond</strong> as the result of multiplying a 
               <strong>TdIntervalMinuteToSecond</strong> and an integer value.
            </returns>        
            <exception cref="T:System.OverflowException">
               The resultant operation returns a value greater than the <see cref="F:Teradata.Client.Provider.TdIntervalMinuteToSecond.MaxValue"/> 
               or less than the <see cref="F:Teradata.Client.Provider.TdIntervalMinuteToSecond.MinValue"/>.
            </exception>
            <param name="value">A multiplier.</param>
            <param name="interval">A <strong>TdIntervalMinuteToSecond</strong>.</param>
        </member>
        <member name="M:Teradata.Client.Provider.TdIntervalMinuteToSecond.op_Division(Teradata.Client.Provider.TdIntervalMinuteToSecond,System.Int32)">
            <summary>
               A <see cref="T:Teradata.Client.Provider.TdIntervalMinuteToSecond"/> is divided by an integer value.
            </summary>
            <remarks>
            <para>
               If <paramref name="interval"/> is <see cref="F:Teradata.Client.Provider.TdIntervalMinuteToSecond.Null"/> a <strong>Null</strong> will be returned.
            </para>
            <para>
               The returned <strong>TdIntervalMinuteToSecond</strong> will contain a precision 
               and scale which matches the precision and scale of the <strong>interval</strong> 
               parameter.
            </para>
            </remarks>
            <returns>
               A new <strong>TdIntervalMinuteToSecond</strong> as the result of dividing a 
               <strong>TdIntervalMinuteToSecond</strong> and an integer value.
            </returns>        
            <exception cref="T:System.DivideByZeroException">
               The <paramref name="value"/> divisor cannot be 0.
            </exception>
            <param name="interval">A <strong>TdIntervalMinuteToSecond</strong>.</param>
            <param name="value">A divisor.</param>
        </member>
        <member name="M:Teradata.Client.Provider.TdIntervalMinuteToSecond.Add(Teradata.Client.Provider.TdIntervalMinuteToSecond,Teradata.Client.Provider.TdIntervalMinuteToSecond)">
            <summary>
               Calculates the sum of two <see cref="T:Teradata.Client.Provider.TdIntervalMinuteToSecond"/> operands.
            </summary>
            <remarks>
            <para>
               If either parameter is <strong>Null</strong> a <see cref="F:Teradata.Client.Provider.TdIntervalMinuteToSecond.Null"/> will be returned.
            </para>
            <para>
               The returned <strong>TdIntervalMinuteToSecond</strong> will contain a precision
               set to the <see cref="F:Teradata.Client.Provider.TdIntervalMinuteToSecond.MaxPrecision"/>. The scale will always be set to
               the scale of the operand containing the greatest scale.
            </para>
            </remarks>
            <returns>
               A <strong>TdIntervalMinuteToSecond</strong> containing the sum.
            </returns>
            <exception cref="T:System.OverflowException">
               The resultant operation returns a value greater than the <see cref="F:Teradata.Client.Provider.TdIntervalMinuteToSecond.MaxValue"/> 
               or less than the <see cref="F:Teradata.Client.Provider.TdIntervalMinuteToSecond.MinValue"/>.
            </exception>
            <param name="left">A <strong>TdIntervalMinuteToSecond</strong>.</param>
            <param name="right">A <strong>TdIntervalMinuteToSecond</strong>.</param>
        </member>
        <member name="M:Teradata.Client.Provider.TdIntervalMinuteToSecond.Subtract(Teradata.Client.Provider.TdIntervalMinuteToSecond,Teradata.Client.Provider.TdIntervalMinuteToSecond)">
            <summary>
               A <see cref="T:Teradata.Client.Provider.TdIntervalMinuteToSecond"/> is subtracted from another <strong>TdIntervalMinuteToSecond</strong>.
            </summary>
            <remarks>
            <para>
               If either parameter is <strong>Null</strong> a <see cref="F:Teradata.Client.Provider.TdIntervalMinuteToSecond.Null"/> will be returned.
            </para>
            <para>
               The returned <strong>TdIntervalMinuteToSecond</strong> will contain a precision  
               set to the <see cref="F:Teradata.Client.Provider.TdIntervalMinuteToSecond.MaxPrecision"/>. The scale will always be set to the the scale 
               of the operand containing the greatest scale.
            </para>        
            </remarks>
            <returns>
               A new <strong>TdIntervalMinuteToSecond</strong> as the result of subtracting 
               <paramref name="right"/> from the <paramref name="left"/>.
            </returns>       
            <exception cref="T:System.OverflowException">
               The resultant operation returns a value greater than the <see cref="F:Teradata.Client.Provider.TdIntervalMinuteToSecond.MaxValue"/> 
               or less than the <see cref="F:Teradata.Client.Provider.TdIntervalMinuteToSecond.MinValue"/>.
            </exception>
            <param name="left">A <strong>TdIntervalMinuteToSecond</strong> to subtract from.</param>
            <param name="right">A <strong>TdIntervalMinuteToSecond</strong> to subtract.</param>
        </member>
        <member name="M:Teradata.Client.Provider.TdIntervalMinuteToSecond.Multiply(Teradata.Client.Provider.TdIntervalMinuteToSecond,System.Int32)">
            <summary>
               A <see cref="T:Teradata.Client.Provider.TdIntervalMinuteToSecond"/> is multiplied by an integer value.
            </summary>
            <remarks>
            <para>
               If <paramref name="interval"/> is <see cref="F:Teradata.Client.Provider.TdIntervalMinuteToSecond.Null"/> a <strong>Null</strong> will be returned.
            </para>
            <para>
               The returned <strong>TdIntervalMinuteToSecond</strong> will contain a precision 
               set to the <see cref="F:Teradata.Client.Provider.TdIntervalMinuteToSecond.MaxPrecision"/>. The scale will always 
               be set to the scale of the <paramref name="interval"/>.
            </para>
            </remarks>
            <returns>
               A new <strong>TdIntervalMinuteToSecond</strong> as the result of multiplying a 
               <strong>TdIntervalMinuteToSecond</strong> and an integer value.
            </returns>        
            <exception cref="T:System.OverflowException">
               The resultant operation returns a value greater than the <see cref="F:Teradata.Client.Provider.TdIntervalMinuteToSecond.MaxValue"/> 
               or less than the <see cref="F:Teradata.Client.Provider.TdIntervalMinuteToSecond.MinValue"/>.
            </exception>
            <param name="interval">A <strong>TdIntervalMinuteToSecond</strong>.</param>
            <param name="value">A multiplier.</param>
        </member>
        <member name="M:Teradata.Client.Provider.TdIntervalMinuteToSecond.Multiply(System.Int32,Teradata.Client.Provider.TdIntervalMinuteToSecond)">
            <summary>
               A <see cref="T:Teradata.Client.Provider.TdIntervalMinuteToSecond"/> is multiplied by an integer value.
            </summary>
            <remarks>
            <para>
               If <paramref name="interval"/> is <see cref="F:Teradata.Client.Provider.TdIntervalMinuteToSecond.Null"/> a <strong>Null</strong> will be returned.
            </para>
            <para>
               The returned <strong>TdIntervalMinuteToSecond</strong> will contain a precision 
               set to the <see cref="F:Teradata.Client.Provider.TdIntervalMinuteToSecond.MaxPrecision"/>. The scale will always 
               be set to the scale of the <paramref name="interval"/>.
            </para>
            </remarks>
            <returns>
               A new <strong>TdIntervalMinuteToSecond</strong> as the result of multiplying a 
               <strong>TdIntervalMinuteToSecond</strong> and an integer value.
            </returns>        
            <exception cref="T:System.OverflowException">
               The resultant operation returns a value greater than the <see cref="F:Teradata.Client.Provider.TdIntervalMinuteToSecond.MaxValue"/> 
               or less than the <see cref="F:Teradata.Client.Provider.TdIntervalMinuteToSecond.MinValue"/>.
            </exception>
            <param name="value">A multiplier.</param>
            <param name="interval">A <strong>TdIntervalMinuteToSecond</strong>.</param>
        </member>
        <member name="M:Teradata.Client.Provider.TdIntervalMinuteToSecond.Divide(Teradata.Client.Provider.TdIntervalMinuteToSecond,System.Int32)">
            <summary>
               A <see cref="T:Teradata.Client.Provider.TdIntervalMinuteToSecond"/> is divided by an integer value.
            </summary>
            <remarks>
            <para>
               If <paramref name="interval"/> is <see cref="F:Teradata.Client.Provider.TdIntervalMinuteToSecond.Null"/> a <strong>Null</strong> will be returned.
            </para>
            <para>
               The returned <strong>TdIntervalMinuteToSecond</strong> will contain a precision 
               and scale which matches the precision and scale of the <strong>interval</strong> 
               parameter.
            </para>
            </remarks>
            <returns>
               A new <strong>TdIntervalMinuteToSecond</strong> as the result of dividing a 
               <strong>TdIntervalMinuteToSecond</strong> and an integer value.
            </returns>        
            <exception cref="T:System.DivideByZeroException">
               The <paramref name="value"/> divisor cannot be 0.
            </exception>
            <param name="interval">A <strong>TdIntervalMinuteToSecond</strong>.</param>
            <param name="value">A divisor.</param>
        </member>
        <member name="M:Teradata.Client.Provider.TdIntervalMinuteToSecond.op_GreaterThan(Teradata.Client.Provider.TdIntervalMinuteToSecond,Teradata.Client.Provider.TdIntervalMinuteToSecond)">
            <summary>
               This operator determines whether the <paramref name="left"/> is greater than the <paramref name="right"/>.
            </summary>
            <returns>
            	<para>
            		<c>true</c> indicates the <paramref name="left"/> is greater than
                    the <paramref name="right"/>, <c>false</c> otherwise.
                </para>
            	<para>
            		<list type="table">
            			<listheader>
            				<term>Return Value</term>
            				<description>Description</description>
            			</listheader>
            			<item>
            				<term><c>true</c></term>
            				<description>
            					<paramref name="left"/> and
                                <paramref name="left"/> are not
                                <see cref="F:Teradata.Client.Provider.TdIntervalMinuteToSecond.Null"/> and
                                <paramref name="left"/> is greater than
                                <paramref name="right"/>.
            				</description>
            			</item>
            			<item>
            				<term><c>false</c></term>
            				<description>
            					<para>
                                    The <paramref name="left"/> is less than or equal
                                    to <paramref name="right"/>
                                </para>
            					<para>-or-</para>
            					<para>
                                    Either <paramref name="left"/> and / or
                                    <paramref name="right"/> is <strong>Null</strong>.
                                </para>
            				</description>
            			</item>
            		</list>
            	</para>
            </returns>
            <remarks>
            	<para>
                   Comparison operators always return <c>false</c> if one of the operands is
                   <strong>Null</strong>. Therefore you should not assume that the reverse condition
                   is <c>true</c>. For example you cannot assume that the <paramref name="left"/> 
                   is less than or equal to the <paramref name="right"/> if the "&gt;" operator returns 
                   <c>false</c>.
               </para>
            	<para>
                   The reverse condition is <c>true</c> when the <paramref name="left"/> and the 
                   <paramref name="right"/> are not <strong>Null</strong>.
               </para>
            </remarks>
            <param name="left">An instance of <see cref="T:Teradata.Client.Provider.TdIntervalMinuteToSecond"/>.</param>
            <param name="right">An instance of <strong>TdIntervalMinuteToSecond</strong>.</param>
        </member>
        <member name="M:Teradata.Client.Provider.TdIntervalMinuteToSecond.op_GreaterThanOrEqual(Teradata.Client.Provider.TdIntervalMinuteToSecond,Teradata.Client.Provider.TdIntervalMinuteToSecond)">
            <summary>
               This operator determines whether the <paramref name="left"/> is greater than or 
               equal to the <paramref name="right"/>.
            </summary>
            <returns>
            	<para>
            		<c>true</c> indicates the <paramref name="left"/> is greater than
                    or equal to the <paramref name="right"/>, <c>false</c> otherwise.
                </para>
            	<para>
            		<list type="table">
            			<listheader>
            				<term>Return Value</term>
            				<description>Description</description>
            			</listheader>
            			<item>
            				<term><c>true</c></term>
            				<description>
            					<para>
            						<paramref name="left"/> and
                                    <paramref name="right"/> are not
                                    <see cref="F:Teradata.Client.Provider.TdIntervalMinuteToSecond.Null"/> and
                                    <paramref name="left"/> is greater than or equal
                                    to <paramref name="right"/>
            					</para>
            					<para>-or-</para>
            					<para>
            						<paramref name="left"/> is <strong>Null</strong>
                                    and <paramref name="right"/> is
                                    <strong>Null</strong>.
            					</para>
            				</description>
            			</item>
            			<item>
            				<term><c>false</c></term>
            				<description>
            					<para>
                                    The <paramref name="left"/> is less than
                                    <paramref name="right"/>
            					</para>
            					<para>-or-</para>
            					<para>
                                    Either <paramref name="left"/> or
                                    <paramref name="right"/> is <strong>Null</strong>.
            					</para>
            				</description>
            			</item>
            		</list>
            	</para>
            </returns>
            <remarks>
            	<para>
                    Comparison operators always return <c>false</c> if one of the operands is
                    <strong>Null</strong>. Therefore you should not assume that the reverse
                    condition is <c>true</c>. For example you cannot assume that the
                    <paramref name="left"/> is less than the
                    <paramref name="right"/> if the "&gt;=" operator returns
                    <c>false</c>.
                </para>
            	<para>
                    The reverse condition is <c>true</c> when the
                    <paramref name="left"/> and the
                    <paramref name="right"/> are not <strong>Null</strong>.
                </para>
            </remarks>
            <param name="left">An instance of <see cref="T:Teradata.Client.Provider.TdIntervalMinuteToSecond"/>.</param>
            <param name="right">An instance of <strong>TdIntervalMinuteToSecond</strong>.</param>
        </member>
        <member name="M:Teradata.Client.Provider.TdIntervalMinuteToSecond.op_Inequality(Teradata.Client.Provider.TdIntervalMinuteToSecond,Teradata.Client.Provider.TdIntervalMinuteToSecond)">
            <summary>
               This operator determines whether the <paramref name="left"/> and the  
               <paramref name="right"/> are not equal.
            </summary>
            <returns>
            	<para>
                   A Boolean is returned that indicates whether the two operands are not equal.
                   <c>true</c> indicates the two operands are not equal, <c>false</c>
                   otherwise.
               </para>
            	<para>
            		<list type="table">
            			<listheader>
            				<term>Return Value</term>
            				<description>Description</description>
            			</listheader>
            			<item>
            				<term><c>true</c></term>
            				<description>
                                <para>
            					   <paramref name="left"/> is less than or greater than
                                   <paramref name="right"/>.
                                </para>
            					<para>-or-</para>
                               <para>
            					    <paramref name="left"/> is
                                   <see cref="F:Teradata.Client.Provider.TdIntervalMinuteToSecond.Null"/> and
                                   <paramref name="right"/> is not <strong>Null.</strong> 
                               </para>
            					<para>-or-</para>
            					<para>
                                   <paramref name="left"/> is not <strong>Null</strong>
                                   and <paramref name="right"/> is <strong>Null.</strong>
                                </para>
                            </description>
            			</item>
            			<item>
            				<term><c>false</c></term>
            				<description>
            					<para>
                                  <paramref name="left"/> is equal to
                                  <paramref name="right"/>.
                               </para>
            					<para>-or-</para>
            					<para>
                                   <paramref name="left"/> and
                                   <paramref name="right"/> are <strong>Null</strong>.
                                </para>
                            </description>
            			</item>
            		</list>
            	</para>
            </returns>
            <param name="left">An instance of <see cref="T:Teradata.Client.Provider.TdIntervalMinuteToSecond"/>.</param>
            <param name="right">An instance of <strong>TdIntervalMinuteToSecond</strong>.</param>
        </member>
        <member name="M:Teradata.Client.Provider.TdIntervalMinuteToSecond.op_Equality(Teradata.Client.Provider.TdIntervalMinuteToSecond,Teradata.Client.Provider.TdIntervalMinuteToSecond)">
            <summary>
               This operator determines whether the <paramref name="left"/> and the  
               <paramref name="right"/> are equal.
            </summary>
            <returns>
            	<para>
                   A Boolean is returned that indicates whether the two operands are equal.
                   <c>True</c> indicates the two operands are equal, <c>false</c> otherwise.
                </para>
            	<para>
            		<list type="table">
            			<listheader>
            				<term>Return Value</term>
            				<description>Description</description>
            			</listheader>
            			<item>
            				<term><c>true</c></term>
            				<description>
            					<para>
            					   <paramref name="left"/> is equal to
                                   <paramref name="right"/>
            					</para>
            					<para>-or-</para>
            					<para>
            					   <paramref name="left"/> is
                                   <see cref="F:Teradata.Client.Provider.TdIntervalMinuteToSecond.Null"/> and
                                   <paramref name="right"/> is <strong>Null</strong>.
            					</para>
            				</description>
            			</item>
            			<item>
            				<term><c>false</c></term>
            				<description>
            					<para>
            					   <paramref name="left"/> is not <strong>Null</strong>
                                   and <paramref name="right"/> is <strong>Null</strong>
            					</para>
            					<para>-or-</para>
            					<para>
            					   <paramref name="left"/> is <strong>Null</strong> and
                                   <paramref name="right"/> is not <strong>Null</strong>
            					</para>
            					<para>-or-</para>
            					<para>
                                   The <paramref name="left"/> is not equal to
                                   <paramref name="right"/>.
            					</para>
            				</description>
            			</item>
            		</list>
            	</para>
            </returns>
            <param name="left">An instance of <see cref="T:Teradata.Client.Provider.TdIntervalMinuteToSecond"/>.</param>
            <param name="right">An instance of <strong>TdIntervalMinuteToSecond</strong>.</param>
        </member>
        <member name="M:Teradata.Client.Provider.TdIntervalMinuteToSecond.op_LessThan(Teradata.Client.Provider.TdIntervalMinuteToSecond,Teradata.Client.Provider.TdIntervalMinuteToSecond)">
            <summary>
               This operator determines whether the <paramref name="left"/> is less than the <paramref name="right"/>.
            </summary>
            <returns>
            	<para>
            		<c>True</c> indicates the <paramref name="left"/> is less than
                    the <paramref name="right"/>, <c>false</c> otherwise.
                </para>
            	<para>
            		<list type="table">
            			<listheader>
            				<term>Return Value</term>
            				<description>Description</description>
            			</listheader>
            			<item>
            				<term><c>true</c></term>
            				<description>
            					<para>
            					    <paramref name="left"/> and
                                   <paramref name="right"/> are not
                                   <see cref="F:Teradata.Client.Provider.TdIntervalMinuteToSecond.Null"/> and
                                   <paramref name="left"/> is less than
                                   <paramref name="right"/>.
            					</para>
            				</description>
            			</item>
            			<item>
            				<term><c>false</c></term>
            				<description>
            					<para>
                                    The <paramref name="left"/> is greater than or
                                    equal to <paramref name="right"/>
            					</para>
            					<para>-or-</para>
            					<para>
                                    Either <paramref name="left"/> and / or
                                    <paramref name="right"/> is <strong>Null</strong>.
            					</para>
            				</description>
            			</item>
            		</list>
            	</para>
            </returns>
            <remarks>
            	<para>
                    Comparison operators always return <c>false</c> if one of the operands is
                    <strong>Null</strong>. Therefore you should not assume that the reverse
                    condition is <c>true</c>. For example you cannot assume that the
                    <paramref name="left"/> is greater than or equal to the
                    <paramref name="right"/> if the "&lt;" operator returns
                    <c>false</c>.
                </para>
            	<para>
                    The reverse condition is <c>true</c> when the
                    <paramref name="left"/> and the
                    <paramref name="right"/> are not <strong>Null</strong>.
                </para>
            </remarks>
            <param name="left">An instance of <see cref="T:Teradata.Client.Provider.TdIntervalMinuteToSecond"/>.</param>
            <param name="right">An instance of <strong>TdIntervalMinuteToSecond</strong>.</param>
        </member>
        <member name="M:Teradata.Client.Provider.TdIntervalMinuteToSecond.op_LessThanOrEqual(Teradata.Client.Provider.TdIntervalMinuteToSecond,Teradata.Client.Provider.TdIntervalMinuteToSecond)">
            <summary>
               This operator determines whether the <paramref name="left"/> is less than or 
               equal the <paramref name="right"/>.
            </summary>
            <returns>
            	<para>
            		<c>true</c> indicates the <paramref name="left"/> is less than or
                    equal to the <paramref name="right"/>, <c>false</c> otherwise.
                </para>
            	<para>
            		<list type="table">
            			<listheader>
            				<term>Return Value</term>
            				<description>Description</description>
            			</listheader>
            			<item>
            				<term><c>true</c></term>
            				<description>
            					<para>
            						<paramref name="left"/> and
                                    <paramref name="right"/> are not
                                    <see cref="F:Teradata.Client.Provider.TdIntervalMinuteToSecond.Null"/> and
                                    <paramref name="left"/> is less than or equal to
                                    <paramref name="right"/>
            					</para>
            					<para>-or-</para>
            					<para>
            						<paramref name="left"/> is <strong>Null</strong>
                                    and <paramref name="right"/> is
                                    <strong>Null</strong>.
            					</para>
            				</description>
            			</item>
            			<item>
            				<term><c>false</c></term>
            				<description>
            					<para>
                                    The <paramref name="left"/> is greater than
                                    <paramref name="right"/>
            					</para>
            					<para>-or-</para>
            					<para>
                                    Either <paramref name="left"/> or
                                    <paramref name="right"/> is <strong>Null</strong>.
            					</para>
            				</description>
            			</item>
            		</list>
            	</para>
            </returns>
            <remarks>
            	<para>
                    Comparison operators always return <c>false</c> if one of the operands is
                    <strong>Null</strong>. Therefore you should not assume that the reverse
                    condition is <c>true</c>. For example you cannot assume that the
                    <paramref name="left"/> is greater than the
                    <paramref name="right"/> if the "&lt;=" operator returns
                    <c>false</c>.
                </para>
            	<para>
                    The reverse condition is <c>true</c> when the
                    <paramref name="left"/> and the
                    <paramref name="right"/> are not <strong>Null</strong>.
                </para>
            </remarks>
            <param name="left">An instance of <see cref="T:Teradata.Client.Provider.TdIntervalMinuteToSecond"/>.</param>
            <param name="right">An instance of <strong>TdIntervalMinuteToSecond</strong>.</param>
        </member>
        <member name="M:Teradata.Client.Provider.TdIntervalMinuteToSecond.op_Explicit(System.TimeSpan)~Teradata.Client.Provider.TdIntervalMinuteToSecond">
            <summary>
               Converts a <see cref="T:System.TimeSpan"/> to a <see cref="T:Teradata.Client.Provider.TdIntervalMinuteToSecond"/>.
            </summary>
            <remarks>
               <strong>TimeSpan</strong> fractional seconds may be truncated during conversion into 
               a <strong>TdIntervalMinuteToSecond</strong> interval.  <strong>TimeSpan</strong>
               supports seven digits right of the decimal for fractional seconds, while
               <strong>TdIntervalMinuteToSecond</strong> supports six digits right of the decimal
               for fractional seconds (microseconds).
            </remarks>
            <exception cref="T:System.OverflowException">
               The resultant operation returns a value greater than the <see cref="F:Teradata.Client.Provider.TdIntervalMinuteToSecond.MaxValue"/> 
               or less than the <see cref="F:Teradata.Client.Provider.TdIntervalMinuteToSecond.MinValue"/>.
            </exception>
            <param name="value">A <strong>TimeSpan</strong>.</param>
            <returns>A <strong>TdIntervalMinuteToSecond</strong> interval.</returns>
        </member>
        <member name="M:Teradata.Client.Provider.TdIntervalMinuteToSecond.op_Explicit(Teradata.Client.Provider.TdIntervalMinuteToSecond)~System.TimeSpan">
            <summary>
               Converts a <see cref="T:Teradata.Client.Provider.TdIntervalMinuteToSecond"/> to a <see cref="T:System.TimeSpan"/>.
            </summary>
            <remarks>
               The <strong>TimeSpan</strong> time components are represented in 24 hour format.
            </remarks>
            <exception cref="T:System.ArgumentNullException">
               The <strong>TdIntervalMinuteToSecond</strong> value is <see cref="F:Teradata.Client.Provider.TdIntervalMinuteToSecond.Null"/>.
            </exception>
            <param name="value">A <strong>TdIntervalMinuteToSecond</strong> interval.</param>
            <returns>A <strong>TimeSpan</strong>.</returns>
        </member>
        <member name="M:Teradata.Client.Provider.TdIntervalMinuteToSecond.op_Implicit(Teradata.Client.Provider.TdIntervalMinuteToSecond)~Teradata.Client.Provider.TdIntervalHourToSecond">
            <summary>
               Converts a <see cref="T:Teradata.Client.Provider.TdIntervalMinuteToSecond"/> to <see cref="T:Teradata.Client.Provider.TdIntervalHourToSecond"/>.
            </summary>
            <remarks>
            <para>
               The <see cref="P:Teradata.Client.Provider.TdIntervalHourToSecond.Precision"/> is set to 1 (value = 0) and the 
               <see cref="P:Teradata.Client.Provider.TdIntervalHourToSecond.Scale"/> is calculated from the number of decimal 
               places required to represent the fractional seconds.
            </para>
            </remarks>
            <param name="value">A <strong>TdIntervalMinuteToSecond</strong> interval.</param>
            <returns>A <strong>TdIntervalHourToSecond</strong>.</returns>
        </member>
        <member name="M:Teradata.Client.Provider.TdIntervalMinuteToSecond.op_Implicit(Teradata.Client.Provider.TdIntervalMinuteToSecond)~Teradata.Client.Provider.TdIntervalDayToSecond">
            <summary>
               Converts a <see cref="T:Teradata.Client.Provider.TdIntervalMinuteToSecond"/> to <see cref="T:Teradata.Client.Provider.TdIntervalDayToSecond"/>.
            </summary>
            <returns>
               A <strong>TdIntervalDayToSecond</strong>.
            </returns>
            <remarks>
            <para>
               The <see cref="P:Teradata.Client.Provider.TdIntervalDayToSecond.Precision"/> is set 1 (value = 0) since 
               <paramref name="value"/> does not contain the days interval component and the 
               <see cref="P:Teradata.Client.Provider.TdIntervalDayToSecond.Scale"/> is set to zero, since the 
               <strong>value</strong> does not contain the seconds interval component.
            </para>
            </remarks>
            <param name="value">A <strong>TdIntervalMinuteToSecond</strong> interval.</param>
        </member>
        <member name="P:Teradata.Client.Provider.TdIntervalMinuteToSecond.IsNull">
            <summary>
               Indicates whether this <see cref="T:Teradata.Client.Provider.TdIntervalMinuteToSecond"/> instance is <see cref="F:Teradata.Client.Provider.TdIntervalMinuteToSecond.Null"/>. 
            </summary>
            <value>
               <c>true</c> if this <strong>TdIntervalMinuteToSecond</strong> is <strong>Null</strong>; 
               <c>false</c> otherwise.
            </value>
        </member>
        <member name="P:Teradata.Client.Provider.TdIntervalMinuteToSecond.Minutes">
            <summary>
               The number of interval minutes is returned. The return value ranges from -9999 to 9999.
            </summary>
            <remarks>
            <para>
               A <see cref="T:Teradata.Client.Provider.TdIntervalMinuteToSecond"/> is represented as [-][minutes]:ss.ffffff.  The 
               minus sign is optional and represents a negative interval of time.  The minutes component 
               represents minutes, the ss seconds and the ffffff fractional 
               seconds.  The value of the Minutes property is the minutes component.
            </para>
            <para>
               A negative interval will return all properties (minutes, seconds and fractional 
               seconds) as negative values.
            </para>
            </remarks>
            <exception cref="T:Teradata.Client.Provider.TdException">
               This property is not available when this instance is <see cref="F:Teradata.Client.Provider.TdIntervalMinuteToSecond.Null"/>.
            </exception>
        </member>
        <member name="P:Teradata.Client.Provider.TdIntervalMinuteToSecond.Seconds">
            <summary>
               The number of interval seconds is returned. The return value ranges from -59 to 59.
            </summary>
            <remarks>
            <para>
               A <see cref="T:Teradata.Client.Provider.TdIntervalMinuteToSecond"/> is represented as [-][minutes]:ss.ffffff.  The 
               minus sign is optional and represents a negative interval of time.  The minutes component 
               represents minutes, the ss seconds and the ffffff fractional 
               seconds.  The value of the Seconds property is the ss component.
            </para>
            <para>
               A negative interval will return all properties (minutes, seconds and fractional 
               seconds) as negative values.
            </para>
            </remarks>
            <exception cref="T:Teradata.Client.Provider.TdException">
               This property is not available when this instance is <see cref="F:Teradata.Client.Provider.TdIntervalMinuteToSecond.Null"/>.
            </exception>
        </member>
        <member name="P:Teradata.Client.Provider.TdIntervalMinuteToSecond.Microseconds">
            <summary>
               The number of interval microseconds is returned. The return value ranges from
               -999999 to 999999.
            </summary>
            <remarks>
            <para>
               A <see cref="T:Teradata.Client.Provider.TdIntervalMinuteToSecond"/> is represented as [-][minutes]:ss.ffffff.  The 
               minus sign is optional and represents a negative interval of time.  The minutes component 
               represents minutes, the ss seconds and the ffffff fractional seconds. The value of the
               Microseconds property is the ffffff component. The .ffffff component is optional.
            </para>
            <para>
               A negative interval will return all properties (minutes, seconds and fractional 
               seconds) as negative values.
            </para>
            </remarks>
            <exception cref="T:Teradata.Client.Provider.TdException">
               This property is not available when this instance is <see cref="F:Teradata.Client.Provider.TdIntervalMinuteToSecond.Null"/>.
            </exception>
        </member>
        <member name="P:Teradata.Client.Provider.TdIntervalMinuteToSecond.Precision">
            <summary>
               The number of significant digits in the minute is returned. The return value
               ranges from 1 to 4.
            </summary>
            <exception cref="T:Teradata.Client.Provider.TdException">
               This property is not available when this instance is <see cref="F:Teradata.Client.Provider.TdIntervalMinuteToSecond.Null"/>.
            </exception>
        </member>
        <member name="P:Teradata.Client.Provider.TdIntervalMinuteToSecond.Scale">
            <summary>
               The number of decimal places for the second is returned. The return value ranges 
               from 0 to 6.
            </summary>
            <exception cref="T:Teradata.Client.Provider.TdException">
               This property is not available when this instance is <see cref="F:Teradata.Client.Provider.TdIntervalMinuteToSecond.Null"/>.
            </exception>
        </member>
        <member name="P:Teradata.Client.Provider.TdIntervalMinuteToSecond.Value">
            <summary>
               Gets the .NET data type representation of <see cref="T:Teradata.Client.Provider.TdIntervalMinuteToSecond"/> 
               as a <see cref="T:System.TimeSpan"/>.
            </summary>
            <remarks>
               This property in concept parallels <see cref="M:Teradata.Client.Provider.TdDataReader.GetValue(System.Int32)"/> and
               <see cref="P:Teradata.Client.Provider.TdParameter.Value"/>. That is they all represent the .NET Framework 
               Class Library(FCL) primitive data type that correspond to the Teradata 
               Interval Minute To Second data type.
            </remarks>
            <value>The interval represented as a <strong>TimeSpan</strong> is returned.</value>
            <exception cref="T:Teradata.Client.Provider.TdException">
               This property is not available when this instance is <see cref="F:Teradata.Client.Provider.TdIntervalMinuteToSecond.Null"/>.
            </exception>
        </member>
        <member name="P:Teradata.Client.Provider.TdIntervalMinuteToSecond.InternalTimespan">
            <summary>
               Return the internal TimeSpan representing the interval.
            </summary>
            <remarks>
               The internal timespan is used in calculating arithmetic operations and in storing
               day-time intervals.
            </remarks>
        </member>
        <member name="P:Teradata.Client.Provider.TdIntervalMinuteToSecond.ObjectId">
            <summary>
               Gets the instance object identifier.
            </summary>
        </member>
        <member name="P:Teradata.Client.Provider.TdIntervalMinuteToSecond.DecimalFractionalSecond">
            <summary>
               The decimal fractional seconds are returned. The return value ranges from
               -999999 to 999999.
            </summary>
            <remarks>
            <para>
               A <see cref="T:Teradata.Client.Provider.TdIntervalMinuteToSecond"/> is represented as 
               [-][minutes]:[ss].[ffffff]. The minus sign is optional 
               and represents a negative interval of time. The minutes represents 
               minutes, the ss seconds and the ffffff fractional seconds.  The value of the Microseconds property
               is the ffffff component.
            </para>
            <para>
               A negative interval will return all properties (minutes, seconds and fractional 
               seconds) as negative values.
            </para>
            <para>This property is used in ToString to display the interval as a decimal fractional second.</para>
            </remarks>
        </member>
        <member name="P:Teradata.Client.Provider.TdIntervalMinuteToSecond.IsNegative">
            <summary>
               Indicate if the interval is negative.
            </summary>
            <remarks>
               Timespan.ticks will indicate a negative interval.  Other values (days, hours, minutes, 
                milliseconds) may be 0 and the interval may still be negative.
            </remarks>
        </member>
        <member name="P:Teradata.Client.Provider.TdIntervalMinuteToSecond.InternalAccessor">
            <summary>
               Accessor to the internal storage for this interval.
            </summary>
        </member>
        <member name="T:Teradata.Client.Provider.TdIntervalMonth">
            <summary>
            	<see cref="T:Teradata.Client.Provider.TdIntervalMonth"/> represents an interval of time defining a duration in months. The 
                month precision is configurable from 1 - 4 significant digits.
             </summary>
            <remarks>
            	<para>
                    <strong>TdIntervalMonth</strong> is a .NET Data Provider for Teradata
                    specific type, designed to support a Teradata Database Interval Month data
                    type.
                </para>
            	<para>
                    The <strong>TdIntervalMonth</strong> supports the Teradata Interval Month 
                    (precision) data type where precision indicates the number of digits in the
                    months (from 1 - 4).
                </para>
                <para>
                    The interval value must be specified in the following format :
                </para>
                <para>[sign][months]</para>
            	<para>
            		<list type="table">
            			<listheader>
            				<term>Format Element</term>
            				<description>Description</description>
            			</listheader>
            			<item>
            				<term>sign</term>
            				<description>Optional - or space character.</description>
            			</item>
            			<item>
            				<term>months</term>
            				<description>Required number of months (one to four digits in length).</description>
            			</item>
            		</list>
            	</para>
            	<para>
                    The .Net Framework does not have a system type that directly corresponds to
                    the Teradata Database Interval Month data type. The .NET Data Provider for 
                    Teradata Version 13.0 version and prior versions map Interval Month to System.String. 
                    With version 13.1 of the provider, <strong>TdIntervalMonth</strong> is available to 
                    retrieve and manipulate data of type Interval Month.
                </para>
            	<para>The range of values for each TdInterval precision is as follows:</para>
            	<para>
            		<table class="xmldoctable" cellspacing="0">
            			<tbody>
            				<tr>
            					<th>Type and Precision</th>
            					<th>Minimum</th>
            					<th>Maximum</th>
            				</tr>
            				<tr>
            					<td class="xmldoctable" height="19">TdIntervalMonth(1)</td>
            					<td class="xmldoctable" height="19">
            						<para>-'9'</para>
            					</td>
            					<td height="19">'9'</td>
            				</tr>
            				<tr>
            					<td class="xmldoctable">TdIntervalMonth(2)</td>
            					<td class="xmldoctable">
            						<para>-'99'</para>
            					</td>
            					<td>'99'</td>
            				</tr>
            				<tr>
            					<td class="xmldoctable">TdIntervalMonth(3)</td>
            					<td class="xmldoctable">
            						<para>-'999'</para>
            					</td>
            					<td>'999'</td>
            				</tr>
            				<tr>
            					<td class="xmldoctable">TdIntervalMonth(4)</td>
            					<td class="xmldoctable">
            						<para>-'9999'</para>
            					</td>
            					<td>'9999'</td>
            				</tr>
            			</tbody>
            		</table>
            	</para>
                <para>
                    <strong>TdIntervalMonth</strong> also supports 
                    <see cref="F:Teradata.Client.Provider.TdIntervalMonth.Null"/>. This is a very important feature.
                    An application is no longer required to call
                    <see cref="M:Teradata.Client.Provider.TdDataReader.IsDBNull(System.Int32)"/> before invoking the corresponding 
                    TdDataReader "Get" method.  This will improve overall performance.
                </para>
                <para>
                    A <strong>TdIntervalMonth</strong> structure allows arithmetic,
                    comparision and conversion operations to be performed. 
                </para>
            	<para>
                    A <strong>TdIntervalMonth</strong> may also be specified as an in, out, 
                    or in/out parameter to a stored procedure. In order to maintain backward  
                    compatibility with previous versions of the provider (release 13.0 and prior), 
                    a Connection String Attribute
                    <see cref="P:Teradata.Client.Provider.TdConnectionStringBuilder.EnableTdIntervals">EnableTdIntervals</see>
                    has been added. When the <strong>EnableTdIntervals</strong> attribute
                    is <c>true</c>, <see cref="P:Teradata.Client.Provider.TdParameter.ProviderSpecificValue"/> will
                    return the data as the provider specific type of <strong>TdIntervalMonth</strong>.
                    When <strong>EnableTdIntervals</strong> is <c>false</c>, 
                    <strong>TdParameter.ProviderSpecificValue</strong> will return the data as a
                    .NET Framework Library data type of <see cref="T:System.String"/>. 
                </para>
            	<para>
                    The <see cref="P:Teradata.Client.Provider.TdParameter.Value"/> will return the .NET Framework Library
                    data type of <strong>System.String</strong> whether 
                    <strong>EnableTdIntervals</strong> is <c>true</c> or <c>false</c>.
                </para>
            	 <para>For more information on the Teradata Interval Month data type please see the
                    Teradata Database SQL Reference - 'Data Types and Literals'.
                </para>
            </remarks>
            <example>
            	<para>
                   The following example shows how to retrieve a <strong>TdIntervalMonth</strong>,  
                   modify the interval, and then update the table.
               </para>
            	<code>
             Public void TimeExample(TdCommand cmd, String model)
             {
                cmd.Parameters.Clear();
                
                cmd.CommandText = "SELECT StartDate, LeaseLen FROM AutoLeases " +
                                  "WHERE Model = ?";
             
                cmd.CommandType = CommandType.Text;
             
                cmd.Parameters.Add(null, TdType.VarChar, 10,
                     ParameterDirection.Input, true, 0, 0, null,    
                     DataRowVersion.Default, model);
             
                Int32 row = 0;
                TdDate [] startDate;
                TdIntervalYearToMonth [] leaseLen;
             
                using (TdDataReader dr = cmd.ExecuteReader())
                { 
                   TdDate [] startDate = new TdDate[dr.RecordsReturned];
                   TdIntervalMonth [] leaseLen = new TdIntervalMonth [dr.RecordsReturned];
             
                   // Specifying an interval of 2 years with a precision of 2
                   TdIntervalMonth twoExtraYears = new TdIntervalMonth(24, 2);
                
                   while (dr.Read())
                   {
                      // Retrieving the dates
                      startDate[row] = dr.GetTdDate(0);
                      leaseLen[row] = dr.GetTdIntervalMonth(1);
             
                      // Adding 2 years to the StartDate
                      startDate[row] = startDate[row] + twoExtraYears;
             
                      // Adding 2 years to the lease length;
                      leaseLen[row] = leaseLen[row] + twoExtraYears;
             
                      row++;
                   } 
                }
                cmd.Parameters.Clear();
             
                cmd.CommandText = "UPDATE AutoLeases " +
                                  "SET StartDate = ?, LeaseLen = ? " +
                                  "WHERE Model = ?";
             
                cmd.Parameters.Add(null, TdType.Date, 0,
                      ParameterDirection.Input, true, 0, 0, null,    
                      DataRowVersion.Default, null);
             
                cmd.Parameters.Add(null, TdType.IntervalMonth, 0,
                      ParameterDirection.Input, true, 0, 0, null,    
                      DataRowVersion.Default, null);
             
                cmd.Parameters.Add(null, TdType.VarChar, 9,
                      ParameterDirection.Input, true, 0, 0, null,    
                      DataRowVersion.Default, model);
             
                row--;
                while(row &gt;= 0)
                {
                   cmd.Parameters[0].Value = startDate[row];
                   cmd.Parameters[1].Value = leaseLen[row];
             
                   cmd.ExecuteNonQuery();
                   row--;
                }
             }
             
             </code>
            </example>
            <seealso cref="P:Teradata.Client.Provider.TdConnectionStringBuilder.EnableTdIntervals"/> 
            <seealso cref="!:IntervalConnectionString.html">Interval Connection String Attribute</seealso>
            <seealso cref="!:EnableProviderSpecificTypes.html">Enabling Provider Specific Types</seealso>
            <seealso cref="!:IntervalTypeOverview.html">Provider Specific Type:  Interval Type Overview</seealso>
        </member>
        <member name="F:Teradata.Client.Provider.TdIntervalMonth.MaxPrecision">
            <summary>
               A constant representing the maximum number of significant digits in the 
               <see cref="P:Teradata.Client.Provider.TdIntervalMonth.Months"/> interval component.
            </summary>
            <remarks>
               The value of this constant is 4.
            </remarks>
        </member>
        <member name="F:Teradata.Client.Provider.TdIntervalMonth.MinPrecision">
            <summary>
               A constant representing the minimum number of significant digits in the 
               <see cref="P:Teradata.Client.Provider.TdIntervalMonth.Months"/> interval component.
            </summary>
            <remarks>
               The value of this constant is 1.
            </remarks>
        </member>
        <member name="F:Teradata.Client.Provider.TdIntervalMonth.MinValue">
            <summary>
               The smallest possible value for the <see cref="T:Teradata.Client.Provider.TdIntervalMonth"/> interval type.
            </summary>
            <remarks>
               The smallest value is -'9999'.
            </remarks>
        </member>
        <member name="F:Teradata.Client.Provider.TdIntervalMonth.MaxValue">
            <summary>
               The largest possible value for the <see cref="T:Teradata.Client.Provider.TdIntervalMonth"/> interval type.
            </summary>
            <remarks>
               The largest value is '9999'.
            </remarks>
        </member>
        <member name="F:Teradata.Client.Provider.TdIntervalMonth.Null">
            <summary>
               Gets a Null <see cref="T:Teradata.Client.Provider.TdIntervalMonth"/> instance.
            </summary>
            <value>
               Returns a <strong>TdIntervalMonth</strong> instance that represents a 
               <strong>Null</strong> value.
            </value>
            <remarks>
               Conceptually it is the constructor for <strong>Null</strong> instances of 
               <strong>TdIntervalMonth</strong>.
            </remarks>
            <example>
            This example shows how to send a <strong>Null</strong> value to a Teradata database.
            <code>
            TdParameter col1 = new TdParameter();
            col1.TdType = TdType.TdIntervalMonth;
            col1.Value = TdIntervalMonth.Null;
            </code>
            </example>
        </member>
        <member name="F:Teradata.Client.Provider.TdIntervalMonth.Zero">
            <summary>
               Gets an <see cref="T:Teradata.Client.Provider.TdIntervalMonth"/> instance that contains all zero elements
               for each interval field.
            </summary>
            <remarks>
               A Zero <Strong>TdIntervalMonth</Strong> may be used to determine whether
               other instances of intervals represent postive, negative or non-zero intervals.
            </remarks>
            <example>
            This example shows how to determine if an interval is negative.
            <code>
            TdIntervalDayTo Second monthInterval = new TdIntervalMonth(-11);
            if (monthInterval &lt; TdIntervalMonth.Zero)
            {
               Console.WriteLine("The Interval is negative");
            }
            // The output of the console is "The interval is negative"
            </code>
            </example>
        </member>
        <member name="M:Teradata.Client.Provider.TdIntervalMonth.#ctor(System.Int32)">
            <summary>
               An instance of <see cref="T:Teradata.Client.Provider.TdIntervalMonth"/> is created from a month date   
               component specified as an integer. 
            </summary>
            <remarks>
            <para>
               The number of months is evaluated against <see cref="F:Teradata.Client.Provider.TdIntervalMonth.MinValue"/> and
               and <see cref="F:Teradata.Client.Provider.TdIntervalMonth.MaxValue"/> to determine if the values are exceeded.  The 
               <see cref="P:Teradata.Client.Provider.TdIntervalMonth.Precision"/> is then calculated from the number of digits contained 
               within the interval month component.
            </para>
            <para>
               For example, a month value of 99 results in a precision of 2 representing 2
               significant digits in the month.
            </para>
            <para>
               A year value of 10020 exceeds the the maximum value of '9999-11'
               generating an exception.
            </para>
            <para>
               Negative constructor parameters may be supplied to represent negative durations of duration.
            </para>
            </remarks>
            <exception cref="T:System.OverflowException" caption="OverflowException">
               The <strong>months</strong> parameter specifies a <strong>TdIntervalMonth</strong> 
               value less than <see cref="F:Teradata.Client.Provider.TdIntervalMonth.MinValue"/> or greater than <see cref="F:Teradata.Client.Provider.TdIntervalMonth.MaxValue"/>.
            </exception>
            <param name="months">Number of months.</param>
        </member>
        <member name="M:Teradata.Client.Provider.TdIntervalMonth.#ctor(System.Int32,System.Byte)">
            <summary>
               An instance of <see cref="T:Teradata.Client.Provider.TdIntervalMonth"/> is created from a month date   
               component specified as an integer with precision specified as a byte. 
            </summary>
            <remarks>
            <para>
               The allowable values of precision are from 1 - 4.
            </para>
            <para>
               The number of months is evaluated against <see cref="F:Teradata.Client.Provider.TdIntervalMonth.MinValue"/> and
               and <see cref="F:Teradata.Client.Provider.TdIntervalMonth.MaxValue"/> to determine if the values are exceeded.  If the values 
               are not exceeded but the resulting months component exceeds the supplied 
               <paramref name="precision"/> value, an exception is generated.
            </para>
            <para>
               For example, a month value of 99 and a precision of 1 will generate an exception.
               The <see cref="P:Teradata.Client.Provider.TdIntervalMonth.Months"/> interval component cannot be represented
               in 1 significant digit, thus resulting in an invalid 
               <strong>TdIntervalMonth</strong>.
            </para>
            <para>
               Negative <paramref name="months"/> may be supplied to represent negative duration of time.
            </para>
            </remarks>
            <exception cref="T:System.ArgumentOutOfRangeException" caption="ArgumentOutOfRangeException">
               The <strong>precision</strong> parameter is less than the <see cref="F:Teradata.Client.Provider.TdIntervalMonth.MinPrecision"/> 
               or greater than the <see cref="F:Teradata.Client.Provider.TdIntervalMonth.MaxPrecision"/> range of values.
            </exception>
            <exception cref="T:System.OverflowException" caption="OverflowException">
               The <strong>months</strong> parameter specifies a <strong>TdIntervalMonth</strong> 
               value less than <see cref="F:Teradata.Client.Provider.TdIntervalMonth.MinValue"/> or greater than <see cref="F:Teradata.Client.Provider.TdIntervalMonth.MaxValue"/>.
            </exception>
            <exception cref="T:System.ArgumentException" caption="ArgumentException">
               The <strong>precision</strong> parameter is not large enough to represent the number 
               of months.
            </exception>
            <overloads>
               Initializes a new instance of <strong>TdIntervalMonth</strong>.
            </overloads>
            <param name="months">Number of months.</param>
            <param name="precision">Number of significant digits of the month.</param>
        </member>
        <member name="M:Teradata.Client.Provider.TdIntervalMonth.CompareTo(Teradata.Client.Provider.TdIntervalMonth)">
            <summary>
               Compares the current instance with another <see cref="T:Teradata.Client.Provider.TdIntervalMonth"/>.
            </summary>
            <returns>
               The result of the comparison is returned as a signed integer.
            </returns>
            <remarks>
            	<para>
                    The integer returned when this instance is compared to
                    <paramref name="other"/> indicates the following:
                </para>
            	<para>
            		<list type="table">
            			<listheader>
            				<term>Return Value</term>
            				<description>Meaning</description>
            			</listheader>
            			<item>
            				<term>Less than Zero</term>
            				<description>
            					<para>
                                    This instance is less than <paramref name="other"/>
                                </para>
            					<para>-or-</para>
            					<para>
                                    This instance is <see cref="F:Teradata.Client.Provider.TdIntervalMonth.Null"/> and
                                    <paramref name="other"/> is non-null.
                                </para>
            				</description>
            			</item>
            			<item>
            				<term>Zero</term>
            				<description>
            					<para>
                                    This instance is equal to <paramref name="other"/>
                                </para>
            					<para>-or-</para>
            					<para>This instance is <strong>Null</strong> and value is
                                <strong>Null</strong>.</para>
            				</description>
            			</item>
            			<item>
            				<term>Greater than Zero</term>
            				<description>
            					<para>
                                    This instance is greater than
                                    <paramref name="other"/>
                                </para>
            					<para>-or-</para>
            					<para>
            						<paramref name="other"/> is <strong>Null</strong> and
                                    this instance is non-null.
                                </para>
            				</description>
            			</item>
            		</list>
            	</para>
            </remarks>
            <param name="other">The <strong>TdIntervalMonth</strong> to compare.</param>
        </member>
        <member name="M:Teradata.Client.Provider.TdIntervalMonth.CompareTo(System.Object)">
            <summary>
               Compares this instance to the specified <see cref="T:Teradata.Client.Provider.TdIntervalMonth"/> parameter 
               <paramref name="obj"/>. 
            </summary>
            <returns>
               The result of the comparison is returned as a signed integer.
            </returns>
            <remarks>
            	<para>
                    The integer returned when this instance is compared to
                    <paramref name="obj"/> indicates the following:
                </para>
            	<para>
            		<list type="table">
            			<listheader>
            				<term>Return Value</term>
            				<description>Meaning</description>
            			</listheader>
            			<item>
            				<term>Less than Zero</term>
            				<description>
            					<para>
                                    This instance is less than <paramref name="obj"/>.
                                </para>
            					<para>-or-</para>
            					<para>
                                    This instance is <see cref="F:Teradata.Client.Provider.TdIntervalMonth.Null"/> and
                                    <paramref name="obj"/> is non-null.
                                </para>
            				</description>
            			</item>
            			<item>
            				<term>Zero</term>
            				<description>
            					<para>
                                    This instance is equal to <paramref name="obj"/>.
                                </para>
            					<para>-or-</para>
            					<para>
                                    This instance is <strong>Null</strong> and
                                    <paramref name="obj"/> is <strong>Null</strong>.
                                </para>
            				</description>
            			</item>
            			<item>
            				<term>Greater than Zero</term>
            				<description>
            					<para>
                                    This instance is greater than
                                    <paramref name="obj"/>.
                                </para>
            					<para>-or-</para>
            					<para>
            						<paramref name="obj"/> is <strong>Null</strong> and
                                    this instance is non-null.
                                </para>
            					<para>-or-</para>
            					<para>
            						<paramref name="obj"/> is a <c>null</c> reference.
                                </para>
            				</description>
            			</item>
            		</list>
            	</para>
            	<para>
            		<paramref name="obj"/> must be an instance of <strong>TdIntervalMonth</strong> type
                    or <c>null</c> reference.
                </para>
            </remarks>
            <exception cref="T:System.ArgumentException"><paramref name="obj"/> is not of type <strong>TdIntervalMonth</strong></exception>
            <seealso cref="M:Teradata.Client.Provider.TdIntervalMonth.CompareTo(Teradata.Client.Provider.TdIntervalMonth)"/>
            <overloads>
               Compares this instance to the supplied <strong>TdIntervalMonth</strong> 
               and returns whether this instance is less than, equal or greater than the supplied 
               <strong>TdIntervalMonth</strong>.
            </overloads>
            <param name="obj">A <strong>TdIntervalMonth</strong> object to compare.</param>
        </member>
        <member name="M:Teradata.Client.Provider.TdIntervalMonth.Equals(Teradata.Client.Provider.TdIntervalMonth)">
            <summary>
               Compares this instance and another <see cref="T:Teradata.Client.Provider.TdIntervalMonth"/> to determine 
               whether they are equal. 
            </summary>
            <returns><c>true</c> if the two <strong>TdIntervalMonth</strong> objects are equal, 
               <c>false</c> otherwise.
            </returns>
            <remarks>
            	<para>
                    The return value is <c>true</c> if the instance is equal to the
                    <paramref name="other"/>, <c>false</c> otherwise.
                </para>
            	<para>
            		<list type="table">
            			<listheader>
            				<term>Return Value</term>
            				<description>Description</description>
            			</listheader>
            			<item>
            				<term>
            					<c>true</c>
            				</term>
            				<description>
            					<para>
                                    This instance and <paramref name="other"/> are
                                    <see cref="F:Teradata.Client.Provider.TdIntervalMonth.Null"/>
                                </para>
            					<para>-or-</para>
            					<para>
                                    This instance is equal to <paramref name="other"/>.
                                </para>
            				</description>
            			</item>
            			<item>
            				<term>
            					<c>false</c>
            				</term>
            				<description>
            					<para>
                                    This instance is <strong>Null</strong> and
                                    <paramref name="other"/> is not <strong>Null</strong>
            					</para>
            					<para>-or-</para>
            					<para>
                                    This instance is not <strong>Null</strong> and
                                    <paramref name="other"/> is <strong>Null</strong>
                                </para>
            					<para>-or-</para>
            					<para>
                                    This instance is not equal to
                                    <paramref name="other"/>.
                                </para>
            				</description>
            			</item>
            		</list>
            	</para>
            </remarks>
            <overloads>
               Returns a value indicating whether two instances of 
               <strong>TdIntervalMonth</strong> are equal.
            </overloads>
            <param name="other"><strong>TdIntervalMonth</strong> that will be compared to this instance 
            of <strong>TdIntervalMonth</strong>.</param>
        </member>
        <member name="M:Teradata.Client.Provider.TdIntervalMonth.Equals(Teradata.Client.Provider.TdIntervalMonth,Teradata.Client.Provider.TdIntervalMonth)">
            <summary>
               Compares two <see cref="T:Teradata.Client.Provider.TdIntervalMonth"/> instances to determine whether they are equal.
            </summary>
            <returns>
               <c>true</c> if the two <strong>TdIntervalMonth</strong> instances are equal, 
               <c>false</c> otherwise.
            </returns>
            <remarks>
            	<para>
                    The return value is <c>true</c> if the <paramref name="left"/> is
                    equal to the <paramref name="right"/>, <c>false</c> otherwise.
                </para>
            	<para>
            		<list type="table">
            			<listheader>
            				<term>Return Value</term>
            				<description>Description</description>
            			</listheader>
            			<item>
            				<term>
            					<c>true</c> 
            				</term>
            				<description>
            					<para>
            						<paramref name="left"/> is equal to
                                    <paramref name="right"/>
                                </para>
            					<para>-or-</para>
            					<para>
            						<paramref name="left"/> and
                                    <paramref name="right"/> are
                                    <see cref="F:Teradata.Client.Provider.TdIntervalMonth.Null"/>.
                                </para>
            				</description>
            			</item>
            			<item>
            				<term>
            					<c>false</c>
            				</term>
            				<description>
            					<para>
            						<paramref name="left"/> is not equal to
                                    <paramref name="right"/>
                                </para>
            					<para>-or-</para>
            					<para>
            						<paramref name="left"/> is not <strong>Null</strong>
                                    and <paramref name="right"/> is
                                    <strong>Null</strong>
                                </para>
            					<para>-or-</para>
            					<para>
            						<paramref name="left"/> is <strong>Null</strong> and
                                    <paramref name="right"/> is not <strong>Null</strong>.
            					</para>
            				</description>
            			</item>
            		</list>
            	</para>
            </remarks>
            <example>
                The following code example uses various comparison methods and operators.
                <code lang="CS">
            // create a TdIntervalMonth containing 5 months and a precision of 4 significant digits
            TdIntervalMonth firstInterval = new TdIntervalMonth(5, 4);
            // create a TdIntervalMonth containing 20 months and a precision of 4 significant digits
            TdIntervalMonth secondInterval = new TdIntervalMonth(20, 4);
             
            // The following comparison methods and operators are equivalent
            if (false == TdIntervalMonth.Equals(firstInterval, secondInterval) ||
                firstInterval != secondInterval ||
                true == TdIntervalMonth.NotEquals(firstInterval, secondInterval) )
            {
               Console.WriteLine(“firstInterval does not equal secondInterval”);
            }
                </code>
            </example>
            <overloads>Returns a value indicating whether two instances of <strong>TdIntervalMonth</strong> are equal.</overloads>
            <param name="left">A <strong>TdIntervalMonth</strong> instance.</param>
            <param name="right">A <strong>TdIntervalMonth</strong> instance.</param>
        </member>
        <member name="M:Teradata.Client.Provider.TdIntervalMonth.Compare(Teradata.Client.Provider.TdIntervalMonth,Teradata.Client.Provider.TdIntervalMonth)">
            <summary>
                Two <see cref="T:Teradata.Client.Provider.TdIntervalMonth"/> intervals are compared and a value is returned that indicates
                <paramref name="left"/> is greater than, less than or equal to
                <paramref name="right"/>.
            </summary>
            <returns>The result of the comparison is returned as a signed integer.</returns>
            <remarks>
            	<list type="table">
            		<listheader>
            			<term>Return Value</term>
            			<description>Description</description>
            		</listheader>
            		<item>
            			<term>Less than zero</term>
            			<description>
            				<para>
            				    <paramref name="left"/> is less than
                               <paramref name="right"/>
            				</para>
            			    <para>-or-</para>
            				<para>
                               <paramref name="left"/> is <see cref="F:Teradata.Client.Provider.TdIntervalMonth.Null"/> 
                               and <paramref name="right"/> is not <strong>Null</strong>.
                            </para>
                        </description>
            		</item>
            		<item>
            			<term>Zero</term>
            			<description>
            				<para>
                              <paramref name="left"/> equals
                              <paramref name="right"/>
                           </para>
            			    <para>-or-</para>
            				<para>
                               <paramref name="left"/> is <strong>Null</strong> and
                               <paramref name="right"/> is <strong>Null</strong>
                           </para>
                        </description>
                   </item>
            		<item>
            			<term>Greater than zero</term>
            			<description>
            				<para>
                              <paramref name="left"/> is greater than
                              <paramref name="right"/>
                           </para>
            			    <para>-or-</para>
                           <para>
                               <paramref name="left"/> is not <strong>Null</strong> and
                               <paramref name="right"/> is <strong>Null</strong>.
                           </para>
                        </description>
            		</item>
            	</list>
            </remarks>
            <param name="left">An instance of <strong>TdIntervalMonth</strong>.</param>
            <param name="right">An instance of <strong>TdIntervalMonth</strong>.</param>
        </member>
        <member name="M:Teradata.Client.Provider.TdIntervalMonth.NotEquals(Teradata.Client.Provider.TdIntervalMonth,Teradata.Client.Provider.TdIntervalMonth)">
            <summary>
                Compares two <see cref="T:Teradata.Client.Provider.TdIntervalMonth"/>s to determine whether the
                <paramref name="left"/> is not equal to
                <paramref name="right"/>.
            </summary>
            <returns>
            	<para>
            		<c>true</c> indicates <paramref name="left"/> is not equal to
                    <paramref name="right"/>, <c>false</c> otherwise.
                </para>
            	<para>
            		<list type="table">
            			<listheader>
            				<term>Return Value</term>
            				<description>Description</description>
            			</listheader>
            			<item>
            				<term><c>true</c></term>
            				<description>
            					<para>
            						<paramref name="left"/> is less than or greater
                                    than <paramref name="right"/>
            					</para>
            					<para>-or-</para>
            					<para>
            						Either <paramref name="left"/> or <paramref name="right"/> is
                                   <see cref="F:Teradata.Client.Provider.TdIntervalMonth.Null"/>.
                               </para>
            				</description>
            			</item>
            			<item>
            				<term><c>false</c></term>
            				<description>
            					<para>
            						<paramref name="left"/> is equal to
                                    <paramref name="right"/>
            					</para>
            					<para>-or-</para>
            					<para>
                                   <paramref name="left"/> and <paramref name="right"/> are
                                   <strong>Null</strong>.
                                </para>
            				</description>
            			</item>
            		</list>
            	</para>
            </returns>
            <param name="left">An instance of <strong>TdIntervalMonth</strong>.</param>
            <param name="right">An instance of <strong>TdIntervalMonth</strong>.</param>
        </member>
        <member name="M:Teradata.Client.Provider.TdIntervalMonth.GreaterThan(Teradata.Client.Provider.TdIntervalMonth,Teradata.Client.Provider.TdIntervalMonth)">
            <summary>
               Determines whether the <paramref name="left"/> is greater than the <paramref name="right"/>.
            </summary>
            <returns>
            	<para>
            		<c>true</c> indicates the <paramref name="left"/> is greater than
                    the <paramref name="right"/>, <c>false</c> otherwise.
                </para>
            	<para>
            		<list type="table">
            			<listheader>
            				<term>Return Value</term>
            				<description>Description</description>
            			</listheader>
            			<item>
            				<term><c>true</c></term>
            				<description>
            					<paramref name="left"/> and
                                <paramref name="right"/> are not
                                <see cref="F:Teradata.Client.Provider.TdIntervalMonth.Null"/> and
                                <paramref name="left"/> is greater than
                                <paramref name="right"/>.
            				</description>
            			</item>
            			<item>
            				<term><c>false</c></term>
            				<description>
            					<para>
                                    The <paramref name="left"/> is less than or equal
                                    to <paramref name="right"/>
            					</para>
            					<para>-or-</para>
            					<para>
                                   <paramref name="left"/> and / or
                                  <paramref name="right"/> is <strong>Null</strong>.
                               </para>
            				</description>
            			</item>
            		</list>
            	</para>
            </returns>
            <remarks>
            	<para>
                    Comparison operators always return <c>false</c> if one of the operands is
                    <strong>Null</strong>. Therefore you should not assume that the reverse
                    condition is <c>true</c>. For example you cannot assume that the
                    <paramref name="left"/> is less than or equal to the
                    <paramref name="right"/> if <c>GreaterThan</c> returns <c>false</c>.
                </para>
            	<para>
                    The reverse condition is <c>true</c> when the
                    <paramref name="left"/> and the
                    <paramref name="right"/> are not <strong>Null</strong>.
                </para>
            </remarks>
            <param name="left">An instance of <see cref="T:Teradata.Client.Provider.TdIntervalMonth"/>.</param>
            <param name="right">An instance of <strong>TdIntervalMonth</strong>.</param>
        </member>
        <member name="M:Teradata.Client.Provider.TdIntervalMonth.GreaterThanOrEqual(Teradata.Client.Provider.TdIntervalMonth,Teradata.Client.Provider.TdIntervalMonth)">
            <summary>
            This operator determines whether the <paramref name="left"/> is greater than or 
            equal to the <paramref name="right"/>.
            </summary>
            <returns>
            	<para>
            		<c>true</c> indicates the <paramref name="left"/> is greater than
                    or equal to the <paramref name="right"/>, <c>false</c> otherwise.
                </para>
            	<para>
            		<list type="table">
            			<listheader>
            				<term>Return Value</term>
            				<description>Description</description>
            			</listheader>
            			<item>
            				<term><c>true</c></term>
            				<description>
            					<para>
            						<paramref name="left"/> and
                                    <paramref name="right"/> are not
                                    <see cref="F:Teradata.Client.Provider.TdIntervalMonth.Null"/> and
                                    <paramref name="left"/> is greater than or equal
                                    to <paramref name="right"/>
            					</para>
            					<para>-or-</para>
            					<para>
            						<paramref name="left"/> is <strong>Null</strong>
                                    and <paramref name="right"/> is
                                    <strong>Null</strong>.
            					</para>
            				</description>
            			</item>
            			<item>
            				<term><c>false</c></term>
            				<description>
            					<para>
                                    The <paramref name="left"/> is less than
                                    <paramref name="right"/>
            					</para>
            					<para>-or-</para>
            					<para>
                                    Either <paramref name="left"/> or
                                    <paramref name="right"/> is <strong>Null</strong>.
            					</para>
            				</description>
            			</item>
            		</list>
            	</para>
            </returns>
            <remarks>
            	<para>
                    Comparison operators always return <c>false</c> if one of the operands is
                    <strong>Null</strong>. Therefore you should not assume that the reverse
                    condition is <c>true</c>. For example you cannot assume that the
                    <paramref name="left"/> is less than the
                    <paramref name="right"/> if the <c>GreaterThanOrEqual</c> method returns
                    <c>false</c>.
                </para>
            	<para>
                    The reverse condition is <c>true</c> when the
                    <paramref name="left"/> and the
                    <paramref name="right"/> are not <strong>Null</strong>.
                </para>
            </remarks>
            <param name="left">An instance of <see cref="T:Teradata.Client.Provider.TdIntervalMonth"/>.</param>
            <param name="right">An instance of <strong>TdIntervalMonth</strong>.</param>
        </member>
        <member name="M:Teradata.Client.Provider.TdIntervalMonth.LessThan(Teradata.Client.Provider.TdIntervalMonth,Teradata.Client.Provider.TdIntervalMonth)">
            <summary>
               This method determines whether the <paramref name="left"/> is less than the <paramref name="right"/>.
            </summary>
            <returns>
            	<para>
            		<c>true</c> indicates the <paramref name="left"/> is less than
                    the <paramref name="right"/>, <c>false</c> otherwise.
                </para>
            	<para>
            		<list type="table">
            			<listheader>
            				<term>Return Value</term>
            				<description>Description</description>
            			</listheader>
            			<item>
            				<term><c>true</c></term>
            				<description>
            					<paramref name="left"/> and <paramref name="right"/> are
                                not <see cref="F:Teradata.Client.Provider.TdIntervalMonth.Null"/> and
                                <paramref name="left"/> is less than
                                <paramref name="right"/>.
            				</description>
            			</item>
            			<item>
            				<term><c>false</c></term>
            				<description>
            					<para>
                                    The <paramref name="left"/> is greater than or
                                    equal to <paramref name="right"/>
            					</para>
            					<para>-or-</para>
            					<para>
                                    <paramref name="left"/> and / or
                                    <paramref name="right"/> is <strong>Null</strong>.
            					</para>
            				</description>
            			</item>
            		</list>
            	</para>
            </returns>
            <remarks>
            	<para>
                    Comparison operators always return <c>false</c> if one of the operands is
                    <strong>Null</strong>. Therefore you should not assume that the reverse
                    condition is <c>true</c>. For example you cannot assume that the
                    <paramref name="left"/> is greater than or equal to the
                    <paramref name="right"/> if the <c>LessThan</c> method returns
                    <c>false</c>.
                </para>
            	<para>
                    The reverse condition is <c>true</c> when the
                    <paramref name="left"/> and the
                    <paramref name="right"/> are not <strong>Null</strong>.
                </para>
            </remarks>
            <param name="left">An instance of <see cref="T:Teradata.Client.Provider.TdIntervalMonth"/>.</param>
            <param name="right">An instance of <strong>TdIntervalMonth</strong>.</param>
        </member>
        <member name="M:Teradata.Client.Provider.TdIntervalMonth.LessThanOrEqual(Teradata.Client.Provider.TdIntervalMonth,Teradata.Client.Provider.TdIntervalMonth)">
            <summary>
                This method determines whether the <paramref name="left"/> is less
                than or equal to the <paramref name="right"/>.
            </summary>
            <returns>
            	<para>
            		<c>true</c> indicates the <paramref name="left"/> is less than or
                    equal to the <paramref name="right"/>, <c>false</c> otherwise.
                </para>
            	<para>
            		<list type="table">
            			<listheader>
            				<term>Return Value</term>
            				<description>Description</description>
            			</listheader>
            			<item>
            				<term><c>true</c></term>
            				<description>
            					<para>
            						<paramref name="left"/> and
                                    <paramref name="right"/> are not
                                    <see cref="F:Teradata.Client.Provider.TdIntervalMonth.Null"/> and
                                    <paramref name="left"/> is less than or equal to
                                    <paramref name="right"/>
            					</para>
            					<para>-or-</para>
            					<para>
            						<paramref name="left"/> is <strong>Null</strong>
                                    and <paramref name="right"/> is
                                    <strong>Null</strong>.
            					</para>
            				</description>
            			</item>
            			<item>
            				<term><c>false</c></term>
            				<description>
            					<para>
                                    The <paramref name="left"/> is greater than
                                    <paramref name="right"/>
            					</para>
            					<para>-or-</para>
            					<para>
                                    Either <paramref name="left"/> or
                                    <paramref name="right"/> is <strong>Null</strong>.
            					</para>
            				</description>
            			</item>
            		</list>
            	</para>
            </returns>
            <remarks>
            	<para>
                    Comparison operators always return <c>false</c> if one of the operands is
                    <strong>Null</strong>. Therefore you should not assume that the reverse
                    condition is <c>true</c>. For example you cannot assume that the
                    <paramref name="left"/> is greater than the
                    <paramref name="right"/> if the <c>LessThanOrEqual</c> method returns
                    <c>false</c>.
                </para>
            	<para>
                    The reverse condition is <c>true</c> when the
                    <paramref name="left"/> and the
                    <paramref name="right"/> are not <strong>Null</strong>.
                </para>
            </remarks>
            <param name="left">An instance of <see cref="T:Teradata.Client.Provider.TdIntervalMonth"/>.</param>
            <param name="right">An instance of <strong>TdIntervalMonth</strong>.</param>
        </member>
        <member name="M:Teradata.Client.Provider.TdIntervalMonth.ToInt32(Teradata.Client.Provider.TdIntervalMonth)">
            <summary>
               Convert a <see cref="T:Teradata.Client.Provider.TdIntervalMonth"/> implictly to an Int32 representing a year interval.
            </summary>
            <returns>
               <strong>TdIntervalMonth</strong> converted to an Int32 representing a year interval.
            </returns>
            <exception cref="T:System.ArgumentNullException">The <strong>TdIntervalMonth</strong> value is <see cref="F:Teradata.Client.Provider.TdIntervalMonth.Null"/>.</exception>
            <param name="value">A <strong>TdIntervalMonth</strong> interval.</param>
        </member>
        <member name="M:Teradata.Client.Provider.TdIntervalMonth.Equals(System.Object)">
            <summary>
               Compares this instance and <paramref name="obj"/> to determine whether they
               are equal. 
            </summary>
            <returns><c>true</c> if the two <see cref="T:Teradata.Client.Provider.TdIntervalMonth"/>s are equal, <c>false</c> otherwise.</returns>
            <remarks>
            	<para>
                    The return value is <c>true</c> if the instance is equal to the
                    <paramref name="obj"/>, <c>false</c> otherwise.
                </para>
            	<para>
            		<list type="table">
            			<listheader>
            				<term>Return Value</term>
            				<description>Description</description>
            			</listheader>
            			<item>
            				<term>
            					<c>true</c>
            				</term>
            				<description>
            					<para>
                                    This instance and <paramref name="obj"/> are
                                    <see cref="F:Teradata.Client.Provider.TdIntervalMonth.Null"/>
                                </para>
            					<para>-or-</para>
            					<para>
                                    This instance is equal to <paramref name="obj"/>.
                                </para>
            				</description>
            			</item>
            			<item>
            				<term>
            					<c>false</c>
            				</term>
            				<description>
            					<para>
                                    This instance is not equal to
                                    <paramref name="obj"/>
                                </para>
            					<para>-or-</para>
            					<para>
                                    This instance is not <strong>Null</strong> and
                                    <paramref name="obj"/> is <strong>Null</strong>
                                </para>
            					<para>-or-</para>
            					<para>
                                    This instance is <strong>Null</strong> and
                                    <paramref name="obj"/> is not <strong>Null</strong>
            					</para>
            					<para>-or-</para>
            					<para>
            						<paramref name="obj"/> is a <strong>null</strong>
                                    reference.
                                </para>
            				</description>
            			</item>
            		</list>
            	</para>
            </remarks>
            <example>
                The following code example uses various comparison methods and operators.
                <code lang="CS">
            // create a TdIntervalMonth containing 5 months and a precision of 4 significant digits
            TdIntervalMonth firstInterval = new TdIntervalMonth(5, 4);
            // create a TdIntervalMonth containing 20 months and a precision of 4 significant digits
            Object intervalObj = new TdIntervalMonth(20, 4);
             
            // The following comparison methods and operators are equivalent
            if (false == TdIntervalMonth.Equals(firstInterval, (TdIntervalMonth)intervalObj) ||
                firstInterval != (TdIntervalMonth)intervalObj ||
                false == firstInterval.Equals(intervalObj) )
            {
               Console.WriteLine(“firstInterval does not equal intervalObj”);
            }
                </code>
            </example>
            <overloads>Returns a value indicating whether two instances of <strong>TdIntervalMonth</strong> are equal.</overloads>
            <param name="obj"><strong>TdIntervalMonth</strong> that will be compared to this instance 
            of <strong>TdIntervalMonth</strong>.</param>
        </member>
        <member name="M:Teradata.Client.Provider.TdIntervalMonth.GetHashCode">
            <summary>
                Returns the hash code for this instance. 
            </summary>
            <returns>The hash code is returned.</returns>
        </member>
        <member name="M:Teradata.Client.Provider.TdIntervalMonth.ToString(System.String)">
            <summary>
                Converts this instance to its equivalent String representation
                using the specified format.
            </summary>
            <remarks>
            	<para>This method supports the following format specifiers:</para>
            	<para>
            		<list type="table">
            			<listheader>
            				<term>Format Specifier</term>
            				<description>Description</description>
            			</listheader>
            			<item>
            				<term>G</term>
            				<description>
            					<para>General interval format.</para>
            					<para>[sign][months]</para>
            				</description>
            			</item>
            			<item>
            				<term>L</term>
            				<description>
            					<para>Teradata literal format. This string may be used in
                                generating SQL against the Teradata database.</para>
            					<para>INTERVAL [sign]'[months]' MONTH</para>
            				</description>
            			</item>
            		</list>
            	</para>
               <para>Below is the description of each format item.</para>
            	<para>
            		<list type="table">
            			<listheader>
            				<term>Format Element</term>
            				<description>Description</description>
            			</listheader>
            			<item>
            				<term>sign</term>
            				<description>If negative a minus sign will be displayed.</description>
            			</item>
            			<item>
            				<term>months</term>
            				<description>The number of months (one to four digits in length).</description>
            			</item>
            		</list>
            	</para>
            	<para>
                    The <paramref name="format"/> is not used, as cultural settings are
                    not supported.
                </para>
            </remarks>
            <returns>
               A string representation of the <strong>TdIntervalMonth</strong> will be returned.
            </returns>
            <exception cref="T:System.FormatException" caption="FormatException"><paramref name="format"/> contains an invalid format specifier.</exception>
            <param name="format">
               The format string that will be used to format the <strong>TdIntervalMonth</strong>.
            </param>
        </member>
        <member name="M:Teradata.Client.Provider.TdIntervalMonth.ToString">
            <summary>
               Converts this instance to its equivalent String representation.
            </summary>
            <remarks>
               <para>The string returned will follow this format:</para>
               <para>[sign][months]</para>
            	<para>
            		<list type="table">
            			<listheader>
            				<term>Format Element</term>
            				<description>Description</description>
            			</listheader>
            			<item>
            				<term>sign</term>
            				<description>If negative a minus sign will be displayed.</description>
            			</item>
            			<item>
            				<term>months</term>
            				<description>The number of months (one to four digits in length). </description>
            			</item>
            		</list>
            	</para>
            	<para>
                    Cultural settings are not supported.
            	</para>
            </remarks>
            <returns>
               A string representation of the <strong>TdIntervalMonth</strong> will be returned.
            </returns>
        </member>
        <member name="M:Teradata.Client.Provider.TdIntervalMonth.Parse(System.String)">
            <summary>
               The specified string is converted into an equivalent <see cref="T:Teradata.Client.Provider.TdIntervalMonth"/>.
            </summary>
            <returns>
               A <strong>TdIntervalMonth</strong> is returned that is equivalent to the <strong>TdIntervalMonth</strong> 
               contained in the input string.
            </returns>
            <exception cref="T:System.FormatException" caption="FormatException">
               The parameter <paramref name="value"/> cannot be converted into a 
               <strong>TdIntervalMonth</strong> interval.
            </exception>
            <exception cref="T:System.ArgumentNullException" caption="ArgumentNullException">
               The parameter <paramref name="value"/> is a <c>null</c> reference.
            </exception>
            <exception cref="T:System.OverflowException">
               The resultant operation returns a value greater than the <see cref="F:Teradata.Client.Provider.TdIntervalMonth.MaxValue"/> 
               or less than the <see cref="F:Teradata.Client.Provider.TdIntervalMonth.MinValue"/>.
            </exception>
            <remarks>
            	<para>This method supports the following string formats:</para>
            	<para>
            		<list type="table">
            			<listheader>
            				<term>String Format</term>
            				<description>Description</description>
            			</listheader>
            			<item>
            				<term>General interval format.</term>
            				<description>
            					<para>[sign][months]</para>
            				</description>
            			</item>
            			<item>
            				<term>Teradata literal format. This string may be used in
                                generating SQL against the Teradata database.</term>
            				<description>
            					<para>INTERVAL [sign]'[months]' MONTH</para>
            				</description>
            			</item>
            		</list>
            	</para>
               <para>Below is the description of each format item.</para>
            	<para>
            		<list type="table">
            			<listheader>
            				<term>Format Element</term>
            				<description>Description</description>
            			</listheader>
            			<item>
            				<term>sign</term>
            				<description>If negative a minus sign will be displayed.</description>
            			</item>
            			<item>
            				<term>months</term>
            				<description>The number of months (one to four digits in length).</description>
            			</item>
            		</list>
            	</para>
            	<para>
                    Cultural settings are not supported.
            	</para>
            	<para>
            		While parsing the <paramref name="value"/> the <see cref="P:Teradata.Client.Provider.TdIntervalMonth.Precision"/> will be
            		set to the number of digits contained within the <see cref="P:Teradata.Client.Provider.TdIntervalMonth.Months"/> component. 
            	</para>
            	<para>
            		For example a <paramref name="value"/> of "222" will
            		contain 222 months and a precision of 3.
            	</para>
            </remarks>
            <overloads>
            	The specified string is converted into an equivalent 
               <strong>TdIntervalMonth</strong> interval.
            </overloads>
            <param name="value">A string to be converted into a <strong>TdIntervalMonth</strong>.</param>
        </member>
        <member name="M:Teradata.Client.Provider.TdIntervalMonth.TryParse(System.String,Teradata.Client.Provider.TdIntervalMonth@)">
            <summary>
               The specified string is converted into an equivalent <see cref="T:Teradata.Client.Provider.TdIntervalMonth"/>.
            </summary>
            <returns>
                <c>true</c> if the conversion of <paramref name="value"/> succeeded, <c>false</c>
                otherwise.
            </returns>
            <remarks>
            	<para>This method supports the following string formats:</para>
            	<para>
            		<list type="table">
            			<listheader>
            				<term>String Format</term>
            				<description>Description</description>
            			</listheader>
            			<item>
            				<term>General interval format.</term>
            				<description>
            					<para>[sign][months]</para>
            				</description>
            			</item>
            			<item>
            				<term>Teradata literal format. This string may be used in
                                generating SQL against the Teradata database.</term>
            				<description>
            					<para>INTERVAL [sign]'[months]' MONTH</para>
            				</description>
            			</item>
            		</list>
            	</para>
               <para>Below is the description of each format item.</para>
            	<para>
            		<list type="table">
            			<listheader>
            				<term>Format Element</term>
            				<description>Description</description>
            			</listheader>
            			<item>
            				<term>sign</term>
            				<description>If negative a minus sign will be displayed.</description>
            			</item>
            			<item>
            				<term>months</term>
            				<description>The number of months (one to four digits in length).</description>
            			</item>
            		</list>
            	</para>
            	<para>
                    Cultural settings are not supported.
            	</para>
            	<para>
            		While parsing the <paramref name="value"/> the <see cref="P:Teradata.Client.Provider.TdIntervalMonth.Precision"/> will be
            		set to the number of digits contained within the <see cref="P:Teradata.Client.Provider.TdIntervalMonth.Months"/> component. 
            	</para>
            	<para>
            		For example a <paramref name="value"/> of "222" will
            		contain 222 months and a precision of 3.
            	</para>        
            </remarks>
            <overloads>
               The specified string is converted into an equivalent 
               <see cref="T:Teradata.Client.Provider.TdIntervalMonth"/> interval.  A <c>true</c> is returned 
               if the conversion succeeded, <c>false</c> otherwise.
            </overloads>
            <param name="value">A string to be converted into a <strong>TdIntervalMonth</strong>.</param>
            <param name="result">The converted string into a <strong>TdIntervalMonth</strong>.</param>
        </member>
        <member name="M:Teradata.Client.Provider.TdIntervalMonth.GetXmlSchema(System.Xml.Schema.XmlSchemaSet)">
             <summary>
                Gets the XML Qualified name for <see cref="T:Teradata.Client.Provider.TdIntervalMonth"/> XML type mapping.
             </summary>
             <param name="xmlSchemaSet">Holds zero or more XML Schema definition language (XSD) schemas.</param>
             <returns>
                Returns <strong>xs:duration.</strong>.
             </returns>
             <example>
             This examples shows how to use <see cref="T:Teradata.Client.Provider.TdIntervalMonth"/> with <see cref="T:System.Xml.Serialization.XmlSerializer"/> class.
             <see cref="T:System.Xml.Serialization.XmlElementAttribute"/> is used to indicate that the Teradata Database column can be <strong>Null</strong>.
             <code>
              public class Order
              {
                  public TdTimestamp Date;
             
                  public TdIntervalMonth ExpirationPeriod;
             
                  public TdTimestamp ExpirationDate;
            
                  public Int32 ProductId;
            
                  public Int32 Quantity;
            
                  public Int32? BackOrderQuantity;
            
                  [XmlElementAttribute(IsNullable = true)]        
                  public TdDecimal BackOrderPrice;
              }
             
              internal class OrderWriter
              {
              
                  public static void Write()
                  {
                      // Setup the order
                      Order x = new Order();
              
                      x.Date = new TdTimestamp(DateTime.Today);
                      // one year and precision of 2
                      x.ExpirationPeriod = new TdIntervalMonth(12,2);
                      x.ExpirationDate = x.Date + x.ExpirationPeriod;
                      x.ProductId = 100;
                      x.Quantity = 2000;
                      x.BackOrderQuantity = null;
                      x.BackOrderPrice = TdDecimal.Null;
            
                      // Write out today's orders to the file.
                      
                      // Open the file.
                      XmlWriterSettings settings = new XmlWriterSettings();
                      settings.Indent = true;
                      XmlWriter writer = XmlWriter.Create(@"C:\Temp\TodayOrders.XML", settings);
                      writer.WriteStartElement("TodayOrders");
                
                      // Write out the schema.
                      XmlSchemas schemas = new XmlSchemas();
                      XmlSchemaExporter schExporter = new XmlSchemaExporter(schemas);
                      schExporter.ExportTypeMapping(new XmlReflectionImporter().ImportTypeMapping(typeof(Order)));
                      schemas[0].Write(writer);
            
                      // Write out the orders.
                      XmlSerializer xml = new XmlSerializer(typeof(Order));
                      xml.Serialize(writer, x);
              
                      // Close the document.
                      writer.WriteEndDocument();
                      writer.Close();
                  }
              }
             
              /* Output is:
             
              &lt;TodayOrders&gt;
                &lt;xs:schema elementFormDefault="qualified" xmlns:xs="http://www.w3.org/2001/XMLSchema"&gt;
                  &lt;xs:element name="Order" nillable="true" type="Order" /&gt;
                  &lt;xs:complexType name="Order"&gt;
                    &lt;xs:sequence&gt;
                      &lt;xs:element minOccurs="1" maxOccurs="1" name="Date" type="xs:dateTime" /&gt;
                      &lt;xs:element minOccurs="1" maxOccurs="1" name="ExpirationPeriod" type="xs:duration" /&gt;
                      &lt;xs:element minOccurs="1" maxOccurs="1" name="ExpirationDate" type="xs:dateTime" /&gt;
                      &lt;xs:element minOccurs="1" maxOccurs="1" name="ProductId" type="xs:int" /&gt;
                      &lt;xs:element minOccurs="1" maxOccurs="1" name="Quantity" type="xs:int" /&gt;
                      &lt;xs:element minOccurs="1" maxOccurs="1" name="BackOrderQuantity" nillable="true" type="xs:int" /&gt;
                      &lt;xs:element minOccurs="1" maxOccurs="1" name="BackOrderPrice" nillable="true" type="xs:decimal" /&gt;
                    &lt;/xs:sequence&gt;
                  &lt;/xs:complexType&gt;
                &lt;/xs:schema&gt;
                &lt;Order xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xmlns:xsd="http://www.w3.org/2001/XMLSchema"&gt;
                  &lt;Date&gt;2008-02-01T00:00:00-08:00&lt;/Date&gt;
                  &lt;ExpirationPeriod&gt;P1M&lt;/ExpirationPeriod&gt;
                  &lt;ExpirationDate&gt;2009-02-01T00:00:00-08:00&lt;/ExpirationDate&gt;
                  &lt;ProductId&gt;100&lt;/ProductId&gt;
                  &lt;Quantity&gt;2000&lt;/Quantity&gt;
                  &lt;BackOrderQuantity xsi:nil="true" /&gt;
                  &lt;BackOrderPrice xsi:nil="true" /&gt;
                &lt;/Order&gt;
              &lt;/TodayOrders&gt;
             
              */
             </code>
             </example>        
        </member>
        <member name="M:Teradata.Client.Provider.TdIntervalMonth.op_Addition(Teradata.Client.Provider.TdIntervalMonth,System.Int32)">
            <summary>
               The specified number of months is added to the <see cref="T:Teradata.Client.Provider.TdIntervalMonth"/>.
            </summary>
            <remarks>
            <para>
               If <paramref name="interval"/> is <see cref="F:Teradata.Client.Provider.TdIntervalMonth.Null"/> a <strong>Null</strong> will be returned.
            </para>
            <para>
               The returned <strong>TdIntervalMonth</strong> will contain a precision 
               set to the <see cref="F:Teradata.Client.Provider.TdIntervalMonth.MaxPrecision"/>.
            </para>
            </remarks>
            <exception cref="T:System.OverflowException">
               The resultant operation returns a value greater than the <see cref="F:Teradata.Client.Provider.TdIntervalMonth.MaxValue"/> 
               or less than the <see cref="F:Teradata.Client.Provider.TdIntervalMonth.MinValue"/>.
            </exception>
            <param name="interval">A <strong>TdIntervalMonth</strong>.</param>
            <param name="months">Number of months to add.</param>
            <returns>
               A new <strong>TdIntervalMonth</strong> as the result of adding an Int32 to 
               <strong>TdIntervalMonth</strong>.
            </returns>
        </member>
        <member name="M:Teradata.Client.Provider.TdIntervalMonth.op_Addition(System.Int32,Teradata.Client.Provider.TdIntervalMonth)">
            <summary>
               The specified number of months is added to the <see cref="T:Teradata.Client.Provider.TdIntervalMonth"/>.
            </summary>
            <remarks>
            <para>
               If <paramref name="interval"/> is <see cref="F:Teradata.Client.Provider.TdIntervalMonth.Null"/> a <strong>Null</strong> will be returned.
            </para>
            <para>
               The returned <strong>TdIntervalMonth</strong> will contain a precision 
               set to the <see cref="F:Teradata.Client.Provider.TdIntervalMonth.MaxPrecision"/>.
            </para>
            </remarks>
            <exception cref="T:System.OverflowException">
               The resultant operation returns a value greater than the <see cref="F:Teradata.Client.Provider.TdIntervalMonth.MaxValue"/> 
               or less than the <see cref="F:Teradata.Client.Provider.TdIntervalMonth.MinValue"/>.
            </exception>
            <param name="months">Number of months to add.</param>
            <param name="interval">A <strong>TdIntervalMonth</strong>.</param>
            <returns>
               A new <strong>TdIntervalMonth</strong> as the result of adding an Int32 to 
               <strong>TdIntervalMonth</strong>.
            </returns>
        </member>
        <member name="M:Teradata.Client.Provider.TdIntervalMonth.op_Subtraction(Teradata.Client.Provider.TdIntervalMonth,System.Int32)">
            <summary>
               The specified number of months is subtracted from the <see cref="T:Teradata.Client.Provider.TdIntervalMonth"/>.
            </summary>
            <remarks>
            <para>
               If <paramref name="interval"/> is <see cref="F:Teradata.Client.Provider.TdIntervalMonth.Null"/> a <strong>Null</strong> will be returned.
            </para>
            <para>
               The returned <strong>TdIntervalMonth</strong> will contain a precision 
               set to the <see cref="F:Teradata.Client.Provider.TdIntervalMonth.MaxPrecision"/>.
            </para>
            </remarks>
            <exception cref="T:System.OverflowException">
               The resultant operation returns a value greater than the <see cref="F:Teradata.Client.Provider.TdIntervalMonth.MaxValue"/> 
               or less than the <see cref="F:Teradata.Client.Provider.TdIntervalMonth.MinValue"/>.
            </exception>
            <param name="interval">A <strong>TdIntervalMonth</strong>.</param>
            <param name="months">Number of months to subtract.</param>
            <returns>
               A new <strong>TdIntervalMonth</strong> as the result of substracting an Int32 from 
               <strong>TdIntervalMonth</strong>.
            </returns>
        </member>
        <member name="M:Teradata.Client.Provider.TdIntervalMonth.op_Addition(Teradata.Client.Provider.TdIntervalMonth,Teradata.Client.Provider.TdIntervalMonth)">
            <summary>
               A <see cref="T:Teradata.Client.Provider.TdIntervalMonth"/> is added to another <strong>TdIntervalMonth</strong>.
            </summary>
            <remarks>
            <para>
               If either parameter is <strong>Null</strong> a <see cref="F:Teradata.Client.Provider.TdIntervalMonth.Null"/> will be returned.
            </para>
            <para>
               The returned <strong>TdIntervalMonth</strong> will contain a precision 
               set to the <see cref="F:Teradata.Client.Provider.TdIntervalMonth.MaxPrecision"/>.
            </para>
            </remarks>
            <returns>
               A new <strong>TdIntervalMonth</strong> as the result of adding a 
               <strong>TdIntervalMonth</strong> to another <strong>TdIntervalMonth</strong>.
            </returns>        
            <exception cref="T:System.OverflowException">
               The resultant operation returns a value greater than the <see cref="F:Teradata.Client.Provider.TdIntervalMonth.MaxValue"/> 
               or less than the <see cref="F:Teradata.Client.Provider.TdIntervalMonth.MinValue"/>.
            </exception>
            <overloads>
               Calculates the sum of two operands and returns a <strong>TdIntervalMonth</strong>.
            </overloads>
            <param name="left">A <strong>TdIntervalMonth</strong>.</param>
            <param name="right">A <strong>TdIntervalMonth</strong>.</param>
        </member>
        <member name="M:Teradata.Client.Provider.TdIntervalMonth.op_Subtraction(Teradata.Client.Provider.TdIntervalMonth,Teradata.Client.Provider.TdIntervalMonth)">
            <summary>
               A <see cref="T:Teradata.Client.Provider.TdIntervalMonth"/> is subtracted from another <strong>TdIntervalMonth</strong>.
            </summary>
            <remarks>
            <para>
               If either parameter is <strong>Null</strong> a <see cref="F:Teradata.Client.Provider.TdIntervalMonth.Null"/> will be returned.
            </para>
            <para>
               The returned <strong>TdIntervalMonth</strong> will contain a precision 
               set to the <see cref="F:Teradata.Client.Provider.TdIntervalMonth.MaxPrecision"/>.
            </para>
            </remarks>
            <returns>
               A new <strong>TdIntervalMonth</strong> as the result of subtracting a 
               <strong>TdIntervalMonth</strong> from the left <strong>TdIntervalMonth</strong>.
            </returns>        
            <exception cref="T:System.OverflowException">
               The resultant operation returns a value greater than the <see cref="F:Teradata.Client.Provider.TdIntervalMonth.MaxValue"/> 
               or less than the <see cref="F:Teradata.Client.Provider.TdIntervalMonth.MinValue"/>.
            </exception>
            <overloads>
               The right operand is subtracted from the left operand returning a 
               <strong>TdIntervalMonth</strong>.
            </overloads>
            <param name="left">A <strong>TdIntervalMonth</strong> to subtract from.</param>
            <param name="right">A <strong>TdIntervalMonth</strong> to subtract.</param>
        </member>
        <member name="M:Teradata.Client.Provider.TdIntervalMonth.op_Multiply(Teradata.Client.Provider.TdIntervalMonth,System.Int32)">
            <summary>
               A <see cref="T:Teradata.Client.Provider.TdIntervalMonth"/> is multiplied by an integer value.
            </summary>
            <remarks>
            <para>
               If <paramref name="interval"/> is <see cref="F:Teradata.Client.Provider.TdIntervalMonth.Null"/> a <strong>Null</strong> will be returned.
            </para>
            <para>
               The returned <strong>TdIntervalMonth</strong> will contain a precision 
               set to the <see cref="F:Teradata.Client.Provider.TdIntervalMonth.MaxPrecision"/>.
            </para>
            </remarks>
            <returns>
               A new <strong>TdIntervalMonth</strong> as the result of multiplying a 
               <strong>TdIntervalMonth</strong> and an integer value.
            </returns>        
            <exception cref="T:System.OverflowException">
               The resultant operation returns a value greater than the <see cref="F:Teradata.Client.Provider.TdIntervalMonth.MaxValue"/> 
               or less than the <see cref="F:Teradata.Client.Provider.TdIntervalMonth.MinValue"/>.
            </exception>
            <param name="interval">A <strong>TdIntervalMonth</strong>.</param>
            <param name="value">A multiplier.</param>
        </member>
        <member name="M:Teradata.Client.Provider.TdIntervalMonth.op_Multiply(System.Int32,Teradata.Client.Provider.TdIntervalMonth)">
            <summary>
               A <see cref="T:Teradata.Client.Provider.TdIntervalMonth"/> is multiplied by an integer value.
            </summary>
            <remarks>
            <para>
               If <paramref name="interval"/> is <see cref="F:Teradata.Client.Provider.TdIntervalMonth.Null"/> a <strong>Null</strong> will be returned.
            </para>
            <para>
               The returned <strong>TdIntervalMonth</strong> will contain a precision 
               set to the <see cref="F:Teradata.Client.Provider.TdIntervalMonth.MaxPrecision"/>.
            </para>
            </remarks>
            <returns>
               A new <strong>TdIntervalMonth</strong> as the result of multiplying a 
               <strong>TdIntervalMonth</strong> and an integer value.
            </returns>        
            <exception cref="T:System.OverflowException">
               The resultant operation returns a value greater than the <see cref="F:Teradata.Client.Provider.TdIntervalMonth.MaxValue"/> 
               or less than the <see cref="F:Teradata.Client.Provider.TdIntervalMonth.MinValue"/>.
            </exception>
            <param name="value">A multiplier.</param>
            <param name="interval">A <strong>TdIntervalMonth</strong>.</param>
        </member>
        <member name="M:Teradata.Client.Provider.TdIntervalMonth.op_Division(Teradata.Client.Provider.TdIntervalMonth,System.Int32)">
            <summary>
               A <see cref="T:Teradata.Client.Provider.TdIntervalMonth"/> is divided by an integer value.
            </summary>
            <remarks>
            <para>
               If <paramref name="interval"/> is <see cref="F:Teradata.Client.Provider.TdIntervalMonth.Null"/> a <strong>Null</strong> will be returned.
            </para>
            <para>
               The returned <strong>TdIntervalMonth</strong> will contain a precision 
               which matches the precision of the <strong>interval</strong> parameter.
            </para>
            </remarks>
            <returns>
               A new <strong>TdIntervalMonth</strong> as the result of dividing a 
               <strong>TdIntervalMonth</strong> and an integer value.
            </returns>        
            <exception cref="T:System.DivideByZeroException">The <paramref name="value"/> divisor cannot be 0.</exception>
            <param name="interval">A <strong>TdIntervalMonth</strong>.</param>
            <param name="value">A divisor.</param>
        </member>
        <member name="M:Teradata.Client.Provider.TdIntervalMonth.Add(Teradata.Client.Provider.TdIntervalMonth,Teradata.Client.Provider.TdIntervalMonth)">
            <summary>
               Calculates the sum of two <see cref="T:Teradata.Client.Provider.TdIntervalMonth"/> operands.
            </summary>
            <remarks>
            <para>
               If either parameter is <strong>Null</strong> a <see cref="F:Teradata.Client.Provider.TdIntervalMonth.Null"/> will be returned.
            </para>
            <para>
               The returned <strong>TdIntervalMonth</strong> will contain a precision  
               set to the <see cref="F:Teradata.Client.Provider.TdIntervalMonth.MaxPrecision"/>.
            </para>
            </remarks>
            <returns>A <strong>TdIntervalMonth</strong> containing the sum.</returns>
            <exception cref="T:System.OverflowException">
               The resultant operation returns a value greater than the <see cref="F:Teradata.Client.Provider.TdIntervalMonth.MaxValue"/> 
               or less than the <see cref="F:Teradata.Client.Provider.TdIntervalMonth.MinValue"/>.
            </exception>
            <overloads>
               Calculates the sum of two operands and returns a <strong>TdIntervalMonth</strong>.
            </overloads>
            <param name="left">A <strong>TdIntervalMonth</strong>.</param>
            <param name="right">A <strong>TdIntervalMonth</strong>.</param>
        </member>
        <member name="M:Teradata.Client.Provider.TdIntervalMonth.Add(Teradata.Client.Provider.TdIntervalMonth,System.Int32)">
            <summary>
               Calculates the sum of a <see cref="T:Teradata.Client.Provider.TdIntervalMonth"/> and the specified number of months.
            </summary>
            <remarks>
            <para>
               If parameter <paramref name="interval"/> is <strong>Null</strong> a <see cref="F:Teradata.Client.Provider.TdIntervalMonth.Null"/> 
               will be returned.
            </para>
            <para>
               The returned <strong>TdIntervalMonth</strong> will contain a precision  
               set to the <see cref="F:Teradata.Client.Provider.TdIntervalMonth.MaxPrecision"/>.
            </para>
            </remarks>
            <exception cref="T:System.OverflowException">
               The resultant operation returns a value greater than the <see cref="F:Teradata.Client.Provider.TdIntervalMonth.MaxValue"/> 
               or less than the <see cref="F:Teradata.Client.Provider.TdIntervalMonth.MinValue"/>.
            </exception>
            <param name="interval">A <strong>TdIntervalMonth</strong>.</param>
            <param name="months">Number of months to add.</param>
            <returns>A <strong>TdIntervalMonth</strong> containing the sum.</returns>
        </member>
        <member name="M:Teradata.Client.Provider.TdIntervalMonth.Add(System.Int32,Teradata.Client.Provider.TdIntervalMonth)">
            <summary>
               The specified number of months is added to the <see cref="T:Teradata.Client.Provider.TdIntervalMonth"/>.
            </summary>
            <remarks>
            <para>
               If <paramref name="interval"/> is <see cref="F:Teradata.Client.Provider.TdIntervalMonth.Null"/> a <strong>Null</strong> will be returned.
            </para>
            <para>
               The returned <strong>TdIntervalMonth</strong> will contain a precision  
               set to the <see cref="F:Teradata.Client.Provider.TdIntervalMonth.MaxPrecision"/>.
            </para>
            </remarks>
            <returns>
               A new <strong>TdIntervalMonth</strong> as the result of adding an Int32 to 
               <strong>TdIntervalMonth</strong>.
            </returns>        
            <exception cref="T:System.OverflowException">
               The resultant operation returns a value greater than the <see cref="F:Teradata.Client.Provider.TdIntervalMonth.MaxValue"/> 
               or less than the <see cref="F:Teradata.Client.Provider.TdIntervalMonth.MinValue"/>.
            </exception>
            <param name="months">Number of months to add.</param>
            <param name="interval">A <strong>TdIntervalMonth</strong>.</param>
        </member>
        <member name="M:Teradata.Client.Provider.TdIntervalMonth.Subtract(Teradata.Client.Provider.TdIntervalMonth,System.Int32)">
            <summary>
               The specified number of months is subtracted from the <see cref="T:Teradata.Client.Provider.TdIntervalMonth"/>.
            </summary>
            <remarks>
            <para>
               If <paramref name="interval"/> is <see cref="F:Teradata.Client.Provider.TdIntervalMonth.Null"/> a <strong>Null</strong> will be returned.
            </para>
            <para>
               The returned <strong>TdIntervalMonth</strong> will contain a precision 
               set to the <see cref="F:Teradata.Client.Provider.TdIntervalMonth.MaxPrecision"/>.
            </para>
            </remarks>
            <exception cref="T:System.OverflowException">
               The resultant operation returns a value greater than the <see cref="F:Teradata.Client.Provider.TdIntervalMonth.MaxValue"/> 
               or less than the <see cref="F:Teradata.Client.Provider.TdIntervalMonth.MinValue"/>.
            </exception>
            <param name="interval">A <strong>TdIntervalMonth</strong>.</param>
            <param name="months">Number of months to subtract.</param>
            <returns>
               A new <strong>TdIntervalMonth</strong> as the result of substracting an Int32 from 
               <strong>TdIntervalMonth</strong>.
            </returns>
        </member>
        <member name="M:Teradata.Client.Provider.TdIntervalMonth.Subtract(Teradata.Client.Provider.TdIntervalMonth,Teradata.Client.Provider.TdIntervalMonth)">
            <summary>
               A <see cref="T:Teradata.Client.Provider.TdIntervalMonth"/> is subtracted from another <strong>TdIntervalMonth</strong>.
            </summary>
            <remarks>
            <para>
               If either parameter is <strong>Null</strong> a <see cref="F:Teradata.Client.Provider.TdIntervalMonth.Null"/> will be returned.
            </para>
            <para>
               The returned <strong>TdIntervalMonth</strong> will contain a precision 
               set to the <see cref="F:Teradata.Client.Provider.TdIntervalMonth.MaxPrecision"/>.
            </para>
            </remarks>
            <returns>
               A new <strong>TdIntervalMonth</strong> as the result of subtracting a 
               <strong>TdIntervalMonth</strong> from the left <strong>TdIntervalMonth</strong>.
            </returns>
            <exception cref="T:System.OverflowException">
               The resultant operation returns a value greater than the <see cref="F:Teradata.Client.Provider.TdIntervalMonth.MaxValue"/> 
               or less than the <see cref="F:Teradata.Client.Provider.TdIntervalMonth.MinValue"/>.
            </exception>
            <overloads>
               The right operand is subtracted from the left operand returning a 
               <strong>TdIntervalMonth</strong>.
            </overloads>
            <param name="left">A <strong>TdIntervalMonth</strong> to subtract from.</param>
            <param name="right">A <strong>TdIntervalMonth</strong> to subtract.</param>
        </member>
        <member name="M:Teradata.Client.Provider.TdIntervalMonth.Multiply(Teradata.Client.Provider.TdIntervalMonth,System.Int32)">
            <summary>
               A <see cref="T:Teradata.Client.Provider.TdIntervalMonth"/> is multiplied by an integer value.
            </summary>
            <remarks>
            <para>
               If <paramref name="interval"/> is <see cref="F:Teradata.Client.Provider.TdIntervalMonth.Null"/> a <strong>Null</strong> will be returned.
            </para>
            <para>
               The returned <strong>TdIntervalMonth</strong> will contain a precision 
               set to the <see cref="F:Teradata.Client.Provider.TdIntervalMonth.MaxPrecision"/>.
            </para>
            </remarks>
            <returns>
               A new <strong>TdIntervalMonth</strong> as the result of multiplying a 
               <strong>TdIntervalMonth</strong> and an integer value.
            </returns>        
            <exception cref="T:System.OverflowException">
               The resultant operation returns a value greater than the <see cref="F:Teradata.Client.Provider.TdIntervalMonth.MaxValue"/> 
               or less than the <see cref="F:Teradata.Client.Provider.TdIntervalMonth.MinValue"/>.
            </exception>
            <param name="interval">A <strong>TdIntervalMonth</strong>.</param>
            <param name="value">A multiplier.</param>
        </member>
        <member name="M:Teradata.Client.Provider.TdIntervalMonth.Multiply(System.Int32,Teradata.Client.Provider.TdIntervalMonth)">
            <summary>
               A <see cref="T:Teradata.Client.Provider.TdIntervalMonth"/> is multiplied by an integer value.
            </summary>
            <remarks>
            <para>
               If <paramref name="interval"/> is <see cref="F:Teradata.Client.Provider.TdIntervalMonth.Null"/> a <strong>Null</strong> will be returned.
            </para>
            <para>
               The returned <strong>TdIntervalMonth</strong> will contain a precision 
               set to the <see cref="F:Teradata.Client.Provider.TdIntervalMonth.MaxPrecision"/>.
            </para>
            </remarks>
            <returns>
               A new <strong>TdIntervalMonth</strong> as the result of multiplying a 
               <strong>TdIntervalMonth</strong> and an integer value.
            </returns>        
            <exception cref="T:System.OverflowException">
               The resultant operation returns a value greater than the <see cref="F:Teradata.Client.Provider.TdIntervalMonth.MaxValue"/> 
               or less than the <see cref="F:Teradata.Client.Provider.TdIntervalMonth.MinValue"/>.
            </exception>
            <param name="value">A multiplier.</param>
            <param name="interval">A <strong>TdIntervalMonth</strong>.</param>
        </member>
        <member name="M:Teradata.Client.Provider.TdIntervalMonth.Divide(Teradata.Client.Provider.TdIntervalMonth,System.Int32)">
            <summary>
               A <see cref="T:Teradata.Client.Provider.TdIntervalMonth"/> is divided by an integer value.
            </summary>
            <remarks>
            <para>
               If <paramref name="interval"/> is <see cref="F:Teradata.Client.Provider.TdIntervalMonth.Null"/> a <strong>Null</strong> will be returned.
            </para>
            <para>
               The returned <strong>TdIntervalMonth</strong> will contain a precision 
               which matches the precision of the <strong>interval</strong> parameter.
            </para>
            </remarks>
            <returns>
               A new <strong>TdIntervalMonth</strong> as the result of dividing a 
               <strong>TdIntervalMonth</strong> and an integer value.
            </returns>        
            <exception cref="T:System.DivideByZeroException">The <paramref name="value"/> divisor cannot be 0.</exception>
            <param name="interval">A <strong>TdIntervalMonth</strong>.</param>
            <param name="value">A divisor.</param>
        </member>
        <member name="M:Teradata.Client.Provider.TdIntervalMonth.op_GreaterThan(Teradata.Client.Provider.TdIntervalMonth,Teradata.Client.Provider.TdIntervalMonth)">
            <summary>
               This operator determines whether the <paramref name="left"/> is greater than the <paramref name="right"/>.
            </summary>
            <returns>
            	<para>
            		<c>true</c> indicates the <paramref name="left"/> is greater than
                    the <paramref name="right"/>, <c>false</c> otherwise.
                </para>
            	<para>
            		<list type="table">
            			<listheader>
            				<term>Return Value</term>
            				<description>Description</description>
            			</listheader>
            			<item>
            				<term><c>true</c></term>
            				<description>
            					<paramref name="left"/> and
                                <paramref name="right"/> are not
                                <see cref="F:Teradata.Client.Provider.TdIntervalMonth.Null"/> and
                                <paramref name="left"/> is greater than
                                <paramref name="right"/>.
            				</description>
            			</item>
            			<item>
            				<term><c>false</c></term>
            				<description>
            					<para>
                                    The <paramref name="left"/> is less than or equal
                                    to <paramref name="right"/>
                                </para>
            					<para>-or-</para>
            					<para>
                                    Either <paramref name="left"/> and / or
                                    <paramref name="right"/> is <strong>Null</strong>.
                                </para>
            				</description>
            			</item>
            		</list>
            	</para>
            </returns>
            <remarks>
            	<para>Comparison operators always return <c>false</c> if one of the operands is
                <strong>Null</strong>. Therefore you should not assume that the reverse condition
                is <c>true</c>. For example you cannot assume that the <paramref name="left"/> is less than or equal to
                the <paramref name="right"/> if the "&gt;" operator returns <c>false</c>.</para>
            	<para>The reverse condition is <c>true</c> when the <paramref name="left"/> and the <paramref name="right"/> are not
                <strong>Null</strong>.</para>
            </remarks>
            <param name="left">An instance of <see cref="T:Teradata.Client.Provider.TdIntervalMonth"/>.</param>
            <param name="right">An instance of <strong>TdIntervalMonth</strong>.</param>
        </member>
        <member name="M:Teradata.Client.Provider.TdIntervalMonth.op_GreaterThanOrEqual(Teradata.Client.Provider.TdIntervalMonth,Teradata.Client.Provider.TdIntervalMonth)">
            <summary>
               This operator determines whether the <paramref name="left"/> is greater than or 
            equal to the <paramref name="right"/>.
            </summary>
            <returns>
            	<para>
            		<c>true</c> indicates the <paramref name="left"/> is greater than
                    or equal to the <paramref name="right"/>, <c>false</c> otherwise.
                </para>
            	<para>
            		<list type="table">
            			<listheader>
            				<term>Return Value</term>
            				<description>Description</description>
            			</listheader>
            			<item>
            				<term><c>true</c></term>
            				<description>
            					<para>
            						<paramref name="left"/> and
                                    <paramref name="right"/> are not
                                    <see cref="F:Teradata.Client.Provider.TdIntervalMonth.Null"/> and
                                    <paramref name="left"/> is greater than or equal
                                    to <paramref name="right"/>
            					</para>
            					<para>-or-</para>
            					<para>
            						<paramref name="left"/> is <strong>Null</strong>
                                    and <paramref name="right"/> is
                                    <strong>Null</strong>.
            					</para>
            				</description>
            			</item>
            			<item>
            				<term><c>false</c></term>
            				<description>
            					<para>
                                    The <paramref name="left"/> is less than
                                    <paramref name="right"/>
            					</para>
            					<para>-or-</para>
            					<para>
                                    Either <paramref name="left"/> or
                                    <paramref name="right"/> is <strong>Null</strong>.
            					</para>
            				</description>
            			</item>
            		</list>
            	</para>
            </returns>
            <remarks>
            	<para>
                    Comparison operators always return <c>false</c> if one of the operands is
                    <strong>Null</strong>. Therefore you should not assume that the reverse
                    condition is <c>true</c>. For example you cannot assume that the
                    <paramref name="left"/> is less than the
                    <paramref name="right"/> if the "&gt;=" operator returns
                    <c>false</c>.
                </para>
            	<para>
                    The reverse condition is <c>true</c> when the
                    <paramref name="left"/> and the
                    <paramref name="right"/> are not <strong>Null</strong>.
                </para>
            </remarks>
            <param name="left">An instance of <see cref="T:Teradata.Client.Provider.TdIntervalMonth"/>.</param>
            <param name="right">An instance of <strong>TdIntervalMonth</strong>.</param>
        </member>
        <member name="M:Teradata.Client.Provider.TdIntervalMonth.op_Inequality(Teradata.Client.Provider.TdIntervalMonth,Teradata.Client.Provider.TdIntervalMonth)">
            <summary>
               This operator determines whether the <paramref name="left"/> and the  
            <paramref name="right"/> are not equal.
            </summary>
            <returns>
            	<para>A Boolean is returned that indicates whether the two operands are not equal.
                <c>true</c> indicates the two operands are not equal, <c>false</c>
                otherwise.</para>
            	<para>
            		<list type="table">
            			<listheader>
            				<term>Return Value</term>
            				<description>Description</description>
            			</listheader>
            			<item>
            				<term><c>true</c></term>
            				<description>
            					<para>
            					    <paramref name="left"/> is less than or greater than
                                   <paramref name="right"/>
            					</para>
            					<para>-or-</para>
                               <para>
            					   <paramref name="left"/> is
                                   <see cref="F:Teradata.Client.Provider.TdIntervalMonth.Null"/> and
                                   <paramref name="right"/> is not <strong>Null</strong>
                               </para>
            					<para>-or-</para>
                               <para>
            					   <paramref name="left"/> is not <strong>Null</strong>
                                   and <paramref name="right"/> is <strong>Null</strong>.
                               </para>
                            </description>
            			</item>
            			<item>
            				<term><c>false</c></term>
            				<description>
                               <para>
            					   <paramref name="left"/> is equal to
                                   <paramref name="right"/>
                               </para>
            					<para>-or-</para>
                               <para>
            					   <paramref name="left"/> and
                                   <paramref name="right"/> are <strong>Null</strong>.
                               </para>
                            </description>
            			</item>
            		</list>
            	</para>
            </returns>
            <param name="left">An instance of <see cref="T:Teradata.Client.Provider.TdIntervalMonth"/>.</param>
            <param name="right">An instance of <strong>TdIntervalMonth</strong>.</param>
        </member>
        <member name="M:Teradata.Client.Provider.TdIntervalMonth.op_Equality(Teradata.Client.Provider.TdIntervalMonth,Teradata.Client.Provider.TdIntervalMonth)">
            <summary>
               This operator determines whether the <paramref name="left"/> and the  
            <paramref name="right"/> are equal.
            </summary>
            <returns>
            	<para>A Boolean is returned that indicates whether the two operands are equal.
                <c>true</c> indicates the two operands are equal, <c>false</c> otherwise.</para>
            	<para>
            		<list type="table">
            			<listheader>
            				<term>Return Value</term>
            				<description>Description</description>
            			</listheader>
            			<item>
            				<term><c>true</c></term>
            				<description>
                               <para>
            					   <paramref name="left"/> is equal to
                                   <paramref name="right"/>
                               </para>
            					<para>-or-</para>
                               <para>
            					   <paramref name="left"/> is
                                   <see cref="F:Teradata.Client.Provider.TdIntervalMonth.Null"/> and
                                   <paramref name="right"/> is <strong>Null</strong>.
                               </para>
            				</description>
            			</item>
            			<item>
            				<term><c>false</c></term>
            				<description>
                               <para>
            					   <paramref name="left"/> is not <strong>Null</strong>
                                   and <paramref name="right"/> is <strong>Null</strong>
                               </para>
            					<para>-or-</para>
                               <para>
                                   <paramref name="left"/> is <strong>Null</strong> and
                                   <paramref name="right"/> is not <strong>Null</strong>
                               </para>
            					<para>-or-</para>
                                   The <paramref name="left"/> is not equal to
                                   <paramref name="right"/>.
                               <para>
                               </para>
            				</description>
            			</item>
            		</list>
            	</para>
            </returns>
            <param name="left">An instance of <see cref="T:Teradata.Client.Provider.TdIntervalMonth"/>.</param>
            <param name="right">An instance of <strong>TdIntervalMonth</strong>.</param>
        </member>
        <member name="M:Teradata.Client.Provider.TdIntervalMonth.op_LessThan(Teradata.Client.Provider.TdIntervalMonth,Teradata.Client.Provider.TdIntervalMonth)">
            <summary>
               This operator determines whether the <paramref name="left"/> is less than the <paramref name="right"/>.
            </summary>
            <returns>
            	<para>
            		<c>true</c> indicates the <paramref name="left"/> is less than
                    the <paramref name="right"/>, <c>false</c> otherwise.
                </para>
            	<para>
            		<list type="table">
            			<listheader>
            				<term>Return Value</term>
            				<description>Description</description>
            			</listheader>
            			<item>
            				<term><c>true</c></term>
            				<description>
            					<paramref name="left"/> and
                                <paramref name="right"/> are not
                                <see cref="F:Teradata.Client.Provider.TdIntervalMonth.Null"/> and
                                <paramref name="left"/> is less than
                                <paramref name="right"/>.
            				</description>
            			</item>
            			<item>
            				<term><c>false</c></term>
            				<description>
            					<para>
                                    The <paramref name="left"/> is greater than or
                                    equal to <paramref name="right"/>
            					</para>
            					<para>-or-</para>
            					<para>
                                    Either <paramref name="left"/> and / or
                                    <paramref name="right"/> is <strong>Null</strong>.
            					</para>
            				</description>
            			</item>
            		</list>
            	</para>
            </returns>
            <remarks>
            	<para>
                    Comparison operators always return <c>false</c> if one of the operands is
                    <strong>Null</strong>. Therefore you should not assume that the reverse
                    condition is <c>true</c>. For example you cannot assume that the
                    <paramref name="left"/> is greater than or equal to the
                    <paramref name="right"/> if the "&lt;" operator returns
                    <c>false</c>.
                </para>
            	<para>
                    The reverse condition is <c>true</c> when the
                    <paramref name="left"/> and the
                    <paramref name="right"/> are not <strong>Null</strong>.
                </para>
            </remarks>
            <param name="left">An instance of <see cref="T:Teradata.Client.Provider.TdIntervalMonth"/>.</param>
            <param name="right">An instance of <strong>TdIntervalMonth</strong>.</param>
        </member>
        <member name="M:Teradata.Client.Provider.TdIntervalMonth.op_LessThanOrEqual(Teradata.Client.Provider.TdIntervalMonth,Teradata.Client.Provider.TdIntervalMonth)">
            <summary>
               This operator determines whether the <paramref name="left"/> is less than or equal 
               the <paramref name="right"/>.
            </summary>
            <returns>
            	<para>
            		<c>true</c> indicates the <paramref name="left"/> is less than or
                    equal to the <paramref name="right"/>, <c>false</c> otherwise.
                </para>
            	<para>
            		<list type="table">
            			<listheader>
            				<term>Return Value</term>
            				<description>Description</description>
            			</listheader>
            			<item>
            				<term><c>true</c></term>
            				<description>
            					<para>
            						<paramref name="left"/> and
                                    <paramref name="right"/> are not
                                    <see cref="F:Teradata.Client.Provider.TdIntervalMonth.Null"/> and
                                    <paramref name="left"/> is less than or equal to
                                    <paramref name="right"/>
            					</para>
            					<para>-or-</para>
            					<para>
            						<paramref name="left"/> is <strong>Null</strong>
                                    and <paramref name="right"/> is
                                    <strong>Null</strong>.
            					</para>
            				</description>
            			</item>
            			<item>
            				<term><c>false</c></term>
            				<description>
            					<para>
                                    The <paramref name="left"/> is greater than
                                    <paramref name="right"/>
            					</para>
            					<para>-or-</para>
            					<para>
                                    Either <paramref name="left"/> or
                                    <paramref name="right"/> is <strong>Null</strong>.
            					</para>
            				</description>
            			</item>
            		</list>
            	</para>
            </returns>
            <remarks>
            	<para>
                    Comparison operators always return <c>false</c> if one of the operands is
                    <strong>Null</strong>. Therefore you should not assume that the reverse
                    condition is <c>true</c>. For example you cannot assume that the
                    <paramref name="left"/> is greater than the
                    <paramref name="right"/> if the "&lt;=" operator returns
                    <c>false</c>.
                </para>
            	<para>
                    The reverse condition is <c>true</c> when the
                    <paramref name="left"/> and the
                    <paramref name="right"/> are not <strong>Null</strong>.
                </para>
            </remarks>
            <param name="left">An instance of <see cref="T:Teradata.Client.Provider.TdIntervalMonth"/>.</param>
            <param name="right">An instance of <strong>TdIntervalMonth</strong>.</param>
        </member>
        <member name="M:Teradata.Client.Provider.TdIntervalMonth.op_Explicit(Teradata.Client.Provider.TdIntervalMonth)~Teradata.Client.Provider.TdIntervalYear">
            <summary>
               Converts a <see cref="T:Teradata.Client.Provider.TdIntervalMonth"/> to <see cref="T:Teradata.Client.Provider.TdIntervalYear"/>.
            </summary>
            <returns>A <strong>TdIntervalYear</strong>.</returns>
            <remarks>
               <para>
                   Truncation will occur while converting <strong>TdIntervalMonth</strong>
                   if the months interval component is not divisible by 12 with a remainder of 0.
               </para>
                <para>
                   For example a value of <strong>TdIntervalMonth</strong> of 49 will result
                   in a <strong>TdIntervalYear</strong> value of '4' resulting in
                   the truncation of 1 month (49/12 = 4 with a remainder of 1).
               </para>
            </remarks>
            <param name="value">A <strong>TdIntervalMonth</strong> interval.</param>
        </member>
        <member name="M:Teradata.Client.Provider.TdIntervalMonth.op_Explicit(System.Int32)~Teradata.Client.Provider.TdIntervalMonth">
            <summary>
               Converts an <c>Int32</c> to <see cref="T:Teradata.Client.Provider.TdIntervalMonth"/>.
            </summary>
            <returns>A <strong>TdIntervalMonth</strong>.</returns>
            <remarks>
               The conversion may produce exceptions due to exceeding <see cref="F:Teradata.Client.Provider.TdIntervalMonth.MinValue"/>
               or <see cref="F:Teradata.Client.Provider.TdIntervalMonth.MaxValue"/>.
            </remarks>
            <exception cref="T:System.OverflowException">
               The resultant conversion returns a value greater than the <see cref="F:Teradata.Client.Provider.TdIntervalMonth.MaxValue"/> 
               or less than the <see cref="F:Teradata.Client.Provider.TdIntervalMonth.MinValue"/>.
            </exception>
            <param name="value">An Int32 representing a <strong>TdIntervalMonth</strong> interval.</param>
        </member>
        <member name="M:Teradata.Client.Provider.TdIntervalMonth.op_Explicit(Teradata.Client.Provider.TdIntervalMonth)~System.Int32">
            <summary>
            Convert a <see cref="T:Teradata.Client.Provider.TdIntervalMonth"/> implictly to an Int32 representing a month interval.
            </summary>
            <returns>
               <strong>TdIntervalMonth</strong> converted to an Int32 representing a month interval.
            </returns>
            <exception cref="T:System.ArgumentNullException">The <strong>TdIntervalMonth</strong> value is <see cref="F:Teradata.Client.Provider.TdIntervalMonth.Null"/>.</exception>
            <param name="value">A <strong>TdIntervalMonth</strong> interval.</param>
        </member>
        <member name="M:Teradata.Client.Provider.TdIntervalMonth.op_Implicit(Teradata.Client.Provider.TdIntervalMonth)~Teradata.Client.Provider.TdIntervalYearToMonth">
            <summary>
            Converts a <see cref="T:Teradata.Client.Provider.TdIntervalMonth"/> to a <see cref="T:Teradata.Client.Provider.TdIntervalYearToMonth"/>.
            </summary>
            <returns>A <strong>TdIntervalYearToMonth</strong></returns>
            <param name="value">A <strong>TdIntervalMonth</strong> interval.</param>
        </member>
        <member name="P:Teradata.Client.Provider.TdIntervalMonth.IsNull">
            <summary>
               Indicates whether this <see cref="T:Teradata.Client.Provider.TdIntervalMonth"/> instance is <see cref="F:Teradata.Client.Provider.TdIntervalMonth.Null"/>. 
            </summary>
            <value>
               <c>true</c> if this <strong>TdIntervalMonth</strong> is <strong>Null</strong>; 
               <c>false</c> otherwise.
            </value>
        </member>
        <member name="P:Teradata.Client.Provider.TdIntervalMonth.Months">
            <summary>
               The number of interval months is returned. The return value ranges from -9999 to 9999.
            </summary>
            <remarks>
            <para>
               A <see cref="T:Teradata.Client.Provider.TdIntervalMonth"/> is represented as [-]months.  The 
               minus sign is optional and represents a negative interval of time.  The months 
               component represents the number of months. The value of the <see cref="P:Teradata.Client.Provider.TdIntervalMonth.Months"/> 
               property is the months component.
            </para>
            </remarks>
            <exception cref="T:Teradata.Client.Provider.TdException">
               This property is not available when this instance is <see cref="F:Teradata.Client.Provider.TdIntervalMonth.Null"/>.
            </exception>
        </member>
        <member name="P:Teradata.Client.Provider.TdIntervalMonth.Precision">
            <summary>
               The number of significant digits in the month is returned. The return value
               ranges from 1 to 4.
            </summary>
            <exception cref="T:Teradata.Client.Provider.TdException">
               This property is not available when this instance is <see cref="F:Teradata.Client.Provider.TdIntervalMonth.Null"/>.
            </exception>
        </member>
        <member name="P:Teradata.Client.Provider.TdIntervalMonth.Value">
            <summary>
               Gets the .NET data type representation of <see cref="T:Teradata.Client.Provider.TdIntervalMonth"/> 
               as a <see cref="T:System.String"/>.
            </summary>
            <remarks>
               This property in concept parallels <see cref="M:Teradata.Client.Provider.TdDataReader.GetValue(System.Int32)"/> and
               <see cref="P:Teradata.Client.Provider.TdParameter.Value"/>. That is they all represent the .NET Framework 
               Class Library(FCL) primitive data type that correspond to the Teradata 
               Interval Month data type.
            </remarks>
            <value>The interval represented as a <c>String</c> is returned.</value>
            <exception cref="T:Teradata.Client.Provider.TdException">
               This property is not available when this instance is <see cref="F:Teradata.Client.Provider.TdIntervalMonth.Null"/>.
            </exception>
        </member>
        <member name="P:Teradata.Client.Provider.TdIntervalMonth.ObjectId">
            <summary>
               Gets the instance object identifier.
            </summary>
        </member>
        <member name="P:Teradata.Client.Provider.TdIntervalMonth.IsNegative">
            <summary>
               Indicate if the interval is negative.
            </summary>
            <remarks>
               
            </remarks>
        </member>
        <member name="P:Teradata.Client.Provider.TdIntervalMonth.InternalAccessor">
            <summary>
               Accessor to the internal storage for this interval.
            </summary>
        </member>
        <member name="T:Teradata.Client.Provider.TdIntervalSecond">
            <summary>
            	<see cref="T:Teradata.Client.Provider.TdIntervalSecond"/> represents an interval of time defining a duration in
                seconds and fractional seconds. The second precision and scale are configurable.
            </summary>
            <remarks>
            	<para>
                    <strong>TdIntervalSecond</strong> is a .NET Data Provider for Teradata
                    specific type, designed to support a Teradata Database Interval Second data
                    type.
                </para>
            	<para>
                    The <strong>TdIntervalSecond</strong> supports the Teradata Interval Second 
                    (precision, scale) data type where precision indicates the
                    number of digits in the seconds (from 1 - 4) and scale indicates the 
                    fractional precision for the values of seconds. The scale may range from 0 to 6.
                </para>
                <para>
                    The interval value must be specified in the following format :
                </para>
            	<para>[sign][seconds].[ffffff]</para>
            	<para>Below is the description of each format item.</para>
            	<para>
            		<list type="table">
            			<listheader>
            				<term>Format Item</term>
            				<description>Description</description>
            			</listheader>
            			<item>
            				<term>sign</term>
            				<description>Optional - . Defaults as space character (+).</description>
            			</item>
            			<item>
            				<term>seconds</term>
            				<description>Required number of seconds (one to four digits in length).</description>
            			</item>
            			<item>
            				<term>ffffff</term>
            				<description>Optionally the number of fractional seconds (0 to 6
                            digits in length).</description>
            			</item>
            		</list>
            	</para>
            	<para>
                    The .Net Framework does not have a system type that directly corresponds to
                    the Teradata Database Interval Second data type. The .NET Data Provider for 
                    Teradata Version 13.0 version and prior versions map Interval Second to System.String. 
                    With version 13.1 of the provider, <strong>TdIntervalSecond</strong> is available to 
                    retrieve and manipulate data of type Interval Second.
                </para>
            	<para>
                    The range of values for the <strong>TdIntervalSecond</strong> containing a
                    second precision of 1 is as follows:
                </para>
            	<para>
            		<table class="xmldoctable" cellspacing="0">
            			<tbody>
            				<tr>
            					<th width="181">Second Precision</th>
            					<th width="127">Second Scale</th>
            					<th>
            						<para>Minimum</para>
            					</th>
            					<th>
            						<para>Maximum</para>
            					</th>
            				</tr>
            				<tr>
            					<td class="xmldoctable" width="181">1</td>
            					<td width="127">0</td>
            					<td class="xmldoctable">
            						<para>-'9'</para>
            					</td>
            					<td>
            						<para>'9'</para>
            					</td>
            				</tr>
            				<tr>
            					<td class="xmldoctable" width="181">1</td>
            					<td width="127">1</td>
            					<td class="xmldoctable">
            						<para>-'9.9'</para>
            					</td>
            					<td>
            						<para>'9.9'</para>
            					</td>
            				</tr>
            				<tr>
            					<td class="xmldoctable" width="181">1</td>
            					<td width="127">2</td>
            					<td class="xmldoctable">
            						<para>-'9.99'</para>
            					</td>
            					<td>
            						<para>'9.99'</para>
            					</td>
            				</tr>
            				<tr>
            					<td class="xmldoctable" width="181">1</td>
            					<td width="127">3</td>
            					<td class="xmldoctable">
            						<para>-'9.999'</para>
            					</td>
            					<td>
            						<para>'9.999'</para>
            					</td>
            				</tr>
            				<tr>
            					<td width="181" height="34">1</td>
            					<td width="127" height="34">4</td>
            					<td height="34">
            						<para>-'9.9999'</para>
            					</td>
            					<td>
            						<para>'9.9999'</para>
            					</td>
            				</tr>
            				<tr>
            					<td width="181">1</td>
            					<td width="127">5</td>
            					<td>
            						<para>-'9.99999'</para>
            					</td>
            					<td>
            						<para>'9.99999'</para>
            					</td>
            				</tr>
            				<tr>
            					<td width="181">1</td>
            					<td width="127">6</td>
            					<td>
            						<para>-'9.999999'</para>
            					</td>
            					<td>
            						<para>'9.999999'</para>
            					</td>
            				</tr>
            			</tbody>
            		</table>
            	</para>
            	<para>The range of values for second precision values of 2,3 and 4 all follow the
                same pattern. For completeness, the following chart displays the range of values
                for a <strong>TdIntervalSecond</strong> with a second precision of
                4.</para>
            	<para>
            		<table class="xmldoctable" cellspacing="0">
            			<tbody>
            				<tr>
            					<th width="181">
            						<para>Second Precision</para>
            					</th>
            					<th width="127">
            						<para>Second Scale</para>
            					</th>
            					<th>
            						<para>Minimum</para>
            					</th>
            					<th>
            						<para>Maximum</para>
            					</th>
            				</tr>
            				<tr>
            					<td class="xmldoctable" width="181">4</td>
            					<td width="127">0</td>
            					<td class="xmldoctable">
            						<para>-'9999'</para>
            					</td>
            					<td>
            						<para>'9999'</para>
            					</td>
            				</tr>
            				<tr>
            					<td class="xmldoctable" width="181">4</td>
            					<td width="127">1</td>
            					<td class="xmldoctable">
            						<para>-'9999.9'</para>
            					</td>
            					<td>
            						<para>'9999.9'</para>
            					</td>
            				</tr>
            				<tr>
            					<td class="xmldoctable" width="181">4</td>
            					<td width="127">2</td>
            					<td class="xmldoctable">
            						<para>-'9999.99'</para>
            					</td>
            					<td>
            						<para>'9999.99'</para>
            					</td>
            				</tr>
            				<tr>
            					<td class="xmldoctable" width="181">4</td>
            					<td width="127">3</td>
            					<td class="xmldoctable">
            						<para>-'9999.999'</para>
            					</td>
            					<td>
            						<para>'9999.999'</para>
            					</td>
            				</tr>
            				<tr>
            					<td width="181" height="34">4</td>
            					<td width="127" height="34">4</td>
            					<td height="34">
            						<para>-'9999.9999'</para>
            					</td>
            					<td>
            						<para>'9999.9999'</para>
            					</td>
            				</tr>
            				<tr>
            					<td width="181">4</td>
            					<td width="127">5</td>
            					<td>
            						<para>-'9999.99999'</para>
            					</td>
            					<td>
            						<para>'9999.99999'</para>
            					</td>
            				</tr>
            				<tr>
            					<td width="181">4</td>
            					<td width="127">6</td>
            					<td>
            						<para>-'9999.999999'</para>
            					</td>
            					<td>
            						<para>'9999.999999'</para>
            					</td>
            				</tr>
            			</tbody>
            		</table>
            	</para>
                <para>
                    <strong>TdIntervalSecond</strong> also supports 
                    <see cref="F:Teradata.Client.Provider.TdIntervalSecond.Null"/>. This is a very important feature.
                    An application is no longer required to call
                    <see cref="M:Teradata.Client.Provider.TdDataReader.IsDBNull(System.Int32)"/> before invoking the corresponding 
                    TdDataReader "Get" method.  This will improve overall performance.
                </para>
                <para>
                    A <strong>TdIntervalSecond</strong> structure allows arithmetic,
                    comparision and conversion operations to be performed. 
                </para>
            	<para>
                    A <strong>TdIntervalSecond</strong> may also be specified as an in, out, 
                    or in/out parameter to a stored procedure. In order to maintain backward  
                    compatibility with previous versions of the provider (release 13.0 and prior), 
                    a Connection String Attribute
                    <see cref="P:Teradata.Client.Provider.TdConnectionStringBuilder.EnableTdIntervals">EnableTdIntervals</see>
                    has been added. When the <strong>EnableTdIntervals</strong> attribute
                    is <c>true</c>, <see cref="P:Teradata.Client.Provider.TdParameter.ProviderSpecificValue"/> will
                    return the data as the provider specific type of <strong>TdIntervalSecond</strong>.
                    When <strong>EnableTdIntervals</strong> is <c>false</c>, 
                    <strong>TdParameter.ProviderSpecificValue</strong> will return the data as a
                    .NET Framework Library data type of <see cref="T:System.String"/>. 
                </para>
            	<para>
                    The <see cref="P:Teradata.Client.Provider.TdParameter.Value"/> will also return the .NET Framework Library
                    data type of <strong>System.String</strong> when <strong>EnableTdIntervals</strong>
                    is <c>false</c> to maintain backward compatibility. 
                    The <strong>TdParameter.Value</strong> will return a .NET Framework data type of
                    <see cref="T:System.TimeSpan"/> when <strong>EnableTdIntervals</strong>
                    is <c>true</c>.
                </para>
            	<para>
                   For more information on the Teradata Interval Second data type
                   please see the Teradata Database SQL Reference - 'Data Types and Literals'.
               </para>
            </remarks>
            <example>
            	<para>
                   The following example shows how to retrieve a <strong>TdIntervalSecond</strong>, 
                   modify the interval, and then update the table.
               </para>
            	<code lang="CS">
            Public void IntervalExample(TdCommand cmd, Int32 task)
            {
               cmd.Parameters.Clear();
               
               cmd.CommandText = "SELECT StartDate, StartTime, TaskLen " +
                                 "FROM Schedule " +
                                 "WHERE Task = ?";
             
               cmd.CommandType = CommandType.Text;
             
               cmd.Parameters.Add(null, TdType.Integer, 4,
                    ParameterDirection.Input, true, 0, 0, null,    
                    DataRowVersion.Default, task);
             
               Int32 row = 0;
               TdDate [] startDate;
               TdTimestamp [] startTime;
               TdIntervalSecond [] taskLen;
             
               using (TdDataReader dr = cmd.ExecuteReader())
               {
                  startDate = new TdDate[dr.RecordsReturned];
                  startTime = new TdTimestamp[dr.RecordsReturned];
                  taskLen = new TdIntervalSecond [dr.RecordsReturned];
             
                  // Specifying an interval of 2 hours, 5 minutes 
                  // with an second precision of 4 and scale of 0
                  TdIntervalSecond leaseReturnExtension = new TdIntervalSecond(7500, 0,  4, 0);
               
                  while (dr.Read())
                  {
                     // Retrieving the dates
                     startDate[row] = dr.GetTdDate(0);
                     startTime[row] = dr.GetTimestamp(1);
                     taskLen[row] = dr.GetTdIntervalSecond(2);
             
                     // Adding extension to the lease return
                     startTime[row] = startTime[row] + leaseReturnExtension;
             
                     // Adding extension to the lease length;
                     taskLen[row] = taskLen[row] + leaseReturnExtension;
             
                     row++;
                  } 
               }
             
               cmd.Parameters.Clear();
             
               cmd.CommandText = "UPDATE Schedule " +
                                 "SET StartTime = ?, TaskLen = ? " +
                                 "WHERE Task = ?";
             
               cmd.Parameters.Add(null, TdType.Timestamp, 0,
                     ParameterDirection.Input, true, 0, 0, null,    
                     DataRowVersion.Default, null);
             
               cmd.Parameters.Add(null, TdType.IntervalSecond, 0,
                     ParameterDirection.Input, true, 0, 0, null,    
                     DataRowVersion.Default, null);
             
               cmd.Parameters.Add(null, TdType.Integer, 4,
                     ParameterDirection.Input, true, 0, 0, null,    
                     DataRowVersion.Default, task);
             
               row--;
               while(row &gt;= 0)
               {
                  cmd.Parameters[0].Value = startTime[row];
                  cmd.Parameters[1].Value = taskLen[row];
                  cmd.Parameters[2].Value = task;
             
                  cmd.ExecuteNonQuery();
                  row--;
               }
            }
            </code>
            </example>
            <seealso cref="P:Teradata.Client.Provider.TdConnectionStringBuilder.EnableTdIntervals"/> 
            <seealso cref="!:IntervalConnectionString.html">Interval Connection String Attribute</seealso>
            <seealso cref="!:EnableProviderSpecificTypes.html">Enabling Provider Specific Types</seealso>
            <seealso cref="!:IntervalTypeOverview.html">Provider Specific Type:  Interval Type Overview</seealso>
        </member>
        <member name="F:Teradata.Client.Provider.TdIntervalSecond.MaxPrecision">
            <summary>
               A constant representing the maximum number of significant digits in the 
               <see cref="P:Teradata.Client.Provider.TdIntervalSecond.Seconds"/> interval component.
            </summary>
            <remarks>
               The value of this constant is 4.
            </remarks>
        </member>
        <member name="F:Teradata.Client.Provider.TdIntervalSecond.MinPrecision">
            <summary>
               A constant representing the minimum number of significant digits in the 
               <see cref="P:Teradata.Client.Provider.TdIntervalSecond.Seconds"/> interval component.
            </summary>
            <remarks>
               The value of this constant is 1.
            </remarks>
        </member>
        <member name="F:Teradata.Client.Provider.TdIntervalSecond.MaxScale">
            <summary>
               A constant representing the maximum scale of the 
               <see cref="P:Teradata.Client.Provider.TdIntervalSecond.Microseconds"/> interval component.
            </summary>
            <remarks>The value of this constant is 6.</remarks>
        </member>
        <member name="F:Teradata.Client.Provider.TdIntervalSecond.MinScale">
            <summary>
               A constant representing the minimum scale of the 
               <see cref="P:Teradata.Client.Provider.TdIntervalSecond.Microseconds"/> interval component.
            </summary>
            <remarks>The value of this constant is 0.</remarks>
        </member>
        <member name="F:Teradata.Client.Provider.TdIntervalSecond.Null">
            <summary>
               Gets a Null <see cref="T:Teradata.Client.Provider.TdIntervalSecond"/> instance.
            </summary>
            <value>
               Returns a <strong>TdIntervalSecond</strong> instance that represents a <strong>Null</strong> value.
            </value>
            <remarks>
               Conceptually it is the constructor for <strong>Null</strong> instances 
               of <strong>TdIntervalSecond</strong> .
            </remarks>
            <example>
            This example shows how to send a <strong>Null</strong> value to a Teradata database.
            <code>
            TdParameter col1 = new TdParameter();
            col1.TdType = TdType.TdIntervalSecond;
            col1.Value = TdIntervalSecond.Null;
            </code>
            </example>
        </member>
        <member name="F:Teradata.Client.Provider.TdIntervalSecond.Zero">
            <summary>
               Gets an <see cref="T:Teradata.Client.Provider.TdIntervalSecond"/> instance that contains all zero elements
               for each interval field.
            </summary>
            <remarks>
               A Zero <Strong>TdIntervalSecond</Strong> may be used to determine whether
               other instances of intervals represent postive, negative or non-zero intervals.
            </remarks>
            <example>
            This example shows how to determine if an interval is negative.
            <code>
            TdIntervalDayTo Second secInterval = new TdIntervalSecond(0, -100000);
            if (secInterval &lt; TdIntervalSecond.Zero)
            {
               Console.WriteLine("The Interval is negative");
            }
            // The output of the console is "The interval is negative"
            </code>
            </example>
        </member>
        <member name="F:Teradata.Client.Provider.TdIntervalSecond.MinValue">
            <summary>
               The smallest possible value for <see cref="T:Teradata.Client.Provider.TdIntervalSecond"/>.
            </summary>
            <remarks>
               The value is -'9999.999999'.
            </remarks>
        </member>
        <member name="F:Teradata.Client.Provider.TdIntervalSecond.MaxValue">
            <summary>
               The largest possible value for <see cref="T:Teradata.Client.Provider.TdIntervalSecond"/>.
            </summary>
            <remarks>
               The value is '9999.999999'.
            </remarks>
        </member>
        <member name="M:Teradata.Client.Provider.TdIntervalSecond.#ctor(System.Int32,System.Int32,System.Byte,System.Byte)">
            <summary>
               An instance of <see cref="T:Teradata.Client.Provider.TdIntervalSecond"/> is created from time components 
               specified as integers while precision and scale components are specified as bytes.
            </summary>
            <remarks>
            <para>
               The number of seconds and microseconds are constructed into a
               <strong>TdIntervalSecond</strong>.  The microseconds parameter represents 10 ^-6 seconds
               and the microsecond parameter is divided by 10^-6 (.000001) to create a fractional number
               of seconds. The supplied scale is used to used to truncate any fractional seconds at the
               position indicated by the scale.
            </para>
            <para>
               For example, a microseconds value of 12345678 and a scale of 6 will be divided by 10^-6 
               and truncated at the 6th position resulting in a value of .123456.  A microseconds value of 
               123 and a scale of 6 will result in a value of .000123.
            </para>
            <para>
               All values are constructed into a <strong>TdIntervalSecond</strong> to 
               determine if the <see cref="F:Teradata.Client.Provider.TdIntervalSecond.MinValue"/> or the <see cref="F:Teradata.Client.Provider.TdIntervalSecond.MaxValue"/>
               values are exceeded.  If the values are not exceeded but the resulting seconds component 
               exceeds the supplied <paramref name="precision"/> value, an exception is generated.
            </para>
            <para>
               For example a constructor for TdIntervalSecond(444, 90, 2, 6) requests
               444 seconds and 90 microseconds with a precision of 2 and a scale of 6. The
               resulting <strong>TdIntervalSecond</strong> literal value of '444.000090' 
               contains a seconds value which cannot be represented in 2 digits.  Therefore an exception
                is generated, even though the <strong>MinValue</strong> and the
               <strong>MaxValue</strong> values have not been exceeded.
            </para>
            <para>
               Negative constructor parameters may be supplied to represent negative durations of time.
               Mixed positive and negative constructor parameters are added together that result in a
               negative or positive <strong>TdIntervalSecond</strong>.  For instance, a second
               value of -4900, a microsecond value of 30, a second precision of 4
               and a scale of 6 will result in a <strong>TdIntervalSecond</strong> 
               interval value of -'4899.000070'.
            </para>
            </remarks>
            <exception cref="T:System.OverflowException" caption="OverflowException">
               The parameters specify a <strong>TdIntervalSecond</strong> value less than 
               <see cref="F:Teradata.Client.Provider.TdIntervalSecond.MinValue"/> or greater than <see cref="F:Teradata.Client.Provider.TdIntervalSecond.MaxValue"/>.
            </exception>
            <exception cref="T:System.ArgumentOutOfRangeException" caption="ArgumentOutOfRangeException">
               The <strong>precision</strong> or <strong>scale</strong> parameters are 
               outside the minimum or maximum range of values.
            </exception>
            <exception cref="T:System.ArgumentException" caption="ArgumentException">
               The <strong>precision</strong> parameter is not large enough to represent the number of seconds.
            </exception>
            <overloads>
               Initializes a new instance of <strong>TdIntervalSecond</strong>.
            </overloads>
            <param name="seconds">Number of seconds.</param>
            <param name="microseconds">The fractional number of seconds.</param>
            <param name="precision">Number of significant digits of the second.</param>
            <param name="scale">The number of decimal places for the second.</param>
        </member>
        <member name="M:Teradata.Client.Provider.TdIntervalSecond.#ctor(System.Int32)">
            <summary>
               An instance of <see cref="T:Teradata.Client.Provider.TdIntervalSecond"/> is created from the time  
               components specified as integers. 
            </summary>
            <remarks>
            <para>
               The number of seconds is constructed into a <strong>TdIntervalSecond</strong> 
               and evaluated against  <see cref="F:Teradata.Client.Provider.TdIntervalSecond.MinValue"/> and <see cref="F:Teradata.Client.Provider.TdIntervalSecond.MaxValue"/>. 
               The <see cref="P:Teradata.Client.Provider.TdIntervalSecond.Scale"/> is set to zero for this constructor. 
               The <see cref="P:Teradata.Client.Provider.TdIntervalSecond.Precision"/> is calculated from the number of digits 
               contained within the interval second component. 
            </para>
            <para>
               For example 300 seconds is first converted into a <strong>TdIntervalSecond</strong>
               and evaluated against <strong>MinValue</strong> and <strong>MaxValue</strong>.
               Precision is calculated to be a value of 3 representing three significant digits in 300 
               seconds. The scale is set to zero.
            </para>
            <para>
               Negative constructor parameters may be supplied to represent negative durations of time.
            </para>
            </remarks>
            <exception cref="T:System.OverflowException" caption="OverflowException">
               The parameters specify a <strong>TdIntervalSecond</strong> value less than 
               <see cref="F:Teradata.Client.Provider.TdIntervalSecond.MinValue"/> or greater than <see cref="F:Teradata.Client.Provider.TdIntervalSecond.MaxValue"/>.
            </exception>
            <param name="seconds">Number of seconds.</param>
        </member>
        <member name="M:Teradata.Client.Provider.TdIntervalSecond.#ctor(System.Int32,System.Int32)">
            <summary>
               An instance of <see cref="T:Teradata.Client.Provider.TdIntervalSecond"/> is created from the time  
               components specified as integers. 
            </summary>
            <remarks>
            <para>
               The number of seconds and microseconds are constructed into a
               <strong>TdIntervalSecond</strong> and evaluated against  <see cref="F:Teradata.Client.Provider.TdIntervalSecond.MinValue"/> and 
               <see cref="F:Teradata.Client.Provider.TdIntervalSecond.MaxValue"/>.  The microseconds parameter represents 10 ^-6 seconds
               and the microsecond parameter is divided by 10^-6 (.000001) to create a fractional number 
               of seconds. The <see cref="P:Teradata.Client.Provider.TdIntervalSecond.Scale"/> is then calculated from the number of fractional 
               seconds required. The <see cref="P:Teradata.Client.Provider.TdIntervalSecond.Precision"/> is calculated from the number of digits 
               contained within the interval second component. 
            </para>
            <para>
               For example 300 seconds and 455666 microseconds
               is first constructed into a <strong>TdIntervalSecond</strong> and evaluated against 
               <strong>MinValue</strong> and <strong>MaxValue</strong>. The  
               <strong>TdIntervalSecond</strong> literal representation results in a  
               <strong>TdIntervalSecond</strong> value of '300.455666'. 
               Precision is calculated to be a value of 3 representing three significant digits in 300 
               seconds. The scale is calculated to be 6 from the number of decimal places right 
               of the seconds interval which equals the <see cref="F:Teradata.Client.Provider.TdIntervalSecond.MaxScale"/> value.
            </para>
            <para>
               Negative constructor parameters may be supplied to represent negative durations of time.
               Mixed positive and negative constructor parameters are added together that result in a
               negative or positive <strong>TdIntervalSecond</strong>.  For instance, a second
               value of -4900, and a microsecond value of 30
               will result in a <strong>TdIntervalSecond</strong> interval value of
               -'4899.000070' with a calculated precision of 4 and a calculated scale of 6.
            </para>
            </remarks>
            <exception cref="T:System.OverflowException" caption="OverflowException">
               The parameters specify a <strong>TdIntervalSecond</strong> value less than 
               <see cref="F:Teradata.Client.Provider.TdIntervalSecond.MinValue"/> or greater than <see cref="F:Teradata.Client.Provider.TdIntervalSecond.MaxValue"/>.
            </exception>
            <param name="seconds">Number of seconds.</param>
            <param name="microseconds">The number of fractional seconds.</param>
        </member>
        <member name="M:Teradata.Client.Provider.TdIntervalSecond.#ctor(System.TimeSpan)">
            <summary>
               An instance of <see cref="T:Teradata.Client.Provider.TdIntervalSecond"/> is created from a <see cref="T:System.TimeSpan"/>.
            </summary>
            <remarks>
            <para>
               The  <strong>TimeSpan</strong> value is converted into a <see cref="T:Teradata.Client.Provider.TdIntervalSecond"/>
               and evaluated against <see cref="F:Teradata.Client.Provider.TdIntervalSecond.MinValue"/> and <see cref="F:Teradata.Client.Provider.TdIntervalSecond.MaxValue"/>.  The 
               <see cref="P:Teradata.Client.Provider.TdIntervalSecond.Precision"/> is then calculated from the number of digits contained within 
               the interval second component and the <see cref="P:Teradata.Client.Provider.TdIntervalSecond.Scale"/> is calculated from the number of 
               decimal places required to represent the fractional seconds.
            </para>
            <para>
               After conversion of the <strong>TimeSpan</strong> value into 
               <strong>TdIntervalSecond</strong>, any fractional seconds will be truncated
               according the the <see cref="F:Teradata.Client.Provider.TdIntervalSecond.MaxScale"/> value of 6 decimal places.
               For example, a TimeSpan value created with a <see cref="P:System.TimeSpan.Ticks"/> value
               of 8601234567 results in a value of 0 days, 0 hours, 14 minutes and 
               20.1234567 seconds.  The <strong>TdIntervalSecond</strong> literal 
               representation results in a <strong>TdIntervalSecond</strong> value of  
               '860.123456'. The .1234567 seconds value is truncated by  
               one significant digit. Precision is calculated to be a value of 3 representing three 
               significant digits in the second.
            </para>
            </remarks>
            <exception cref="T:System.OverflowException" caption="OverflowException">
               The <strong>timespan</strong> parameter specifies a <strong>TdIntervalSecond</strong> 
               value less than <see cref="F:Teradata.Client.Provider.TdIntervalSecond.MinValue"/> or greater than <see cref="F:Teradata.Client.Provider.TdIntervalSecond.MaxValue"/>.
            </exception>
            <param name="timeSpan">
               A <strong>TimeSpan</strong> to initialize <strong>TdIntervalSecond</strong>.
            </param>
        </member>
        <member name="M:Teradata.Client.Provider.TdIntervalSecond.#ctor(System.TimeSpan,System.Byte,System.Byte)">
            <summary>
               An instance of <see cref="T:Teradata.Client.Provider.TdIntervalSecond"/> is created using a <see cref="T:System.TimeSpan"/> 
               specifying the precision and the scale as bytes.
            </summary>
            <remarks>
            <para>
               The  <strong>TimeSpan</strong> value is converted into a <strong>TdIntervalSecond</strong> 
               and evaluated against <see cref="F:Teradata.Client.Provider.TdIntervalSecond.MinValue"/> and <see cref="F:Teradata.Client.Provider.TdIntervalSecond.MaxValue"/>.  If the values 
               are not exceeded but the resulting seconds component exceeds the supplied parameter 
               <paramref name="precision"/> value, an exception is generated.
            </para>
            <para>
               After conversion of the <strong>TimeSpan</strong> value into a
               <strong>TdIntervalSecond</strong>, any fractional seconds will be truncated
               according the the supplied parameter <paramref name="scale"/>.
            </para>
            <para>
               For example, a TimeSpan value created with a <see cref="P:System.TimeSpan.Ticks"/> value
               of 8601234567 results in a value of 0 days, 0 hours, 14 minutes and
               20.1234567 seconds.  The <strong>TdIntervalSecond</strong> literal 
               representation results in a <strong>TdIntervalSecond</strong> value of  
               '860.123456'. The .1234567 seconds value will truncated by  
               the supplied parameter <paramref name="scale"/>. The supplied parameter 
               <paramref name="precision"/> must be a value greater than or equal to 3 and 
               less than or equal to <see cref="F:Teradata.Client.Provider.TdIntervalSecond.MaxScale"/> to eliminate exceptions due to 
               truncation of the seconds component.
            </para>
            </remarks>
            <exception cref="T:System.OverflowException" caption="OverflowException">
               The <strong>timespan</strong> parameter specifies a <strong>TdIntervalSecond</strong> 
               value less than <see cref="F:Teradata.Client.Provider.TdIntervalSecond.MinValue"/> or greater than <see cref="F:Teradata.Client.Provider.TdIntervalSecond.MaxValue"/>.
            </exception>
            <exception cref="T:System.ArgumentOutOfRangeException" caption="ArgumentOutOfRangeException">
               The <strong>precision</strong> or <strong>scale</strong> parameters are outside 
               the minimum or maximum range of values.
            </exception>
            <exception cref="T:System.ArgumentException" caption="ArgumentException">
               The <strong>precision</strong> parameter is not large enough to represent the 
               number of seconds.
            </exception>        
            <param name="timeSpan">A TimeSpan to initialize <strong>TdIntervalSecond</strong>.</param>
            <param name="precision">Number of significant digits of the second.</param>
            <param name="scale">The number of decimal places for the second.</param>
        </member>
        <member name="M:Teradata.Client.Provider.TdIntervalSecond.CompareTo(Teradata.Client.Provider.TdIntervalSecond)">
            <summary>
               Compares this instance to the specified <see cref="T:Teradata.Client.Provider.TdIntervalSecond"/>  
               parameter <paramref name="other"/>.
            </summary>
            <returns>
               The result of the comparison is returned as a signed integer.
            </returns>
            <remarks>
            	<para>
                    The integer returned when this instance is compared to <paramref name="other"/>
                    indicates the following:
                </para>
            	<para>
            		<list type="table">
            			<listheader>
            				<term>Return Value</term>
            				<description>Meaning</description>
            			</listheader>
            			<item>
            				<term>Less than Zero</term>
            				<description>
            					<para>
                                    This instance is less than <paramref name="other"/>
                                </para>
            					<para>-or-</para>
            					<para>This instance is <see cref="F:Teradata.Client.Provider.TdIntervalSecond.Null"/> and
                                   <paramref name="other"/> is non-null.
                               </para>
            				</description>
            			</item>
            			<item>
            				<term>Zero</term>
            				<description>
            					<para>
                                    This instance is equal to <paramref name="other"/>
                                </para>
            					<para>-or-</para>
            					<para>
                                   This instance is <Strong>Null</Strong> and <paramref name="other"/> is
                                   <Strong>Null</Strong>.
                               </para>
            				</description>
            			</item>
            			<item>
            				<term>Greater than Zero</term>
            				<description>
            					<para>
                                    This instance is greater than
                                    <paramref name="other"/>
                                </para>
            					<para>-or-</para>
            					<para>
            						<paramref name="other"/> is <Strong>Null</Strong> and this instance is non-null.
                                </para>
            				</description>
            			</item>
            		</list>
            	</para>
            </remarks>
            <param name="other">The <strong>TdIntervalSecond</strong> to compare.</param>
        </member>
        <member name="M:Teradata.Client.Provider.TdIntervalSecond.CompareTo(System.Object)">
            <summary>
               Compares this instance to the specified <see cref="T:Teradata.Client.Provider.TdIntervalSecond"/> 
               parameter <paramref name="obj"/>. 
            </summary>
            <returns>
               The result of the comparison is returned as a signed integer.
            </returns>
            <remarks>
            	<para>
                    The integer returned when this instance is compared to <paramref name="obj"/>
                    indicates the following:
                </para>
            	<para>
            		<list type="table">
            			<listheader>
            				<term>Return Value</term>
            				<description>Meaning</description>
            			</listheader>
            			<item>
            				<term>Less than Zero</term>
            				<description>
            					<para>This instance is less than <paramref name="obj"/></para>
            					<para>-or-</para>
            					<para>This instance is <see cref="F:Teradata.Client.Provider.TdIntervalSecond.Null"/> and <paramref name="obj"/> is non-null.</para>
            				</description>
            			</item>
            			<item>
            				<term>Zero</term>
            				<description>
            					<para>
                                    This instance is equal to <paramref name="obj"/>
                                </para>
            					<para>-or-</para>
            					<para>
                                   This instance is <Strong>Null</Strong> and <paramref name="obj"/> is
                                   <Strong>Null</Strong>.
                               </para>
            				</description>
            			</item>
            			<item>
            				<term>Greater than Zero</term>
            				<description>
            					<para>
                                    This instance is greater than <paramref name="obj"/>.
                                </para>
            					<para>-or-</para>
            					<para>
            						<paramref name="obj"/> is <Strong>Null</Strong> and this instance is non-null
                                </para>
            					<para>-or-</para>
            					<para>
            						<paramref name="obj"/> is a <c>null</c> reference.
                                </para>
            				</description>
            			</item>
            		</list>
            	</para>
              <para>
                <paramref name="obj"/> must be an instance of <strong>TdIntervalSecond</strong> 
                type or <c>null</c> reference.
              </para>
            </remarks>
            <exception cref="T:System.ArgumentException">
               <paramref name="obj"/> is not of same type as <strong>TdIntervalSecond</strong>.
            </exception>
            <seealso cref="M:Teradata.Client.Provider.TdIntervalSecond.CompareTo(Teradata.Client.Provider.TdIntervalSecond)"/>
            <overloads>
               Compares this instance to the supplied <strong>TdIntervalSecond</strong> 
               and returns whether this instance  is less than, equal or greater than the supplied 
               <strong>TdIntervalSecond</strong>.
            </overloads>
            <param name="obj">A <strong>TdIntervalSecond</strong> object to compare.</param>
        </member>
        <member name="M:Teradata.Client.Provider.TdIntervalSecond.Equals(Teradata.Client.Provider.TdIntervalSecond)">
            <summary>
               Compares this instance and another <see cref="T:Teradata.Client.Provider.TdIntervalSecond"/> to determine 
               whether they are equal. 
            </summary>
            <returns>
               <c>true</c> if the two <strong>TdIntervalSecond</strong> objects are equal, 
               <c>false</c> otherwise.
            </returns>
            <remarks>
            	<para>
            		The return value is <c>true</c> if the instance is 
                    equal to the <paramref name="other"/>, <c>false</c> otherwise.
                </para>
            	<para>
            		<list type="table">
            			<listheader>
            				<term>Return Value</term>
            				<description>Description</description>
            			</listheader>
            			<item>
            				<term><c>true</c></term>
                            <description>
                                <para>This instance and <paramref name="other"/> are <see cref="F:Teradata.Client.Provider.TdIntervalSecond.Null"/></para>
                                <para>-or-</para>
                                <para>This instance is equal to <paramref name="other"/>.</para>
                            </description>
            			</item>
            			<item>
            				<term><c>false</c></term>
                            <description>
                            <para>
                               This instance is <strong>Null</strong> and <paramref name="other"/> 
                               is not <strong>Null</strong>
                            </para>
                            <para>-or-</para>
                            <para>
                               This instance is not <strong>Null</strong> and <paramref name="other"/> 
                               is <strong>Null</strong>
                            </para>
                            <para>-or-</para>
                            <para>This instance is not equal to <paramref name="other"/>.</para>
                            </description>
            			</item>
            		</list>
            	</para>
            </remarks>
            <overloads>
               Returns a value indicating whether two instances of 
               <strong>TdIntervalSecond</strong> are equal.
            </overloads>
            <param name="other">
               <strong>TdIntervalSecond</strong> that will be compared to this instance 
               of <strong>TdIntervalSecond</strong>.
            </param>
        </member>
        <member name="M:Teradata.Client.Provider.TdIntervalSecond.Equals(Teradata.Client.Provider.TdIntervalSecond,Teradata.Client.Provider.TdIntervalSecond)">
            <summary>
               Compares two <see cref="T:Teradata.Client.Provider.TdIntervalSecond"/> instances to determine 
               whether they are equal.
            </summary>
            <returns>
               <c>true</c> if the two <strong>TdIntervalSecond</strong> instances are equal, 
               <c>false</c> otherwise.
            </returns>
            <remarks>
            	<para>
            		The return value is <c>true</c> if the <paramref name="left"/> is 
                    equal to the <paramref name="right"/>, <c>false</c> otherwise.
                </para>
            	<para>
            		<list type="table">
            			<listheader>
            				<term>Return Value</term>
            				<description>Description</description>
            			</listheader>
            			<item>
            				<term><c>true</c></term>
                            <description>
                                <para><paramref name="left"/> is equal to <paramref name="right"/></para>
                                <para>-or-</para>
                                <para>
                                   <paramref name="left"/> and <paramref name="right"/> are <see cref="F:Teradata.Client.Provider.TdIntervalSecond.Null"/>.
                                </para>
                            </description>
            			</item>
            			<item>
            				<term><c>false</c></term>
                            <description>
                              <para><paramref name="left"/> is not equal to <paramref name="right"/></para>
                              <para>-or-</para>
                              <para>
                                   <paramref name="left"/> is not <strong>Null</strong> and <paramref name="right"/> 
                                   is <strong>Null</strong>
                               </para>
                              <para>-or-</para>
                              <para>
                                   <paramref name="left"/> is <strong>Null</strong> and <paramref name="right"/> 
                                   is not <strong>Null</strong>.
                               </para>
                            </description>
            			</item>
            		</list>
            	</para>
            </remarks>
            <example>
                The following code example uses various comparison methods and operators.
                <code lang="CS">
            TdIntervalSecond firstInterval = new TdIntervalSecond(5, 15);
            TdIntervalSecond secondInterval = new TdIntervalSecond(20, 15);
             
            // The following comparison methods and operators are equivalent
            if (false == TdIntervalSecond.Equals(firstInterval, secondInterval) ||
                firstInterval != secondInterval ||
                true == TdIntervalSecond.NotEquals(firstInterval, secondInterval) )
            {
               Console.WriteLine(“firstInterval does not equal secondInterval”);
            }
                </code>
            </example>
            <overloads>
               Returns a value indicating whether two instances of <strong>TdIntervalSecond</strong> are equal.
            </overloads>
            <param name="left">A <strong>TdIntervalSecond</strong> instance.</param>
            <param name="right">A <strong>TdIntervalSecond</strong> instance.</param>
        </member>
        <member name="M:Teradata.Client.Provider.TdIntervalSecond.Compare(Teradata.Client.Provider.TdIntervalSecond,Teradata.Client.Provider.TdIntervalSecond)">
            <summary>
                Two <see cref="T:Teradata.Client.Provider.TdIntervalSecond"/> intervals are compared and a value is 
                returned that indicates <paramref name="left"/> is greater than, less than or equal to
                <paramref name="right"/>.
            </summary>
            <returns>
               The result of the comparison is returned as a signed integer.
            </returns>
            <remarks>
            	<list type="table">
            		<listheader>
            			<term>Return Value</term>
            			<description>Description</description>
            		</listheader>
            		<item>
            			<term>Less than Zero</term>
            			<description>
                           <para><paramref name="left"/> is less than <paramref name="right"/></para>
            				<para>-or-</para>
                           <para>
                              <paramref name="left"/> is <see cref="F:Teradata.Client.Provider.TdIntervalSecond.Null"/>
                              and <paramref name="right"/> is not <strong>Null</strong>.
                           </para>
                        </description>
            		</item>
            		<item>
            			<term>Zero</term>
            			<description>
            				<para><paramref name="left"/> equals <paramref name="right"/></para>
            				<para>-or-</para>
                           <para>
                                <paramref name="left"/> is <strong>Null</strong> 
                                 and <paramref name="right"/> is <strong>Null</strong>.
                           </para>
                        </description>
            		</item>
            		<item>
            			<term>Greater than Zero</term>
            			<description>
            				<para><paramref name="left"/> is greater than <paramref name="right"/></para>
            				<para>-or-</para>
            				<para><paramref name="left"/> is not <strong>Null</strong> and
                            <paramref name="right"/> is <strong>Null</strong>.</para>
                        </description>
            		</item>
            	</list>
            </remarks>
            <param name="left">An instance of <strong>TdIntervalSecond</strong>.</param>
            <param name="right">An instance of <strong>TdIntervalSecond</strong>.</param>
        </member>
        <member name="M:Teradata.Client.Provider.TdIntervalSecond.NotEquals(Teradata.Client.Provider.TdIntervalSecond,Teradata.Client.Provider.TdIntervalSecond)">
            <summary>
                Compares two <see cref="T:Teradata.Client.Provider.TdIntervalSecond"/> interval types to determine 
                whether the <paramref name="left"/> is not equal to <paramref name="right"/>.
            </summary>
            <returns>
            	<para>
            		<c>true</c> indicates <paramref name="left"/> is not equal to
                    <paramref name="right"/>, <c>false</c> otherwise.
                </para>
            	<para>
            		<list type="table">
            			<listheader>
            				<term>Return Value</term>
            				<description>Description</description>
            			</listheader>
            			<item>
            				<term><c>true</c></term>
            				<description>
            					<para>
            						<paramref name="left"/> is less than or greater
                                    than <paramref name="right"/>
            					</para>
            					<para>-or-</para>
            					<para>
            						Either <paramref name="left"/> or <paramref name="right"/> is
                                   <see cref="F:Teradata.Client.Provider.TdIntervalSecond.Null"/>.
                               </para>
            				</description>
            			</item>
            			<item>
            				<term><c>false</c></term>
            				<description>
            					<para>
            						<paramref name="left"/> is equal to
                                    <paramref name="right"/>
            					</para>
            					<para>-or-</para>
            					<para>
            						<paramref name="left"/> and <paramref name="right"/> are
                                   <strong>Null</strong>.
                               </para>
            				</description>
            			</item>
            		</list>
            	</para>
            </returns>
            <param name="left">An instance of <strong>TdIntervalSecond</strong>.</param>
            <param name="right">An instance of <strong>TdIntervalSecond</strong>.</param>
        </member>
        <member name="M:Teradata.Client.Provider.TdIntervalSecond.GreaterThan(Teradata.Client.Provider.TdIntervalSecond,Teradata.Client.Provider.TdIntervalSecond)">
            <summary>
               Determines whether the <paramref name="left"/> is greater than the <paramref name="right"/>.
            </summary>
            <returns>
            	<para>
            		<c>true</c> indicates the <paramref name="left"/> is greater than
                    the <paramref name="right"/>, <c>false</c> otherwise.
                </para>
            	<para>
            		<list type="table">
            			<listheader>
            				<term>Return Value</term>
            				<description>Description</description>
            			</listheader>
            			<item>
            				<term><c>true</c></term>
            				<description>
            					<paramref name="left"/> and
                                <paramref name="right"/> are not
                                <see cref="F:Teradata.Client.Provider.TdIntervalSecond.Null"/> and
                                <paramref name="left"/> is greater than
                                <paramref name="right"/>.
            				</description>
            			</item>
            			<item>
            				<term><c>false</c></term>
            				<description>
            					<para>
                                    The <paramref name="left"/> is less than or equal
                                    to <paramref name="right"/>
            					</para>
            					<para>-or-</para>
            					<para>
                                   <paramref name="left"/> and / or <paramref name="right"/>
                                   is <strong>Null</strong>.
                                </para>
            				</description>
            			</item>
            		</list>
            	</para>
            </returns>
            <remarks>
            	<para>
                    Comparison operators always return <c>false</c> if one of the operands is
                    <strong>Null</strong>. Therefore you should not assume that the reverse
                    condition is <c>true</c>. For example you cannot assume that the
                    <paramref name="left"/> is less than or equal to the
                    <paramref name="right"/> if <c>GreaterThan</c> returns <c>false</c>.
                </para>
            	<para>
                    The reverse condition is <c>true</c> when the
                    <paramref name="left"/> and the
                    <paramref name="right"/> are not <strong>Null</strong>.
                </para>
            </remarks>
            <param name="left">An instance of <see cref="T:Teradata.Client.Provider.TdIntervalSecond"/>.</param>
            <param name="right">An instance of <strong>TdIntervalSecond</strong>.</param>
        </member>
        <member name="M:Teradata.Client.Provider.TdIntervalSecond.GreaterThanOrEqual(Teradata.Client.Provider.TdIntervalSecond,Teradata.Client.Provider.TdIntervalSecond)">
            <summary>
               This operator determines whether the <paramref name="left"/> is greater than or 
               equal to the <paramref name="right"/>.
            </summary>
            <returns>
            	<para>
            		<c>true</c> indicates the <paramref name="left"/> is greater than
                    or equal to the <paramref name="right"/>, <c>false</c> otherwise.
                </para>
            	<para>
            		<list type="table">
            			<listheader>
            				<term>Return Value</term>
            				<description>Description</description>
            			</listheader>
            			<item>
            				<term><c>true</c></term>
            				<description>
            					<para>
            						<paramref name="left"/> and
                                    <paramref name="right"/> are not
                                    <see cref="F:Teradata.Client.Provider.TdIntervalSecond.Null"/> and
                                    <paramref name="left"/> is greater than or equal
                                    to <paramref name="right"/>
            					</para>
            					<para>-or-</para>
            					<para>
            						<paramref name="left"/> is <strong>Null</strong>
                                    and <paramref name="right"/> is
                                    <strong>Null</strong>.
            					</para>
            				</description>
            			</item>
            			<item>
            				<term><c>false</c></term>
            				<description>
            					<para>
                                    The <paramref name="left"/> is less than
                                    <paramref name="right"/>
            					</para>
            					<para>-or-</para>
            					<para>
                                    Either <paramref name="left"/> or
                                    <paramref name="right"/> is <strong>Null</strong>.
            					</para>
            				</description>
            			</item>
            		</list>
            	</para>
            </returns>
            <remarks>
            	<para>
                    Comparison operators always return <c>false</c> if one of the operands is
                    <strong>Null</strong>. Therefore you should not assume that the reverse
                    condition is <c>true</c>. For example you cannot assume that the
                    <paramref name="left"/> is less than the
                    <paramref name="right"/> if the <c>GreaterThanOrEqual</c> method returns
                    <c>false</c>.
                </para>
            	<para>
                    The reverse condition is <c>true</c> when the
                    <paramref name="left"/> and the
                    <paramref name="right"/> are not <strong>Null</strong>.
                </para>
            </remarks>
            <param name="left">An instance of <see cref="T:Teradata.Client.Provider.TdIntervalSecond"/>.</param>
            <param name="right">An instance of <strong>TdIntervalSecond</strong>.</param>
        </member>
        <member name="M:Teradata.Client.Provider.TdIntervalSecond.LessThan(Teradata.Client.Provider.TdIntervalSecond,Teradata.Client.Provider.TdIntervalSecond)">
            <summary>
               This method determines whether the <paramref name="left"/> is less than 
               the <paramref name="right"/>.
            </summary>
            <returns>
            	<para>
            		<c>true</c> indicates the <paramref name="left"/> is less than
                    the <paramref name="right"/>, <c>false</c> otherwise.
                </para>
            	<para>
            		<list type="table">
            			<listheader>
            				<term>Return Value</term>
            				<description>Description</description>
            			</listheader>
            			<item>
            				<term><c>true</c></term>
            				<description>
            					<paramref name="left"/> and <paramref name="right"/> are
                                not <see cref="F:Teradata.Client.Provider.TdIntervalSecond.Null"/> and
                                <paramref name="left"/> is less than
                                <paramref name="right"/>.
            				</description>
            			</item>
            			<item>
            				<term><c>false</c></term>
            				<description>
            					<para>
                                    The <paramref name="left"/> is greater than or
                                    equal to <paramref name="right"/>
            					</para>
            					<para>-or-</para>
            					<para>
                                    <paramref name="left"/> and / or <paramref name="right"/> is
                                    <strong>Null</strong>.
            					</para>
            				</description>
            			</item>
            		</list>
            	</para>
            </returns>
            <remarks>
            	<para>
                    Comparison operators always return <c>false</c> if one of the operands is
                    <strong>Null</strong>. Therefore you should not assume that the reverse
                    condition is <c>true</c>. For example you cannot assume that the
                    <paramref name="left"/> is greater than or equal to the
                    <paramref name="right"/> if the <c>LessThan</c> method returns
                    <c>false</c>.
                </para>
            	<para>
                    The reverse condition is <c>true</c> when the
                    <paramref name="left"/> and the
                    <paramref name="right"/> are not <strong>Null</strong>.
                </para>
            </remarks>
            <param name="left">An instance of <see cref="T:Teradata.Client.Provider.TdIntervalSecond"/>.</param>
            <param name="right">An instance of <strong>TdIntervalSecond</strong>.</param>
        </member>
        <member name="M:Teradata.Client.Provider.TdIntervalSecond.LessThanOrEqual(Teradata.Client.Provider.TdIntervalSecond,Teradata.Client.Provider.TdIntervalSecond)">
            <summary>
                This method determines whether the <paramref name="left"/> is less
                than or equal to the <paramref name="right"/>.
            </summary>
            <returns>
            	<para>
            		<c>true</c> indicates the <paramref name="left"/> is less than or
                    equal to the <paramref name="right"/>, <c>false</c> otherwise.
                </para>
            	<para>
            		<list type="table">
            			<listheader>
            				<term>Return Value</term>
            				<description>Description</description>
            			</listheader>
            			<item>
            				<term><c>true</c></term>
            				<description>
            					<para>
            						<paramref name="left"/> and
                                    <paramref name="right"/> are not
                                    <see cref="F:Teradata.Client.Provider.TdIntervalSecond.Null"/> and
                                    <paramref name="left"/> is less than or equal to
                                    <paramref name="right"/>
            					</para>
            					<para>-or-</para>
            					<para>
            						<paramref name="left"/> is <strong>Null</strong>
                                    and <paramref name="right"/> is
                                    <strong>Null</strong>.
            					</para>
            				</description>
            			</item>
            			<item>
            				<term><c>false</c></term>
            				<description>
            					<para>
                                    The <paramref name="left"/> is greater than
                                    <paramref name="right"/>
            					</para>
            					<para>-or-</para>
            					<para>
                                    Either <paramref name="left"/> or
                                    <paramref name="right"/> is <strong>Null</strong>.
            					</para>
            				</description>
            			</item>
            		</list>
            	</para>
            </returns>
            <remarks>
            	<para>
                    Comparison operators always return <c>false</c> if one of the operands is
                    <strong>Null</strong>. Therefore you should not assume that the reverse
                    condition is <c>true</c>. For example you cannot assume that the
                    <paramref name="left"/> is greater than the
                    <paramref name="right"/> if the <c>LessThanOrEqual</c> method returns
                    <c>false</c>.
                </para>
            	<para>
                    The reverse condition is <c>true</c> when the
                    <paramref name="left"/> and the
                    <paramref name="right"/> are not <strong>Null</strong>.
                </para>
            </remarks>
            <param name="left">An instance of <see cref="T:Teradata.Client.Provider.TdIntervalSecond"/>.</param>
            <param name="right">An instance of <strong>TdIntervalSecond</strong>.</param>
        </member>
        <member name="M:Teradata.Client.Provider.TdIntervalSecond.Equals(System.Object)">
            <summary>
               Compares this instance and <paramref name="obj"/> to determine whether they
               are equal. 
            </summary>
            <returns>
               <c>true</c> if the two <see cref="T:Teradata.Client.Provider.TdIntervalSecond"/>s are equal, 
               <c>false</c> otherwise.
            </returns>
            <remarks>
            	<para>
                    The return value is <c>true</c> if the instance is equal to the
                    <paramref name="obj"/>, <c>false</c> otherwise.
                </para>
            	<para>
            		<list type="table">
            			<listheader>
            				<term>Return Value</term>
            				<description>Description</description>
            			</listheader>
            			<item>
            				<term>
            					<c>true</c>
            				</term>
            				<description>
            					<para>
                                    This instance and <paramref name="obj"/> are
                                    <see cref="F:Teradata.Client.Provider.TdIntervalSecond.Null"/>.
                                </para>
            					<para>-or-</para>
            					<para>
                                    This instance is equal to <paramref name="obj"/>.
                                </para>
            				</description>
            			</item>
            			<item>
            				<term>
            					<c>false</c>
            				</term>
            				<description>
            					<para>
                                    This instance is not equal to
                                    <paramref name="obj"/>.
                                </para>
            					<para>-or-</para>
            					<para>
                                    This instance is not <strong>Null</strong> and
                                    <paramref name="obj"/> is <strong>Null</strong>.
                                </para>
            					<para>-or-</para>
            					<para>
                                    This instance is <strong>Null</strong> and
                                    <paramref name="obj"/> is not <strong>Null</strong>
            					</para>
            					<para>-or-</para>
            					<para>
            						<paramref name="obj"/> is a <strong>null</strong>
                                    reference.
                                </para>
            				</description>
            			</item>
            		</list>
            	</para>
            </remarks>
            <example>
                The following code example uses various comparison methods and operators.
                <code lang="CS">
            // Create TdIntervalSecond with 121 minutes, 30 seconds, 500 microseconds
            // default precision and scale
            TdIntervalSecond firstInterval = new TdIntervalSecond(7290, 500);
            // Create TdIntervalSecond with 50 minutes, 30 seconds, 900 microseconds
            // default precision and scale
            Object intervalObj = new TdIntervalSecond(3030, 900);
             
            // The following comparison methods and operators are equivalent
            if (false == TdIntervalSecond.Equals(firstInterval, (TdIntervalSecond)intervalObj) ||
                firstInterval != (TdIntervalSecond)intervalObj ||
                false == firstInterval.Equals(intervalObj) )
            {
               Console.WriteLine(“firstInterval does not equal intervalObj”);
            }
                </code>
            </example>
            <overloads>
               Returns a value indicating whether two instances of <strong>TdIntervalSecond</strong> are equal.
            </overloads>
            <param name="obj">
               <strong>TdIntervalSecond</strong> that will be compared to this instance 
               of <strong>TdIntervalSecond</strong>.
            </param>
        </member>
        <member name="M:Teradata.Client.Provider.TdIntervalSecond.GetHashCode">
            <summary>
               Returns the hash code for this instance. 
            </summary>
            <returns>The hash code is returned.</returns>
        </member>
        <member name="M:Teradata.Client.Provider.TdIntervalSecond.ToString(System.String)">
            <summary>
               Converts this instance to its equivalent String representation using the specified format.
            </summary>
            <remarks>
            	<para>This method supports the following format specifiers:</para>
            	<para>
            		<list type="table">
            			<listheader>
            				<term>Format Specifier</term>
            				<description>Description</description>
            			</listheader>
            			<item>
            				<term>G</term>
            				<description>
            					<para>General interval format.</para>
            					<para>[sign][seconds].[ffffff]</para>
            				</description>
            			</item>
            			<item>
            				<term>L</term>
            				<description>
            					<para>Teradata literal format. This string may be used in
                                generating SQL against the Teradata database.</para>
            					<para>INTERVAL [sign]'[seconds].[ffffff]' SECOND</para>
            				</description>
            			</item>
            		</list>
            	</para>
            	<para>Below is the description of each format item.</para>
            	<para>
            		<list type="table">
            			<listheader>
            				<term>Format Item</term>
            				<description>Description</description>
            			</listheader>
            			<item>
            				<term>sign</term>
            				<description>If negative a minus sign will be displayed.</description>
            			</item>
            			<item>
            				<term>seconds</term>
            				<description>The number of seconds (one to four digits in length).</description>
            			</item>
            			<item>
            				<term>ffffff</term>
            				<description>The number of fractional seconds (0 to 6
                            digits in length).</description>
            			</item>
            		</list>
            	</para>
            	<para>
                    Cultural settings are not supported.
                </para>
            </remarks>
            <returns>
               A string representation of the <strong>TdIntervalSecond</strong> will be returned.
            </returns>
            <exception cref="T:System.FormatException" caption="FormatException">
               <paramref name="format"/> contains an invalid format specifier.
            </exception>
            <param name="format">
               The format string that will be used to format the 
               <strong>TdIntervalSecond</strong>. 
            </param>
        </member>
        <member name="M:Teradata.Client.Provider.TdIntervalSecond.ToString">
            <summary>
               Converts this instance to its equivalent String representation.
            </summary>
            <remarks>
            	<para>This method supports the following format specifiers:</para>
            	<para>
            		<list type="table">
            			<listheader>
            				<term>Format Specifier</term>
            				<description>Description</description>
            			</listheader>
            			<item>
            				<term>G</term>
            				<description>
            					<para>General interval format.</para>
            					<para>[sign][seconds].[ffffff]</para>
            				</description>
            			</item>
            			<item>
            				<term>L</term>
            				<description>
            					<para>Teradata literal format. This string may be used in
                                generating SQL against the Teradata database.</para>
            					<para>INTERVAL [sign]&apos;[seconds].[ffffff]&apos; SECOND</para>
            				</description>
            			</item>
            		</list>
            	</para>
            	<para>Below is the description of each format item.</para>
            	<para>
            		<list type="table">
            			<listheader>
            				<term>Format Item</term>
            				<description>Description</description>
            			</listheader>
            			<item>
            				<term>sign</term>
            				<description>If negative a minus sign will be displayed.</description>
            			</item>
            			<item>
            				<term>seconds</term>
            				<description>The number of seconds (one to four digits in length).</description>
            			</item>
            			<item>
            				<term>ffffff</term>
            				<description>The number of fractional seconds (0 to 6
                            digits in length).</description>
            			</item>
            		</list>
            	</para>
            </remarks>
            <returns>
               A string representation of the <strong>TdIntervalSecond</strong> will be returned.
            </returns>
        </member>
        <member name="M:Teradata.Client.Provider.TdIntervalSecond.Parse(System.String)">
            <summary>
               The specified string is converted into an equivalent <see cref="T:Teradata.Client.Provider.TdIntervalSecond"/>.
            </summary>
            <returns>
               A <strong>TdIntervalSecond</strong> is returned that is equivalent to the 
               <strong>TdIntervalSecond</strong> contained in the input string.
            </returns>
            <exception cref="T:System.FormatException" caption="FormatException">
               <paramref name="value"/> cannot be converted into a <strong>TdIntervalSecond</strong> 
               interval.
            </exception>
            <exception cref="T:System.ArgumentNullException" caption="ArgumentNullException">
               <paramref name="value"/> is a <c>null</c> reference.
            </exception>
            <exception cref="T:System.OverflowException">
               The resultant operation returns a value greater than the <see cref="F:Teradata.Client.Provider.TdIntervalSecond.MaxValue"/> 
               or less than the <see cref="F:Teradata.Client.Provider.TdIntervalSecond.MinValue"/>.
            </exception>
            <remarks>
            	<para>This method supports the following string formats:</para>
            	<para>
            		<list type="table">
            			<listheader>
            				<term>String Format</term>
            				<description>Description</description>
            			</listheader>
            			<item>
            				<term>G</term>
            				<description>
            					<para>General interval format.</para>
            					<para>[sign][seconds].[ffffff]</para>
            				</description>
            			</item>
            			<item>
            				<term>L</term>
            				<description>
            					<para>Teradata literal format. This string may be used in
                                generating SQL against the Teradata database.</para>
            					<para>INTERVAL [sign]'[seconds].[ffffff]' SECOND</para>
            				</description>
            			</item>
            		</list>
            	</para>
            	<para>Below is the description of each format item.</para>
            	<para>
            		<list type="table">
            			<listheader>
            				<term>Format Item</term>
            				<description>Description</description>
            			</listheader>
            			<item>
            				<term>sign</term>
            				<description>Optional - . Defaults as space character (+).</description>
            			</item>
            			<item>
            				<term>seconds</term>
            				<description>Required number of seconds (one to four digits in length).</description>
            			</item>
            			<item>
            				<term>ffffff</term>
            				<description>Optionally the number of fractional seconds (0 to 6
                            digits in length).</description>
            			</item>
            		</list>
            	</para>
            	<para>
                    Cultural settings are not supported.
            	</para>
            	<para>
            		While parsing the <paramref name="value"/> the <see cref="P:Teradata.Client.Provider.TdIntervalSecond.Precision"/> will be
            		set to the number of digits contained within the seconds component.  The 
            		<see cref="P:Teradata.Client.Provider.TdIntervalSecond.Scale"/> will be set to the number of digits in the fractional
            		seconds component (digits that are to the right of the decimal point).
            	</para>
            	<para>
            		For example a <paramref name="value"/> of "40.1234" will
            		contain a precision of 2 and a scale of 4.
            	</para>
            </remarks>
            <overloads>
            	The specified string is converted into an equivalent 
               <strong>TdIntervalSecond</strong> interval.
            </overloads>
            <param name="value">
               A string to be converted into a <strong>TdIntervalSecond</strong>.
            </param>
        </member>
        <member name="M:Teradata.Client.Provider.TdIntervalSecond.TryParse(System.String,Teradata.Client.Provider.TdIntervalSecond@)">
            <summary>
               The specified string is converted into an equivalent <see cref="T:Teradata.Client.Provider.TdIntervalSecond"/>. 
            </summary>
            <returns>
                <c>true</c> if the conversion of <paramref name="value"/> succeeded, 
                <c>false</c> otherwise.
            </returns>
            <remarks>
            	<para>This method supports the following string formats:</para>
            	<para>
            		<list type="table">
            			<listheader>
            				<term>String Format</term>
            				<description>Description</description>
            			</listheader>
            			<item>
            				<term>G</term>
            				<description>
            					<para>General interval format.</para>
            					<para>[sign][seconds].[ffffff]</para>
            				</description>
            			</item>
            			<item>
            				<term>L</term>
            				<description>
            					<para>Teradata literal format. This string may be used in
                                generating SQL against the Teradata database.</para>
            					<para>INTERVAL [sign]'[seconds].[ffffff]' SECOND</para>
            				</description>
            			</item>
            		</list>
            	</para>
            	<para>Below is the description of each format item.</para>
            	<para>
            		<list type="table">
            			<listheader>
            				<term>Format Item</term>
            				<description>Description</description>
            			</listheader>
            			<item>
            				<term>sign</term>
            				<description>Optional - . Defaults as space character (+).</description>
            			</item>
            			<item>
            				<term>seconds</term>
            				<description>Required number of seconds (one to four digits in length).</description>
            			</item>
            			<item>
            				<term>ffffff</term>
            				<description>Optionally the number of fractional seconds (0 to 6
                            digits in length).</description>
            			</item>
            		</list>
            	</para>
            	<para>
                    Cultural settings are not supported.
            	</para>
            	<para>
            		While parsing the <paramref name="value"/> the <see cref="P:Teradata.Client.Provider.TdIntervalSecond.Precision"/> will be
            		set to the number of digits contained within the second component.  The 
            		<see cref="P:Teradata.Client.Provider.TdIntervalSecond.Scale"/> will be set to the number of digits in the fractional
            		seconds component (digits that are to the right of the decimal point).
            	</para>
            	<para>
            		For example a <paramref name="value"/> of "40.1234" will
            		contain a precision of 2 and a scale of 4.
            	</para>
            </remarks>
            <overloads>
               The specified string is converted into an equivalent 
               <see cref="T:Teradata.Client.Provider.TdIntervalSecond"/> interval.  A <c>true</c> is returned 
               if the conversion succeeded, <c>false</c> otherwise.
            </overloads>
            <param name="value">A string to be converted into a <strong>TdIntervalSecond</strong>.</param>
            <param name="result">The converted string into a <strong>TdIntervalSecond</strong>.</param>
        </member>
        <member name="M:Teradata.Client.Provider.TdIntervalSecond.GetXmlSchema(System.Xml.Schema.XmlSchemaSet)">
             <summary>
                Gets the XML Qualified name for <see cref="T:Teradata.Client.Provider.TdIntervalSecond"/> XML type mapping.
             </summary>
             <param name="xmlSchemaSet">
                Holds zero or more XML Schema definition language (XSD) schemas.
             </param>
             <returns>
                Returns <strong>xs:duration</strong>.
             </returns>
             <example>
             This example shows how to use the <strong>TdIntervalSecond</strong> with <see cref="T:System.Xml.Serialization.XmlSerializer"/> class.
             <see cref="T:System.Xml.Serialization.XmlElementAttribute"/> is used to indicate that the Teradata Database column can be <strong>Null</strong>.
             <code>
              public class Order
              {
                  public TdTimestamp Date;
             
                  public TdIntervalSecond ExpirationPeriod;
             
                  public TdTimestamp ExpirationDate;
            
                  public Int32 ProductId;
            
                  public Int32 Quantity;
            
                  public Int32? BackOrderQuantity;
            
                  [XmlElementAttribute(IsNullable = true)]        
                  public TdDecimal BackOrderPrice;
              }
             
              internal class OrderWriter
              {
              
                  public static void Write()
                  {
                      // Setup the order
                      Order x = new Order();
              
                      x.Date = new TdTimestamp(DateTime.Today);
                      // 2 hours and 4 minutes 30 seconds
                      x.ExpirationPeriod = new TdIntervalSecond(7470, 0);
                      x.ExpirationDate = x.Date + x.ExpirationPeriod;
                      x.ProductId = 100;
                      x.Quantity = 2000;
                      x.BackOrderQuantity = null;
                      x.BackOrderPrice = TdDecimal.Null;
            
                      // Write out today's orders to the file.
                      //
                      // Open the file.
                      XmlWriterSettings settings = new XmlWriterSettings();
                      settings.Indent = true;
                      XmlWriter writer = XmlWriter.Create(@"C:\Temp\TodayOrders.XML", settings);
                      writer.WriteStartElement("TodayOrders");
                
                      // Write out the schema.
                      XmlSchemas schemas = new XmlSchemas();
                      XmlSchemaExporter schExporter = new XmlSchemaExporter(schemas);
                      schExporter.ExportTypeMapping(new XmlReflectionImporter().ImportTypeMapping(typeof(Order)));
                      schemas[0].Write(writer);
            
                      // Write out the orders.
                      XmlSerializer xml = new XmlSerializer(typeof(Order));
                      xml.Serialize(writer, x);
              
                      // Close the document.
                      writer.WriteEndDocument();
                      writer.Close();
                  }
              }
             
              /* Output is:
             
              &lt;TodayOrders&gt;
                &lt;xs:schema elementFormDefault="qualified" xmlns:xs="http://www.w3.org/2001/XMLSchema"&gt;
                  &lt;xs:element name="Order" nillable="true" type="Order" /&gt;
                  &lt;xs:complexType name="Order"&gt;
                    &lt;xs:sequence&gt;
                      &lt;xs:element minOccurs="1" maxOccurs="1" name="Date" type="xs:dateTime" /&gt;
                      &lt;xs:element minOccurs="1" maxOccurs="1" name="ExpirationPeriod" type="xs:duration" /&gt;
                      &lt;xs:element minOccurs="1" maxOccurs="1" name="ExpirationDate" type="xs:dateTime" /&gt;
                      &lt;xs:element minOccurs="1" maxOccurs="1" name="ProductId" type="xs:int" /&gt;
                      &lt;xs:element minOccurs="1" maxOccurs="1" name="Quantity" type="xs:int" /&gt;
                      &lt;xs:element minOccurs="1" maxOccurs="1" name="BackOrderQuantity" nillable="true" type="xs:int" /&gt;
                      &lt;xs:element minOccurs="1" maxOccurs="1" name="BackOrderPrice" nillable="true" type="xs:decimal" /&gt;
                    &lt;/xs:sequence&gt;
                  &lt;/xs:complexType&gt;
                &lt;/xs:schema&gt;
                &lt;Order xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xmlns:xsd="http://www.w3.org/2001/XMLSchema"&gt;
                  &lt;Date&gt;2008-02-01T00:00:00-08:00&lt;/Date&gt;
                  &lt;ExpirationPeriod&gt;PT7470S&lt;/ExpirationPeriod&gt;
                  &lt;ExpirationDate&gt;2008-02-06T04:30:00-08:00&lt;/ExpirationDate&gt;
                  &lt;ProductId&gt;100&lt;/ProductId&gt;
                  &lt;Quantity&gt;2000&lt;/Quantity&gt;
                  &lt;BackOrderQuantity xsi:nil="true" /&gt;
                  &lt;BackOrderPrice xsi:nil="true" /&gt;
                &lt;/Order&gt;
              &lt;/TodayOrders&gt;
             
              */
             </code>
             </example>        
        </member>
        <member name="M:Teradata.Client.Provider.TdIntervalSecond.op_Addition(Teradata.Client.Provider.TdIntervalSecond,Teradata.Client.Provider.TdIntervalSecond)">
            <summary>
               A <see cref="T:Teradata.Client.Provider.TdIntervalSecond"/> is added to another <strong>TdIntervalSecond</strong>.
            </summary>
            <remarks>
            <para>
               If either parameter is <strong>Null</strong> a <see cref="F:Teradata.Client.Provider.TdIntervalSecond.Null"/> will be returned.
            </para>
            <para>
               The returned <strong>TdIntervalSecond</strong> will contain a precision 
               set to the <see cref="F:Teradata.Client.Provider.TdIntervalSecond.MaxPrecision"/>. The scale will always be set to the the scale 
               of the operand containing the greatest scale.
            </para>        
            </remarks>
            <returns>
               A new <strong>TdIntervalSecond</strong> as the result of adding a 
               <strong>TdIntervalSecond</strong> to another <strong>TdIntervalSecond</strong>.
            </returns>     
            <exception cref="T:System.OverflowException">
               The resultant operation returns a value greater than the <see cref="F:Teradata.Client.Provider.TdIntervalSecond.MaxValue"/> 
               or less than the <see cref="F:Teradata.Client.Provider.TdIntervalSecond.MinValue"/>.
            </exception>
            <overloads>
               Calculates the sum of two operands and returns a <strong>TdIntervalSecond</strong>.
            </overloads>
            <param name="left">A <strong>TdIntervalSecond</strong>.</param>
            <param name="right">A <strong>TdIntervalSecond</strong>.</param>
        </member>
        <member name="M:Teradata.Client.Provider.TdIntervalSecond.op_Subtraction(Teradata.Client.Provider.TdIntervalSecond,Teradata.Client.Provider.TdIntervalSecond)">
            <summary>
               A <see cref="T:Teradata.Client.Provider.TdIntervalSecond"/> is subtracted from another <strong>TdIntervalSecond</strong>.
            </summary>
            <remarks>
            <para>
               If either parameter is <strong>Null</strong> a <see cref="F:Teradata.Client.Provider.TdIntervalSecond.Null"/> will be returned.
            </para>
            <para>
               The returned <strong>TdIntervalSecond</strong> will contain a precision
               set to the <see cref="F:Teradata.Client.Provider.TdIntervalSecond.MaxPrecision"/>. The scale will always be set to the the scale 
               of the operand containing the greatest scale.
            </para>        
            </remarks>
            <returns>
               A new <strong>TdIntervalSecond</strong> as the result of subtracting 
               <paramref name="right"/> from the <paramref name="left"/>.
            </returns>  
            <overloads>
               The right operand is subtracted from the left operand returning a 
               <strong>TdIntervalSecond</strong>.
            </overloads>
            <exception cref="T:System.OverflowException">
               The resultant operation returns a value greater than the <see cref="F:Teradata.Client.Provider.TdIntervalSecond.MaxValue"/> 
               or less than the <see cref="F:Teradata.Client.Provider.TdIntervalSecond.MinValue"/>.
            </exception>
            <param name="left">A <strong>TdIntervalSecond</strong> to subtract from.</param>
            <param name="right">A <strong>TdIntervalSecond</strong> to subtract.</param>
        </member>
        <member name="M:Teradata.Client.Provider.TdIntervalSecond.op_Addition(Teradata.Client.Provider.TdIntervalSecond,System.Int32)">
            <summary>
               The specified number of seconds is added to the <see cref="T:Teradata.Client.Provider.TdIntervalSecond"/>.
            </summary>
            <remarks>
            <para>
               If <paramref name="interval"/> is <see cref="F:Teradata.Client.Provider.TdIntervalSecond.Null"/> a <strong>Null</strong> will be returned.
            </para>
            <para>
               The returned <strong>TdIntervalSecond</strong> will contain a precision 
               set to the <see cref="F:Teradata.Client.Provider.TdIntervalSecond.MaxPrecision"/>. The scale will always be set to the the scale 
               of the <paramref name="interval"/>.
            </para>
            </remarks>
            <exception cref="T:System.OverflowException">
               The resultant operation returns a value greater than the <see cref="F:Teradata.Client.Provider.TdIntervalSecond.MaxValue"/> 
               or less than the <see cref="F:Teradata.Client.Provider.TdIntervalSecond.MinValue"/>.
            </exception>
            <param name="interval">A <strong>TdIntervalSecond</strong>.</param>
            <param name="seconds">Number of seconds to add.</param>
            <returns>
               A new <strong>TdIntervalSecond</strong> as the result of adding an Int32 to 
               <strong>TdIntervalSecond</strong>.
            </returns>
        </member>
        <member name="M:Teradata.Client.Provider.TdIntervalSecond.op_Addition(System.Int32,Teradata.Client.Provider.TdIntervalSecond)">
            <summary>
               The specified number of seconds is added to the <see cref="T:Teradata.Client.Provider.TdIntervalSecond"/>.
            </summary>
            <remarks>
            <para>
               If <paramref name="interval"/> is <see cref="F:Teradata.Client.Provider.TdIntervalSecond.Null"/> a <strong>Null</strong> will be returned.
            </para>
            <para>
               The returned <strong>TdIntervalSecond</strong> will contain a precision 
               set to the <see cref="F:Teradata.Client.Provider.TdIntervalSecond.MaxPrecision"/>. The scale will always be set to the the scale 
               of the <paramref name="interval"/>.
            </para>
            </remarks>
            <exception cref="T:System.OverflowException">
               The resultant operation returns a value greater than the <see cref="F:Teradata.Client.Provider.TdIntervalSecond.MaxValue"/> 
               or less than the <see cref="F:Teradata.Client.Provider.TdIntervalSecond.MinValue"/>.
            </exception>
            <param name="seconds">Number of seconds to add.</param>
            <param name="interval">A <strong>TdIntervalSecond</strong>.</param>
            <returns>
               A new <strong>TdIntervalSecond</strong> as the result of adding an Int32 to 
               <strong>TdIntervalSecond</strong>.
            </returns>
        </member>
        <member name="M:Teradata.Client.Provider.TdIntervalSecond.op_Subtraction(Teradata.Client.Provider.TdIntervalSecond,System.Int32)">
            <summary>
               The specified number of seconds is subtracted from the <see cref="T:Teradata.Client.Provider.TdIntervalSecond"/>.
            </summary>
            <remarks>
            <para>
               If <paramref name="interval"/> is <see cref="F:Teradata.Client.Provider.TdIntervalSecond.Null"/> a <strong>Null</strong> will be returned.
            </para>
            <para>
               The returned <strong>TdIntervalSecond</strong> will contain a precision 
               set to the <see cref="F:Teradata.Client.Provider.TdIntervalSecond.MaxPrecision"/>. The scale will always be set to 
               the scale of the <paramref name="interval"/>.
            </para>
            </remarks>
            <exception cref="T:System.OverflowException">
               The resultant operation returns a value greater than the <see cref="F:Teradata.Client.Provider.TdIntervalSecond.MaxValue"/> 
               or less than the <see cref="F:Teradata.Client.Provider.TdIntervalSecond.MinValue"/>.
            </exception>
            <param name="interval">A <strong>TdIntervalSecond</strong>.</param>
            <param name="seconds">Number of seconds to subtract.</param>
            <returns>
               A new <strong>TdIntervalSecond</strong> as the result of substracting an Int32 from 
               <strong>TdIntervalSecond</strong>.
            </returns>
        </member>
        <member name="M:Teradata.Client.Provider.TdIntervalSecond.op_Multiply(Teradata.Client.Provider.TdIntervalSecond,System.Int32)">
            <summary>
               A <see cref="T:Teradata.Client.Provider.TdIntervalSecond"/> is multiplied by an integer value.
            </summary>
            <remarks>
            <para>
               If <paramref name="interval"/> is <see cref="F:Teradata.Client.Provider.TdIntervalSecond.Null"/> a <strong>Null</strong> will be returned.
            </para>
            <para>
               The returned <strong>TdIntervalSecond</strong> will contain a precision 
               set to the <see cref="F:Teradata.Client.Provider.TdIntervalSecond.MaxPrecision"/>. The scale will always 
               be set to the scale of the <paramref name="interval"/>.
            </para>
            </remarks>
            <returns>
               A new <strong>TdIntervalSecond</strong> as the result of multiplying a 
               <strong>TdIntervalSecond</strong> and an integer value.
            </returns>        
            <exception cref="T:System.OverflowException">
               The resultant operation returns a value greater than the <see cref="F:Teradata.Client.Provider.TdIntervalSecond.MaxValue"/> 
               or less than the <see cref="F:Teradata.Client.Provider.TdIntervalSecond.MinValue"/>.
            </exception>
            <param name="interval">A <strong>TdIntervalSecond</strong>.</param>
            <param name="value">A multiplier.</param>
        </member>
        <member name="M:Teradata.Client.Provider.TdIntervalSecond.op_Multiply(System.Int32,Teradata.Client.Provider.TdIntervalSecond)">
            <summary>
               A <see cref="T:Teradata.Client.Provider.TdIntervalSecond"/> is multiplied by an integer value.
            </summary>
            <remarks>
            <para>
               If <paramref name="interval"/> is <see cref="F:Teradata.Client.Provider.TdIntervalSecond.Null"/> a <strong>Null</strong> will be returned.
            </para>
            <para>
               The returned <strong>TdIntervalSecond</strong> will contain a precision 
               set to the <see cref="F:Teradata.Client.Provider.TdIntervalSecond.MaxPrecision"/>. The scale will always 
               be set to the scale of the <paramref name="interval"/>.
            </para>
            </remarks>
            <returns>
               A new <strong>TdIntervalSecond</strong> as the result of multiplying a 
               <strong>TdIntervalSecond</strong> and an integer value.
            </returns>        
            <exception cref="T:System.OverflowException">
               The resultant operation returns a value greater than the <see cref="F:Teradata.Client.Provider.TdIntervalSecond.MaxValue"/> 
               or less than the <see cref="F:Teradata.Client.Provider.TdIntervalSecond.MinValue"/>.
            </exception>
            <param name="value">A multiplier.</param>
            <param name="interval">A <strong>TdIntervalSecond</strong>.</param>
        </member>
        <member name="M:Teradata.Client.Provider.TdIntervalSecond.op_Division(Teradata.Client.Provider.TdIntervalSecond,System.Int32)">
            <summary>
               A <see cref="T:Teradata.Client.Provider.TdIntervalSecond"/> is divided by an integer value.
            </summary>
            <remarks>
            <para>
               If <paramref name="interval"/> is <see cref="F:Teradata.Client.Provider.TdIntervalSecond.Null"/> a <strong>Null</strong> will be returned.
            </para>
            <para>
               The returned <strong>TdIntervalSecond</strong> will contain a precision 
               and scale which matches the precision and scale of the <strong>interval</strong> parameter.
            </para>
            </remarks>
            <returns>
               A new <strong>TdIntervalSecond</strong> as the result of dividing a 
               <strong>TdIntervalSecond</strong> and an integer value.
            </returns>        
            <exception cref="T:System.DivideByZeroException">
               The <paramref name="value"/> divisor cannot be 0.
            </exception>
            <param name="interval">A <strong>TdIntervalSecond</strong>.</param>
            <param name="value">A divisor.</param>
        </member>
        <member name="M:Teradata.Client.Provider.TdIntervalSecond.Add(Teradata.Client.Provider.TdIntervalSecond,Teradata.Client.Provider.TdIntervalSecond)">
            <summary>
               Calculates the sum of two <see cref="T:Teradata.Client.Provider.TdIntervalSecond"/> operands.
            </summary>
            <remarks>
            <para>
               If either parameter is <strong>Null</strong> a <see cref="F:Teradata.Client.Provider.TdIntervalSecond.Null"/> will be returned.
            </para>
            <para>
               The returned <strong>TdIntervalSecond</strong> will contain a precision 
               set to the <see cref="F:Teradata.Client.Provider.TdIntervalSecond.MaxPrecision"/>. The scale will always be set to
               the scale of the operand containing the greatest scale.
            </para>
            </remarks>
            <returns>
               A <strong>TdIntervalSecond</strong> containing the sum.
            </returns>
            <exception cref="T:System.OverflowException">
               The resultant operation returns a value greater than the <see cref="F:Teradata.Client.Provider.TdIntervalSecond.MaxValue"/> 
               or less than the <see cref="F:Teradata.Client.Provider.TdIntervalSecond.MinValue"/>.
            </exception>
            <overloads>
               Calculates the sum of two operands and returns a <strong>TdIntervalSecond</strong>.
            </overloads>
            <param name="left">A <strong>TdIntervalSecond</strong>.</param>
            <param name="right">A <strong>TdIntervalSecond</strong>.</param>
        </member>
        <member name="M:Teradata.Client.Provider.TdIntervalSecond.Add(Teradata.Client.Provider.TdIntervalSecond,System.Int32)">
            <summary>
               The specified number of seconds is added to the <see cref="T:Teradata.Client.Provider.TdIntervalSecond"/>.
            </summary>
            <remarks>
            <para>
               If <paramref name="interval"/> is <see cref="F:Teradata.Client.Provider.TdIntervalSecond.Null"/> a <strong>Null</strong> will be returned.
            </para>
            <para>
               The returned <strong>TdIntervalSecond</strong> will contain a precision 
               set to the <see cref="F:Teradata.Client.Provider.TdIntervalSecond.MaxPrecision"/>. The scale will always be set to the 
               scale of the <paramref name="interval"/>.
            </para>
            </remarks>
            <exception cref="T:System.OverflowException">
               The resultant operation returns a value greater than the <see cref="F:Teradata.Client.Provider.TdIntervalSecond.MaxValue"/> 
               or less than the <see cref="F:Teradata.Client.Provider.TdIntervalSecond.MinValue"/>.
            </exception>
            <param name="interval">A <strong>TdIntervalSecond</strong>.</param>
            <param name="seconds">Number of seconds to add.</param>
            <returns>
               A new <strong>TdIntervalSecond</strong> as the result of adding an Int32 to 
               <strong>TdIntervalSecond</strong>.
            </returns>
        </member>
        <member name="M:Teradata.Client.Provider.TdIntervalSecond.Add(System.Int32,Teradata.Client.Provider.TdIntervalSecond)">
            <summary>
               The specified number of seconds is added to the <see cref="T:Teradata.Client.Provider.TdIntervalSecond"/>.
            </summary>
            <remarks>
            <para>
               If <paramref name="interval"/> is <see cref="F:Teradata.Client.Provider.TdIntervalSecond.Null"/> a <strong>Null</strong> will be returned.
            </para>
            <para>
               The returned <strong>TdIntervalSecond</strong> will contain a precision 
               set to the <see cref="F:Teradata.Client.Provider.TdIntervalSecond.MaxPrecision"/>. The scale will always be set to
                the scale of the <paramref name="interval"/>.
            </para>
            </remarks>
            <exception cref="T:System.OverflowException">
               The resultant operation returns a value greater than the <see cref="F:Teradata.Client.Provider.TdIntervalSecond.MaxValue"/> 
               or less than the <see cref="F:Teradata.Client.Provider.TdIntervalSecond.MinValue"/>.
            </exception>
            <param name="seconds">Number of seconds to add.</param>
            <param name="interval">A <strong>TdIntervalSecond</strong>.</param>
            <returns>
               A new <strong>TdIntervalSecond</strong> as the result of adding an Int32 to 
               <strong>TdIntervalSecond</strong>.
            </returns>
        </member>
        <member name="M:Teradata.Client.Provider.TdIntervalSecond.Subtract(Teradata.Client.Provider.TdIntervalSecond,Teradata.Client.Provider.TdIntervalSecond)">
            <summary>
               A <see cref="T:Teradata.Client.Provider.TdIntervalSecond"/> is subtracted from another <strong>TdIntervalSecond</strong>.
            </summary>
            <remarks>
            <para>
               If either parameter is <strong>Null</strong> a <see cref="F:Teradata.Client.Provider.TdIntervalSecond.Null"/> will be returned.
            </para>
            <para>
               The returned <strong>TdIntervalSecond</strong> will contain a precision 
               set to the <see cref="F:Teradata.Client.Provider.TdIntervalSecond.MaxPrecision"/>. The scale will always be set to the the scale 
               of the operand containing the greatest scale.
            </para>
            </remarks>
            <returns>
               A new <strong>TdIntervalSecond</strong> as the result of subtracting 
               <paramref name="right"/> from the <paramref name="left"/>.
            </returns>   
            <overloads>
               The right operand is subtracted from the left operand returning a 
               <strong>TdIntervalSecond</strong>.
            </overloads>
            <exception cref="T:System.OverflowException">
               The resultant operation returns a value greater than the <see cref="F:Teradata.Client.Provider.TdIntervalSecond.MaxValue"/> 
               or less than the <see cref="F:Teradata.Client.Provider.TdIntervalSecond.MinValue"/>.
            </exception>
            <param name="left">A <strong>TdIntervalSecond</strong> to subtract from.</param>
            <param name="right">A <strong>TdIntervalSecond</strong> to subtract.</param>
        </member>
        <member name="M:Teradata.Client.Provider.TdIntervalSecond.Subtract(Teradata.Client.Provider.TdIntervalSecond,System.Int32)">
            <summary>
               The specified number of seconds is subtracted from the <see cref="T:Teradata.Client.Provider.TdIntervalSecond"/>.
            </summary>
            <remarks>
            <para>
               If <paramref name="interval"/> is <see cref="F:Teradata.Client.Provider.TdIntervalSecond.Null"/> a <strong>Null</strong> will be returned.
            </para>
            <para>
               The returned <strong>TdIntervalSecond</strong> will contain a precision 
               set to the <see cref="F:Teradata.Client.Provider.TdIntervalSecond.MaxPrecision"/>. The scale will always be set to the
               the scale of the <paramref name="interval"/>.
            </para>
            </remarks>
            <exception cref="T:System.OverflowException">
               The resultant operation returns a value greater than the <see cref="F:Teradata.Client.Provider.TdIntervalSecond.MaxValue"/> 
               or less than the <see cref="F:Teradata.Client.Provider.TdIntervalSecond.MinValue"/>.
            </exception>
            <param name="interval">A <strong>TdIntervalSecond</strong>.</param>
            <param name="seconds">Number of seconds to subtract.</param>
            <returns>
               A new <strong>TdIntervalSecond</strong> as the result of substracting an Int32 from 
               <strong>TdIntervalSecond</strong>.
            </returns>
        </member>
        <member name="M:Teradata.Client.Provider.TdIntervalSecond.Multiply(Teradata.Client.Provider.TdIntervalSecond,System.Int32)">
            <summary>
               A <see cref="T:Teradata.Client.Provider.TdIntervalSecond"/> is multiplied by an integer value.
            </summary>
            <remarks>
            <para>
               If <paramref name="interval"/> is <see cref="F:Teradata.Client.Provider.TdIntervalSecond.Null"/> a <strong>Null</strong> will be returned.
            </para>
            <para>
               The returned <strong>TdIntervalSecond</strong> will contain a precision 
               set to the <see cref="F:Teradata.Client.Provider.TdIntervalSecond.MaxPrecision"/>. The scale will always 
               be set to the scale of the <paramref name="interval"/>.
            </para>
            </remarks>
            <returns>
               A new <strong>TdIntervalSecond</strong> as the result of multiplying a 
               <strong>TdIntervalSecond</strong> and an integer value.
            </returns>        
            <exception cref="T:System.OverflowException">
               The resultant operation returns a value greater than the <see cref="F:Teradata.Client.Provider.TdIntervalSecond.MaxValue"/> 
               or less than the <see cref="F:Teradata.Client.Provider.TdIntervalSecond.MinValue"/>.
            </exception>
            <param name="interval">A <strong>TdIntervalSecond</strong>.</param>
            <param name="value">A multiplier.</param>
        </member>
        <member name="M:Teradata.Client.Provider.TdIntervalSecond.Multiply(System.Int32,Teradata.Client.Provider.TdIntervalSecond)">
            <summary>
               A <see cref="T:Teradata.Client.Provider.TdIntervalSecond"/> is multiplied by an integer value.
            </summary>
            <remarks>
            <para>
               If <paramref name="interval"/> is <see cref="F:Teradata.Client.Provider.TdIntervalSecond.Null"/> a <strong>Null</strong> will be returned.
            </para>
            <para>
               The returned <strong>TdIntervalSecond</strong> will contain a precision 
               set to the <see cref="F:Teradata.Client.Provider.TdIntervalSecond.MaxPrecision"/>. The scale will always 
               be set to the scale of the <paramref name="interval"/>.
            </para>
            </remarks>
            <returns>
               A new <strong>TdIntervalSecond</strong> as the result of multiplying a 
               <strong>TdIntervalSecond</strong> and an integer value.
            </returns>        
            <exception cref="T:System.OverflowException">
               The resultant operation returns a value greater than the <see cref="F:Teradata.Client.Provider.TdIntervalSecond.MaxValue"/> 
               or less than the <see cref="F:Teradata.Client.Provider.TdIntervalSecond.MinValue"/>.
            </exception>
            <param name="value">A multiplier.</param>
            <param name="interval">A <strong>TdIntervalSecond</strong>.</param>
        </member>
        <member name="M:Teradata.Client.Provider.TdIntervalSecond.Divide(Teradata.Client.Provider.TdIntervalSecond,System.Int32)">
            <summary>
               A <see cref="T:Teradata.Client.Provider.TdIntervalSecond"/> is divided by an integer value.
            </summary>
            <remarks>
            <para>
               If <paramref name="interval"/> is <see cref="F:Teradata.Client.Provider.TdIntervalSecond.Null"/> a <strong>Null</strong> will be returned.
            </para>
            <para>
               The returned <strong>TdIntervalSecond</strong> will contain a precision 
               and scale which matches the precision and scale of the <strong>interval</strong> 
               parameter.
            </para>
            </remarks>
            <returns>
               A new <strong>TdIntervalSecond</strong> as the result of dividing a 
               <strong>TdIntervalSecond</strong> and an integer value.
            </returns>        
            <exception cref="T:System.DivideByZeroException">
               The <paramref name="value"/> divisor cannot be 0.
            </exception>
            <param name="interval">A <strong>TdIntervalSecond</strong>.</param>
            <param name="value">A divisor.</param>
        </member>
        <member name="M:Teradata.Client.Provider.TdIntervalSecond.op_GreaterThan(Teradata.Client.Provider.TdIntervalSecond,Teradata.Client.Provider.TdIntervalSecond)">
            <summary>
               This operator determines whether the <paramref name="left"/> is greater than 
               the <paramref name="right"/>.
            </summary>
            <returns>
            	<para>
            		<c>true</c> indicates the <paramref name="left"/> is greater than
                    the <paramref name="right"/>, <c>false</c> otherwise.
                </para>
            	<para>
            		<list type="table">
            			<listheader>
            				<term>Return Value</term>
            				<description>Description</description>
            			</listheader>
            			<item>
            				<term><c>true</c></term>
            				<description>
            					<paramref name="left"/> and
                                <paramref name="left"/> are not
                                <see cref="F:Teradata.Client.Provider.TdIntervalSecond.Null"/> and
                                <paramref name="left"/> is greater than
                                <paramref name="right"/>.
            				</description>
            			</item>
            			<item>
            				<term><c>false</c></term>
            				<description>
            					<para>
                                    The <paramref name="left"/> is less than or equal
                                    to <paramref name="right"/>
                                </para>
            					<para>-or-</para>
            					<para>
                                    Either <paramref name="left"/> and / or
                                    <paramref name="right"/> is <strong>Null</strong>.
                                </para>
            				</description>
            			</item>
            		</list>
            	</para>
            </returns>
            <remarks>
            	<para>
                   Comparison operators always return <c>false</c> if one of the operands is
                   <strong>Null</strong>. Therefore you should not assume that the reverse condition
                   is <c>true</c>. For example you cannot assume that the <paramref name="left"/> 
                   is less than or equal to the <paramref name="right"/> if the "&gt;" operator returns 
                   <c>false</c>.
               </para>
            	<para>
                   The reverse condition is <c>true</c> when the <paramref name="left"/> and the 
                   <paramref name="right"/> are not <strong>Null</strong>.
               </para>
            </remarks>
            <param name="left">An instance of <see cref="T:Teradata.Client.Provider.TdIntervalSecond"/>.</param>
            <param name="right">An instance of <strong>TdIntervalSecond</strong>.</param>
        </member>
        <member name="M:Teradata.Client.Provider.TdIntervalSecond.op_GreaterThanOrEqual(Teradata.Client.Provider.TdIntervalSecond,Teradata.Client.Provider.TdIntervalSecond)">
            <summary>
               This operator determines whether the <paramref name="left"/> is greater than or 
               equal to the <paramref name="right"/>.
            </summary>
            <returns>
            	<para>
            		<c>true</c> indicates the <paramref name="left"/> is greater than
                    or equal to the <paramref name="right"/>, <c>false</c> otherwise.
                </para>
            	<para>
            		<list type="table">
            			<listheader>
            				<term>Return Value</term>
            				<description>Description</description>
            			</listheader>
            			<item>
            				<term><c>true</c></term>
            				<description>
            					<para>
            						<paramref name="left"/> and
                                    <paramref name="right"/> are not
                                    <see cref="F:Teradata.Client.Provider.TdIntervalSecond.Null"/> and
                                    <paramref name="left"/> is greater than or equal
                                    to <paramref name="right"/>
            					</para>
            					<para>-or-</para>
            					<para>
            						<paramref name="left"/> is <strong>Null</strong>
                                    and <paramref name="right"/> is
                                    <strong>Null</strong>.
            					</para>
            				</description>
            			</item>
            			<item>
            				<term><c>false</c></term>
            				<description>
            					<para>
                                    The <paramref name="left"/> is less than
                                    <paramref name="right"/>
            					</para>
            					<para>-or-</para>
            					<para>
                                    Either <paramref name="left"/> or
                                    <paramref name="right"/> is <strong>Null</strong>.
            					</para>
            				</description>
            			</item>
            		</list>
            	</para>
            </returns>
            <remarks>
            	<para>
                    Comparison operators always return <c>false</c> if one of the operands is
                    <strong>Null</strong>. Therefore you should not assume that the reverse
                    condition is <c>true</c>. For example you cannot assume that the
                    <paramref name="left"/> is less than the
                    <paramref name="right"/> if the "&gt;=" operator returns
                    <c>false</c>.
                </para>
            	<para>
                    The reverse condition is <c>true</c> when the
                    <paramref name="left"/> and the
                    <paramref name="right"/> are not <strong>Null</strong>.
                </para>
            </remarks>
            <param name="left">An instance of <see cref="T:Teradata.Client.Provider.TdIntervalSecond"/>.</param>
            <param name="right">An instance of <strong>TdIntervalSecond</strong>.</param>
        </member>
        <member name="M:Teradata.Client.Provider.TdIntervalSecond.op_Inequality(Teradata.Client.Provider.TdIntervalSecond,Teradata.Client.Provider.TdIntervalSecond)">
            <summary>
               This operator determines whether the <paramref name="left"/> and the  
               <paramref name="right"/> are not equal.
            </summary>
            <returns>
            	<para>
                   A Boolean is returned that indicates whether the two operands are not equal.
                   <c>true</c> indicates the two operands are not equal, <c>false</c>
                   otherwise.
               </para>
            	<para>
            		<list type="table">
            			<listheader>
            				<term>Return Value</term>
            				<description>Description</description>
            			</listheader>
            			<item>
            				<term><c>true</c></term>
            				<description>
                                <para>
            					   <paramref name="left"/> is less than or greater than
                                   <paramref name="right"/>.
                                </para>
            					<para>-or-</para>
                               <para>
            					    <paramref name="left"/> is
                                   <see cref="F:Teradata.Client.Provider.TdIntervalSecond.Null"/> and
                                   <paramref name="right"/> is not <strong>Null.</strong> 
                               </para>
            					<para>-or-</para>
            					<para>
                                   <paramref name="left"/> is not <strong>Null</strong>
                                   and <paramref name="right"/> is <strong>Null.</strong>
                                </para>
                            </description>
            			</item>
            			<item>
            				<term><c>false</c></term>
            				<description>
            					<para>
                                  <paramref name="left"/> is equal to
                                  <paramref name="right"/>.
                               </para>
            					<para>-or-</para>
            					<para>
                                   <paramref name="left"/> and
                                   <paramref name="right"/> are <strong>Null</strong>.
                                </para>
                            </description>
            			</item>
            		</list>
            	</para>
            </returns>
            <param name="left">An instance of <see cref="T:Teradata.Client.Provider.TdIntervalSecond"/>.</param>
            <param name="right">An instance of <strong>TdIntervalSecond</strong>.</param>
        </member>
        <member name="M:Teradata.Client.Provider.TdIntervalSecond.op_Equality(Teradata.Client.Provider.TdIntervalSecond,Teradata.Client.Provider.TdIntervalSecond)">
            <summary>
               This operator determines whether the <paramref name="left"/> and the  
               <paramref name="right"/> are equal.
            </summary>
            <returns>
            	<para>
                   A Boolean is returned that indicates whether the two operands are equal.
                   <c>True</c> indicates the two operands are equal, <c>false</c> otherwise.
                </para>
            	<para>
            		<list type="table">
            			<listheader>
            				<term>Return Value</term>
            				<description>Description</description>
            			</listheader>
            			<item>
            				<term><c>true</c></term>
            				<description>
            					<para>
            					   <paramref name="left"/> is equal to
                                   <paramref name="right"/>
            					</para>
            					<para>-or-</para>
            					<para>
            					   <paramref name="left"/> is
                                   <see cref="F:Teradata.Client.Provider.TdIntervalSecond.Null"/> and
                                   <paramref name="right"/> is <strong>Null</strong>.
            					</para>
            				</description>
            			</item>
            			<item>
            				<term><c>false</c></term>
            				<description>
            					<para>
            					   <paramref name="left"/> is not <strong>Null</strong>
                                   and <paramref name="right"/> is <strong>Null</strong>
            					</para>
            					<para>-or-</para>
            					<para>
            					   <paramref name="left"/> is <strong>Null</strong> and
                                   <paramref name="right"/> is not <strong>Null</strong>
            					</para>
            					<para>-or-</para>
            					<para>
                                   The <paramref name="left"/> is not equal to
                                   <paramref name="right"/>.
            					</para>
            				</description>
            			</item>
            		</list>
            	</para>
            </returns>
            <param name="left">An instance of <see cref="T:Teradata.Client.Provider.TdIntervalSecond"/>.</param>
            <param name="right">An instance of <strong>TdIntervalSecond</strong>.</param>
        </member>
        <member name="M:Teradata.Client.Provider.TdIntervalSecond.op_LessThan(Teradata.Client.Provider.TdIntervalSecond,Teradata.Client.Provider.TdIntervalSecond)">
            <summary>
               This operator determines whether the <paramref name="left"/> is less than 
               the <paramref name="right"/>.
            </summary>
            <returns>
            	<para>
            		<c>True</c> indicates the <paramref name="left"/> is less than
                    the <paramref name="right"/>, <c>false</c> otherwise.
                </para>
            	<para>
            		<list type="table">
            			<listheader>
            				<term>Return Value</term>
            				<description>Description</description>
            			</listheader>
            			<item>
            				<term><c>true</c></term>
            				<description>
            					<para>
            					    <paramref name="left"/> and
                                   <paramref name="right"/> are not
                                   <see cref="F:Teradata.Client.Provider.TdIntervalSecond.Null"/> and
                                   <paramref name="left"/> is less than
                                   <paramref name="right"/>.
            					</para>
            				</description>
            			</item>
            			<item>
            				<term><c>false</c></term>
            				<description>
            					<para>
                                    The <paramref name="left"/> is greater than or
                                    equal to <paramref name="right"/>
            					</para>
            					<para>-or-</para>
            					<para>
                                    Either <paramref name="left"/> and / or
                                    <paramref name="right"/> is <strong>Null</strong>.
            					</para>
            				</description>
            			</item>
            		</list>
            	</para>
            </returns>
            <remarks>
            	<para>
                    Comparison operators always return <c>false</c> if one of the operands is
                    <strong>Null</strong>. Therefore you should not assume that the reverse
                    condition is <c>true</c>. For example you cannot assume that the
                    <paramref name="left"/> is greater than or equal to the
                    <paramref name="right"/> if the "&lt;" operator returns
                    <c>false</c>.
                </para>
            	<para>
                    The reverse condition is <c>true</c> when the
                    <paramref name="left"/> and the
                    <paramref name="right"/> are not <strong>Null</strong>.
                </para>
            </remarks>
            <param name="left">An instance of <see cref="T:Teradata.Client.Provider.TdIntervalSecond"/>.</param>
            <param name="right">An instance of <strong>TdIntervalSecond</strong>.</param>
        </member>
        <member name="M:Teradata.Client.Provider.TdIntervalSecond.op_LessThanOrEqual(Teradata.Client.Provider.TdIntervalSecond,Teradata.Client.Provider.TdIntervalSecond)">
            <summary>
               This operator determines whether the <paramref name="left"/> is less than or 
               equal the <paramref name="right"/>.
            </summary>
            <returns>
            	<para>
            		<c>true</c> indicates the <paramref name="left"/> is less than or
                    equal to the <paramref name="right"/>, <c>false</c> otherwise.
                </para>
            	<para>
            		<list type="table">
            			<listheader>
            				<term>Return Value</term>
            				<description>Description</description>
            			</listheader>
            			<item>
            				<term><c>true</c></term>
            				<description>
            					<para>
            						<paramref name="left"/> and
                                    <paramref name="right"/> are not
                                    <see cref="F:Teradata.Client.Provider.TdIntervalSecond.Null"/> and
                                    <paramref name="left"/> is less than or equal to
                                    <paramref name="right"/>
            					</para>
            					<para>-or-</para>
            					<para>
            						<paramref name="left"/> is <strong>Null</strong>
                                    and <paramref name="right"/> is
                                    <strong>Null</strong>.
            					</para>
            				</description>
            			</item>
            			<item>
            				<term><c>false</c></term>
            				<description>
            					<para>
                                    The <paramref name="left"/> is greater than
                                    <paramref name="right"/>
            					</para>
            					<para>-or-</para>
            					<para>
                                    Either <paramref name="left"/> or
                                    <paramref name="right"/> is <strong>Null</strong>.
            					</para>
            				</description>
            			</item>
            		</list>
            	</para>
            </returns>
            <remarks>
            	<para>
                    Comparison operators always return <c>false</c> if one of the operands is
                    <strong>Null</strong>. Therefore you should not assume that the reverse
                    condition is <c>true</c>. For example you cannot assume that the
                    <paramref name="left"/> is greater than the
                    <paramref name="right"/> if the "&lt;=" operator returns
                    <c>false</c>.
                </para>
            	<para>
                    The reverse condition is <c>true</c> when the
                    <paramref name="left"/> and the
                    <paramref name="right"/> are not <strong>Null</strong>.
                </para>
            </remarks>
            <param name="left">An instance of <see cref="T:Teradata.Client.Provider.TdIntervalSecond"/>.</param>
            <param name="right">An instance of <strong>TdIntervalSecond</strong>.</param>
        </member>
        <member name="M:Teradata.Client.Provider.TdIntervalSecond.op_Explicit(System.TimeSpan)~Teradata.Client.Provider.TdIntervalSecond">
            <summary>
               Converts a <see cref="T:System.TimeSpan"/> to a <see cref="T:Teradata.Client.Provider.TdIntervalSecond"/>.
            </summary>
            <remarks>
               <strong>TimeSpan</strong> fractional seconds may be truncated during conversion into 
               a <strong>TdIntervalSecond</strong> interval.  <strong>TimeSpan</strong>
               supports seven digits right of the decimal for fractional seconds, while
               <strong>TdIntervalSecond</strong> supports six digits right of the decimal
               for fractional seconds (microseconds).
            </remarks>
            <exception cref="T:System.OverflowException">
               The resultant operation returns a value greater than the <see cref="F:Teradata.Client.Provider.TdIntervalSecond.MaxValue"/> 
               or less than the <see cref="F:Teradata.Client.Provider.TdIntervalSecond.MinValue"/>.
            </exception>
            <param name="value">A <strong>TimeSpan</strong>.</param>
            <returns>A <strong>TdIntervalSecond</strong> interval.</returns>
        </member>
        <member name="M:Teradata.Client.Provider.TdIntervalSecond.op_Explicit(Teradata.Client.Provider.TdIntervalSecond)~System.TimeSpan">
            <summary>
               Converts a <see cref="T:Teradata.Client.Provider.TdIntervalSecond"/> to a <see cref="T:System.TimeSpan"/>.
            </summary>
            <remarks>
               The <strong>TimeSpan</strong> time components are represented in 24 hour format.
            </remarks>
            <exception cref="T:System.ArgumentNullException">
               The <strong>TdIntervalSecond</strong> value is <see cref="F:Teradata.Client.Provider.TdIntervalSecond.Null"/>.
            </exception>
            <param name="value">A <strong>TdIntervalSecond</strong> interval.</param>
            <returns>A <strong>TimeSpan</strong>.</returns>
        </member>
        <member name="M:Teradata.Client.Provider.TdIntervalSecond.op_Explicit(System.Int32)~Teradata.Client.Provider.TdIntervalSecond">
            <summary>
                Converts an <c>Int32</c> to <see cref="T:Teradata.Client.Provider.TdIntervalSecond"/>.
            </summary>
            <returns>A <strong>TdIntervalSecond</strong>.</returns>
            <remarks>
               The conversion may produce exceptions due to exceeding <see cref="F:Teradata.Client.Provider.TdIntervalSecond.MinValue"/>
               or <see cref="F:Teradata.Client.Provider.TdIntervalSecond.MaxValue"/>.
            </remarks>
            <exception cref="T:System.OverflowException">
               The resultant conversion returns a value greater than the <see cref="F:Teradata.Client.Provider.TdIntervalSecond.MaxValue"/> 
               or less than the <see cref="F:Teradata.Client.Provider.TdIntervalSecond.MinValue"/>.
            </exception>
            <param name="value">An Int32 representing a <strong>TdIntervalSecond</strong> interval.</param>
        </member>
        <member name="M:Teradata.Client.Provider.TdIntervalSecond.op_Implicit(Teradata.Client.Provider.TdIntervalSecond)~Teradata.Client.Provider.TdIntervalHourToSecond">
            <summary>
               Converts a <see cref="T:Teradata.Client.Provider.TdIntervalSecond"/> to <see cref="T:Teradata.Client.Provider.TdIntervalHourToSecond"/>.
            </summary>
            <remarks>
            <para>
               The <see cref="P:Teradata.Client.Provider.TdIntervalHourToSecond.Precision"/> is set to 1 (value = 0) and the 
               <see cref="P:Teradata.Client.Provider.TdIntervalHourToSecond.Scale"/> is calculated from the number of decimal 
               places required to represent the fractional seconds.
            </para>
            </remarks>
            <param name="value">A <strong>TdIntervalSecond</strong> interval.</param>
            <returns>A <strong>TdIntervalHourToSecond</strong>.</returns>
        </member>
        <member name="M:Teradata.Client.Provider.TdIntervalSecond.op_Implicit(Teradata.Client.Provider.TdIntervalSecond)~Teradata.Client.Provider.TdIntervalMinuteToSecond">
            <summary>
               Converts a <see cref="T:Teradata.Client.Provider.TdIntervalSecond"/> to <see cref="T:Teradata.Client.Provider.TdIntervalMinuteToSecond"/>.
            </summary>
            <param name="value">A <strong>TdIntervalSecond</strong> interval.</param>
            <returns>A <strong>TdIntervalMinuteToSecond</strong>.</returns>
        </member>
        <member name="M:Teradata.Client.Provider.TdIntervalSecond.op_Implicit(Teradata.Client.Provider.TdIntervalSecond)~Teradata.Client.Provider.TdIntervalDayToSecond">
            <summary>
               Converts a <see cref="T:Teradata.Client.Provider.TdIntervalSecond"/> to <see cref="T:Teradata.Client.Provider.TdIntervalDayToSecond"/>.
            </summary>
            <remarks>
            <para>
               The <see cref="P:Teradata.Client.Provider.TdIntervalDayToSecond.Precision"/> is set 1 (value = 0) since 
               <paramref name="value"/> does not contain the days interval component and the  
               <see cref="P:Teradata.Client.Provider.TdIntervalDayToSecond.Scale"/> is set to scale of the parameter 
               <strong>value</strong>.
            </para>
            </remarks>
            <param name="value">A <strong>TdIntervalSecond</strong> interval.</param>
            <returns>A <strong>TdIntervalDayToSecond</strong>.</returns>
        </member>
        <member name="P:Teradata.Client.Provider.TdIntervalSecond.IsNull">
            <summary>
               Indicates whether this <see cref="T:Teradata.Client.Provider.TdIntervalSecond"/> instance is <see cref="F:Teradata.Client.Provider.TdIntervalSecond.Null"/>. 
            </summary>
            <value>
               <c>true</c> if this <strong>TdIntervalSecond</strong> is <strong>Null</strong>; 
               <c>false</c> otherwise.
            </value>
        </member>
        <member name="P:Teradata.Client.Provider.TdIntervalSecond.Seconds">
            <summary>
               The number of interval seconds is returned. The return value ranges from -9999 to 9999.
            </summary>
            <remarks>
            <para>
               A <see cref="T:Teradata.Client.Provider.TdIntervalSecond"/> is represented as [-][seconds].[ffffff].  The 
               minus sign is optional and represents a negative interval of time.  The seconds 
               component represents seconds and the ffffff fractional  seconds.  The value
               of the Seconds property is the seconds component.
            </para>
            <para>
               A negative interval will return all properties (seconds and fractional 
               seconds) as negative values.
            </para>
            </remarks>
            <exception cref="T:Teradata.Client.Provider.TdException">
               This property is not available when this instance is <see cref="F:Teradata.Client.Provider.TdIntervalSecond.Null"/>.
            </exception>
        </member>
        <member name="P:Teradata.Client.Provider.TdIntervalSecond.Microseconds">
            <summary>
               The number of interval microseconds is returned. The return value ranges from
               -999999 to 999999.
            </summary>
            <remarks>
            <para>
               A <see cref="T:Teradata.Client.Provider.TdIntervalSecond"/> is represented as [-][seconds].[ffffff].  The 
               minus sign is optional and represents a negative interval of time.  The seconds component 
               represents seconds and the ffffff fractional seconds.  The value of the 
               Microseconds property is the ffffff component. The .ffffff component is optional.
            </para>
            <para>
               A negative interval will return all properties (seconds and fractional seconds) as
               negative values.
            </para>
            </remarks>
            <exception cref="T:Teradata.Client.Provider.TdException">
               This property is not available when this instance is <see cref="F:Teradata.Client.Provider.TdIntervalSecond.Null"/>.
            </exception>
        </member>
        <member name="P:Teradata.Client.Provider.TdIntervalSecond.Precision">
            <summary>
               The number of significant digits in the second is returned. The return value
               ranges from 1 to 4.
            </summary>
            <exception cref="T:Teradata.Client.Provider.TdException">
               This property is not available when this instance is <see cref="F:Teradata.Client.Provider.TdIntervalSecond.Null"/>.
            </exception>
        </member>
        <member name="P:Teradata.Client.Provider.TdIntervalSecond.Scale">
            <summary>
               The number of decimal places for the second is returned. The return value ranges 
               from 0 to 6.
            </summary>
            <exception cref="T:Teradata.Client.Provider.TdException">
               This property is not available when this instance is <see cref="F:Teradata.Client.Provider.TdIntervalSecond.Null"/>.
            </exception>
        </member>
        <member name="P:Teradata.Client.Provider.TdIntervalSecond.Value">
            <summary>
               Gets the .NET data type representation of <see cref="T:Teradata.Client.Provider.TdIntervalSecond"/> 
               as a <see cref="T:System.TimeSpan"/>.
            </summary>
            <remarks>
               This property in concept parallels <see cref="M:Teradata.Client.Provider.TdDataReader.GetValue(System.Int32)"/> and
               <see cref="P:Teradata.Client.Provider.TdParameter.Value"/>. That is they all represent the .NET Framework 
               Class Library(FCL) primitive data type that correspond to the Teradata 
               Interval Second data type.
            </remarks>
            <value>The interval represented as a <strong>TimeSpan</strong> is returned.</value>
            <exception cref="T:Teradata.Client.Provider.TdException">
               This property is not available when this instance is <see cref="F:Teradata.Client.Provider.TdIntervalSecond.Null"/>.
            </exception>
        </member>
        <member name="P:Teradata.Client.Provider.TdIntervalSecond.InternalTimespan">
            <summary>
               Return the internal TimeSpan representing the interval.
            </summary>
            <remarks>
               The internal timespan is used in calculating arithmetic operations and in storing
               day-time intervals.
            </remarks>
        </member>
        <member name="P:Teradata.Client.Provider.TdIntervalSecond.ObjectId">
            <summary>
               Gets the instance object identifier.
            </summary>
        </member>
        <member name="P:Teradata.Client.Provider.TdIntervalSecond.DecimalFractionalSecond">
            <summary>
               The decimal fractional seconds are returned. The return value ranges from
               -999999 to 999999.
            </summary>
            <remarks>
            <para>
               A <see cref="T:Teradata.Client.Provider.TdIntervalSecond"/> is represented as 
               [-][seconds].[ffffff]. The minus sign is optional 
               and represents a negative interval of time. The seconds represents 
               seconds and the ffffff fractional seconds.  The value of the Microseconds property
               is the ffffff component.
            </para>
            <para>
               A negative interval will return all properties (seconds and fractional 
               seconds) as negative values.
            </para>
            <para>This property is used in ToString to display the interval as a decimal fractional second.</para>
            </remarks>
        </member>
        <member name="P:Teradata.Client.Provider.TdIntervalSecond.IsNegative">
            <summary>
               Indicate if the interval is negative.
            </summary>
            <remarks>
               Timespan.ticks will indicate a negative interval.  Other values (days, hours, minutes, 
                milliseconds) may be 0 and the interval may still be negative.
            </remarks>
        </member>
        <member name="P:Teradata.Client.Provider.TdIntervalSecond.InternalAccessor">
            <summary>
               Accessor to the internal storage for this interval.
            </summary>
        </member>
        <member name="T:Teradata.Client.Provider.TdIntervalYear">
            <summary>
            	<see cref="T:Teradata.Client.Provider.TdIntervalYear"/> represents an interval of time defining a duration in years.
               The year precision is configurable from 1 - 4 significant digits.
             </summary>
            <remarks>
            	<para>
                   <strong>TdIntervalYear</strong> is a .NET Data Provider for Teradata specific
                   type, designed to support a Teradata Database Interval Year data type.
               </para>
            	<para>
                    The <strong>TdIntervalYear</strong> supports the Teradata Interval Year 
                    (precision) data type where precision indicates the number of digits in the
                    years (from 1 - 4).
                </para>
                <para>
                    The interval value must be specified in the following format :
                </para>
                <para>[sign][years]</para>
            	<para>Below is the description of each format item.</para>
            	<para>
            		<list type="table">
            			<listheader>
            				<term>Format Element</term>
            				<description>Description</description>
            			</listheader>
            			<item>
            				<term>sign</term>
            				<description>Optional - or space character.</description>
            			</item>
            			<item>
            				<term>years</term>
            				<description>Required number of years (one to four digits in length).</description>
            			</item>
            		</list>
            	</para>
            	<para>
                   The .Net Framework does not have a system type that directly corresponds to
                   the Teradata Database Interval Year data type. The .NET Data Provider for 
                   Teradata Version 13.0 version and prior versions map Interval Year to System.String. 
                   With version 13.1 of the provider, <strong>TdIntervalYear</strong> is available to 
                   retrieve and manipulate data of type Interval Year.
               </para>
            	<para>
                   The range of values for each TdInterval precision is as follows:
               </para>
            	<para>
            		<table class="xmldoctable" cellspacing="0">
            			<tbody>
            				<tr>
            					<th>Type and Precision</th>
            					<th>Minimum</th>
            					<th>Maximum</th>
            				</tr>
            				<tr>
            					<td class="xmldoctable">TdIntervalYear(1)</td>
            					<td class="xmldoctable">
            						<para>-'9'</para>
            					</td>
            					<td>'9'</td>
            				</tr>
            				<tr>
            					<td class="xmldoctable">TdIntervalYear(2)</td>
            					<td class="xmldoctable">
            						<para>-'99'</para>
            					</td>
            					<td>'99'</td>
            				</tr>
            				<tr>
            					<td class="xmldoctable">TdIntervalYear(3)</td>
            					<td class="xmldoctable">
            						<para>-'999'</para>
            					</td>
            					<td>'999'</td>
            				</tr>
            				<tr>
            					<td class="xmldoctable">TdIntervalYear(4)</td>
            					<td class="xmldoctable">
            						<para>-'9999'</para>
            					</td>
            					<td>'9999'</td>
            				</tr>
            			</tbody>
            		</table>
            	</para>
                <para>
                    <strong>TdIntervalYear</strong> also supports 
                    <see cref="F:Teradata.Client.Provider.TdIntervalYear.Null"/>. This is a very important feature.
                    An application is no longer required to call
                    <see cref="M:Teradata.Client.Provider.TdDataReader.IsDBNull(System.Int32)"/> before invoking the corresponding 
                    TdDataReader "Get" method.  This will improve overall performance.
                </para>
                <para>
                    A <strong>TdIntervalYear</strong> structure allows arithmetic,
                    comparision and conversion operations to be performed. 
                </para>
            	<para>
                    A <strong>TdIntervalYear</strong> may also be specified as an in, out, 
                    or in/out parameter to a stored procedure. In order to maintain backward  
                    compatibility with previous versions of the provider (release 13.0 and prior), 
                    a Connection String Attribute
                    <see cref="P:Teradata.Client.Provider.TdConnectionStringBuilder.EnableTdIntervals">EnableTdIntervals</see>
                    has been added. When the <strong>EnableTdIntervals</strong> attribute
                    is <c>true</c>, <see cref="P:Teradata.Client.Provider.TdParameter.ProviderSpecificValue"/> will
                    return the data as the provider specific type of <strong>TdIntervalYear</strong>.
                    When <strong>EnableTdIntervals</strong> is <c>false</c>, 
                    <strong>TdParameter.ProviderSpecificValue</strong> will return the data as a
                    .NET Framework Library data type of <see cref="T:System.String"/>. 
                </para>
            	<para>
                    The <see cref="P:Teradata.Client.Provider.TdParameter.Value"/> will return the .NET Framework Library
                    data type of <strong>System.String</strong> whether
                    <strong>EnableTdIntervals</strong> is <c>true</c> or <c>false</c>.
                </para>
            	<para>
            	    For more information on the Teradata Interval Year data type please
                    see the Teradata Database SQL Reference - 'Data Types and Literals'.
                </para>
            </remarks>
            <example>
            	<para>The following example shows how to retrieve a <strong>TdIntervalYear</strong>,  
                   modify the interval, and then update the table.
               </para>
            	<code>
             Public void TimeExample(TdCommand cmd, String model)
             {
                cmd.Parameters.Clear();
                
                cmd.CommandText = "SELECT StartDate, LeaseLen FROM AutoLeases " +
                                  "WHERE Model = ?";
             
                cmd.CommandType = CommandType.Text;
             
                cmd.Parameters.Add(null, TdType.VarChar, 10,
                     ParameterDirection.Input, true, 0, 0, null,    
                     DataRowVersion.Default, model);
             
               Int32 row = 0;
               TdDate [] startDate;
               TdIntervalYearToMonth [] leaseLen;
             
                using (TdDataReader dr = cmd.ExecuteReader())
                {   
                   startDate = new TdDate[dr.RecordsReturned];
                   leaseLen = new TdIntervalYear [dr.RecordsReturned];
             
                   // Specifying an interval of 2 years with a precision of 2
                   TdIntervalYear twoExtraYears = new TdIntervalYear(2, 2);
                
                   while (dr.Read())
                   {
                      // Retrieving the dates
                      startDate[row] = dr.GetTdDate(0);
                      leaseLen[row] = dr.GetTdIntervalYear(1);
             
                      // Adding 2 years to the StartDate
                      startDate[row] = startDate[row] + twoExtraYears;
             
                      // Adding 2 years to the lease length;
                      leaseLen[row] = leaseLen[row] + twoExtraYears;
             
                      row++;
                   } 
                }
            
                cmd.Parameters.Clear();
             
                cmd.CommandText = "UPDATE AutoLeases " +
                                  "SET StartDate = ?, LeaseLen = ? " +
                                  "WHERE Model = ?";
             
                cmd.Parameters.Add(null, TdType.Date, 0,
                      ParameterDirection.Input, true, 0, 0, null,    
                      DataRowVersion.Default, null);
             
                cmd.Parameters.Add(null, TdType.IntervalYear, 0,
                      ParameterDirection.Input, true, 0, 0, null,    
                      DataRowVersion.Default, null);
             
                cmd.Parameters.Add(null, TdType.VarChar, 9,
                      ParameterDirection.Input, true, 0, 0, null,    
                      DataRowVersion.Default, model);
             
                row--;
                while(row &gt;= 0)
                {
                   cmd.Parameters[0].Value = startDate[row];
                   cmd.Parameters[1].Value = leaseLen[row];
             
                   cmd.ExecuteNonQuery();
                   row--;
                }
             }
             
             </code>
            </example>
            <seealso cref="P:Teradata.Client.Provider.TdConnectionStringBuilder.EnableTdIntervals"/> 
            <seealso cref="!:IntervalConnectionString.html">Interval Connection String Attribute</seealso>
            <seealso cref="!:EnableProviderSpecificTypes.html">Enabling Provider Specific Types</seealso>
            <seealso cref="!:IntervalTypeOverview.html">Provider Specific Type:  Interval Type Overview</seealso>
        </member>
        <member name="F:Teradata.Client.Provider.TdIntervalYear.MaxPrecision">
            <summary>
               A constant representing the maximum number of significant digits in the 
               <see cref="P:Teradata.Client.Provider.TdIntervalYear.Years"/> interval component.
            </summary>
            <remarks>
               The value of this constant is 4.
            </remarks>
        </member>
        <member name="F:Teradata.Client.Provider.TdIntervalYear.MinPrecision">
            <summary>
               A constant representing the minimum number of significant digits in the 
               <see cref="P:Teradata.Client.Provider.TdIntervalYear.Years"/> interval component.
            </summary>
            <remarks>
               The value of this constant is 1.
            </remarks>
        </member>
        <member name="F:Teradata.Client.Provider.TdIntervalYear.MinValue">
            <summary>
               The smallest possible value for the <see cref="T:Teradata.Client.Provider.TdIntervalYear"/> interval type.
            </summary>
            <remarks>
               The smallest value is -'9999'.
            </remarks>
        </member>
        <member name="F:Teradata.Client.Provider.TdIntervalYear.MaxValue">
            <summary>
               The largest possible value for the <see cref="T:Teradata.Client.Provider.TdIntervalYear"/> interval type.
            </summary>
            <remarks>
               The largest value is '9999'.
            </remarks>
        </member>
        <member name="F:Teradata.Client.Provider.TdIntervalYear.Null">
            <summary>
               Gets a Null <see cref="T:Teradata.Client.Provider.TdIntervalYear"/> instance.
            </summary>
            <value>
               Returns a <strong>TdIntervalYear</strong> instance that represents a 
               <strong>Null</strong> value.
            </value>
            <remarks>
               Conceptually it is a constructor for <strong>Null</strong> instances of 
               <strong>TdIntervalYear</strong>.
            </remarks>
            <example>
               This example shows how to send a <strong>Null</strong> value to a Teradata database.
            <code>
            TdParameter col1 = new TdParameter();
            col1.TdType = TdType.TdIntervalYear;
            col1.Value = TdIntervalYear.Null;
            </code>
            </example>
        </member>
        <member name="F:Teradata.Client.Provider.TdIntervalYear.Zero">
            <summary>
               Gets an <see cref="T:Teradata.Client.Provider.TdIntervalYear"/> instance that contains all zero elements
               for each interval field.
            </summary>
            <remarks>
               A Zero <Strong>TdIntervalYear</Strong> may be used to determine whether
               other instances of intervals represent postive, negative or non-zero intervals.
            </remarks>
            <example>
            This example shows how to determine if an interval is negative.
            <code>
            TdIntervalDayTo Second yearInterval = new TdIntervalYear(-1000);
            if (yearInterval &lt; TdIntervalYear.Zero)
            {
               Console.WriteLine("The Interval is negative");
            }
            // The output of the console is "The interval is negative"
            </code>
            </example>
        </member>
        <member name="M:Teradata.Client.Provider.TdIntervalYear.#ctor(System.Int32)">
            <summary>
               An instance of <see cref="T:Teradata.Client.Provider.TdIntervalYear"/> is created from a year date   
               component specified as an integer. 
            </summary>
            <remarks>
            <para>
               The number of years is evaluated against <see cref="F:Teradata.Client.Provider.TdIntervalYear.MinValue"/> and
               and <see cref="F:Teradata.Client.Provider.TdIntervalYear.MaxValue"/> to determine if the values are exceeded.  The 
               <see cref="P:Teradata.Client.Provider.TdIntervalYear.Precision"/> is then calculated from the number of digits contained 
               within the interval year component.
            </para>
            <para>
               For example, a year value of 99 results in a precision of 2 representing 2
               significant digits in the year.
            </para>
            <para>
               A year value of 10020 exceeds the the maximum value of '9999-11'
               generating an exception.
            </para>
            <para>
               Negative constructor parameters may be supplied to represent negative durations of duration.
            </para>
            </remarks>
            <exception cref="T:System.OverflowException" caption="OverflowException">
               The <strong>years</strong> parameter specifies a <strong>TdIntervalYear</strong> 
               value less than <see cref="F:Teradata.Client.Provider.TdIntervalYear.MinValue"/> or greater than <see cref="F:Teradata.Client.Provider.TdIntervalYear.MaxValue"/>.
            </exception>
            <param name="years">Number of years.</param>
        </member>
        <member name="M:Teradata.Client.Provider.TdIntervalYear.#ctor(System.Int32,System.Byte)">
            <summary>
               An instance of <see cref="T:Teradata.Client.Provider.TdIntervalYear"/> is created from a year date   
               component specified as an integer with precision specified as a byte. 
            </summary>
            <remarks>
            <para>
               The allowable values of precision are from 1 to 4.
            </para>
            <para>
               The number of years is evaluated against <see cref="F:Teradata.Client.Provider.TdIntervalYear.MinValue"/> and
               and <see cref="F:Teradata.Client.Provider.TdIntervalYear.MaxValue"/> to determine if the values are exceeded.  If the values 
               are not exceeded but the resulting years component exceeds the supplied 
               <paramref name="precision"/> value, an exception is generated.
            </para>
            <para>
               For example, a year value of 99 and a precision of 1 will generate an exception.
               The <see cref="P:Teradata.Client.Provider.TdIntervalYear.Years"/> interval component cannot be represented
               in 1 significant digit, thus resulting in an invalid 
               <strong>TdIntervalYear</strong>.
            </para>
            <para>
               Negative <paramref name="years"/> may be supplied to represent negative duration of time.
            </para>
            </remarks>
            <exception cref="T:System.OverflowException" caption="OverflowException">
               The <strong>years</strong> parameter specifies a <strong>TdIntervalYear</strong> 
               value less than <see cref="F:Teradata.Client.Provider.TdIntervalYear.MinValue"/> or greater than <see cref="F:Teradata.Client.Provider.TdIntervalYear.MaxValue"/>.
            </exception>
            <exception cref="T:System.ArgumentOutOfRangeException" caption="ArgumentOutOfRangeException">
               The <strong>precision</strong> parameter is less than the <see cref="F:Teradata.Client.Provider.TdIntervalYear.MinPrecision"/> 
               or greater than the <see cref="F:Teradata.Client.Provider.TdIntervalYear.MaxPrecision"/> range of values.
            </exception>
            <exception cref="T:System.ArgumentException" caption="ArgumentException">
               The <strong>precision</strong> parameter is not large enough to represent 
               the number of years.
            </exception>
            <overloads>
               Initializes a new instance of <strong>TdIntervalYear</strong>.
            </overloads>
            <param name="years">Number of years.</param>
            <param name="precision">Number of significant digits of the year.</param>
        </member>
        <member name="M:Teradata.Client.Provider.TdIntervalYear.CompareTo(Teradata.Client.Provider.TdIntervalYear)">
            <summary>
               Compares this instance to the specified <see cref="T:Teradata.Client.Provider.TdIntervalYear"/> parameter 
               <paramref name="other"/>.
            </summary>
            <returns>The result of the comparison is returned as a signed integer.</returns>
            <remarks>
            	<para>
                    The integer returned when this instance is compared to
                    <paramref name="other"/> indicates the following:
                </para>
            	<para>
            		<list type="table">
            			<listheader>
            				<term>Return Value</term>
            				<description>Meaning</description>
            			</listheader>
            			<item>
            				<term>Less than Zero</term>
            				<description>
            					<para>
                                    This instance is less than <paramref name="other"/>
                                </para>
            					<para>-or-</para>
            					<para>
                                    This instance is <see cref="F:Teradata.Client.Provider.TdIntervalYear.Null"/> and
                                    <paramref name="other"/> is non-null.
                                </para>
            				</description>
            			</item>
            			<item>
            				<term>Zero</term>
            				<description>
            					<para>
                                    This instance is equal to <paramref name="other"/>
                                </para>
            					<para>-or-</para>
            					<para>This instance is <strong>Null</strong> and value is
                                <strong>Null</strong>.</para>
            				</description>
            			</item>
            			<item>
            				<term>Greater than Zero</term>
            				<description>
            					<para>
                                    This instance is greater than <paramref name="other"/>
                                </para>
            					<para>-or-</para>
            					<para>
            						<paramref name="other"/> is <strong>Null</strong> and
                                    this instance is non-null.
                                </para>
            				</description>
            			</item>
            		</list>
            	</para>
            </remarks>
            <param name="other">The <strong>TdIntervalYear</strong> to compare.</param>
        </member>
        <member name="M:Teradata.Client.Provider.TdIntervalYear.CompareTo(System.Object)">
            <summary>
               Compares this instance to the specified <see cref="T:Teradata.Client.Provider.TdIntervalYear"/> parameter 
               <paramref name="obj"/>. 
            </summary>
            <returns>
            The result of the comparison is returned as a signed integer.
            </returns>
            <remarks>
            	<para>
                    The integer returned when this instance is compared to
                    <paramref name="obj"/> indicates the following:
                </para>
            	<para>
            		<list type="table">
            			<listheader>
            				<term>Return Value</term>
            				<description>Meaning</description>
            			</listheader>
            			<item>
            				<term>Less than Zero</term>
            				<description>
            					<para>
                                    This instance is less than <paramref name="obj"/>.
                                </para>
            					<para>-or-</para>
            					<para>
                                    This instance is <see cref="F:Teradata.Client.Provider.TdIntervalYear.Null"/> and
                                    <paramref name="obj"/> is non-null.
                                </para>
            				</description>
            			</item>
            			<item>
            				<term>Zero</term>
            				<description>
            					<para>
                                    This instance is equal to <paramref name="obj"/>.
                                </para>
            					<para>-or-</para>
            					<para>
                                    This instance is <strong>Null</strong> and
                                    <paramref name="obj"/> is <strong>Null</strong>.
                                </para>
            				</description>
            			</item>
            			<item>
            				<term>Greater than Zero</term>
            				<description>
            					<para>
                                    This instance is greater than
                                    <paramref name="obj"/>.
                                </para>
            					<para>-or-</para>
            					<para>
            						<paramref name="obj"/> is <strong>Null</strong> and
                                    this instance is non-null.
                                </para>
            					<para>-or-</para>
            					<para>
            						<paramref name="obj"/> is a <c>null</c> reference.
                                </para>
            				</description>
            			</item>
            		</list>
            	</para>
            	<para>
            		<paramref name="obj"/> must be an instance of <strong>TdIntervalYear</strong> type
                    or <c>null</c> reference.
                </para>
            </remarks>
            <exception cref="T:System.ArgumentException"><paramref name="obj"/> is not of type <strong>TdIntervalYear</strong></exception>
            <seealso cref="M:Teradata.Client.Provider.TdIntervalYear.CompareTo(Teradata.Client.Provider.TdIntervalYear)"/>
            <overloads>
               Compares this instance to the supplied <strong>TdIntervalYear</strong> 
               and returns whether this instance is less than, equal or greater than the supplied 
               <strong>TdIntervalYear</strong>.
            </overloads>
            <param name="obj">A <strong>TdIntervalYear</strong> object to compare.</param>
        </member>
        <member name="M:Teradata.Client.Provider.TdIntervalYear.Equals(Teradata.Client.Provider.TdIntervalYear)">
            <summary>
               Compares this instance and another <see cref="T:Teradata.Client.Provider.TdIntervalYear"/> to determine 
               whether they are equal. 
            </summary>
            <returns>
               <c>true</c> if the two <strong>TdIntervalYear</strong> objects are equal, 
               <c>false</c> otherwise.
            </returns>
            <remarks>
            	<para>
                    The return value is <c>true</c> if the instance is equal to the
                    <paramref name="other"/>, <c>false</c> otherwise.
                </para>
            	<para>
            		<list type="table">
            			<listheader>
            				<term>Return Value</term>
            				<description>Description</description>
            			</listheader>
            			<item>
            				<term>
            					<c>true</c>
            				</term>
            				<description>
            					<para>
                                    This instance and <paramref name="other"/> are
                                    <see cref="F:Teradata.Client.Provider.TdIntervalYear.Null"/>
                                </para>
            					<para>-or-</para>
            					<para>
                                    This instance is equal to <paramref name="other"/>.
                                </para>
            				</description>
            			</item>
            			<item>
            				<term>
            					<c>false</c>
            				</term>
            				<description>
            					<para>
                                    This instance is <strong>Null</strong> and
                                    <paramref name="other"/> is not <strong>Null</strong>
            					</para>
            					<para>-or-</para>
            					<para>
                                    This instance is not <strong>Null</strong> and
                                    <paramref name="other"/> is <strong>Null</strong>
                                </para>
            					<para>-or-</para>
            					<para>
                                    This instance is not equal to
                                    <paramref name="other"/>.
                                </para>
            				</description>
            			</item>
            		</list>
            	</para>
            </remarks>
            <overloads>
               Returns a value indicating whether two instances of 
               <strong>TdIntervalYear</strong> are equal.
            </overloads>
            <param name="other"><strong>TdIntervalYear</strong> that will be compared to this instance 
            of <strong>TdIntervalYear</strong>.</param>
        </member>
        <member name="M:Teradata.Client.Provider.TdIntervalYear.Equals(Teradata.Client.Provider.TdIntervalYear,Teradata.Client.Provider.TdIntervalYear)">
            <summary>
               Compares two <see cref="T:Teradata.Client.Provider.TdIntervalYear"/> instances to determine whether they are equal.
            </summary>
            <returns>
               <c>true</c> if the two <strong>TdIntervalYear</strong> instances are equal, 
               <c>false</c> otherwise.
            </returns>
            <remarks>
            	<para>
                    The return value is <c>true</c> if the <paramref name="left"/> is
                    equal to the <paramref name="right"/>, <c>false</c> otherwise.
                </para>
            	<para>
            		<list type="table">
            			<listheader>
            				<term>Return Value</term>
            				<description>Description</description>
            			</listheader>
            			<item>
            				<term>
            					<c>true</c> 
            				</term>
            				<description>
            					<para>
            						<paramref name="left"/> is equal to
                                    <paramref name="right"/>
                                </para>
            					<para>-or-</para>
            					<para>
            						<paramref name="left"/> and
                                    <paramref name="right"/> are
                                    <see cref="F:Teradata.Client.Provider.TdIntervalYear.Null"/>.
                                </para>
            				</description>
            			</item>
            			<item>
            				<term>
            					<c>false</c>
            				</term>
            				<description>
            					<para>
            						<paramref name="left"/> is not equal to
                                    <paramref name="right"/>
                                </para>
            					<para>-or-</para>
            					<para>
            						<paramref name="left"/> is not <strong>Null</strong>
                                    and <paramref name="right"/> is
                                    <strong>Null</strong>
                                </para>
            					<para>-or-</para>
            					<para>
            						<paramref name="left"/> is <strong>Null</strong> and
                                    <paramref name="right"/> is not <strong>Null</strong>.
            					</para>
            				</description>
            			</item>
            		</list>
            	</para>
            </remarks>
            <example>
                The following code example uses various comparison methods and operators.
                <code lang="CS">
            // Create interval with 5 years and a precision of 4
            TdIntervalYear firstInterval = new TdIntervalYear(5, 4);
            // Create interval with 20 years and a precision of 4
            TdIntervalYear secondInterval = new TdIntervalYear(20, 4);
             
            // The following comparison methods and operators are equivalent
            if (false == TdIntervalYear.Equals(firstInterval, secondInterval) ||
                firstInterval != secondInterval ||
                true == TdIntervalYear.NotEquals(firstInterval, secondInterval) )
            {
               Console.WriteLine(“firstInterval does not equal secondInterval”);
            }
                </code>
            </example>
            <overloads>Returns a value indicating whether two instances of <strong>TdIntervalYear</strong> are equal.</overloads>
            <param name="left">A <strong>TdIntervalYear</strong> instance.</param>
            <param name="right">A <strong>TdIntervalYear</strong> instance.</param>
        </member>
        <member name="M:Teradata.Client.Provider.TdIntervalYear.Compare(Teradata.Client.Provider.TdIntervalYear,Teradata.Client.Provider.TdIntervalYear)">
            <summary>
                Two <see cref="T:Teradata.Client.Provider.TdIntervalYear"/> intervals are compared and a value is returned that indicates
                <paramref name="left"/> is greater than, less than or equal to
                <paramref name="right"/>.
            </summary>
            <returns>The result of the comparison is returned as a signed integer.</returns>
            <remarks>
            	<list type="table">
            		<listheader>
            			<term>Return Value</term>
            			<description>Description</description>
            		</listheader>
            		<item>
            			<term>Less than zero</term>
            			<description>
            				<para>
            				    <paramref name="left"/> is less than
                               <paramref name="right"/>
            				</para>
            			    <para>-or-</para>
            				<para>
                               <paramref name="left"/> is <see cref="F:Teradata.Client.Provider.TdIntervalYear.Null"/> 
                               and <paramref name="right"/> is not <strong>Null</strong>.
                            </para>
                        </description>
            		</item>
            		<item>
            			<term>Zero</term>
            			<description>
            				<para>
                              <paramref name="left"/> equals
                              <paramref name="right"/>
                           </para>
            			    <para>-or-</para>
            				<para>
                               <paramref name="left"/> is <strong>Null</strong> and
                               <paramref name="right"/> is <strong>Null</strong>
                           </para>
                        </description>
                   </item>
            		<item>
            			<term>Greater than zero</term>
            			<description>
            				<para>
                              <paramref name="left"/> is greater than
                              <paramref name="right"/>
                           </para>
            			    <para>-or-</para>
                           <para>
                               <paramref name="left"/> is not <strong>Null</strong> and
                               <paramref name="right"/> is <strong>Null</strong>.
                           </para>
                        </description>
            		</item>
            	</list>
            </remarks>
            <param name="left">An instance of <strong>TdIntervalYear</strong>.</param>
            <param name="right">An instance of <strong>TdIntervalYear</strong>.</param>
        </member>
        <member name="M:Teradata.Client.Provider.TdIntervalYear.NotEquals(Teradata.Client.Provider.TdIntervalYear,Teradata.Client.Provider.TdIntervalYear)">
            <summary>
                Compares two <see cref="T:Teradata.Client.Provider.TdIntervalYear"/>s to determine whether the
                <paramref name="left"/> is not equal to
                <paramref name="right"/>.
            </summary>
            <returns>
            	<para>
            		<c>true</c> indicates <paramref name="left"/> is not equal to
                    <paramref name="right"/>, <c>false</c> otherwise.
                </para>
            	<para>
            		<list type="table">
            			<listheader>
            				<term>Return Value</term>
            				<description>Description</description>
            			</listheader>
            			<item>
            				<term><c>true</c></term>
            				<description>
            					<para>
            						<paramref name="left"/> is less than or greater
                                    than <paramref name="right"/>
            					</para>
            					<para>-or-</para>
            					<para>
            						Either <paramref name="left"/> or <paramref name="right"/> is
                                   <see cref="F:Teradata.Client.Provider.TdIntervalYear.Null"/>.
                               </para>
            				</description>
            			</item>
            			<item>
            				<term><c>false</c></term>
            				<description>
            					<para>
            						<paramref name="left"/> is equal to
                                    <paramref name="right"/>
            					</para>
            					<para>-or-</para>
            					<para>
                                   <paramref name="left"/> and <paramref name="right"/> are
                                   <strong>Null</strong>.
                                </para>
            				</description>
            			</item>
            		</list>
            	</para>
            </returns>
            <param name="left">An instance of <strong>TdIntervalYear</strong>.</param>
            <param name="right">An instance of <strong>TdIntervalYear</strong>.</param>
        </member>
        <member name="M:Teradata.Client.Provider.TdIntervalYear.GreaterThan(Teradata.Client.Provider.TdIntervalYear,Teradata.Client.Provider.TdIntervalYear)">
            <summary>
               Determines whether the <paramref name="left"/> is greater than the <paramref name="right"/>.
            </summary>
            <returns>
            	<para>
            		<c>true</c> indicates the <paramref name="left"/> is greater than
                    the <paramref name="right"/>, <c>false</c> otherwise.
                </para>
            	<para>
            		<list type="table">
            			<listheader>
            				<term>Return Value</term>
            				<description>Description</description>
            			</listheader>
            			<item>
            				<term><c>true</c></term>
            				<description>
            					<paramref name="left"/> and
                                <paramref name="right"/> are not
                                <see cref="F:Teradata.Client.Provider.TdIntervalYear.Null"/> and
                                <paramref name="left"/> is greater than
                                <paramref name="right"/>.
            				</description>
            			</item>
            			<item>
            				<term><c>false</c></term>
            				<description>
            					<para>
                                    The <paramref name="left"/> is less than or equal
                                    to <paramref name="right"/>
            					</para>
            					<para>-or-</para>
            					<para>
                                   <paramref name="left"/> and / or
                                  <paramref name="right"/> is <strong>Null</strong>.
                               </para>
            				</description>
            			</item>
            		</list>
            	</para>
            </returns>
            <remarks>
            	<para>
                    Comparison operators always return <c>false</c> if one of the operands is
                    <strong>Null</strong>. Therefore you should not assume that the reverse
                    condition is <c>true</c>. For example you cannot assume that the
                    <paramref name="left"/> is less than or equal to the
                    <paramref name="right"/> if <c>GreaterThan</c> returns <c>false</c>.
                </para>
            	<para>
                    The reverse condition is <c>true</c> when the
                    <paramref name="left"/> and the
                    <paramref name="right"/> are not <strong>Null</strong>.
                </para>
            </remarks>
            <param name="left">An instance of <see cref="T:Teradata.Client.Provider.TdIntervalYear"/>.</param>
            <param name="right">An instance of <strong>TdIntervalYear</strong>.</param>
        </member>
        <member name="M:Teradata.Client.Provider.TdIntervalYear.GreaterThanOrEqual(Teradata.Client.Provider.TdIntervalYear,Teradata.Client.Provider.TdIntervalYear)">
            <summary>
               This operator determines whether the <paramref name="left"/> is greater than or 
               equal to the <paramref name="right"/>.
            </summary>
            <returns>
            	<para>
            		<c>true</c> indicates the <paramref name="left"/> is greater than
                    or equal to the <paramref name="right"/>, <c>false</c> otherwise.
                </para>
            	<para>
            		<list type="table">
            			<listheader>
            				<term>Return Value</term>
            				<description>Description</description>
            			</listheader>
            			<item>
            				<term><c>true</c></term>
            				<description>
            					<para>
            						<paramref name="left"/> and
                                    <paramref name="right"/> are not
                                    <see cref="F:Teradata.Client.Provider.TdIntervalYear.Null"/> and
                                    <paramref name="left"/> is greater than or equal
                                    to <paramref name="right"/>
            					</para>
            					<para>-or-</para>
            					<para>
            						<paramref name="left"/> is <strong>Null</strong>
                                    and <paramref name="right"/> is
                                    <strong>Null</strong>.
            					</para>
            				</description>
            			</item>
            			<item>
            				<term><c>false</c></term>
            				<description>
            					<para>
                                    The <paramref name="left"/> is less than
                                    <paramref name="right"/>
            					</para>
            					<para>-or-</para>
            					<para>
                                    Either <paramref name="left"/> or
                                    <paramref name="right"/> is <strong>Null</strong>.
            					</para>
            				</description>
            			</item>
            		</list>
            	</para>
            </returns>
            <remarks>
            	<para>
                    Comparison operators always return <c>false</c> if one of the operands is
                    <strong>Null</strong>. Therefore you should not assume that the reverse
                    condition is <c>true</c>. For example you cannot assume that the
                    <paramref name="left"/> is less than the
                    <paramref name="right"/> if the <c>GreaterThanOrEqual</c> method returns
                    <c>false</c>.
                </para>
            	<para>
                    The reverse condition is <c>true</c> when the
                    <paramref name="left"/> and the
                    <paramref name="right"/> are not <strong>Null</strong>.
                </para>
            </remarks>
            <param name="left">An instance of <see cref="T:Teradata.Client.Provider.TdIntervalYear"/>.</param>
            <param name="right">An instance of <strong>TdIntervalYear</strong>.</param>
        </member>
        <member name="M:Teradata.Client.Provider.TdIntervalYear.LessThan(Teradata.Client.Provider.TdIntervalYear,Teradata.Client.Provider.TdIntervalYear)">
            <summary>
               This method determines whether the <paramref name="left"/> is less than the <paramref name="right"/>.
            </summary>
            <returns>
            	<para>
            		<c>true</c> indicates the <paramref name="left"/> is less than
                    the <paramref name="right"/>, <c>false</c> otherwise.
                </para>
            	<para>
            		<list type="table">
            			<listheader>
            				<term>Return Value</term>
            				<description>Description</description>
            			</listheader>
            			<item>
            				<term><c>true</c></term>
            				<description>
            					<paramref name="left"/> and <paramref name="right"/> are
                                not <see cref="F:Teradata.Client.Provider.TdIntervalYear.Null"/> and
                                <paramref name="left"/> is less than
                                <paramref name="right"/>.
            				</description>
            			</item>
            			<item>
            				<term><c>false</c></term>
            				<description>
            					<para>
                                    The <paramref name="left"/> is greater than or
                                    equal to <paramref name="right"/>
            					</para>
            					<para>-or-</para>
            					<para>
                                    <paramref name="left"/> and / or
                                    <paramref name="right"/> is <strong>Null</strong>.
            					</para>
            				</description>
            			</item>
            		</list>
            	</para>
            </returns>
            <remarks>
            	<para>
                    Comparison operators always return <c>false</c> if one of the operands is
                    <strong>Null</strong>. Therefore you should not assume that the reverse
                    condition is <c>true</c>. For example you cannot assume that the
                    <paramref name="left"/> is greater than or equal to the
                    <paramref name="right"/> if the <c>LessThan</c> method returns
                    <c>false</c>.
                </para>
            	<para>
                    The reverse condition is <c>true</c> when the
                    <paramref name="left"/> and the
                    <paramref name="right"/> are not <strong>Null</strong>.
                </para>
            </remarks>
            <param name="left">An instance of <see cref="T:Teradata.Client.Provider.TdIntervalYear"/>.</param>
            <param name="right">An instance of <strong>TdIntervalYear</strong>.</param>
        </member>
        <member name="M:Teradata.Client.Provider.TdIntervalYear.LessThanOrEqual(Teradata.Client.Provider.TdIntervalYear,Teradata.Client.Provider.TdIntervalYear)">
            <summary>
                This method determines whether the <paramref name="left"/> is less
                than or equal to the <paramref name="right"/>.
            </summary>
            <returns>
            	<para>
            		<c>true</c> indicates the <paramref name="left"/> is less than or
                    equal to the <paramref name="right"/>, <c>false</c> otherwise.
                </para>
            	<para>
            		<list type="table">
            			<listheader>
            				<term>Return Value</term>
            				<description>Description</description>
            			</listheader>
            			<item>
            				<term><c>true</c></term>
            				<description>
            					<para>
            						<paramref name="left"/> and
                                    <paramref name="right"/> are not
                                    <see cref="F:Teradata.Client.Provider.TdIntervalYear.Null"/> and
                                    <paramref name="left"/> is less than or equal to
                                    <paramref name="right"/>
            					</para>
            					<para>-or-</para>
            					<para>
            						<paramref name="left"/> is <strong>Null</strong>
                                    and <paramref name="right"/> is
                                    <strong>Null</strong>.
            					</para>
            				</description>
            			</item>
            			<item>
            				<term><c>false</c></term>
            				<description>
            					<para>
                                    The <paramref name="left"/> is greater than
                                    <paramref name="right"/>
            					</para>
            					<para>-or-</para>
            					<para>
                                    Either <paramref name="left"/> or
                                    <paramref name="right"/> is <strong>Null</strong>.
            					</para>
            				</description>
            			</item>
            		</list>
            	</para>
            </returns>
            <remarks>
            	<para>
                    Comparison operators always return <c>false</c> if one of the operands is
                    <strong>Null</strong>. Therefore you should not assume that the reverse
                    condition is <c>true</c>. For example you cannot assume that the
                    <paramref name="left"/> is greater than the
                    <paramref name="right"/> if the <c>LessThanOrEqual</c> method returns
                    <c>false</c>.
                </para>
            	<para>
                    The reverse condition is <c>true</c> when the
                    <paramref name="left"/> and the
                    <paramref name="right"/> are not <strong>Null</strong>.
                </para>
            </remarks>
            <param name="left">An instance of <see cref="T:Teradata.Client.Provider.TdIntervalYear"/>.</param>
            <param name="right">An instance of <strong>TdIntervalYear</strong>.</param>
        </member>
        <member name="M:Teradata.Client.Provider.TdIntervalYear.ToInt32(Teradata.Client.Provider.TdIntervalYear)">
            <summary>
               Convert a <see cref="T:Teradata.Client.Provider.TdIntervalYear"/> implictly to an Int32 representing a year interval.
            </summary>
            <returns>
               <strong>TdIntervalYear</strong> converted to an Int32 representing a year interval.
            </returns>
            <exception cref="T:System.ArgumentNullException">The <strong>TdIntervalYear</strong> value is <see cref="F:Teradata.Client.Provider.TdIntervalYear.Null"/>.</exception>
            <param name="value">A <strong>TdIntervalYear</strong> interval.</param>
        </member>
        <member name="M:Teradata.Client.Provider.TdIntervalYear.Equals(System.Object)">
            <summary>
               Compares this instance and <paramref name="obj"/> to determine whether they
               are equal. 
            </summary>
            <returns><c>true</c> if the two <see cref="T:Teradata.Client.Provider.TdIntervalYear"/>s are equal, <c>false</c> otherwise.</returns>
            <remarks>
            	<para>
                    The return value is <c>true</c> if the instance is equal to the
                    <paramref name="obj"/>, <c>false</c> otherwise.
                </para>
            	<para>
            		<list type="table">
            			<listheader>
            				<term>Return Value</term>
            				<description>Description</description>
            			</listheader>
            			<item>
            				<term>
            					<c>true</c>
            				</term>
            				<description>
            					<para>
                                    This instance and <paramref name="obj"/> are
                                    <see cref="F:Teradata.Client.Provider.TdIntervalYear.Null"/>
                                </para>
            					<para>-or-</para>
            					<para>
                                    This instance is equal to <paramref name="obj"/>.
                                </para>
            				</description>
            			</item>
            			<item>
            				<term>
            					<c>false</c>
            				</term>
            				<description>
            					<para>
                                    This instance is not equal to
                                    <paramref name="obj"/>
                                </para>
            					<para>-or-</para>
            					<para>
                                    This instance is not <strong>Null</strong> and
                                    <paramref name="obj"/> is <strong>Null</strong>
                                </para>
            					<para>-or-</para>
            					<para>
                                    This instance is <strong>Null</strong> and
                                    <paramref name="obj"/> is not <strong>Null</strong>
            					</para>
            					<para>-or-</para>
            					<para>
            						<paramref name="obj"/> is a <strong>null</strong>
                                    reference.
                                </para>
            				</description>
            			</item>
            		</list>
            	</para>
            </remarks>
            <example>
                The following code example uses various comparison methods and operators.
                <code lang="CS">
            // Create a TdIntervalYear with 5 years and a precision of 4
            TdIntervalYear firstInterval = new TdIntervalYear(5, 4);
            // Create a TdIntervalYear with 20 years and a precision of 4
            Object intervalObj = new TdIntervalYear(20, 4);
             
            // The following comparison methods and operators are equivalent
            if (false == TdIntervalYear.Equals(firstInterval, (TdIntervalYear)intervalObj) ||
                firstInterval != (TdIntervalYear)intervalObj ||
                false == firstInterval.Equals(intervalObj) )
            {
               Console.WriteLine(“firstInterval does not equal intervalObj”);
            }
                </code>
            </example>
            <overloads>Returns a value indicating whether two instances of <strong>TdIntervalYear</strong> are equal.</overloads>
            <param name="obj"><strong>TdIntervalYear</strong> that will be compared to this instance 
            of <strong>TdIntervalYear</strong>.</param>
        </member>
        <member name="M:Teradata.Client.Provider.TdIntervalYear.GetHashCode">
            <summary>
            Returns the hash code for this instance. 
            </summary>
            <returns>The hash code is returned.</returns>
        </member>
        <member name="M:Teradata.Client.Provider.TdIntervalYear.ToString(System.String)">
            <summary>
               Converts this instance to its equivalent String representation using the specified format.
            </summary>
            <remarks>
            	<para>This method supports the following format specifiers:</para>
            	<para>
            		<list type="table">
            			<listheader>
            				<term>Format Specifier</term>
            				<description>Description</description>
            			</listheader>
            			<item>
            				<term>G</term>
            				<description>
            					<para>General interval format.</para>
            					<para>[sign][years]</para>
            				</description>
            			</item>
            			<item>
            				<term>L</term>
            				<description>
            					<para>Teradata literal format. This string may be used in
                                generating SQL against the Teradata database.</para>
            					<para>INTERVAL [sign]'[years]' YEAR</para>
            				</description>
            			</item>
            		</list>
            	</para>
               <para>Below is the description of each format item.</para>
            	<para>
            		<list type="table">
            			<listheader>
            				<term>Format Element</term>
            				<description>Description</description>
            			</listheader>
            			<item>
            				<term>sign</term>
            				<description>If negative a minus sign will be displayed.</description>
            			</item>
            			<item>
            				<term>years</term>
            				<description>The number of years (one to four digits in length).</description>
            			</item>
            		</list>
            	</para>
            	<para>
                    Cultural settings are not supported.
               </para>
            </remarks>
            <returns>
               A string representation of the <strong>TdIntervalYear</strong> will be returned.
            </returns>
            <exception cref="T:System.FormatException" caption="FormatException"><paramref name="format"/>
              contains an invalid format specifier.</exception>
            <param name="format">
               The format string that will be used to format the <strong>TdIntervalYear</strong>.
            </param>
        </member>
        <member name="M:Teradata.Client.Provider.TdIntervalYear.ToString">
            <summary>
               Converts this instance to its equivalent String representation.
            </summary>
            <remarks>
               <para>The string returned will follow this format:</para>
               <para>[sign][years]</para>
            	<para>
            		<list type="table">
            			<listheader>
            				<term>Format Element</term>
            				<description>Description</description>
            			</listheader>
            			<item>
            				<term>sign</term>
            				<description>If negative a minus sign will be displayed.</description>
            			</item>
            			<item>
            				<term>years</term>
            				<description>The number of years (one to four digits in length).</description>
            			</item>
            		</list>
            	</para>
            	<para>
                    Cultural settings are not supported.
                </para>
            </remarks>
            <returns>
               A string representation of the <strong>TdIntervalYear</strong> will be returned.
            </returns>
        </member>
        <member name="M:Teradata.Client.Provider.TdIntervalYear.Parse(System.String)">
            <summary>
               The specified string is converted into an equivalent <see cref="T:Teradata.Client.Provider.TdIntervalYear"/>.
            </summary>
            <returns>
               A <strong>TdIntervalYear</strong> is returned that is equivalent to the <strong>TdIntervalYear</strong> 
               contained in the input string.
            </returns>
            <exception cref="T:System.FormatException" caption="FormatException">
               The parameter <paramref name="value"/> cannot be converted into a 
               <strong>TdIntervalYear</strong> interval.
            </exception>
            <exception cref="T:System.ArgumentNullException" caption="ArgumentNullException">
               The parameter <paramref name="value"/> is a <c>null</c> reference.
            </exception>
            <exception cref="T:System.OverflowException">
               The resultant operation returns a value greater than the <see cref="F:Teradata.Client.Provider.TdIntervalYear.MaxValue"/> 
               or less than the <see cref="F:Teradata.Client.Provider.TdIntervalYear.MinValue"/>.
            </exception>
            <remarks>
            	<para>This method supports the following string formats:</para>
            	<para>
            		<list type="table">
            			<listheader>
            				<term>String Format</term>
            				<description>Description</description>
            			</listheader>
            			<item>
            				<term>General interval format.</term>
            				<description>
            					<para>[sign][years]</para>
            				</description>
            			</item>
            			<item>
            				<term>Teradata literal format. This string may be used in
                                generating SQL against the Teradata database.</term>
            				<description>
            					<para>INTERVAL [sign]'[years]' YEAR</para>
            				</description>
            			</item>
            		</list>
            	</para>
               <para>Below is the description of each format item.</para>
            	<para>
            		<list type="table">
            			<listheader>
            				<term>Format Element</term>
            				<description>Description</description>
            			</listheader>
            			<item>
            				<term>sign</term>
            				<description>If negative a minus sign will be displayed.</description>
            			</item>
            			<item>
            				<term>years</term>
            				<description>The number of years (one to four digits in length).</description>
            			</item>
            		</list>
            	</para>
            	<para>
                    Cultural settings are not supported.
            	</para>
            	<para>
            		While parsing the <paramref name="value"/> the <see cref="P:Teradata.Client.Provider.TdIntervalYear.Precision"/> will be
            		set to the number of digits contained within the <see cref="P:Teradata.Client.Provider.TdIntervalYear.Years"/> component. 
            	</para>
            	<para>
            		For example a <paramref name="value"/> of "222" will
            		contain 222 years and a precision of 3.
            	</para>
            </remarks>
            <overloads>
            	The specified string is converted into an equivalent 
               <strong>TdIntervalYear</strong> interval.
            </overloads>
            <param name="value">A string to be converted into a <strong>TdIntervalYear</strong>.</param>
        </member>
        <member name="M:Teradata.Client.Provider.TdIntervalYear.TryParse(System.String,Teradata.Client.Provider.TdIntervalYear@)">
            <summary>
               The specified string is converted into an equivalent <see cref="T:Teradata.Client.Provider.TdIntervalYear"/>.
            </summary>
            <returns>
                <c>true</c> if the conversion of <paramref name="value"/> succeeded, <c>false</c>
                otherwise.
            </returns>
            <remarks>
            	<para>This method supports the following string formats:</para>
            	<para>
            		<list type="table">
            			<listheader>
            				<term>String Format</term>
            				<description>Description</description>
            			</listheader>
            			<item>
            				<term>General interval format.</term>
            				<description>
            					<para>[sign][years]</para>
            				</description>
            			</item>
            			<item>
            				<term>Teradata literal format. This string may be used in
                                generating SQL against the Teradata database.</term>
            				<description>
            					<para>INTERVAL [sign]'[years]' YEAR</para>
            				</description>
            			</item>
            		</list>
            	</para>
               <para>Below is the description of each format item.</para>
            	<para>
            		<list type="table">
            			<listheader>
            				<term>Format Element</term>
            				<description>Description</description>
            			</listheader>
            			<item>
            				<term>sign</term>
            				<description>If negative a minus sign will be displayed.</description>
            			</item>
            			<item>
            				<term>years</term>
            				<description>The number of years (one to four digits in length).</description>
            			</item>
            		</list>
            	</para>
            	<para>
                    Cultural settings are not supported.
                </para>
            	<para>
            		While parsing the <paramref name="value"/> the <see cref="P:Teradata.Client.Provider.TdIntervalYear.Precision"/> will be
            		set to the number of digits contained within the <see cref="P:Teradata.Client.Provider.TdIntervalYear.Years"/> component. 
            	</para>
            	<para>
            		For example a <paramref name="value"/> of "222" will
            		contain 222 years and a precision of 3.
            	</para>
            </remarks>
            <overloads>
               The specified string is converted into an equivalent 
               <see cref="T:Teradata.Client.Provider.TdIntervalYear"/> interval.  A <c>true</c> is returned 
               if the conversion succeeded, <c>false</c> otherwise.
            </overloads>
            <param name="value">A string to be converted into a <strong>TdIntervalYear</strong>.</param>
            <param name="result">The converted string into a <strong>TdIntervalYear</strong>.</param>
        </member>
        <member name="M:Teradata.Client.Provider.TdIntervalYear.GetXmlSchema(System.Xml.Schema.XmlSchemaSet)">
             <summary>
                Gets the XML Qualified name for <see cref="T:Teradata.Client.Provider.TdIntervalYear"/> XML type mapping.
             </summary>
             <param name="xmlSchemaSet">Holds zero or more XML Schema definition language (XSD) schemas.</param>
             <returns>
                Returns <strong>xs:duration.</strong>.
             </returns>
             <example>
             This examples shows how to use <strong>TdIntervalYear</strong> with <see cref="T:System.Xml.Serialization.XmlSerializer"/> class.
             <see cref="T:System.Xml.Serialization.XmlElementAttribute"/> is used to indicate that the Teradata Database column can be <strong>Null</strong>.
             <code>
              public class Order
              {
                  public TdTimestamp Date;
             
                  public TdIntervalYear ExpirationPeriod;
             
                  public TdTimestamp ExpirationDate;
            
                  public Int32 ProductId;
            
                  public Int32 Quantity;
            
                  public Int32? BackOrderQuantity;
            
                  [XmlElementAttribute(IsNullable = true)]        
                  public TdDecimal BackOrderPrice;
              }
             
              internal class OrderWriter
              {
              
                  public static void Write()
                  {
                      // Setup the order
                      Order x = new Order();
              
                      x.Date = new TdTimestamp(DateTime.Today);
                      x.ExpirationPeriod = new TdIntervalYear(1,1);
                      x.ExpirationDate = x.Date + x.ExpirationPeriod;
                      x.ProductId = 100;
                      x.Quantity = 2000;
                      x.BackOrderQuantity = null;
                      x.BackOrderPrice = TdDecimal.Null;
            
                      // Write out today's orders to the file.
                      
                      // Open the file.
                      XmlWriterSettings settings = new XmlWriterSettings();
                      settings.Indent = true;
                      XmlWriter writer = XmlWriter.Create(@"C:\Temp\TodayOrders.XML", settings);
                      writer.WriteStartElement("TodayOrders");
                
                      // Write out the schema.
                      XmlSchemas schemas = new XmlSchemas();
                      XmlSchemaExporter schExporter = new XmlSchemaExporter(schemas);
                      schExporter.ExportTypeMapping(new XmlReflectionImporter().ImportTypeMapping(typeof(Order)));
                      schemas[0].Write(writer);
            
                      // Write out the orders.
                      XmlSerializer xml = new XmlSerializer(typeof(Order));
                      xml.Serialize(writer, x);
              
                      // Close the document.
                      writer.WriteEndDocument();
                      writer.Close();
                  }
              }
             
              /* Output is:
             
              &lt;TodayOrders&gt;
                &lt;xs:schema elementFormDefault="qualified" xmlns:xs="http://www.w3.org/2001/XMLSchema"&gt;
                  &lt;xs:element name="Order" nillable="true" type="Order" /&gt;
                  &lt;xs:complexType name="Order"&gt;
                    &lt;xs:sequence&gt;
                      &lt;xs:element minOccurs="1" maxOccurs="1" name="Date" type="xs:dateTime" /&gt;
                      &lt;xs:element minOccurs="1" maxOccurs="1" name="ExpirationPeriod" type="xs:duration" /&gt;
                      &lt;xs:element minOccurs="1" maxOccurs="1" name="ExpirationDate" type="xs:dateTime" /&gt;
                      &lt;xs:element minOccurs="1" maxOccurs="1" name="ProductId" type="xs:int" /&gt;
                      &lt;xs:element minOccurs="1" maxOccurs="1" name="Quantity" type="xs:int" /&gt;
                      &lt;xs:element minOccurs="1" maxOccurs="1" name="BackOrderQuantity" nillable="true" type="xs:int" /&gt;
                      &lt;xs:element minOccurs="1" maxOccurs="1" name="BackOrderPrice" nillable="true" type="xs:decimal" /&gt;
                    &lt;/xs:sequence&gt;
                  &lt;/xs:complexType&gt;
                &lt;/xs:schema&gt;
                &lt;Order xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xmlns:xsd="http://www.w3.org/2001/XMLSchema"&gt;
                  &lt;Date&gt;2008-02-01T00:00:00-08:00&lt;/Date&gt;
                  &lt;ExpirationPeriod&gt;P1Y&lt;/ExpirationPeriod&gt;
                  &lt;ExpirationDate&gt;2009-02-01T00:00:00-08:00&lt;/ExpirationDate&gt;
                  &lt;ProductId&gt;100&lt;/ProductId&gt;
                  &lt;Quantity&gt;2000&lt;/Quantity&gt;
                  &lt;BackOrderQuantity xsi:nil="true" /&gt;
                  &lt;BackOrderPrice xsi:nil="true" /&gt;
                &lt;/Order&gt;
              &lt;/TodayOrders&gt;
             
              */
             </code>
             </example>        
        </member>
        <member name="M:Teradata.Client.Provider.TdIntervalYear.op_Addition(Teradata.Client.Provider.TdIntervalYear,System.Int32)">
            <summary>
               The specified number of years is added to the <see cref="T:Teradata.Client.Provider.TdIntervalYear"/>.
            </summary>
            <remarks>
            <para>
               If <paramref name="interval"/> is <see cref="F:Teradata.Client.Provider.TdIntervalYear.Null"/> a <strong>Null</strong> will be returned.
            </para>
            <para>
               The returned <strong>TdIntervalYear</strong> will contain a precision 
               set to the <see cref="F:Teradata.Client.Provider.TdIntervalYear.MaxPrecision"/>.
            </para>
            </remarks>
            <returns>
               A new <strong>TdIntervalYear</strong> as the result of adding an Int32 to 
               <strong>TdIntervalYear</strong>.
            </returns>        
            <exception cref="T:System.OverflowException">
               The resultant operation returns a value greater than the <see cref="F:Teradata.Client.Provider.TdIntervalYear.MaxValue"/> 
               or less than the <see cref="F:Teradata.Client.Provider.TdIntervalYear.MinValue"/>.
            </exception>
            <param name="interval">A <strong>TdIntervalYear</strong>.</param>
            <param name="years">Number of years to add.</param>
        </member>
        <member name="M:Teradata.Client.Provider.TdIntervalYear.op_Addition(System.Int32,Teradata.Client.Provider.TdIntervalYear)">
            <summary>
               The specified number of years is added to the <see cref="T:Teradata.Client.Provider.TdIntervalYear"/>.
            </summary>
            <remarks>
            <para>
               If <paramref name="interval"/> is <see cref="F:Teradata.Client.Provider.TdIntervalYear.Null"/> a <strong>Null</strong> will be returned.
            </para>
            <para>
               The returned <strong>TdIntervalYear</strong> will contain a precision 
               set to the <see cref="F:Teradata.Client.Provider.TdIntervalYear.MaxPrecision"/>.
            </para>
            </remarks>
            <returns>
               A new <strong>TdIntervalYear</strong> as the result of adding an Int32 to 
               <strong>TdIntervalYear</strong>.
            </returns>        
            <exception cref="T:System.OverflowException">
               The resultant operation returns a value greater than the <see cref="F:Teradata.Client.Provider.TdIntervalYear.MaxValue"/> 
               or less than the <see cref="F:Teradata.Client.Provider.TdIntervalYear.MinValue"/>.
            </exception>
            <param name="years">Number of years to add.</param>
            <param name="interval">A <strong>TdIntervalYear</strong>.</param>
        </member>
        <member name="M:Teradata.Client.Provider.TdIntervalYear.op_Subtraction(Teradata.Client.Provider.TdIntervalYear,System.Int32)">
            <summary>
               The specified number of years is subtracted from the <see cref="T:Teradata.Client.Provider.TdIntervalYear"/>.
            </summary>
            <remarks>
            <para>
               If <paramref name="interval"/> is <see cref="F:Teradata.Client.Provider.TdIntervalYear.Null"/> a <strong>Null</strong> will be returned.
            </para>
            <para>
               The returned <strong>TdIntervalYear</strong> will contain a precision 
               set to the <see cref="F:Teradata.Client.Provider.TdIntervalYear.MaxPrecision"/>.
            </para>
            </remarks>
            <exception cref="T:System.OverflowException">
               The resultant operation returns a value greater than the <see cref="F:Teradata.Client.Provider.TdIntervalYear.MaxValue"/> 
               or less than the <see cref="F:Teradata.Client.Provider.TdIntervalYear.MinValue"/>.
            </exception>
            <param name="interval">A <strong>TdIntervalYear</strong>.</param>
            <param name="years">Number of years to subtract.</param>
            <returns>
               A new <strong>TdIntervalYear</strong> as the result of substracting an Int32 from 
               <strong>TdIntervalYear</strong>.
            </returns>
        </member>
        <member name="M:Teradata.Client.Provider.TdIntervalYear.op_Addition(Teradata.Client.Provider.TdIntervalYear,Teradata.Client.Provider.TdIntervalYear)">
            <summary>
               A <see cref="T:Teradata.Client.Provider.TdIntervalYear"/> is added to another <strong>TdIntervalYear</strong>.
            </summary>
            <remarks>
            <para>
               If either parameter is <strong>Null</strong> a <see cref="F:Teradata.Client.Provider.TdIntervalYear.Null"/> will be returned.
            </para>
            <para>
               The returned <strong>TdIntervalYear</strong> will contain a precision 
               set to the <see cref="F:Teradata.Client.Provider.TdIntervalYear.MaxPrecision"/>.
            </para>
            </remarks>
            <returns>
               A new <strong>TdIntervalYear</strong> as the result of adding a 
               <strong>TdIntervalYear</strong> to another <strong>TdIntervalYear</strong>.
             </returns>        
            <exception cref="T:System.OverflowException">
               The resultant operation returns a value greater than the <see cref="F:Teradata.Client.Provider.TdIntervalYear.MaxValue"/> 
               or less than the <see cref="F:Teradata.Client.Provider.TdIntervalYear.MinValue"/>.
            </exception>
            <overloads>
               Calculates the sum of two operands and returns a <strong>TdIntervalYear</strong>.
            </overloads>
            <param name="left">A <strong>TdIntervalYear</strong>.</param>
            <param name="right">A <strong>TdIntervalYear</strong>.</param>
        </member>
        <member name="M:Teradata.Client.Provider.TdIntervalYear.op_Subtraction(Teradata.Client.Provider.TdIntervalYear,Teradata.Client.Provider.TdIntervalYear)">
            <summary>
               A <see cref="T:Teradata.Client.Provider.TdIntervalYear"/> is subtracted from another <strong>TdIntervalYear</strong>.
            </summary>
            <remarks>
            <para>
               If either parameter is <strong>Null</strong> a <see cref="F:Teradata.Client.Provider.TdIntervalYear.Null"/> will be returned.
            </para>
            <para>
               The returned <strong>TdIntervalYear</strong> will contain a precision 
               set to the <see cref="F:Teradata.Client.Provider.TdIntervalYear.MaxPrecision"/>.
            </para>
            </remarks>
            <returns>
               A new <strong>TdIntervalYear</strong> as the result of subtracting a 
               <strong>TdIntervalYear</strong> from the left <strong>TdIntervalYear</strong>.
            </returns>        
            <overloads>
               The right operand is subtracted from the left operand returning a 
               <strong>TdIntervalYear</strong>.
            </overloads>
            <exception cref="T:System.OverflowException">
               The resultant operation returns a value greater than the <see cref="F:Teradata.Client.Provider.TdIntervalYear.MaxValue"/> 
               or less than the <see cref="F:Teradata.Client.Provider.TdIntervalYear.MinValue"/>.
            </exception>
            <param name="left">A <strong>TdIntervalYear</strong> to subtract from.</param>
            <param name="right">A <strong>TdIntervalYear</strong> to subtract.</param>
        </member>
        <member name="M:Teradata.Client.Provider.TdIntervalYear.op_Multiply(Teradata.Client.Provider.TdIntervalYear,System.Int32)">
            <summary>
               A <see cref="T:Teradata.Client.Provider.TdIntervalYear"/> is multiplied by an integer value.
            </summary>
            <remarks>
            <para>
               If <paramref name="interval"/> is <see cref="F:Teradata.Client.Provider.TdIntervalYear.Null"/> a <strong>Null</strong> will be returned.
            </para>
            <para>
               The returned <strong>TdIntervalYear</strong> will contain a precision 
               set to the <see cref="F:Teradata.Client.Provider.TdIntervalYear.MaxPrecision"/>.
            </para>
            </remarks>
            <returns>
               A new <strong>TdIntervalYear</strong> as the result of multiplying a 
               <strong>TdIntervalYear</strong> and an integer value.
            </returns>        
            <exception cref="T:System.OverflowException">
               The resultant operation returns a value greater than the <see cref="F:Teradata.Client.Provider.TdIntervalYear.MaxValue"/> 
               or less than the <see cref="F:Teradata.Client.Provider.TdIntervalYear.MinValue"/>.
            </exception>
            <param name="interval">A <strong>TdIntervalYear</strong>.</param>
            <param name="value">A multiplier.</param>
        </member>
        <member name="M:Teradata.Client.Provider.TdIntervalYear.op_Multiply(System.Int32,Teradata.Client.Provider.TdIntervalYear)">
            <summary>
               A <see cref="T:Teradata.Client.Provider.TdIntervalYear"/> is multiplied by an integer value.
            </summary>
            <remarks>
            <para>
               If <paramref name="interval"/> is <see cref="F:Teradata.Client.Provider.TdIntervalYear.Null"/> a <strong>Null</strong> will be returned.
            </para>
            <para>
               The returned <strong>TdIntervalYear</strong> will contain a precision 
               set to the <see cref="F:Teradata.Client.Provider.TdIntervalYear.MaxPrecision"/>.
            </para>
            </remarks>
            <returns>
               A new <strong>TdIntervalYear</strong> as the result of multiplying a 
               <strong>TdIntervalYear</strong> and an integer value.
            </returns>        
            <exception cref="T:System.OverflowException">
               The resultant operation returns a value greater than the <see cref="F:Teradata.Client.Provider.TdIntervalYear.MaxValue"/> 
               or less than the <see cref="F:Teradata.Client.Provider.TdIntervalYear.MinValue"/>.
            </exception>
            <param name="value">A multiplier.</param>
            <param name="interval">A <strong>TdIntervalYear</strong>.</param>
        </member>
        <member name="M:Teradata.Client.Provider.TdIntervalYear.op_Division(Teradata.Client.Provider.TdIntervalYear,System.Int32)">
            <summary>
               A <see cref="T:Teradata.Client.Provider.TdIntervalYear"/> is divided by an integer value.
            </summary>
            <remarks>
            <para>
               If <paramref name="interval"/> is <see cref="F:Teradata.Client.Provider.TdIntervalYear.Null"/> a <strong>Null</strong> will be returned.
            </para>
            <para>
               The returned <strong>TdIntervalYear</strong> will contain a precision 
               which matches the precision of the <strong>interval</strong> parameter.
            </para>
            </remarks>
            <returns>
               A new <strong>TdIntervalYear</strong> as the result of dividing a 
               <strong>TdIntervalYear</strong> and an integer value.
            </returns>        
            <exception cref="T:System.DivideByZeroException">The <paramref name="value"/> divisor cannot be 0.</exception>
            <param name="interval">A <strong>TdIntervalYear</strong>.</param>
            <param name="value">A divisor.</param>
        </member>
        <member name="M:Teradata.Client.Provider.TdIntervalYear.Add(Teradata.Client.Provider.TdIntervalYear,Teradata.Client.Provider.TdIntervalYear)">
            <summary>
               Calculates the sum of two <see cref="T:Teradata.Client.Provider.TdIntervalYear"/> operands.
            </summary>
            <remarks>
            <para>
               If either parameter is <strong>Null</strong> a <see cref="F:Teradata.Client.Provider.TdIntervalYear.Null"/> will be returned.
            </para>
            <para>
               The returned <strong>TdIntervalYear</strong> will contain a precision  
               set to the <see cref="F:Teradata.Client.Provider.TdIntervalYear.MaxPrecision"/>.
            </para>
            </remarks>
            <returns>A <strong>TdIntervalYear</strong> containing the sum.</returns>
            <exception cref="T:System.OverflowException">
               The resultant operation returns a value greater than the <see cref="F:Teradata.Client.Provider.TdIntervalYear.MaxValue"/> 
               or less than the <see cref="F:Teradata.Client.Provider.TdIntervalYear.MinValue"/>.
            </exception>
            <overloads>
               Calculates the sum of two operands and returns a <strong>TdIntervalYear</strong>.
            </overloads>
            <param name="left">A <strong>TdIntervalYear</strong>.</param>
            <param name="right">A <strong>TdIntervalYear</strong>.</param>
        </member>
        <member name="M:Teradata.Client.Provider.TdIntervalYear.Add(Teradata.Client.Provider.TdIntervalYear,System.Int32)">
            <summary>
               The specified number of years is added to the <see cref="T:Teradata.Client.Provider.TdIntervalYear"/>.
            </summary>
            <remarks>
            <para>
               If <paramref name="interval"/> is <see cref="F:Teradata.Client.Provider.TdIntervalYear.Null"/> a <strong>Null</strong> will be returned.
            </para>
            <para>
               The returned <strong>TdIntervalYear</strong> will contain a precision  
               set to the <see cref="F:Teradata.Client.Provider.TdIntervalYear.MaxPrecision"/>.
            </para>
            </remarks>
            <returns>
               A new <strong>TdIntervalYear</strong> as the result of adding an Int32 to 
               <strong>TdIntervalYear</strong>.
            </returns>        
            <exception cref="T:System.OverflowException">
               The resultant operation returns a value greater than the <see cref="F:Teradata.Client.Provider.TdIntervalYear.MaxValue"/> 
               or less than the <see cref="F:Teradata.Client.Provider.TdIntervalYear.MinValue"/>.
            </exception>
            <param name="interval">A <strong>TdIntervalYear</strong>.</param>
            <param name="years">Number of years to add.</param>
        </member>
        <member name="M:Teradata.Client.Provider.TdIntervalYear.Add(System.Int32,Teradata.Client.Provider.TdIntervalYear)">
            <summary>
               The specified number of years is added to the <see cref="T:Teradata.Client.Provider.TdIntervalYear"/>.
            </summary>
            <remarks>
            <para>
               If <paramref name="interval"/> is <see cref="F:Teradata.Client.Provider.TdIntervalYear.Null"/> a <strong>Null</strong> will be returned.
            </para>
            <para>
               The returned <strong>TdIntervalYear</strong> will contain a precision  
               set to the <see cref="F:Teradata.Client.Provider.TdIntervalYear.MaxPrecision"/>.
            </para>
            </remarks>
            <returns>
               A new <strong>TdIntervalYear</strong> as the result of adding an Int32 to 
               <strong>TdIntervalYear</strong>.
            </returns>        
            <exception cref="T:System.OverflowException">
               The resultant operation returns a value greater than the <see cref="F:Teradata.Client.Provider.TdIntervalYear.MaxValue"/> 
               or less than the <see cref="F:Teradata.Client.Provider.TdIntervalYear.MinValue"/>.
            </exception>
            <param name="years">Number of years to add.</param>
            <param name="interval">A <strong>TdIntervalYear</strong>.</param>
        </member>
        <member name="M:Teradata.Client.Provider.TdIntervalYear.Subtract(Teradata.Client.Provider.TdIntervalYear,System.Int32)">
            <summary>
               The specified number of years is subtracted from the <see cref="T:Teradata.Client.Provider.TdIntervalYear"/>.
            </summary>
            <remarks>
            <para>
               If <paramref name="interval"/> is <see cref="F:Teradata.Client.Provider.TdIntervalYear.Null"/> a <strong>Null</strong> will be returned.
            </para>
            <para>
               The returned <strong>TdIntervalYear</strong> will contain a precision 
               set to the <see cref="F:Teradata.Client.Provider.TdIntervalYear.MaxPrecision"/>.
            </para>
            </remarks>
            <returns>
               A new <strong>TdIntervalYear</strong> as the result of substracting an Int32 from 
               <strong>TdIntervalYear</strong>.
            </returns>
            <exception cref="T:System.OverflowException">
               The resultant operation returns a value greater than the <see cref="F:Teradata.Client.Provider.TdIntervalYear.MaxValue"/> 
               or less than the <see cref="F:Teradata.Client.Provider.TdIntervalYear.MinValue"/>.
            </exception>
            <param name="interval">A <strong>TdIntervalYear</strong>.</param>
            <param name="years">Number of years to subtract.</param>
        </member>
        <member name="M:Teradata.Client.Provider.TdIntervalYear.Subtract(Teradata.Client.Provider.TdIntervalYear,Teradata.Client.Provider.TdIntervalYear)">
            <summary>
               A <see cref="T:Teradata.Client.Provider.TdIntervalYear"/> is subtracted from another <strong>TdIntervalYear</strong>.
            </summary>
            <remarks>
            <para>
               If either parameter is <strong>Null</strong> a <see cref="F:Teradata.Client.Provider.TdIntervalYear.Null"/> will be returned.
            </para>
            <para>
               The returned <strong>TdIntervalYear</strong> will contain a precision 
               set to the <see cref="F:Teradata.Client.Provider.TdIntervalYear.MaxPrecision"/>.
            </para>
            </remarks>
            <returns>
               A new <strong>TdIntervalYear</strong> as the result of subtracting a 
               <strong>TdIntervalYear</strong> from the left <strong>TdIntervalYear</strong>.
            </returns>        
            <overloads>
               The right operand is subtracted from the left operand returning a 
               <strong>TdIntervalYear</strong>.
            </overloads>
            <exception cref="T:System.OverflowException">
               The resultant operation returns a value greater than the <see cref="F:Teradata.Client.Provider.TdIntervalYear.MaxValue"/> 
               or less than the <see cref="F:Teradata.Client.Provider.TdIntervalYear.MinValue"/>.
            </exception>
            <param name="left">A <strong>TdIntervalYear</strong> to subtract from.</param>
            <param name="right">A <strong>TdIntervalYear</strong> to subtract.</param>
        </member>
        <member name="M:Teradata.Client.Provider.TdIntervalYear.Multiply(Teradata.Client.Provider.TdIntervalYear,System.Int32)">
            <summary>
               A <see cref="T:Teradata.Client.Provider.TdIntervalYear"/> is multiplied by an integer value.
            </summary>
            <remarks>
            <para>
               If <paramref name="interval"/> is <see cref="F:Teradata.Client.Provider.TdIntervalYear.Null"/> a <strong>Null</strong> will be returned.
            </para>
            <para>
               The returned <strong>TdIntervalYear</strong> will contain a precision 
               set to the <see cref="F:Teradata.Client.Provider.TdIntervalYear.MaxPrecision"/>. 
            </para>
            </remarks>
            <returns>
               A new <strong>TdIntervalYear</strong> as the result of multiplying a 
               <strong>TdIntervalYear</strong> and an integer value.
            </returns>        
            <exception cref="T:System.OverflowException">
               The resultant operation returns a value greater than the <see cref="F:Teradata.Client.Provider.TdIntervalYear.MaxValue"/> 
               or less than the <see cref="F:Teradata.Client.Provider.TdIntervalYear.MinValue"/>.
            </exception>
            <param name="interval">A <strong>TdIntervalYear</strong>.</param>
            <param name="value">A multiplier.</param>
        </member>
        <member name="M:Teradata.Client.Provider.TdIntervalYear.Multiply(System.Int32,Teradata.Client.Provider.TdIntervalYear)">
            <summary>
               A <see cref="T:Teradata.Client.Provider.TdIntervalYear"/> is multiplied by an integer value.
            </summary>
            <remarks>
            <para>
               If <paramref name="interval"/> is <see cref="F:Teradata.Client.Provider.TdIntervalYear.Null"/> a <strong>Null</strong> will be returned.
            </para>
            <para>
               The returned <strong>TdIntervalYear</strong> will contain a precision 
               set to the <see cref="F:Teradata.Client.Provider.TdIntervalYear.MaxPrecision"/>.
            </para>
            </remarks>
            <returns>
               A new <strong>TdIntervalYear</strong> as the result of multiplying a 
               <strong>TdIntervalYear</strong> and an integer value.
            </returns>        
            <exception cref="T:System.OverflowException">
               The resultant operation returns a value greater than the <see cref="F:Teradata.Client.Provider.TdIntervalYear.MaxValue"/> 
               or less than the <see cref="F:Teradata.Client.Provider.TdIntervalYear.MinValue"/>.
            </exception>
            <param name="value">A multiplier.</param>
            <param name="interval">A <strong>TdIntervalYear</strong>.</param>
        </member>
        <member name="M:Teradata.Client.Provider.TdIntervalYear.Divide(Teradata.Client.Provider.TdIntervalYear,System.Int32)">
            <summary>
               A <see cref="T:Teradata.Client.Provider.TdIntervalYear"/> is divided by an integer value.
            </summary>
            <remarks>
            <para>
               If <paramref name="interval"/> is <see cref="F:Teradata.Client.Provider.TdIntervalYear.Null"/> a <strong>Null</strong> will be returned.
            </para>
            <para>
               The returned <strong>TdIntervalYear</strong> will contain a precision 
               which matches the precision of the <strong>interval</strong> parameter.
            </para>
            </remarks>
            <returns>
               A new <strong>TdIntervalYear</strong> as the result of dividing a 
               <strong>TdIntervalYear</strong> and an integer value.
            </returns>        
            <exception cref="T:System.DivideByZeroException">The <paramref name="value"/> divisor cannot be 0.</exception>
            <param name="interval">A <strong>TdIntervalYear</strong>.</param>
            <param name="value">A divisor.</param>
        </member>
        <member name="M:Teradata.Client.Provider.TdIntervalYear.op_GreaterThan(Teradata.Client.Provider.TdIntervalYear,Teradata.Client.Provider.TdIntervalYear)">
            <summary>
               This operator determines whether the <paramref name="left"/> is greater than the <paramref name="right"/>.
            </summary>
            <returns>
            	<para>
            		<c>true</c> indicates the <paramref name="left"/> is greater than
                    the <paramref name="right"/>, <c>false</c> otherwise.
                </para>
            	<para>
            		<list type="table">
            			<listheader>
            				<term>Return Value</term>
            				<description>Description</description>
            			</listheader>
            			<item>
            				<term><c>true</c></term>
            				<description>
            					<paramref name="left"/> and
                                <paramref name="right"/> are not
                                <see cref="F:Teradata.Client.Provider.TdIntervalYear.Null"/> and
                                <paramref name="left"/> is greater than
                                <paramref name="right"/>.
            				</description>
            			</item>
            			<item>
            				<term><c>false</c></term>
            				<description>
            					<para>
                                    The <paramref name="left"/> is less than or equal
                                    to <paramref name="right"/>
                                </para>
            					<para>-or-</para>
            					<para>
                                    Either <paramref name="left"/> and / or
                                    <paramref name="right"/> is <strong>Null</strong>.
                                </para>
            				</description>
            			</item>
            		</list>
            	</para>
            </returns>
            <remarks>
            	<para>Comparison operators always return <c>false</c> if one of the operands is
                <strong>Null</strong>. Therefore you should not assume that the reverse condition
                is <c>true</c>. For example you cannot assume that the <paramref name="left"/> is less than or equal to
                the <paramref name="right"/> if the "&gt;" operator returns <c>false</c>.</para>
            	<para>The reverse condition is <c>true</c> when the <paramref name="left"/> and the <paramref name="right"/> are not
                <strong>Null</strong>.</para>
            </remarks>
            <param name="left">An instance of <see cref="T:Teradata.Client.Provider.TdIntervalYear"/>.</param>
            <param name="right">An instance of <strong>TdIntervalYear</strong>.</param>
        </member>
        <member name="M:Teradata.Client.Provider.TdIntervalYear.op_GreaterThanOrEqual(Teradata.Client.Provider.TdIntervalYear,Teradata.Client.Provider.TdIntervalYear)">
            <summary>
               This operator determines whether the <paramref name="left"/> is greater than or 
            equal to the <paramref name="right"/>.
            </summary>
            <returns>
            	<para>
            		<c>true</c> indicates the <paramref name="left"/> is greater than
                    or equal to the <paramref name="right"/>, <c>false</c> otherwise.
                </para>
            	<para>
            		<list type="table">
            			<listheader>
            				<term>Return Value</term>
            				<description>Description</description>
            			</listheader>
            			<item>
            				<term><c>true</c></term>
            				<description>
            					<para>
            						<paramref name="left"/> and
                                    <paramref name="right"/> are not
                                    <see cref="F:Teradata.Client.Provider.TdIntervalYear.Null"/> and
                                    <paramref name="left"/> is greater than or equal
                                    to <paramref name="right"/>
            					</para>
            					<para>-or-</para>
            					<para>
            						<paramref name="left"/> is <strong>Null</strong>
                                    and <paramref name="right"/> is
                                    <strong>Null</strong>.
            					</para>
            				</description>
            			</item>
            			<item>
            				<term><c>false</c></term>
            				<description>
            					<para>
                                    The <paramref name="left"/> is less than
                                    <paramref name="right"/>
            					</para>
            					<para>-or-</para>
            					<para>
                                    Either <paramref name="left"/> or
                                    <paramref name="right"/> is <strong>Null</strong>.
            					</para>
            				</description>
            			</item>
            		</list>
            	</para>
            </returns>
            <remarks>
            	<para>
                    Comparison operators always return <c>false</c> if one of the operands is
                    <strong>Null</strong>. Therefore you should not assume that the reverse
                    condition is <c>true</c>. For example you cannot assume that the
                    <paramref name="left"/> is less than the
                    <paramref name="right"/> if the "&gt;=" operator returns
                    <c>false</c>.
                </para>
            	<para>
                    The reverse condition is <c>true</c> when the
                    <paramref name="left"/> and the
                    <paramref name="right"/> are not <strong>Null</strong>.
                </para>
            </remarks>
            <param name="left">An instance of <see cref="T:Teradata.Client.Provider.TdIntervalYear"/>.</param>
            <param name="right">An instance of <strong>TdIntervalYear</strong>.</param>
        </member>
        <member name="M:Teradata.Client.Provider.TdIntervalYear.op_Inequality(Teradata.Client.Provider.TdIntervalYear,Teradata.Client.Provider.TdIntervalYear)">
            <summary>
               This operator determines whether the <paramref name="left"/> and the  
            <paramref name="right"/> are not equal.
            </summary>
            <returns>
            	<para>A Boolean is returned that indicates whether the two operands are not equal.
                <c>true</c> indicates the two operands are not equal, <c>false</c>
                otherwise.</para>
            	<para>
            		<list type="table">
            			<listheader>
            				<term>Return Value</term>
            				<description>Description</description>
            			</listheader>
            			<item>
            				<term><c>true</c></term>
            				<description>
            					<para>
            					    <paramref name="left"/> is less than or greater than
                                   <paramref name="right"/>
            					</para>
            					<para>-or-</para>
                               <para>
            					   <paramref name="left"/> is
                                   <see cref="F:Teradata.Client.Provider.TdIntervalYear.Null"/> and
                                   <paramref name="right"/> is not <strong>Null</strong>
                               </para>
            					<para>-or-</para>
                               <para>
            					   <paramref name="left"/> is not <strong>Null</strong>
                                   and <paramref name="right"/> is <strong>Null</strong>.
                               </para>
                            </description>
            			</item>
            			<item>
            				<term><c>false</c></term>
            				<description>
                               <para>
            					   <paramref name="left"/> is equal to
                                   <paramref name="right"/>
                               </para>
            					<para>-or-</para>
                               <para>
            					   <paramref name="left"/> and
                                   <paramref name="right"/> are <strong>Null</strong>.
                               </para>
                            </description>
            			</item>
            		</list>
            	</para>
            </returns>
            <param name="left">An instance of <see cref="T:Teradata.Client.Provider.TdIntervalYear"/>.</param>
            <param name="right">An instance of <strong>TdIntervalYear</strong>.</param>
        </member>
        <member name="M:Teradata.Client.Provider.TdIntervalYear.op_Equality(Teradata.Client.Provider.TdIntervalYear,Teradata.Client.Provider.TdIntervalYear)">
            <summary>
               This operator determines whether the <paramref name="left"/> and the  
            <paramref name="right"/> are equal.
            </summary>
            <returns>
            	<para>A Boolean is returned that indicates whether the two operands are equal.
                <c>true</c> indicates the two operands are equal, <c>false</c> otherwise.</para>
            	<para>
            		<list type="table">
            			<listheader>
            				<term>Return Value</term>
            				<description>Description</description>
            			</listheader>
            			<item>
            				<term><c>true</c></term>
            				<description>
                               <para>
            					   <paramref name="left"/> is equal to
                                   <paramref name="right"/>
                               </para>
            					<para>-or-</para>
                               <para>
            					   <paramref name="left"/> is
                                   <see cref="F:Teradata.Client.Provider.TdIntervalYear.Null"/> and
                                   <paramref name="right"/> is <strong>Null</strong>.
                               </para>
            				</description>
            			</item>
            			<item>
            				<term><c>false</c></term>
            				<description>
                               <para>
            					   <paramref name="left"/> is not <strong>Null</strong>
                                   and <paramref name="right"/> is <strong>Null</strong>
                               </para>
            					<para>-or-</para>
                               <para>
                                   <paramref name="left"/> is <strong>Null</strong> and
                                   <paramref name="right"/> is not <strong>Null</strong>
                               </para>
            					<para>-or-</para>
                                   The <paramref name="left"/> is not equal to
                                   <paramref name="right"/>.
                               <para>
                               </para>
            				</description>
            			</item>
            		</list>
            	</para>
            </returns>
            <param name="left">An instance of <see cref="T:Teradata.Client.Provider.TdIntervalYear"/>.</param>
            <param name="right">An instance of <strong>TdIntervalYear</strong>.</param>
        </member>
        <member name="M:Teradata.Client.Provider.TdIntervalYear.op_LessThan(Teradata.Client.Provider.TdIntervalYear,Teradata.Client.Provider.TdIntervalYear)">
            <summary>
               This operator determines whether the <paramref name="left"/> is less than the <paramref name="right"/>.
            </summary>
            <returns>
            	<para>
            		<c>true</c> indicates the <paramref name="left"/> is less than
                    the <paramref name="right"/>, <c>false</c> otherwise.
                </para>
            	<para>
            		<list type="table">
            			<listheader>
            				<term>Return Value</term>
            				<description>Description</description>
            			</listheader>
            			<item>
            				<term><c>true</c></term>
            				<description>
            					<paramref name="left"/> and
                                <paramref name="right"/> are not
                                <see cref="F:Teradata.Client.Provider.TdIntervalYear.Null"/> and
                                <paramref name="left"/> is less than
                                <paramref name="right"/>.
            				</description>
            			</item>
            			<item>
            				<term><c>false</c></term>
            				<description>
            					<para>
                                    The <paramref name="left"/> is greater than or
                                    equal to <paramref name="right"/>
            					</para>
            					<para>-or-</para>
            					<para>
                                    Either <paramref name="left"/> and / or
                                    <paramref name="right"/> is <strong>Null</strong>.
            					</para>
            				</description>
            			</item>
            		</list>
            	</para>
            </returns>
            <remarks>
            	<para>
                    Comparison operators always return <c>false</c> if one of the operands is
                    <strong>Null</strong>. Therefore you should not assume that the reverse
                    condition is <c>true</c>. For example you cannot assume that the
                    <paramref name="left"/> is greater than or equal to the
                    <paramref name="right"/> if the "&lt;" operator returns
                    <c>false</c>.
                </para>
            	<para>
                    The reverse condition is <c>true</c> when the
                    <paramref name="left"/> and the
                    <paramref name="right"/> are not <strong>Null</strong>.
                </para>
            </remarks>
            <param name="left">An instance of <see cref="T:Teradata.Client.Provider.TdIntervalYear"/>.</param>
            <param name="right">An instance of <strong>TdIntervalYear</strong>.</param>
        </member>
        <member name="M:Teradata.Client.Provider.TdIntervalYear.op_LessThanOrEqual(Teradata.Client.Provider.TdIntervalYear,Teradata.Client.Provider.TdIntervalYear)">
            <summary>
               This operator determines whether the <paramref name="left"/> is less than or equal the 
               <paramref name="right"/>.
            </summary>
            <returns>
            	<para>
            		<c>true</c> indicates the <paramref name="left"/> is less than or
                    equal to the <paramref name="right"/>, <c>false</c> otherwise.
                </para>
            	<para>
            		<list type="table">
            			<listheader>
            				<term>Return Value</term>
            				<description>Description</description>
            			</listheader>
            			<item>
            				<term><c>true</c></term>
            				<description>
            					<para>
            						<paramref name="left"/> and
                                    <paramref name="right"/> are not
                                    <see cref="F:Teradata.Client.Provider.TdIntervalYear.Null"/> and
                                    <paramref name="left"/> is less than or equal to
                                    <paramref name="right"/>
            					</para>
            					<para>-or-</para>
            					<para>
            						<paramref name="left"/> is <strong>Null</strong>
                                    and <paramref name="right"/> is
                                    <strong>Null</strong>.
            					</para>
            				</description>
            			</item>
            			<item>
            				<term><c>false</c></term>
            				<description>
            					<para>
                                    The <paramref name="left"/> is greater than
                                    <paramref name="right"/>
            					</para>
            					<para>-or-</para>
            					<para>
                                    Either <paramref name="left"/> or
                                    <paramref name="right"/> is <strong>Null</strong>.
            					</para>
            				</description>
            			</item>
            		</list>
            	</para>
            </returns>
            <remarks>
            	<para>
                    Comparison operators always return <c>false</c> if one of the operands is
                    <strong>Null</strong>. Therefore you should not assume that the reverse
                    condition is <c>true</c>. For example you cannot assume that the
                    <paramref name="left"/> is greater than the
                    <paramref name="right"/> if the "&lt;=" operator returns
                    <c>false</c>.
                </para>
            	<para>
                    The reverse condition is <c>true</c> when the
                    <paramref name="left"/> and the
                    <paramref name="right"/> are not <strong>Null</strong>.
                </para>
            </remarks>
            <param name="left">An instance of <see cref="T:Teradata.Client.Provider.TdIntervalYear"/>.</param>
            <param name="right">An instance of <strong><strong>TdIntervalYear</strong></strong>.</param>
        </member>
        <member name="M:Teradata.Client.Provider.TdIntervalYear.op_Explicit(System.Int32)~Teradata.Client.Provider.TdIntervalYear">
            <summary>
            Converts an <c>Int32</c> to <see cref="T:Teradata.Client.Provider.TdIntervalYear"/>.
            </summary>
            <remarks>
                The conversion may produce exceptions due to exceeding <see cref="F:Teradata.Client.Provider.TdIntervalYear.MinValue"/> 
                or <see cref="F:Teradata.Client.Provider.TdIntervalYear.MaxValue"/>.
            </remarks>
            <exception cref="T:System.OverflowException">
               The resultant conversion returns a value greater than the <see cref="F:Teradata.Client.Provider.TdIntervalYear.MaxValue"/> 
               or less than the <see cref="F:Teradata.Client.Provider.TdIntervalYear.MinValue"/>.
            </exception>
            <param name="value">An Int32 representing a <strong>TdIntervalYear</strong> interval.</param>
            <returns>A <strong>TdIntervalYear</strong>.</returns>
        </member>
        <member name="M:Teradata.Client.Provider.TdIntervalYear.op_Explicit(Teradata.Client.Provider.TdIntervalYear)~System.Int32">
            <summary>
               Convert a <see cref="T:Teradata.Client.Provider.TdIntervalYear"/> implictly to an Int32 representing a year interval.
            </summary>
            <returns>
               <strong>TdIntervalYear</strong> converted to an Int32 representing a year interval.
            </returns>
            <exception cref="T:System.ArgumentNullException">The <strong>TdIntervalYear</strong> value is <see cref="F:Teradata.Client.Provider.TdIntervalYear.Null"/>.</exception>
            <param name="value">A <strong>TdIntervalYear</strong> interval.</param>
        </member>
        <member name="M:Teradata.Client.Provider.TdIntervalYear.op_Implicit(Teradata.Client.Provider.TdIntervalYear)~Teradata.Client.Provider.TdIntervalYearToMonth">
            <summary>
            Converts a <see cref="T:Teradata.Client.Provider.TdIntervalYear"/> to a <see cref="T:Teradata.Client.Provider.TdIntervalYearToMonth"/>.
            </summary>
            <param name="value">A <strong>TdIntervalYear</strong> interval.</param>
            <returns>A <strong>TdIntervalYearToMonth</strong></returns>
        </member>
        <member name="P:Teradata.Client.Provider.TdIntervalYear.IsNull">
            <summary>
               Indicates whether this <see cref="T:Teradata.Client.Provider.TdIntervalYear"/> instance is <see cref="F:Teradata.Client.Provider.TdIntervalYear.Null"/>. 
            </summary>
            <value>
               <c>true</c> if this <strong>TdIntervalYear</strong> is <strong>Null</strong>; 
               <c>false</c> otherwise.
            </value>
        </member>
        <member name="P:Teradata.Client.Provider.TdIntervalYear.Years">
            <summary>
               The number of interval years is returned. The return value ranges from -9999 to 9999.
            </summary>
            <remarks>
            <para>
               A <see cref="T:Teradata.Client.Provider.TdIntervalYear"/> is represented as [-]years.  The 
               minus sign is optional and represents a negative interval of time.  The years 
               component represents years. The value of the Years property is the years component.
            </para>
            <para>
               A negative interval will return all properties (Years and TotalMonths) as negative values. 
            </para>
            </remarks>
            <exception cref="T:Teradata.Client.Provider.TdException">
               This property is not available when this instance is <see cref="F:Teradata.Client.Provider.TdIntervalYear.Null"/>.
            </exception>
        </member>
        <member name="P:Teradata.Client.Provider.TdIntervalYear.TotalMonths">
            <summary>
               The total number of months represented by this instance.
            </summary>
            <remarks>
            <para>
               A <see cref="T:Teradata.Client.Provider.TdIntervalYear"/> is represented as [-]years.  The 
               minus sign is optional and represents a negative interval of time.  The years 
               component represents years. The value of the TotalMonths property is the 
                <see cref="P:Teradata.Client.Provider.TdIntervalYear.Years"/> * 12.
            </para>
            <para>
               A negative interval will return all properties (Years and TotalMonths) as negative values. 
            </para>
            </remarks>
            <exception cref="T:Teradata.Client.Provider.TdException">
               This property is not available when this instance is <see cref="F:Teradata.Client.Provider.TdIntervalYear.Null"/>.
            </exception>
        </member>
        <member name="P:Teradata.Client.Provider.TdIntervalYear.Precision">
            <summary>
               The number of significant digits in the year is returned. The return value
               ranges from 1 to 4.
            </summary>
            <exception cref="T:Teradata.Client.Provider.TdException">
               This property is not available when this instance is <see cref="F:Teradata.Client.Provider.TdIntervalYear.Null"/>.
            </exception>
        </member>
        <member name="P:Teradata.Client.Provider.TdIntervalYear.Value">
            <summary>
               Gets the .NET data type representation of <see cref="T:Teradata.Client.Provider.TdIntervalYear"/> 
               as a <see cref="T:System.String"/>.
            </summary>
            <remarks>
               This property in concept parallels <see cref="M:Teradata.Client.Provider.TdDataReader.GetValue(System.Int32)"/> and
               <see cref="P:Teradata.Client.Provider.TdParameter.Value"/>. That is they all represent the .NET Framework 
               Class Library(FCL) primitive data type that correspond to the Teradata 
               Interval Year data type.
            </remarks>
            <value>The interval represented as a <c>String</c> is returned.</value>
            <exception cref="T:Teradata.Client.Provider.TdException">
               This property is not available when this instance is <see cref="F:Teradata.Client.Provider.TdIntervalYear.Null"/>.
            </exception>
        </member>
        <member name="P:Teradata.Client.Provider.TdIntervalYear.ObjectId">
            <summary>
               Gets the instance object identifier.
            </summary>
        </member>
        <member name="P:Teradata.Client.Provider.TdIntervalYear.IsNegative">
            <summary>
               Indicate if the interval is negative.
            </summary>
            <remarks>
               Months indicates the total number of months in this interval.
            </remarks>
        </member>
        <member name="P:Teradata.Client.Provider.TdIntervalYear.InternalAccessor">
            <summary>
               Accessor to the internal storage for this interval.
            </summary>
        </member>
        <member name="T:Teradata.Client.Provider.TdIntervalYearToMonth">
            <summary>
                <see cref="T:Teradata.Client.Provider.TdIntervalYearToMonth"/> represents an interval of time defining a duration in 
                years and/or months.  The year precision is configurable from 1 - 4 significant digits.
             </summary>
            <remarks>
            	<para>
                   <strong>TdIntervalYearToMonth</strong> is a .NET Data Provider for Teradata 
                   specific type, designed to support a Teradata Database Interval Year To Month data type.
               </para>
            	<para>
                    The <strong>TdIntervalYearToMonth</strong> supports the Teradata Interval Year 
                    (precision) To Month data type where precision indicates the number of digits in 
                    the years (from 1 - 4).
                </para>
                <para>
                    The interval value must be specified in the following format :
                </para>
               <para>[sign][years]-[mm]</para>
            	<para>Below is the description of each format item.</para>
            	<para>
            		<list type="table">
            			<listheader>
            				<term>Format Element</term>
            				<description>Description</description>
            			</listheader>
            			<item>
            				<term>sign</term>
            				<description>Optional - or space character.</description>
            			</item>
            			<item>
            				<term>years</term>
            				<description>Required number of years (one to four digits in length).</description>
            			</item>
            			<item>
            				<term>mm</term>
            				<description>Required 2 digits representing the months from 00 - 11.</description>
            			</item>
            		</list>
            	</para>
            	<para>
                   The .Net Framework does not have a system type that directly corresponds to
                   the Teradata Database Interval Year To Month data type. The .NET Data Provider for 
                   Teradata Version 13.0 version and prior versions map Interval Year To Month to 
                   System.String. With version 13.1 of the provider, <strong>TdIntervalYearToMonth</strong>  
                   is available to retrieve and manipulate data of type Interval Year To Month.
               </para>
            	<para>The range of values for each TdInterval precision is as follows:</para>
            	<para>
            		<table class="xmldoctable" cellspacing="0">
            			<tbody>
            				<tr>
            					<th>Type and Precision</th>
            					<th>Minimum</th>
            					<th>Maximum</th>
            				</tr>
            				<tr>
            					<td class="xmldoctable">TdIntervalYearToMonth(1)</td>
            					<td class="xmldoctable">
            						-'9-11'
            					</td>
            					<td>'9-11'</td>
            				</tr>
            				<tr>
            					<td class="xmldoctable">TdIntervalYearToMonth(2)</td>
            					<td class="xmldoctable">
            						-'99-11'
            					</td>
            					<td>'99-11'</td>
            				</tr>
            				<tr>
            					<td class="xmldoctable">TdIntervalYearToMonth(3)</td>
            					<td class="xmldoctable">
            						-'999-11'
            					</td>
            					<td>'999-11'</td>
            				</tr>
            				<tr>
            					<td class="xmldoctable">TdIntervalYearToMonth(4)</td>
            					<td class="xmldoctable">
            						-'9999-11'
            					</td>
            					<td>'9999-11'</td>
            				</tr>
            			</tbody>
            		</table>
            	</para>
                <para>
                    <strong>TdIntervalYearToMonth</strong> also supports 
                    <see cref="F:Teradata.Client.Provider.TdIntervalYearToMonth.Null"/>. This is a very important feature.
                    An application is no longer required to call
                    <see cref="M:Teradata.Client.Provider.TdDataReader.IsDBNull(System.Int32)"/> before invoking the corresponding 
                    TdDataReader "Get" method.  This will improve overall performance.
                </para>
                <para>
                    A <strong>TdIntervalYearToMonth</strong> structure allows arithmetic,
                    comparision and conversion operations to be performed. 
                </para>
            	<para>
                    A <strong>TdIntervalYearToMonth</strong> may also be specified as an in, out, 
                    or in/out parameter to a stored procedure. In order to maintain backward  
                    compatibility with previous versions of the provider (release 13.0 and prior), 
                    a Connection String Attribute
                    <see cref="P:Teradata.Client.Provider.TdConnectionStringBuilder.EnableTdIntervals">EnableTdIntervals</see>
                    has been added. When the <strong>EnableTdIntervals</strong> attribute
                    is <c>true</c>, <see cref="P:Teradata.Client.Provider.TdParameter.ProviderSpecificValue"/> will
                    return the data as the provider specific type of <strong>TdIntervalYearToMonth</strong>.
                    When <strong>EnableTdIntervals</strong> is <c>false</c>, 
                    <strong>TdParameter.ProviderSpecificValue</strong> will return the data as a
                    .NET Framework Library data type of <see cref="T:System.String"/>. 
                </para>
            	<para>
                    The <see cref="P:Teradata.Client.Provider.TdParameter.Value"/> will return the .NET Framework Library
                    data type of <strong>System.String</strong> whether 
                    <strong>EnableTdIntervals</strong> is <c>true</c> or <c>false</c>.
                </para>
            	<para>
            	    For more information on the Teradata Interval Year To Month data type please
                    see the Teradata Database SQL Reference - 'Data Types and Literals'.
                </para>
            </remarks>
            <example>
            	<para>The following example shows how to retrieve a  
                   <strong>TdIntervalYearToMonth</strong>, modify the interval, and then update the table.
               </para>
            	<code>
             Public void IntervalExample(TdCommand cmd, String model)
             {
                cmd.Parameters.Clear();
                
                cmd.CommandText = "SELECT StartDate, LeaseLen FROM AutoLeases " +
                                  "WHERE Model = ?";
             
                cmd.CommandType = CommandType.Text;
             
                cmd.Parameters.Add(null, TdType.VarChar, 10,
                     ParameterDirection.Input, true, 0, 0, null,    
                     DataRowVersion.Default, model);
             
               Int32 row = 0;
               TdDate [] startDate;
               TdIntervalYearToMonth [] leaseLen;
             
               using (TdDataReader dr = cmd.ExecuteReader())
               { 
                   startDate = new TdDate[dr.RecordsReturned];
                   leaseLen = new TdIntervalYearToMonth [dr.RecordsReturned];
             
                   // Specifying an interval of 2 years 1 month with a precision of 2
                   TdIntervalYearToMonth extraTime = new TdIntervalYear(2, 1, 2);
                
                   while (dr.Read())
                   {
                      // Retrieving the dates
                     startDate[row] = dr.GetTdDate(0);
                     leaseLen[row] = dr.GetTdIntervalYearToMonth(1);
             
                      // Adding the extra time to the StartDate
                      startDate[row] = startDate[row] + extraTime;
             
                      // Adding the extra time to the lease length;
                      leaseLen[row] = leaseLen[row] + extraTime;
             
                      row++;
                   } 
                }
            
                cmd.Parameters.Clear();
             
                cmd.CommandText = "UPDATE AutoLeases " +
                                  "SET StartDate = ?, LeaseLen = ? " +
                                  "WHERE Model = ?";
             
                cmd.Parameters.Add(null, TdType.Date, 0,
                      ParameterDirection.Input, true, 0, 0, null,    
                      DataRowVersion.Default, null);
             
                cmd.Parameters.Add(null, TdType.IntervalYearToMonth, 0,
                      ParameterDirection.Input, true, 0, 0, null,    
                      DataRowVersion.Default, null);
             
                cmd.Parameters.Add(null, TdType.VarChar, 9,
                      ParameterDirection.Input, true, 0, 0, null,    
                      DataRowVersion.Default, model);
             
                row--;
                while(row &gt;= 0)
                {
                   cmd.Parameters[0].Value = startDate[row];
                   cmd.Parameters[1].Value = leaseLen[row];
             
                   cmd.ExecuteNonQuery();
                   row--;
                }
             }
             
             </code>
            </example>
            <seealso cref="P:Teradata.Client.Provider.TdConnectionStringBuilder.EnableTdIntervals"/> 
            <seealso cref="!:IntervalConnectionString.html">Interval Connection String Attribute</seealso>
            <seealso cref="!:EnableProviderSpecificTypes.html">Enabling Provider Specific Types</seealso>
            <seealso cref="!:IntervalTypeOverview.html">Provider Specific Type:  Interval Type Overview</seealso>
        </member>
        <member name="F:Teradata.Client.Provider.TdIntervalYearToMonth.MaxPrecision">
            <summary>
               A constant representing the maximum number of significant digits in the 
               <see cref="P:Teradata.Client.Provider.TdIntervalYearToMonth.Years"/> interval component.
            </summary>
            <remarks>
               The value of this constant is 4.
            </remarks>
        </member>
        <member name="F:Teradata.Client.Provider.TdIntervalYearToMonth.MinPrecision">
            <summary>
               A constant representing the minimum number of significant digits in the 
               <see cref="P:Teradata.Client.Provider.TdIntervalYearToMonth.Years"/> interval component.
            </summary>
            <remarks>
               The value of this constant is 1.
            </remarks>
        </member>
        <member name="F:Teradata.Client.Provider.TdIntervalYearToMonth.MinValue">
            <summary>
               The smallest possible value for the <see cref="T:Teradata.Client.Provider.TdIntervalYearToMonth"/> interval type.
            </summary>
            <remarks>
               The value is -'9999-11'.
            </remarks>
        </member>
        <member name="F:Teradata.Client.Provider.TdIntervalYearToMonth.MaxValue">
            <summary>
               The largest possible value for the <see cref="T:Teradata.Client.Provider.TdIntervalYearToMonth"/> interval type.
            </summary>
            <remarks>
               The value is '9999-11'.
            </remarks>
        </member>
        <member name="F:Teradata.Client.Provider.TdIntervalYearToMonth.Null">
            <summary>
               Gets a Null <see cref="T:Teradata.Client.Provider.TdIntervalYearToMonth"/> instance.
            </summary>
            <value>
               Returns a <strong>TdIntervalYearToMonth</strong> instance that represents a 
               <strong>Null</strong> value.
            </value>
            <remarks>
               Conceptually it is a constructor for <strong>Null</strong> instances of 
               <strong>TdIntervalYearToMonth</strong>.
            </remarks>
            <example>
            This example shows how to send a <strong>Null</strong> value to a Teradata database.
            <code>
            TdParameter col1 = new TdParameter();
            col1.TdType = TdType.TdIntervalYearToMonth;
            col1.Value = Null;
            </code>
            </example>
        </member>
        <member name="F:Teradata.Client.Provider.TdIntervalYearToMonth.Zero">
            <summary>
               Gets an <see cref="T:Teradata.Client.Provider.TdIntervalYearToMonth"/> instance that contains all zero elements
               for each interval field.
            </summary>
            <remarks>
               A Zero <Strong>TdIntervalYearToMonth</Strong> may be used to determine whether
               other instances of intervals represent postive, negative or non-zero intervals.
            </remarks>
            <example>
            This example shows how to determine if an interval is negative.
            <code>
            TdIntervalDayTo Second ytmInterval = new TdIntervalYearToMonth(0, -1);
            if (ytmInterval &lt; TdIntervalYearToMonth.Zero)
            {
               Console.WriteLine("The Interval is negative");
            }
            // The output of the console is "The interval is negative"
            </code>
            </example>
        </member>
        <member name="M:Teradata.Client.Provider.TdIntervalYearToMonth.#ctor(System.Int32,System.Int32)">
            <summary>
               An instance of <see cref="T:Teradata.Client.Provider.TdIntervalYearToMonth"/> is created from year and month   
               date components specified as integers. 
            </summary>
            <remarks>
            <para>
               The number of years and months are converted into months first and then evaluated 
               against  <see cref="F:Teradata.Client.Provider.TdIntervalYearToMonth.MinValue"/> and <see cref="F:Teradata.Client.Provider.TdIntervalYearToMonth.MaxValue"/>.  The 
               <see cref="P:Teradata.Client.Provider.TdIntervalYearToMonth.Precision"/> is then calculated from the number of digits contained within
               the interval year component.
            </para>
            <para>
               For example, a year value of 99 and a month value of 45 results in a value in total months 
               of 1233 months.  The <strong>TdIntervalYearToMonth</strong> literal representation
               results in a <strong>TdIntervalYearToMonth</strong> value of 102 years and 9 months
               within the range of less than or equal to <strong>MaxValue</strong> and greater than
               or equal to the <strong>MinValue</strong>. Precision is calculated to be a value of 3
               representing 3 significant digits in the year.
            </para>
            <para>
               A year value of 200 and a month value of 118,000 results in a value in total months
               of 120,400 months. The <strong>TdIntervalYearToMonth</strong> literal representation
               results in a <strong>TdIntervalYearToMonth</strong> value of 10,033 years and 4 months
               exceeding the maximum value of '9999-11'.
            </para>
            <para>
               Negative constructor parameters may be supplied to represent negative durations of time.
               Mixed positive and negative constructor parameters are added together that result in a
               negative or positive <strong>TdIntervalYearToMonth</strong>.  For instance, a year
               value of 200 and a month value of -4900 will result in a 
               <strong>TdIntervalYearToMonth</strong> interval value of -'208-04' with
               a calculated precision value of 3.
            </para>
            </remarks>
            <exception cref="T:System.OverflowException" caption="OverflowException">
               The parameters specify a <strong>TdIntervalYearToMonth</strong> value less than 
               <see cref="F:Teradata.Client.Provider.TdIntervalYearToMonth.MinValue"/> or greater than <see cref="F:Teradata.Client.Provider.TdIntervalYearToMonth.MaxValue"/>.
            </exception>
            <param name="years">Number of years.</param>
            <param name="months">Number of months.</param>
        </member>
        <member name="M:Teradata.Client.Provider.TdIntervalYearToMonth.#ctor(System.Int32,System.Int32,System.Byte)">
            <summary>
               An instance of <see cref="T:Teradata.Client.Provider.TdIntervalYearToMonth"/> is created from year and month   
               date components specified as integers with precision specified as a byte. 
            </summary>
            <remarks>
            <para>
               The allowable values of precision are from 1 - 4.
            </para>
            <para>
               All values are converted into months and the values are added to 
               determine if the <see cref="F:Teradata.Client.Provider.TdIntervalYearToMonth.MinValue"/> or the <see cref="F:Teradata.Client.Provider.TdIntervalYearToMonth.MaxValue"/>
               values are exceeded.  If the values are not exceeded but the resulting years component 
               exceeds the supplied <paramref name="precision"/> value, an exception is generated.
            </para>
            <para>
               For example a year value of 200, a month value of 12,006 and a precision of 3 results  
               in a value in total months of 12,206 months. The <strong>TdIntervalYearToMonth</strong> 
               literal representation results in a <strong>TdIntervalYearToMonth</strong> value of 1,200 
               years and 6 months.  The <see cref="P:Teradata.Client.Provider.TdIntervalYearToMonth.Years"/> interval component cannot be represented
               in 3 significant digits, therefore resulting in an invalid 
               <strong>TdIntervalYearToMonth</strong>.
            </para>
            </remarks>
            <exception cref="T:System.OverflowException" caption="OverflowException">
               The parameters specify a <strong>TdIntervalYearToMonth</strong> value less than 
               <see cref="F:Teradata.Client.Provider.TdIntervalYearToMonth.MinValue"/> or greater than <see cref="F:Teradata.Client.Provider.TdIntervalYearToMonth.MaxValue"/>.
            </exception>
            <exception cref="T:System.ArgumentOutOfRangeException" caption="ArgumentOutOfRangeException">
               The <strong>precision</strong> parameter is outside the <see cref="F:Teradata.Client.Provider.TdIntervalYearToMonth.MinPrecision"/> 
               or <see cref="F:Teradata.Client.Provider.TdIntervalYearToMonth.MaxPrecision"/> range of values.
            </exception>
            <exception cref="T:System.ArgumentException" caption="ArgumentException">
               The <strong>precision</strong> parameter is not large enough to represent 
               the number of years.
            </exception>
            <overloads>
               Initializes a new instance of <strong>TdIntervalYearToMonth</strong>.
            </overloads>
            <param name="years">Number of years.</param>
            <param name="months">Number of months.</param>
            <param name="precision">Number of significant digits of the year.</param>
        </member>
        <member name="M:Teradata.Client.Provider.TdIntervalYearToMonth.CompareTo(Teradata.Client.Provider.TdIntervalYearToMonth)">
            <summary>
               Compares this instance to the specified <see cref="T:Teradata.Client.Provider.TdIntervalYearToMonth"/> parameter 
               <paramref name="other"/>.
            </summary>
            <returns>The result of the comparison is returned as a signed integer.</returns>
            <remarks>
            	<para>
                    The integer returned when this instance is compared to
                    <paramref name="other"/> indicates the following:
                </para>
            	<para>
            		<list type="table">
            			<listheader>
            				<term>Return Value</term>
            				<description>Meaning</description>
            			</listheader>
            			<item>
            				<term>Less than Zero</term>
            				<description>
            					<para>
                                    This instance is less than <paramref name="other"/>
                                </para>
            					<para>-or-</para>
            					<para>
                                    This instance is <see cref="F:Teradata.Client.Provider.TdIntervalYearToMonth.Null"/> and
                                    <paramref name="other"/> is non-null.
                                </para>
            				</description>
            			</item>
            			<item>
            				<term>Zero</term>
            				<description>
            					<para>
                                    This instance is equal to <paramref name="other"/>
                                </para>
            					<para>-or-</para>
            					<para>This instance is <strong>Null</strong> and value is
                                <strong>Null</strong>.</para>
            				</description>
            			</item>
            			<item>
            				<term>Greater than Zero</term>
            				<description>
            					<para>
                                    This instance is greater than
                                    <paramref name="other"/>
                                </para>
            					<para>-or-</para>
            					<para>
            						<paramref name="other"/> is <strong>Null</strong> and
                                    this instance is non-null.
                                </para>
            				</description>
            			</item>
            		</list>
            	</para>
            </remarks>
            <param name="other">The <strong>TdIntervalYearToMonth</strong> to compare.</param>
        </member>
        <member name="M:Teradata.Client.Provider.TdIntervalYearToMonth.CompareTo(System.Object)">
            <summary>
               Compares this instance to the specified <see cref="T:Teradata.Client.Provider.TdIntervalYearToMonth"/> parameter 
               <paramref name="obj"/>. 
            </summary>
            <returns>
               The result of the comparison is returned as a signed integer.
            </returns>
            <remarks>
            	<para>
                    The integer returned when this instance is compared to
                    <paramref name="obj"/> indicates the following:
                </para>
            	<para>
            		<list type="table">
            			<listheader>
            				<term>Return Value</term>
            				<description>Meaning</description>
            			</listheader>
            			<item>
            				<term>Less than Zero</term>
            				<description>
            					<para>
                                    This instance is less than <paramref name="obj"/>.
                                </para>
            					<para>-or-</para>
            					<para>
                                    This instance is <see cref="F:Teradata.Client.Provider.TdIntervalYearToMonth.Null"/> and
                                    <paramref name="obj"/> is non-null.
                                </para>
            				</description>
            			</item>
            			<item>
            				<term>Zero</term>
            				<description>
            					<para>
                                    This instance is equal to <paramref name="obj"/>.
                                </para>
            					<para>-or-</para>
            					<para>
                                    This instance is <strong>Null</strong> and
                                    <paramref name="obj"/> is <strong>Null</strong>.
                                </para>
            				</description>
            			</item>
            			<item>
            				<term>Greater than Zero</term>
            				<description>
            					<para>
                                    This instance is greater than
                                    <paramref name="obj"/>.
                                </para>
            					<para>-or-</para>
            					<para>
            						<paramref name="obj"/> is <strong>Null</strong> and
                                    this instance is non-null.
                                </para>
            					<para>-or-</para>
            					<para>
            						<paramref name="obj"/> is a <c>null</c> reference.
                                </para>
            				</description>
            			</item>
            		</list>
            	</para>
            	<para>
            		<paramref name="obj"/> must be an instance of 
                    <strong>TdIntervalYearToMonth</strong> type or <c>null</c> reference.
                </para>
            </remarks>
            <exception cref="T:System.ArgumentException"><paramref name="obj"/> is not of type <strong>TdIntervalYearToMonth</strong></exception>
            <seealso cref="M:Teradata.Client.Provider.TdIntervalYearToMonth.CompareTo(Teradata.Client.Provider.TdIntervalYearToMonth)"/>
            <overloads>
               Compares this instance to the supplied <strong>TdIntervalYearToMonth</strong>
               and returns whether  this instance is less than, equal or greater than the supplied 
               <strong>TdIntervalYearToMonth</strong>.
            </overloads>
            <param name="obj">A <strong>TdIntervalYearToMonth</strong> object to compare.</param>
        </member>
        <member name="M:Teradata.Client.Provider.TdIntervalYearToMonth.Equals(Teradata.Client.Provider.TdIntervalYearToMonth)">
            <summary>
               Compares this instance and another <see cref="T:Teradata.Client.Provider.TdIntervalYearToMonth"/> to determine whether they are equal. 
            </summary>
            <returns>
                <c>true</c> if the two <strong>TdIntervalYearToMonth</strong> objects are equal, 
                <c>false</c> otherwise.
            </returns>
            <remarks>
            	<para>
                    The return value is <c>true</c> if the instance is equal to the
                    <paramref name="other"/>, <c>false</c> otherwise.
                </para>
            	<para>
            		<list type="table">
            			<listheader>
            				<term>Return Value</term>
            				<description>Description</description>
            			</listheader>
            			<item>
            				<term>
            					<c>true</c>
            				</term>
            				<description>
            					<para>
                                    This instance and <paramref name="other"/> are
                                    <see cref="F:Teradata.Client.Provider.TdIntervalYearToMonth.Null"/>
                                </para>
            					<para>-or-</para>
            					<para>
                                    This instance is equal to <paramref name="other"/>.
                                </para>
            				</description>
            			</item>
            			<item>
            				<term>
            					<c>false</c>
            				</term>
            				<description>
            					<para>
                                    This instance is <strong>Null</strong> and
                                    <paramref name="other"/> is not <strong>Null</strong>
            					</para>
            					<para>-or-</para>
            					<para>
                                    This instance is not <strong>Null</strong> and
                                    <paramref name="other"/> is <strong>Null</strong>
                                </para>
            					<para>-or-</para>
            					<para>
                                    This instance is not equal to
                                    <paramref name="other"/>.
                                </para>
            				</description>
            			</item>
            		</list>
            	</para>
            </remarks>
            <overloads>
               Returns a value indicating whether two instances of 
               <strong>TdIntervalYearToMonth</strong> are equal.
            </overloads>
            <param name="other">
               <strong>TdIntervalYearToMonth</strong> that will be compared to   
               this instance of <strong>TdIntervalYearToMonth</strong>.
            </param>
        </member>
        <member name="M:Teradata.Client.Provider.TdIntervalYearToMonth.Equals(Teradata.Client.Provider.TdIntervalYearToMonth,Teradata.Client.Provider.TdIntervalYearToMonth)">
            <summary>
               Compares two <see cref="T:Teradata.Client.Provider.TdIntervalYearToMonth"/> instances to determine whether they are equal.
            </summary>
            <returns>
               <c>true</c> if the two <strong>TdIntervalYearToMonth</strong> instances are equal, 
               <c>false</c> otherwise.
            </returns>
            <remarks>
            	<para>
                    The return value is <c>true</c> if the <paramref name="left"/> is
                    equal to the <paramref name="right"/>, <c>false</c> otherwise.
                </para>
            	<para>
            		<list type="table">
            			<listheader>
            				<term>Return Value</term>
            				<description>Description</description>
            			</listheader>
            			<item>
            				<term>
            					<c>true</c> 
            				</term>
            				<description>
            					<para>
            						<paramref name="left"/> is equal to
                                    <paramref name="right"/>
                                </para>
            					<para>-or-</para>
            					<para>
            						<paramref name="left"/> and
                                    <paramref name="right"/> are
                                    <see cref="F:Teradata.Client.Provider.TdIntervalYearToMonth.Null"/>.
                                </para>
            				</description>
            			</item>
            			<item>
            				<term>
            					<c>false</c>
            				</term>
            				<description>
            					<para>
            						<paramref name="left"/> is not equal to
                                    <paramref name="right"/>
                                </para>
            					<para>-or-</para>
            					<para>
            						<paramref name="left"/> is not <strong>Null</strong>
                                    and <paramref name="right"/> is
                                    <strong>Null</strong>
                                </para>
            					<para>-or-</para>
            					<para>
            						<paramref name="left"/> is <strong>Null</strong> and
                                    <paramref name="right"/> is not <strong>Null</strong>.
            					</para>
            				</description>
            			</item>
            		</list>
            	</para>
            </remarks>
            <example>
                The following code example uses various comparison methods and operators.
                <code lang="CS">
            TdIntervalYearToMonth firstInterval = new TdIntervalYearToMonth(5, 1, 4);
            TdIntervalYearToMonth secondInterval = new TdIntervalYearToMonth(20, 2, 4);
             
            // The following comparison methods and operators are equivalent
            if (false == TdIntervalYearToMonth.Equals(firstInterval, secondInterval) ||
                firstInterval != secondInterval ||
                true == TdIntervalYearToMonth.NotEquals(firstInterval, secondInterval) )
            {
               Console.WriteLine(“firstInterval does not equal secondInterval”);
            }
                </code>
            </example>
            <overloads>Returns a value indicating whether two instances of <strong>TdIntervalYearToMonth</strong> are equal.</overloads>
            <param name="left">A <strong>TdIntervalYearToMonth</strong> instance.</param>
            <param name="right">A <strong>TdIntervalYearToMonth</strong> instance.</param>
        </member>
        <member name="M:Teradata.Client.Provider.TdIntervalYearToMonth.Compare(Teradata.Client.Provider.TdIntervalYearToMonth,Teradata.Client.Provider.TdIntervalYearToMonth)">
            <summary>
                Two <see cref="T:Teradata.Client.Provider.TdIntervalYearToMonth"/> intervals are compared and a value is 
                returned that indicates <paramref name="left"/> is greater than, less than or equal to
                <paramref name="right"/>.
            </summary>
            <returns>The result of the comparison is returned as a signed integer.</returns>
            <remarks>
            	<list type="table">
            		<listheader>
            			<term>Return Value</term>
            			<description>Description</description>
            		</listheader>
            		<item>
            			<term>Less than zero</term>
            			<description>
            				<para>
            				    <paramref name="left"/> is less than
                               <paramref name="right"/>
            				</para>
            			    <para>-or-</para>
            				<para>
                               <paramref name="left"/> is <see cref="F:Teradata.Client.Provider.TdIntervalYearToMonth.Null"/> 
                               and <paramref name="right"/> is not <strong>Null</strong>.
                            </para>
                        </description>
            		</item>
            		<item>
            			<term>Zero</term>
            			<description>
            				<para>
                              <paramref name="left"/> equals
                              <paramref name="right"/>
                           </para>
            			    <para>-or-</para>
            				<para>
                               <paramref name="left"/> is <strong>Null</strong> and
                               <paramref name="right"/> is <strong>Null</strong>
                           </para>
                        </description>
                   </item>
            		<item>
            			<term>Greater than zero</term>
            			<description>
            				<para>
                              <paramref name="left"/> is greater than
                              <paramref name="right"/>
                           </para>
            			    <para>-or-</para>
                           <para>
                               <paramref name="left"/> is not <strong>Null</strong> and
                               <paramref name="right"/> is <strong>Null</strong>.
                           </para>
                        </description>
            		</item>
            	</list>
            </remarks>
            <param name="left">An instance of <strong>TdIntervalYearToMonth</strong>.</param>
            <param name="right">An instance of <strong>TdIntervalYearToMonth</strong>.</param>
        </member>
        <member name="M:Teradata.Client.Provider.TdIntervalYearToMonth.NotEquals(Teradata.Client.Provider.TdIntervalYearToMonth,Teradata.Client.Provider.TdIntervalYearToMonth)">
            <summary>
                Compares two <see cref="T:Teradata.Client.Provider.TdIntervalYearToMonth"/> intervals to determine whether the
                <paramref name="left"/> is not equal to <paramref name="right"/>.  
            </summary>
            <returns>
            	<para>
            		<c>true</c> indicates <paramref name="left"/> is not equal to
                    <paramref name="right"/>, <c>false</c> otherwise.
                </para>
            	<para>
            		<list type="table">
            			<listheader>
            				<term>Return Value</term>
            				<description>Description</description>
            			</listheader>
            			<item>
            				<term><c>true</c></term>
            				<description>
            					<para>
            						<paramref name="left"/> is less than or greater
                                    than <paramref name="right"/>
            					</para>
            					<para>-or-</para>
            					<para>
            						Either <paramref name="left"/> or <paramref name="right"/> is
                                   <see cref="F:Teradata.Client.Provider.TdIntervalYearToMonth.Null"/>.
                               </para>
            				</description>
            			</item>
            			<item>
            				<term><c>false</c></term>
            				<description>
            					<para>
            						<paramref name="left"/> is equal to
                                    <paramref name="right"/>
            					</para>
            					<para>-or-</para>
            					<para>
                                   <paramref name="left"/> and <paramref name="right"/> are
                                   <strong>Null</strong>.
                                </para>
            				</description>
            			</item>
            		</list>
            	</para>
            </returns>
            <param name="left">An instance of <strong>TdIntervalYearToMonth</strong>.</param>
            <param name="right">An instance of <strong>TdIntervalYearToMonth</strong>.</param>
        </member>
        <member name="M:Teradata.Client.Provider.TdIntervalYearToMonth.GreaterThan(Teradata.Client.Provider.TdIntervalYearToMonth,Teradata.Client.Provider.TdIntervalYearToMonth)">
            <summary>
               Determines whether the <paramref name="left"/> is greater than the <paramref name="right"/>.
            </summary>
            <returns>
            	<para>
            		<c>true</c> indicates the <paramref name="left"/> is greater than
                    the <paramref name="right"/>, <c>false</c> otherwise.
                </para>
            	<para>
            		<list type="table">
            			<listheader>
            				<term>Return Value</term>
            				<description>Description</description>
            			</listheader>
            			<item>
            				<term><c>true</c></term>
            				<description>
            					<paramref name="left"/> and
                                <paramref name="right"/> are not
                                <see cref="F:Teradata.Client.Provider.TdIntervalYearToMonth.Null"/> and
                                <paramref name="left"/> is greater than
                                <paramref name="right"/>.
            				</description>
            			</item>
            			<item>
            				<term><c>false</c></term>
            				<description>
            					<para>
                                    The <paramref name="left"/> is less than or equal
                                    to <paramref name="right"/>
            					</para>
            					<para>-or-</para>
            					<para>
                                   <paramref name="left"/> and / or
                                  <paramref name="right"/> is <strong>Null</strong>.
                               </para>
            				</description>
            			</item>
            		</list>
            	</para>
            </returns>
            <remarks>
            	<para>
                    Comparison operators always return <c>false</c> if one of the operands is
                    <strong>Null</strong>. Therefore you should not assume that the reverse
                    condition is <c>true</c>. For example you cannot assume that the
                    <paramref name="left"/> is less than or equal to the
                    <paramref name="right"/> if <c>GreaterThan</c> returns <c>false</c>.
                </para>
            	<para>
                    The reverse condition is <c>true</c> when the
                    <paramref name="left"/> and the
                    <paramref name="right"/> are not <strong>Null</strong>.
                </para>
            </remarks>
            <param name="left">An instance of <see cref="T:Teradata.Client.Provider.TdIntervalYearToMonth"/>.</param>
            <param name="right">An instance of <strong>TdIntervalYearToMonth</strong>.</param>
        </member>
        <member name="M:Teradata.Client.Provider.TdIntervalYearToMonth.GreaterThanOrEqual(Teradata.Client.Provider.TdIntervalYearToMonth,Teradata.Client.Provider.TdIntervalYearToMonth)">
            <summary>
            This operator determines whether the <paramref name="left"/> is greater than or 
            equal to the <paramref name="right"/>.
            </summary>
            <returns>
            	<para>
            		<c>true</c> indicates the <paramref name="left"/> is greater than
                    or equal to the <paramref name="right"/>, <c>false</c> otherwise.
                </para>
            	<para>
            		<list type="table">
            			<listheader>
            				<term>Return Value</term>
            				<description>Description</description>
            			</listheader>
            			<item>
            				<term><c>true</c></term>
            				<description>
            					<para>
            						<paramref name="left"/> and
                                    <paramref name="right"/> are not
                                    <see cref="F:Teradata.Client.Provider.TdIntervalYearToMonth.Null"/> and
                                    <paramref name="left"/> is greater than or equal
                                    to <paramref name="right"/>
            					</para>
            					<para>-or-</para>
            					<para>
            						<paramref name="left"/> is <strong>Null</strong>
                                    and <paramref name="right"/> is
                                    <strong>Null</strong>.
            					</para>
            				</description>
            			</item>
            			<item>
            				<term><c>false</c></term>
            				<description>
            					<para>
                                    The <paramref name="left"/> is less than
                                    <paramref name="right"/>
            					</para>
            					<para>-or-</para>
            					<para>
                                    Either <paramref name="left"/> or
                                    <paramref name="right"/> is <strong>Null</strong>.
            					</para>
            				</description>
            			</item>
            		</list>
            	</para>
            </returns>
            <remarks>
            	<para>
                    Comparison operators always return <c>false</c> if one of the operands is
                    <strong>Null</strong>. Therefore you should not assume that the reverse
                    condition is <c>true</c>. For example you cannot assume that the
                    <paramref name="left"/> is less than the
                    <paramref name="right"/> if the <c>GreaterThanOrEqual</c> method returns
                    <c>false</c>.
                </para>
            	<para>
                    The reverse condition is <c>true</c> when the
                    <paramref name="left"/> and the
                    <paramref name="right"/> are not <strong>Null</strong>.
                </para>
            </remarks>
            <param name="left">An instance of <see cref="T:Teradata.Client.Provider.TdIntervalYearToMonth"/>.</param>
            <param name="right">An instance of <strong>TdIntervalYearToMonth</strong>.</param>
        </member>
        <member name="M:Teradata.Client.Provider.TdIntervalYearToMonth.LessThan(Teradata.Client.Provider.TdIntervalYearToMonth,Teradata.Client.Provider.TdIntervalYearToMonth)">
            <summary>
               This method determines whether the <paramref name="left"/> is less than the <paramref name="right"/>.
            </summary>
            <returns>
            	<para>
            		<c>true</c> indicates the <paramref name="left"/> is less than
                    the <paramref name="right"/>, <c>false</c> otherwise.
                </para>
            	<para>
            		<list type="table">
            			<listheader>
            				<term>Return Value</term>
            				<description>Description</description>
            			</listheader>
            			<item>
            				<term><c>true</c></term>
            				<description>
            					<paramref name="left"/> and <paramref name="right"/> are
                                not <see cref="F:Teradata.Client.Provider.TdIntervalYearToMonth.Null"/> and
                                <paramref name="left"/> is less than
                                <paramref name="right"/>.
            				</description>
            			</item>
            			<item>
            				<term><c>false</c></term>
            				<description>
            					<para>
                                    The <paramref name="left"/> is greater than or
                                    equal to <paramref name="right"/>
            					</para>
            					<para>-or-</para>
            					<para>
                                    <paramref name="left"/> and / or
                                    <paramref name="right"/> is <strong>Null</strong>.
            					</para>
            				</description>
            			</item>
            		</list>
            	</para>
            </returns>
            <remarks>
            	<para>
                    Comparison operators always return <c>false</c> if one of the operands is
                    <strong>Null</strong>. Therefore you should not assume that the reverse
                    condition is <c>true</c>. For example you cannot assume that the
                    <paramref name="left"/> is greater than or equal to the
                    <paramref name="right"/> if the <c>LessThan</c> method returns
                    <c>false</c>.
                </para>
            	<para>
                    The reverse condition is <c>true</c> when the
                    <paramref name="left"/> and the
                    <paramref name="right"/> are not <strong>Null</strong>.
                </para>
            </remarks>
            <param name="left">An instance of <see cref="T:Teradata.Client.Provider.TdIntervalYearToMonth"/>.</param>
            <param name="right">An instance of <strong>TdIntervalYearToMonth</strong>.</param>
        </member>
        <member name="M:Teradata.Client.Provider.TdIntervalYearToMonth.LessThanOrEqual(Teradata.Client.Provider.TdIntervalYearToMonth,Teradata.Client.Provider.TdIntervalYearToMonth)">
            <summary>
                This method determines whether the <paramref name="left"/> is less
                than or equal to the <paramref name="right"/>.
            </summary>
            <returns>
            	<para>
            		<c>true</c> indicates the <paramref name="left"/> is less than or
                    equal to the <paramref name="right"/>, <c>false</c> otherwise.
                </para>
            	<para>
            		<list type="table">
            			<listheader>
            				<term>Return Value</term>
            				<description>Description</description>
            			</listheader>
            			<item>
            				<term><c>true</c></term>
            				<description>
            					<para>
            						<paramref name="left"/> and
                                    <paramref name="right"/> are not
                                    <see cref="F:Teradata.Client.Provider.TdIntervalYearToMonth.Null"/> and
                                    <paramref name="left"/> is less than or equal to
                                    <paramref name="right"/>
            					</para>
            					<para>-or-</para>
            					<para>
            						<paramref name="left"/> is <strong>Null</strong>
                                    and <paramref name="right"/> is
                                    <strong>Null</strong>.
            					</para>
            				</description>
            			</item>
            			<item>
            				<term><c>false</c></term>
            				<description>
            					<para>
                                    The <paramref name="left"/> is greater than
                                    <paramref name="right"/>
            					</para>
            					<para>-or-</para>
            					<para>
                                    Either <paramref name="left"/> or
                                    <paramref name="right"/> is <strong>Null</strong>.
            					</para>
            				</description>
            			</item>
            		</list>
            	</para>
            </returns>
            <remarks>
            	<para>
                    Comparison operators always return <c>false</c> if one of the operands is
                    <strong>Null</strong>. Therefore you should not assume that the reverse
                    condition is <c>true</c>. For example you cannot assume that the
                    <paramref name="left"/> is greater than the
                    <paramref name="right"/> if the <c>LessThanOrEqual</c> method returns
                    <c>false</c>.
                </para>
            	<para>
                    The reverse condition is <c>true</c> when the
                    <paramref name="left"/> and the
                    <paramref name="right"/> are not <strong>Null</strong>.
                </para>
            </remarks>
            <param name="left">An instance of <see cref="T:Teradata.Client.Provider.TdIntervalYearToMonth"/>.</param>
            <param name="right">An instance of <strong>TdIntervalYearToMonth</strong>.</param>
        </member>
        <member name="M:Teradata.Client.Provider.TdIntervalYearToMonth.Equals(System.Object)">
            <summary>
               Compares this instance and <paramref name="obj"/> to determine whether they
               are equal. 
            </summary>
            <returns>
               <c>true</c> if the two <see cref="T:Teradata.Client.Provider.TdIntervalYearToMonth"/>s are equal, 
               <c>false</c> otherwise.
            </returns>
            <remarks>
            	<para>
                    The return value is <c>true</c> if the instance is equal to the
                    <paramref name="obj"/>, <c>false</c> otherwise.
                </para>
            	<para>
            		<list type="table">
            			<listheader>
            				<term>Return Value</term>
            				<description>Description</description>
            			</listheader>
            			<item>
            				<term>
            					<c>true</c>
            				</term>
            				<description>
            					<para>
                                    This instance and <paramref name="obj"/> are
                                    <see cref="F:Teradata.Client.Provider.TdIntervalYearToMonth.Null"/>
                                </para>
            					<para>-or-</para>
            					<para>
                                    This instance is equal to <paramref name="obj"/>.
                                </para>
            				</description>
            			</item>
            			<item>
            				<term>
            					<c>false</c>
            				</term>
            				<description>
            					<para>
                                    This instance is not equal to
                                    <paramref name="obj"/>
                                </para>
            					<para>-or-</para>
            					<para>
                                    This instance is not <strong>Null</strong> and
                                    <paramref name="obj"/> is <strong>Null</strong>
                                </para>
            					<para>-or-</para>
            					<para>
                                    This instance is <strong>Null</strong> and
                                    <paramref name="obj"/> is not <strong>Null</strong>
            					</para>
            					<para>-or-</para>
            					<para>
            						<paramref name="obj"/> is a <strong>null</strong>
                                    reference.
                                </para>
            				</description>
            			</item>
            		</list>
            	</para>
            </remarks>
            <example>
                The following code example uses various comparison methods and operators.
                <code lang="CS">
            // Create a TdIntervalYearToMonth with 5 years, 1 month and a precision of 4
            TdIntervalYearToMonth firstInterval = new TdIntervalYearToMonth(5, 1, 4);
            // Create a TdIntervalYearToMonth with 20 years, 2 months and a precision of 4
            Object intervalObj = new TdIntervalYearToMonth(20, 2, 4);
             
            // The following comparison methods and operators are equivalent
            if (false == TdIntervalYearToMonth.Equals(firstInterval, (TdIntervalYearToMonth)intervalObj) ||
                firstInterval != (TdIntervalYearToMonth)intervalObj ||
                false == firstInterval.Equals(intervalObj) )
            {
               Console.WriteLine(“firstInterval does not equal intervalObj”);
            }
                </code>
            </example>
            <overloads>Returns a value indicating whether two instances of <strong>TdIntervalYearToMonth</strong> are equal.</overloads>
            <param name="obj">
               <strong>TdIntervalYearToMonth</strong> that will be compared to this instance 
               of <strong>TdIntervalYearToMonth</strong>.
            </param>
        </member>
        <member name="M:Teradata.Client.Provider.TdIntervalYearToMonth.GetHashCode">
            <summary>
               Returns the hash code for this instance. 
            </summary>
            <returns>The hash code is returned.</returns>
        </member>
        <member name="M:Teradata.Client.Provider.TdIntervalYearToMonth.ToString(System.String)">
            <summary>
               Converts this instance to its equivalent String representation using the specified format.
            </summary>
            <remarks>
            	<para>This method supports the following format specifiers:</para>
            	<para>
            		<list type="table">
            			<listheader>
            				<term>Format Specifier</term>
            				<description>Description</description>
            			</listheader>
            			<item>
            				<term>G</term>
            				<description>
            					<para>General interval format.</para>
            					<para>[sign][years]-[mm]</para>
            				</description>
            			</item>
            			<item>
            				<term>L</term>
            				<description>
            					<para>Teradata literal format. This string may be used in
                                generating SQL against the Teradata database.</para>
            					<para>INTERVAL [sign]'[years]-[mm]' YEARS TO MONTH</para>
            				</description>
            			</item>
            		</list>
            	</para>
            	<para>Below is the description of each format item.</para>
            	<para>
            		<list type="table">
            			<listheader>
            				<term>Format Element</term>
            				<description>Description</description>
            			</listheader>
            			<item>
            				<term>sign</term>
            				<description>If negative a minus sign will be displayed..</description>
            			</item>
            			<item>
            				<term>years</term>
            				<description>The number of years (one to four digits in length).</description>
            			</item>
            			<item>
            				<term>mm</term>
            				<description>2 digits representing the months from 00 - 11.</description>
            			</item>
            		</list>
            	</para>
            	<para>
                    Cultural settings are not supported.
               </para>
            </remarks>
            <returns>
               A string representation of the <strong>TdIntervalYearToMonth</strong> will be returned.
            </returns>
            <exception cref="T:System.FormatException" caption="FormatException"><paramref name="format"/> 
              contains an invalid format specifier.</exception>
            <param name="format">
               The format string that will be used to format the <strong>TdIntervalYearToMonth</strong>.
            </param>
        </member>
        <member name="M:Teradata.Client.Provider.TdIntervalYearToMonth.ToString">
            <summary>
               Converts this instance to its equivalent String representation.
            </summary>
            <remarks>
               <para>The string returned will follow this format:</para>
               <para>[sign][years]-[mm]</para>
            	<para>Below is the description of each format item.</para>
            	<para>
            		<list type="table">
            			<listheader>
            				<term>Format Element</term>
            				<description>Description</description>
            			</listheader>
            			<item>
            				<term>sign</term>
            				<description>If negative a minus sign will be displayed..</description>
            			</item>
            			<item>
            				<term>years</term>
            				<description>The number of years (one to four digits in length).</description>
            			</item>
            			<item>
            				<term>mm</term>
            				<description>2 digits representing the months from 00 - 11.</description>
            			</item>
            		</list>
            	</para>
            	<para>
                    Cultural settings are not supported.
                </para>
            </remarks>
            <returns>
               A string representation of the <strong>TdIntervalYearToMonth</strong> will be returned.
            </returns>
        </member>
        <member name="M:Teradata.Client.Provider.TdIntervalYearToMonth.Parse(System.String)">
            <summary>
               The specified string is converted into an equivalent <see cref="T:Teradata.Client.Provider.TdIntervalYearToMonth"/>.
            </summary>
            <returns>
               A <strong>TdIntervalYearToMonth</strong> is returned that is equivalent to the 
               <strong>TdIntervalYearToMonth</strong> contained in the input string.
            </returns>
            <exception cref="T:System.FormatException" caption="FormatException">
               The parameter <paramref name="value"/> cannot be converted into a 
               <strong>TdIntervalYearToMonth</strong> interval.
            </exception>
            <exception cref="T:System.ArgumentNullException" caption="ArgumentNullException">
               The parameter <paramref name="value"/> is a <c>null</c> reference.
            </exception>
            <exception cref="T:System.OverflowException">
               The resultant operation returns a value greater than the <see cref="F:Teradata.Client.Provider.TdIntervalYearToMonth.MaxValue"/> 
               or less than the <see cref="F:Teradata.Client.Provider.TdIntervalYearToMonth.MinValue"/>.
            </exception>
            <remarks>
            	<para>This method supports the following string formats:</para>
            	<para>
            		<list type="table">
            			<listheader>
            				<term>String Format</term>
            				<description>Description</description>
            			</listheader>
            			<item>
            				<term>General interval format.</term>
            				<description>
            					<para>[sign][years]-[mm]</para>
            				</description>
            			</item>
            			<item>
            				<term>Teradata literal format. This string may be used in
                                generating SQL against the Teradata database.</term>
            				<description>
            					<para>INTERVAL [sign]'[years]-[mm]' YEARS TO MONTH</para>
            				</description>
            			</item>
            		</list>
            	</para>
            	<para>Below is the description of each format item.</para>
            	<para>
            		<list type="table">
            			<listheader>
            				<term>Format Element</term>
            				<description>Description</description>
            			</listheader>
            			<item>
            				<term>sign</term>
            				<description>If negative a minus sign will be displayed..</description>
            			</item>
            			<item>
            				<term>years</term>
            				<description>The number of years (one to four digits in length).</description>
            			</item>
            			<item>
            				<term>mm</term>
            				<description>2 digits representing the months from 00 - 11.</description>
            			</item>
            		</list>
            	</para>
            	<para>
                    Cultural settings are not supported.
            	</para>
            	<para>
            		While parsing the <paramref name="value"/> the <see cref="P:Teradata.Client.Provider.TdIntervalYearToMonth.Precision"/> will be
            		set to the number of digits contained within the <see cref="P:Teradata.Client.Provider.TdIntervalYearToMonth.Years"/> component. 
            	</para>
            	<para>
            		For example a <paramref name="value"/> of "222-10" will
            		contain 222 years, 10 months and a precision of 3.
            	</para>
            </remarks>
            <overloads>
            	The specified string is converted into an equivalent 
               <strong>TdIntervalYearToMonth</strong> interval.
            </overloads>
            <param name="value">
               A string to be converted into a <strong>TdIntervalYearToMonth</strong>.
            </param>
        </member>
        <member name="M:Teradata.Client.Provider.TdIntervalYearToMonth.TryParse(System.String,Teradata.Client.Provider.TdIntervalYearToMonth@)">
            <summary>
               The specified string is converted into an equivalent <see cref="T:Teradata.Client.Provider.TdIntervalYearToMonth"/>.
            </summary>
            <returns>
                <c>true</c> if the conversion of <paramref name="value"/> succeeded, <c>false</c>
                otherwise.
            </returns>
            <remarks>
            	<para>This method supports the following string formats:</para>
            	<para>
            		<list type="table">
            			<listheader>
            				<term>String Format</term>
            				<description>Description</description>
            			</listheader>
            			<item>
            				<term>General interval format.</term>
            				<description>
            					<para>[sign][years]-[mm]</para>
            				</description>
            			</item>
            			<item>
            				<term>Teradata literal format. This string may be used in
                                generating SQL against the Teradata database.</term>
            				<description>
            					<para>INTERVAL [sign]'[years]-[mm]' YEARS TO MONTH</para>
            				</description>
            			</item>
            		</list>
            	</para>
            	<para>Below is the description of each format item.</para>
            	<para>
            		<list type="table">
            			<listheader>
            				<term>Format Element</term>
            				<description>Description</description>
            			</listheader>
            			<item>
            				<term>sign</term>
            				<description>If negative a minus sign will be displayed..</description>
            			</item>
            			<item>
            				<term>years</term>
            				<description>The number of years (one to four digits in length).</description>
            			</item>
            			<item>
            				<term>mm</term>
            				<description>2 digits representing the months from 00 - 11.</description>
            			</item>
            		</list>
            	</para>
            	<para>
                    Cultural settings are not supported.
                </para>
            	<para>
            		While parsing the <paramref name="value"/> the <see cref="P:Teradata.Client.Provider.TdIntervalYearToMonth.Precision"/> will be
            		set to the number of digits contained within the <see cref="P:Teradata.Client.Provider.TdIntervalYearToMonth.Years"/> component. 
            	</para>
            	<para>
            		For example a <paramref name="value"/> of "222-10" will
            		contain 222 years, 10 months and a precision of 3.
            	</para>
            </remarks>
            <overloads>
               The specified string is converted into an equivalent 
               <see cref="T:Teradata.Client.Provider.TdIntervalYearToMonth"/> interval.  A <c>true</c> is returned 
               if the conversion succeeded, <c>false</c> otherwise.
            </overloads>
            <param name="value">A string to be converted into a <strong>TdIntervalYearToMonth</strong>.</param>
            <param name="result">The converted string into a <strong>TdIntervalYearToMonth</strong>.</param>
        </member>
        <member name="M:Teradata.Client.Provider.TdIntervalYearToMonth.GetXmlSchema(System.Xml.Schema.XmlSchemaSet)">
             <summary>
             Gets the XML Qualified name for <see cref="T:Teradata.Client.Provider.TdIntervalYearToMonth"/> XML type mapping.
             </summary>
             <param name="xmlSchemaSet">Holds zero or more XML Schema definition language (XSD) schemas.</param>
             <returns>
             Returns <strong>xs:duration.</strong>.
             </returns>
             <example>
             This examples shows how to use <strong>TdIntervalYearToMonth</strong> with <see cref="T:System.Xml.Serialization.XmlSerializer"/> class.
             <see cref="T:System.Xml.Serialization.XmlElementAttribute"/> is used to indicate that the Teradata Database column can be <strong>Null</strong>.
             <code>
              public class Order
              {
                  public TdTimestamp Date;
             
                  public TdIntervalYearToMonth ExpirationPeriod;
             
                  public TdTimestamp ExpirationDate;
            
                  public Int32 ProductId;
            
                  public Int32 Quantity;
            
                  public Int32 BackOrderQuantity;
            
                  [XmlElementAttribute(IsNullable = true)]        
                  public TdDecimal BackOrderPrice;
              }
             
              internal class OrderWriter
              {
              
                  public static void Write()
                  {
                      // Setup the order
                      Order x = new Order();
              
                      x.Date = new TdTimestamp(DateTime.Today);
                      x.ExpirationPeriod = new TdIntervalYearToMonth(1,0,1);
                      x.ExpirationDate = x.Date + x.ExpirationPeriod;
                      x.ProductId = 100;
                      x.Quantity = 2000;
                      x.BackOrderQuantity = null;
                      x.BackOrderPrice = TdDecimal.Null;
            
                      // Write out today's orders to the file.
                      //
                      // Open the file.
                      XmlWriterSettings settings = new XmlWriterSettings();
                      settings.Indent = true;
                      XmlWriter writer = XmlWriter.Create(@"C:\Temp\TodayOrders.XML", settings);
                      writer.WriteStartElement("TodayOrders");
                
                      // Write out the schema.
                      XmlSchemas schemas = new XmlSchemas();
                      XmlSchemaExporter schExporter = new XmlSchemaExporter(schemas);
                      schExporter.ExportTypeMapping(new XmlReflectionImporter().ImportTypeMapping(typeof(Order)));
                      schemas[0].Write(writer);
            
                      // Write out the orders.
                      XmlSerializer xml = new XmlSerializer(typeof(Order));
                      xml.Serialize(writer, x);
              
                      // Close the document.
                      writer.WriteEndDocument();
                      writer.Close();
                  }
              }
             
              /* Output is:
             
              &lt;TodayOrders&gt;
                &lt;xs:schema elementFormDefault="qualified" xmlns:xs="http://www.w3.org/2001/XMLSchema"&gt;
                  &lt;xs:element name="Order" nillable="true" type="Order" /&gt;
                  &lt;xs:complexType name="Order"&gt;
                    &lt;xs:sequence&gt;
                      &lt;xs:element minOccurs="1" maxOccurs="1" name="Date" type="xs:dateTime" /&gt;
                      &lt;xs:element minOccurs="1" maxOccurs="1" name="ExpirationPeriod" type="xs:duration" /&gt;
                      &lt;xs:element minOccurs="1" maxOccurs="1" name="ExpirationDate" type="xs:dateTime" /&gt;
                      &lt;xs:element minOccurs="1" maxOccurs="1" name="ProductId" type="xs:int" /&gt;
                      &lt;xs:element minOccurs="1" maxOccurs="1" name="Quantity" type="xs:int" /&gt;
                      &lt;xs:element minOccurs="1" maxOccurs="1" name="BackOrderQuantity" nillable="true" type="xs:int" /&gt;
                      &lt;xs:element minOccurs="1" maxOccurs="1" name="BackOrderPrice" nillable="true" type="xs:decimal" /&gt;
                    &lt;/xs:sequence&gt;
                  &lt;/xs:complexType&gt;
                &lt;/xs:schema&gt;
                &lt;Order xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xmlns:xsd="http://www.w3.org/2001/XMLSchema"&gt;
                  &lt;Date&gt;2008-02-01T00:00:00-08:00&lt;/Date&gt;
                  &lt;ExpirationPeriod&gt;P1Y&lt;/ExpirationPeriod&gt;
                  &lt;ExpirationDate&gt;2009-02-01T00:00:00-08:00&lt;/ExpirationDate&gt;
                  &lt;ProductId&gt;100&lt;/ProductId&gt;
                  &lt;Quantity&gt;2000&lt;/Quantity&gt;
                  &lt;BackOrderQuantity xsi:nil="true" /&gt;
                  &lt;BackOrderPrice xsi:nil="true" /&gt;
                &lt;/Order&gt;
              &lt;/TodayOrders&gt;
             
              */
             </code>
             </example>        
        </member>
        <member name="M:Teradata.Client.Provider.TdIntervalYearToMonth.op_Addition(Teradata.Client.Provider.TdIntervalYearToMonth,Teradata.Client.Provider.TdIntervalYearToMonth)">
            <summary>
               A <see cref="T:Teradata.Client.Provider.TdIntervalYearToMonth"/> is added to another <strong>TdIntervalYearToMonth</strong>.
            </summary>
            <remarks>
            <para>
               If either parameter is <strong>Null</strong> a <see cref="F:Teradata.Client.Provider.TdIntervalYearToMonth.Null"/> will be returned.
            </para>
            <para>
               The returned <strong>TdIntervalYearToMonth</strong> will contain a precision  
               set to the <see cref="F:Teradata.Client.Provider.TdIntervalYearToMonth.MaxPrecision"/>.
            </para>
            </remarks>
            <returns>
               A new <strong>TdIntervalYearToMonth</strong> as the result of adding a 
               <strong>TdIntervalYearToMonth</strong> to another 
               <strong>TdIntervalYearToMonth</strong>.
            </returns>        
            <exception cref="T:System.OverflowException">
               The resultant operation returns a value greater than the <see cref="F:Teradata.Client.Provider.TdIntervalYearToMonth.MaxValue"/> 
               or less than the <see cref="F:Teradata.Client.Provider.TdIntervalYearToMonth.MinValue"/>.
            </exception>
            <param name="left">A <strong>TdIntervalYearToMonth</strong>.</param>
            <param name="right">A <strong>TdIntervalYearToMonth</strong>.</param>
        </member>
        <member name="M:Teradata.Client.Provider.TdIntervalYearToMonth.op_Subtraction(Teradata.Client.Provider.TdIntervalYearToMonth,Teradata.Client.Provider.TdIntervalYearToMonth)">
            <summary>
            A <see cref="T:Teradata.Client.Provider.TdIntervalYearToMonth"/> is subtracted from another <strong>TdIntervalYearToMonth</strong>.
            </summary>
            <remarks>
            <para>
               If either parameter is <strong>Null</strong> a <see cref="F:Teradata.Client.Provider.TdIntervalYearToMonth.Null"/> will be returned.
            </para>
            <para>
               The returned <strong>TdIntervalYearToMonth</strong> will contain a precision adjusted 
               set to the <see cref="F:Teradata.Client.Provider.TdIntervalYearToMonth.MaxPrecision"/>.
            </para>
            </remarks>
            <returns>A new <strong>TdIntervalYearToMonth</strong>.</returns>
            <exception cref="T:System.OverflowException">
               The resultant operation returns a value greater than the <see cref="F:Teradata.Client.Provider.TdIntervalYearToMonth.MaxValue"/> 
               or less than the <see cref="F:Teradata.Client.Provider.TdIntervalYearToMonth.MinValue"/>.
            </exception>
            <param name="left">A <strong>TdIntervalYearToMonth</strong> to subtract from.</param>
            <param name="right">A <strong>TdIntervalYearToMonth</strong> to subtract.</param>
        </member>
        <member name="M:Teradata.Client.Provider.TdIntervalYearToMonth.op_Multiply(Teradata.Client.Provider.TdIntervalYearToMonth,System.Int32)">
            <summary>
               A <see cref="T:Teradata.Client.Provider.TdIntervalYearToMonth"/> is multiplied by an integer value.
            </summary>
            <remarks>
            <para>
               If <paramref name="interval"/> is <see cref="F:Teradata.Client.Provider.TdIntervalYearToMonth.Null"/> a <strong>Null</strong> will be returned.
            </para>
            <para>
               The returned <strong>TdIntervalYearToMonth</strong> will contain a precision 
               set to the <see cref="F:Teradata.Client.Provider.TdIntervalYearToMonth.MaxPrecision"/>.
            </para>
            </remarks>
            <returns>
               A new <strong>TdIntervalYearToMonth</strong> as the result of multiplying a 
               <strong>TdIntervalYearToMonth</strong> and an integer value.
            </returns>        
            <exception cref="T:System.OverflowException">
               The resultant operation returns a value greater than the <see cref="F:Teradata.Client.Provider.TdIntervalYearToMonth.MaxValue"/> 
               or less than the <see cref="F:Teradata.Client.Provider.TdIntervalYearToMonth.MinValue"/>.
            </exception>
            <param name="interval">A <strong>TdIntervalYearToMonth</strong>.</param>
            <param name="value">A multiplier.</param>
        </member>
        <member name="M:Teradata.Client.Provider.TdIntervalYearToMonth.op_Multiply(System.Int32,Teradata.Client.Provider.TdIntervalYearToMonth)">
            <summary>
               A <see cref="T:Teradata.Client.Provider.TdIntervalYearToMonth"/> is multiplied by an integer value.
            </summary>
            <remarks>
            <para>
               If <paramref name="interval"/> is <see cref="F:Teradata.Client.Provider.TdIntervalYearToMonth.Null"/> a <strong>Null</strong> will be returned.
            </para>
            <para>
               The returned <strong>TdIntervalYearToMonth</strong> will contain a precision 
               set to the <see cref="F:Teradata.Client.Provider.TdIntervalYearToMonth.MaxPrecision"/>.
            </para>
            </remarks>
            <returns>
               A new <strong>TdIntervalYearToMonth</strong> as the result of multiplying a 
               <strong>TdIntervalYearToMonth</strong> and an integer value.
            </returns>        
            <exception cref="T:System.OverflowException">
               The resultant operation returns a value greater than the <see cref="F:Teradata.Client.Provider.TdIntervalYearToMonth.MaxValue"/> 
               or less than the <see cref="F:Teradata.Client.Provider.TdIntervalYearToMonth.MinValue"/>.
            </exception>
            <param name="value">A multiplier.</param>
            <param name="interval">A <strong>TdIntervalYearToMonth</strong>.</param>
        </member>
        <member name="M:Teradata.Client.Provider.TdIntervalYearToMonth.op_Division(Teradata.Client.Provider.TdIntervalYearToMonth,System.Int32)">
            <summary>
               A <see cref="T:Teradata.Client.Provider.TdIntervalYearToMonth"/> is divided by an integer value.
            </summary>
            <remarks>
            <para>
               If <paramref name="interval"/> is <see cref="F:Teradata.Client.Provider.TdIntervalYearToMonth.Null"/> a <strong>Null</strong> will be returned.
            </para>
            <para>
               The returned <strong>TdIntervalYearToMonth</strong> will contain a precision 
               which matches the precision of <strong>interval</strong> parameter.
            </para>
            </remarks>
            <returns>
               A new <strong>TdIntervalYearToMonth</strong> as the result of dividing a 
               <strong>TdIntervalYearToMonth</strong> and an integer value.
            </returns>        
            <exception cref="T:System.DivideByZeroException">The <paramref name="value"/> divisor cannot be 0.</exception>
            <param name="interval">A <strong>TdIntervalYearToMonth</strong>.</param>
            <param name="value">A divisor.</param>
        </member>
        <member name="M:Teradata.Client.Provider.TdIntervalYearToMonth.Add(Teradata.Client.Provider.TdIntervalYearToMonth,Teradata.Client.Provider.TdIntervalYearToMonth)">
            <summary>
               Calculates the sum of two <see cref="T:Teradata.Client.Provider.TdIntervalYearToMonth"/> operands.
            </summary>
            <remarks>
            <para>
               If either parameter is <strong>Null</strong> a <see cref="F:Teradata.Client.Provider.TdIntervalYearToMonth.Null"/> will be returned.
            </para>
            <para>
               The returned <strong>TdIntervalYearToMonth</strong> will contain a precision  
               set to the <see cref="F:Teradata.Client.Provider.TdIntervalYearToMonth.MaxPrecision"/>.
            </para>
            </remarks>
            <returns>A <strong>TdIntervalYearToMonth</strong> containing the sum.</returns>
            <exception cref="T:System.OverflowException">
               The resultant operation returns a value greater than the <see cref="F:Teradata.Client.Provider.TdIntervalYearToMonth.MaxValue"/> 
               or less than the <see cref="F:Teradata.Client.Provider.TdIntervalYearToMonth.MinValue"/>.
            </exception>
            <param name="left">A <strong>TdIntervalYearToMonth</strong>.</param>
            <param name="right">A <strong>TdIntervalYearToMonth</strong>.</param>
        </member>
        <member name="M:Teradata.Client.Provider.TdIntervalYearToMonth.Subtract(Teradata.Client.Provider.TdIntervalYearToMonth,Teradata.Client.Provider.TdIntervalYearToMonth)">
            <summary>
            A <see cref="T:Teradata.Client.Provider.TdIntervalYearToMonth"/> is subtracted from another <strong>TdIntervalYearToMonth</strong>.
            </summary>
            <remarks>
            <para>
               If either parameter is <strong>Null</strong> a <see cref="F:Teradata.Client.Provider.TdIntervalYearToMonth.Null"/> will be returned.
            </para>
            <para>
               The returned <strong>TdIntervalYearToMonth</strong> will contain a precision
               set to the <see cref="F:Teradata.Client.Provider.TdIntervalYearToMonth.MaxPrecision"/>.
            </para>
            </remarks>
            <returns>A new <strong>TdIntervalYearToMonth</strong>.</returns>
            <exception cref="T:System.OverflowException">
               The resultant operation returns a value greater than the <see cref="F:Teradata.Client.Provider.TdIntervalYearToMonth.MaxValue"/> 
               or less than the <see cref="F:Teradata.Client.Provider.TdIntervalYearToMonth.MinValue"/>.
            </exception>
            <param name="left">A <strong>TdIntervalYearToMonth</strong> to subtract from.</param>
            <param name="right">A <strong>TdIntervalYearToMonth</strong> to subtract.</param>
        </member>
        <member name="M:Teradata.Client.Provider.TdIntervalYearToMonth.Multiply(Teradata.Client.Provider.TdIntervalYearToMonth,System.Int32)">
            <summary>
               A <see cref="T:Teradata.Client.Provider.TdIntervalYearToMonth"/> is multiplied by an integer value.
            </summary>
            <remarks>
            <para>
               If <paramref name="interval"/> is <strong>Null</strong> a <see cref="F:Teradata.Client.Provider.TdIntervalYearToMonth.Null"/> will be returned.
            </para>
            <para>
               The returned <strong>TdIntervalYearToMonth</strong> will contain a precision 
               set to the <see cref="F:Teradata.Client.Provider.TdIntervalYearToMonth.MaxPrecision"/>. 
            </para>
            </remarks>
            <returns>
               A new <strong>TdIntervalYearToMonth</strong> as the result of multiplying a 
               <strong>TdIntervalYearToMonth</strong> and an integer value.
            </returns>        
            <exception cref="T:System.OverflowException">
               The resultant operation returns a value greater than the <see cref="F:Teradata.Client.Provider.TdIntervalYearToMonth.MaxValue"/> 
               or less than the <see cref="F:Teradata.Client.Provider.TdIntervalYearToMonth.MinValue"/>.
            </exception>
            <param name="interval">A <strong>TdIntervalYearToMonth</strong>.</param>
            <param name="value">A multiplier.</param>
        </member>
        <member name="M:Teradata.Client.Provider.TdIntervalYearToMonth.Multiply(System.Int32,Teradata.Client.Provider.TdIntervalYearToMonth)">
            <summary>
               A <see cref="T:Teradata.Client.Provider.TdIntervalYearToMonth"/> is multiplied by an integer value.
            </summary>
            <remarks>
            <para>
               If <paramref name="interval"/> is <strong>Null</strong> a <see cref="F:Teradata.Client.Provider.TdIntervalYearToMonth.Null"/> will be returned.
            </para>
            <para>
               The returned <strong>TdIntervalYearToMonth</strong> will contain a precision 
               set to the <see cref="F:Teradata.Client.Provider.TdIntervalYearToMonth.MaxPrecision"/>.
            </para>
            </remarks>
            <returns>
               A new <strong>TdIntervalYearToMonth</strong> as the result of multiplying a 
               <strong>TdIntervalYearToMonth</strong> and an integer value.
            </returns>        
            <exception cref="T:System.OverflowException">
               The resultant operation returns a value greater than the <see cref="F:Teradata.Client.Provider.TdIntervalYearToMonth.MaxValue"/> 
               or less than the <see cref="F:Teradata.Client.Provider.TdIntervalYearToMonth.MinValue"/>.
            </exception>
            <param name="value">A multiplier.</param>
            <param name="interval">A <strong>TdIntervalYearToMonth</strong>.</param>
        </member>
        <member name="M:Teradata.Client.Provider.TdIntervalYearToMonth.Divide(Teradata.Client.Provider.TdIntervalYearToMonth,System.Int32)">
            <summary>
               A <see cref="T:Teradata.Client.Provider.TdIntervalYearToMonth"/> is divided by an integer value.
            </summary>
            <remarks>
            <para>
               If <paramref name="interval"/> is <strong>Null</strong> a <see cref="F:Teradata.Client.Provider.TdIntervalYearToMonth.Null"/> will be returned.
            </para>
            <para>
               The returned <strong>TdIntervalYearToMonth</strong> will contain a precision 
               which matches the precision of the <strong>interval</strong> parameter.
            </para>
            </remarks>
            <returns>
               A new <strong>TdIntervalYearToMonth</strong> as the result of dividing a 
               <strong>TdIntervalYearToMonth</strong> and an integer value.
            </returns>        
            <exception cref="T:System.DivideByZeroException">The <paramref name="value"/> divisor cannot be 0.</exception>
            <param name="interval">A <strong>TdIntervalYearToMonth</strong>.</param>
            <param name="value">A divisor.</param>
        </member>
        <member name="M:Teradata.Client.Provider.TdIntervalYearToMonth.op_GreaterThan(Teradata.Client.Provider.TdIntervalYearToMonth,Teradata.Client.Provider.TdIntervalYearToMonth)">
            <summary>
               This operator determines whether the <paramref name="left"/> is greater than the 
               <paramref name="right"/>.
            </summary>
            <returns>
            	<para>
            		<c>true</c> indicates the <paramref name="left"/> is greater than
                    the <paramref name="right"/>, <c>false</c> otherwise.
                </para>
            	<para>
            		<list type="table">
            			<listheader>
            				<term>Return Value</term>
            				<description>Description</description>
            			</listheader>
            			<item>
            				<term><c>true</c></term>
            				<description>
            					<paramref name="left"/> and
                                <paramref name="right"/> are not
                                <see cref="F:Teradata.Client.Provider.TdIntervalYearToMonth.Null"/> and
                                <paramref name="left"/> is greater than
                                <paramref name="right"/>.
            				</description>
            			</item>
            			<item>
            				<term><c>false</c></term>
            				<description>
            					<para>
                                    The <paramref name="left"/> is less than or equal
                                    to <paramref name="right"/>
                                </para>
            					<para>-or-</para>
            					<para>
                                    Either <paramref name="left"/> and / or
                                    <paramref name="right"/> is <strong>Null</strong>.
                                </para>
            				</description>
            			</item>
            		</list>
            	</para>
            </returns>
            <remarks>
            	<para>
                   Comparison operators always return <c>false</c> if one of the operands is
                   <strong>Null</strong>. Therefore you should not assume that the reverse condition
                   is <c>true</c>. For example you cannot assume that the <paramref name="left"/> 
                   is less than or equal to the <paramref name="right"/> if the "&gt;" operator
                   returns <c>false</c>.
               </para>
            	<para>
                   The reverse condition is <c>true</c> when the <paramref name="left"/> and the <paramref name="right"/> are not
                   <strong>Null</strong>.
               </para>
            </remarks>
            <param name="left">An instance of <see cref="T:Teradata.Client.Provider.TdIntervalYearToMonth"/>.</param>
            <param name="right">An instance of <strong>TdIntervalYearToMonth</strong>.</param>
        </member>
        <member name="M:Teradata.Client.Provider.TdIntervalYearToMonth.op_GreaterThanOrEqual(Teradata.Client.Provider.TdIntervalYearToMonth,Teradata.Client.Provider.TdIntervalYearToMonth)">
            <summary>
            This operator determines whether the <paramref name="left"/> is greater than or 
            equal to the <paramref name="right"/>.
            </summary>
            <returns>
            	<para>
            		<c>true</c> indicates the <paramref name="left"/> is greater than
                    or equal to the <paramref name="right"/>, <c>false</c> otherwise.
                </para>
            	<para>
            		<list type="table">
            			<listheader>
            				<term>Return Value</term>
            				<description>Description</description>
            			</listheader>
            			<item>
            				<term><c>true</c></term>
            				<description>
            					<para>
            						<paramref name="left"/> and
                                    <paramref name="right"/> are not
                                    <see cref="F:Teradata.Client.Provider.TdIntervalYearToMonth.Null"/> and
                                    <paramref name="left"/> is greater than or equal
                                    to <paramref name="right"/>
            					</para>
            					<para>-or-</para>
            					<para>
            						<paramref name="left"/> is <strong>Null</strong>
                                    and <paramref name="right"/> is
                                    <strong>Null</strong>.
            					</para>
            				</description>
            			</item>
            			<item>
            				<term><c>false</c></term>
            				<description>
            					<para>
                                    The <paramref name="left"/> is less than
                                    <paramref name="right"/>
            					</para>
            					<para>-or-</para>
            					<para>
                                    Either <paramref name="left"/> or
                                    <paramref name="right"/> is <strong>Null</strong>.
            					</para>
            				</description>
            			</item>
            		</list>
            	</para>
            </returns>
            <remarks>
            	<para>
                    Comparison operators always return <c>false</c> if one of the operands is
                    <strong>Null</strong>. Therefore you should not assume that the reverse
                    condition is <c>true</c>. For example you cannot assume that the
                    <paramref name="left"/> is less than the
                    <paramref name="right"/> if the "&gt;=" operator returns
                    <c>false</c>.
                </para>
            	<para>
                    The reverse condition is <c>true</c> when the
                    <paramref name="left"/> and the
                    <paramref name="right"/> are not <strong>Null</strong>.
                </para>
            </remarks>
            <param name="left">An instance of <see cref="T:Teradata.Client.Provider.TdIntervalYearToMonth"/>.</param>
            <param name="right">An instance of <strong>TdIntervalYearToMonth</strong>.</param>
        </member>
        <member name="M:Teradata.Client.Provider.TdIntervalYearToMonth.op_Inequality(Teradata.Client.Provider.TdIntervalYearToMonth,Teradata.Client.Provider.TdIntervalYearToMonth)">
            <summary>
            This operator determines whether the <paramref name="left"/> and the  
            <paramref name="right"/> are not equal.
            </summary>
            <returns>
            	<para>A Boolean is returned that indicates whether the two operands are not equal.
                <c>true</c> indicates the two operands are not equal, <c>false</c>
                otherwise.</para>
            	<para>
            		<list type="table">
            			<listheader>
            				<term>Return Value</term>
            				<description>Description</description>
            			</listheader>
            			<item>
            				<term><c>true</c></term>
            				<description>
            					<para>
            					    <paramref name="left"/> is less than or greater than
                                   <paramref name="right"/>
            					</para>
            					<para>-or-</para>
                               <para>
            					   <paramref name="left"/> is
                                   <see cref="F:Teradata.Client.Provider.TdIntervalYearToMonth.Null"/> and
                                   <paramref name="right"/> is not <strong>Null</strong>
                               </para>
            					<para>-or-</para>
                               <para>
            					   <paramref name="left"/> is not <strong>Null</strong>
                                   and <paramref name="right"/> is <strong>Null</strong>.
                               </para>
                            </description>
            			</item>
            			<item>
            				<term><c>false</c></term>
            				<description>
                               <para>
            					   <paramref name="left"/> is equal to
                                   <paramref name="right"/>
                               </para>
            					<para>-or-</para>
                               <para>
            					   <paramref name="left"/> and
                                   <paramref name="right"/> are <strong>Null</strong>.
                               </para>
                            </description>
            			</item>
            		</list>
            	</para>
            </returns>
            <param name="left">An instance of <see cref="T:Teradata.Client.Provider.TdIntervalYearToMonth"/>.</param>
            <param name="right">An instance of <strong>TdIntervalYearToMonth</strong>.</param>
        </member>
        <member name="M:Teradata.Client.Provider.TdIntervalYearToMonth.op_Equality(Teradata.Client.Provider.TdIntervalYearToMonth,Teradata.Client.Provider.TdIntervalYearToMonth)">
            <summary>
            This operator determines whether the <paramref name="left"/> and the  
            <paramref name="right"/> are equal.
            </summary>
            <returns>
            	<para>A Boolean is returned that indicates whether the two operands are equal.
                <c>true</c> indicates the two operands are equal, <c>false</c> otherwise.</para>
            	<para>
            		<list type="table">
            			<listheader>
            				<term>Return Value</term>
            				<description>Description</description>
            			</listheader>
            			<item>
            				<term><c>true</c></term>
            				<description>
                               <para>
            					   <paramref name="left"/> is equal to
                                   <paramref name="right"/>
                               </para>
            					<para>-or-</para>
                               <para>
            					   <paramref name="left"/> is
                                   <see cref="F:Teradata.Client.Provider.TdIntervalYearToMonth.Null"/> and
                                   <paramref name="right"/> is <strong>Null</strong>.
                               </para>
            				</description>
            			</item>
            			<item>
            				<term><c>false</c></term>
            				<description>
                               <para>
            					   <paramref name="left"/> is not <strong>Null</strong>
                                   and <paramref name="right"/> is <strong>Null</strong>
                               </para>
            					<para>-or-</para>
                               <para>
                                   <paramref name="left"/> is <strong>Null</strong> and
                                   <paramref name="right"/> is not <strong>Null</strong>
                               </para>
            					<para>-or-</para>
                                   The <paramref name="left"/> is not equal to
                                   <paramref name="right"/>.
                               <para>
                               </para>
            				</description>
            			</item>
            		</list>
            	</para>
            </returns>
            <param name="left">An instance of <see cref="T:Teradata.Client.Provider.TdIntervalYearToMonth"/>.</param>
            <param name="right">An instance of <strong>TdIntervalYearToMonth</strong>.</param>
        </member>
        <member name="M:Teradata.Client.Provider.TdIntervalYearToMonth.op_LessThan(Teradata.Client.Provider.TdIntervalYearToMonth,Teradata.Client.Provider.TdIntervalYearToMonth)">
            <summary>
            This operator determines whether the <paramref name="left"/> is less than the <paramref name="right"/>.
            </summary>
            <returns>
            	<para>
            		<c>true</c> indicates the <paramref name="left"/> is less than
                    the <paramref name="right"/>, <c>false</c> otherwise.
                </para>
            	<para>
            		<list type="table">
            			<listheader>
            				<term>Return Value</term>
            				<description>Description</description>
            			</listheader>
            			<item>
            				<term><c>true</c></term>
            				<description>
            					<paramref name="left"/> and
                                <paramref name="right"/> are not
                                <see cref="F:Teradata.Client.Provider.TdIntervalYearToMonth.Null"/> and
                                <paramref name="left"/> is less than
                                <paramref name="right"/>.
            				</description>
            			</item>
            			<item>
            				<term><c>false</c></term>
            				<description>
            					<para>
                                    The <paramref name="left"/> is greater than or
                                    equal to <paramref name="right"/>
            					</para>
            					<para>-or-</para>
            					<para>
                                    Either <paramref name="left"/> and / or
                                    <paramref name="right"/> is <strong>Null</strong>.
            					</para>
            				</description>
            			</item>
            		</list>
            	</para>
            </returns>
            <remarks>
            	<para>
                    Comparison operators always return <c>false</c> if one of the operands is
                    <strong>Null</strong>. Therefore you should not assume that the reverse
                    condition is <c>true</c>. For example you cannot assume that the
                    <paramref name="left"/> is greater than or equal to the
                    <paramref name="right"/> if the "&lt;" operator returns
                    <c>false</c>.
                </para>
            	<para>
                    The reverse condition is <c>true</c> when the
                    <paramref name="left"/> and the
                    <paramref name="right"/> are not <strong>Null</strong>.
                </para>
            </remarks>
            <param name="left">An instance of <see cref="T:Teradata.Client.Provider.TdIntervalYearToMonth"/>.</param>
            <param name="right">An instance of <strong>TdIntervalYearToMonth</strong>.</param>
        </member>
        <member name="M:Teradata.Client.Provider.TdIntervalYearToMonth.op_LessThanOrEqual(Teradata.Client.Provider.TdIntervalYearToMonth,Teradata.Client.Provider.TdIntervalYearToMonth)">
            <summary>
            This operator determines whether the <paramref name="left"/> is less than or equal the <paramref name="right"/>.
            </summary>
            <returns>
            	<para>
            		<c>true</c> indicates the <paramref name="left"/> is less than or
                    equal to the <paramref name="right"/>, <c>false</c> otherwise.
                </para>
            	<para>
            		<list type="table">
            			<listheader>
            				<term>Return Value</term>
            				<description>Description</description>
            			</listheader>
            			<item>
            				<term><c>true</c></term>
            				<description>
            					<para>
            						<paramref name="left"/> and
                                    <paramref name="right"/> are not
                                    <see cref="F:Teradata.Client.Provider.TdIntervalYearToMonth.Null"/> and
                                    <paramref name="left"/> is less than or equal to
                                    <paramref name="right"/>
            					</para>
            					<para>-or-</para>
            					<para>
            						<paramref name="left"/> is <strong>Null</strong>
                                    and <paramref name="right"/> is
                                    <strong>Null</strong>.
            					</para>
            				</description>
            			</item>
            			<item>
            				<term><c>false</c></term>
            				<description>
            					<para>
                                    The <paramref name="left"/> is greater than
                                    <paramref name="right"/>
            					</para>
            					<para>-or-</para>
            					<para>
                                    Either <paramref name="left"/> or
                                    <paramref name="right"/> is <strong>Null</strong>.
            					</para>
            				</description>
            			</item>
            		</list>
            	</para>
            </returns>
            <remarks>
            	<para>
                    Comparison operators always return <c>false</c> if one of the operands is
                    <strong>Null</strong>. Therefore you should not assume that the reverse
                    condition is <c>true</c>. For example you cannot assume that the
                    <paramref name="left"/> is greater than the
                    <paramref name="right"/> if the "&lt;=" operator returns
                    <c>false</c>.
                </para>
            	<para>
                    The reverse condition is <c>true</c> when the
                    <paramref name="left"/> and the
                    <paramref name="right"/> are not <strong>Null</strong>.
                </para>
            </remarks>
            <param name="left">An instance of <see cref="T:Teradata.Client.Provider.TdIntervalYearToMonth"/>.</param>
            <param name="right">An instance of <strong>TdIntervalYearToMonth</strong>.</param>
        </member>
        <member name="M:Teradata.Client.Provider.TdIntervalYearToMonth.op_Explicit(Teradata.Client.Provider.TdIntervalYearToMonth)~Teradata.Client.Provider.TdIntervalYear">
            <summary>
               Converts a <see cref="T:Teradata.Client.Provider.TdIntervalYearToMonth"/> to <see cref="T:Teradata.Client.Provider.TdIntervalYear"/>.
            </summary>
            <remarks>
               <para>
                   Truncation will occur while converting <strong>TdIntervalYearToMonth</strong>
                   if the months interval component is non-zero.
               </para>
            </remarks>
            <param name="value">A <strong>TdIntervalYearToMonth</strong> interval.</param>
            <returns>A <strong>TdIntervalYear</strong>.</returns>
        </member>
        <member name="M:Teradata.Client.Provider.TdIntervalYearToMonth.op_Explicit(Teradata.Client.Provider.TdIntervalYearToMonth)~Teradata.Client.Provider.TdIntervalMonth">
            <summary>
               Converts a <see cref="T:Teradata.Client.Provider.TdIntervalYearToMonth"/> to <see cref="T:Teradata.Client.Provider.TdIntervalMonth"/>.
            </summary>
            <exception cref="T:System.OverflowException">The resultant conversion returns a value greater than the <see cref="F:Teradata.Client.Provider.TdIntervalMonth.MaxValue"/> or less than the <see cref="F:Teradata.Client.Provider.TdIntervalMonth.MinValue"/>.</exception>
            <param name="value">A <strong>TdIntervalYearToMonth</strong> interval.</param>
            <returns>A <strong>TdIntervalMonth</strong>.</returns>
        </member>
        <member name="P:Teradata.Client.Provider.TdIntervalYearToMonth.IsNull">
            <summary>
               Indicates whether this <see cref="T:Teradata.Client.Provider.TdIntervalYearToMonth"/> instance is <see cref="F:Teradata.Client.Provider.TdIntervalYearToMonth.Null"/>. 
            </summary>
            <value>
               <c>true</c> if this <strong>TdIntervalYearToMonth</strong> is 
               <strong>Null</strong>; <c>false</c> otherwise.
            </value>
        </member>
        <member name="P:Teradata.Client.Provider.TdIntervalYearToMonth.Years">
            <summary>
               The number of interval years is returned. The return value ranges from -9999 to 9999.
            </summary>
            <remarks>
            <para>
               A <see cref="T:Teradata.Client.Provider.TdIntervalYearToMonth"/> is represented as [-]years-mm.  The 
               minus sign is optional and represents a negative interval of time.  The years 
               component represents years and the mm component represents months.
               The value of the Years property is the years component.
            </para>
            <para>
               A negative interval will return all properties (Years, Months and TotalMonths) as negative values. 
            </para>
            </remarks>
            <exception cref="T:Teradata.Client.Provider.TdException">
               This property is not available when this instance is <see cref="F:Teradata.Client.Provider.TdIntervalYearToMonth.Null"/>.
            </exception>
        </member>
        <member name="P:Teradata.Client.Provider.TdIntervalYearToMonth.Months">
            <summary>
               The number of interval months is returned. The return value ranges from 0 to 11.
            </summary>
            <remarks>
            <para>
               A <see cref="T:Teradata.Client.Provider.TdIntervalYearToMonth"/> is represented as [-]years-mm.  The 
               minus sign is optional and represents a negative interval of time.  The years 
               component represents years and the mm component represents months.
               The value of the Months property is the mm component.
            </para>
            <para>
               A negative interval will return all properties (Years, Months and TotalMonths) as negative values.
            </para>
            </remarks>
            <exception cref="T:Teradata.Client.Provider.TdException">
               This property is not available when this instance is <see cref="F:Teradata.Client.Provider.TdIntervalYearToMonth.Null"/>.
            </exception>
        </member>
        <member name="P:Teradata.Client.Provider.TdIntervalYearToMonth.TotalMonths">
            <summary>
               The total number of months represented by this instance.
            </summary>
            <remarks>
            <para>
               A <see cref="T:Teradata.Client.Provider.TdIntervalYearToMonth"/> is represented as [-]years-mm.  The 
               minus sign is optional and represents a negative interval of time.  The years 
               component represents years and the mm component represents months.
               The value of the TotalMonths property is the addition of the <see cref="P:Teradata.Client.Provider.TdIntervalYearToMonth.Months"/>
               and the <see cref="P:Teradata.Client.Provider.TdIntervalYearToMonth.Years"/> * 12.
            </para>
            <para>
               A negative interval will return all properties (Years, Months and TotalMonths) as negative values. 
            </para>
            </remarks>
            <exception cref="T:Teradata.Client.Provider.TdException">
               This property is not available when this instance is <see cref="F:Teradata.Client.Provider.TdIntervalYearToMonth.Null"/>.
            </exception>
        </member>
        <member name="P:Teradata.Client.Provider.TdIntervalYearToMonth.Precision">
            <summary>
               The number of significant digits in the year is returned. The return value
               ranges from 1 to 4.
            </summary>
            <exception cref="T:Teradata.Client.Provider.TdException">
               This property is not available when this instance is <see cref="F:Teradata.Client.Provider.TdIntervalYearToMonth.Null"/>.
            </exception>
        </member>
        <member name="P:Teradata.Client.Provider.TdIntervalYearToMonth.Value">
            <summary>
               Gets the .NET data type representation of <see cref="T:Teradata.Client.Provider.TdIntervalYearToMonth"/> 
               as a <see cref="T:System.String"/>.
            </summary>
            <remarks>
               This property in concept parallels <see cref="M:Teradata.Client.Provider.TdDataReader.GetValue(System.Int32)"/> and
               <see cref="P:Teradata.Client.Provider.TdParameter.Value"/>. That is they all represent the .NET Framework 
               Class Library(FCL) primitive data type that correspond to the Teradata 
               Interval Year To Month data type.
            </remarks>
            <value>The interval represented as a <c>String</c> is returned.</value>
            <exception cref="T:Teradata.Client.Provider.TdException">
               This property is not available when this instance is <see cref="F:Teradata.Client.Provider.TdIntervalYearToMonth.Null"/>.
            </exception>
        </member>
        <member name="P:Teradata.Client.Provider.TdIntervalYearToMonth.ObjectId">
            <summary>
               Gets the instance object identifier.
            </summary>
        </member>
        <member name="P:Teradata.Client.Provider.TdIntervalYearToMonth.IsNegative">
            <summary>
               Indicate if the interval is negative.
            </summary>
            <remarks>
               Months indicates the total months in this interval.
            </remarks>
        </member>
        <member name="P:Teradata.Client.Provider.TdIntervalYearToMonth.InternalAccessor">
            <summary>
               Accessor to the internal storage for this interval.
            </summary>
        </member>
        <member name="T:Teradata.Client.Provider.TdTime">
            <summary>
            TdTime is a .Net Data Provider for Teradata specific type that represents the 
            time of day.
            </summary>
            <remarks>
            <para>The .Net Framework does not have a system type that directly corresponds to the Teradata type 
            <strong>Time</strong>.  The .Net Data Provider for Teradata Version 1.2 and earlier versions 
            map Time to System.TimeSpan.  With the release of version 12.0 of the provider, <strong>TdTime</strong>
            is available to retrieve and manipulate data of Teradata type Time.</para>
            
            <para>Similar to the Teradata Database's Time type, the TdTime also supports a scale for 
            the sub-seconds --this is referred to as <see cref="P:Teradata.Client.Provider.TdTime.Microsecond"/>.  
            The scale can range from 0 to 6.  The microseconds and scale are specified in the 
            constructor.  An example of a time is "17:22:10.0329".
            This time has a <see cref="P:Teradata.Client.Provider.TdTime.Microsecond"/> of "32900", and a <see cref="P:Teradata.Client.Provider.TdTime.Scale"/> 
            of "4".</para>
            
            <para>When a TdTime is parsed (see <see cref="M:Teradata.Client.Provider.TdTime.Parse(System.String,System.IFormatProvider)"/>) the
            scale of the resulting TdTime will be set to the actual scale of the fractional
            component of the time.</para>
            
            <para>When data of a column that is a Time is retrieved as a 
            TdTime, it's scale will be set to the scale of the column.</para>
            
            <para>The TdTime structure allows arithmetic, comparison, and conversion operations to be
            performed.</para>
            
            <para>A TdTime value can also be specified as an In, Out, or InOut parameter to a Stored 
            Procedure.  In order to maintain backward compatibility with previous versions of the 
            provider --versions earlier than 12.0--, the Connection String Attribute 
            <a href="TdDateAndTimeConnectionString.htm"><strong>Enable TdDateTime</strong></a> 
            must be set to <c>false</c>.  When this is done, a TdTime is returned to an application 
            using the <see cref="P:Teradata.Client.Provider.TdParameter.ProviderSpecificValue"/> property.  The object that is returned
            from the <see cref="P:Teradata.Client.Provider.TdParameter.Value"/> property remains a System.TimeSpan object.</para>
            
            <para>If the attribute <strong>Enable TdDateTime</strong> is set to <c>true</c> a TdTime 
            <strong>is</strong> returned to the application through the TdParameter.Value.</para>
            </remarks>
            
            <example>
            <para>The following example retrieves data of two TIME columns from Teradata, modifies the data, 
            and then updates the record with the new data contained in TdTime.</para>
            <code>
            Public void TimeExample(TdCommand cmd, String classId)
            {
               cmd.Parameters.Clear();
               
               cmd.CommandText = "SELECT StartTime, EndTime FROM ClassInfo " +
                                 "WHERE ClassId = ?";
            
               cmd.CommandType = CommandType.Text;
            
               cmd.Parameters.Add(null, TdType.Varchar, 9,
                    System.Data.ParameterDirection.Input, true, 0, 0, null,    
                    System.Data.DataRowVersion.Default, classid);
            
               TdDataReader dr = null;
            
               // This will be added to TdTime.  The timespan has been set to 1 hour.
               Timespan hourLater = new Timespan(1, 0, 0);
            
               // Going to add an hour to the start and end times of the class.
               // This is going to be done the hard way to demonstrate TdTime.
            
               Try
               {
                  dr = cmd.ExecuteReader();
            
                  dr.Reader();
            
                  // Only one record is returned from query
                  TdTime startTime = dr.GetTdTime (0);
                  TdTime endTime = dr.GetTdTime (1);
            
                  dr.Close();
            
                  startTime = startTime + hourLater;
                  endTime = endTime + hourLater;
            
                  // Going to update the class record to indicate that the 
                  // class will start an hour later.
            
                  cmd.CommandText = "UPDATE ClassInfo " +
                                    "SET StartTime = ?, EndTime = ? " +
                                    "WHERE ClassId = ?";
            
                  cmd.Parameters.Clear();
            
                  cmd.Parameters.Add(null, TdType.Time, 0,
                        System.Data.ParameterDirection.Input, true, 0, 0, null,    
                        System.Data.DataRowVersion.Default, startTime);
            
                  cmd.Parameters.Add(null, TdType.Time, 0,
                        System.Data.ParameterDirection.Input, true, 0, 0, null,    
                        System.Data.DataRowVersion.Default, startTime);
            
                  cmd.Parameters.Add(null, TdType.Varchar, 9,
                        System.Data.ParameterDirection.Input, true, 0, 0, null,    
                        System.Data.DataRowVersion.Default, classid);
            
                  cmd.ExecuteNonQuery();
               }
               finally
               {
                  if (dr != null)
                  {
                     dr.Close();
                  }
               }
            }
            </code>
            </example>
            
            <seealso cref="!:TdDateAndTimeConnectionString.html">Date And Time Connection String Attribute</seealso>
            <seealso cref="!:EnableProviderSpecificTypes.html">Enabling Provider Specific Types</seealso>
            <seealso cref="!:DateAndTimeTypeOverview.html">Provider Specific Type:  Date And Time Overview</seealso>
        </member>
        <member name="F:Teradata.Client.Provider.TdTime.MaxValue">
            <summary>
            The largest possible value of TdTime.  This field is read-only.
            </summary>
            <remarks>
            The largest possible value of TdTime is equivalent to 
            <strong>23:59:59</strong>.
            </remarks>
        </member>
        <member name="F:Teradata.Client.Provider.TdTime.MinValue">
            <summary>
            The smallest possible value of TdTime.  This field is read-only.
            </summary>
            <remarks>
            The smallest possible value of TdTime is equivalent to 
            <strong>00:00:00</strong>.
            </remarks>
        </member>
        <member name="F:Teradata.Client.Provider.TdTime.Null">
            <summary>
            Gets a Null TdTime instance.
            </summary>
            <value>
            Returns a TdTime instance that represents a <strong>Null</strong> value.
            </value>
            <remarks>
            Conceptually it is the constructor for <strong>Null</strong> TdTime instances.
            </remarks>
            <example>
            This example shows how to send a <strong>Null</strong> value to a Teradata database.
            <code>
            TdParameter col1 = new TdParameter();
            col1.TdType = TdType.Time;
            col1.Value = TdTime.Null;
            </code>
            </example>
        </member>
        <member name="M:Teradata.Client.Provider.TdTime.#ctor(System.Int32,System.Int32,System.Int32)">
            <summary>
            An instance of TdTime is created from the time components specified
            as integers.
            </summary>
            
            <param name="hour">The hour of the specified time.  Valid values are 0-23.</param>
            <param name="minute">The minutes of the specified time.  Valid value are 0-59.</param>
            <param name="second">The seconds of the specified time.  Valid values are 0-59.</param>
            
            <remarks>
            <para>The scale will default to the minimum scale of 0 which corresponds to the 
            Teradata &quot;TIME&quot; type.</para>
            </remarks>
        </member>
        <member name="M:Teradata.Client.Provider.TdTime.#ctor(System.Int32,System.Int32,System.Int32,System.Int32)">
             <summary>
             An instance of TdTime is create from the time components specfied
             as integers.
             </summary>
             
             <param name="hour">The hour of the specified time.  Valid values are 0-23.</param>
             <param name="minute">The minutes of the specified time.  Valid value are 0-59.</param>
             <param name="second">The seconds of the specified time.  Valid values are 0-59.</param>
             <param name="microsecond">The number of microseconds of the specified time.</param>
             
             <exception cref="T:System.ArgumentOutOfRangeException">One of the time components is out of range.</exception>
             
             <remarks>
             <para>A microsecond is 10^-6 of a second (.000001).  </para>
            
             <para>The scale will default to the scale of the <paramref name="microsecond"/> parameter.</para>
             
             <para>When the time is created, the microsecond parameter is divided by 
             10^6 --this corresponds to a microsecond.  This becomes the fractional portion 
             of the time.  For example, if "23" is specified as the <paramref name="microsecond"/>,
             the fraction portion of the time is ".000023", and the scale will be 6.  
             A microsecond of "2000" will become ".002000", and the scale will be 3.</para> 
             </remarks>
        </member>
        <member name="M:Teradata.Client.Provider.TdTime.#ctor(System.Int32,System.Int32,System.Int32,System.Int32,System.Int32)">
            <summary>
            An instance of TdTime is created from the time components specfied
            as integers.
            </summary>
            
            <param name="hour">The hour of the specified time.  Valid values are 0-23.</param>
            <param name="minute">The minutes of the specified time.  Valid value are 0-59.</param>
            <param name="second">The seconds of the specified time.  Valid values are 0-59.</param>
            <param name="microsecond">The number of microseconds of the specified time.</param>
            <param name="scale">The scale of the time.  Valid values are 0-6.</param>
            
            <exception cref="T:System.ArgumentOutOfRangeException">One of the time components is out of range.</exception>
            
            <remarks>
            <para>A microsecond is 10^-6 of a second (.000001).  </para>
            
            <para>When the time is created, the microsecond parameter will first be divided by 
            10^6 --this corresponds to a microsecond.  Then this fractional portion of the timestamp
            will be truncated at the position specified by the scale.  For example, if "231" 
            were passed in as the microsecond and 6 as the scale, the fraction component will 
            be set to ".000231".  However, if the microsecond is 23145 and the scale is 
            3, the fractional component will be ".023"</para> 
            </remarks>
        </member>
        <member name="M:Teradata.Client.Provider.TdTime.#ctor(System.TimeSpan)">
            <summary>
            An instance of TdTime is created from the time component specified as 
            a TimeSpan structure.
            </summary>
            
            <param name="value">A TimeSpan structure that represents the time.  This must be specfied in 24 hour time.</param>
            
            <exception cref="T:System.ArgumentOutOfRangeException">The TimeSpan is out of range.</exception>
        </member>
        <member name="M:Teradata.Client.Provider.TdTime.#ctor(System.TimeSpan,System.Int32)">
            <summary>
            An instance of TdTime is created from the time component specified as 
            a TimeSpan structure.
            </summary>
            
            <param name="value">A TimeSpan structure that represents the time.  This must be specfied in 24 hour time.</param>
            <param name="scale">The scale of the time.  The scale can range from 0-6.</param>
            
            <exception cref="T:System.ArgumentOutOfRangeException">Either the <paramref name="value"/> or <paramref name="scale"/> is 
            out of range.</exception>
            
            <remarks>
            <para>If the fractional component of the TimeSpan structure contains more digits
            than what has been specified in the <paramref name="scale"/>, the fraction component will
            be truncated to match the scale.</para>
            </remarks>
        </member>
        <member name="M:Teradata.Client.Provider.TdTime.op_Explicit(System.TimeSpan)~Teradata.Client.Provider.TdTime">
            <summary>
            The TimeSpan that represents the time is converted into a TdTime.
            </summary>
            <param name="value">The TimeSpan that is to be converted.</param>
            <returns>A TdTime is returned.</returns>
            <exception cref="T:System.ArgumentOutOfRangeException">The TimeSpan is out of range.</exception>
            <remarks>The TimeSpan structure will contain the time in 24 hour format.</remarks>
        </member>
        <member name="M:Teradata.Client.Provider.TdTime.op_Explicit(Teradata.Client.Provider.TdTime)~System.TimeSpan">
            <summary>
            The TdTime is converted into a TimeSpan that represents the time.
            </summary>
            
            <param name="value">The TdTime that is to be converted.</param>
            
            <returns>A TimeSpan is returned.</returns>
            
            <remarks>
            <para>The TimeSpan structure that is returned will contain the time in 24 hour format.</para>
            </remarks>
            
            <exception cref="T:System.ArgumentNullException">The TdTime value is <see cref="F:Teradata.Client.Provider.TdTime.Null"/>.</exception>
        </member>
        <member name="M:Teradata.Client.Provider.TdTime.op_Explicit(Teradata.Client.Provider.TdTime)~Teradata.Client.Provider.TdTimeWithTimeZone">
            <summary>
            The specified TdTime is converted into a TdTimeWithTimeZone.
            </summary>
            <param name="value">The TdTime value that is to be converted into a TdTimeWithTimeZone value.</param>
            <returns>A TdTimeWithTimeZone is returned.</returns>
            <remarks>The time zone of the conversion of a TdTime into a TdTimeWithTimeZone
            will be "00:00".</remarks>
        </member>
        <member name="M:Teradata.Client.Provider.TdTime.op_Explicit(Teradata.Client.Provider.TdTime)~Teradata.Client.Provider.TdPeriodTime">
            <summary>
            Converts a TdTime into a TdPeriodTime.
            </summary>
            
            <param name="value">The TdTime that is to be converted.</param>
            
            <returns>a TdPeriodTime is returned that has a beginning bound of 
            <paramref name="value"/> and ending bound that is one time granule
            greater than value.</returns>
            
            <exception cref="T:System.ArgumentOutOfRangeException">The ending bound could not be created because 
            the <paramref name="value"/> is set to <see cref="F:Teradata.Client.Provider.TdTime.MaxValue"/></exception>
            
            <remarks>
            <para>
            A TdTime can be cast to a TdPeriodTime.  The beginning bounds of the 
            period will be <paramref name="value"/>, and the ending bound will be
            the value plus one time granule.
            </para>
            
            <para>The scale of the period will be the same as that of value.</para>
            
            <para>The following are examples of the result of casting a TdTime 
            to a TdPeriodTime:</para>
            
            <para>
            <list type="table">
            <listheader>
            <term>TdTime</term>
            <description>TdPeriodTime</description>
            <item>
            <term>00:00:00</term>
            <description>(00:00:00, 00:00:01</description>
            </item>
            <item>
            <term>23:59:59.00001</term>
            <description>(23:59:59.00001, 23:59:59.00002)</description>
            </item>
            <item>
            <term>23:59:59.8</term>
            <description>(23:59:59.8, 23:59:59.9)</description>
            </item>
            </listheader>
            </list>
            </para>        
            </remarks>
        </member>
        <member name="M:Teradata.Client.Provider.TdTime.CompareTo(Teradata.Client.Provider.TdTime)">
            <summary>
            Compares this instance to the specified TdTime <paramref name="other"/>. 
            </summary>
            
            <returns>
            The result of the comparison is returned as an integer.
            </returns>
            
            <remarks>
            	<para>
                    The integer returned when this instance is compared to <paramref name="other"/>
                    indicates the following:
                </para>
            	<para>
            		<list type="table">
            			<listheader>
            				<term>Return Value</term>
            				<description>Meaning</description>
            			</listheader>
            			<item>
            				<term>Less than Zero</term>
            				<description>
            					<para>
                                    This instance is less than <paramref name="other"/>.
                                </para>
            					<para>-or-</para>
            					<para>This instance is <see cref="F:Teradata.Client.Provider.TdTime.Null"/>.</para>
            				</description>
            			</item>
            			<item>
            				<term>Zero</term>
            				<description>
            					<para>
                                    This instance is equal to <paramref name="other"/>.
                                </para>
            					<para>-or-</para>
            					<para>This instance is <Strong>Null</Strong> and value is <Strong>Null</Strong>.</para>
            				</description>
            			</item>
            			<item>
            				<term>Greater than Zero</term>
            				<description>
            					<para>
                                    This instance is greater than
                                    <paramref name="other"/>.
                                </para>
            					<para>-or-</para>
            					<para>
            						<paramref name="other"/> is <Strong>Null</Strong>.
                                </para>
            				</description>
            			</item>
            		</list>
            	</para>
            </remarks>
            <param name="other">The TdTime to compare against.</param>
        </member>
        <member name="M:Teradata.Client.Provider.TdTime.CompareTo(System.Object)">
            <summary>
            Compares this instance to the specified TdTime <paramref name="obj"/>. 
            </summary>
            
            <returns>
            The result of the comparison is returned as an integer.
            </returns>
            
            <remarks>
            	<para>
                    The integer returned when this instance is compared to <paramref name="obj"/>
                    indicates the following:
                </para>
            	<para>
            		<list type="table">
            			<listheader>
            				<term>Return Value</term>
            				<description>Meaning</description>
            			</listheader>
            			<item>
            				<term>Less than Zero</term>
            				<description>
            					<para>This instance is less than <paramref name="obj"/>.</para>
            					<para>-or-</para>
            					<para>This instance is <see cref="F:Teradata.Client.Provider.TdTime.Null"/>.</para>
            				</description>
            			</item>
            			<item>
            				<term>Zero</term>
            				<description>
            					<para>
                                    This instance is equal to <paramref name="obj"/>.
                                </para>
            					<para>-or-</para>
            					<para>This instance is <Strong>Null</Strong> and <paramref name="obj"/> is <Strong>Null</Strong>.</para>
            				</description>
            			</item>
            			<item>
            				<term>Greater than Zero</term>
            				<description>
            					<para>
                                    This instance is greater than <paramref name="obj"/>.
                                </para>
            					<para>-or-</para>
            					<para>
            						<paramref name="obj"/> is <Strong>Null</Strong> or a <c>null</c> reference.
                                </para>
            				</description>
            			</item>
            		</list>
            	</para>
            
              <para><paramref name="obj"/> must be an instance of TdTime type or <c>null</c> reference.</para>
            </remarks>
            
            <exception cref="T:System.ArgumentException"><paramref name="obj"/> is not of type TdTime</exception>
            
            <seealso cref="M:Teradata.Client.Provider.TdTime.CompareTo(Teradata.Client.Provider.TdTime)"/>
            
            <overloads>
            Compares this instance to the supplied object and returns whether it is less
            than, equal or greater than the supplied object.
            </overloads>
            <param name="obj">TdTime instance to compare against.</param>
        </member>
        <member name="M:Teradata.Client.Provider.TdTime.GetHashCode">
            <summary>
            Returns the hash code for this instance. 
            </summary>
            
            <returns>The hash code is returned</returns>
        </member>
        <member name="M:Teradata.Client.Provider.TdTime.Equals(System.Object)">
            <summary>
                Compares this instance and <paramref name="obj"/> to determine whether they are equal.
            </summary>
            
            <returns><c>true</c> is returned if the two TdTime are equal, <c>false</c> otherwise.</returns>
            
            <remarks>
            	<para><c>false</c> will be returned if:</para>
            	<list type="bullet">
            		<item>
                        This instance or <paramref name="obj"/> is <see cref="F:Teradata.Client.Provider.TdTime.Null"/>.
                    </item>
            		<item>
                        This instance is not equal to <paramref name="obj"/>.
                    </item>
            		<item>
            			<paramref name="obj"/> is not of type TdTime or <c>null</c>.
                    </item>
            	</list>
            	<para><c>true</c> will be returned if:</para>
            	<list type="bullet">
            		<item>
                        This instance and <paramref name="obj"/> are <Strong>Null</Strong>.
                    </item>
            		<item>
                        This instance is equal to <paramref name="obj"/>.
                    </item>
            	</list>
            </remarks>
            
            <example>
                The following code example uses various comparison methods and operators: 
                <code lang="CS">
            TdTime  later = new TdTime(new TimeSpan(20, 30, 0));
            Object earlier = new TdTime(new TimeSpan(15, 21, 0));
             
            // The following comparison is equivalent to using
            //    false == TdTime.Equals(later, (TdTime) earlier)
            //    later != (TdTime) earlier
            //    true == TdTime.NotEquals(later, (TdTime) earlier)
            //    
            if (false == later.Equals(earlier))
            {
               Console.WriteLine(“later does not equal earlier”);
            }
                </code>
            </example>
            
            <overloads>Returns a value indicating whether two instances of TdTime are equal.</overloads>
            
            <param name="obj">TdTime instance that will be compared to this instance of TdTime.</param>
            
            <remarks>
            Refer to <see cref="M:Teradata.Client.Provider.TdTime.CompareTo(Teradata.Client.Provider.TdTime)"/> for more information on comparing
            TdTime values.
            </remarks>
        </member>
        <member name="M:Teradata.Client.Provider.TdTime.Equals(Teradata.Client.Provider.TdTime)">
            <summary>
            Compares this instance and another TdTime to determine whether they are equal. 
            </summary>
            
            <returns><c>true</c> if the two TdTime are equal, <c>false</c> otherwise.</returns>
            
            <remarks>
            	<para><c>false</c> will be returned if:</para>
            	<list type="bullet">
            		<item>
                        This instance or <paramref name="other"/> is <see cref="F:Teradata.Client.Provider.TdTime.Null"/>.
                    </item>
            		<item>
                        This instance is not equal to <paramref name="other"/>.
                    </item>
            	</list>
            	<para><c>true</c> will be returned if:</para>
            	<list type="bullet">
            		<item>
                        This instance and <paramref name="other"/> are <Strong>Null</Strong>.
                    </item>
            		<item>
                        This instance is equal to <paramref name="other"/>.
                    </item>
            	</list>
            </remarks>
            
            <param name="other">TdTime instance that will be compared to this instance 
            of TdTime.</param>
            
            <remarks>
            Refer to <see cref="M:Teradata.Client.Provider.TdTime.CompareTo(Teradata.Client.Provider.TdTime)"/> for more information about comparing
            TdTime values.
            </remarks>
        </member>
        <member name="M:Teradata.Client.Provider.TdTime.Compare(Teradata.Client.Provider.TdTime,Teradata.Client.Provider.TdTime)">
            <summary>
            Compares two instances of TdTime and returns a value indicating 
            whether <paramref name="left"/> is greater than, less than or equal to 
            <paramref name="right"/>.
            </summary>
            
            <returns>
            The result of the comparison is returned as an integer.
            </returns>
            
            <remarks>
            	<para>
                    The integer returned when <paramref name="left"/> is compared to <paramref name="right"/>
                    indicates the following:
                </para>
                <para>
            	<list type="table">
            		<listheader>
            			<term>Return Value</term>
            			<description>Meaning</description>
            		</listheader>
            		<item>
            			<term>Less than zero</term>
            			<description>
                            <para><paramref name="left"/> is less than <paramref name="right"/>.</para> 
                            <para>-or-</para>
                            <para><paramref name="left"/> is <see cref="F:Teradata.Client.Provider.TdTime.Null"/>.</para>
                        </description>
            		</item>
            		<item>
            			<term>Zero</term>
            			<description>
                            <para><paramref name="left"/> is equal to <paramref name="right"/>.</para>
                            <para>-or-</para>
                            <para><paramref name="left"/> and <paramref name="right"/> are <Strong>Null</Strong>.</para>
                        </description>
            		</item>
            		<item>
            			<term>Greater than zero</term>
            			<description>
                            <para><paramref name="left"/> is greater than <paramref name="right"/>.</para>
                            <para>-or-</para>
                            <para><paramref name="right"/> is <Strong>Null.</Strong></para>
                        </description>
            		</item>
            	</list>
                </para>
            
            <para>
            Refer to <see cref="M:Teradata.Client.Provider.TdTime.CompareTo(Teradata.Client.Provider.TdTime)"/> for more information on comparing
            TdTime values.
            </para>
            </remarks>
            
            <seealso cref="M:Teradata.Client.Provider.TdTime.CompareTo(Teradata.Client.Provider.TdTime)"/>
            
            <param name="left">An instance of TdTime.</param>
            <param name="right">An instance of TdTime.</param>
        </member>
        <member name="M:Teradata.Client.Provider.TdTime.Equals(Teradata.Client.Provider.TdTime,Teradata.Client.Provider.TdTime)">
            <summary>
                Compares two <see cref="T:Teradata.Client.Provider.TdTime"/> instances to determine whether they are
                equal.
            </summary>
            
            <returns>
            A boolean is returned that indicates the result of the comparison.
            </returns>
            
            <remarks>
            	<para>
            		The return value is <c>true</c> if the <paramref name="left"/> is 
                    equal to the <paramref name="right"/>, <c>false</c> otherwise.
                </para>
            	<para>
            		<list type="table">
            			<listheader>
            				<term>Return Value</term>
            				<description>Description</description>
            			</listheader>
            			<item>
            				<term><c>true</c></term>
                            <description>
                                <para><paramref name="left"/> and <paramref name="right"/> are <see cref="F:Teradata.Client.Provider.TdTime.Null"/></para> 
                                <para>-or-</para>
                                <para><paramref name="left"/> is equal to <paramref name="right"/>.</para>
                            </description>
            			</item>
            			<item>
            				<term><c>false</c></term>
                            <description>
                            <para><paramref name="left"/> or <paramref name="right"/> is <strong>Null</strong></para>
                            <para>-or-</para>
                            <para><paramref name="left"/> is not equal to <paramref name="right"/>.</para>
                            </description>
            			</item>
            		</list>
            	</para>
            </remarks>
            
            <example>
                The following code example uses various comparison methods and operators.
                <code lang="CS">
            TdTime later = new TdTime(new TimeSpan(15, 45, 0));
            TdTime earlier = new TdTime(new TimeSpan(14, 30, 0));
             
            // The following comparison methods and operators are equivalent
            if (false == TdTime.Equals(later, earlier) ||
                later != earlier ||
                true == TdTime.NotEquals(later, earlier) )
            {
               Console.WriteLine(“later does not equal earlier”);
            }
                </code>
            </example>
            
            <param name="left">A TdTime instance.</param>
            <param name="right">A TdTime instance.</param>
        </member>
        <member name="M:Teradata.Client.Provider.TdTime.NotEquals(Teradata.Client.Provider.TdTime,Teradata.Client.Provider.TdTime)">
            <summary>
            Compares two TdTime to determine whether the <paramref name="left"/> operand is 
            not equal to the <paramref name="right"/> operand.
            </summary>
            
            <returns>
            A boolean is returned that indicates the result of the comparison.
            </returns>
            
            <remarks>
            	<para>
            		The value returned is <c>true</c> if the <paramref name="left"/> is 
                    not equal to the <paramref name="right"/>, <c>false</c> otherwise.
                </para>
            	<para>
            		<list type="table">
            			<listheader>
            				<term>Return Value</term>
            				<description>Description</description>
            			</listheader>
            			<item>
            				<term><c>true</c></term>
                            <description>
                                <para><paramref name="left"/> or <paramref name="right"/> is <see cref="F:Teradata.Client.Provider.TdTime.Null"/></para> 
                                <para>-or-</para>
                                <para><paramref name="left"/> is less than or greater than <paramref name="right"/>.</para>
                            </description>
            			</item>
            			<item>
            				<term><c>false</c></term>
                            <description>
                            <para><paramref name="left"/> and <paramref name="right"/> are <strong>Null</strong></para>
                            <para>-or-</para>
                            <para><paramref name="left"/> is equal to <paramref name="right"/>.</para>
                            </description>
            			</item>
            		</list>
            	</para>
            </remarks>
            
            <param name="left">An instance of TdTime.</param>
            <param name="right">An instance of TdTime.</param>     
        </member>
        <member name="M:Teradata.Client.Provider.TdTime.GreaterThan(Teradata.Client.Provider.TdTime,Teradata.Client.Provider.TdTime)">
            <summary>
            Compares two TdTime to determine whether the <paramref name="left"/> operand is 
            greater than the <paramref name="right"/> operand.
            </summary>
            
            <returns>
            A boolean is returned that indicates the result of the comparison.
            </returns>
            
            <remarks>
            	<para>
            		<c>true</c> if the <paramref name="left"/> is greater
                    than the <paramref name="right"/>, <c>false</c> otherwise.
                </para>
            	<para>
            		<list type="table">
            			<listheader>
            				<term>Return Value</term>
            				<description>Description</description>
            			</listheader>
            			<item>
            				<term><c>true</c></term>
                            <description><paramref name="left"/> and <paramref name="right"/> are not <see cref="F:Teradata.Client.Provider.TdTime.Null"/> and
                            <paramref name="left"/> is greater than <paramref name="right"/>.
                            </description>
            			</item>
            			<item>
            				<term><c>false</c></term>
                            <description>
                            <para><paramref name="left"/> and / or <paramref name="right"/> is <strong>Null</strong> </para>
                            <para>-or-</para>
                            <para><paramref name="left"/> is less than or equal to <paramref name="right"/>.</para>
                            </description>
            			</item>
            		</list>
            	</para>
            
            <para>Comparison operators always returns <c>false</c> if one of the operands is <strong>Null</strong>. 
            Therefore, you must not assume that the reverse condition is <c>true</c>. For example you cannot 
            assume that the left operand is less than or equal to the right operand if the <c>GreaterThan</c> operator 
            returns <c>false</c>.</para> 
            
            </remarks>
            
            <param name="left">An instance of TdTime.</param>
            <param name="right">An instance of TdTime.</param>
        </member>
        <member name="M:Teradata.Client.Provider.TdTime.GreaterThanOrEqual(Teradata.Client.Provider.TdTime,Teradata.Client.Provider.TdTime)">
            <summary>
            Compares two TdTime to determine whether the <paramref name="left"/> operand is 
            greater than or equal to the <paramref name="right"/> operand.
            </summary>
            
            <returns>
            A boolean is returned that indicates the result of the comparison.
            </returns>
            
            <remarks>
            	<para>
            		<c>true</c> if the <paramref name="left"/> is greater
                    than or equal to the <paramref name="right"/>, <c>false</c> otherwise.
                </para>
            	<para>
            		<list type="table">
            			<listheader>
            				<term>Return Value</term>
            				<description>Description</description>
            			</listheader>
            			<item>
            				<term><c>true</c></term>
                            <description><paramref name="left"/> and <paramref name="right"/> are not <see cref="F:Teradata.Client.Provider.TdTime.Null"/> and
                            <paramref name="left"/> is greater than or equal to <paramref name="right"/>.
                            </description>
            			</item>
            			<item>
            				<term><c>false</c></term>
                            <description>
                            <para><paramref name="left"/> and / or <paramref name="right"/> is <strong>Null</strong> </para>
                            <para>-or-</para>
                            <para><paramref name="left"/> is less than <paramref name="right"/>.</para>
                            </description>
            			</item>
            		</list>
            	</para>
            
            <para>Comparison operators always returns <c>false</c> if one of the operands is <strong>Null</strong>. 
            Therefore, you must not assume that the reverse condition is <c>true</c>. For example you cannot 
            assume that the left operand is less than the right operand if <c>GreaterThanOrEqual</c> operator 
            returns <c>false</c>.</para> 
            </remarks>
            
            <param name="left">An instance of TdTime.</param>
            <param name="right">An instance of TdTime.</param>
        </member>
        <member name="M:Teradata.Client.Provider.TdTime.LessThan(Teradata.Client.Provider.TdTime,Teradata.Client.Provider.TdTime)">
            <summary>
            Compares two TdTime to determine whether the <paramref name="left"/> operand is 
            less than the <paramref name="right"/> operand.
            </summary>
            
            <returns>
            A boolean is returned that indicates the result of the comparison.
            </returns>
            
            <remarks>
            	<para>
            		The value returned is <c>true</c> if the <paramref name="left"/> is less
                    than the <paramref name="right"/>, <c>false</c> otherwise.
                </para>
            	<para>
            		<list type="table">
            			<listheader>
            				<term>Return Value</term>
            				<description>Description</description>
            			</listheader>
            			<item>
            				<term><c>true</c></term>
                            <description><paramref name="left"/> and <paramref name="right"/> are not <see cref="F:Teradata.Client.Provider.TdTime.Null"/> and
                            <paramref name="left"/> is less than <paramref name="right"/>.
                            </description>
            			</item>
            			<item>
            				<term><c>false</c></term>
                            <description>
                            <para><paramref name="left"/> and / or <paramref name="right"/> is <strong>Null</strong></para>
                            <para>-or-</para>
                            <para><paramref name="left"/> is greater than or equal to <paramref name="right"/>.</para>
                            </description>
            			</item>
            		</list>
            	</para>
            
            <para>Comparison operators always returns <c>false</c> if one of the operands is <strong>Null</strong>. 
            Therefore, you must not assume that the reverse condition is <c>true</c>. For example you cannot 
            assume that the left operand is greater than or equal the right operand if the <c>LessThan</c> operator 
            returns <c>false</c>.</para> 
            </remarks>
            
            <param name="left">An instance of TdTime.</param>
            <param name="right">An instance of TdTime.</param>
        </member>
        <member name="M:Teradata.Client.Provider.TdTime.LessThanOrEqual(Teradata.Client.Provider.TdTime,Teradata.Client.Provider.TdTime)">
            <summary>
            Compares two TdTime to determine whether the <paramref name="left"/> operand is 
            less than or equal to the <paramref name="right"/> operand.
            </summary>
            
            <returns>
            A boolean is returned that indicates the result of the comparison.
            </returns>
            
            <remarks>
            	<para>
            		The value returned is <c>true</c> if the <paramref name="left"/> is less
                    than or equal to the <paramref name="right"/>, <c>false</c> otherwise.
                </para>
            	<para>
            		<list type="table">
            			<listheader>
            				<term>Return Value</term>
            				<description>Description</description>
            			</listheader>
            			<item>
            				<term><c>true</c></term>
                            <description><paramref name="left"/> and <paramref name="right"/> are not <see cref="F:Teradata.Client.Provider.TdTime.Null"/> and
                            <paramref name="left"/> is less than or equal to <paramref name="right"/>.
                            </description>
            			</item>
            			<item>
            				<term><c>false</c></term>
                            <description>
                            <para><paramref name="left"/> and / or <paramref name="right"/> is <strong>Null</strong></para>
                            <para>-or-</para>
                            <para><paramref name="left"/> is greater than <paramref name="right"/>.</para>
                            </description>
            			</item>
            		</list>
            	</para>
            
            <para>Comparison operators always returns <c>false</c> if one of the operands is <strong>Null</strong>. 
            Therefore, you must not assume that the reverse condition is <c>true</c>. For example you cannot 
            assume that the left operand is greater than the right operand if the <c>LessThanOrEqual</c> operator 
            returns <c>false</c>.</para> 
            </remarks>
            
            <param name="left">An instance of TdTime.</param>
            <param name="right">An instance of TdTime.</param>
        </member>
        <member name="M:Teradata.Client.Provider.TdTime.op_Equality(Teradata.Client.Provider.TdTime,Teradata.Client.Provider.TdTime)">
            <summary>
            Compares two TdTimes to determine whether the <paramref name="left"/> operand is 
            equal to the <paramref name="right"/> operand.
            </summary>
            
            <returns>
            A boolean is returned that indicates the result of the comparison.
            </returns>
            
            <remarks>
            	<para>
            		The value returned is <c>true</c> if the <paramref name="left"/> is 
                    equal to the <paramref name="right"/>, <c>false</c> otherwise.
                </para>
            	<para>
            		<list type="table">
            			<listheader>
            				<term>Return Value</term>
            				<description>Description</description>
            			</listheader>
            			<item>
            				<term><c>true</c></term>
                            <description>
                                <para><paramref name="left"/> and <paramref name="right"/> are <see cref="F:Teradata.Client.Provider.TdTime.Null"/></para> 
                                <para>-or-</para>
                                <para><paramref name="left"/> is equal to <paramref name="right"/>.</para>
                            </description>
            			</item>
            			<item>
            				<term><c>false</c></term>
                            <description>
                            <para><paramref name="left"/> or <paramref name="right"/> is <strong>Null</strong></para>
                            <para>-or-</para>
                            <para><paramref name="left"/> is not equal to <paramref name="right"/>.</para>
                            </description>
            			</item>
            		</list>
            	</para>
            
            <para>Unlike comparison operators, Equality operators do not always return 
            <c>false</c> when left and right operands are <strong>Null</strong>. Therefore 
            the reverse condition can be considered <c>true</c>. TdTime implementation
            is very similar to the <see cref="T:System.Nullable"/> class in this regard.</para>
            
            <para>Refer to <see cref="M:Teradata.Client.Provider.TdTime.Equals(Teradata.Client.Provider.TdTime)"/> for further information
            on this equality operator.</para>
            </remarks>
            
            <param name="left">An instance of TdTime.</param>
            <param name="right">An instance of TdTime.</param>   
            
            <example>
            Following example shows that the Equality operator can safely be used in an if statement.
            <code>
            TdTime x = TdTime.Null;
            TdTime y = TdTime.MinValue;
            
            if (x == y)
            {
                // x is equal to y.
                Console.WriteLine(@"X is equal to Y").
            }
            else
            {
                // x is not equal y
                Console.WriteLine(@"X is not equal to Y").
            }
            
            y = TdTime.Null;
            
            if (x == y)
            {
                // x is equal to y.
                Console.WriteLine(@"X is equal to Y").
            }
            else
            {
                // x is not equal y
                Console.WriteLine(@"X is not equal to Y").
            }
            </code>
            </example>
        </member>
        <member name="M:Teradata.Client.Provider.TdTime.op_Inequality(Teradata.Client.Provider.TdTime,Teradata.Client.Provider.TdTime)">
            <summary>
            Compares two TdTimes to determine whether the <paramref name="left"/> operand is 
            not equal to the <paramref name="right"/> operand.
            </summary>
            
            <returns>
            A boolean is returned that indicates the result of the comparison.
            </returns>
            
            <remarks>
            	<para>
            		The value returned is <c>true</c> if the <paramref name="left"/> is 
                    not equal to the <paramref name="right"/>, <c>false</c> otherwise.
                </para>
            	<para>
            		<list type="table">
            			<listheader>
            				<term>Return Value</term>
            				<description>Description</description>
            			</listheader>
            			<item>
            				<term><c>true</c></term>
                            <description>
                                <para><paramref name="left"/> or <paramref name="right"/> is <see cref="F:Teradata.Client.Provider.TdTime.Null"/></para> 
                                <para>-or-</para>
                                <para><paramref name="left"/> is less than or greater than <paramref name="right"/>.</para>
                            </description>
            			</item>
            			<item>
            				<term><c>false</c></term>
                            <description>
                            <para><paramref name="left"/> and <paramref name="right"/> are <strong>Null</strong></para>
                            <para>-or-</para>
                            <para><paramref name="left"/> is equal to <paramref name="right"/>.</para>
                            </description>
            			</item>
            		</list>
            	</para>
            
            <para>
            Refer to <see cref="M:Teradata.Client.Provider.TdTime.NotEquals(Teradata.Client.Provider.TdTime,Teradata.Client.Provider.TdTime)"/> for further information on
            this inequality operator.
            </para>
            </remarks>
            
            <param name="left">An instance of TdTime.</param>
            <param name="right">An instance of TdTime.</param>        
        </member>
        <member name="M:Teradata.Client.Provider.TdTime.op_GreaterThan(Teradata.Client.Provider.TdTime,Teradata.Client.Provider.TdTime)">
            <summary>
            Compares two TdTime to determine whether the <paramref name="left"/> operand is 
            greater than the <paramref name="right"/> operand.
            </summary>
            
            <returns>
            A boolean is returned that indicates the result of the comparison.
            </returns>
            
            <remarks>
            	<para>
            		The value returned is <c>true</c> if the <paramref name="left"/> is greater
                    than the <paramref name="right"/>, <c>false</c> otherwise.
                </para>
            	<para>
            		<list type="table">
            			<listheader>
            				<term>Return Value</term>
            				<description>Description</description>
            			</listheader>
            			<item>
            				<term><c>true</c></term>
                            <description><paramref name="left"/> and <paramref name="right"/> are not <see cref="F:Teradata.Client.Provider.TdTime.Null"/> and
                            <paramref name="left"/> is greater than <paramref name="right"/>.
                            </description>
            			</item>
            			<item>
            				<term><c>false</c></term>
                            <description>
                            <para><paramref name="left"/> and / or <paramref name="right"/> is <strong>Null</strong> </para>
                            <para>-or-</para>
                            <para><paramref name="left"/> is less than or equal to <paramref name="right"/>.</para>
                            </description>
            			</item>
            		</list>
            	</para>
            
            <para>Comparison operators always returns <c>false</c> if one of the operands is <strong>Null</strong>. 
            Therefore, you must not assume that the reverse condition is <c>true</c>. For example you cannot 
            assume that the left operand is less than or equal to the right operand if the "<c>&gt;</c>" operator 
            returns <c>false</c>.</para> 
            
            <para>Refer to <see cref="M:Teradata.Client.Provider.TdTime.GreaterThan(Teradata.Client.Provider.TdTime,Teradata.Client.Provider.TdTime)"/> for further information on
            this inequality operator.</para>
            </remarks>
            
            <param name="left">An instance of TdTime.</param>
            <param name="right">An instance of TdTime.</param>
        </member>
        <member name="M:Teradata.Client.Provider.TdTime.op_GreaterThanOrEqual(Teradata.Client.Provider.TdTime,Teradata.Client.Provider.TdTime)">
            <summary>
            Compares two TdTimes to determine whether the <paramref name="left"/> operand is 
            greater than or equal to the <paramref name="right"/> operand.
            </summary>
            
            <returns>
            A boolean is returned that indicates the result of the comparison.
            </returns>
            
            <remarks>
            	<para>
            		<c>true</c> if the <paramref name="left"/> is greater
                    than or equal to the <paramref name="right"/>, <c>false</c> otherwise.
                </para>
            	<para>
            		<list type="table">
            			<listheader>
            				<term>Return Value</term>
            				<description>Description</description>
            			</listheader>
            			<item>
            				<term><c>true</c></term>
                            <description><paramref name="left"/> and <paramref name="right"/> are not <see cref="F:Teradata.Client.Provider.TdTime.Null"/> and
                            <paramref name="left"/> is greater than or equal to <paramref name="right"/>.
                            </description>
            			</item>
            			<item>
            				<term><c>false</c></term>
                            <description>
                            <para><paramref name="left"/> and / or <paramref name="right"/> is <strong>Null</strong> </para>
                            <para>-or-</para>
                            <para><paramref name="left"/> is less than <paramref name="right"/>.</para>
                            </description>
            			</item>
            		</list>
            	</para>
            
            <para>Comparison operators always returns <c>false</c> if one of the operands is <strong>Null</strong>. 
            Therefore, you must not assume that the reverse condition is <c>true</c>. For example you cannot 
            assume that the left operand is less than the right operand if the "<c>&gt;=</c>" operator 
            returns <c>false</c>.</para> 
            
            <para>Refer to <see cref="M:Teradata.Client.Provider.TdTime.GreaterThanOrEqual(Teradata.Client.Provider.TdTime,Teradata.Client.Provider.TdTime)"/> for further information on
            this inequality operator.</para>
            </remarks>
            
            <param name="left">An instance of TdTime.</param>
            <param name="right">An instance of TdTime.</param>
        </member>
        <member name="M:Teradata.Client.Provider.TdTime.op_LessThan(Teradata.Client.Provider.TdTime,Teradata.Client.Provider.TdTime)">
            <summary>
            Compares two TdTimes to determine whether the <paramref name="left"/> operand is 
            less than the <paramref name="right"/> operand.
            </summary>
            
            <returns>
            A boolean is returned that indicates the result of the comparison.
            </returns>
            
            <remarks>
            	<para>
            		The value returned is <c>true</c> if the <paramref name="left"/> is less
                    than the <paramref name="right"/>, <c>false</c> otherwise.
                </para>
            	<para>
            		<list type="table">
            			<listheader>
            				<term>Return Value</term>
            				<description>Description</description>
            			</listheader>
            			<item>
            				<term><c>true</c></term>
                            <description><paramref name="left"/> and <paramref name="right"/> are not <see cref="F:Teradata.Client.Provider.TdTime.Null"/> and
                            <paramref name="left"/> is less than <paramref name="right"/>.
                            </description>
            			</item>
            			<item>
            				<term><c>false</c></term>
                            <description>
                            <para><paramref name="left"/> and / or <paramref name="right"/> is <strong>Null</strong></para>
                            <para>-or-</para>
                            <para><paramref name="left"/> is greater than or equal to <paramref name="right"/>.</para>
                            </description>
            			</item>
            		</list>
            	</para>
            
            <para>Comparison operators always returns <c>false</c> if one of the operands is <strong>Null</strong>. 
            Therefore, you must not assume that the reverse condition is <c>true</c>. For example you cannot 
            assume that the left operand is greater than or equal the right operand if the "<c>&lt;</c>" operator 
            returns <c>false</c>.</para> 
            
            <para>Refer to <see cref="M:Teradata.Client.Provider.TdTime.LessThan(Teradata.Client.Provider.TdTime,Teradata.Client.Provider.TdTime)"/> for further information on
            this inequality operator.</para>
            </remarks>
            
            <param name="left">An instance of TdTime.</param>
            <param name="right">An instance of TdTime.</param>
        </member>
        <member name="M:Teradata.Client.Provider.TdTime.op_LessThanOrEqual(Teradata.Client.Provider.TdTime,Teradata.Client.Provider.TdTime)">
            <summary>
            Compares two TdTimes to determine whether the <paramref name="left"/> operand is 
            less than or equal to the <paramref name="right"/> operand.
            </summary>
            
            <returns>
            A boolean is returned that indicates the result of the comparison.
            </returns>
            <remarks>
            	<para>
            		The value returned is <c>true</c> if the <paramref name="left"/> is less
                    than or equal to the <paramref name="right"/>, <c>false</c> otherwise.
                </para>
            	<para>
            		<list type="table">
            			<listheader>
            				<term>Return Value</term>
            				<description>Description</description>
            			</listheader>
            			<item>
            				<term><c>true</c></term>
                            <description><paramref name="left"/> and <paramref name="right"/> are not <see cref="F:Teradata.Client.Provider.TdTime.Null"/> and
                            <paramref name="left"/> is less than or equal to <paramref name="right"/>.
                            </description>
            			</item>
            			<item>
            				<term><c>false</c></term>
                            <description>
                            <para><paramref name="left"/> and / or <paramref name="right"/> is <strong>Null</strong></para>
                            <para>-or-</para>
                            <para><paramref name="left"/> is greater than <paramref name="right"/>.</para>
                            </description>
            			</item>
            		</list>
            	</para>
            
            <para>Comparison operators always returns <c>false</c> if one of the operands is <strong>Null</strong>. 
            Therefore, you must not assume that the reverse condition is <c>true</c>. For example you cannot 
            assume that the left operand is greater than the right operand if the "<c>&lt;=</c>" operator 
            returns <c>false</c>.</para> 
            
            <para>Refer to <see cref="M:Teradata.Client.Provider.TdTime.LessThanOrEqual(Teradata.Client.Provider.TdTime,Teradata.Client.Provider.TdTime)"/> for further information on
            this inequality operator.</para>
            </remarks>
            
            <param name="left">An instance of TdTime.</param>
            <param name="right">An instance of TdTime.</param>
        </member>
        <member name="M:Teradata.Client.Provider.TdTime.Add(System.TimeSpan)">
            <summary>
            The specified TimeSpan will be added to this instance of TdTime.
            </summary>
            
            <param name="timeSpan">The TimeSpan that will be added.</param>
            
            <returns>A TdTime is returned that is the result of the TimeSpan added to this 
            instance of TdTime.</returns>
            
            <remarks>
            <para>If this instance of TdTime is <strong>Null</strong> a <see cref="F:Teradata.Client.Provider.TdTime.Null"/> will be returned.</para>
            
            <para>The TimeSpan object can contain data about the number of hours, 
            minutes, seconds, and sub-seconds.  If the time rolls into the next
            or previous day, the result will only contain the time component.  For example, 
            adding 2 hours to "23:54:00-08:00" will result in
            "01:54:00-08:00".</para>
            
            <para>If the scale between this instance of TdTime and the <paramref name="timeSpan"/> parameter are different
            the arithmetic operation will be performed using the different scales.  The result will then be
            <strong>truncated</strong> to match the scale of the time.  For example, the addition operation</para>
            
            <para><code>TdTime.Parse("12:48:53.2123") + TimeSpan.Parse("00:02:03.000099")</code></para>
            
            <para>results in a TdTime value of "12:50:56.2123".</para>
            
            <para>A <see cref="T:System.TimeSpan"/> can have a scale up to 7.  A TdTime has a maximum scale of 6.  
            When performing an arithmetic operation, only the first 6 digits to the right of the decimal
            point of the TimeSpan operand will be considered.  The 7th digit will be ignored.</para>
            </remarks>
        </member>
        <member name="M:Teradata.Client.Provider.TdTime.Add(Teradata.Client.Provider.TdIntervalDayToSecond)">
            <summary>
               Adds the specified <see cref="T:Teradata.Client.Provider.TdIntervalDayToSecond"/> to this instance of 
               <see cref="T:Teradata.Client.Provider.TdTime"/>.
            </summary>
            <returns>
               A <strong>TdTime</strong> is returned that is the result of adding the 
               <strong>TdIntervalDayToSecond</strong> to this instance of <strong>TdTime</strong>.
            </returns>
            <remarks>
            <para>
               If <paramref name="interval"/> or this instance of <strong>TdTime</strong> is 
               <strong>Null</strong> a <see cref="F:Teradata.Client.Provider.TdTime.Null"/> will be returned.        
            </para>
            <para>
               The <strong>TdIntervalDayToSecond</strong> interval will be added to this instance of
               <strong>TdTime</strong>. 
            </para>
            <para>
               The <strong>TdIntervalDayToSecond</strong> interval may contain data about the  
               number of days, hours, minutes, seconds, and sub-seconds.  The days will be discarded 
               during all calculations. If the time rolls into the next or previous day, the result will only 
               contain the time component.  For example, adding 2 hours to "23:54:00" 
               will result in a <strong>TdTime</strong> value of "01:54:00".
            </para>
            <para>
               If the scale between this instance of <strong>TdTime</strong> and the 
               <paramref name="interval"/> parameter are different, the arithmetic operation will be 
               performed using the different scales.  The result will then be truncated to match the
               scale of the <strong>TdTime</strong>.  For example, if the 
               <strong>TdIntervalDayToSecond</strong> value of "222 10:25:40.61234"
               (222 days, 10 hours, 25 minutes and 40.61234 seconds) is added to the
               <strong>TdTime</strong> value of "12:50:56.2123"
               the operation will result in a <strong>TdTime</strong> value 
               of "23:16:36.8246".
            </para>
            </remarks>
            <param name="interval">
               A <strong>TdIntervalDayToSecond</strong> that will be added to this 
               instance of <strong>TdTime</strong>.
            </param>
        </member>
        <member name="M:Teradata.Client.Provider.TdTime.Subtract(System.TimeSpan)">
            <summary>
            The specified TimeSpan will be subtracted from this instance of TdTime.
            </summary>
            
            <param name="timeSpan">The TimeSpan that will be subtracted.</param>
            
            <returns>A TdTime is returned that is the result of the TimeSpan subtracted from
            this instance of TdTime.</returns>
            
            <remarks>
            <para>If this instance of TdTime is <strong>Null</strong> a <see cref="F:Teradata.Client.Provider.TdTime.Null"/> will be returned.</para>
            
            <para>The TimeSpan object can contain data about the number of days, hours, minutes, 
            seconds, and sub-seconds.  If the time rolls into the next
            or previous day, the result will only contain the time component.  For example, 
            subtracting 2 hours from "01:54:00-08:00" will result in
            "23:54:00-08:00".</para>
            
            <para>If the scale between this instance of TdTime and the <paramref name="timeSpan"/> parameter are different
            the arithmetic operation will be performed using the different scales.  The result will then be
            <strong>truncated</strong> to match the scale of the time.  For example, the subtraction operation</para>
            
            <para><code>TdTime.Parse("12:48:53.2123") - TimeSpan.Parse("00:02:03.00009")</code></para>
            
            <para>results in a TdTime value of "12:46:50.2122".</para>
            
            <para>A <see cref="T:System.TimeSpan"/> can have a scale up to 7.  A TdTime has a maximum scale of 6.  
            When performing an arithmetic operation, only the first 6 digits to the right of the decimal
            point of the TimeSpan operand will be considered.  The 7th digit will be ignored.</para>
            
            </remarks>
        </member>
        <member name="M:Teradata.Client.Provider.TdTime.Subtract(Teradata.Client.Provider.TdIntervalDayToSecond)">
            <summary>
               Subtracts the specified <see cref="T:Teradata.Client.Provider.TdIntervalDayToSecond"/> from this instance of 
               <see cref="T:Teradata.Client.Provider.TdTime"/>.
            </summary>
            <returns>
               A <strong>TdTime</strong> is returned that is the result of subtracting the 
               <strong>TdIntervalDayToSecond</strong> from this instance of <strong>TdTime</strong>.
            </returns>
            <remarks>
            <para>
               If <paramref name="interval"/> or this instance of <strong>TdTime</strong> is 
               <strong>Null</strong> a <see cref="F:Teradata.Client.Provider.TdTime.Null"/> will be returned.        
            </para>
            <para>
               The <strong>TdIntervalDayToSecond</strong> interval will be subtracted from this 
               instance of <strong>TdTime</strong>. 
            </para>
            <para>
               The <strong>TdIntervalDayToSecond</strong> interval may contain data about the  
               number of days, hours, minutes, seconds, and sub-seconds.  The days will be discarded 
               during all calculations. If the time rolls into the next or previous day, the result will only 
               contain the time component.  For example, adding 2 hours to "23:54:00" 
               will result in a <strong>TdTime</strong> value of "01:54:00".
            </para>
            <para>
               If the scale between this instance of <strong>TdTime</strong> and the 
               <paramref name="interval"/> parameter are different, the arithmetic operation will be 
               performed using the different scales.  The result will then be truncated to match the
               scale of the <strong>TdTime</strong>.  For example, if the 
               <strong>TdIntervalDayToSecond</strong> value of "222 10:25:40.61234"
               (222 days, 10 hours, 25 minutes and 40.61234 seconds) is subtracted from the
               <strong>TdTime</strong> value of "12:50:56.2123"
               the operation will result in a <strong>TdTime</strong> value 
               of "02:25:15.5999".
            </para>
            </remarks>
            <param name="interval">
               A <strong>TdIntervalDayToSecond</strong> that will be subtracted from this 
               instance of <strong>TdTime</strong>.
            </param>
        </member>
        <member name="M:Teradata.Client.Provider.TdTime.op_Addition(Teradata.Client.Provider.TdTime,System.TimeSpan)">
            <summary>
            Adds the specified TimeSpan to a TdTime.
            </summary>
            
            <param name="time">A TdTime.</param>
            <param name="span">A TimeSpan that will be added to TdTime.</param>
            
            <returns>A TdTime is returned that is the result of adding the Timespan
            to TdTime.</returns>
            
            <remarks>
            <para>If the <paramref name="time"/> parameter is <strong>Null</strong> a <see cref="F:Teradata.Client.Provider.TdTime.Null"/> will be returned.</para>
            
            <para>If the scale between the <paramref name="time"/> and the <paramref name="span"/> parameters are different
            the arithmetic operation will be performed using the different scales.  The result will then be
            <strong>truncated</strong> to match the scale of the time.  For example, the addition operation</para>
            
            <para><code>TdTime.Parse("12:48:53.2123") + TimeSpan.Parse("00:02:03.000099")</code></para>
            
            <para>results in a TdTime value of "12:50:56.2123".</para>
            
            <para>A <see cref="T:System.TimeSpan"/> can have a scale up to 7.  A TdTime has a maximum scale of 6.  
            When performing an arithmetic operation, only the first 6 digits to the right of the decimal
            point of the TimeSpan operand will be considered.  The 7th digit will be ignored.</para>
            
            </remarks>
        </member>
        <member name="M:Teradata.Client.Provider.TdTime.op_Addition(Teradata.Client.Provider.TdTime,Teradata.Client.Provider.TdIntervalDayToSecond)">
            <summary>
               Adds the specified <see cref="T:Teradata.Client.Provider.TdIntervalDayToSecond"/> to a 
               <see cref="T:Teradata.Client.Provider.TdTime"/>.
            </summary>
            <returns>
               A <strong>TdTime</strong> is returned that is the result of adding the 
               <strong>TdIntervalDayToSecond</strong> to a <strong>TdTime</strong>.
            </returns>
            <remarks>
            <para>
               If <paramref name="interval"/> or <paramref name="time"/> is 
               <strong>Null</strong> a <see cref="F:Teradata.Client.Provider.TdTime.Null"/> will be returned.        
            </para>
            <para>
               The <strong>TdIntervalDayToSecond</strong> interval will be added to a
               <strong>TdTime</strong>. 
            </para>
            <para>
               The <strong>TdIntervalDayToSecond</strong> interval may contain data about the  
               number of days, hours, minutes, seconds, and sub-seconds.  The days will be discarded 
               during all calculations. If the time rolls into the next or previous day, the result will only 
               contain the time component.  For example, adding 2 hours to "23:54:00" 
               will result in a <strong>TdTime</strong> value of "01:54:00".
            </para>
            <para>
               If the scale between of <strong>TdTime</strong> and the 
               <paramref name="interval"/> parameter are different, the arithmetic operation will be 
               performed using the different scales.  The result will then be truncated to match the
               scale of the <strong>TdTime</strong>.  For example, if the 
               <strong>TdIntervalDayToSecond</strong> value of "222 10:25:40.61234"
               (222 days, 10 hours, 25 minutes and 40.61234 seconds) is added to the
               <strong>TdTime</strong> value of "12:50:56.2123"
               the operation will result in a <strong>TdTime</strong> value 
               of "23:16:36.8246".
            </para>
            </remarks>
            <param name="time">A <strong>TdTime</strong>.</param>
            <param name="interval">
               A <strong>TdIntervalDayToSecond</strong> that will be added to 
               <strong>TdTime</strong>.
            </param>
        </member>
        <member name="M:Teradata.Client.Provider.TdTime.op_Addition(Teradata.Client.Provider.TdIntervalDayToSecond,Teradata.Client.Provider.TdTime)">
            <summary>
               Adds the specified <see cref="T:Teradata.Client.Provider.TdIntervalDayToSecond"/> to a 
               <see cref="T:Teradata.Client.Provider.TdTime"/>.
            </summary>
            <returns>
               A <strong>TdTime</strong> is returned that is the result of adding the 
               <strong>TdIntervalDayToSecond</strong> to a <strong>TdTime</strong>.
            </returns>
            <remarks>
            <para>
               If <paramref name="interval"/> or <paramref name="time"/> is 
               <strong>Null</strong> a <see cref="F:Teradata.Client.Provider.TdTime.Null"/> will be returned.        
            </para>
            <para>
               The <strong>TdIntervalDayToSecond</strong> interval will be added to a
               <strong>TdTime</strong>. 
            </para>
            <para>
               The <strong>TdIntervalDayToSecond</strong> interval may contain data about the  
               number of days, hours, minutes, seconds, and sub-seconds.  The days will be discarded 
               during all calculations. If the time rolls into the next or previous day, the result will only 
               contain the time component.  For example, adding 2 hours to "23:54:00" 
               will result in a <strong>TdTime</strong> value of "01:54:00".
            </para>
            <para>
               If the scale between of <strong>TdTime</strong> and the 
               <paramref name="interval"/> parameter are different, the arithmetic operation will be 
               performed using the different scales.  The result will then be truncated to match the
               scale of the <strong>TdTime</strong>.  For example, if the 
               <strong>TdIntervalDayToSecond</strong> value of "222 10:25:40.61234"
               (222 days, 10 hours, 25 minutes and 40.61234 seconds) is added to the
               <strong>TdTime</strong> value of "12:50:56.2123"
               the operation will result in a <strong>TdTime</strong> value 
               of "23:16:36.8246".
            </para>
            </remarks>
            <param name="interval">
               A <strong>TdIntervalDayToSecond</strong> that will be added to 
               <strong>TdTime</strong>.
            </param>
            <param name="time">A <strong>TdTime</strong>.</param>
        </member>
        <member name="M:Teradata.Client.Provider.TdTime.op_Subtraction(Teradata.Client.Provider.TdTime,System.TimeSpan)">
            <summary>
            Subtracts the specified TimeSpan from a TdTime.
            </summary>
            
            <param name="time">A TdTime.</param>
            <param name="span">A TimeSpan that will be subtracted
            from the TdTime.</param>
            
            <returns>A TdTime is returned that is the result of subtracting the TimeSpan 
            from the TdTime.</returns>
            
            <remarks>
            <para>If the <paramref name="time"/> parameter is <strong>Null</strong> a <see cref="F:Teradata.Client.Provider.TdTime.Null"/> will be returned.</para>
            
            <para>If the scale between the <paramref name="time"/> and the <paramref name="span"/> parameters are different
            the arithmetic operation will be performed using the different scales.  The result will then be
            <strong>truncated</strong> to match the scale of the time.  For example, the subtraction operation</para>
            
            <para><code>TdTime.Parse("12:48:53.2123") - TimeSpan.Parse("00:02:03.00009")</code></para>
            
            <para>results in a TdTime value of "12:46:50.2122".</para>
            
            <para>A <see cref="T:System.TimeSpan"/> can have a scale up to 7.  A TdTime has a maximum scale of 6.  
            When performing an arithmetic operation, only the first 6 digits to the right of the decimal
            point of the TimeSpan operand will be considered.  The 7th digit will be ignored.</para>
            </remarks>
        </member>
        <member name="M:Teradata.Client.Provider.TdTime.op_Subtraction(Teradata.Client.Provider.TdTime,Teradata.Client.Provider.TdTime)">
            <summary>
            The time interval between two TdTimes is returned when the  
            TdTimes are subtracted from each other.
            </summary>
            
            <param name="leftOperand">The left TdTime operand.</param>
            <param name="rightOperand">The right TdTime operand.</param>
            
            <returns>A TimeSpan is returned that represents the time interval
            between the left and right TdTime.</returns>
            
            <exception cref="T:System.ArgumentNullException">One of the operands is <strong>Null</strong>.</exception>
        </member>
        <member name="M:Teradata.Client.Provider.TdTime.op_Subtraction(Teradata.Client.Provider.TdTime,Teradata.Client.Provider.TdIntervalDayToSecond)">
            <summary>
               Subtracts the specified <see cref="T:Teradata.Client.Provider.TdIntervalDayToSecond"/> from a 
               <see cref="T:Teradata.Client.Provider.TdTime"/>.
            </summary>
            <returns>
               A <strong>TdTime</strong> is returned that is the result of subtracting the 
               <strong>TdIntervalDayToSecond</strong> from a <strong>TdTime</strong>.
            </returns>
            <remarks>
            <para>
               If <paramref name="interval"/> or <paramref name="time"/> is 
               <strong>Null</strong> a <see cref="F:Teradata.Client.Provider.TdTime.Null"/> will be returned.        
            </para>
            <para>
               The <strong>TdIntervalDayToSecond</strong> interval will be subtracted from a
               <strong>TdTime</strong>. 
            </para>
            <para>
               The <strong>TdIntervalDayToSecond</strong> interval may contain data about the  
               number of days, hours, minutes, seconds, and sub-seconds.  The days will be discarded 
               during all calculations. If the time rolls into the next or previous day, the result will only 
               contain the time component.  For example, adding 2 hours to "23:54:00" 
               will result in a <strong>TdTime</strong> value of "01:54:00".
            </para>
            <para>
               If the scale between of <strong>TdTime</strong> and the 
               <paramref name="interval"/> parameter are different, the arithmetic operation will be 
               performed using the different scales.  The result will then be truncated to match the
               scale of the <strong>TdTime</strong>.  For example, if the 
               <strong>TdIntervalDayToSecond</strong> value of "222 10:25:40.61234"
               (222 days, 10 hours, 25 minutes and 40.61234 seconds) is subtracted from a
               <strong>TdTime</strong> value of "12:50:56.2123"
               the operation will result in a <strong>TdTime</strong> value 
               of "02:25:15.5999".
            </para>
            </remarks>
            <param name="time">A <strong>TdTime</strong>.</param>
            <param name="interval">
               A <strong>TdIntervalDayToSecond</strong> that will be added to 
               <strong>TdTime</strong>.
            </param>
        </member>
        <member name="M:Teradata.Client.Provider.TdTime.ToTimeSpan">
            <summary>
            Converts this instance of TdTime into a TimeSpan.
            </summary>
            
            <exception cref="T:Teradata.Client.Provider.TdException">This instance of TdTime is <see cref="F:Teradata.Client.Provider.TdTime.Null"/>.</exception>
            
            <returns>A TimeSpan is returned that is equivalent to this instance of TdTime.</returns>
        </member>
        <member name="M:Teradata.Client.Provider.TdTime.ToString">
            <summary>
            The TdTime is converted to an equivalent String representation.
            </summary>
            
            <returns>The string representation of TdTime is returned.</returns>
            
            <remarks>
            <para>The string representation of the timestamp will be in the format:  "HH:mm:ss.ffffff".
            For example, 23:12:45.0023.</para>
            
            <para>The number of digits that will appear in the sub-seconds is dependent
            on the <see cref="P:Teradata.Client.Provider.TdTime.Scale"/>.  For example, if the Scale is set to 4, four digits will appear 
            in the fractional component.</para>
            
            <para>If this instance is <see cref="F:Teradata.Client.Provider.TdTime.Null"/>, a string that contains the value "Null" 
            is returned.</para>
            </remarks>
        </member>
        <member name="M:Teradata.Client.Provider.TdTime.ToString(System.IFormatProvider)">
            <summary>
            The TdTime is converted to the equivalent ANSI string representation.
            </summary>
            
            <param name="provider">An IFormatProvider that contains the culture specific formatting information.  This parameter is ignored.</param>
            
            <returns>The ANSI string representation of TdTime is returned.</returns>
            
            <remarks>
            <para>By default this method converts this instance of TdTime using the "G" format specifier 
            (see <see cref="M:Teradata.Client.Provider.TdTime.ToString(System.String)"/>)-- the ANSI string representation.  </para>
            
            <para>The cultural information specified in the <paramref name="provider"/> parameter is ignored.</para>
            
            <para>The ANSI string representation of the time will be in the format:  
            "HH:mm:ss.ffffff".
            For example, 23:12:45.0023.</para>
            
            <para>The number of digits that will appear in the sub-seconds is dependent
            on the <see cref="P:Teradata.Client.Provider.TdTime.Scale"/>.  For example, if the Scale is set to 4, four digits will appear 
            in the fractional component.</para>
            
            <para>If this instance is <see cref="F:Teradata.Client.Provider.TdTime.Null"/>, a string that contains the value "Null" 
            is returned.</para>
            </remarks>
        </member>
        <member name="M:Teradata.Client.Provider.TdTime.ToString(System.String)">
            <summary>
            TdTime is converted to the equivalent String using the specified format.
            </summary>
            
            <param name="format">The format string that will be used to format the TdTime.</param>
            
            <returns>A string representation of the date in TdTime.</returns>
            
            <remarks>
            <para>If the format parameter is null, the format of the string representation of the 
            time will be "HH:mm.ffffff;.</para>
            
            <para>The format specifiers that will be supported are as follows:
            </para>
            <list type="table">
            <listheader>
            <term>Format Specifier</term>
            <description>Description</description>
            </listheader>
            <item>
            <term>G</term>
            <description>
            <para>The ANSI representation of the time.  "HH:mm:ss.ffffff". </para>
            
            <para>Cultural information is ignored in this conversion.</para>
            
            <para>The number of digits that will appear in the fractional seconds is dependent
            on the <see cref="P:Teradata.Client.Provider.TdTime.Scale"/>.  For example, if the Scale is set to 4, four digits will appear 
            in the fraction.</para>
            </description>
            </item>
            <item>
            <term>l or L</term>
            <description>The Teradata literal representation of Time.</description>
            </item>
            <item>
            <term>t</term>
            <description>The short time pattern --"h:mm tt"</description>
            </item>
            <item>
            <term>T</term>
            <description>The long time patterm --"h:mm:ss tt"</description>
            </item>
            </list>
            
            <para>If this instance is <see cref="F:Teradata.Client.Provider.TdTime.Null"/>, a string that contains the value "Null" 
            is returned.</para>
            
            <para>For additional information about the supported format specifiers refer to 
            <see cref="T:System.Globalization.DateTimeFormatInfo"/> contained in the MSDN documentation.
            </para>
            </remarks>
        </member>
        <member name="M:Teradata.Client.Provider.TdTime.ToString(System.String,System.IFormatProvider)">
            <summary>
            TdTime is converted into the equivalent String representation using the 
            specified format and culture information.
            </summary>
            
            <param name="format">The format string that will be used to format the TdTime.</param>
            <param name="formatProvider">The culture specific information used to generate the string equivalent of TdTime.</param>
            
            <returns>A string representation of the date in TdTime.</returns>
            
            <remarks>
            <para>If the format parameter is null, the format of the string representation of the 
            timestamp will be "HH:mm:ss.ffffff;.  In addition, the number of 
            digits that will appear in the fractional seconds is dependent on the <see cref="P:Teradata.Client.Provider.TdTime.Scale"/>.  
            For example, if the Scale is set to 4, four digits will appear 
            in the fraction.</para>
            
            <para>If this instance is <see cref="F:Teradata.Client.Provider.TdTime.Null"/>, a string that contains the value "Null" 
            is returned.</para>
            
            <para>The format specifiers that are supported are listed in 
            <see cref="M:Teradata.Client.Provider.TdTime.ToString(System.String)"/>.  For additional information about the 
            supported format specifiers refer to 
            <see cref="T:System.Globalization.DateTimeFormatInfo"/> contained in the MSDN documentation.
            </para>
            </remarks>
        </member>
        <member name="M:Teradata.Client.Provider.TdTime.Parse(System.String)">
            <summary>
            The specified string is converted into an equivalent TdTime.  
            </summary>
            
            <param name="value">The string that is to be converted into a TdTime.</param>
            
            <returns>A TdTime is returned that is equivalent to the time 
            contained in the value string.</returns>
            
            <exception cref="T:System.ArgumentNullException">Value is a null reference.</exception>
            <exception cref="T:System.FormatException">Value does not contain a valid representation of a time.</exception>
            
            <remarks>
            <para>The string is parsed using the culture information contained in the specified 
            <see cref="T:System.Globalization.DateTimeFormatInfo"/> object.</para>
            
            <para>If the time contains sub-seconds, the separator that <strong>must</strong> be used in
            the string is a <strong>decimal point</strong> (".").  For example, in the string
            "10:21:22<strong>.2321</strong>" the sub-seconds is separated from the 
            number of seconds using a decimal point.</para>
            
            <para>When the <paramref name="value"/> is parsed the <see cref="P:Teradata.Client.Provider.TdTime.Scale"/> will be set to 
            the number of digits in the sub-seconds component (digits that are to the right of the 
            decimal point).  Therefore, a TdTime of "12:32:11.0000" will have a Scale of 4, 
            and "23:43:22.121000" will have a scale of 6.</para>
            
            <para>An attempt is made to avoid throwing a FormatException.  Any unrecognized characters in 
            the string will be ignored.  An exception to this is the case when
            the number of digits to the right of the decimal point exceed the <strong>maximum scale</strong> 
            of 6.  If the number of digits exceed the maximum scale, a FormatException will get thrown.
            Trailing zeroes are ignored.</para>
            
            <para>However, when a custom culture is used it is possible that the Parse will 
            fail.  A times string that contains custom culture specific date elements is very
            difficult to parse.  The string may not match any of the implicit patterns that
            are used to parse a string.</para>
            
            <para>If the <paramref name="value"/> contains the string "NULL" a <see cref="F:Teradata.Client.Provider.TdTime.Null"/>
            will be returned.</para>
            </remarks>
        </member>
        <member name="M:Teradata.Client.Provider.TdTime.Parse(System.String,System.IFormatProvider)">
            <summary>
            The specified string is converted into an equivalent TdTime.  
            </summary>
            
            <param name="value">The string that is to be converted into a TdTime.</param>
            <param name="provider">An IFormatProvider that supplies culture specific information 
            about the format of value.</param>
            
            <returns>A TdTime is returned that is equivalent to the time 
            contained in the value string.</returns>
            
            <exception cref="T:System.ArgumentNullException">Value is a null reference.</exception>
            <exception cref="T:System.FormatException">Value does not contain a valid representation of a time.</exception>
            
            <remarks>
            <para>The string is parsed using the culture information contained in the specified 
            <see cref="T:System.Globalization.DateTimeFormatInfo"/> object.</para>
            
            <para>If the time contains sub-seconds, the separator that <strong>must</strong> be used in
            the string is a <strong>decimal point</strong> (".").  For example, in the string
            "10:21:22<strong>.2321</strong>" the sub-seconds is separated from the 
            number of seconds using a decimal point.</para>
            
            <para>When the <paramref name="value"/> is parsed the <see cref="P:Teradata.Client.Provider.TdTime.Scale"/> will be set to 
            the number of digits in the sub-seconds component (digits that are to the right of the 
            decimal point).  Therefore, a TdTime of "12:32:11.0000" will have a Scale of 4, 
            and "23:43:22.121000" will have a scale of 6.</para>
            
            <para>An attempt is made to avoid throwing a FormatException.  Any unrecognized characters in 
            the string will be ignored.  An exception to this is the case when
            the number of digits to the right of the decimal point exceed the <strong>maximum scale</strong> 
            of 6.  If the number of digits exceed the maximum scale, a FormatException will get thrown.
            Trailing zeroes are ignored.</para>
            
            <para>However, when a custom culture is used it is possible that the Parse will 
            fail.  A timestamp string that contains custom culture specific date elements is very
            difficult to parse.  The string may not match any of the implicit patterns that
            are used to parse a string.</para>
            
            <para>If the <paramref name="value"/> contains the string "NULL" a <see cref="F:Teradata.Client.Provider.TdTime.Null"/>
            will be returned.</para>
            
            </remarks>
        </member>
        <member name="M:Teradata.Client.Provider.TdTime.TryParse(System.String,Teradata.Client.Provider.TdTime@)">
            <summary>
            A time contained in a string is converted to a TdTime representation.
            </summary>
            
            <param name="value">The string that contains the time representation.</param>
            <param name="result">The TdTime representation of the time contained in the specified string.</param>
            
            <returns>A Boolean is returned that indicates the success of the conversion.  
            <c>true</c> indicates that the conversion was successful and that the conversion is 
            returned through the result parameter.  <c>false</c> indicates that the conversion 
            failed. </returns>
            
            <remarks>
            <para>TryParse is the same as Parse except that an exception does not get thrown 
            when the conversion fails.</para>
            
            <para>Formatting information contained in the DateTimeFormatInfo object is used to 
            parse the string.</para>
            
            <para>If the string is either null or empty, a <see cref="F:Teradata.Client.Provider.TdTime.Null"/>
            is returned.</para>
            
            <para>If the conversion fails the result parameter will be set to <see cref="F:Teradata.Client.Provider.TdTime.MinValue"/>.</para>
            
            <para>For more information refer to <see cref="M:Teradata.Client.Provider.TdTime.Parse(System.String)"/>.</para>
            </remarks>
        </member>
        <member name="M:Teradata.Client.Provider.TdTime.TryParse(System.String,System.IFormatProvider,Teradata.Client.Provider.TdTime@)">
            <summary>
            A time contained in a string is converted to a TdTime representation.
            </summary>
            
            <param name="value">The string that contains the time representation.</param>
            <param name="provider">An IFormatProvider that supplies culture specific information 
            about the format of value.</param>
            <param name="result">The TdTime representation of the time contained in the specified string.</param>
            
            <returns>A Boolean is returned that indicates the success of the conversion.  
            <c>true</c> indicates that the conversion was successful and that the conversion is 
            returned through the result parameter.  <c>false</c> indicates that the conversion 
            failed. </returns>
            
            <remarks>
            <para>TryParse is the same as Parse except that an exception does not get thrown 
            when the conversion fails.</para>
            
            <para>Formatting information contained in the DateTimeFormatInfo object is used to 
            parse the string.</para>
            
            <para>If the string is either null or empty, a <see cref="F:Teradata.Client.Provider.TdTime.Null"/>
            is returned.</para>
            
            <para>If the conversion fails the result parameter will be set to <see cref="F:Teradata.Client.Provider.TdTime.MinValue"/>.</para>
            
            <para>For more information refer to <see cref="M:Teradata.Client.Provider.TdTime.Parse(System.String,System.IFormatProvider)"/>.</para>
            </remarks>
            
            <seealso cref="M:Teradata.Client.Provider.TdTime.Parse(System.String,System.IFormatProvider)"/>
        </member>
        <member name="M:Teradata.Client.Provider.TdTime.GetXmlSchema(System.Xml.Schema.XmlSchemaSet)">
             <summary>
             Specifies the XML Qualified name for <strong>TdTime</strong> XML type mapping.
             </summary>
             
             <param name="xmlSchemaSet">Holds zero or more XML Schema definition language (XSD) schemas.</param>
             
             <returns>
             Returns <strong>xs:dateTime</strong>.
             </returns>
             
             <example>
             This examples shows how to use <strong>TdTime</strong> with <see cref="T:System.Xml.Serialization.XmlSerializer"/> class.
             <see cref="T:System.Xml.Serialization.XmlElementAttribute"/> is used to indicate that the Teradata Database column can be <strong>Null</strong>.
             <code>
              public class Order
              {
                  public TdTime AtTime;
            
                  public Int32 ProductId;
            
                  public Int32 Quantity;
            
                  public Int32? BackOrderQuantity;
            
                  [XmlElementAttribute(IsNullable = true)]        
                  public TdDecimal BackOrderPrice;
              }
             
              internal class OrderWriter
              {
              
                  public static void Write()
                  {
                      // Setup the order
                      Order x = new Order();
              
                      x.AtTime = new TdTime(new TimeSpan(20, 12, 34));
                      x.ProductId = 100;
                      x.Quantity = 2000;
                      x.BackOrderQuantity = null;
                      x.BackOrderPrice = TdDecimal.Null;
            
                      // Write out today's orders to the file.
                      //
                      // Open the file.
                      XmlWriterSettings settings = new XmlWriterSettings();
                      settings.Indent = true;
                      XmlWriter writer = XmlWriter.Create(@"C:\Temp\TodayOrders.XML", settings);
                      writer.WriteStartElement("TodayOrders");
                
                      // Write out the schema.
                      XmlSchemas schemas = new XmlSchemas();
                      XmlSchemaExporter schExporter = new XmlSchemaExporter(schemas);
                      schExporter.ExportTypeMapping(new XmlReflectionImporter().ImportTypeMapping(typeof(Order)));
                      schemas[0].Write(writer);
            
                      // Write out the orders.
                      XmlSerializer xml = new XmlSerializer(typeof(Order));
                      xml.Serialize(writer, x);
              
                      // Close the document.
                      writer.WriteEndDocument();
                      writer.Close();
                  }
              }
             
              /* Output is:
             
              &lt;TodayOrders&gt;
                &lt;xs:schema elementFormDefault="qualified" xmlns:xs="http://www.w3.org/2001/XMLSchema"&gt;
                  &lt;xs:element name="Order" nillable="true" type="Order" /&gt;
                  &lt;xs:complexType name="Order"&gt;
                    &lt;xs:sequence&gt;
                      &lt;xs:element minOccurs="1" maxOccurs="1" name="AtTime" type="xs:time" /&gt;
                      &lt;xs:element minOccurs="1" maxOccurs="1" name="ProductId" type="xs:int" /&gt;
                      &lt;xs:element minOccurs="1" maxOccurs="1" name="Quantity" type="xs:int" /&gt;
                      &lt;xs:element minOccurs="1" maxOccurs="1" name="BackOrderQuantity" nillable="true" type="xs:int" /&gt;
                      &lt;xs:element minOccurs="1" maxOccurs="1" name="BackOrderPrice" nillable="true" type="xs:decimal" /&gt;
                    &lt;/xs:sequence&gt;
                  &lt;/xs:complexType&gt;
                &lt;/xs:schema&gt;
                &lt;Order xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xmlns:xsd="http://www.w3.org/2001/XMLSchema"&gt;
                  &lt;AtTime&gt;20:12:34&lt;/AtTime&gt;
                  &lt;ProductId&gt;100&lt;/ProductId&gt;
                  &lt;Quantity&gt;2000&lt;/Quantity&gt;
                  &lt;BackOrderQuantity xsi:nil="true" /&gt;
                  &lt;BackOrderPrice xsi:nil="true" /&gt;
                &lt;/Order&gt;
              &lt;/TodayOrders&gt;
             
              */
             </code>
             </example>        
        </member>
        <member name="P:Teradata.Client.Provider.TdTime.ObjectId">
            <summary>
            Gets the Instance Object Identifier.
            </summary>
        </member>
        <member name="P:Teradata.Client.Provider.TdTime.IsNull">
            <summary>
            Indicates whether this TdTime instance is <see cref="F:Teradata.Client.Provider.TdTime.Null"/>. 
            </summary>
            
            <value>
            <c>true</c> if this TdTime is Null; <c>false</c> otherwise.
            </value>
        </member>
        <member name="P:Teradata.Client.Provider.TdTime.Hour">
            <summary>
            The hour of the time component in this instance of TdTime is returned.
            </summary>
            
            <value>The hour represented using 24-hour time is returned.</value>
            
            <exception cref="T:Teradata.Client.Provider.TdException">This instance is <see cref="F:Teradata.Client.Provider.TdTime.Null"/>.</exception>
            
            <remarks>
            The value that is returned represents the hour of the time component.  TdTime
            does not take into account the day light savings time.  What has been entered as the hour
            of the time component, is returned from the property.
            </remarks>
        </member>
        <member name="P:Teradata.Client.Provider.TdTime.Minute">
            <summary>
            The number of minutes contained in the time component of this instance of
            TdTime.
            </summary>
            
            <value>The minutes of the time is returned.</value>
            
            <exception cref="T:Teradata.Client.Provider.TdException">This instance is <see cref="F:Teradata.Client.Provider.TdTime.Null"/>.</exception>
        </member>
        <member name="P:Teradata.Client.Provider.TdTime.Second">
            <summary>
            The number of seconds contained in the time component in this 
            instance of TdTime is returned.
            </summary>
            
            <value>The seconds of the time is returned.</value>
            
            <exception cref="T:Teradata.Client.Provider.TdException">This instance is <see cref="F:Teradata.Client.Provider.TdTime.Null"/>.</exception>
        </member>
        <member name="P:Teradata.Client.Provider.TdTime.Microsecond">
            <summary>
            The sub-seconds contained in the time component is returned in microseconds.
            </summary>
            
            <value>The microseconds of the time is returned.  It will contain up to <see cref="P:Teradata.Client.Provider.TdTime.Scale"/> digits.</value>
            
            <exception cref="T:Teradata.Client.Provider.TdException">This instance is <see cref="F:Teradata.Client.Provider.TdTime.Null"/>.</exception>
            
            <remarks>
            <para>Teradata only supports up to 6 digits in the fractional portion
            of a second.   Therefore, TdTime also support 6 digits
            in the sub-seconds. This is represented as a Microsecond.  One microsecond is 
            equivalent to 10^-6 of a second. </para>
            
            <para>The following are examples of the fraction that is returned for
            a given time:</para>
            
            <list type="table">
            <listheader>
            <term>Time</term>
            <description>Microsecond Property</description>
            </listheader>
            <item>
            <term>23:59:59.999999, scale = 6</term>
            <description>999999</description>
            </item>
            <item>
            <term>12:45:00.349000, scale = 6</term>
            <description>349000</description>
            </item>
            <item>
            <term>12:45:00.34900, scale = 5</term>
            <description>349000</description>
            </item>
            <item>
            <term>12:45:00.3490, scale = 4</term>
            <description>349000</description>
            </item>
            <item>
            <term>12:45:00.349, scale = 3</term>
            <description>349000</description>
            </item>
            <item>
            <term>20:31:07.020000,  scale = 6</term>
            <description>20000</description>
            </item>
            <item>
            <term>20:31:07.0200,  scale = 4</term>
            <description>200000</description>
            </item>
            <item>
            <term>00:10:01.00090,  scale = 5</term>
            <description>900</description>
            </item>
            </list>
            </remarks>
        </member>
        <member name="P:Teradata.Client.Provider.TdTime.Value">
            <summary>
            Gets the TimeSpan representation of this TdTime instance.
            </summary>
            
            <value>The time represented as a <see cref="T:System.TimeSpan"/> is returned.</value>
            
            <exception cref="T:Teradata.Client.Provider.TdException">This instance is <see cref="F:Teradata.Client.Provider.TdTime.Null"/>.</exception>
        </member>
        <member name="P:Teradata.Client.Provider.TdTime.Scale">
            <summary>
            Returns the scale of this instance of TdTime.
            </summary>
            
            <value>The scale of the time is returned.</value>
            
            <exception cref="T:Teradata.Client.Provider.TdException">This instance is <see cref="F:Teradata.Client.Provider.TdTime.Null"/>.</exception>
        </member>
        <member name="T:Teradata.Client.Provider.TdTimestamp">
             <summary>
             TdTimestamp is a .Net Data Provider for Teradata specific type that 
             represents a timestamp that is based on the Gregorian Calendar.
             </summary>
             <remarks>
             <para>The .Net Framework system type directly corresponds to the Teradata type
             <strong>Timestamp</strong>.  Therefore, the .Net Data Provider for Teradata 
             Version 1.2 and earlier versions map Timestamp to System.DateTime.</para>
             
             <para>The Provider Specific Types for Date And Time that are supported in 
             the release of version 12.0 of the provider makes available custom types that 
             directly correspond to Teradata Date And Time Types.  Although System.DateTime
             maps directly to Teradata Timestamp, a provider specific type will be provided
             to applications that will also map to Timestamp called <strong>TdTimestamp</strong>.</para>
             
             <para>The main difference between TdTimestamp and System.DateTime is that TdTimestamp
             contains a scale that is associated with the sub-second component of the timestamp.  This
             directly corresponds with the Teradata Timestamp data type.</para>
             
             <para>TdTimestamp also supports <see cref="F:Teradata.Client.Provider.TdTimestamp.Null"/>.  This is a very important feature.
             An application is no longer required to call <see cref="M:Teradata.Client.Provider.TdDataReader.IsDBNull(System.Int32)"/> before
             invoking the corresponding TdDataReader "Get" method.  This will improve
             overall performance.</para>
             
             <para>The <see cref="P:Teradata.Client.Provider.TdTimestamp.Scale"/> can range from 0 to 6.  This is similar to Teradata 
             Database's Timestamp type.  The sub-seconds is specified as a <see cref="P:Teradata.Client.Provider.TdTimestamp.Microsecond"/>.
             The Microsecond and Scale are specified in the
             constructor.  An example of a timestamp is "2001-12-10 15:31:11.0021".
             This timestamp has a Microsecond of "2100", and a Scale of "4".</para>
             
             <para>When a TdTimestamp is parsed (see <see cref="M:Teradata.Client.Provider.TdTimestamp.Parse(System.String,System.IFormatProvider)"/>) the
             scale of the resulting TdTimestamp will be set to the actual scale of the 
             fractional component of the timestamp.</para>
             
             <para>When data of a column that is a Timestamp is retrieved as a TdTimestamp,
             it's scale will be set to the scale of the column.</para>
             
             <para>The TdTimestamp structure allows arithmetic, comparison, and conversion operations to be
             performed.</para>
             
             <para>A TdTimestamp value can also be specified as an In, Out, or InOut parameter to a Stored 
             Procedure.  In order to maintain backward compatibility with previous versions of the 
             provider --versions earlier than 12.0--, the Connection String Attribute 
             <a href="TdDateAndTimeConnectionString.htm"><strong>Enable TdDateTime</strong></a> 
             must be set to <c>false</c>.  When this is done, a TdTimestamp is  
             returned to an application using the <see cref="P:Teradata.Client.Provider.TdParameter.ProviderSpecificValue"/> property.
             The object that is returned from the <see cref="P:Teradata.Client.Provider.TdParameter.Value"/> property remains a 
             System.DateTime.</para> 
             
             <para>If the attribute <strong>Enable TdDateTime</strong> is set to <c>true</c> a TdTimestamp 
             <strong>is</strong> returned to the application through the TdParameter.Value.</para>
             </remarks>
             
             <example>
             <para>The following example calls a stored procedure that returns a timestamp as an output parameter.  
             The procedure that is called has the signature</para>
             <para>
             <code>
             	TimeEnrolledInClass(IN studentId VARCHAR(9), IN classId VARCHAR(9),  
                 OUT timeEnrolled TIMESTAMP)
             </code>
             </para>
             
             <code>
             Public void TimeExample(TdCommand cmd, String studentId, String classId)
             {
                cmd.Parameters.Clear();
               
                cmd.CommandText = "TimeEnrolledInClass";
                cmd.CommandType = CommandType.StoredProcedure;
            
                cmd.Parameters.Add(null, TdType.Varchar, 9,
                     System.Data.ParameterDirection.Input, true, 0, 0, null,    
                     System.Data.DataRowVersion.Default, studentId);
            
                cmd.Parameters.Add(null, TdType.Varchar, 9,
                     System.Data.ParameterDirection.Input, true, 0, 0, null,    
                     System.Data.DataRowVersion.Default, classId);
            
                cmd.Parameters.Add(null, TdType.Timestamp, 0,
                     System.Data.ParameterDirection.Output, true, 0, 0, null,    
                     System.Data.DataRowVersion.Default, null);
            
                cmd.ExecuteNonQuery();
            
                // Using TdTimestam to get the time that the student enrolled 
                // in the class
                TdTimestamp timeEnrolled = (TdTimestamp)cmd.Parameters[2].ProviderSpecificValue;
             
                // Going to add 5 days to the time Enrolled.
                TdTimestamp newTime = timeEnrolled + new TimeSpan(5, 0, 0);
             
                // going to typecast the newTime to a TdDate
                TdDate dateEnrolled = (TdDate)timeEnrolled;
             
                // going to print out the timeEnrolled to the console
                Console.WriteLine("Time enrolled {0}", timeEnrolled);
             
                // going to convert the timeEnrolled to a String
                String enrolled = timeEnrolled.ToString();
             }
             </code>    
             </example>
             
             <seealso cref="!:TdDateAndTimeConnectionString.html">Date And Time Connection String Attribute</seealso>
             <seealso cref="!:EnableProviderSpecificTypes.html">Enabling Provider Specific Types</seealso>
             <seealso cref="!:DateAndTimeTypeOverview.html">Provider Specific Type:  Date And Time Overview</seealso>
        </member>
        <member name="F:Teradata.Client.Provider.TdTimestamp.MaxValue">
            <summary>
            The largest possible value of TdTimestamp.  This field is read-only.
            </summary>
            <remarks>
            The largest possible value of TdTimestamp is equivalent to 
            <strong>9999-12-31 23:59:59.999999</strong>.
            </remarks>
        </member>
        <member name="F:Teradata.Client.Provider.TdTimestamp.MinValue">
            <summary>
            The smallest possible value of TdTimestamp.  This field is read-only.
            </summary>
            <remarks>
            The smallest possible value of TdTimestamp is equivalent to 
            <strong>0001-01-01 00:00:00</strong>.
            </remarks>
        </member>
        <member name="F:Teradata.Client.Provider.TdTimestamp.Null">
            <summary>
            Gets a Null TdTimestamp instance.
            </summary>
            <value>
            Returns a TdTimestamp instance that represents a <strong>Null</strong> value.
            </value>
            <remarks>
            Conceptually it is the constructor for <strong>Null</strong> TdTimestamp instances.
            </remarks>
            <example>
            This example shows how to send a <strong>Null</strong> value to a Teradata database.
            <code>
            TdParameter col1 = new TdParameter();
            col1.TdType = TdType.Timestamp;
            col1.Value = TdTimestamp.Null;
            </code>
            </example>
        </member>
        <member name="M:Teradata.Client.Provider.TdTimestamp.#ctor(System.Int32,System.Int32,System.Int32)">
            <summary>
            TdTimestamp is created from the date components specified as integers.
            </summary>
            
            <param name="year">The year of the specified date.  Valid values are 0001-9999.</param>
            <param name="month">The month of the specified date.  Valid values are 01-12.</param>
            <param name="day">The day of the specified date. Valid values are 1-31.</param>
            
            <exception cref="T:System.ArgumentOutOfRangeException">One of the date components is out of range.</exception>
            
            <remarks>
            <para>The Time components will be filled in with "00:00:00".</para>
            </remarks>
        </member>
        <member name="M:Teradata.Client.Provider.TdTimestamp.#ctor(System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32)">
            <summary>
            TdTimestamp is created from the date and time components specified as integers.
            </summary>
            
            <param name="year">The year of the specified timestamp.  Valid values are 0001-9999.</param>
            <param name="month">The month of the specified timestamp.  Valid values are 01-12.</param>
            <param name="day">The day of the specified timestamp. Valid values are 1-31.</param>
            <param name="hour">The hour of the specified timestamp. Valid values are 0-23.</param>
            <param name="minute">The minute of the specified timestamp.  Valid values are 0-59.</param>
            <param name="second">The second of the specified timestamp. Valid values are 0-59.</param>
            
            <exception cref="T:System.ArgumentOutOfRangeException">A date or time component is not in the valid range.</exception>
            
            <remarks>
            <para>The scale will default to the minimum scale of 0.</para>
            </remarks>
        </member>
        <member name="M:Teradata.Client.Provider.TdTimestamp.#ctor(System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32)">
            <summary>
            An instance of TdTimestamp is created from the date and time components 
            specified as integers.
            </summary>
            
            <param name="year">The year of the specified timestamp.  Valid values are 0001-9999.</param>
            <param name="month">The month of the specified timestamp.  Valid values are 01-12.</param>
            <param name="day">The day of the specified timestamp. Valid values are 1-31.</param>
            <param name="hour">The hour of the specified timestamp. Valid values are 0-23.</param>
            <param name="minute">The minute of the specified timestamp.  Valid values are 0-59.</param>
            <param name="second">The second of the specified timestamp. Valid values are 0-59.</param>
            <param name="microsecond">The number of microseconds.</param>
            
            <exception cref="T:System.ArgumentOutOfRangeException">A date or time component is not in the valid range.</exception>
            
            <remarks>
            <para>A microsecond is 10^-6 of a second (.000001).  </para>
            
            <para>The scale will default to the scale of the microsecond.</para>
            
            <para>When the TdTimestamp is created, the microsecond parameter will be divided by 
            10^6 to create the fractional component of TdTimestamp.  For example, if 231 
            were passed in as the microsecond, the fractional component will 
            be set to ".000231", and the scale will be 6.</para> 
            </remarks>
        </member>
        <member name="M:Teradata.Client.Provider.TdTimestamp.#ctor(System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32)">
            <summary>
            An instance of TdTimestamp is created from the date and time components specified as integers.
            </summary>
            
            <param name="year">The year of the specified timestamp.  Valid values are 0001-9999.</param>
            <param name="month">The month of the specified timestamp.  Valid values are 01-12.</param>
            <param name="day">The day of the specified timestamp. Valid values are 1-31.</param>
            <param name="hour">The hour of the specified timestamp. Valid values are 0-23.</param>
            <param name="minute">The minute of the specified timestamp.  Valid values are 0-59.</param>
            <param name="second">The second of the specified timestamp. Valid values are 0-59.</param>
            <param name="microsecond">The number of microseconds.</param>
            <param name="scale">The scale of the timestamp.  Valid values are 0-6.</param>
            
            <exception cref="T:System.ArgumentOutOfRangeException">A date or time component is not in the valid range.</exception>
            
            <remarks>
            <para>A microsecond is 10^-6 of a second (.000001).  </para>
            
            <para>When the TdTimestamp is created, the microsecond parameter will first be divided by 
            10^6 --this corresponds to a microsecond.  Then this fractional portion of the timestamp
            will be truncated at the position specified by the scale.  For example, if "231" 
            were passed in as the microsecond and 6 as the scale, the fraction component will 
            be set to ".000231".  However, if the microsecond is 23145 and the scale is 
            3, the fractional component will be ".023"</para> 
            </remarks>
        </member>
        <member name="M:Teradata.Client.Provider.TdTimestamp.#ctor(System.DateTime)">
            <summary>
            Initializes a new instance of TdTimestamp using the specified
            DateTime structure.
            </summary>
            
            <param name="dateTime">The DateTime structure that will be used to build the date and time components.</param>
            
            <remarks>
            <para>The DateTimeKind property will be ignored when the time components of the 
            TdTimestamp structure is initialized with the time components 
            from the DateTime structure.  Therefore, adjustments will not be made for
            local time.</para>
            
            <para>The DateTime structure can contain a fraction of a second that is
            up to seven digits.  Teradata can only support a fraction that is 6 digits.
            Therefore, if the DateTime structure contains a fraction of a second that
            contains more than 6 digits, it will be truncated after the sixth
            position.</para>
            
            <para>The scale will default to the number of digits contained in the 
            fractional component of the DateTime structure.  The maximum value it will be
            set to is 6.</para>
            </remarks>
        </member>
        <member name="M:Teradata.Client.Provider.TdTimestamp.#ctor(System.DateTime,System.Int32)">
            <summary>
            Initializes a new instance of TdTimestamp using the specified
            DateTime structure.
            </summary>
            
            <param name="dateTime">The DateTime structure that will be used to build the date and time components.</param>
            <param name="scale">The scale of the timestamp.  The scale can range from 0 - 6.</param>
            
            <exception cref="T:System.ArgumentOutOfRangeException">The scale is not between 0 and 6.</exception>
            
            <remarks>
            <para>The DateTimeKind property will be ignored when the time components of the 
            TdTimestamp structure is initialized with the time components 
            from the DateTime structure.  Therefore, adjustments will not be made for
            local time.</para>
            
            <para>If the fraction contained in the DateTime structure contains more digits
            than what has been specified in the <paramref name="scale"/>, the fraction will
            be truncated to match the scale.</para>
            </remarks>
        </member>
        <member name="M:Teradata.Client.Provider.TdTimestamp.op_Explicit(Teradata.Client.Provider.TdDate)~Teradata.Client.Provider.TdTimestamp">
            <summary>
            The TdDate is converted into a TdTimestamp.
            </summary>
            
            <param name="value">The TdDate that is to be converted.</param>
            
            <returns>A TdTimestamp is returned.</returns>
            
            <remarks>
            <para>The time component of the timestamp will be set to "00:00:00.000000".</para>
            
            <para>If the TdDate <paramref name="value"/> is <see cref="F:Teradata.Client.Provider.TdDate.Null"/> a <see cref="F:Teradata.Client.Provider.TdTimestamp.Null"/>
            is returned.</para>
            </remarks>
            
        </member>
        <member name="M:Teradata.Client.Provider.TdTimestamp.op_Explicit(System.DateTime)~Teradata.Client.Provider.TdTimestamp">
            <summary>
            A DateTime value is converted into a TdTimestamp.
            </summary>
            
            <param name="value">The DateTime value that is to be converted.</param>
            
            <returns>A TdTimestamp is returned that is equivalent to the DateTime value.</returns>
            
            <remarks>
            If the sub-second component of the Datetime contains more than 6 digits, the 
            sub-seconds will be truncated when the DateTime is converted into a TdDate.  For example,
            when a DateTime value of &quot;2007-10-31 10:12:00.3245431&quot; is converted into a TdTimestamp
            the sub-second component, &quot;.324531&quot; will be truncated to &quot;324543&quot;.  The resulting
            TdTimestamp is &quot;2007-10-31 10:12:00.23453&quot;.
            </remarks>
        </member>
        <member name="M:Teradata.Client.Provider.TdTimestamp.op_Explicit(Teradata.Client.Provider.TdTimestamp)~System.DateTime">
            <summary>
            A TdTimestamp value is converted into a System.DateTime.
            </summary>
            
            <param name="value">The TdTimestamp value that is to be converted.</param>
            
            <returns>
            <para>A System.DateTime is returned that is equivalent to the TdTimestamp value.</para>
            </returns>
            
            <exception cref="T:System.ArgumentNullException">The TdTimestamp value is <see cref="F:Teradata.Client.Provider.TdTimestamp.Null"/>.</exception>
        </member>
        <member name="M:Teradata.Client.Provider.TdTimestamp.op_Explicit(Teradata.Client.Provider.TdTimestamp)~Teradata.Client.Provider.TdPeriodTimestamp">
            <summary>
            Converts a TdTimestamp into a TdPeriodTimestamp.
            </summary>
            
            <param name="value">The TdTimestamp that is to be converted.</param>
            
            <returns>a TdPeriodTimestamp is returned that has a beginning bound of 
            <paramref name="value"/> and ending bound that is one time granule
            greater than value.</returns>
            
            <exception cref="T:System.ArgumentOutOfRangeException">The ending bound could not be created because 
            the <paramref name="value"/> is set to <see cref="F:Teradata.Client.Provider.TdTimestamp.MaxValue"/></exception>
            
            <remarks>
            <para>A TdTimestamp can be cast to a TdPeriodTimestamp.  The beginning bounds of the 
            period will be <paramref name="value"/>, and the ending bound will be
            the value plus one time granule.</para>
            
            <para>The time granule is dependent upon the
            scale of the value.  For example, if the scale of value is 0 the time granule 
            is 1 second.  If the scale is 6 the time granule is 1 microsecond. </para>
            
            <para>The scale of the period will be the same as that of value.</para>
            
            <para>The following are examples of the result of casting a TdTimestamp 
            to a TdPeriodTimestamp:</para>
            
            <para>
            <list type="table">
            <listheader>
            <term>TdTimestamp</term>
            <description>TdPeriodTimestamp</description>
            <item>
            <term>0001-01-01 00:00:00</term>
            <description>(0001-01-01 00:00:00, 0001-01-01 00:00:01</description>
            </item>
            <item>
            <term>2001-12-31 23:59:59.00001</term>
            <description>(2001-12-31 23:59:59.00001, 2001-12-31 23:59:59.00002)</description>
            </item>
            <item>
            <term>5021-12-31 23:59:59.9</term>
            <description>(5021-12-31 23:59:59.9, 5022-01-01 00:00:00.0)</description>
            </item>
            </listheader>
            </list>
            </para>
            </remarks>
        </member>
        <member name="M:Teradata.Client.Provider.TdTimestamp.CompareTo(Teradata.Client.Provider.TdTimestamp)">
            <summary>
            Compares this instance to the specified TdTimestamp <paramref name="other"/>. 
            </summary>
            
            <returns>
            The result of the comparison is returned as an integer.
            </returns>
            
            <remarks>
            	<para>
                    The integer returned when this instance is compared to <paramref name="other"/>
                    indicates the following:
                </para>
            	<para>
            		<list type="table">
            			<listheader>
            				<term>Return Value</term>
            				<description>Meaning</description>
            			</listheader>
            			<item>
            				<term>Less than Zero</term>
            				<description>
            					<para>
                                    This instance is less than <paramref name="other"/>.
                                </para>
            					<para>-or-</para>
            					<para>This instance is <see cref="F:Teradata.Client.Provider.TdTimestamp.Null"/>.</para>
            				</description>
            			</item>
            			<item>
            				<term>Zero</term>
            				<description>
            					<para>
                                    This instance is equal to <paramref name="other"/>.
                                </para>
            					<para>-or-</para>
            					<para>This instance is <Strong>Null</Strong> and value is <Strong>Null</Strong>.</para>
            				</description>
            			</item>
            			<item>
            				<term>Greater than Zero</term>
            				<description>
            					<para>
                                    This instance is greater than
                                    <paramref name="other"/>.
                                </para>
            					<para>-or-</para>
            					<para>
            						<paramref name="other"/> is <Strong>Null</Strong>.
                                </para>
            				</description>
            			</item>
            		</list>
            	</para>
            </remarks>
            
            <param name="other">The TdTimestamp to compare against.</param>
        </member>
        <member name="M:Teradata.Client.Provider.TdTimestamp.CompareTo(System.Object)">
            <summary>
            Compares this instance to the specified TdTimestamp <paramref name="obj"/>. 
            </summary>
            
            <returns>
            The result of the comparison is returned as an integer.
            </returns>
            
            <remarks>
            	<para>
                    The integer returned when this instance is compared to <paramref name="obj"/>
                    indicates the following:
                </para>
            	<para>
            		<list type="table">
            			<listheader>
            				<term>Return Value</term>
            				<description>Meaning</description>
            			</listheader>
            			<item>
            				<term>Less than Zero</term>
            				<description>
            					<para>This instance is less than <paramref name="obj"/>.</para>
            					<para>-or-</para>
            					<para>This instance is <see cref="F:Teradata.Client.Provider.TdTimestamp.Null"/>.</para>
            				</description>
            			</item>
            			<item>
            				<term>Zero</term>
            				<description>
            					<para>
                                    This instance is equal to <paramref name="obj"/>.
                                </para>
            					<para>-or-</para>
            					<para>This instance is <Strong>Null</Strong> and <paramref name="obj"/> is <Strong>Null</Strong>.</para>
            				</description>
            			</item>
            			<item>
            				<term>Greater than Zero</term>
            				<description>
            					<para>
                                    This instance is greater than <paramref name="obj"/>.
                                </para>
            					<para>-or-</para>
            					<para>
            						<paramref name="obj"/> is <Strong>Null</Strong> or a <c>null</c> reference.
                                </para>
            				</description>
            			</item>
            		</list>
            	</para>
            
              <para><paramref name="obj"/> must be an instance of TdTimestamp type or <c>null</c> reference.</para>
            </remarks>
            
            <exception cref="T:System.ArgumentException"><paramref name="obj"/> is not of type TdTimestamp</exception>
            
            <seealso cref="M:Teradata.Client.Provider.TdTimestamp.CompareTo(Teradata.Client.Provider.TdTimestamp)"/>
            
            <overloads>
            Compares this instance to the supplied object and returns whether it is less
            than, equal or greater than the supplied object.
            </overloads>
            
            <param name="obj">TdTimestamp instance to compare against.</param>
        </member>
        <member name="M:Teradata.Client.Provider.TdTimestamp.GetHashCode">
            <summary>
            Returns the hash code for this instance. 
            </summary>
            
            <returns>The hash code is returned</returns>
        </member>
        <member name="M:Teradata.Client.Provider.TdTimestamp.Equals(System.Object)">
            <summary>
                Compares this instance and <paramref name="obj"/> to determine whether they are equal.
            </summary>
            
            <returns><c>true</c> is returned if the two TdTimestamp are equal, <c>false</c> otherwise.</returns>
            
            <remarks>
                <para>The boolean that is returned indicates the following conditions:</para>
            
            	<para><c>false</c> will be returned if:</para>
            	<list type="bullet">
            		<item>
                        This instance or <paramref name="obj"/> is <see cref="F:Teradata.Client.Provider.TdTimestamp.Null"/>.
                    </item>
            		<item>
                        This instance is not equal to <paramref name="obj"/>.
                    </item>
            		<item>
            			<paramref name="obj"/> is not of type TdTimestamp or <c>null</c>.
                    </item>
            	</list>
            	<para><c>true</c> will be returned if:</para>
            	<list type="bullet">
            		<item>
                        This instance and <paramref name="obj"/> are <Strong>Null</Strong>.
                    </item>
            		<item>
                        This instance is equal to <paramref name="obj"/>.
                    </item>
            	</list>
            </remarks>
            
            <example>
                The following code example uses various comparison methods and operators: 
                <code lang="CS">
            TdTimestamp  later = new TdTimestamp(new DateTime(2010, 8, 31, 23, 30, 0));
            Object earlier = new TdTimestamp(new DateTime(2010, 8, 31, 15, 21, 0));
             
            // The following comparison is equivalent to using
            //    false == TdTimestamp.Equals(later, (TdTimestamp) earlier)
            //    later != (TdTimestamp) earlier
            //    true == TdTimestamp.NotEquals(later, (TdTimestamp) earlier)
            //    
            if (false == later.Equals(earlier))
            {
               Console.WriteLine(“later does not equal earlier”);
            }
                </code>
            </example>
            
            <overloads>Returns a value indicating whether two instances of TdTimestamp are equal.</overloads>
            
            <param name="obj">TdTimestamp instance that will be compared to this instance of TdTimestamp.</param>
        </member>
        <member name="M:Teradata.Client.Provider.TdTimestamp.Equals(Teradata.Client.Provider.TdTimestamp)">
            <summary>
            Compares this instance and another TdTimestamp to determine whether they are equal. 
            </summary>
            
            <returns><c>true</c> if the two TdTimestamp are equal, <c>false</c> otherwise.</returns>
            
            <remarks>
                <para>The boolean that is returned indicates the following conditions</para>
            
            	<para><c>false</c> will be returned if:</para>
            	<list type="bullet">
            		<item>
                        This instance or <paramref name="other"/> is <see cref="F:Teradata.Client.Provider.TdTimestamp.Null"/>.
                    </item>
            		<item>
                        This instance is not equal to <paramref name="other"/>.
                    </item>
            	</list>
            	<para><c>true</c> will be returned if:</para>
            	<list type="bullet">
            		<item>
                        This instance and <paramref name="other"/> are <Strong>Null</Strong>.
                    </item>
            		<item>
                        This instance is equal to <paramref name="other"/>.
                    </item>
            	</list>
            </remarks>
            
            <param name="other">TdTimestamp instance that will be compared to this instance of TdTimestamp.</param>
        </member>
        <member name="M:Teradata.Client.Provider.TdTimestamp.Compare(Teradata.Client.Provider.TdTimestamp,Teradata.Client.Provider.TdTimestamp)">
            <summary>
            Compares two instances of TdTimestamp and returns a value indicating 
            whether <paramref name="left"/> is greater than, less than or equal to 
            <paramref name="right"/>.
            </summary>
            
            <returns>
            The result of the comparison is returned as an integer.
            </returns>
            
            <remarks>
            	<para>
                    The integer returned when <paramref name="left"/> is compared to <paramref name="right"/>
                    indicates the following:
                </para>
            
                <para>
            	<list type="table">
            		<listheader>
            			<term>Return Value</term>
            			<description>Meaning</description>
            		</listheader>
            		<item>
            			<term>Less than zero</term>
            			<description>
                            <para><paramref name="left"/> is less than <paramref name="right"/>.</para> 
                            <para>-or-</para>
                            <para><paramref name="left"/> is <see cref="F:Teradata.Client.Provider.TdTimestamp.Null"/>.</para>
                        </description>
            		</item>
            		<item>
            			<term>Zero</term>
            			<description>
                            <para><paramref name="left"/> is equal to <paramref name="right"/>.</para>
                            <para>-or-</para>
                            <para><paramref name="left"/> and <paramref name="right"/> are <Strong>Null</Strong>.</para>
                        </description>
            		</item>
            		<item>
            			<term>Greater than zero</term>
            			<description>
                            <para><paramref name="left"/> is greater than <paramref name="right"/>.</para>
                            <para>-or-</para>
                            <para><paramref name="right"/> is <Strong>Null.</Strong></para>
                        </description>
            		</item>
            	</list>
                </para>
            </remarks>
            
            <seealso cref="M:Teradata.Client.Provider.TdTimestamp.CompareTo(Teradata.Client.Provider.TdTimestamp)"/>
            
            <param name="left">An instance of TdTimestamp.</param>
            <param name="right">An instance of TdTimestamp.</param>
        </member>
        <member name="M:Teradata.Client.Provider.TdTimestamp.Equals(Teradata.Client.Provider.TdTimestamp,Teradata.Client.Provider.TdTimestamp)">
            <summary>
                Compares two <see cref="T:Teradata.Client.Provider.TdTimestamp"/> instances to determine whether they are
                equal.
            </summary>
            
            <returns>
            A boolean is returned that indicates the result of the comparison.
            </returns>
            
            <remarks>
            	<para>
            		The value that is returned is <c>true</c> if the <paramref name="left"/> is 
                    equal to the <paramref name="right"/>, <c>false</c> otherwise.
                </para>
            	<para>
            		<list type="table">
            			<listheader>
            				<term>Return Value</term>
            				<description>Description</description>
            			</listheader>
            			<item>
            				<term><c>true</c></term>
                            <description>
                                <para><paramref name="left"/> and <paramref name="right"/> are <see cref="F:Teradata.Client.Provider.TdTimestamp.Null"/></para> 
                                <para>-or-</para>
                                <para><paramref name="left"/> is equal to <paramref name="right"/>.</para>
                            </description>
            			</item>
            			<item>
            				<term><c>false</c></term>
                            <description>
                            <para><paramref name="left"/> or <paramref name="right"/> is <strong>Null</strong></para>
                            <para>-or-</para>
                            <para><paramref name="left"/> is not equal to <paramref name="right"/>.</para>
                            </description>
            			</item>
            		</list>
            	</para>
            </remarks>
            
            <example>
                The following code example uses various comparison methods and operators.
                <code lang="CS">
            TdTimestamp  later = new TdTimestamp(new DateTime(2010, 8, 31, 23, 45, 0));
            TdTimestamp earlier = new TdTimestamp(new DateTime(2010, 8, 31, 20, 30, 0));
             
            // The following comparison methods and operators are equivalent
            if (false == TdTimestamp.Equals(later, earlier) ||
                later != earlier ||
                true == TdTimestamp.NotEquals(later, earlier) )
            {
               Console.WriteLine(“later does not equal earlier”);
            }
                </code>
            </example>
            
            <param name="left">A TdTimestamp instance.</param>
            <param name="right">A TdTimestamp instance.</param>
        </member>
        <member name="M:Teradata.Client.Provider.TdTimestamp.NotEquals(Teradata.Client.Provider.TdTimestamp,Teradata.Client.Provider.TdTimestamp)">
            <summary>
            Compares two TdTimestamp to determine whether the <paramref name="left"/> operand is 
            not equal to the <paramref name="right"/> operand.
            </summary>
            
            <returns>
            A boolean is returned that indicates the result of the comparison.
            </returns>
            
            <remarks>
            	<para>
            		The value that is returned is <c>true</c> if the <paramref name="left"/> is 
                    not equal to the <paramref name="right"/>, <c>false</c> otherwise.
                </para>
            	<para>
            		<list type="table">
            			<listheader>
            				<term>Return Value</term>
            				<description>Description</description>
            			</listheader>
            			<item>
            				<term><c>true</c></term>
                            <description>
                                <para><paramref name="left"/> or <paramref name="right"/> is <see cref="F:Teradata.Client.Provider.TdTimestamp.Null"/></para> 
                                <para>-or-</para>
                                <para><paramref name="left"/> is less than or greater than <paramref name="right"/>.</para>
                            </description>
            			</item>
            			<item>
            				<term><c>false</c></term>
                            <description>
                            <para><paramref name="left"/> and <paramref name="right"/> are <strong>Null</strong></para>
                            <para>-or-</para>
                            <para><paramref name="left"/> is equal to <paramref name="right"/>.</para>
                            </description>
            			</item>
            		</list>
            	</para>
            </remarks>
            
            <param name="left">An instance of TdTimestamp.</param>
            <param name="right">An instance of TdTimestamp.</param>        
        </member>
        <member name="M:Teradata.Client.Provider.TdTimestamp.GreaterThan(Teradata.Client.Provider.TdTimestamp,Teradata.Client.Provider.TdTimestamp)">
            <summary>
            Compares two TdTimestamp to determine whether the <paramref name="left"/> operand is 
            greater than the <paramref name="right"/> operand.
            </summary>
            
            <returns>
            A boolean is returned that indicates the result of the comparison.
            </returns>
            
            <remarks>
            	<para>
            		The value returned is <c>true</c> if the <paramref name="left"/> is greater
                    than the <paramref name="right"/>, <c>false</c> otherwise.
                </para>
            	<para>
            		<list type="table">
            			<listheader>
            				<term>Return Value</term>
            				<description>Description</description>
            			</listheader>
            			<item>
            				<term><c>true</c></term>
                            <description><paramref name="left"/> and <paramref name="right"/> are not <see cref="F:Teradata.Client.Provider.TdTimestamp.Null"/> and
                            <paramref name="left"/> is greater than <paramref name="right"/>.
                            </description>
            			</item>
            			<item>
            				<term><c>false</c></term>
                            <description>
                            <para><paramref name="left"/> and / or <paramref name="right"/> is <strong>Null</strong> </para>
                            <para>-or-</para>
                            <para><paramref name="left"/> is less than or equal to <paramref name="right"/>.</para>
                            </description>
            			</item>
            		</list>
            	</para>
            
            <para>Comparison operators always returns <c>false</c> if one of the operands is <strong>Null</strong>. 
            Therefore, you must not assume that the reverse condition is <c>true</c>. For example you cannot 
            assume that the left operand is less than or equal to the right operand if the <c>GreaterThan</c> operator 
            returns <c>false</c>.</para> 
            </remarks>
            
            <param name="left">An instance of TdTimestamp.</param>
            <param name="right">An instance of TdTimestamp.</param>
        </member>
        <member name="M:Teradata.Client.Provider.TdTimestamp.GreaterThanOrEqual(Teradata.Client.Provider.TdTimestamp,Teradata.Client.Provider.TdTimestamp)">
            <summary>
            Compares two TdTimestamp to determine whether the <paramref name="left"/> operand is 
            greater than or equal to the <paramref name="right"/> operand.
            </summary>
            
            <returns>
            A boolean is returned that indicates the result of the comparison.
            </returns>
            
            <remarks>
            	<para>
            		The value returned is <c>true</c> if the <paramref name="left"/> is greater
                    than or equal to the <paramref name="right"/>, <c>false</c> otherwise.
                </para>
            	<para>
            		<list type="table">
            			<listheader>
            				<term>Return Value</term>
            				<description>Description</description>
            			</listheader>
            			<item>
            				<term><c>true</c></term>
                            <description><paramref name="left"/> and <paramref name="right"/> are not <see cref="F:Teradata.Client.Provider.TdTimestamp.Null"/> and
                            <paramref name="left"/> is greater than or equal to <paramref name="right"/>.
                            </description>
            			</item>
            			<item>
            				<term><c>false</c></term>
                            <description>
                            <para><paramref name="left"/> and / or <paramref name="right"/> is <strong>Null</strong> </para>
                            <para>-or-</para>
                            <para><paramref name="left"/> is less than <paramref name="right"/>.</para>
                            </description>
            			</item>
            		</list>
            	</para>
            
            <para>Comparison operators always returns <c>false</c> if one of the operands is <strong>Null</strong>. 
            Therefore, you must not assume that the reverse condition is <c>true</c>. For example you cannot 
            assume that the left operand is less than the right operand if <c>GreaterThanOrEqual</c> operator 
            returns <c>false</c>.</para> 
            </remarks>
            
            <param name="left">An instance of TdTimestamp.</param>
            <param name="right">An instance of TdTimestamp.</param>
        </member>
        <member name="M:Teradata.Client.Provider.TdTimestamp.LessThan(Teradata.Client.Provider.TdTimestamp,Teradata.Client.Provider.TdTimestamp)">
            <summary>
            Compares two TdTimestamps to determine whether the <paramref name="left"/> operand is 
            less than the <paramref name="right"/> operand.
            </summary>
            
            <returns>
            A boolean is returned that indicates the result of the comparison.
            </returns>
            
            <remarks>
            	<para>
            		The value returned is <c>true</c> if the <paramref name="left"/> is less
                    than the <paramref name="right"/>, <c>false</c> otherwise.
                </para>
            	<para>
            		<list type="table">
            			<listheader>
            				<term>Return Value</term>
            				<description>Description</description>
            			</listheader>
            			<item>
            				<term><c>true</c></term>
                            <description><paramref name="left"/> and <paramref name="right"/> are not <see cref="F:Teradata.Client.Provider.TdTimestamp.Null"/> and
                            <paramref name="left"/> is less than <paramref name="right"/>.
                            </description>
            			</item>
            			<item>
            				<term><c>false</c></term>
                            <description>
                            <para><paramref name="left"/> and / or <paramref name="right"/> is <strong>Null</strong></para>
                            <para>-or-</para>
                            <para><paramref name="left"/> is greater than or equal to <paramref name="right"/>.</para>
                            </description>
            			</item>
            		</list>
            	</para>
            
            <para>Comparison operators always returns <c>false</c> if one of the operands is <strong>Null</strong>. 
            Therefore, you must not assume that the reverse condition is <c>true</c>. For example you cannot 
            assume that the left operand is greater than or equal the right operand if the <c>LessThan</c> operator 
            returns <c>false</c>.</para> 
            
            </remarks>
            
            <param name="left">An instance of TdTimestamp.</param>
            <param name="right">An instance of TdTimestamp.</param>
        </member>
        <member name="M:Teradata.Client.Provider.TdTimestamp.LessThanOrEqual(Teradata.Client.Provider.TdTimestamp,Teradata.Client.Provider.TdTimestamp)">
            <summary>
            Compares two TdTimestamps to determine whether the <paramref name="left"/> operand is 
            less than or equal to the <paramref name="right"/> operand.
            </summary>
            
            <returns>
            A boolean is returned that indicates the result of the comparison.
            </returns>
            
            <remarks>
            	<para>
            		The value returned is <c>true</c> if the <paramref name="left"/> is less
                    than or equal to the <paramref name="right"/>, <c>false</c> otherwise.
                </para>
            	<para>
            		<list type="table">
            			<listheader>
            				<term>Return Value</term>
            				<description>Description</description>
            			</listheader>
            			<item>
            				<term><c>true</c></term>
                            <description><paramref name="left"/> and <paramref name="right"/> are not <see cref="F:Teradata.Client.Provider.TdTimestamp.Null"/> and
                            <paramref name="left"/> is less than or equal to <paramref name="right"/>.
                            </description>
            			</item>
            			<item>
            				<term><c>false</c></term>
                            <description>
                            <para><paramref name="left"/> and / or <paramref name="right"/> is <strong>Null</strong></para>
                            <para>-or-</para>
                            <para><paramref name="left"/> is greater than <paramref name="right"/>.</para>
                            </description>
            			</item>
            		</list>
            	</para>
            
            <para>Comparison operators always returns <c>false</c> if one of the operands is <strong>Null</strong>. 
            Therefore, you must not assume that the reverse condition is <c>true</c>. For example you cannot 
            assume that the left operand is greater than the right operand if the <c>LessThanOrEqual</c> operator 
            returns <c>false</c>.</para> 
            
            </remarks>
            
            <param name="left">An instance of TdTimestamp.</param>
            <param name="right">An instance of TdTimestamp.</param>
        </member>
        <member name="M:Teradata.Client.Provider.TdTimestamp.op_Equality(Teradata.Client.Provider.TdTimestamp,Teradata.Client.Provider.TdTimestamp)">
            <summary>
            Compares two TdTimestamp to determine whether the <paramref name="left"/> operand is 
            equal to the <paramref name="right"/> operand.
            </summary>
            
            <returns>
            A boolean is returned that indicates the result of the comparison.
            </returns>
            
            <remarks>
            	<para>
            		The value returned is <c>true</c> if the <paramref name="left"/> is 
                    equal to the <paramref name="right"/>, <c>false</c> otherwise.
                </para>
            	<para>
            		<list type="table">
            			<listheader>
            				<term>Return Value</term>
            				<description>Description</description>
            			</listheader>
            			<item>
            				<term><c>true</c></term>
                            <description>
                                <para><paramref name="left"/> and <paramref name="right"/> are <see cref="F:Teradata.Client.Provider.TdTimestamp.Null"/></para> 
                                <para>-or-</para>
                                <para><paramref name="left"/> is equal to <paramref name="right"/>.</para>
                            </description>
            			</item>
            			<item>
            				<term><c>false</c></term>
                            <description>
                            <para><paramref name="left"/> or <paramref name="right"/> is <strong>Null</strong></para>
                            <para>-or-</para>
                            <para><paramref name="left"/> is not equal to <paramref name="right"/>.</para>
                            </description>
            			</item>
            		</list>
            	</para>
            <para>
            Unlike comparison operators, Equality operators do not always return 
            <c>false</c> when left and right operands are <strong>Null</strong>. 
            Therefore the reverse condition can be considered <c>true</c>. 
            TdTimestamp implementation is very similar to the 
            <see cref="T:System.Nullable"/> class in this regard.
            </para>
            
            </remarks>
            
            <param name="left">An instance of TdTimestamp.</param>
            <param name="right">An instance of TdTimestamp.</param>    
            
            <example>
            Following example shows that the Equality operator can safely be used in an if statement.
            <code>
            TdTimestamp x = TdTimestamp.Null;
            TdTimestamp y = TdTimestamp.MinValue;
            
            if (x == y)
            {
                // x is equal to y.
                Console.WriteLine(@"X is equal to Y").
            }
            else
            {
                // x is not equal y
                Console.WriteLine(@"X is not equal to Y").
            }
            
            y = TdTimestamp.Null;
            
            if (x == y)
            {
                // x is equal to y.
                Console.WriteLine(@"X is equal to Y").
            }
            else
            {
                // x is not equal y
                Console.WriteLine(@"X is not equal to Y").
            }
            </code>
            </example>
        </member>
        <member name="M:Teradata.Client.Provider.TdTimestamp.op_Inequality(Teradata.Client.Provider.TdTimestamp,Teradata.Client.Provider.TdTimestamp)">
            <summary>
            Compares two TdTimestamps to determine whether the <paramref name="left"/> operand is 
            not equal to the <paramref name="right"/> operand.
            </summary>
            
            <returns>
            A boolean is returned that indicates the result of the comparison.
            </returns>
            
            <remarks>
            	<para>
            		The value returned is <c>true</c> if the <paramref name="left"/> is 
                    not equal to the <paramref name="right"/>, <c>false</c> otherwise.
                </para>
            	<para>
            		<list type="table">
            			<listheader>
            				<term>Return Value</term>
            				<description>Description</description>
            			</listheader>
            			<item>
            				<term><c>true</c></term>
                            <description>
                                <para><paramref name="left"/> or <paramref name="right"/> is <see cref="F:Teradata.Client.Provider.TdTimestamp.Null"/></para> 
                                <para>-or-</para>
                                <para><paramref name="left"/> is less than or greater than <paramref name="right"/>.</para>
                            </description>
            			</item>
            			<item>
            				<term><c>false</c></term>
                            <description>
                            <para><paramref name="left"/> and <paramref name="right"/> are <strong>Null</strong></para>
                            <para>-or-</para>
                            <para><paramref name="left"/> is equal to <paramref name="right"/>.</para>
                            </description>
            			</item>
            		</list>
            	</para>
            </remarks>
            
            <param name="left">An instance of TdTimestamp.</param>
            <param name="right">An instance of TdTimestamp.</param>        
        </member>
        <member name="M:Teradata.Client.Provider.TdTimestamp.op_GreaterThan(Teradata.Client.Provider.TdTimestamp,Teradata.Client.Provider.TdTimestamp)">
            <summary>
            Compares two TdTimestamps to determine whether the <paramref name="left"/> operand is 
            greater than the <paramref name="right"/> operand.
            </summary>
            
            <returns>
            A boolean is returned that indicates the result of the comparison.
            </returns>
            
            <remarks>
            	<para>
            		<c>true</c> if the <paramref name="left"/> is greater
                    than the <paramref name="right"/>, <c>false</c> otherwise.
                </para>
            	<para>
            		<list type="table">
            			<listheader>
            				<term>Return Value</term>
            				<description>Description</description>
            			</listheader>
            			<item>
            				<term><c>true</c></term>
                            <description><paramref name="left"/> and <paramref name="right"/> are not <see cref="F:Teradata.Client.Provider.TdTimestamp.Null"/> and
                            <paramref name="left"/> is greater than <paramref name="right"/>.
                            </description>
            			</item>
            			<item>
            				<term><c>false</c></term>
                            <description>
                            <para><paramref name="left"/> and / or <paramref name="right"/> is <strong>Null</strong> </para>
                            <para>-or-</para>
                            <para><paramref name="left"/> is less than or equal to <paramref name="right"/>.</para>
                            </description>
            			</item>
            		</list>
            	</para>
            
            <para>Comparison operators always returns <c>false</c> if one of the operands is <strong>Null</strong>. 
            Therefore, you must not assume that the reverse condition is <c>true</c>. For example you cannot 
            assume that the left operand is less than or equal to the right operand if the "<c>&gt;</c>" operator 
            returns <c>false</c>.</para>         
            </remarks>
            
            <param name="left">An instance of TdTimestamp.</param>
            <param name="right">An instance of TdTimestamp.</param>
        </member>
        <member name="M:Teradata.Client.Provider.TdTimestamp.op_GreaterThanOrEqual(Teradata.Client.Provider.TdTimestamp,Teradata.Client.Provider.TdTimestamp)">
            <summary>
            Compares two TdTimestamps to determine whether the <paramref name="left"/> operand is 
            greater than or equal to the <paramref name="right"/> operand.
            </summary>
            
            <returns>
            A boolean is returned that indicates the result of the comparison.
            </returns>
            
            <remarks>
            	<para>
            		<c>true</c> if the <paramref name="left"/> is greater
                    than or equal to the <paramref name="right"/>, <c>false</c> otherwise.
                </para>
            	<para>
            		<list type="table">
            			<listheader>
            				<term>Return Value</term>
            				<description>Description</description>
            			</listheader>
            			<item>
            				<term><c>true</c></term>
                            <description><paramref name="left"/> and <paramref name="right"/> are not <see cref="F:Teradata.Client.Provider.TdTimestamp.Null"/> and
                            <paramref name="left"/> is greater than or equal to <paramref name="right"/>.
                            </description>
            			</item>
            			<item>
            				<term><c>false</c></term>
                            <description>
                            <para><paramref name="left"/> and / or <paramref name="right"/> is <strong>Null</strong> </para>
                            <para>-or-</para>
                            <para><paramref name="left"/> is less than <paramref name="right"/>.</para>
                            </description>
            			</item>
            		</list>
            	</para>
            
            <para>Comparison operators always returns <c>false</c> if one of the operands is <strong>Null</strong>. 
            Therefore, you must not assume that the reverse condition is <c>true</c>. For example you cannot 
            assume that the left operand is less than the right operand if the "<c>&gt;=</c>" operator 
            returns <c>false</c>.</para> 
            </remarks>
            
            <param name="left">An instance of TdTimestamp.</param>
            <param name="right">An instance of TdTimestamp.</param>
        </member>
        <member name="M:Teradata.Client.Provider.TdTimestamp.op_LessThan(Teradata.Client.Provider.TdTimestamp,Teradata.Client.Provider.TdTimestamp)">
            <summary>
            Compares two TdTimestamps to determine whether the <paramref name="left"/> operand is 
            less than the <paramref name="right"/> operand.
            </summary>
            
            <returns>
            A boolean is returned that indicates the result of the comparison.
            </returns>
            
            <remarks>
            	<para>
            		The value returned is <c>true</c> if the <paramref name="left"/> is less
                    than the <paramref name="right"/>, <c>false</c> otherwise.
                </para>
            	<para>
            		<list type="table">
            			<listheader>
            				<term>Return Value</term>
            				<description>Description</description>
            			</listheader>
            			<item>
            				<term><c>true</c></term>
                            <description><paramref name="left"/> and <paramref name="right"/> are not <see cref="F:Teradata.Client.Provider.TdTimestamp.Null"/> and
                            <paramref name="left"/> is less than <paramref name="right"/>.
                            </description>
            			</item>
            			<item>
            				<term><c>false</c></term>
                            <description>
                            <para><paramref name="left"/> and / or <paramref name="right"/> is <strong>Null</strong></para>
                            <para>-or-</para>
                            <para><paramref name="left"/> is greater than or equal to <paramref name="right"/>.</para>
                            </description>
            			</item>
            		</list>
            	</para>
            
            <para>Comparison operators always returns <c>false</c> if one of the operands is <strong>Null</strong>. 
            Therefore, you must not assume that the reverse condition is <c>true</c>. For example you cannot 
            assume that the left operand is greater than or equal the right operand if the "<c>&lt;</c>" operator 
            returns <c>false</c>.</para> 
            </remarks>
            
            <param name="left">An instance of TdTimestamp.</param>
            <param name="right">An instance of TdTimestamp.</param>
        </member>
        <member name="M:Teradata.Client.Provider.TdTimestamp.op_LessThanOrEqual(Teradata.Client.Provider.TdTimestamp,Teradata.Client.Provider.TdTimestamp)">
            <summary>
            Compares two TdTimestamps to determine whether the <paramref name="left"/> operand is 
            less than or equal to the <paramref name="right"/> operand.
            </summary>
            
            <returns>
            A boolean is returned that indicates the result of the comparison.
            </returns>
            
            <remarks>
            	<para>
            		The value returned is <c>true</c> if the <paramref name="left"/> is less
                    than or equal to the <paramref name="right"/>, <c>false</c> otherwise.
                </para>
            	<para>
            		<list type="table">
            			<listheader>
            				<term>Return Value</term>
            				<description>Description</description>
            			</listheader>
            			<item>
            				<term><c>true</c></term>
                            <description><paramref name="left"/> and <paramref name="right"/> are not <see cref="F:Teradata.Client.Provider.TdTimestamp.Null"/> and
                            <paramref name="left"/> is less than or equal to <paramref name="right"/>.
                            </description>
            			</item>
            			<item>
            				<term><c>false</c></term>
                            <description>
                            <para><paramref name="left"/> and / or <paramref name="right"/> is <strong>Null</strong></para>
                            <para>-or-</para>
                            <para><paramref name="left"/> is greater than <paramref name="right"/>.</para>
                            </description>
            			</item>
            		</list>
            	</para>
            
            <para>Comparison operators always returns <c>false</c> if one of the operands is <strong>Null</strong>. 
            Therefore, you must not assume that the reverse condition is <c>true</c>. For example you cannot 
            assume that the left operand is greater than the right operand if the "<c>&lt;=</c>" operator 
            returns <c>false</c>.</para> 
            </remarks>
            
            <param name="left">An instance of TdTimestamp.</param>
            <param name="right">An instance of TdTimestamp.</param>
        </member>
        <member name="M:Teradata.Client.Provider.TdTimestamp.Add(System.TimeSpan)">
             <summary>
             The specified TimeSpan will be added to this instance of TdTimestamp.
             </summary>
             
             <param name="timeSpan">The TimeSpan that will be added.</param>
             
             <returns>A TdTimestamp is returned that is the result of the TimeSpan added to this 
             instance of TdTimestamp.</returns>
             
             <exception cref="T:System.OverflowException">Unable to add the specified TimeSpan to this instance of TdTimestamp.</exception>
             
             <remarks>
             <para>If this instance of TdTimestamp is <strong>Null</strong> a <see cref="F:Teradata.Client.Provider.TdTimestamp.Null"/> will be returned.</para>
             
             <para>The TimeSpan object can contain data about the number of days, hours, 
             minutes, seconds, and fractional seconds.  </para>
             
             <para>If the scale between this instance of TdTimestamp and the <paramref name="timeSpan"/> parameter are different
             the arithmetic operation will be performed using the different scales.  The result will then be
             <strong>truncated</strong> to match the scale of the timestamp.  For example, the addition operation</para>
             
             <para><code>TdTimestamp.Parse("2008-10-10 12:48:53.2123") + TimeSpan.Parse("00:02:03.000099")</code></para>
             
             <para>results in a TdTimestamp value of "2008-10-10 12:50:56.2123".</para>
            
             <para>A <see cref="T:System.TimeSpan"/> can have a scale up to 7.  A TdTimestamp has a maximum scale of 6.  
             When performing an arithmetic operation, only the first 6 digits to the right of the decimal
             point of the TimeSpan operand will be considered.  The 7th digit will be ignored.</para>
             </remarks>
        </member>
        <member name="M:Teradata.Client.Provider.TdTimestamp.Add(Teradata.Client.Provider.TdIntervalDayToSecond)">
            <summary>
               Adds the specified <see cref="T:Teradata.Client.Provider.TdIntervalDayToSecond"/> to this instance of 
               <see cref="T:Teradata.Client.Provider.TdTimestamp"/>.
            </summary>
            <returns>
               A <strong>TdTimestamp</strong> is returned that is the result of adding the 
               <strong>TdIntervalDayToSecond</strong> to this instance of <strong>TdTimestamp</strong>.
            </returns>
            <exception cref="T:System.OverflowException">
               Unable to add the specified <strong>TdIntervalDayToSecond</strong> to this instance of 
               <strong>TdTimestamp</strong>.
            </exception>
            <remarks>
            <para>
               If <paramref name="interval"/> or this instance of <strong>TdTimestamp</strong> is 
               <strong>Null</strong> a <see cref="F:Teradata.Client.Provider.TdTimestamp.Null"/> will be returned.        
            </para>
            <para>
               The <strong>TdIntervalDayToSecond</strong> interval will be added to this instance of
               <strong>TdTimestamp</strong>. 
            </para>
            <para>
               If the scale between this instance of <strong>TdTimestamp</strong> and the 
               <paramref name="interval"/> parameter are different, the arithmetic operation will be 
               performed using the different scales.  The result will then be truncated to match the
               scale of the <strong>TdTimestamp</strong>.  For example, if the 
               <strong>TdIntervalDayToSecond</strong> value of "222 10:25:40.61234"
               (222 days, 10 hours, 25 minutes and 40.61234 seconds) is added to the
               <strong>TdTimestamp</strong> value of "2008-10-10 12:50:56.2123"
               the operation will result in a <strong>TdTimestamp</strong> value 
               of "2009-05-20 23:16:36" with 824600 microseconds.
            </para>
            </remarks>
            <param name="interval">
               A <strong>TdIntervalDayToSecond</strong> that will be added to this 
               instance of <strong>TdTimestamp</strong>.
            </param>
        </member>
        <member name="M:Teradata.Client.Provider.TdTimestamp.Add(Teradata.Client.Provider.TdIntervalYearToMonth)">
            <summary>
               Adds the specified <see cref="T:Teradata.Client.Provider.TdIntervalYearToMonth"/> to this 
               instance of <see cref="T:Teradata.Client.Provider.TdTimestamp"/>.
            </summary>
            <returns>
               A <strong>TdTimestamp</strong> is returned that is the result of adding the 
               <strong>TdIntervalYearToMonth</strong> to this instance of <strong>TdTimestamp</strong>.
            </returns>
            <exception cref="T:System.OverflowException">
               Unable to add the specified <strong>TdIntervalYearToMonth</strong> to this instance of 
               <strong>TdTimestamp</strong>.
            </exception>
            <remarks>
            <para>
               If <paramref name="interval"/> or this instance of <strong>TdTimestamp</strong> is 
               <strong>Null</strong> a <see cref="F:Teradata.Client.Provider.TdTimestamp.Null"/> will be returned.
            </para>
            <para>
               The <paramref name="interval"/> interval will be
               added to this instance of <strong>TdTimestamp</strong>. For example, if the 
               <strong>TdTimestamp</strong> value of "2008-10-10 12:50:56.2123" is  
               added to the <strong>TdIntervalYearToMonth</strong> value of "10-03"  
               (10 years, 3 months) the operation will result in a <strong>TdTimestamp</strong>  
               value of "2019-01-10 12:50:56 PM" with 212300 microseconds.
            </para>
            </remarks>
            <param name="interval">
               A <strong>TdIntervalYearToMonth</strong> that will be added to this instance
               of <strong>TdTimestamp.</strong>.
            </param>
        </member>
        <member name="M:Teradata.Client.Provider.TdTimestamp.Subtract(System.TimeSpan)">
             <summary>
             The specified TimeSpan will be subtracted from this instance of TdTimestamp.
             </summary>
             
             <param name="timeSpan">The TimeSpan that will be subtracted.</param>
             
             <returns>A TdTimestamp is returned that is the result of the TimeSpan subtracted from
             this instance of TdTimestamp.</returns>
             
             <exception cref="T:System.OverflowException">Unable to subtract the specified TimeSpan from this instance of TdTimestamp.</exception>
            
             <remarks>
             <para>If this instance of TdTimestamp is <strong>Null</strong> a <see cref="F:Teradata.Client.Provider.TdTimestamp.Null"/> will be returned.</para>
            
             <para>The TimeSpan object can contain data about the number of days, hours, minutes, 
             seconds, and fractional seconds.  </para>
             
             <para>If the scale between this instance of TdTimestamp and the <paramref name="timeSpan"/> parameter are different
             the arithmetic operation will be performed using the different scales.  The result will then be
             <strong>truncated</strong> to match the scale of the timestamp.  For example, the addition operation</para>
             
             <para><code>TdTimestamp.Parse("2008-10-10 12:48:53.2123") - TimeSpan.Parse("00:02:03.000099")</code></para>
             
             <para>results in a TdTimestamp value of "2008-10-10 12:46:30.2122".</para>
             
             <para>A <see cref="T:System.TimeSpan"/> can have a scale up to 7.  A TdTimestamp has a maximum scale of 6.  
             When performing an arithmetic operation, only the first 6 digits to the right of the decimal
             point of the TimeSpan operand will be considered.  The 7th digit will be ignored.</para>
             </remarks>
        </member>
        <member name="M:Teradata.Client.Provider.TdTimestamp.Subtract(Teradata.Client.Provider.TdIntervalYearToMonth)">
            <summary>
               Subtracts the specified <see cref="T:Teradata.Client.Provider.TdIntervalYearToMonth"/> from this 
               instance of <see cref="T:Teradata.Client.Provider.TdTimestamp"/>.
            </summary>
            <returns>
               A <strong>TdTimestamp</strong> is returned that is the result of subtracting the 
               <strong>TdIntervalYearToMonth</strong> from this instance of <strong>TdTimestamp</strong>.
            </returns>
            <exception cref="T:System.OverflowException">
               Unable to subtract the specified <strong>TdIntervalYearToMonth</strong> from this 
               instance of <strong>TdTimestamp</strong>.
            </exception>
            <remarks>
            <para>
               If <paramref name="interval"/> or this instance of <strong>TdTimestamp</strong> is 
               <strong>Null</strong> a <see cref="F:Teradata.Client.Provider.TdTimestamp.Null"/> will be returned.
            </para>
            <para>
               The <paramref name="interval"/> interval will be subtracted from this
               instance of <strong>TdTimestamp</strong>. For example, if the 
               <strong>TdIntervalYearToMonth</strong> value of "10-03" (10 years, 3 months)
               is subtracted from the <strong>TdTimestamp</strong> value of 
               "2008-10-10 12:50:56.2123" the operation will result in a  
               <strong>TdTimestamp</strong> value of "1998-07-10 12:50:56"
                with 212300 microseconds.
            </para>
            </remarks>
            <param name="interval">
               A <strong>TdIntervalYearToMonth</strong> that will be subtracted from this instance
               of <strong>TdTimestamp.</strong>.
            </param>
        </member>
        <member name="M:Teradata.Client.Provider.TdTimestamp.Subtract(Teradata.Client.Provider.TdIntervalDayToSecond)">
            <summary>
               Subtracts the specified <see cref="T:Teradata.Client.Provider.TdIntervalDayToSecond"/> from this instance of 
               <see cref="T:Teradata.Client.Provider.TdTimestamp"/>.
            </summary>
            <returns>
               A <strong>TdTimestamp</strong> is returned that is the result of subtracting the 
               <strong>TdIntervalDayToSecond</strong> from this instance of <strong>TdTimestamp</strong>.
            </returns>
            <exception cref="T:System.OverflowException">
               Unable to subtract the specified <strong>TdIntervalDayToSecond</strong> from this instance 
               of <strong>TdTimestamp</strong>.
            </exception>
            <remarks>
            <para>
               If <paramref name="interval"/> or this instance of <strong>TdTimestamp</strong> is 
               <strong>Null</strong> a <see cref="F:Teradata.Client.Provider.TdTimestamp.Null"/> will be returned.        
            </para>
            <para>
               The <strong>TdIntervalDayToSecond</strong> interval will be subtracted from this
               instance of <strong>TdTimestamp</strong>. 
            </para>
            <para>
               If the scale between this instance of <strong>TdTimestamp</strong> and the 
               <paramref name="interval"/> are different, the arithmetic operation will be 
               performed using the different scales.  The result will then be truncated to match the
               scale of this instance of <strong>TdTimestamp</strong>.  For example, if the 
               <strong>TdIntervalDayToSecond</strong> value of "222 10:25:40.61234"
               (222 days, 10 hours, 25 minutes and 40.61234 seconds) is subtracted from the
               <strong>TdTimestamp</strong> value of "2008-10-10 12:50:56.2123"
               the operation will result in a <strong>TdTimestamp</strong> value 
               of "2008-03-02 02:25:15" with 599900 microseconds.
            </para>
            </remarks>
            <param name="interval">
               A <strong>TdIntervalDayToSecond</strong> that will be subtracted from this 
               instance of <strong>TdTimestamp</strong>.
            </param>
        </member>
        <member name="M:Teradata.Client.Provider.TdTimestamp.AddYears(System.Int32)">
            <summary>
            Adds the specified number of years to the this instance of TdTimestamp.
            </summary>
            
            <param name="years">The number of years to add to the TdTimestamp.</param>
            
            <returns>A TdTimestamp structure is returned.</returns>
            
            <exception cref="T:System.OverflowException">Unable to add the specified number of year to this instance of TdTimestamp.</exception>
            
            <remarks>
            <para>If this instance of TdTimestamp is <strong>Null</strong> a <see cref="F:Teradata.Client.Provider.TdTimestamp.Null"/> will be returned.</para>
            </remarks>
        </member>
        <member name="M:Teradata.Client.Provider.TdTimestamp.AddMonths(System.Int32)">
            <summary>
            Add the specified number of months to the this instance of TdTimestamp.
            </summary>
            
            <param name="months">The number of months to add to the date.</param>
            
            <returns>A TdTimestamp structure is returned.</returns>
            
            <exception cref="T:System.OverflowException">Unable to add the specified number of months to this instance of TdTimestamp.</exception>
            
            <remarks>
            <para>If this instance of TdTimestamp is <strong>Null</strong> a <see cref="F:Teradata.Client.Provider.TdTimestamp.Null"/> will be returned.</para>
            </remarks>
        </member>
        <member name="M:Teradata.Client.Provider.TdTimestamp.op_Addition(Teradata.Client.Provider.TdTimestamp,System.TimeSpan)">
            <summary>
            Adds the specified TimeSpan to a TdTimestamp.
            </summary>
            
            <param name="timestamp">A TdTimestamp.</param>
            <param name="span">A TimeSpan that will be added to TdTimestamp.</param>
            
            <returns>A TdTimestamp is returned that is the result of adding the Timespan
            to TdTimestamp.</returns>
            
            <exception cref="T:System.OverflowException">Unable to add the specified TimeSpan to the the TdTimestamp.</exception>
            
            <remarks>
            If <paramref name="span"/> is <strong>Null</strong> a <see cref="F:Teradata.Client.Provider.TdTimestamp.Null"/> will be returned.
            
            <para>If the scale between the <paramref name="timestamp"/> and the <paramref name="span"/> parameters are different
            the arithmetic operation will be performed using the different scales.  The result will then be
            <strong>truncated</strong> to match the scale of the timestamp.  For example, the addition operation</para>
            
            <para><code>TdTimestamp.Parse("2008-10-10 12:48:53.2123") + TimeSpan.Parse("00:02:03.000099")</code></para>
            
            <para>results in a TdTimestamp value of "2008-10-10 12:50:56.2123".</para>
            
            <para>A <see cref="T:System.TimeSpan"/> can have a scale up to 7.  A TdTimestamp has a maximum scale of 6.  
            When performing an arithmetic operation, only the first 6 digits to the right of the decimal
            point of the TimeSpan operand will be considered.  The 7th digit will be ignored.</para>
            </remarks>
        </member>
        <member name="M:Teradata.Client.Provider.TdTimestamp.op_Addition(Teradata.Client.Provider.TdTimestamp,Teradata.Client.Provider.TdIntervalYearToMonth)">
            <summary>
               Adds the specified <see cref="T:Teradata.Client.Provider.TdIntervalYearToMonth"/> to a <see cref="T:Teradata.Client.Provider.TdTimestamp"/>.
            </summary>
            <returns>
               A <strong>TdTimestamp</strong> is returned that is the result of adding the 
               <strong>TdIntervalYearToMonth</strong> to a <strong>TdTimestamp</strong>.
            </returns>
            <exception cref="T:System.OverflowException">
               Unable to add the specified <strong>TdIntervalYearToMonth</strong> to the 
               <strong>TdTimestamp</strong>.
            </exception>
            <remarks>
            <para>
               If either parameter is <strong>Null</strong> a <see cref="F:Teradata.Client.Provider.TdTimestamp.Null"/> will be returned.
            </para>
            <para>
               The <paramref name="interval"/> interval will be added to <strong>TdTimestamp</strong>.
               For example, if the <strong>TdTimestamp</strong> value of
               "2008-10-10 12:50:56.2123" is added to the 
               <strong>TdIntervalYearToMonth</strong> value of "10-03" (10 years, 3 months) 
               the operation will result in a <strong>TdTimestamp</strong> value of 
               "2019-01-10 12:50:56 PM" with 212300 microseconds.
            </para>
            </remarks>
            <param name="timestamp">A <strong>TdTimestamp</strong>.</param>
            <param name="interval">
               A <strong>TdIntervalYearToMonth</strong> that will be added to <strong>TdTimestamp</strong>.
            </param>
        </member>
        <member name="M:Teradata.Client.Provider.TdTimestamp.op_Addition(Teradata.Client.Provider.TdIntervalYearToMonth,Teradata.Client.Provider.TdTimestamp)">
            <summary>
               Adds the specified <see cref="T:Teradata.Client.Provider.TdIntervalYearToMonth"/> to a <see cref="T:Teradata.Client.Provider.TdTimestamp"/>.
            </summary>
            <returns>
               A <strong>TdTimestamp</strong> is returned that is the result of adding the 
               <strong>TdIntervalYearToMonth</strong> to a <strong>TdTimestamp</strong>.
            </returns>
            <exception cref="T:System.OverflowException">
               Unable to add the specified <strong>TdIntervalYearToMonth</strong> to the 
               <strong>TdTimestamp</strong>.
            </exception>
            <remarks>
            <para>
               If either parameter is <strong>Null</strong> a <see cref="F:Teradata.Client.Provider.TdTimestamp.Null"/> will be returned.
            </para>
            <para>
               The <paramref name="interval"/> interval will be
               added to <strong>TdTimestamp</strong>. For example, if the <strong>TdTimestamp</strong>
               value of "2008-10-10 12:50:56.2123" is added to the 
               <strong>TdIntervalYearToMonth</strong> value of "10-03" (10 years, 3 months) 
               the operation will result in a <strong>TdTimestamp</strong> value of 
               "2019-01-10 12:50:56 PM" with 212300 microseconds.
            </para>
            </remarks>
            <param name="interval">
               A <strong>TdIntervalYearToMonth</strong> that will be added to <strong>TdTimestamp</strong>.
            </param>
            <param name="timestamp">A <strong>TdTimestamp</strong>.</param>
        </member>
        <member name="M:Teradata.Client.Provider.TdTimestamp.op_Addition(Teradata.Client.Provider.TdTimestamp,Teradata.Client.Provider.TdIntervalDayToSecond)">
            <summary>
               Adds the specified <see cref="T:Teradata.Client.Provider.TdIntervalDayToSecond"/> to a <see cref="T:Teradata.Client.Provider.TdTimestamp"/>.
            </summary>
            <returns>
               A <strong>TdTimestamp</strong> is returned that is the result of adding the 
               <strong>TdIntervalDayToSecond</strong> to a <strong>TdTimestamp</strong>.
            </returns>
            <exception cref="T:System.OverflowException">
               Unable to add the specified <strong>TdIntervalDayToSecond</strong> to the 
               <strong>TdTimestamp</strong>.
            </exception>
            <remarks>
            <para>
               If either parameter is <strong>Null</strong> a <see cref="F:Teradata.Client.Provider.TdTimestamp.Null"/> will be returned.
            </para>
            <para>
               The <strong>TdIntervalDayToSecond</strong> interval will be added to a
               <strong>TdTimestamp</strong>. 
            </para>
            <para>
               If the scale between the <paramref name="timestamp"/> and the 
               <paramref name="interval"/> are different, the arithmetic operation will be 
               performed using the different scales.  The result will then be truncated to match the
               scale of the <strong>TdTimestamp</strong>.  For example, if the 
               <strong>TdIntervalDayToSecond</strong> value of "222 10:25:40.61234"
               (222 days, 10 hours, 25 minutes and 40.61234 seconds) is added to the
               <strong>TdTimestamp</strong> value of "2008-10-10 12:50:56.2123"
               the operation will result in a <strong>TdTimestamp</strong> value 
               of "2009-05-20 11:16:36 PM" with 824600 microseconds.
            </para>
            </remarks>
            <param name="timestamp">A <strong>TdTimestamp</strong>.</param>
            <param name="interval">
               A <strong>TdIntervalDayToSecond</strong> that will be added to a <strong>TdTimestamp</strong>.
            </param>
        </member>
        <member name="M:Teradata.Client.Provider.TdTimestamp.op_Addition(Teradata.Client.Provider.TdIntervalDayToSecond,Teradata.Client.Provider.TdTimestamp)">
            <summary>
               Adds the specified <see cref="T:Teradata.Client.Provider.TdIntervalDayToSecond"/> to a <see cref="T:Teradata.Client.Provider.TdTimestamp"/>.
            </summary>
            <returns>
               A <strong>TdTimestamp</strong> is returned that is the result of adding the 
               <strong>TdIntervalDayToSecond</strong> to a <strong>TdTimestamp</strong>.
            </returns>
            <exception cref="T:System.OverflowException">
               Unable to add the specified <strong>TdIntervalDayToSecond</strong> to the 
               <strong>TdTimestamp</strong>.
            </exception>
            <remarks>
            <para>
               If either parameter is <strong>Null</strong> a <see cref="F:Teradata.Client.Provider.TdTimestamp.Null"/> will be returned.
            </para>
            <para>
               The <strong>TdIntervalDayToSecond</strong> interval will be added to a
               <strong>TdTimestamp</strong>. 
            </para>
            <para>
               If the scale between the <paramref name="timestamp"/> and the 
               <paramref name="interval"/> are different, the arithmetic operation will be 
               performed using the different scales.  The result will then be truncated to match the
               scale of the <strong>TdTimestamp</strong>.  For example, if the 
               <strong>TdIntervalDayToSecond</strong> value of "222 10:25:40.61234"
               (222 days, 10 hours, 25 minutes and 40.61234 seconds) is added to the
               <strong>TdTimestamp</strong> value of "2008-10-10 12:50:56.2123"
               the operation will result in a <strong>TdTimestamp</strong> value 
               of "2009-05-20 11:16:36 PM" with 824600 microseconds.
            </para>
            </remarks>
            <param name="interval">
               A <strong>TdIntervalDayToSecond</strong> that will be added to a <strong>TdTimestamp</strong>.
            </param>
            <param name="timestamp">A <strong>TdTimestamp</strong>.</param>
        </member>
        <member name="M:Teradata.Client.Provider.TdTimestamp.op_Subtraction(Teradata.Client.Provider.TdTimestamp,System.TimeSpan)">
            <summary>
            Subtracts the specified TimeSpan from a TdTimestamp.
            </summary>
            
            <param name="timestamp">A TdTimestamp.</param>
            <param name="span">A TimeSpan that will be subtracted
            from the TdTimestamp</param>
            
            <returns>A TdTimestamp is returned that is the result of subtracting the TimeSpan 
            from the TdTimestamp.</returns>
            
            <exception cref="T:System.OverflowException">Unable to subtract the specified TimeSpan from the TdTimestamp.</exception>
            
            <remarks>
            If <paramref name="timestamp"/> is <strong>Null</strong> a <see cref="F:Teradata.Client.Provider.TdTimestamp.Null"/> will be returned.
            
            <para>If the scale between the <paramref name="timestamp"/> and the <paramref name="span"/> parameters are different
            the arithmetic operation will be performed using the different scales.  The result will then be
            <strong>truncated</strong> to match the scale of the timestamp.  For example, the addition operation</para>
            
            <para><code>TdTimestamp.Parse("2008-10-10 12:48:53.2123") - TimeSpan.Parse("00:02:03.000099")</code></para>
            
            <para>results in a TdTimestamp value of "2008-10-10 12:46:30.2122".</para>
            
            <para>A <see cref="T:System.TimeSpan"/> can have a scale up to 7.  A TdTimestamp has a maximum scale of 6.  
            When performing an arithmetic operation, only the first 6 digits to the right of the decimal
            point of the TimeSpan operand will be considered.  The 7th digit will be ignored.</para>
            </remarks>
        </member>
        <member name="M:Teradata.Client.Provider.TdTimestamp.op_Subtraction(Teradata.Client.Provider.TdTimestamp,Teradata.Client.Provider.TdTimestamp)">
            <summary>
            The time interval between two TdTimestamps is returned when the  
            TdTimestams are subtracted from each other.
            </summary>
            
            <param name="leftOperand">The left TdTimestamp operand.</param>
            <param name="rightOperand">The right TdTimestamp operand.</param>
            
            <returns>A TimeSpan is returned that represents the time interval
            between the left and right TdTimestamp.</returns>
            
            <exception cref="T:System.ArgumentNullException">One of the operands is <strong>Null</strong>.</exception>
        </member>
        <member name="M:Teradata.Client.Provider.TdTimestamp.op_Subtraction(Teradata.Client.Provider.TdTimestamp,Teradata.Client.Provider.TdIntervalYearToMonth)">
            <summary>
               Subtracts the specified <see cref="T:Teradata.Client.Provider.TdIntervalYearToMonth"/> from a <see cref="T:Teradata.Client.Provider.TdTimestamp"/>.
            </summary>
            <returns>
               A <strong>TdTimestamp</strong> is returned that is the result of subtracting the 
               <strong>TdIntervalYearToMonth</strong> from a <strong>TdTimestamp</strong>.
            </returns>
            <exception cref="T:System.OverflowException">
               Unable to subtract the specified <strong>TdIntervalYearToMonth</strong> from the 
               <strong>TdTimestamp</strong>.
            </exception>
            <remarks>
            <para>
               If either parameter is <strong>Null</strong> a <see cref="F:Teradata.Client.Provider.TdTimestamp.Null"/> will be returned.
            </para>
            <para>
               The <paramref name="interval"/> interval will be
               subtracted from the <strong>TdTimestamp</strong>. For example, if the 
               <strong>TdIntervalYearToMonth</strong> value of "10-03" (10 years, 3 months)
               is subtracted from the <strong>TdTimestamp</strong> value of 
               "2008-10-10 12:50:56.2123" the operation will result in a  
               <strong>TdTimestamp</strong> value of "1998-07-10 12:50:56" 
               with 212300 microseconds.
            </para>
            </remarks>
            <param name="timestamp">A <strong>TdTimestamp</strong>.</param>
            <param name="interval">
               A <strong>TdIntervalYearToMonth</strong> that will be subtracted from <strong>TdTimestamp</strong>.
            </param>
        </member>
        <member name="M:Teradata.Client.Provider.TdTimestamp.op_Subtraction(Teradata.Client.Provider.TdTimestamp,Teradata.Client.Provider.TdIntervalDayToSecond)">
            <summary>
               Subtracts the specified <see cref="T:Teradata.Client.Provider.TdIntervalDayToSecond"/> from a <see cref="T:Teradata.Client.Provider.TdTimestamp"/>.
            </summary>
            <returns>
               A <strong>TdTimestamp</strong> is returned that is the result of subtracting the 
               <strong>TdIntervalDayToSecond</strong> from a <strong>TdTimestamp</strong>.
            </returns>
            <exception cref="T:System.OverflowException">
               Unable to subtract the specified <strong>TdIntervalDayToSecond</strong> from the 
               <strong>TdTimestamp</strong>.
            </exception>
            <remarks>
            <para>
               If either parameter is <strong>Null</strong> a <see cref="F:Teradata.Client.Provider.TdTimestamp.Null"/> will be returned.
            </para>
            <para>
               The <strong>TdIntervalDayToSecond</strong> interval will be subtracted from a
               <strong>TdTimestamp</strong>. 
            </para>
            <para>
               If the scale between the <paramref name="timestamp"/> and the 
               <paramref name="interval"/> are different, the arithmetic operation will be 
               performed using the different scales.  The result will then be truncated to match the
               scale of the <strong>TdTimestamp</strong>.  For example, if the 
               <strong>TdIntervalDayToSecond</strong> value of "222 10:25:40.61234"
               (222 days, 10 hours, 25 minutes and 40.61234 seconds) is subtracted from the
               <strong>TdTimestamp</strong> value of "2008-10-10 12:50:56.2123"
               the operation will result in a <strong>TdTimestamp</strong> value 
               of "2008-03-02 02:25:15" with 599900 microseconds.
            </para>
            </remarks>
            <param name="timestamp">A <strong>TdTimestamp</strong>.</param>
            <param name="interval">
               A <strong>TdIntervalDayToSecond</strong> that will be subtracted from <strong>TdTimestamp</strong>.
            </param>
        </member>
        <member name="M:Teradata.Client.Provider.TdTimestamp.ToString">
            <summary>
            The TdTimestamp is converted to an equivalent String representation.
            </summary>
            
            <returns>The string representation of TdTimestamp is returned.</returns>
            
            <remarks>
            <para>The string representation of the timestamp will be in the format:  "yyyy-MM-dd HH:mm:ss.ffffff".
            For example, 2007-12-31 23:12:45.0023.</para>
            
            <para>The number of digits that will appear in the fractional seconds is dependent
            on the <see cref="P:Teradata.Client.Provider.TdTimestamp.Scale"/>.  For example, if the Scale is set to 4, four digits will appear 
            in the fraction.</para>
            </remarks>
        </member>
        <member name="M:Teradata.Client.Provider.TdTimestamp.ToString(System.IFormatProvider)">
            <summary>
            The TdTimestamp is converted to the equivalent ANSI string representation.
            </summary>
            <param name="provider">An IFormatProvider that contains the culture specific formatting information.  This parameter is ignored.</param>
            
            <returns>The ANSI string representation of TdTimestamp is returned.</returns>
            
            <remarks>
            <para>By default this method converts this instance of TdTimestamp using the "G" format specifier 
            (see <see cref="M:Teradata.Client.Provider.TdTimestamp.ToString(System.String)"/>)-- the ANSI string representation.  </para>
            
            <para>The cultural information specified in the <paramref name="provider"/> parameter is ignored.</para>
            
            <para>The ANSI string representation of the timestamp will be in the format:  "yyyy-MM-dd HH:mm:ss.ffffff".
            For example, 2007-12-31 23:12:45.0023.</para>
            
            <para>The number of digits that will appear in the fractional seconds is dependent
            on the <see cref="P:Teradata.Client.Provider.TdTimestamp.Scale"/>.  For example, if the Scale is set to 4, four digits will appear 
            in the fraction.</para>
            </remarks>
        </member>
        <member name="M:Teradata.Client.Provider.TdTimestamp.ToString(System.String)">
            <summary>
            TdTimestamp is converted to the equivalent String using the specified format.
            </summary>
            
            <param name="format">The DateTime format string that will be used to format the TdTimestamp.</param>
            
            <returns>A string representation of the date in TdTimestamp.</returns>
            
            <exception cref="T:System.FormatException">The specified format specifier is not supported.</exception>
            
            <remarks>
            <para>If the format parameter is null, the format of the string representation of the 
            timestamp will be "yyyy-MM-dd HH:mm:ss.ffffff.</para>
            
            <para>The format specifiers that will be supported are as follows:
            </para>
            <list type="table">
            <listheader>
            <term>Format Specifier</term>
            <description>Description</description>
            </listheader>
            <item>
            <term>d</term>
            <description>The short date pattern.  "MM/dd/yyyy".</description>
            </item>
            <item>
            <term>D</term>
            <description>The long date pattern.  "dddd, dd MMMM".</description>
            </item>
            <item>
            <term>f</term>
            <description>The long date and short time patterns. </description>
            </item>
            <item>
            <term>F</term>
            <description>The long date and long time patterns.  </description>
            </item>
            <item>
            <term>g</term>
            <description>The short date and short time patterns. </description>
            </item>
            <item>
            <term>G</term>
            <description>
            <para>The ANSI representation of the timestamp.  "yyyy-MM-dd HH:mm:ss.ffffff".  
            The number of digits in the fractional seconds will depend upon the Scale of the timestamp.</para>
            
            <para>Cultural information is ignored in this conversion.</para>
            
            <para>The number of digits that will appear in the fractional seconds is dependent
            on the <see cref="P:Teradata.Client.Provider.TdTimestamp.Scale"/>.  For example, if the Scale is set to 4, four digits will appear 
            in the fraction.</para>
            </description>
            </item>
            <item>
            <term>H</term>
            <description>The short date and long time patterns.</description>
            </item>
            <item>
            <term>l or L</term>
            <description>The Teradata literal representation of Timestamp.</description>
            </item>
            <item>
            <term>m or M</term>
            <description>The month and day patterns --"MMMM dd"</description>
            </item>
            <item>
            <term>r or R</term>
            <description>Converts the TdTimestamp to a string with the format 
            "ddd, dd MMM yyyy HH:mm:ss GMT".  Example:  Tue, 30 Oct 2007 18:30:20 GMT</description>
            </item>
            <item>
            <term>s</term>
            <description>The sortable time pattern --"yyyy'-'MM'-'dd'T'HH':'mm':'ss". </description>
            </item>
            <item>
            <term>t</term>
            <description>The short time pattern --"h:mm tt"</description>
            </item>
            <item>
            <term>T</term>
            <description>The long time patterm --"h:mm:ss tt"</description>
            </item>
            <item>
            <term>u</term>
            <description>Converts the TdTimestamp to a string with the format
            "yyyy-MM-dd HH:mm:ssZ".  Example:  2007-10-30 18:30:20Z</description>
            </item>
            <item>
            <term>y or Y</term>
            <description>The year and month pattern --"h:MMMM, yyyy".</description>
            </item>
            </list>
            
            <para>For additional information about the supported format specifiers refer to 
            <see cref="T:System.Globalization.DateTimeFormatInfo"/> contained in the MSDN documentation.
            </para>
            </remarks>
        </member>
        <member name="M:Teradata.Client.Provider.TdTimestamp.ToString(System.String,System.IFormatProvider)">
            <summary>
            TdTimestamp is converted into the equivalent String representation using the 
            specified format and culture information.
            </summary>
            
            <param name="format">The DateTime format string that will be used to format the TdTimestamp.</param>
            <param name="formatProvider">The culture specific information used to generate the string equivalent of TdTimestamp.</param>
            
            <returns>A string representation of the date in TdTimestamp.</returns>
            
            <exception cref="T:System.FormatException">The specified format specifier is not supported.</exception>
            
            <remarks>
            <para>If the format parameter is null, the format of the string representation of the 
            timestamp will be "yyyy-MM-dd HH:mm:ss.ffffff hh:mm".  In addition, the number of 
            digits that will appear in the fractional seconds is dependent on the <see cref="P:Teradata.Client.Provider.TdTimestamp.Scale"/>.  
            For example, if the Scale is set to 4, four digits will appear 
            in the fraction.</para>
            
            <para>The format specifiers that are supported are listed in 
            <see cref="M:Teradata.Client.Provider.TdTimestamp.ToString(System.String)"/>.  For additional information about the 
            supported format specifiers refer to 
            <see cref="T:System.Globalization.DateTimeFormatInfo"/> contained in the MSDN documentation.
            </para>
            </remarks>
        </member>
        <member name="M:Teradata.Client.Provider.TdTimestamp.Parse(System.String)">
            <summary>
            The specified string is converted into an equivalent TdTimestamp.  
            </summary>
            
            <param name="value">The string that is to be converted into a TdTimestamp.</param>
            
            <returns>A TdTimestamp is returned that is equivalent to the timestamp 
            contained in the value string.</returns>
            
            <exception cref="T:System.ArgumentNullException">Value is a null reference.</exception>
            <exception cref="T:System.FormatException">Value does not contain a valid representation of a timestamp.</exception>
            
            <remarks>
            <para>The string is parsed using the culture information contained in the specified 
            <see cref="T:System.Globalization.DateTimeFormatInfo"/> object.</para>
            
            <para>If the timestamp contains sub-seconds, the separator that <strong>must</strong> be used in
            the string is a <strong>decimal point</strong> (".").  For example, in the string
            "2007-12-22 10:21:22<strong>.2321</strong>" the sub-seconds is separated from the 
            number of seconds using a decimal point.</para>
            
            <para>When the <paramref name="value"/> is parsed the <see cref="P:Teradata.Client.Provider.TdTimestamp.Scale"/> will be set to 
            the number of digits in the sub-seconds component (digits that are to the right of the 
            decimal point).  Therefore, a TdTimestamp of "2008-11-21 12:32:11.0000" will have a Scale of 4, 
            and "2009-04-15 23:43:22.121000" will have a scale of 6.</para>
            
            <para>An attempt is made to avoid throwing a FormatException.  Any unrecognized characters in 
            the string will be ignored.  An exception to this is the case when
            the number of digits to the right of the decimal point exceed the <strong>maximum scale</strong> 
            of 6.  If the number of digits exceed the maximum scale, a FormatException will get thrown.
            Trailing zeroes are ignored.</para>
            
            <para>However, when a custom culture is used it is possible that the Parse will 
            fail.  A timestamp string that contains custom culture specific date elements is very
            difficult to parse.  The string may not match any of the implicit patterns that
            are used to parse a string.</para>
            
            <para>If the <paramref name="value"/> contains the string "NULL" a <see cref="F:Teradata.Client.Provider.TdTimestamp.Null"/>
            will be returned.</para>
            </remarks>
        </member>
        <member name="M:Teradata.Client.Provider.TdTimestamp.Parse(System.String,System.IFormatProvider)">
             <summary>
             The specified string is converted into an equivalent TdTimestamp.  
             </summary>
             
             <param name="value">The string that is to be converted into a TdTimestamp.</param>
             <param name="provider">An IFormatProvider that supplies culture specific information 
             about the format of value.</param>
             
             <returns>A TdTimestamp is returned that is equivalent to the timestamp 
             contained in the value string.</returns>
             
             <exception cref="T:System.ArgumentNullException">Value is a null reference.</exception>
             <exception cref="T:System.FormatException">Value does not contain a valid representation of a timestamp.</exception>
             
             <remarks>
             <para>The string is parsed using the culture information contained in the specified 
             <see cref="T:System.Globalization.DateTimeFormatInfo"/> object.</para>
             
             <para>If the timestamp contains sub-seconds, the separator that <strong>must</strong> be used in
             the string is a <strong>decimal point</strong> (".").  For example, in the string
             "2007-12-22 10:21:22<strong>.2321</strong>" the sub-seconds is separated from the 
             number of seconds using a decimal point.</para>
             
             <para>When the <paramref name="value"/> is parsed the <see cref="P:Teradata.Client.Provider.TdTimestamp.Scale"/> will be set to 
             the number of digits in the sub-seconds component (digits that are to the right of the 
             decimal point).  Therefore, a TdTimestamp of "2008-11-21 12:32:11.0000" will have a Scale of 4, 
             and "2009-04-15 23:43:22.121000" will have a scale of 6.</para>
             
             <para>An attempt is made to avoid throwing a FormatException.  Any unrecognized characters in 
             the string will be ignored.  An exception to this is the case when
             the number of digits to the right of the decimal point exceed the <strong>maximum scale</strong> 
             of 6.  If the number of digits exceed the maximum scale, a FormatException will get thrown.
             Trailing zeroes are ignored.</para>
             
             <para>However, when a custom culture is used it is possible that the Parse will 
             fail.  A timestamp string that contains custom culture specific date elements is very
             difficult to parse.  The string may not match any of the implicit patterns that
             are used to parse a string.</para>
            
             <para>If the <paramref name="value"/> contains the string "NULL" a <see cref="F:Teradata.Client.Provider.TdTimestamp.Null"/>
             will be returned.</para>
             </remarks>
        </member>
        <member name="M:Teradata.Client.Provider.TdTimestamp.TryParse(System.String,Teradata.Client.Provider.TdTimestamp@)">
            <summary>
            A timestamp represented as a string is converted to an equivalent TdTimestamp representation.
            </summary>
            
            <param name="value">The string that contains the date representation.</param>
            <param name="result">The TdTimestamp representation of the timestamp contained in the specified string.</param>
            
            <returns>A Boolean is returned that indicates the success of the conversion.  
            <c>true</c> indicates that the conversion was successful and that the conversion is 
            returned through the result parameter.  <c>false</c> indicates that the conversion 
            failed. </returns>
            
            <remarks>
            <para>TryParse is the same as Parse except that an exception does not get thrown 
            when the conversion fails.</para>
            
            <para>Formatting information contained in the DateTimeFormatInfo object is used to 
            parse the string.</para>
            
            <para>If the string is either null or empty, a <see cref="F:Teradata.Client.Provider.TdTimestamp.Null"/>
            is returned.</para>
            
            <para>If the conversion fails the result parameter will be set to <see cref="F:Teradata.Client.Provider.TdTimestamp.MinValue"/>.</para>
            
            <para>For more information refer to <see cref="M:Teradata.Client.Provider.TdTimestamp.Parse(System.String)"/>.</para>
            </remarks>
        </member>
        <member name="M:Teradata.Client.Provider.TdTimestamp.TryParse(System.String,System.IFormatProvider,Teradata.Client.Provider.TdTimestamp@)">
            <summary>
            A timestamp represented as a string is converted to an equivalent TdTimestamp representation.
            </summary>
            
            <param name="value">The string that contains the date representation.</param>
            <param name="provider">An IFormatProvider that supplies culture specific information 
            about the format of value.</param>
            <param name="result">The TdTimestamp representation of the timestamp contained in the specified string.</param>
            
            <returns>A Boolean is returned that indicates the success of the conversion.  
            <c>true</c> indicates that the conversion was successful and that the conversion is 
            returned through the result parameter.  <c>false</c> indicates that the conversion 
            failed. </returns>
            
            <remarks>
            <para>TryParse is the same as Parse except that an exception does not get thrown 
            when the conversion fails.</para>
            
            <para>Formatting information contained in the DateTimeFormatInfo object is used to 
            parse the string.</para>
            
            <para>If the string is either null or empty, a <see cref="F:Teradata.Client.Provider.TdTimestamp.Null"/>
            is returned.</para>
            
            <para>If the conversion fails the result parameter will be set to <see cref="F:Teradata.Client.Provider.TdTimestamp.MinValue"/>.</para>
            
            <para>For more information refer to <see cref="M:Teradata.Client.Provider.TdTimestamp.Parse(System.String,System.IFormatProvider)"/>.</para>
            </remarks>
            <seealso cref="M:Teradata.Client.Provider.TdTimestamp.Parse(System.String,System.IFormatProvider)"/>
        </member>
        <member name="M:Teradata.Client.Provider.TdTimestamp.GetXmlSchema(System.Xml.Schema.XmlSchemaSet)">
             <summary>
             Specifies the XML Qualified name for <strong>TdTimestamp</strong> XML type mapping.
             </summary>
             
             <param name="xmlSchemaSet">Holds zero or more XML Schema definition language (XSD) schemas.</param>
             
             <returns>
             Returns <strong>xs:dateTime</strong>.
             </returns>
             
             <example>
             This examples shows how to use <strong>TdTimestamp</strong> with <see cref="T:System.Xml.Serialization.XmlSerializer"/> class.
             <see cref="T:System.Xml.Serialization.XmlElementAttribute"/> is used to indicate that the Teradata Database column can be <strong>Null</strong>.
             <code>
              public class Order
              {
                  public TdTimestamp TimeStamp;
            
                  public Int32 ProductId;
            
                  public Int32 Quantity;
            
                  public Int32? BackOrderQuantity;
            
                  [XmlElementAttribute(IsNullable = true)]        
                  public TdDecimal BackOrderPrice;
              }
             
              internal class OrderWriter
              {
              
                  public static void Write()
                  {
                      // Setup the order
                      Order x = new Order();
              
                      x.Timestamp = new TdTimestamp(DateTime.Today);
                      x.ProductId = 100;
                      x.Quantity = 2000;
                      x.BackOrderQuantity = null;
                      x.BackOrderPrice = TdDecimal.Null;
            
                      // Write out today's orders to the file.
                      //
                      // Open the file.
                      XmlWriterSettings settings = new XmlWriterSettings();
                      settings.Indent = true;
                      XmlWriter writer = XmlWriter.Create(@"C:\Temp\TodayOrders.XML", settings);
                      writer.WriteStartElement("TodayOrders");
                
                      // Write out the schema.
                      XmlSchemas schemas = new XmlSchemas();
                      XmlSchemaExporter schExporter = new XmlSchemaExporter(schemas);
                      schExporter.ExportTypeMapping(new XmlReflectionImporter().ImportTypeMapping(typeof(Order)));
                      schemas[0].Write(writer);
            
                      // Write out the orders.
                      XmlSerializer xml = new XmlSerializer(typeof(Order));
                      xml.Serialize(writer, x);
              
                      // Close the document.
                      writer.WriteEndDocument();
                      writer.Close();
                  }
              }
             
               /* Output is:
             
              &lt;TodayOrders&gt;
                &lt;xs:schema elementFormDefault="qualified" xmlns:xs="http://www.w3.org/2001/XMLSchema"&gt;
                  &lt;xs:element name="Order" nillable="true" type="Order" /&gt;
                  &lt;xs:complexType name="Order"&gt;
                    &lt;xs:sequence&gt;
                      &lt;xs:element minOccurs="1" maxOccurs="1" name="Timestamp" type="xs:dateTime" /&gt;
                      &lt;xs:element minOccurs="1" maxOccurs="1" name="ProductId" type="xs:int" /&gt;
                      &lt;xs:element minOccurs="1" maxOccurs="1" name="Quantity" type="xs:int" /&gt;
                      &lt;xs:element minOccurs="1" maxOccurs="1" name="BackOrderQuantity" nillable="true" type="xs:int" /&gt;
                      &lt;xs:element minOccurs="1" maxOccurs="1" name="BackOrderPrice" nillable="true" type="xs:decimal" /&gt;
                    &lt;/xs:sequence&gt;
                  &lt;/xs:complexType&gt;
                &lt;/xs:schema&gt;
                &lt;Order xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xmlns:xsd="http://www.w3.org/2001/XMLSchema"&gt;
                  &lt;Timestamp&gt;2007-02-01T00:00:00&lt;/Timestamp&gt;
                  &lt;ProductId&gt;100&lt;/ProductId&gt;
                  &lt;Quantity&gt;2000&lt;/Quantity&gt;
                  &lt;BackOrderQuantity xsi:nil="true" /&gt;
                  &lt;BackOrderPrice xsi:nil="true" /&gt;
                &lt;/Order&gt;
              &lt;/TodayOrders&gt;
             
              */
             </code>
             </example>        
        </member>
        <member name="P:Teradata.Client.Provider.TdTimestamp.ObjectId">
            <summary>
            Gets the Instance Object Identifier.
            </summary>
        </member>
        <member name="P:Teradata.Client.Provider.TdTimestamp.IsNull">
            <summary>
            Indicates whether this TdTimestamp instance is <see cref="F:Teradata.Client.Provider.TdTimestamp.Null"/>. 
            </summary>
            
            <value>
            <c>true</c> if this TdTimestamp is Null; <c>false</c> otherwise.
            </value>
        </member>
        <member name="P:Teradata.Client.Provider.TdTimestamp.Year">
            <summary>
            The Year of the date contained in this instance of TdTimestamp is returned.
            </summary>
            
            <value>
            The year specified in the date.
            </value>
            
            <exception cref="T:Teradata.Client.Provider.TdException">This instance is <see cref="F:Teradata.Client.Provider.TdTimestamp.Null"/>.</exception>
            
            <remarks>
            <para>The value that is returned represents the year of the date component. </para>
            
            <para>No consideration is given to daylight savings time.</para>
            </remarks>
        </member>
        <member name="P:Teradata.Client.Provider.TdTimestamp.Month">
            <summary>
            The Month of the date contained in this instance of TdTimestamp is returned.
            </summary>
            
            <value>
            The month specified in the date.
            </value>
            
            <exception cref="T:Teradata.Client.Provider.TdException">This instance is <see cref="F:Teradata.Client.Provider.TdTimestamp.Null"/>.</exception>
            
            <remarks>
            <para>The value that is returned represents the month of the date component.</para> 
            
            <para>No consideration is given to daylight savings time.</para>
            </remarks>
        </member>
        <member name="P:Teradata.Client.Provider.TdTimestamp.Day">
            <summary>
            The Day of the date contained in this instance of TdTimestamp is returned.  
            </summary>
            
            <value>
            The day of the month represented by this instance is returned.  The value returned
            will range from 1 to 31.
            </value>
            
            <exception cref="T:Teradata.Client.Provider.TdException">This instance is <see cref="F:Teradata.Client.Provider.TdTimestamp.Null"/>.</exception>
            
            <remarks>
            <para>The value that is returned represents the day of the date component. </para>
            
            <para>No consideration is given to daylight savings time.</para>
            </remarks>
        </member>
        <member name="P:Teradata.Client.Provider.TdTimestamp.Hour">
            <summary>
            The hour of the time component in this instance of TdTimestamp is returned.
            </summary>
            
            <exception cref="T:Teradata.Client.Provider.TdException">This instance is <see cref="F:Teradata.Client.Provider.TdTimestamp.Null"/>.</exception>
            
            <remarks>
            The value that is returned represents the hour of the time component.  TdTimestamp
            does not take into account the day light savings time.  What has been entered as the hour
            of the time component, is returned from the property.
            </remarks>
            
            <value>
            The hour component is returned as an Int32.  The range will be 0 to 23.
            </value>
        </member>
        <member name="P:Teradata.Client.Provider.TdTimestamp.Second">
            <summary>
            The number of seconds contained in the time component in this 
            instance of TdTimestamp is returned.
            </summary>
            
            <value>
            The second component is returned as an Int32.  The range will be 0 to 59.
            </value>
            
            <exception cref="T:Teradata.Client.Provider.TdException">This instance is <see cref="F:Teradata.Client.Provider.TdTimestamp.Null"/>.</exception>
        </member>
        <member name="P:Teradata.Client.Provider.TdTimestamp.Microsecond">
            <summary>
            The sub-seconds contained in the time component is returned in microseconds.
            </summary>
            
            <value>
            The sub-second component is returned as an Int32.  It will contain up to <see cref="P:Teradata.Client.Provider.TdTimestamp.Scale"/> digits.
            </value>
            
            <exception cref="T:Teradata.Client.Provider.TdException">This instance is <see cref="F:Teradata.Client.Provider.TdTimestamp.Null"/>.</exception>
            
            <remarks>
            <para>Teradata only supports up to 6 digits in the fractional portion
            of a second.   Therefore, TdTimestamp also support 6 digits
            in the sub-seconds. This is represented as a Microsecond.  One microsecond is 
            equivalent to 10^-6 of a second. </para>
            
            <para>The following are examples of the fraction that is returned for
            a given timestamp:</para>
            
            <list type="table">
            <listheader>
            <term>Timestamp</term>
            <description>Microsecond Property</description>
            </listheader>
            <item>
            <term>9999-12-31 23:59:59.999999, scale = 6</term>
            <description>999999</description>
            </item>
            <item>
            <term>2008-02-29 12:45:00.349000, scale = 6</term>
            <description>349000</description>
            </item>
            <item>
            <term>2008-02-29 12:45:00.34900, scale = 5</term>
            <description>34900</description>
            </item>
            <item>
            <term>2008-02-29 12:45:00.3490, scale = 4</term>
            <description>3490</description>
            </item>
            <item>
            <term>2008-02-29 12:45:00.349, scale = 3</term>
            <description>349</description>
            </item>
            <item>
            <term>2010-11-30 20:31:07.020000,  scale = 6</term>
            <description>20000</description>
            </item>
            <item>
            <term>2010-11-30 20:31:07.0200,  scale = 4</term>
            <description>200</description>
            </item>
            <item>
            <term>2010-10-31 00:10:01.00090,  scale = 5</term>
            <description>90</description>
            </item>
            </list>
            </remarks>
            <value>The microsecond component is returned as an Int32.</value>
        </member>
        <member name="P:Teradata.Client.Provider.TdTimestamp.Minute">
            <summary>
            The number of minutes contained in the time component of this instance of
            TdTimestamp.
            </summary>
            
            <value>
            The minute component is returned as an Int32.
            </value>
            
            <exception cref="T:Teradata.Client.Provider.TdException">This instance is <see cref="F:Teradata.Client.Provider.TdTimestamp.Null"/>.</exception>
        </member>
        <member name="P:Teradata.Client.Provider.TdTimestamp.Value">
            <summary>
            Gets the DateTime representation of this TdTimestamp instance.
            </summary>
            
            <exception cref="T:Teradata.Client.Provider.TdException">This instance is <see cref="F:Teradata.Client.Provider.TdTimestamp.Null"/>.</exception>
        </member>
        <member name="P:Teradata.Client.Provider.TdTimestamp.Scale">
            <summary>
            Returns the scale of this instance of TdTimestamp.
            </summary>
            
            <exception cref="T:Teradata.Client.Provider.TdException">This instance is <see cref="F:Teradata.Client.Provider.TdTimestamp.Null"/>.</exception>
        </member>
        <member name="T:Teradata.Client.Provider.TdTimestampWithTimeZone">
             <summary>
             TdTimeStampWithTimeZone is a .Net Data Provider for Teradata specific type that
             represents a timestamp with a Time Zone and based on the Gregorian Calendar.  
             </summary>
             <remarks>
             <para>The <strong>.Net Framework 2.0 </strong> system type DateTime directly corresponds 
             to the Teradata type <strong>Timestamp</strong>.  The Framework does not contain 
             a system type that corresponds to the Teradata type <strong>Timestamp With Time Zone</strong>.  
             DateTime is only capable of specifying "time" as local time, UTC time,
             or an unspecified time.  It does not support a Univeral Coordinated Time (UTC) 
             offset.  In order to solve this problem, the provider specific type 
             <strong>TdTimestampWithTimeZone</strong> is used. </para> 
             
             <para>TdTimestampWithTimeZone allows a UTC Offset to be specified with a 
             timestamp.  A valid UTC Offset will be within the range of -12:59 to 13:00.</para>
             
             <para>The UTC offset can be specified when invoking the constructor, or in the string 
             that is to be parsed.  For more information on 
             UTC offset refer to the <strong>Teradata Manual, Sql Reference:  DataTypes and Literals</strong>. </para>
             
             <para>Similar to the Teradata Database's Timestamp With Time Zone type, the 
             TdTimestampWithTimeZone also support a scale for the sub-seconds --this is specified as 
             a <see cref="P:Teradata.Client.Provider.TdTimestampWithTimeZone.Microsecond"/>.  The scale can range from 0 to 6.  The Microsecond 
             and Scale are specified in the constructor.  An example of a timestamp with a time zone is 
             "2007-08-30 13:21:10.003214-08:00".  This timestamp has a UTC offset of
             "-08:00", Microsecond of "003214", and a Scale of "6".</para>  
             
             <para>When a TdTimestampWithTimeZone is parsed (see <see cref="M:Teradata.Client.Provider.TdTimestampWithTimeZone.Parse(System.String,System.IFormatProvider)"/>) 
             the scale of the resulting TdTimestampWithTimeZone will be set to the actual scale of the 
             fractional part of the TdTimestampWithTimeZone.</para>
             
             <para>When data of a column that is a Timestamp With Time Zone is retrieved as a 
             TdTimestampWithTimeZone (<see cref="M:Teradata.Client.Provider.TdDataReader.GetTdTimestampWithTimeZone(System.Int32)"/>), 
             it's scale will be set to the scale of the column.</para>
             
             <para>The TdTimestampWithTimeZone structure allows arithmetic, comparison, and conversion operations to be
             performed.</para>
             
             <para>A TdTimestampWithTimeZone value can also be specified as an In, Out, or InOut parameter to a Stored 
             Procedure.  In order to maintain backward compatibility with previous versions of the 
             provider --versions earlier than 12.0--, the Connection String Attribute 
             <a href="TdDateAndTimeConnectionString.htm"><strong>Enable TdDateTime</strong></a> 
             must be set to <c>false</c>.  When this is done, a TdTimestampWithTimeZone is 
             returned to an application using the <see cref="P:Teradata.Client.Provider.TdParameter.ProviderSpecificValue"/> property.  
             The object that is returned from the <see cref="P:Teradata.Client.Provider.TdParameter.Value"/> property remains a 
             System.String.</para>
             
             <para>If the attribute <strong>Enable TdDateTime</strong> is set to <c>true</c> a TdTimestampWithTimeZone 
             <strong>is</strong> returned to the application through the TdParameter.Value.</para>
             
             <para>The TdTimestampWithTimeZone is daylight savings time agnostic.</para>
             </remarks>
             
             <example>
             <para>The following example calls a stored procedure that returns a timestamp as an output parameter.  
             The procedure that is called has the signature</para>
             <para>
             <code>
             	TimeEnrolledInClass(IN studentId VARCHAR(9), IN classId VARCHAR(9),  
                 OUT timeEnrolled TIMESTAMP WITH TIME ZONE)
             </code>
             </para>
             <code>
             Public void TimeExample(TdCommand cmd, String studentId, String classId)
             {
                cmd.Parameters.Clear();
               
                cmd.CommandText = "TimeEnrolledInClass";
                cmd.CommandType = CommandType.StoredProcedure;
            
                cmd.Parameters.Add(null, TdType.Varchar, 9,
                     System.Data.ParameterDirection.Input, true, 0, 0, null,    
                     System.Data.DataRowVersion.Default, studentId);
            
                cmd.Parameters.Add(null, TdType.Varchar, 9,
                     System.Data.ParameterDirection.Input, true, 0, 0, null,    
                     System.Data.DataRowVersion.Default, classId);
            
                cmd.Parameters.Add(null, TdType.Varchar, 0,
                     System.Data.ParameterDirection.Output, true, 0, 0, null,    
                     System.Data.DataRowVersion.Default, null);
            
                cmd.ExecuteNonQuery();
            
                // Using TdTimestampWithTimeZone to get the time that the student enrolled 
                // in the class
                TdTimestampWithTimeZone timeEnrolled = (TdTimestampWithTimeZone)cmd.Parameters[0].ProviderSpecificValue;
             
                // Add 5 days to the time Enrolled.
                TdTimestampwithTimeZone newTime = timeEnrolled + new TimeSpan(5, 0, 0);
             
                // Typecast the newTime to a TdDate
                TdDate dateEnrolled = (TdDate)timeEnrolled;
             
                // Print out the timeEnrolled to the console
                Console.WriteLine("Time enrolled {0}", timeEnrolled);
             
                // Convert the timeEnrolled to a String
                String enrolled = timeEnrolled.ToString();
             }
             </code>
             </example>
             
             <seealso cref="!:TdDateAndTimeConnectionString.html">Date And Time Connection String Attribute</seealso>
             <seealso cref="!:EnableProviderSpecificTypes.html">Enabling Provider Specific Types</seealso>
             <seealso cref="!:DateAndTimeTypeOverview.html">Provider Specific Type:  Date And Time Overview</seealso>
        </member>
        <member name="F:Teradata.Client.Provider.TdTimestampWithTimeZone.MaxValue">
            <summary>
            The largest possible value of TdTimestampWithTimeZone.  This field is read-only.
            </summary>
            
            <remarks>
            The largest possible value of TdTimestampWithTimeZone is equivalent to 
            <strong>9999-12-31 23:59:59.999999+00:00</strong>.
            </remarks>
        </member>
        <member name="F:Teradata.Client.Provider.TdTimestampWithTimeZone.MinValue">
            <summary>
            The smallest possible value of TdTimestampWithTimeZone.  This field is read-only.
            </summary>
            
            <remarks>
            The smallest possible value of TdTimestampWithTimeZone is equivalent to 
            <strong>0001-01-01 00:00:00+00:00</strong>.
            </remarks>
        </member>
        <member name="F:Teradata.Client.Provider.TdTimestampWithTimeZone.Null">
            <summary>
            Gets a Null TdTimestampWithTimeZone instance.
            </summary>
            
            <value>
            Returns a TdTimestampWithTimeZone instance that represents a <strong>Null</strong> value.
            </value>
            
            <remarks>
            Conceptually it is the constructor for <strong>Null</strong> TdTimestampWithTimeZone instances.
            </remarks>
            
            <example>
            This example shows how to send a <strong>Null</strong> value to a Teradata database.
            <code>
            TdParameter col1 = new TdParameter();
            col1.TdType = TdType.TimestampWithTimeZone;
            col1.Value = TdTimestampWithTimeZone.Null;
            </code>
            </example>
        </member>
        <member name="M:Teradata.Client.Provider.TdTimestampWithTimeZone.#ctor(System.Int32,System.Int32,System.Int32)">
            <summary>
            TdTimestampWithTimeZone is created from the date components specified as integers.
            </summary>
            
            <param name="year">The year of the specified date.  Valid values are 0001-9999.</param>
            <param name="month">The month of the specified date.  Valid values are 01-12.</param>
            <param name="day">The day of the specified date. Valid values are 1-31.</param>
            
            <exception cref="T:System.ArgumentOutOfRangeException">One of the date components is out of range.</exception>
            
            <remarks>
            <para>The Time components will be filled in with "00:00:00", and the
            UTC offset will be set to the local time zone of the machine.</para>
            </remarks>
        </member>
        <member name="M:Teradata.Client.Provider.TdTimestampWithTimeZone.#ctor(System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32)">
            <summary>
            TdTimestampWithTimeZone is created from the date and time components specified as integers.
            </summary>
            
            <param name="year">The year of the specified timestamp.  Valid values are 0001-9999.</param>
            <param name="month">The month of the specified timestamp.  Valid values are 01-12.</param>
            <param name="day">The day of the specified timestamp. Valid values are 1-31.</param>
            <param name="hour">The hour of the specified timestamp. Valid values are 0-23.</param>
            <param name="minute">The minute of the specified timestamp.  Valid values are 0-59.</param>
            <param name="second">The second of the specified timestamp. Valid values are 0-59.</param>
            
            <exception cref="T:System.ArgumentOutOfRangeException">A date or time component is not in the valid range.</exception>
            
            <remarks>
            <para>The UTC offset will be set to the local time zone of the machine, and the scale will default to
            the minimum scale of 0.</para>
            </remarks>
        </member>
        <member name="M:Teradata.Client.Provider.TdTimestampWithTimeZone.#ctor(System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32)">
            <summary>
            An instance of TdTimestampWithTimeZone is created from the date and time components 
            specified as integers.
            </summary>
            
            <param name="year">The year of the specified timestamp.  Valid values are 0001-9999.</param>
            <param name="month">The month of the specified timestamp.  Valid values are 01-12.</param>
            <param name="day">The day of the specified timestamp. Valid values are 1-31.</param>
            <param name="hour">The hour of the specified timestamp. Valid values are 0-23.</param>
            <param name="minute">The minute of the specified timestamp.  Valid values are 0-59.</param>
            <param name="second">The second of the specified timestamp. Valid values are 0-59.</param>
            <param name="microsecond">The number of microseconds.</param>
            
            <exception cref="T:System.ArgumentOutOfRangeException">A date or time component is not in the valid range.</exception>
            
            <remarks>
            <para>A microsecond is 10^-6 of a second (.000001).  </para>
            
            <para>The UTC offset will default to the local time zone of the machine, and the scale will default to the scale of the 
            <paramref name="microsecond"/> parameter.</para>
            
            <para>When the TdTimestamp is created, the microsecond parameter will be divided by 
            10^6 to create the fractional component of TdTimestamp.  For example, if 231 
            were passed in as the microsecond, the fractional component will 
            be set to ".000231", and the scale will be 6.</para> 
            </remarks>
        </member>
        <member name="M:Teradata.Client.Provider.TdTimestampWithTimeZone.#ctor(System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.TimeSpan)">
            <summary>
            An instance of TdTimestampWithTimeZone is created from the date and time components specified as integers.
            </summary>
            
            <param name="year">The year of the specified timestamp.  Valid values are 0001-9999.</param>
            <param name="month">The month of the specified timestamp.  Valid values are 01-12.</param>
            <param name="day">The day of the specified timestamp. Valid values are 1-31.</param>
            <param name="hour">The hour of the specified timestamp. Valid values are 0-23.</param>
            <param name="minute">The minute of the specified timestamp.  Valid values are 0-59.</param>
            <param name="second">The second of the specified timestamp. Valid values are 0-59.</param>
            <param name="microsecond">The number of microseconds.</param>
            <param name="utcOffset">The UTC offset.</param>
            
            <exception cref="T:System.ArgumentOutOfRangeException">A date or time component is not in the valid range.</exception>
            <exception cref="T:System.ArgumentException">The seconds and sub-seconds of the UTC Offset must be 0.</exception>
            
            <remarks>
            <para>A microsecond is 10^-6 of a second (.000001).  </para>
            
            <para>The UTC offset will default to the local time zone of the machine, and the scale will default to the scale of
            the <paramref name="microsecond"/> parameter.</para>
            
            <para>When the TdTimestamp is created, the microsecond parameter will be divided by 
            10^6 to create the fractional component of TdTimestamp.  For example, if 231 
            were passed in as the microsecond, the fractional component will 
            be set to ".000231", and the scale will be 6.</para> 
            </remarks>
        </member>
        <member name="M:Teradata.Client.Provider.TdTimestampWithTimeZone.#ctor(System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32)">
            <summary>
            An instance of TdTimestampWithTimeZone is created from the date and time components specified as integers.
            </summary>
            
            <param name="year">The year of the specified timestamp.  Valid values are 0001-9999.</param>
            <param name="month">The month of the specified timestamp.  Valid values are 01-12.</param>
            <param name="day">The day of the specified timestamp. Valid values are 1-31.</param>
            <param name="hour">The hour of the specified timestamp. Valid values are 0-23.</param>
            <param name="minute">The minute of the specified timestamp.  Valid values are 0-59.</param>
            <param name="second">The second of the specified timestamp. Valid values are 0-59.</param>
            <param name="microsecond">The number of microseconds.</param>
            <param name="scale">The scale of the timestamp.  Valid values are 0-6.</param>
            
            <exception cref="T:System.ArgumentOutOfRangeException">A date or time component is not in the valid range.</exception>
            
            <remarks>
            <para>A microsecond is 10^-6 of a second (.000001).  </para>
            
            <para>When the TdTimestamp is created, the microsecond parameter will first be divided by 
            10^6 --this corresponds to a microsecond.  Then this fractional portion of the timestamp
            will be truncated at the position specified by the scale.  For example, if "231" 
            were passed in as the microsecond and 6 as the scale, the fraction component will 
            be set to ".000231".  However, if the microsecond is 23145 and the scale is 
            3, the fractional component will be ".023"</para> 
            
            <para>The UTC offset will be set to the local time zone of the machine.</para>
            </remarks>
        </member>
        <member name="M:Teradata.Client.Provider.TdTimestampWithTimeZone.#ctor(System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.TimeSpan)">
            <summary>
            An instance of TdTimestampWithTimeZone is created from the date and time components specified as integers.
            </summary>
            
            <param name="year">The year of the specified timestamp.  Valid values are 0001-9999.</param>
            <param name="month">The month of the specified timestamp.  Valid values are 01-12.</param>
            <param name="day">The day of the specified timestamp. Valid values are 1-31.</param>
            <param name="hour">The hour of the specified timestamp. Valid values are 0-23.</param>
            <param name="minute">The minute of the specified timestamp.  Valid values are 0-59.</param>
            <param name="second">The second of the specified timestamp. Valid values are 0-59.</param>
            <param name="microsecond">The fractional number of seconds.</param>
            <param name="scale">The scale of the timestamp.  The valid values are 0-6.</param>
            <param name="utcOffset">The UTC offset.  The offset can range from -12:59 to +13:00.</param>
            
            <exception cref="T:System.ArgumentOutOfRangeException">A date or time component is not in the valid range, 
            or the UTC representation of the timestamp is out of valid range.</exception>
            <exception cref="T:System.ArgumentException">The seconds and sub-seconds of the UTC Offset must be 0.</exception>
            
            <remarks>
            <para>A microsecond is 10^-6 of a second (.000001).  </para>
            
            <para>When the timestamp is created, the microsecond parameter will first be divided by 
            10^6 --this corresponds to a microsecond.  Then this fractional portion of the timestamp
            will be truncated at the position specified by the scale.  For example, if "231" 
            were passed in as the microsecond and 6 as the scale, the fraction component will 
            be set to ".000231".  However, if the microsecond is 23145 and the scale is 
            3, the fractional component will be ".023"</para> 
            </remarks>
        </member>
        <member name="M:Teradata.Client.Provider.TdTimestampWithTimeZone.#ctor(System.DateTime,System.TimeSpan)">
            <summary>
            Initializes a new instance of TdTimestampWithTimeZone using the specified
            DateTime structure and UTC offset.
            </summary>
            
            <param name="dateTime">The DateTime structure that will be used to build the date and time components.</param>
            <param name="utcOffset">The UTC offset.  The offset can range from -12:59 to +13:00.</param>
            
            <exception cref="T:System.ArgumentOutOfRangeException">The UTC representation of the timestamp is out of the valid range.</exception>
            <exception cref="T:System.ArgumentException">The minutes and seconds of the UTC Offset must be 0.</exception>
            
            <remarks>
            <para>The DateTimeKind property will be ignored when the time components of the 
            TdTimestampWithTimeZone structure is initialized with the time components 
            from the DateTime structure.  Therefore, adjustments will not be made for
            local time.</para>
            
            <para>The DateTime structure can contain a fraction of a second that is
            up to seven digits.  Teradata can only support a fraction that is 6 digits.
            Therefore, if the DateTime structure contains a fraction of a second that
            contains more than 6 digits, it will be truncated after the sixth
            position.</para>
            
            <para>The scale will default to the number of digits contained in the 
            fractional component of the DateTime structure.  The maximum value it will be
            set to is 6.</para>
            </remarks>
        </member>
        <member name="M:Teradata.Client.Provider.TdTimestampWithTimeZone.#ctor(System.DateTime,System.Int32,System.TimeSpan)">
            <summary>
            Initializes a new instance of TdTimestampWithTimeZone using the specified
            DateTime structure and UTC offset.
            </summary>
            
            <param name="dateTime">The DateTime structure that will be used to build the date and time components.</param>
            <param name="scale">The scale of the timestamp.  The scale can range from 0 - 6.</param>
            <param name="utcOffset">The UTC offset.  The offset can range from -12:59 to +13:00.</param>
            
            <exception cref="T:System.ArgumentOutOfRangeException">
               The scale, UTC Offset, or the UTC representation of the timestamp is out of the valid range.
            </exception>
            <exception cref="T:System.ArgumentException">The minutes and seconds of the UTC Offset must be 0.</exception>
            
            <remarks>
            <para>The DateTimeKind property will be ignored when the time components of the 
            TdTimestampWithTimeZone structure is initialized with the time components 
            from the DateTime structure.  Therefore, adjustments will not be made for
            local time.</para>
            
            <para>If the fraction contained in the DateTime structure contains more digits
            than what has been specified in the <paramref name="scale"/>, the fraction will
            be truncated to match the scale.</para>
            </remarks>
        </member>
        <member name="M:Teradata.Client.Provider.TdTimestampWithTimeZone.#ctor(System.DateTimeOffset)">
            <summary>
            Initializes a new instance of TdTimestampWithTimeZone using the specified 
            <see cref="T:System.DateTimeOffset">DateTimeOffset</see> structure.
            </summary>
            <param name="dateTimeOffset">The DateTimeOffset structure that will be used to build 
            the date and time components.</param>
            
            <exception cref="T:System.ArgumentOutOfRangeException">The UTC representation of the timestamp 
            is out of the valid range.</exception>
            <exception cref="T:System.ArgumentException">The minutes and seconds of the UTC Offset must be 0.</exception>
            
            <remarks>
            <para>The DateTimeOffset structure can contain a fraction of a second that is
            more than 6 digits.  Teradata can only support a fraction that is 6 digits.
            Therefore, if the DateTimeOffset structure contains a fraction of a second that
            contains more than 6 digits, it will be truncated after the sixth
            position.</para>
            
            <para>The scale will default to the number of digits contained in the 
            fractional component of the DateTimeOffset structure.  The maximum value it will be
            set to is 6.</para>
            </remarks>
        </member>
        <member name="M:Teradata.Client.Provider.TdTimestampWithTimeZone.#ctor(System.DateTimeOffset,System.Int32)">
            <summary>
            Initializes a new instance of TdTimestampWithTimeZone using the specified 
            DateTimeOffset structure and offset.
            </summary>
            <param name="dateTimeOffset">The DateTimeOffset structure that will be used to build the date
            and time components.</param>
            <param name="scale">The scale of the timestamp.  The scale can range from 0 - 6.</param>
            
            <exception cref="T:System.ArgumentOutOfRangeException">The scale, UTC Offset, or the UTC representation 
            of the timestamp is out of the valid range.</exception>
            <exception cref="T:System.ArgumentException">The minutes and seconds of the UTC Offset must be 0.</exception>
            
            <remarks>
            <para>The DateTimeOffset structure can contain a fraction of a second that is
            more than 6 digits.  Teradata can only support a fraction that is 6 digits.
            Therefore, if the DateTimeOffset structure contains a fraction of a second that
            contains more than 6 digits, it will be truncated after the sixth
            position.</para>
            
            <para>The scale will default to the number of digits contained in the 
            fractional component of the DateTimeOffset structure.  The maximum value it will be
            set to is 6.</para>
            </remarks>
        </member>
        <member name="M:Teradata.Client.Provider.TdTimestampWithTimeZone.op_Explicit(System.DateTime)~Teradata.Client.Provider.TdTimestampWithTimeZone">
            <summary>
            A DateTime value is converted into a TdTimestampWithTimeZone.
            </summary>
            
            <param name="value">The DateTime value that is to be converted.</param>
            
            <returns>A TdTimestampWithTimeZone is returned that is equivalent to the DateTime value.</returns>
            
            <remarks>
            When the DateTime value is converted, the UtcOffset of the TdTimestampWithTimeZone will be 
            set to the local time of the machine.
            </remarks>
        </member>
        <member name="M:Teradata.Client.Provider.TdTimestampWithTimeZone.op_Explicit(System.DateTimeOffset)~Teradata.Client.Provider.TdTimestampWithTimeZone">
            <summary>
            A DateTimeOffset value is converted into a TdTimestampWithTimeZone.
            </summary>
            
            <param name="value">The DateTimeOffset value that is to be converted.</param>
            
            <returns>A TdTimestampWithTimeZone is returned that is equivalent to the DateTimeOffset value.</returns>
        </member>
        <member name="M:Teradata.Client.Provider.TdTimestampWithTimeZone.op_Explicit(Teradata.Client.Provider.TdTimestampWithTimeZone)~System.DateTimeOffset">
            <summary>
            A TdTimestampWithTimeZone is converted into a <see cref="T:System.DateTimeOffset"/>.
            </summary>
            
            <param name="value">The TdTimestampWithTimeZone that is to be converted.</param>
            
            <exception cref="T:System.ArgumentNullException">The <paramref name="value"/> is null.</exception>
            
            <returns>A DateTimeOffset is returned that is equivalent to the TdTimestampWithTimeZone value.</returns>
        </member>
        <member name="M:Teradata.Client.Provider.TdTimestampWithTimeZone.op_Explicit(Teradata.Client.Provider.TdDate)~Teradata.Client.Provider.TdTimestampWithTimeZone">
            <summary>
            The TdDate is converted into a TdTimestampWithTimeZone.
            </summary>
            
            <param name="value">The TdDate that is to be converted.</param>
            
            <returns>A TdTimestampWithTimeZone is returned.</returns>
            
            <remarks>
            <para>The time component of the timestamp will be set to "00:00:00.000000",
            and the UTC Offset will be set to the local time zone of the machine.</para>
            
            <para>If the TdDate <paramref name="value"/> is <see cref="F:Teradata.Client.Provider.TdDate.Null"/> a 
            <see cref="F:Teradata.Client.Provider.TdTimestampWithTimeZone.Null"/>
            is returned.</para>
            </remarks>
            <exception cref="T:System.ArgumentNullException">The TdDate that is to be converted is null.</exception>
        </member>
        <member name="M:Teradata.Client.Provider.TdTimestampWithTimeZone.op_Explicit(Teradata.Client.Provider.TdTimestamp)~Teradata.Client.Provider.TdTimestampWithTimeZone">
            <summary>
            The TdTimestamp is converted into a TdTimestampWithTimeZone.
            </summary>
            
            <param name="value">The TdTimestamp that is to be converted.</param>
            
            <returns>A TdTimestampWithTimeZone is returned.</returns>
            
            <remarks>
            <para>The UTC Offset will be set to the local time zone of the machine.</para>
            
            <para>If <paramref name="value"/> is <see cref="F:Teradata.Client.Provider.TdTimestamp.Null"/> a 
            <see cref="F:Teradata.Client.Provider.TdTimestampWithTimeZone.Null"/> is returned.</para>
            </remarks>
        </member>
        <member name="M:Teradata.Client.Provider.TdTimestampWithTimeZone.op_Explicit(Teradata.Client.Provider.TdTimestampWithTimeZone)~Teradata.Client.Provider.TdPeriodTimestampWithTimeZone">
            <summary>
            Converts a TdTimestampWithTimeZone into a TdPeriodTimestampWithTimeZone.
            </summary>
            
            <param name="value">The TdTimestampWithTimeZone that is to be converted.</param>
            
            <returns>a TdPeriodTimestampWithTimeZone is returned that has a beginning bound of 
            <paramref name="value"/> and ending bound that is one time granule
            greater than value.</returns>
            
            <exception cref="T:System.OverflowException">
               The ending bound could not be created because the <paramref name="value"/> 
               is set to <see cref="F:Teradata.Client.Provider.TdTimestampWithTimeZone.MaxValue"/>
            </exception>
            
            <remarks>
            A TdTimestampWithTimeZone can be cast to a TdPeriodTimestampWithTimeZone.  The beginning bounds of the 
            period will be <paramref name="value"/>, and the ending bound will be
            the value plus one time granule.
            </remarks>
        </member>
        <member name="M:Teradata.Client.Provider.TdTimestampWithTimeZone.CompareTo(Teradata.Client.Provider.TdTimestampWithTimeZone)">
            <summary>
            Compares this instance to the specified TdTimestampWithTimeZone <paramref name="other"/>. 
            </summary>
            
            <returns>
            The result of the comparison is returned as an integer.
            </returns>
            
            <remarks>
            	<para>
                    The integer returned when this instance is compared to <paramref name="other"/>
                    indicates the following:
                </para>
            	<para>
            		<list type="table">
            			<listheader>
            				<term>Return Value</term>
            				<description>Meaning</description>
            			</listheader>
            			<item>
            				<term>Less than Zero</term>
            				<description>
            					<para>
                                    This instance is less than <paramref name="other"/>.
                                </para>
            					<para>-or-</para>
            					<para>This instance is <see cref="F:Teradata.Client.Provider.TdTimestampWithTimeZone.Null"/>.</para>
            				</description>
            			</item>
            			<item>
            				<term>Zero</term>
            				<description>
            					<para>
                                    This instance is equal to <paramref name="other"/>.
                                </para>
            					<para>-or-</para>
            					<para>This instance is <Strong>Null</Strong> and value is <Strong>Null</Strong>.</para>
            				</description>
            			</item>
            			<item>
            				<term>Greater than Zero</term>
            				<description>
            					<para>
                                    This instance is greater than
                                    <paramref name="other"/>.
                                </para>
            					<para>-or-</para>
            					<para>
            						<paramref name="other"/> is <Strong>Null</Strong>.
                                </para>
            				</description>
            			</item>
            		</list>
            	</para>
            <para>
            When a comparison is performed between TdTimestampWithTimeZone values, the UTC offset
            is taken into account.  The UTC offset is subtracted from the time which results
            in the UTC Time.  It is possible that a value can roll into the 
            next or previous day.  If this should occur the date component will either increase
            to the next day or decrease to the previous day.  The following table shows the result 
            of several comparisons between TdTimestampWithTimeZone values:
            </para>
            <para>
            <list type="table">
            <listheader>
            <term>Comparison</term>
            <description>Result</description>
            </listheader>
            <item>
            <term>"2007-10-10 12:21:00+01:01" compare to "2007-10-10 09:11:00-02:10"</term>
            <description>0 -- the values are equal.</description>
            </item>
            <item>
            <term>"2007-01-21 20:21:00-04:00" compare to "2007-01-21 09:11:00+02:10"</term>
            <description>1 -- the left operand is greater than the right.</description>
            </item>
            <item>
            <term>"2007-04-11 01:54:00+03:00" compare to "2007-04-11 19:11:00-01:00"</term>
            <description>-1 -- the left operand is less than the right.</description>
            </item>
            <item>
            <term>"2007-04-11 00:30:00+03:00" compare to "2007-04-10 20:30:00-01:00"</term>
            <description>0 -- the values are equal.</description>
            </item>
            </list>
            </para>
            </remarks>
            
            <param name="other">The TdTimestampWithTimeZone to compare against.</param>
        </member>
        <member name="M:Teradata.Client.Provider.TdTimestampWithTimeZone.CompareTo(System.Object)">
            <summary>
            Compares this instance to the specified TdTimestampWithTimeZone <paramref name="obj"/>. 
            </summary>
            
            <returns>
            The result of the comparison is returned as an integer.
            </returns>
            
            <remarks>
            	<para>
                    The integer returned when this instance is compared to <paramref name="obj"/>
                    indicates the following:
                </para>
            	<para>
            		<list type="table">
            			<listheader>
            				<term>Return Value</term>
            				<description>Meaning</description>
            			</listheader>
            			<item>
            				<term>Less than Zero</term>
            				<description>
            					<para>This instance is less than <paramref name="obj"/>.</para>
            					<para>-or-</para>
            					<para>This instance is <see cref="F:Teradata.Client.Provider.TdTimestampWithTimeZone.Null"/>.</para>
            				</description>
            			</item>
            			<item>
            				<term>Zero</term>
            				<description>
            					<para>
                                    This instance is equal to <paramref name="obj"/>.
                                </para>
            					<para>-or-</para>
            					<para>This instance is <Strong>Null</Strong> and <paramref name="obj"/> is <Strong>Null</Strong>.</para>
            				</description>
            			</item>
            			<item>
            				<term>Greater than Zero</term>
            				<description>
            					<para>
                                    This instance is greater than <paramref name="obj"/>.
                                </para>
            					<para>-or-</para>
            					<para>
            						<paramref name="obj"/> is <Strong>Null</Strong> or a <c>null</c> reference.
                                </para>
            				</description>
            			</item>
            		</list>
            	</para>
            
              <para><paramref name="obj"/> must be an instance of TdTimestampWithTimeZone type or <c>null</c> reference.</para>
            
            Refer to <see cref="M:Teradata.Client.Provider.TdTimestampWithTimeZone.CompareTo(Teradata.Client.Provider.TdTimestampWithTimeZone)"/>for more information.
            </remarks>
            
            <exception cref="T:System.ArgumentException"><paramref name="obj"/> is not of type TdTimestampWithTimeZone</exception>
            
            <seealso cref="M:Teradata.Client.Provider.TdTimestampWithTimeZone.CompareTo(Teradata.Client.Provider.TdTimestampWithTimeZone)"/>
            
            <overloads>
            Compares this instance to the supplied object and returns whether it is less
            than, equal or greater than the supplied object.
            </overloads>
            
            <param name="obj">TdTimestampWithTimeZone instance to compare against.</param>
        </member>
        <member name="M:Teradata.Client.Provider.TdTimestampWithTimeZone.GetHashCode">
            <summary>
            Returns the hash code for this instance. 
            </summary>
            
            <returns>The hash code is returned</returns>
        </member>
        <member name="M:Teradata.Client.Provider.TdTimestampWithTimeZone.Equals(System.Object)">
            <summary>
                Compares this instance and <paramref name="obj"/> to determine whether they are equal.
            </summary>
            
            <returns><c>true</c> is returned if the two TdTimestampWithTimeZone are equal, <c>false</c> otherwise.</returns>
            
            <remarks>
            	<para><c>false</c> will be returned if:</para>
            	<list type="bullet">
            		<item>
                        This instance or <paramref name="obj"/> is <see cref="F:Teradata.Client.Provider.TdTimestampWithTimeZone.Null"/>.
                    </item>
            		<item>
                        This instance is not equal to <paramref name="obj"/>.
                    </item>
            		<item>
            			<paramref name="obj"/> is not of type TdTimestampWithTimeZone or <c>null</c>.
                    </item>
            	</list>
            	<para><c>true</c> will be returned if:</para>
            	<list type="bullet">
            		<item>
                        This instance and <paramref name="obj"/> are <Strong>Null</Strong>.
                    </item>
            		<item>
                        This instance is equal to <paramref name="obj"/>.
                    </item>
            	</list>
            
            <para>Refer to <see cref="M:Teradata.Client.Provider.TdTimestampWithTimeZone.CompareTo(Teradata.Client.Provider.TdTimestampWithTimeZone)"/> for more information.</para>
            </remarks>
            
            <example>
                The following code example uses various comparison methods and operators: 
                <code lang="CS">
            TdTimestampWithTimeZone  later = new TdTimestampWithTimeZone(new DateTime(2010, 8, 31, 23, 30, 0), new TimeSpan(-8, 0, 0));
            Object earlier = new TdTimestampWithTimeZone(new DateTime(2010, 8, 31, 15, 21, 0), new TimeSpan(-8, 0, 0));
             
            // The following comparison is equivalent to using
            //    false == TdTimestampWithTimeZone.Equals(later, (TdTimestampWithTimeZone) earlier)
            //    later != (TdTimestampWithTimeZone) earlier
            //    true == TdTimestampWithTimeZone.NotEquals(later, (TdTimestampWithTimeZone) earlier)
            //    
            if (false == later.Equals(earlier))
            {
               Console.WriteLine(“later does not equal earlier”);
            }
                </code>
            </example>
            
            <overloads>Returns a value indicating whether two instances of TdTimestampWithTimeZone are equal.</overloads>
            
            <param name="obj">TdTimestampWithTimeZone instance that will be compared to this instance of TdTimestampWithTimeZone.</param>
        </member>
        <member name="M:Teradata.Client.Provider.TdTimestampWithTimeZone.Equals(Teradata.Client.Provider.TdTimestampWithTimeZone)">
            <summary>
            Compares this instance and another TdTimestampWithTimeZone to determine whether they are equal. 
            </summary>
            
            <returns><c>true</c> if the two TdTimestampWithTimeZone are equal, <c>false</c> otherwise.</returns>
            
            <remarks>
            	<para><c>false</c> will be returned if:</para>
            	<list type="bullet">
            		<item>
                        This instance or <paramref name="other"/> is <see cref="F:Teradata.Client.Provider.TdTimestampWithTimeZone.Null"/>.
                    </item>
            		<item>
                        This instance is not equal to <paramref name="other"/>.
                    </item>
            	</list>
            	<para><c>true</c> will be returned if:</para>
            	<list type="bullet">
            		<item>
                        This instance and <paramref name="other"/> are <Strong>Null</Strong>.
                    </item>
            		<item>
                        This instance is equal to <paramref name="other"/>.
                    </item>
            	</list>
            
            <para>Refer to <see cref="M:Teradata.Client.Provider.TdTimestampWithTimeZone.CompareTo(Teradata.Client.Provider.TdTimestampWithTimeZone)"/> for more information.</para>
            </remarks>
            
            <param name="other">TdTimestampWithTimeZone instance that will be compared to this instance of TdTimestampWithTimeZone.</param>
        </member>
        <member name="M:Teradata.Client.Provider.TdTimestampWithTimeZone.Compare(Teradata.Client.Provider.TdTimestampWithTimeZone,Teradata.Client.Provider.TdTimestampWithTimeZone)">
            <summary>
            Compares two instances of TdTimestampWithTimeZone and returns a value indicating 
            whether <paramref name="left"/> is greater than, less than or equal to 
            <paramref name="right"/>.
            </summary>
            
            <returns>
            The result of the comparison is returned as an integer.
            </returns>
            
            <remarks>
            	<para>
                    The integer returned when <paramref name="left"/> is compared to <paramref name="right"/>
                    indicates the following:
                </para>
            	<para>
            	<list type="table">
            		<listheader>
            			<term>Return Value</term>
            			<description>Meaning</description>
            		</listheader>
            		<item>
            			<term>Less than zero</term>
            			<description>
                            <para><paramref name="left"/> is less than <paramref name="right"/>.</para> 
                            <para>-or-</para>
                            <para><paramref name="left"/> is <see cref="F:Teradata.Client.Provider.TdTimestampWithTimeZone.Null"/>.</para>
                        </description>
            		</item>
            		<item>
            			<term>Zero</term>
            			<description>
                            <para><paramref name="left"/> is equal to <paramref name="right"/>.</para>
                            <para>-or-</para>
                            <para><paramref name="left"/> and <paramref name="right"/> are <Strong>Null</Strong>.</para>
                        </description>
            		</item>
            		<item>
            			<term>Greater than zero</term>
            			<description>
                            <para><paramref name="left"/> is greater than <paramref name="right"/>.</para>
                            <para>-or-</para>
                            <para><paramref name="right"/> is <Strong>Null.</Strong></para>
                        </description>
            		</item>
            	</list>
                </para>
            </remarks>
            
            <seealso cref="M:Teradata.Client.Provider.TdTimestampWithTimeZone.CompareTo(Teradata.Client.Provider.TdTimestampWithTimeZone)"/>
            
            <param name="left">An instance of TdTimestampWithTimeZone.</param>
            <param name="right">An instance of TdTimestampWithTimeZone.</param>
            
            <remarks>
            <para>Refer to <see cref="M:Teradata.Client.Provider.TdTimestampWithTimeZone.CompareTo(Teradata.Client.Provider.TdTimestampWithTimeZone)"/> for more information.</para>
            </remarks>
        </member>
        <member name="M:Teradata.Client.Provider.TdTimestampWithTimeZone.Equals(Teradata.Client.Provider.TdTimestampWithTimeZone,Teradata.Client.Provider.TdTimestampWithTimeZone)">
            <summary>
                Compares two <see cref="T:Teradata.Client.Provider.TdTimestampWithTimeZone"/> instances to determine whether they are
                equal.
            </summary>
            
            <returns>
            A boolean is returned that indicates the result of the comparison.
            </returns>
            
            <remarks>
            	<para>
            		The value returned is <c>true</c> if the <paramref name="left"/> is 
                    equal to the <paramref name="right"/>, <c>false</c> otherwise.
                </para>
            	<para>
            		<list type="table">
            			<listheader>
            				<term>Return Value</term>
            				<description>Description</description>
            			</listheader>
            			<item>
            				<term><c>true</c></term>
                            <description>
                                <para><paramref name="left"/> and <paramref name="right"/> are <see cref="F:Teradata.Client.Provider.TdTimestampWithTimeZone.Null"/></para> 
                                <para>-or-</para>
                                <para><paramref name="left"/> is equal to <paramref name="right"/>.</para>
                            </description>
            			</item>
            			<item>
            				<term><c>false</c></term>
                            <description>
                            <para><paramref name="left"/> or <paramref name="right"/> is <strong>Null</strong></para>
                            <para>-or-</para>
                            <para><paramref name="left"/> is not equal to <paramref name="right"/>.</para>
                            </description>
            			</item>
            		</list>
            	</para>
            
            <para>Refer to <see cref="M:Teradata.Client.Provider.TdTimestampWithTimeZone.CompareTo(Teradata.Client.Provider.TdTimestampWithTimeZone)"/> for more information.</para>
            
            </remarks>
            
            <example>
                The following code example uses various comparison methods and operators.
                <code lang="CS">
            TdTimestampWithTimeZone  later = new TdTimestampWithTimeZone(new DateTime(2010, 8, 31, 23, 45, 0), new TimeSpan(-8, 0, 0));
            TdTimestampWithTimeZone earlier = new TdTimestampWithTimeZone(new DateTime(2010, 8, 31, 20, 30, 0), new TimeSpan(-8, 0, 0));
             
            // The following comparison methods and operators are equivalent
            if (false == TdTimestampWithTimeZone.Equals(later, earlier) ||
                later != earlier ||
                true == TdTimestampWithTimeZone.NotEquals(later, earlier) )
            {
               Console.WriteLine(“later does not equal earlier”);
            }
                </code>
            </example>
            
            <param name="left">A TdTimestampWithTimeZone instance.</param>
            <param name="right">A TdTimestampWithTimeZone instance.</param>
        </member>
        <member name="M:Teradata.Client.Provider.TdTimestampWithTimeZone.NotEquals(Teradata.Client.Provider.TdTimestampWithTimeZone,Teradata.Client.Provider.TdTimestampWithTimeZone)">
            <summary>
            Compares two TdTimestampWithTimeZone to determine whether the <paramref name="left"/> operand is 
            not equal to the <paramref name="right"/> operand.
            </summary>
            
            <returns>
            A boolean is returned that indicates the result of the comparison.
            </returns>
            
            <remarks>
            	<para>
            		The value returned is <c>true</c> if the <paramref name="left"/> is 
                    not equal to the <paramref name="right"/>, <c>false</c> otherwise.
                </para>
            	<para>
            		<list type="table">
            			<listheader>
            				<term>Return Value</term>
            				<description>Description</description>
            			</listheader>
            			<item>
            				<term><c>true</c></term>
                            <description>
                                <para><paramref name="left"/> or <paramref name="right"/> is <see cref="F:Teradata.Client.Provider.TdTimestampWithTimeZone.Null"/></para> 
                                <para>-or-</para>
                                <para><paramref name="left"/> is less than or greater than <paramref name="right"/>.</para>
                            </description>
            			</item>
            			<item>
            				<term><c>false</c></term>
                            <description>
                            <para><paramref name="left"/> and <paramref name="right"/> are <strong>Null</strong></para>
                            <para>-or-</para>
                            <para><paramref name="left"/> is equal to <paramref name="right"/>.</para>
                            </description>
            			</item>
            		</list>
            	</para>
            
            <para>Refer to <see cref="M:Teradata.Client.Provider.TdTimestampWithTimeZone.CompareTo(Teradata.Client.Provider.TdTimestampWithTimeZone)"/> for more information.</para>
            </remarks>
            
            <param name="left">An instance of TdTimestampWithTimeZone.</param>
            <param name="right">An instance of TdTimestampWithTimeZone.</param>        
        </member>
        <member name="M:Teradata.Client.Provider.TdTimestampWithTimeZone.GreaterThan(Teradata.Client.Provider.TdTimestampWithTimeZone,Teradata.Client.Provider.TdTimestampWithTimeZone)">
            <summary>
            Compares two TdTimestampWithTimeZone to determine whether the <paramref name="left"/> operand is 
            greater than the <paramref name="right"/> operand.
            </summary>
            
            <returns>
            A boolean is returned that indicates the result of the comparison.
            </returns>
            
            <remarks>
            	<para>
            		<c>true</c> if the <paramref name="left"/> is greater
                    than the <paramref name="right"/>, <c>false</c> otherwise.
                </para>
            	<para>
            		<list type="table">
            			<listheader>
            				<term>Return Value</term>
            				<description>Description</description>
            			</listheader>
            			<item>
            				<term><c>true</c></term>
                            <description><paramref name="left"/> and <paramref name="right"/> are not <see cref="F:Teradata.Client.Provider.TdTimestampWithTimeZone.Null"/> and
                            <paramref name="left"/> is greater than <paramref name="right"/>.
                            </description>
            			</item>
            			<item>
            				<term><c>false</c></term>
                            <description>
                            <para><paramref name="left"/> and / or <paramref name="right"/> is <strong>Null</strong> </para>
                            <para>-or-</para>
                            <para><paramref name="left"/> is less than or equal to <paramref name="right"/>.</para>
                            </description>
            			</item>
            		</list>
            	</para>
            
            <para>Comparison operators always returns <c>false</c> if one of the operands is <strong>Null</strong>. 
            Therefore, you must not assume that the reverse condition is <c>true</c>. For example you cannot 
            assume that the left operand is less than or equal to the right operand if the <c>GreaterThan</c> operator 
            returns <c>false</c>.</para> 
            
            <para>Refer to <see cref="M:Teradata.Client.Provider.TdTimestampWithTimeZone.CompareTo(Teradata.Client.Provider.TdTimestampWithTimeZone)"/> for more information.</para>
            
            </remarks>
            
            <param name="left">An instance of TdTimestampWithTimeZone.</param>
            <param name="right">An instance of TdTimestampWithTimeZone.</param>
        </member>
        <member name="M:Teradata.Client.Provider.TdTimestampWithTimeZone.GreaterThanOrEqual(Teradata.Client.Provider.TdTimestampWithTimeZone,Teradata.Client.Provider.TdTimestampWithTimeZone)">
            <summary>
            Compares two TdTimestampWithTimeZone to determine whether the <paramref name="left"/> operand is 
            greater than or equal to the <paramref name="right"/> operand.
            </summary>
            
            <returns>
            A boolean is returned that indicates the result of the comparison.
            </returns>
            
            <remarks>
            	<para>
            		The value returned is <c>true</c> if the <paramref name="left"/> is greater
                    than or equal to the <paramref name="right"/>, <c>false</c> otherwise.
                </para>
            	<para>
            		<list type="table">
            			<listheader>
            				<term>Return Value</term>
            				<description>Description</description>
            			</listheader>
            			<item>
            				<term><c>true</c></term>
                            <description><paramref name="left"/> and <paramref name="right"/> are not <see cref="F:Teradata.Client.Provider.TdTimestampWithTimeZone.Null"/> and
                            <paramref name="left"/> is greater than or equal to <paramref name="right"/>.
                            </description>
            			</item>
            			<item>
            				<term><c>false</c></term>
                            <description>
                            <para><paramref name="left"/> and / or <paramref name="right"/> is <strong>Null</strong> </para>
                            <para>-or-</para>
                            <para><paramref name="left"/> is less than <paramref name="right"/>.</para>
                            </description>
            			</item>
            		</list>
            	</para>
            
            <para>Comparison operators always returns <c>false</c> if one of the operands is <strong>Null</strong>. 
            Therefore, you must not assume that the reverse condition is <c>true</c>. For example you cannot 
            assume that the left operand is less than the right operand if <c>GreaterThanOrEqual</c> operator 
            returns <c>false</c>.</para> 
            
            <para>Refer to <see cref="M:Teradata.Client.Provider.TdTimestampWithTimeZone.CompareTo(Teradata.Client.Provider.TdTimestampWithTimeZone)"/> for more information.</para>
            </remarks>
            
            <param name="left">An instance of TdTimestampWithTimeZone.</param>
            <param name="right">An instance of TdTimestampWithTimeZone.</param>
        </member>
        <member name="M:Teradata.Client.Provider.TdTimestampWithTimeZone.LessThan(Teradata.Client.Provider.TdTimestampWithTimeZone,Teradata.Client.Provider.TdTimestampWithTimeZone)">
            <summary>
            Compares two TdTimestampWithTimeZone to determine whether the <paramref name="left"/> operand is 
            less than the <paramref name="right"/> operand.
            </summary>
            
            <returns>
            A boolean is returned that indicates the result of the comparison.
            </returns>
            
            <remarks>
            	<para>
            		The value returned is <c>true</c> if the <paramref name="left"/> is less
                    than the <paramref name="right"/>, <c>false</c> otherwise.
                </para>
            	<para>
            		<list type="table">
            			<listheader>
            				<term>Return Value</term>
            				<description>Description</description>
            			</listheader>
            			<item>
            				<term><c>true</c></term>
                            <description><paramref name="left"/> and <paramref name="right"/> are not <see cref="F:Teradata.Client.Provider.TdTimestampWithTimeZone.Null"/> and
                            <paramref name="left"/> is less than <paramref name="right"/>.
                            </description>
            			</item>
            			<item>
            				<term><c>false</c></term>
                            <description>
                            <para><paramref name="left"/> and / or <paramref name="right"/> is <strong>Null</strong></para>
                            <para>-or-</para>
                            <para><paramref name="left"/> is greater than or equal to <paramref name="right"/>.</para>
                            </description>
            			</item>
            		</list>
            	</para>
            
            <para>Comparison operators always returns <c>false</c> if one of the operands is <strong>Null</strong>. 
            Therefore, you must not assume that the reverse condition is <c>true</c>. For example you cannot 
            assume that the left operand is greater than or equal the right operand if the <c>LessThan</c> operator 
            returns <c>false</c>.</para> 
            
            <para>Refer to <see cref="M:Teradata.Client.Provider.TdTimestampWithTimeZone.CompareTo(Teradata.Client.Provider.TdTimestampWithTimeZone)"/> for more information.</para>
            
            </remarks>
            
            <param name="left">An instance of TdTimestampWithTimeZone.</param>
            <param name="right">An instance of TdTimestampWithTimeZone.</param>
        </member>
        <member name="M:Teradata.Client.Provider.TdTimestampWithTimeZone.LessThanOrEqual(Teradata.Client.Provider.TdTimestampWithTimeZone,Teradata.Client.Provider.TdTimestampWithTimeZone)">
            <summary>
            Compares two TdTimestampWithTimeZones to determine whether the <paramref name="left"/> operand is 
            less than or equal to the <paramref name="right"/> operand.
            </summary>
            
            <returns>
            A boolean is returned that indicates the result of the comparison.
            </returns>
            
            <remarks>
            	<para>
            		The value returned is <c>true</c> if the <paramref name="left"/> is less
                    than or equal to the <paramref name="right"/>, <c>false</c> otherwise.
                </para>
            	<para>
            		<list type="table">
            			<listheader>
            				<term>Return Value</term>
            				<description>Description</description>
            			</listheader>
            			<item>
            				<term><c>true</c></term>
                            <description><paramref name="left"/> and <paramref name="right"/> are not <see cref="F:Teradata.Client.Provider.TdTimestampWithTimeZone.Null"/> and
                            <paramref name="left"/> is less than or equal to <paramref name="right"/>.
                            </description>
            			</item>
            			<item>
            				<term><c>false</c></term>
                            <description>
                            <para><paramref name="left"/> and / or <paramref name="right"/> is <strong>Null</strong></para>
                            <para>-or-</para>
                            <para><paramref name="left"/> is greater than <paramref name="right"/>.</para>
                            </description>
            			</item>
            		</list>
            	</para>
            
            <para>Comparison operators always returns <c>false</c> if one of the operands is <strong>Null</strong>. 
            Therefore, you must not assume that the reverse condition is <c>true</c>. For example you cannot 
            assume that the left operand is greater than the right operand if the <c>LessThanOrEqual</c> operator 
            returns <c>false</c>.</para> 
            
            <para>Refer to <see cref="M:Teradata.Client.Provider.TdTimestampWithTimeZone.CompareTo(Teradata.Client.Provider.TdTimestampWithTimeZone)"/> for more information.</para>
            
            </remarks>
            
            <param name="left">An instance of TdTimestampWithTimeZone.</param>
            <param name="right">An instance of TdTimestampWithTimeZone.</param>
        </member>
        <member name="M:Teradata.Client.Provider.TdTimestampWithTimeZone.op_Equality(Teradata.Client.Provider.TdTimestampWithTimeZone,Teradata.Client.Provider.TdTimestampWithTimeZone)">
            <summary>
            Compares two TdTimestampWithTimeZones to determine whether the <paramref name="left"/> operand is 
            equal to the <paramref name="right"/> operand.
            </summary>
            
            <returns>
            A boolean is returned that indicates the result of the comparison.
            </returns>
            
            <remarks>
            	<para>
            		The value returned is <c>true</c> if the <paramref name="left"/> is 
                    equal to the <paramref name="right"/>, <c>false</c> otherwise.
                </para>
            	<para>
            		<list type="table">
            			<listheader>
            				<term>Return Value</term>
            				<description>Description</description>
            			</listheader>
            			<item>
            				<term><c>true</c></term>
                            <description>
                                <para><paramref name="left"/> and <paramref name="right"/> are <see cref="F:Teradata.Client.Provider.TdTimestampWithTimeZone.Null"/></para> 
                                <para>-or-</para>
                                <para><paramref name="left"/> is equal to <paramref name="right"/>.</para>
                            </description>
            			</item>
            			<item>
            				<term><c>false</c></term>
                            <description>
                            <para><paramref name="left"/> or <paramref name="right"/> is <strong>Null</strong></para>
                            <para>-or-</para>
                            <para><paramref name="left"/> is not equal to <paramref name="right"/>.</para>
                            </description>
            			</item>
            		</list>
            	</para>
            
            <para>Unlike comparison operators, Equality operators do not always return 
            <c>false</c> when left and right operands are <strong>Null</strong>. 
            Therefore the reverse condition can be considered <c>true</c>. 
            TdTimestampWithTimeZone implementation is very similar to the 
            <see cref="T:System.Nullable"/> class in this regard.</para>
            
            <para>For more information on how the comparison is performed refer to <see cref="M:Teradata.Client.Provider.TdTimestampWithTimeZone.CompareTo(Teradata.Client.Provider.TdTimestampWithTimeZone)"/>.</para>
            </remarks>
            <param name="left">An instance of TdTimestampWithTimeZone.</param>
            <param name="right">An instance of TdTimestampWithTimeZone.</param>        
            <example>
            Following example shows that the Equality operator can safely be used in an if statement.
            <code>
            TdTimestampWithTimeZone x = TdTimestampWithTimeZone.Null;
            TdTimestampWithTimeZone y = TdTimestampWithTimeZone.MinValue;
            
            if (x == y)
            {
                // x is equal to y.
                Console.WriteLine(@"X is equal to Y").
            }
            else
            {
                // x is not equal y
                Console.WriteLine(@"X is not equal to Y").
            }
            
            y = TdTimestampWithTimeZone.Null;
            
            if (x == y)
            {
                // x is equal to y.
                Console.WriteLine(@"X is equal to Y").
            }
            else
            {
                // x is not equal y
                Console.WriteLine(@"X is not equal to Y").
            }
            </code>
            </example>
        </member>
        <member name="M:Teradata.Client.Provider.TdTimestampWithTimeZone.op_Inequality(Teradata.Client.Provider.TdTimestampWithTimeZone,Teradata.Client.Provider.TdTimestampWithTimeZone)">
            <summary>
            Compares two TdTimestampWithTimeZones to determine whether the <paramref name="left"/> operand is 
            not equal to the <paramref name="right"/> operand.
            </summary>
            
            <returns>
            A boolean is returned that indicates the result of the comparison.
            </returns>
            
            <remarks>
            	<para>
            		The value returned is <c>true</c> if the <paramref name="left"/> is 
                    not equal to the <paramref name="right"/>, <c>false</c> otherwise.
                </para>
            	<para>
            		<list type="table">
            			<listheader>
            				<term>Return Value</term>
            				<description>Description</description>
            			</listheader>
            			<item>
            				<term><c>true</c></term>
                            <description>
                                <para><paramref name="left"/> or <paramref name="right"/> is <see cref="F:Teradata.Client.Provider.TdTimestampWithTimeZone.Null"/></para> 
                                <para>-or-</para>
                                <para><paramref name="left"/> is less than or greater than <paramref name="right"/>.</para>
                            </description>
            			</item>
            			<item>
            				<term><c>false</c></term>
                            <description>
                            <para><paramref name="left"/> and <paramref name="right"/> are <strong>Null</strong></para>
                            <para>-or-</para>
                            <para><paramref name="left"/> is equal to <paramref name="right"/>.</para>
                            </description>
            			</item>
            		</list>
            	</para>
            
            <para>For more information on how the comparison is performed refer to <see cref="M:Teradata.Client.Provider.TdTimestampWithTimeZone.CompareTo(Teradata.Client.Provider.TdTimestampWithTimeZone)"/>.</para>
            </remarks>
            
            <param name="left">An instance of TdTimestampWithTimeZone.</param>
            <param name="right">An instance of TdTimestampWithTimeZone.</param>        
        </member>
        <member name="M:Teradata.Client.Provider.TdTimestampWithTimeZone.op_GreaterThan(Teradata.Client.Provider.TdTimestampWithTimeZone,Teradata.Client.Provider.TdTimestampWithTimeZone)">
             <summary>
             Compares two TdTimestampWithTimeZones to determine whether the <paramref name="left"/> operand is 
             greater than the <paramref name="right"/> operand.
             </summary>
             
             <returns>
             A boolean is returned that indicates the result of the comparison.
             </returns>
             
             <remarks>
             	<para>
             		The value returned is <c>true</c> if the <paramref name="left"/> is greater
                     than the <paramref name="right"/>, <c>false</c> otherwise.
                 </para>
             	<para>
             		<list type="table">
             			<listheader>
             				<term>Return Value</term>
             				<description>Description</description>
             			</listheader>
             			<item>
             				<term><c>true</c></term>
                             <description><paramref name="left"/> and <paramref name="right"/> are not <see cref="F:Teradata.Client.Provider.TdTimestampWithTimeZone.Null"/> and
                             <paramref name="left"/> is greater than <paramref name="right"/>.
                             </description>
             			</item>
             			<item>
             				<term><c>false</c></term>
                             <description>
                             <para><paramref name="left"/> and / or <paramref name="right"/> is <strong>Null</strong> </para>
                             <para>-or-</para>
                             <para><paramref name="left"/> is less than or equal to <paramref name="right"/>.</para>
                             </description>
             			</item>
             		</list>
             	</para>
             
             <para>Comparison operators always returns <c>false</c> if one of the operands is <strong>Null</strong>. 
             Therefore, you must not assume that the reverse condition is <c>true</c>. For example you cannot 
             assume that the left operand is less than or equal to the right operand if the "<c>&gt;</c>" operator 
             returns <c>false</c>.</para> 
            
             <para>For more information on how the comparison is performed refer to <see cref="M:Teradata.Client.Provider.TdTimestampWithTimeZone.CompareTo(Teradata.Client.Provider.TdTimestampWithTimeZone)"/>.</para>
             </remarks>
             
             <param name="left">An instance of TdTimestampWithTimeZone.</param>
             <param name="right">An instance of TdTimestampWithTimeZone.</param>
        </member>
        <member name="M:Teradata.Client.Provider.TdTimestampWithTimeZone.op_GreaterThanOrEqual(Teradata.Client.Provider.TdTimestampWithTimeZone,Teradata.Client.Provider.TdTimestampWithTimeZone)">
            <summary>
            Compares two TdTimestampWithTimeZones to determine whether the <paramref name="left"/> operand is 
            greater than or equal to the <paramref name="right"/> operand.
            </summary>
            
            <returns>
            A boolean is returned that indicates the result of the comparison.
            </returns>
            
            <remarks>
            	<para>
            		<c>true</c> if the <paramref name="left"/> is greater
                    than or equal to the <paramref name="right"/>, <c>false</c> otherwise.
                </para>
            	<para>
            		<list type="table">
            			<listheader>
            				<term>Return Value</term>
            				<description>Description</description>
            			</listheader>
            			<item>
            				<term><c>true</c></term>
                            <description><paramref name="left"/> and <paramref name="right"/> are not <see cref="F:Teradata.Client.Provider.TdTimestampWithTimeZone.Null"/> and
                            <paramref name="left"/> is greater than or equal to <paramref name="right"/>.
                            </description>
            			</item>
            			<item>
            				<term><c>false</c></term>
                            <description>
                            <para><paramref name="left"/> and / or <paramref name="right"/> is <strong>Null</strong> </para>
                            <para>-or-</para>
                            <para><paramref name="left"/> is less than <paramref name="right"/>.</para>
                            </description>
            			</item>
            		</list>
            	</para>
            
            <para>Comparison operators always returns <c>false</c> if one of the operands is <strong>Null</strong>. 
            Therefore, you must not assume that the reverse condition is <c>true</c>. For example you cannot 
            assume that the left operand is less than the right operand if the "<c>&gt;=</c>" operator 
            returns <c>false</c>.</para> 
            
            <para>For more information on how the comparison is performed refer to <see cref="M:Teradata.Client.Provider.TdTimestampWithTimeZone.CompareTo(Teradata.Client.Provider.TdTimestampWithTimeZone)"/>.</para>
            </remarks>
            
            <param name="left">An instance of TdTimestampWithTimeZone.</param>
            <param name="right">An instance of TdTimestampWithTimeZone.</param>
        </member>
        <member name="M:Teradata.Client.Provider.TdTimestampWithTimeZone.op_LessThan(Teradata.Client.Provider.TdTimestampWithTimeZone,Teradata.Client.Provider.TdTimestampWithTimeZone)">
            <summary>
            Compares two TdTimestampWithTimeZones to determine whether the <paramref name="left"/> operand is 
            less than the <paramref name="right"/> operand.
            </summary>
            
            <returns>
            A boolean is returned that indicates the result of the comparison.
            </returns>
            
            <remarks>
            	<para>
            		The value returned is <c>true</c> if the <paramref name="left"/> is less
                    than the <paramref name="right"/>, <c>false</c> otherwise.
                </para>
            	<para>
            		<list type="table">
            			<listheader>
            				<term>Return Value</term>
            				<description>Description</description>
            			</listheader>
            			<item>
            				<term><c>true</c></term>
                            <description><paramref name="left"/> and <paramref name="right"/> are not <see cref="F:Teradata.Client.Provider.TdTimestampWithTimeZone.Null"/> and
                            <paramref name="left"/> is less than <paramref name="right"/>.
                            </description>
            			</item>
            			<item>
            				<term><c>false</c></term>
                            <description>
                            <para><paramref name="left"/> and / or <paramref name="right"/> is <strong>Null</strong></para>
                            <para>-or-</para>
                            <para><paramref name="left"/> is greater than or equal to <paramref name="right"/>.</para>
                            </description>
            			</item>
            		</list>
            	</para>
            
            <para>Comparison operators always returns <c>false</c> if one of the operands is <strong>Null</strong>. 
            Therefore, you must not assume that the reverse condition is <c>true</c>. For example you cannot 
            assume that the left operand is greater than or equal the right operand if the "<c>&lt;</c>" operator 
            returns <c>false</c>.</para> 
            
            <para>For more information on how the comparison is performed refer to <see cref="M:Teradata.Client.Provider.TdTimestampWithTimeZone.CompareTo(Teradata.Client.Provider.TdTimestampWithTimeZone)"/>.</para>
            </remarks>
            
            <param name="left">An instance of TdTimestampWithTimeZone.</param>
            <param name="right">An instance of TdTimestampWithTimeZone.</param>
        </member>
        <member name="M:Teradata.Client.Provider.TdTimestampWithTimeZone.op_LessThanOrEqual(Teradata.Client.Provider.TdTimestampWithTimeZone,Teradata.Client.Provider.TdTimestampWithTimeZone)">
            <summary>
            Compares two TdTimestampWithTimeZones to determine whether the <paramref name="left"/> operand is 
            less than or equal to the <paramref name="right"/> operand.
            </summary>
            
            <returns>
            A boolean is returned that indicates the result of the comparison.
            </returns>
            
            <remarks>
            	<para>
            		The value returned is <c>true</c> if the <paramref name="left"/> is less
                    than or equal to the <paramref name="right"/>, <c>false</c> otherwise.
                </para>
            	<para>
            		<list type="table">
            			<listheader>
            				<term>Return Value</term>
            				<description>Description</description>
            			</listheader>
            			<item>
            				<term><c>true</c></term>
                            <description><paramref name="left"/> and <paramref name="right"/> are not <see cref="F:Teradata.Client.Provider.TdTimestampWithTimeZone.Null"/> and
                            <paramref name="left"/> is less than or equal to <paramref name="right"/>.
                            </description>
            			</item>
            			<item>
            				<term><c>false</c></term>
                            <description>
                            <para><paramref name="left"/> and / or <paramref name="right"/> is <strong>Null</strong></para>
                            <para>-or-</para>
                            <para><paramref name="left"/> is greater than <paramref name="right"/>.</para>
                            </description>
            			</item>
            		</list>
            	</para>
            
            <para>Comparison operators always returns <c>false</c> if one of the operands is <strong>Null</strong>. 
            Therefore, you must not assume that the reverse condition is <c>true</c>. For example you cannot 
            assume that the left operand is greater than the right operand if the "<c>&lt;=</c>" operator 
            returns <c>false</c>.</para> 
            
            <para>For more information on how the comparison is performed refer to <see cref="M:Teradata.Client.Provider.TdTimestampWithTimeZone.CompareTo(Teradata.Client.Provider.TdTimestampWithTimeZone)"/>.</para>
            </remarks>
            
            <param name="left">An instance of TdTimestampWithTimeZone.</param>
            <param name="right">An instance of TdTimestampWithTimeZone.</param>
        </member>
        <member name="M:Teradata.Client.Provider.TdTimestampWithTimeZone.Add(System.TimeSpan)">
            <summary>
            The specified TimeSpan will be added to this instance of TdTimestampWithTimeZone.
            </summary>
            
            <param name="timeSpan">The TimeSpan that will be added.</param>
            
            <returns>A TdTimestampWithTimeZone is returned that is the result of the TimeSpan added to this 
            instance of TdTimestampWithTimeZone.</returns>
            
            <exception cref="T:System.OverflowException">The result could not be represented as a TdTimestampWithTimeZone.</exception>
            
            <remarks>
            <para>If this instance of TdTimestampWithTimeZone is <strong>Null</strong> a <see cref="F:Teradata.Client.Provider.TdTimestampWithTimeZone.Null"/> 
            will be returned.</para>
            
            <para>The TimeSpan object can contain data about the number of days, hours, 
            minutes, seconds, and fractional seconds.  </para>
            
            <para>If the scale between this instance of TdTimestampWithTimeZone and the <paramref name="timeSpan"/> parameter are different
            the arithmetic operation will be performed using the different scales.  The result will then be
            <strong>truncated</strong> to match the scale of the timestamp.  For example, the addition operation</para>
            
            <para><code>TdTimestampWithTimeZone.Parse("2008-10-10 12:48:53.2123+08:00") + TimeSpan.Parse("00:02:03.000099")</code></para>
            
            <para>results in a TdTimestampWithTimeZone value of "2008-10-10 12:50:56.2123+08:00".</para>
            
            <para>A <see cref="T:System.TimeSpan"/> can have a scale up to 7.  A TdTimestampWithTimeZone has a maximum scale of 6.  
            When performing an arithmetic operation, only the first 6 digits to the right of the decimal
            point of the TimeSpan operand will be considered.  The 7th digit will be ignored.</para>
            </remarks>
        </member>
        <member name="M:Teradata.Client.Provider.TdTimestampWithTimeZone.Add(Teradata.Client.Provider.TdIntervalDayToSecond)">
            <summary>
               Adds the specified <see cref="T:Teradata.Client.Provider.TdIntervalDayToSecond"/> to this instance of 
               <see cref="T:Teradata.Client.Provider.TdTimestampWithTimeZone"/>.
            </summary>
            <returns>
               A <strong>TdTimestampWithTimeZone</strong> is returned that is the result of adding the 
               <strong>TdIntervalDayToSecond</strong> to this instance of 
               <strong>TdTimestampWithTimeZone</strong>.
            </returns>
            <exception cref="T:System.OverflowException">
               Unable to add the specified <strong>TdIntervalDayToSecond</strong> to this instance of 
               <strong>TdTimestampWithTimeZone</strong>.
            </exception>
            <remarks>
            <para>
               If <paramref name="interval"/> or this instance of <strong>TdTimestampWithTimeZone</strong> 
               is <strong>Null</strong> a <see cref="F:Teradata.Client.Provider.TdTimestampWithTimeZone.Null"/> will be returned.        
            </para>
            <para>
               The <see cref="T:Teradata.Client.Provider.TdIntervalDayToSecond"/> interval will be added to this instance of
               <strong>TdTimestampWithTimeZone</strong>. 
            </para>
            <para>
               If the scale between this instance of <strong>TdTimestampWithTimeZone</strong> and the 
               <paramref name="interval"/> parameter are different, the arithmetic operation will be 
               performed using the different scales.  The result will then be truncated to match the
               scale of the <strong>TdTimestampWithTimeZone</strong>.  For example, if the 
               <strong>TdIntervalDayToSecond</strong> value of "222 10:25:40.61234"
               (222 days, 10 hours, 25 minutes and 40.61234 seconds) is added to the
               <strong>TdTimestampWithTimeZone</strong> value of 
               "2008-10-10 12:50:56.2123+08:00" the operation will result in a
               <strong>TdTimestampWithTimeZone</strong> value of
               "2009-05-20 23:16:36.8246+08:00".
            </para>
            </remarks>
            <param name="interval">
               A <strong>TdIntervalDayToSecond</strong> that will be added to this 
               instance of <strong>TdTimestampWithTimeZone</strong>.
            </param>
        </member>
        <member name="M:Teradata.Client.Provider.TdTimestampWithTimeZone.Add(Teradata.Client.Provider.TdIntervalYearToMonth)">
            <summary>
               Adds the specified <see cref="T:Teradata.Client.Provider.TdIntervalYearToMonth"/> to this 
               instance of <see cref="T:Teradata.Client.Provider.TdTimestampWithTimeZone"/>.
            </summary>
            <returns>
               A <strong>TdTimestampWithTimeZone</strong> is returned that is the result of adding the 
               <strong>TdIntervalYearToMonth</strong> to this instance of 
               <strong>TdTimestampWithTimeZone</strong>.
            </returns>
            <exception cref="T:System.OverflowException">
               Unable to add the specified <strong>TdIntervalYearToMonth</strong> to this instance of 
               <strong>TdTimestampWithTimeZone</strong>.
            </exception>
            <remarks>
            <para>
               If <paramref name="interval"/> or this instance of <strong>TdTimestampWithTimeZone</strong>
               is <strong>Null</strong> a <see cref="F:Teradata.Client.Provider.TdTimestampWithTimeZone.Null"/> will be returned.
            </para>
            <para>
               The <paramref name="interval"/> interval will be
               added to this instance of <strong>TdTimestampWithTimeZone</strong>. For example, if the 
               <strong>TdIntervalYearToMonth</strong> value of "10-03" (10 years, 3 months)
               is added to the <strong>TdTimestampWithTimeZone</strong> value of 
               "2008-10-10 12:50:56.2123+08:00" the operation will result in a  
               <strong>TdTimestampWithTimeZone</strong> value of 
               "2019-01-10 12:50:56.2123+08:00".
            </para>
            </remarks>
            <param name="interval">
               A <strong>TdIntervalYearToMonth</strong> that will be added to this instance
               of <strong>TdTimestampWithTimeZone.</strong>.
            </param>
        </member>
        <member name="M:Teradata.Client.Provider.TdTimestampWithTimeZone.Subtract(System.TimeSpan)">
            <summary>
            The specified TimeSpan will be subtracted from this instance of TdTimestampWithTimeZone.
            </summary>
            
            <param name="timeSpan">The TimeSpan that will be subtracted.</param>
            
            <exception cref="T:System.OverflowException">The result could not be represented as a TdTimestampWithTimeZone.</exception>
            
            <returns>A TdTimestampWithTimeZone is returned that is the result of the TimeSpan subtracted from
            this instance of TdTimestampWithTimeZone.</returns>
            
            <remarks>
            <para>If this instance of TdTimestampWithTimeZone is <strong>Null</strong> a <see cref="F:Teradata.Client.Provider.TdTimestampWithTimeZone.Null"/> 
            will be returned.</para>
            
            <para>The TimeSpan object can contain data about the number of days, hours, minutes, 
            seconds, and fractional seconds.  </para>
            
            <para>If the scale between this instance of TdTimestampWithTimeZone and the <paramref name="timeSpan"/> parameter are different
            the arithmetic operation will be performed using the different scales.  The result will then be
            <strong>truncated</strong> to match the scale of the timestamp.  For example, the addition operation</para>
            
            <para><code>TdTimestampWithTimeZone.Parse("2008-10-10 12:48:53.2123+08:00") - TimeSpan.Parse("00:02:03.000099")</code></para>
            
            <para>results in a TdTimestampWithTimeZone value of "2008-10-10 12:46:30.2122+08:00".</para>
            
            <para>A <see cref="T:System.TimeSpan"/> can have a scale up to 7.  A TdTimestampWithTimeZone has a maximum scale of 6.  
            When performing an arithmetic operation, only the first 6 digits to the right of the decimal
            point of the TimeSpan operand will be considered.  The 7th digit will be ignored.</para>
            </remarks>
        </member>
        <member name="M:Teradata.Client.Provider.TdTimestampWithTimeZone.Subtract(Teradata.Client.Provider.TdIntervalDayToSecond)">
            <summary>
               Subtracts the specified <see cref="T:Teradata.Client.Provider.TdIntervalDayToSecond"/> from this instance of 
               <see cref="T:Teradata.Client.Provider.TdTimestampWithTimeZone"/>.
            </summary>
            <returns>
               A <strong>TdTimestampWithTimeZone</strong> is returned that is the result of subtracting the 
               <strong>TdIntervalDayToSecond</strong> from this instance of 
               <strong>TdTimestampWithTimeZone</strong>.
            </returns>
            <exception cref="T:System.OverflowException">
               Unable to subtract the specified <strong>TdIntervalDayToSecond</strong> from this instance of 
               <strong>TdTimestampWithTimeZone</strong>.
            </exception>
            <remarks>
            <para>
               If <paramref name="interval"/> or this instance of <strong>TdTimestampWithTimeZone</strong>
               is <strong>Null</strong> a <see cref="F:Teradata.Client.Provider.TdTimestampWithTimeZone.Null"/> will be returned.        
            </para>
            <para>
               The <strong>TdIntervalDayToSecond</strong> interval will be subtracted from this
               instance of <strong>TdTimestampWithTimeZone</strong>. 
            </para>
            <para>
               If the scale between this instance of <strong>TdTimestampWithTimeZone</strong> and the 
               <paramref name="interval"/> are different, the arithmetic operation will be 
               performed using the different scales.  The result will then be truncated to match the
               scale of this instance of <strong>TdTimestampWithTimeZone</strong>.  For example, if the 
               <strong>TdIntervalDayToSecond</strong> value of "222 10:25:40.61234"
               (222 days, 10 hours, 25 minutes and 40.61234 seconds) is subtracted from the
               <strong>TdTimestampWithTimeZone</strong> value of 
               "2008-10-10 12:50:56.2123+08:00" the operation will result in a
               <strong>TdTimestampWithTimeZone</strong> value 
               of "2008-03-02 02:25:15.5999+08:00".
            </para>
            </remarks>
            <param name="interval">
               A <strong>TdIntervalDayToSecond</strong> that will be subtracted from this 
               instance of <strong>TdTimestampWithTimeZone</strong>.
            </param>
        </member>
        <member name="M:Teradata.Client.Provider.TdTimestampWithTimeZone.Subtract(Teradata.Client.Provider.TdIntervalYearToMonth)">
            <summary>
               Subtracts the specified <see cref="T:Teradata.Client.Provider.TdIntervalYearToMonth"/> from this instance of
               <see cref="T:Teradata.Client.Provider.TdTimestampWithTimeZone"/>.
            </summary>
            <returns>
               A <strong>TdTimestampWithTimeZone</strong> is returned that is the result of subtracting the 
               <strong>TdIntervalYearToMonth</strong> from this instance of 
               <strong>TdTimestampWithTimeZone</strong>.
            </returns>
            <exception cref="T:System.OverflowException">
               Unable to subtract the specified <strong>TdIntervalYearToMonth</strong> from this instance of 
               <strong>TdTimestampWithTimeZone</strong>.
            </exception>
            <remarks>
            <para>
               If <paramref name="interval"/> or this instance of <strong>TdTimestampWithTimeZone</strong>
               is <strong>Null</strong> a <see cref="F:Teradata.Client.Provider.TdTimestamp.Null"/> will be returned.
            </para>
            <para>
               The <paramref name="interval"/> interval will be subtracted from this
               instance of <strong>TdTimestampWithTimeZone</strong>. For example, if the 
               <strong>TdIntervalYearToMonth</strong> value of "10-03" (10 years, 3 months)
               is subtracted from the <strong>TdTimestampWithTimeZone</strong> value of 
               "2008-10-10 12:50:56.2123+08:00" the operation will result in a  
               <strong>TdTimestampWithTimeZone</strong> value of 
               "1998-07-10 12:50:56.2123+08:00".
            </para>
            </remarks>
            <param name="interval">
               A <strong>TdIntervalYearToMonth</strong> that will be subtracted from this instance
               of <strong>TdTimestampWithTimeZone.</strong>.
            </param>
        </member>
        <member name="M:Teradata.Client.Provider.TdTimestampWithTimeZone.AddYears(System.Int32)">
            <summary>
            Adds the specified number of years to the this instance of TdTimestampWithTimeZone.
            </summary>
            
            <param name="years">The number of years to add to the TdTimestampWithTimeZone.</param>
            
            <exception cref="T:System.OverflowException">The result of the arithmetic operation resulted in an overflow of the timestamp.</exception>
            
            <returns>A TdTimestampWithTimeZone structure is returned.</returns>
            
            <remarks>
            <para>If this instance of TdTimestampWithTimeZone is <strong>Null</strong> a <see cref="F:Teradata.Client.Provider.TdTimestampWithTimeZone.Null"/> 
            will be returned.</para>
            </remarks>
        </member>
        <member name="M:Teradata.Client.Provider.TdTimestampWithTimeZone.AddMonths(System.Int32)">
            <summary>
            Add the specified number of months to the this instance of TdTimestampWithTimeZone.
            </summary>
            
            <param name="months">The number of months to add to the date.</param>
            
            <exception cref="T:System.OverflowException">The result of the arithmetic operation resulted in an overflow of the timestamp.</exception>
            
            <returns>A TdTimestampWithTimeZone structure is returned.</returns>
            
            <remarks>
            <para>If this instance of TdTimestampWithTimeZone is <strong>Null</strong> a <see cref="F:Teradata.Client.Provider.TdTimestampWithTimeZone.Null"/> 
            will be returned.</para>
            </remarks>
        </member>
        <member name="M:Teradata.Client.Provider.TdTimestampWithTimeZone.op_Addition(Teradata.Client.Provider.TdTimestampWithTimeZone,System.TimeSpan)">
             <summary>
             Adds the specified TimeSpan to a TdTimestampWithTimeZone.
             </summary>
             
             <param name="timestamp">A TdTimestampWithTimeZone.</param>
             <param name="span">A TimeSpan that will be added to TdTimestampWithTimeZone.</param>
            
             <exception cref="T:System.OverflowException">The result of the arithmetic operation resulted in an overflow of the timestamp.</exception>
             
             <returns>A TdTimestampWithTimeZone is returned that is the result of adding the Timespan
             to TdTimestampWithTimeZone.</returns>
            
             <remarks>
             <para>If the <paramref name="timestamp"/> is <strong>Null</strong> a <see cref="F:Teradata.Client.Provider.TdTimestampWithTimeZone.Null"/> will be returned.</para>
             
             <para>If the scale between the <paramref name="timestamp"/> and the <paramref name="span"/> parameters are different
             the arithmetic operation will be performed using the different scales.  The result will then be
             <strong>truncated</strong> to match the scale of the timestamp.  For example, the addition operation</para>
             
             <para><code>TdTimestampWithTimeZone.Parse("2008-10-10 12:48:53.2123+08:00") + TimeSpan.Parse("00:02:03.000099")</code></para>
             
             <para>results in a TdTimestampWithTimeZone value of "2008-10-10 12:50:56.2123+08:00".</para>
             
             <para>A <see cref="T:System.TimeSpan"/> can have a scale up to 7.  A TdTimestampWithTimeZone has a maximum scale of 6.  
             When performing an arithmetic operation, only the first 6 digits to the right of the decimal
             point of the TimeSpan operand will be considered.  The 7th digit will be ignored.</para>
             </remarks>
        </member>
        <member name="M:Teradata.Client.Provider.TdTimestampWithTimeZone.op_Addition(Teradata.Client.Provider.TdTimestampWithTimeZone,Teradata.Client.Provider.TdIntervalDayToSecond)">
            <summary>
               Adds the specified <see cref="T:Teradata.Client.Provider.TdIntervalDayToSecond"/> to a <see cref="T:Teradata.Client.Provider.TdTimestampWithTimeZone"/>.
            </summary>
            <returns>
               A <strong>TdTimestampWithTimeZone</strong> is returned that is the result of adding the 
               <strong>TdIntervalDayToSecond</strong> to a <strong>TdTimestampWithTimeZone</strong>.
            </returns>
            <exception cref="T:System.OverflowException">
               Unable to add the specified <strong>TdIntervalDayToSecond</strong> to the 
               <strong>TdTimestampWithTimeZone</strong>.
            </exception>
            <remarks>
            <para>
               If either parameter is <strong>Null</strong> a <see cref="F:Teradata.Client.Provider.TdTimestampWithTimeZone.Null"/> 
               will be returned.
            </para>
            <para>
               The <strong>TdIntervalDayToSecond</strong> interval will be added to a
               <strong>TdTimestampWithTimeZone</strong>. 
            </para>
            <para>
               If the scale between the <paramref name="timestamp"/> and the 
               <paramref name="interval"/> are different, the arithmetic operation will be 
               performed using the different scales.  The result will then be truncated to match the
               scale of the <strong>TdTimestampWithTimeZone</strong>.  For example, if the 
               <strong>TdIntervalDayToSecond</strong> value of "222 10:25:40.61234"
               (222 days, 10 hours, 25 minutes and 40.61234 seconds) is added to the
               <strong>TdTimestampWithTimeZone</strong> value of "2008-10-10 12:50:56.2123+08:00"
               the operation will result in a <strong>TdTimestampWithTimeZone</strong> value 
               of "2009-05-20 23:16:36.8246+08:00".
            </para>
            </remarks>
            <param name="timestamp">A <strong>TdTimestampWithTimeZone</strong>.</param>
            <param name="interval">
               A <strong>TdIntervalDayToSecond</strong> that will be added to a 
               <strong>TdTimestampWithTimeZone</strong>.
            </param>
        </member>
        <member name="M:Teradata.Client.Provider.TdTimestampWithTimeZone.op_Addition(Teradata.Client.Provider.TdIntervalDayToSecond,Teradata.Client.Provider.TdTimestampWithTimeZone)">
            <summary>
               Adds the specified <see cref="T:Teradata.Client.Provider.TdIntervalDayToSecond"/> to a <see cref="T:Teradata.Client.Provider.TdTimestampWithTimeZone"/>.
            </summary>
            <returns>
               A <strong>TdTimestampWithTimeZone</strong> is returned that is the result of adding the 
               <strong>TdIntervalDayToSecond</strong> to a <strong>TdTimestampWithTimeZone</strong>.
            </returns>
            <exception cref="T:System.OverflowException">
               Unable to add the specified <strong>TdIntervalDayToSecond</strong> to the 
               <strong>TdTimestampWithTimeZone</strong>.
            </exception>
            <remarks>
            <para>
               If either parameter is <strong>Null</strong> a <see cref="F:Teradata.Client.Provider.TdTimestampWithTimeZone.Null"/> 
               will be returned.
            </para>
            <para>
               The <strong>TdIntervalDayToSecond</strong> interval will be added to a
               <strong>TdTimestampWithTimeZone</strong>. 
            </para>
            <para>
               If the scale between the <paramref name="timestamp"/> and the 
               <paramref name="interval"/> are different, the arithmetic operation will be 
               performed using the different scales.  The result will then be truncated to match the
               scale of the <strong>TdTimestampWithTimeZone</strong>.  For example, if the 
               <strong>TdIntervalDayToSecond</strong> value of "222 10:25:40.61234"
               (222 days, 10 hours, 25 minutes and 40.61234 seconds) is added to the
               <strong>TdTimestampWithTimeZone</strong> value of "2008-10-10 12:50:56.2123+08:00"
               the operation will result in a <strong>TdTimestampWithTimeZone</strong> value 
               of "2009-05-20 23:16:36.8246+08:00".
            </para>
            </remarks>
            <param name="interval">
               A <strong>TdIntervalDayToSecond</strong> that will be added to a 
               <strong>TdTimestampWithTimeZone</strong>.
            </param>
            <param name="timestamp">A <strong>TdTimestampWithTimeZone</strong>.</param>
        </member>
        <member name="M:Teradata.Client.Provider.TdTimestampWithTimeZone.op_Addition(Teradata.Client.Provider.TdTimestampWithTimeZone,Teradata.Client.Provider.TdIntervalYearToMonth)">
            <summary>
               Adds the specified <see cref="T:Teradata.Client.Provider.TdIntervalYearToMonth"/> to a <see cref="T:Teradata.Client.Provider.TdTimestampWithTimeZone"/>.
            </summary>
            <returns>
               A <strong>TdTimestampWithTimeZone</strong> is returned that is the result of adding the 
               <strong>TdIntervalYearToMonth</strong> to a <strong>TdTimestampWithTimeZone</strong>.
            </returns>
            <exception cref="T:System.OverflowException">
               Unable to add the specified <strong>TdIntervalYearToMonth</strong> to the 
               <strong>TdTimestampWithTimeZone</strong>.
            </exception>
            <remarks>
            <para>
               If either parameter is <strong>Null</strong> a <see cref="F:Teradata.Client.Provider.TdTimestampWithTimeZone.Null"/> 
               will be returned.
            </para>
            <para>
               The <paramref name="interval"/> interval will be added to <strong>TdTimestampWithTimeZone</strong>.
               For example, if the <strong>TdTimestampWithTimeZone</strong> value of
               "2008-10-10 12:50:56.2123+08:00" is added to the 
               <strong>TdIntervalYearToMonth</strong> value of "10-03" (10 years, 3 months) 
               the operation will result in a <strong>TdTimestampWithTimeZone</strong> value of 
               "2019-01-10 12:50:56.2123+08:00".
            </para>
            </remarks>
            <param name="timestamp">A <strong>TdTimestampWithTimeZone</strong>.</param>
            <param name="interval">
               A <strong>TdIntervalYearToMonth</strong> that will be added to 
               <strong>TdTimestampWithTimeZone</strong>.
            </param>
        </member>
        <member name="M:Teradata.Client.Provider.TdTimestampWithTimeZone.op_Addition(Teradata.Client.Provider.TdIntervalYearToMonth,Teradata.Client.Provider.TdTimestampWithTimeZone)">
            <summary>
               Adds the specified <see cref="T:Teradata.Client.Provider.TdIntervalYearToMonth"/> to a <see cref="T:Teradata.Client.Provider.TdTimestampWithTimeZone"/>.
            </summary>
            <returns>
               A <strong>TdTimestampWithTimeZone</strong> is returned that is the result of adding the 
               <strong>TdIntervalYearToMonth</strong> to a <strong>TdTimestampWithTimeZone</strong>.
            </returns>
            <exception cref="T:System.OverflowException">
               Unable to add the specified <strong>TdIntervalYearToMonth</strong> to the 
               <strong>TdTimestampWithTimeZone</strong>.
            </exception>
            <remarks>
            <para>
               If either parameter is <strong>Null</strong> a <see cref="F:Teradata.Client.Provider.TdTimestampWithTimeZone.Null"/> 
               will be returned.
            </para>
            <para>
               The <paramref name="interval"/> interval will be added to <strong>TdTimestampWithTimeZone</strong>.
               For example, if the <strong>TdTimestampWithTimeZone</strong> value of
               "2008-10-10 12:50:56.2123+08:00" is added to the 
               <strong>TdIntervalYearToMonth</strong> value of "10-03" (10 years, 3 months) 
               the operation will result in a <strong>TdTimestampWithTimeZone</strong> value of 
               "2019-01-10 12:50:56.2123+08:00".
            </para>
            </remarks>
            <param name="interval">
               A <strong>TdIntervalYearToMonth</strong> that will be added to 
               <strong>TdTimestampWithTimeZone</strong>.
            </param>
            <param name="timestamp">A <strong>TdTimestampWithTimeZone</strong>.</param>
        </member>
        <member name="M:Teradata.Client.Provider.TdTimestampWithTimeZone.op_Subtraction(Teradata.Client.Provider.TdTimestampWithTimeZone,System.TimeSpan)">
             <summary>
             Subtracts the specified TimeSpan from a TdTimestampWithTimeZone.
             </summary>
            
             <param name="timestamp">A TdTimestampWithTimeZone.</param>
             <param name="span">A TimeSpan that will be subtracted
             from the TdTimestampWithTimeZone</param>
            
             <exception cref="T:System.OverflowException">The result could not be represented as a TdTimestampWithTimeZone.</exception>
            
             <returns>A TdTimestampWithTimeZone is returned that is the result of subtracting the TimeSpan 
             from the TdTimestampWithTimeZone.</returns>
            
             <remarks>
             <para>If the <paramref name="timestamp"/> is <strong>Null</strong> a <see cref="F:Teradata.Client.Provider.TdTimestampWithTimeZone.Null"/> will be returned.</para>
             
             <para>If the scale between the <paramref name="timestamp"/> and the <paramref name="span"/> parameters are different
             the arithmetic operation will be performed using the different scales.  The result will then be
             <strong>truncated</strong> to match the scale of the timestamp.  For example, the addition operation</para>
             
             <para><code>TdTimestampWithTimeZone.Parse("2008-10-10 12:48:53.2123+08:00") - TimeSpan.Parse("00:02:03.000099")</code></para>
             
             <para>results in a TdTimestampWithTimeZone value of "2008-10-10 12:46:30.2122+08:00".</para>
             
             <para>A <see cref="T:System.TimeSpan"/> can have a scale up to 7.  A TdTimestampWithTimeZone has a maximum scale of 6.  
             When performing an arithmetic operation, only the first 6 digits to the right of the decimal
             point of the TimeSpan operand will be considered.  The 7th digit will be ignored.</para>
             </remarks>
        </member>
        <member name="M:Teradata.Client.Provider.TdTimestampWithTimeZone.op_Subtraction(Teradata.Client.Provider.TdTimestampWithTimeZone,Teradata.Client.Provider.TdTimestampWithTimeZone)">
            <summary>
            The time interval between two TdTimestampWithTimeZones is returned when the  
            TdTimestampWithTimeZones are subtracted from each other.
            </summary>
            
            <param name="leftOperand">The left TdTimestampWithTimeZone operand.</param>
            <param name="rightOperand">The right TdTimestampWithTimeZone operand.</param>
            
            <returns>A TimeSpan is returned that represents the time interval
            between the left and right TdTimestampWithTimeZone.</returns>
            
            <exception cref="T:System.ArgumentNullException">One of the operands is <strong>Null</strong>.</exception>
        </member>
        <member name="M:Teradata.Client.Provider.TdTimestampWithTimeZone.op_Subtraction(Teradata.Client.Provider.TdTimestampWithTimeZone,Teradata.Client.Provider.TdIntervalDayToSecond)">
            <summary>
               Subtracts the specified <see cref="T:Teradata.Client.Provider.TdIntervalDayToSecond"/> from a 
               <see cref="T:Teradata.Client.Provider.TdTimestampWithTimeZone"/>.
            </summary>
            <returns>
               A <strong>TdTimestampWithTimeZone</strong> is returned that is the result of subtracting the 
               <strong>TdIntervalDayToSecond</strong> from a <strong>TdTimestampWithTimeZone</strong>.
            </returns>
            <exception cref="T:System.OverflowException">
               Unable to subtract the specified <strong>TdIntervalDayToSecond</strong> from the 
               <strong>TdTimestamp</strong>.
            </exception>
            <remarks>
            <para>
               If either parameter is <strong>Null</strong> a <see cref="F:Teradata.Client.Provider.TdTimestampWithTimeZone.Null"/> 
               will be returned.
            </para>
            <para>
               The <strong>TdIntervalDayToSecond</strong> interval will be subtracted from a
               <strong>TdTimestampWithTimeZone</strong>. 
            </para>
            <para>
               If the scale between the <paramref name="timestamp"/> and the 
               <paramref name="interval"/> are different, the arithmetic operation will be 
               performed using the different scales.  The result will then be truncated to match the
               scale of the <strong>TdTimestampWithTimeZone</strong>.  For example, if the 
               <strong>TdIntervalDayToSecond</strong> value of "222 10:25:40.61234"
               (222 days, 10 hours, 25 minutes and 40.61234 seconds) is subtracted from the
               <strong>TdTimestampWithTimeZone</strong> value of 
               "2008-10-10 12:50:56.2123+08:00" the operation will result in a
               <strong>TdTimestampWithTimeZone</strong> value 
               of "2008-03-02 02:25:15.5999+08:00".
            </para>
            </remarks>
            <param name="timestamp">A <strong>TdTimestampWithTimeZone</strong>.</param>
            <param name="interval">
               A <strong>TdIntervalDayToSecond</strong> that will be subtracted from <strong>TdTimestampWithTimeZone</strong>.
            </param>
        </member>
        <member name="M:Teradata.Client.Provider.TdTimestampWithTimeZone.op_Subtraction(Teradata.Client.Provider.TdTimestampWithTimeZone,Teradata.Client.Provider.TdIntervalYearToMonth)">
            <summary>
               Subtracts the specified <see cref="T:Teradata.Client.Provider.TdIntervalYearToMonth"/> from a <see cref="T:Teradata.Client.Provider.TdTimestampWithTimeZone"/>.
            </summary>
            <returns>
               A <strong>TdTimestampWithTimeZone</strong> is returned that is the result of subtracting the 
               <strong>TdIntervalYearToMonth</strong> from a <strong>TdTimestampWithTimeZone</strong>.
            </returns>
            <exception cref="T:System.OverflowException">
               Unable to subtract the specified <strong>TdIntervalYearToMonth</strong> from the 
               <strong>TdTimestampWithTimeZone</strong>.
            </exception>
            <remarks>
            <para>
               If either parameter is <strong>Null</strong> a <see cref="F:Teradata.Client.Provider.TdTimestampWithTimeZone.Null"/> 
               will be returned.
            </para>
            <para>
               The <paramref name="interval"/> interval will be
               subtracted from the <strong>TdTimestampWithTimeZone</strong>. For example, if the 
               <strong>TdIntervalYearToMonth</strong> value of "10-03" (10 years, 3 months)
               is subtracted from the <strong>TdTimestampWithTimeZone</strong> value of 
               "2008-10-10 12:50:56.2123+08:00" the operation will result in a  
               <strong>TdTimestampWithTimeZone</strong> value of 
               "1998-07-10 12:50:56.2123+08:00".
            </para>
            </remarks>
            <param name="timestamp">A <strong>TdTimestampWithTimeZone</strong>.</param>
            <param name="interval">
               A <strong>TdIntervalYearToMonth</strong> that will be subtracted from 
               <strong>TdTimestampWithTimeZone</strong>.
            </param>
        </member>
        <member name="M:Teradata.Client.Provider.TdTimestampWithTimeZone.ToUtcDateTime">
            <summary>
            Converts this instance of TdTimestampWithTimeZone to a DateTime that will contain
            the UTC representation of the timestamp.
            </summary>
            
            <returns>A DateTime is returned that represents the UTC of the timestamp.</returns>
            
            <exception cref="T:Teradata.Client.Provider.TdException">This instance of TdTimestampWithTimeZone is <see cref="F:Teradata.Client.Provider.TdTimestampWithTimeZone.Null"/>.</exception>
            
            <remarks>
            When the timestamp is converted to UTC, both the date and time components may
            be affected.  For instance, suppose the timestamp is "2007-05-10 22:12:30-08:00".
            When this timestamp is converted to UTC the result will be "2007-5-11 06:12:30Z".
            </remarks>
        </member>
        <member name="M:Teradata.Client.Provider.TdTimestampWithTimeZone.ToTimeZone(System.TimeSpan)">
            <summary>
            Converts the time zone of this instance to a different time zone.
            </summary>
            
            <param name="newUtcOffset">The time zone that will be used to convert this instance.</param>
            
            <returns>A TdTimestampWithTimeZone is returned that has been converted to use <paramref name="newUtcOffset"/>.</returns>
            
            <exception cref="T:System.ArgumentOutOfRangeException">A time component is out of the valid range.</exception>
            <exception cref="T:System.ArgumentException">The seconds and sub-seconds of the UTC Offset must be 0.</exception>
            <exception cref="T:Teradata.Client.Provider.TdException">This instance of TdTimestampWithTimeZone is <see cref="F:Teradata.Client.Provider.TdTimestampWithTimeZone.Null"/>.</exception>
            
            <remarks>
            This method does not apply any time zone adjustment rules in the conversion.  For example, the rule associated with daylight savings
            for a particular time zone will be ignored.
            </remarks>
        </member>
        <member name="M:Teradata.Client.Provider.TdTimestampWithTimeZone.ToString">
             <summary>
             The TdTimestampWithTimeZone is converted to an equivalent String representation.
             </summary>
            
             <returns>The string representation of TdTimestampWithTimeZone is returned.</returns>
            
             <remarks>
             <para>The string representation of the timestamp will be in the format:  "yyyy-MM-dd HH:mm:ss.ffffffZ".
             For example, "2007-12-31 23:12:45.0023-08:00".</para>
             
             <para>The number of digits that will appear in the sub-seconds is dependent
             on the <see cref="P:Teradata.Client.Provider.TdTimestampWithTimeZone.Scale"/>.  For example, if the Scale is set to 4, four digits will appear 
             in the sub-seconds.</para>
             
             <para>If this instance is <see cref="F:Teradata.Client.Provider.TdTimestampWithTimeZone.Null"/>, a string that contains
             "Null" will be returned.</para>
             </remarks>
        </member>
        <member name="M:Teradata.Client.Provider.TdTimestampWithTimeZone.ToString(System.IFormatProvider)">
            <summary>
            The TdTimestampWithTimeZone is converted to the equivalent ANSI String representation.
            </summary>
            
            <param name="provider">An IFormatProvider that contains the culture specific formatting information.  This parameter is ignored</param>
            
            <returns>The ANSI string representation of TdTimestampWithTimeZone is returned.</returns>
            
            <remarks>
            <para>By default this method converts this instance of TdTimestampWithTimeZone using the "G" format specifier 
            (see <see cref="M:Teradata.Client.Provider.TdTimestampWithTimeZone.ToString(System.String)"/>)-- the ANSI string representation.  </para>
            
            <para>The cultural information specified in the <paramref name="provider"/> parameter is ignored.</para>
            
            <para>The ANSI string representation of the timestamp with time zone is in the format:  "yyyy-MM-dd HH:mm:ss.ffffffZ".
            For example, "2007-12-31 23:12:45.0023-08:00".</para>
            
            <para>The number of digits that will appear in the sub-seconds is dependent
            on the <see cref="P:Teradata.Client.Provider.TdTimestampWithTimeZone.Scale"/>.  For example, if the Scale is set to 4, four digits will appear 
            in the sub-seconds.</para>
            
            <para>If this instance is <see cref="F:Teradata.Client.Provider.TdTimestampWithTimeZone.Null"/>, a string that contains
            "Null" will be returned.</para>
            </remarks>
        </member>
        <member name="M:Teradata.Client.Provider.TdTimestampWithTimeZone.ToString(System.String)">
             <summary>
             TdTimestampWithTimeZone is converted to the equivalent String using the specified format.
             </summary>
             
             <param name="format">The DateTime format string that will be used to format the TdTimestampWithTimeZone.</param>
             
             <returns>A string representation of the date in TdTimestampWithTimeZone.</returns>
             
             <exception cref="T:System.FormatException">The specified format specifier is not supported.</exception>
             
             <remarks>
             <para>If the format parameter is null, the format of the string representation of the 
             timestamp will be "yyyy-MM-dd HH:mm:ss.ffffff&lt;+/-&gt;hh:mm".</para>
             
             <para>The format specifiers that will be supported are as follows:
             </para>
             <list type="table">
             <listheader>
             <term>Format Specifier</term>
             <description>Description</description>
             </listheader>
             <item>
             <term>d</term>
             <description>The short date pattern.  "MM/dd/yyyy".  UTC Offset is ignored.</description>
             </item>
             <item>
             <term>D</term>
             <description>The long date pattern.  "dddd, dd MMMM".  UTC Offset is ignored.</description>
             </item>
             <item>
             <term>f</term>
             <description>The long date and short time patterns.  UTC Offset is ignored.</description>
             </item>
             <item>
             <term>F</term>
             <description>The long date and long time patterns.  TC Offset is ignored.</description>
             </item>
             <item>
             <term>g</term>
             <description>The short date and short time patterns.  UTC Offset is ignored.</description>
             </item>
             <item>
             <term>G</term>
             <description>
             <para>The ANSI representation of the timestamp.  "yyyy-MM-dd HH:mm:ss.ffffff&lt;+/-&gt;mm:hh".  
             The number of digits in the fractional seconds will depend upon the Scale of the timestamp.  
             The date and time separators are not affected by the cultural settings.</para>
             
             <para>The number of digits that will appear in the sub-seconds is dependent
             on the <see cref="P:Teradata.Client.Provider.TdTimestampWithTimeZone.Scale"/>.  For example, if the Scale is set to 4, four digits will appear 
             in the sub-seconds.</para>
             </description>
             </item>
             <item>
             <term>G</term>
             <description>
             <para>The ANSI representation of the timestamp with TimeZone.  "yyyy-MM-dd HH:mm:ss.ffffffZ".  
             The number of digits in the fractional seconds will depend upon the Scale of the timestamp. </para> 
             
             <para>Cultural information is ignored in this conversion.</para>
             
             <para>The number of digits that will appear in the fractional seconds is dependent
             on the <see cref="P:Teradata.Client.Provider.TdTimestampWithTimeZone.Scale"/>.  For example, if the Scale is set to 4, four digits will appear 
             in the fraction.</para>
             </description>
             </item>
             <item>
             <term>l or L</term>
             <description>The Teradata literal representation of Timestamp With Time Zone.</description>
             </item>
             <item>
             <term>m or M</term>
             <description>The month and day patterns --"MMMM dd".  UTC Offset is ignored.</description>
             </item>
             <item>
             <term>r or R</term>
             <description>Converts the TdTimestampWithTimeZone to a string with the format 
             "ddd, dd MMM yyyy HH:mm:ss GMT".  Example:  Tue, 30 Oct 2007 18:30:20 GMT</description>
             </item>
             <item>
             <term>s</term>
             <description>The sortable time pattern --"yyyy'-'MM'-'dd'T'HH':'mm':'ss".  
             The UTC offset is ignored.</description>
             </item>
             <item>
             <term>t</term>
             <description>The short time pattern --"h:mm tt".  UTC Offset is ignored.</description>
             </item>
             <item>
             <term>T</term>
             <description>The long time patterm --"h:mm:ss tt".  UTC Offset is ignored.</description>
             </item>
             <item>
             <term>u</term>
             <description>Converts the TdTimestampWithTimeZone to a string with the format
             "yyyy-MM-dd HH:mm:ssZ".  Example:  2007-10-30 18:30:20Z</description>
             </item>
             <item>
             <term>y or Y</term>
             <description>The year and month pattern --"h:MMMM, yyyy".  UTC Offset is ignored.</description>
             </item>
             </list>
             
             <para>If this instance is <see cref="F:Teradata.Client.Provider.TdTimestampWithTimeZone.Null"/>, a string that contains
             "Null" will be returned.</para>
            
             <para>For additional information about the supported format specifiers refer to 
             <see cref="T:System.Globalization.DateTimeFormatInfo"/> in the MSDN documentation.
             </para>
             </remarks>
        </member>
        <member name="M:Teradata.Client.Provider.TdTimestampWithTimeZone.ToString(System.String,System.IFormatProvider)">
            <summary>
            TdTimestampWithTimeZone is converted into the equivalent String representation using the 
            specified format and culture information.
            </summary>
            
            <param name="format">The DateTime format string that will be used to format the TdTimestampWithTimeZone.</param>
            <param name="formatProvider">The culture specific information used to generate the string equivalent 
            of TdTimestampWithTimeZone.</param>
            
            <returns>A string representation of the date in TdTimestampWithTimeZone.</returns>
            
            <exception cref="T:System.FormatException">The specified format specifier is not supported.</exception>
            
            <remarks>
            <para>If the format parameter is null, the format of the string representation of the 
            timestamp will be "yyyy-MM-dd HH:mm:ss.ffffff hh:mm".  In addition, the number of 
            digits that will appear in the fractional seconds is dependent on the <see cref="P:Teradata.Client.Provider.TdTimestampWithTimeZone.Scale"/>.  
            For example, if the Scale is set to 4, four digits will appear 
            in the fraction.</para>
            
            <para>If this instance is <see cref="F:Teradata.Client.Provider.TdTimestampWithTimeZone.Null"/>, a string that contains
            "Null" will be returned.</para>
            
            <para>The format specifiers that are supported are listed in 
            <see cref="M:Teradata.Client.Provider.TdTimestampWithTimeZone.ToString(System.String)"/>.  For additional information about the 
            supported format specifiers refer to 
            <see cref="T:System.Globalization.DateTimeFormatInfo"/> contained in the MSDN documentation.
            </para>
            </remarks>
        </member>
        <member name="M:Teradata.Client.Provider.TdTimestampWithTimeZone.Parse(System.String)">
            <summary>
            The value of the specified string is parsed.  The Date and Time components contained in 
            the string are used to generate an equivalent TdTimestampWithTimeZone value.  
            </summary>
            
            <param name="value">The string that is to be converted into a TdTimestampWithTimeZone.</param>
            
            <returns>A TdTimestampWithTimeZone is returned that is equivalent to the timestamp 
            contained in the value string.</returns>
            
            <exception cref="T:System.ArgumentNullException">Value is a null reference.</exception>
            <exception cref="T:System.FormatException">Value does not contain a valid representation of a timestamp.</exception>
            
            <remarks>
            <para>The string is parsed using the culture information contained in the specified 
            <see cref="T:System.Globalization.DateTimeFormatInfo"/> object.</para>
            
            <para>If the timestamp contains sub-seconds, the separator that <strong>must</strong> be used in
            the string is a <strong>decimal point</strong> (".").  For example, in the string
            "2007-12-22 10:21:22<strong>.2321</strong>+08:00" the sub-seconds is separated from the 
            number of seconds using a decimal point.</para>
            
            <para>When the <paramref name="value"/> is parsed the <see cref="P:Teradata.Client.Provider.TdTimestampWithTimeZone.Scale"/> will be set to 
            the number of digits in the sub-seconds component (digits that are to the right of the 
            decimal point).  Therefore, a TdTimestamp of "2008-11-21 12:32:11.0000" will have a Scale of 4, 
            and "2009-04-15 23:43:22.121000" will have a scale of 6.</para>
            
            <para>An attempt is made to avoid throwing a FormatException.  Any unrecognized characters in 
            the string will be ignored.  An exception to this is the case when
            the number of digits to the right of the decimal point exceed the <strong>maximum scale</strong> 
            of 6.  If the number of digits exceed the maximum scale, a FormatException will get thrown.
            Trailing zeroes are ignored.</para>
            
            <para>However, when a custom culture is used it is possible that the Parse will 
            fail.  A timestamp string that contains custom culture specific date elements is very
            difficult to parse.  The string may not match any of the implicit patterns that
            are used to parse a string.</para>
            
            <para>If a UTC offset is specified in the string it <strong>must</strong> appear at the end.</para>
            
            <para>If the <paramref name="value"/> contains a "Z" or "GMT", the UTC offset has been
            accounted for in the time component.  Therefore, the UTC offset of the <strong>TdTimestampWithTimeZone</strong>
            that is returned will be set to "00:00".  </para>
            
            <para>If the <paramref name="value"/> does not contain a UTC offset, "Z", or "GMT" the UTC offset
            of the <strong>TdTimestampWithTimeZone</strong> that is returned will be set to the 
            local UTC offset.</para>
            <para>If the <paramref name="value"/> contains the string "NULL" a <see cref="F:Teradata.Client.Provider.TdTimestampWithTimeZone.Null"/>
            will be returned.</para>
            </remarks>
        </member>
        <member name="M:Teradata.Client.Provider.TdTimestampWithTimeZone.Parse(System.String,System.IFormatProvider)">
             <summary>
             The value of the specified string is parsed.  The Date and Time components contained in 
             the string are used to generate an equivalent TdTimestampWithTimeZone value.  
             </summary>
             
             <param name="value">The string that is to be converted into a TdTimestampWithTimeZone.</param>
             <param name="provider">An IFormatProvider that supplies culture specific information 
             about the format of value.</param>
             
             <returns>A TdTimestampWithTimeZone is returned that is equivalent to the timestamp 
             contained in the value string.</returns>
             
             <exception cref="T:System.ArgumentNullException">Value is a null reference or an empty string.</exception>
             <exception cref="T:System.FormatException">Value does not contain a valid representation of a timestamp.</exception>
             
             <remarks>
             <para>The string is parsed using the culture information contained in the specified 
             <see cref="T:System.Globalization.DateTimeFormatInfo"/> object.</para>
             
             <para>If the time component contains sub-seconds, the separator that <strong>must</strong> be used in
             the string is a <strong>decimal point</strong> (".").  For example, in the string
             "2007-12-22 10:21:22<strong>.2321</strong>+08:00" the sub-seconds is separated from the 
             number of seconds using a decimal point.</para>
             
             <para>When the <paramref name="value"/> is parsed the <see cref="P:Teradata.Client.Provider.TdTimestampWithTimeZone.Scale"/> will be set to 
             the number of digits in the sub-seconds component (digits that are to the right of the 
             decimal point).  Therefore, a timestamp of "2008-11-21 12:32:11.0000" will have a Scale of 4, 
             and "2009-04-15 23:43:22.121000" will have a scale of 6.</para>
             
             <para>An attempt is made to avoid throwing a FormatException.  Any unrecognized characters in 
             the string will be ignored.  An exception to this is the case when
             the number of digits to the right of the decimal point exceed the <strong>maximum scale</strong> 
             of 6.  If the number of digits exceed the maximum scale, a FormatException will get thrown.
             Trailing zeroes are ignored.</para>
             
             <para>However, when a custom culture is used it is possible that the Parse will 
             fail.  A timestamp string that contains custom culture specific date elements is very
             difficult to parse.  The string may not match any of the implicit patterns that
             are used to parse a string.</para>
             
             <para>If a UTC offset is specified in the string it <strong>must</strong> appear at the end.</para>
             
             <para>If the <paramref name="value"/> contains a "Z" or "GMT", the UTC offset has been
             accounted for in the time component.  Therefore, the UTC offset of the <strong>TdTimestampWithTimeZone</strong>
             that is returned will be set to "00:00".  </para>
             
             <para>If the <paramref name="value"/> does not contain a UTC offset, "Z", or "GMT" the UTC offset
             of the <strong>TdTimestampWithTimeZone</strong> that is returned will be set to the 
             local UTC offset.</para>
            
             <para>If the <paramref name="value"/> contains the string "NULL" a <see cref="F:Teradata.Client.Provider.TdTimestampWithTimeZone.Null"/>
             will be returned.</para>
             </remarks>
        </member>
        <member name="M:Teradata.Client.Provider.TdTimestampWithTimeZone.TryParse(System.String,Teradata.Client.Provider.TdTimestampWithTimeZone@)">
            <summary>
            A timestamp with a UTC offset contained in a string is converted to a TdTimestampWithTimeZone representation.
            </summary>
            
            <param name="value">The string that contains the date representation.</param>
            <param name="result">The TdTimestampWithTimeZone representation of the timestamp contained in the specified string.</param>
            
            <returns>A Boolean is returned that indicates the success of the conversion.  
            <c>true</c> indicates that the conversion was successful and that the conversion is 
            returned through the result parameter.  <c>false</c> indicates that the conversion 
            failed.</returns>
            
            <remarks>
            <para>TryParse is the same as Parse except that an exception does not get thrown 
            when the conversion fails.</para>
            
            <para>Formatting information contained in the DateTimeFormatInfo object is used to 
            parse the string.</para>
            
            <para>If the string is either null or empty, a <see cref="F:Teradata.Client.Provider.TdTimestampWithTimeZone.Null"/>
            is returned. </para>
            
            <para>If the conversion fails the result parameter will be set to <see cref="F:Teradata.Client.Provider.TdTimestampWithTimeZone.MinValue"/>.</para>
            
            <para>For more information refer to <see cref="M:Teradata.Client.Provider.TdTimestampWithTimeZone.Parse(System.String)"/>.</para>
            </remarks>
        </member>
        <member name="M:Teradata.Client.Provider.TdTimestampWithTimeZone.TryParse(System.String,System.IFormatProvider,Teradata.Client.Provider.TdTimestampWithTimeZone@)">
            <summary>
            A timestamp with a UTC offset contained in a string is converted to a TdTimestampWithTimeZone representation.
            </summary>
            
            <param name="value">The string that contains the date representation.</param>
            <param name="provider">An IFormatProvider that supplies culture specific information 
            about the format of value.</param>
            <param name="result">The TdTimestampWithTimeZone representation of the timestamp contained in the specified string.</param>
            
            <returns>A Boolean is returned that indicates the success of the conversion.  
            <c>true</c> indicates that the conversion was successful and that the conversion is 
            returned through the result parameter.  <c>false</c> indicates that the conversion 
            failed.</returns>
            
            <remarks>
            <para>TryParse is the same as Parse except that an exception does not get thrown 
            when the conversion fails.</para>
            
            <para>Formatting information contained in the DateTimeFormatInfo object is used to 
            parse the string.</para>
            
            <para>If the string is either null or empty, a <see cref="F:Teradata.Client.Provider.TdTimestampWithTimeZone.Null"/>
            is returned. </para>
            
            <para>If the conversion fails the result parameter will be set to <see cref="F:Teradata.Client.Provider.TdTimestampWithTimeZone.MinValue"/>.</para>
            
            <para>For more information refer to <see cref="M:Teradata.Client.Provider.TdTimestampWithTimeZone.Parse(System.String,System.IFormatProvider)"/>.</para>
            </remarks>
            <seealso cref="M:Teradata.Client.Provider.TdTimestampWithTimeZone.Parse(System.String,System.IFormatProvider)"/>
        </member>
        <member name="M:Teradata.Client.Provider.TdTimestampWithTimeZone.GetXmlSchema(System.Xml.Schema.XmlSchemaSet)">
             <summary>
             Specifies the XML Qualified name for <strong>TdTimestampWithTimeZone</strong> XML type mapping.
             </summary>
             
             <param name="xmlSchemaSet">Holds zero or more XML Schema definition language (XSD) schemas.</param>
             
             <returns>
             Returns <strong>xs:dateTime</strong>.
             </returns>
             
             <example>
             This examples shows how to use <strong>TdTimestampWithTimeZone</strong> with <see cref="T:System.Xml.Serialization.XmlSerializer"/> class.
             <see cref="T:System.Xml.Serialization.XmlElementAttribute"/> is used to indicate that the Teradata Database column can be <strong>Null</strong>.
             <code>
              public class Order
              {
                  public TdTimestampWithTimeZone TimeStamp;
            
                  public Int32 ProductId;
            
                  public Int32 Quantity;
            
                  public Int32? BackOrderQuantity;
            
                  [XmlElementAttribute(IsNullable = true)]        
                  public TdDecimal BackOrderPrice;
              }
             
              internal class OrderWriter
              {
              
                  public static void Write()
                  {
                      // Setup the order
                      Order x = new Order();
              
                      x.Timestamp = new TdTimestampWithTimeZone(DateTime.Today, new TimeSpan(-08, 0, 0));
                      x.ProductId = 100;
                      x.Quantity = 2000;
                      x.BackOrderQuantity = null;
                      x.BackOrderPrice = TdDecimal.Null;
            
                      // Write out today's orders to the file.
                      //
                      // Open the file.
                      XmlWriterSettings settings = new XmlWriterSettings();
                      settings.Indent = true;
                      XmlWriter writer = XmlWriter.Create(@"C:\Temp\TodayOrders.XML", settings);
                      writer.WriteStartElement("TodayOrders");
                
                      // Write out the schema.
                      XmlSchemas schemas = new XmlSchemas();
                      XmlSchemaExporter schExporter = new XmlSchemaExporter(schemas);
                      schExporter.ExportTypeMapping(new XmlReflectionImporter().ImportTypeMapping(typeof(Order)));
                      schemas[0].Write(writer);
            
                      // Write out the orders.
                      XmlSerializer xml = new XmlSerializer(typeof(Order));
                      xml.Serialize(writer, x);
              
                      // Close the document.
                      writer.WriteEndDocument();
                      writer.Close();
                  }
              }
             
              /* Output is:
             
              &lt;TodayOrders&gt;
                &lt;xs:schema elementFormDefault="qualified" xmlns:xs="http://www.w3.org/2001/XMLSchema"&gt;
                  &lt;xs:element name="Order" nillable="true" type="Order" /&gt;
                  &lt;xs:complexType name="Order"&gt;
                    &lt;xs:sequence&gt;
                      &lt;xs:element minOccurs="1" maxOccurs="1" name="Timestamp" type="xs:dateTime" /&gt;
                      &lt;xs:element minOccurs="1" maxOccurs="1" name="ProductId" type="xs:int" /&gt;
                      &lt;xs:element minOccurs="1" maxOccurs="1" name="Quantity" type="xs:int" /&gt;
                      &lt;xs:element minOccurs="1" maxOccurs="1" name="BackOrderQuantity" nillable="true" type="xs:int" /&gt;
                      &lt;xs:element minOccurs="1" maxOccurs="1" name="BackOrderPrice" nillable="true" type="xs:decimal" /&gt;
                    &lt;/xs:sequence&gt;
                  &lt;/xs:complexType&gt;
                &lt;/xs:schema&gt;
                &lt;Order xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xmlns:xsd="http://www.w3.org/2001/XMLSchema"&gt;
                  &lt;Timestamp&gt;2007-02-01T00:00:00-08:00&lt;/Timestamp&gt;
                  &lt;ProductId&gt;100&lt;/ProductId&gt;
                  &lt;Quantity&gt;2000&lt;/Quantity&gt;
                  &lt;BackOrderQuantity xsi:nil="true" /&gt;
                  &lt;BackOrderPrice xsi:nil="true" /&gt;
                &lt;/Order&gt;
              &lt;/TodayOrders&gt;
             
              */
             </code>
             </example>        
        </member>
        <member name="P:Teradata.Client.Provider.TdTimestampWithTimeZone.ObjectId">
            <summary>
            Gets the Instance Object Identifier.
            </summary>
        </member>
        <member name="P:Teradata.Client.Provider.TdTimestampWithTimeZone.IsNull">
            <summary>
            Indicates whether this TdTimestampWithTimeZone instance is <see cref="F:Teradata.Client.Provider.TdTimestampWithTimeZone.Null"/>. 
            </summary>
            
            <value>
            <c>true</c> if this TdTimestampWithTimeZone is Null; <c>false</c> otherwise.
            </value>
        </member>
        <member name="P:Teradata.Client.Provider.TdTimestampWithTimeZone.Year">
            <summary>
            The Year of the date contained in this instance of TdTimestampWithTimeZone is returned.
            </summary>
            
            <value>
            The year specified in the date.
            </value>
            
            <exception cref="T:Teradata.Client.Provider.TdException">This instance is <see cref="F:Teradata.Client.Provider.TdTimestampWithTimeZone.Null"/>.</exception>
            
            <remarks>
            <para>The value that is returned represents the year of the date component.  There
            is no consideration for the UTC Offset.  For example, if the timestamp
            is "2007-12-31 23:40:00.000000 -08:00", the value of the Year
            property will be "2007".  However, the UTC representation of the 
            timestamp is "2008-01-01 07:40:00.000000".</para>
            
            <para>No consideration is given to daylight savings time.</para>
            </remarks>
        </member>
        <member name="P:Teradata.Client.Provider.TdTimestampWithTimeZone.Month">
            <summary>
            The Month of the date contained in this instance of TdTimestampWithTimeZone is returned.
            </summary>
            
            <value>
            The month specified in the date.
            </value>
            
            <exception cref="T:Teradata.Client.Provider.TdException">This instance is <see cref="F:Teradata.Client.Provider.TdTimestampWithTimeZone.Null"/>.</exception>
            
            <remarks>
            The value that is returned represents the month of the date component.  There
            is no consideration for the UTC Offset.  For example, if the timestamp
            is "2007-11-30 23:40:00.000000 -08:00", the value of the Month
            property will be "11".  However, the UTC representation of the 
            timestamp is "2007-12-01 07:40:00.000000".
            
            <para>No consideration is given to daylight savings time.</para>
            </remarks>
        </member>
        <member name="P:Teradata.Client.Provider.TdTimestampWithTimeZone.Day">
            <summary>
            The Day of the date contained in this instance of TdTimestampWithTimeZone is returned.  
            </summary>
            
            <value>
            The day of the month represented by this instance is returned.  The value returned
            will range from 1 to 31.
            </value>
            
            <exception cref="T:Teradata.Client.Provider.TdException">This instance is <see cref="F:Teradata.Client.Provider.TdTimestampWithTimeZone.Null"/>.</exception>
            
            <remarks>
            <para>The value that is returned represents the day of the date component.  There
            is no consideration for the UTC Offset.  For example, if the timestamp
            is "2007-11-30 23:40:00.000000 -08:00", the value of the Day
            property will be "30".  However, the UTC representation of the 
            timestamp is "2007-12-01 07:40:00.000000".</para>
            
            <para>No consideration is given to daylight savings time.</para>
            </remarks>
        </member>
        <member name="P:Teradata.Client.Provider.TdTimestampWithTimeZone.Hour">
            <summary>
            The hour of the time component in this instance of TdTimestampWithTimeZone is returned.
            </summary>
            
            <value>The Hour component is returned.</value>
            
            <exception cref="T:Teradata.Client.Provider.TdException">This instance is <see cref="F:Teradata.Client.Provider.TdTimestampWithTimeZone.Null"/>.</exception>
            
            <remarks>
            The value that is returned represents the hour of the time component.  TdTimestampWithTimeZone
            does not take into account the day light savings time.  What has been entered as the hour
            of the time component, is returned from the property.
            </remarks>
        </member>
        <member name="P:Teradata.Client.Provider.TdTimestampWithTimeZone.Second">
            <summary>
            The number of seconds contained in the time component in this 
            instance of TdTimestampWithTimeZone is returned.
            </summary>
            
            <value>The Second component is returned.</value>
            
            <exception cref="T:Teradata.Client.Provider.TdException">This instance is <see cref="F:Teradata.Client.Provider.TdTimestampWithTimeZone.Null"/>.</exception>
        </member>
        <member name="P:Teradata.Client.Provider.TdTimestampWithTimeZone.Microsecond">
            <summary>
            The sub-seconds contained in the time component is returned in microseconds.
            </summary>
            
            <value>
            The sub-second component is returned as an Int32.  It will contain up to <see cref="P:Teradata.Client.Provider.TdTimestampWithTimeZone.Scale"/> digits.
            </value>
            
            <exception cref="T:Teradata.Client.Provider.TdException">This instance is <see cref="F:Teradata.Client.Provider.TdTimestampWithTimeZone.Null"/>.</exception>
            
            <remarks>
            <para>Teradata only supports up to 6 digits in the fractional portion
            of a second.   Therefore, TdTimestampWithTimeZone also support 6 digits
            in the sub-seconds. This is represented as a Microsecond.  One microsecond is 
            equivalent to 10^-6 of a second. </para>
            
            <para>The following are examples of the Microsecond that is returned for
            a given timestamp:</para>
            
            <list type="table">
            <listheader>
            <term>Timestamp</term>
            <description>Microsecond Property</description>
            </listheader>
            <item>
            <term>9999-12-31 23:59:59.999999+00:00, scale = 6</term>
            <description>999999</description>
            </item>
            <item>
            <term>2008-02-29 12:45:00.349000-08:00, scale = 6</term>
            <description>349000</description>
            </item>
            <item>
            <term>2008-02-29 12:45:00.34900-08:00, scale = 5</term>
            <description>34900</description>
            </item>
            <item>
            <term>2008-02-29 12:45:00.3490-08:00, scale = 4</term>
            <description>3490</description>
            </item>
            <item>
            <term>2008-02-29 12:45:00.349-08:00, scale = 3</term>
            <description>349</description>
            </item>
            <item>
            <term>2010-11-30 20:31:07.020000-01:30,  scale = 6</term>
            <description>20000</description>
            </item>
            <item>
            <term>2010-11-30 20:31:07.0200-01:30,  scale = 4</term>
            <description>200</description>
            </item>
            <item>
            <term>2010-10-31 00:10:01.00090-01:30,  scale = 5</term>
            <description>90</description>
            </item>
            </list>
            </remarks>
        </member>
        <member name="P:Teradata.Client.Provider.TdTimestampWithTimeZone.Minute">
            <summary>
            The number of minutes contained in the time component of this instance of
            TdTimestampWithTimeZone.
            </summary>
            
            <value>The Minute component is returned.</value>
            
            <exception cref="T:Teradata.Client.Provider.TdException">This instance is <see cref="F:Teradata.Client.Provider.TdTimestampWithTimeZone.Null"/>.</exception>
        </member>
        <member name="P:Teradata.Client.Provider.TdTimestampWithTimeZone.UtcOffset">
            <summary>
            Returns the UTC Offset or allows the UTC offset to be set.
            </summary>
            
            <value>
            The UTC ofsset is returned as a TimeSpan.
            </value>
            
            <exception cref="T:Teradata.Client.Provider.TdException">This instance is <see cref="F:Teradata.Client.Provider.TdTimestampWithTimeZone.Null"/>.</exception>
            
            <remarks>
            <para>The UTC offset is handled by TdTimestampWithTimeZone as a System.TimeSpan.  If
            a day or millisecond is specified in the constructor of the TimeSpan a TdException
            will be thrown.</para>
            
            <para>The range of a valid UTC offset is -12:59 to +13:00.</para>
            
            </remarks>
        </member>
        <member name="P:Teradata.Client.Provider.TdTimestampWithTimeZone.Value">
            <summary>
            Gets the string representation of this TdTimestampWithTimeZone instance.
            </summary>
            
            <exception cref="T:Teradata.Client.Provider.TdException">This instance is <see cref="F:Teradata.Client.Provider.TdTimestampWithTimeZone.Null"/>.</exception>
        </member>
        <member name="P:Teradata.Client.Provider.TdTimestampWithTimeZone.Scale">
            <summary>
            Returns the scale of this instance of TdTimestampWithTimeZone.
            </summary>
            
            <exception cref="T:Teradata.Client.Provider.TdException">This instance is <see cref="F:Teradata.Client.Provider.TdTimestampWithTimeZone.Null"/>.</exception>
        </member>
        <member name="T:Teradata.Client.Provider.TdTimeWithTimeZone">
            <summary>
            TdTimeWithTimeZone is a .Net Data Provider for Teradata specific type that represents the 
            time of day, and allows a Time Zone to be specified.
            </summary>
            <remarks>
            <para>The <strong>.Net Framework 2.0</strong> does not contain a system type that directly 
            corresponds to the Teradata type <strong>Time With Time Zone</strong>.   The .Net Data Provider
            for Teradata version 1.2 and earlier maps System.String to Time With Time Zone.  With the 
            release of version 12.0 of the provider, <strong>TdTimeWithTimeZone</strong> is available to 
            retrieve and manipulate data of Teradata type Time With Time Zone. </para>
            
            <para>TdTimeWithTimeZone supports Time Zones by allowing a <strong>Universal Coordinated
            Time</strong> (UTC) Offset to be specified with a time.  A valid UTC Offset will be within 
            the range of -12:59 to 13:00.</para>
            
            <para>The UTC offset can be specified when invoking the constructor, or in a string 
            that is to be parsed.  For more information on UTC offset refer to the 
            <strong>Teradata Manual, Sql Reference:  DataTypes and Literals</strong>. </para>
            
            <para>Similar to the Teradata Database's Time With Time Zone type, the TdTimeWithTimeZone
            also supports a scale for the sub-seconds --this is specified as a <see cref="P:Teradata.Client.Provider.TdTimeWithTimeZone.Microsecond"/>.  
            The scale can range from 0 to 6.  The microseconds and scale are specified in the 
            constructor.  An example of a time with a time zone is "17:22:10.0329-08:00".
            This time has a UTC offset of "-08:00", Microsecond of "32900", and a Scale
            of "4".</para>
            
            <para>When a TdTimeWithTimeZone is parsed (see <see cref="M:Teradata.Client.Provider.TdTimeWithTimeZone.Parse(System.String,System.IFormatProvider)"/>) the
            scale of the resulting TdTimeWithTimeZone will be set to the actual scale of the fractional
            part of the TdTimeWithTimeZone.</para>
            
            <para>When data of a column that is a Time With Time Zone is retrieved as a 
            TdTimeWithTimeZone, it's scale will be set to the scale of the column.</para>
            
            <para>The TdTimeWithTimeZone structure allows arithmetic, comparison, and conversion operations to be
            performed.</para>
            
            <para>A TdTimeWithTimeZone value can also be specified as an In, Out, or InOut parameter to a Stored 
            Procedure.  In order to maintain backward compatibility with previous versions of the 
            provider --versions earlier than 12.0--, the Connection String Attribute 
            <a href="TdDateAndTimeConnectionString.htm"><strong>Enable TdDateTime</strong></a> 
            must be set to <c>false</c>.  When this is done, a TdTimeWithTimeZone is  
            returned to an application using the <see cref="P:Teradata.Client.Provider.TdParameter.ProviderSpecificValue"/> property.
            The object that is returned using the <see cref="P:Teradata.Client.Provider.TdParameter.Value"/> property remains a 
            System.String object.</para>. 
            
            <para>If the attribute <strong>Enable TdDateTime</strong> is set to <c>true</c> a TdTimeWithTimeZone 
            <strong>is</strong> returned to the application through the TdParameter.Value.</para>
            
            <para>The TdTimeWithTimeZone is daylight savings time agnostic.</para>
            </remarks>
            
            <example>
            The following example retrieves data of two TIME WITH TIME ZONE columns from Teradata, 
            modifies the data, and then updates the record with the new data contained in 
            TdTimeWithTimeZone.
            <code>
            Public void TimeExample(TdCommand cmd, String classId)
            {
               cmd.Parameters.Clear();
               
               cmd.CommandText = "SELECT StartTime, EndTime FROM ClassInfo " +
                                 "WHERE ClassId = ?";
            
               cmd.CommandType = CommandType.Text;
            
            cmd.Parameters.Add(null, TdType.Varchar, 9,
               System.Data.ParameterDirection.Input, true, 0, 0, null,    
               System.Data.DataRowVersion.Default, classid);
            
               TdDataReader dr = null;
            
               // This will be added to TdTime.  The timespan has been set to 1 hour.
               Timespan hourLater = new Timespan(1, 0, 0);
            
               // Going to add an hour to the start and end times of the class.
               // This is going to be done the hard way to demonstrate TdTime.
            
               Try
               {
                  dr = cmd.ExecuteReader();
            
                  // Only one record is returned from query
                  TdTimeWithTimeZone startTime = dr.GetTdTimeWitTimeZone(0);
                  TdTimeWithTimeZone endTime = dr.GetTdTimeWithTimeZone(1);
            
                  dr.Close();
            
                  startTime = startTime + hourLater;
                  endTime = endTime + hourLater;
            
                  // Going to update the class record to indicate that the 
                  // class will start an hour later.
            
                  cmd.CommandText = "UPDATE ClassInfo " +
                                    "SET StartTime = ?, EndTime = ? " +
                                    "WHERE ClassId = ?";
            
                  cmd.Parameters.Clear();
            
                  cmd.Parameters.Add(null, TdType.TimeWithTimeZone, 0,
                     System.Data.ParameterDirection.Input, true, 0, 0, null,    
                     System.Data.DataRowVersion.Default, startTime);
            
                  cmd.Parameters.Add(null, TdType.TimeWithTimeZone, 0,
                     System.Data.ParameterDirection.Input, true, 0, 0, null,    
                     System.Data.DataRowVersion.Default, endTime);
            
                  cmd.Parameters.Add(null, TdType.Varchar, 9,
                     System.Data.ParameterDirection.Input, true, 0, 0, null,    
                     System.Data.DataRowVersion.Default, classid);
            
                  cmd.ExecuteNonQuery();
               }
               finally
               {
                  if (dr != null)
                  {
                     dr.Close();
                  }
               }
            }
            </code>
            </example>
            
            <seealso cref="!:TdDateAndTimeConnectionString.html">Date And Time Connection String Attribute</seealso>
            <seealso cref="!:EnableProviderSpecificTypes.html">Enabling Provider Specific Types</seealso>
            <seealso cref="!:DateAndTimeTypeOverview.html">Provider Specific Type:  Date And Time Overview</seealso>
        </member>
        <member name="F:Teradata.Client.Provider.TdTimeWithTimeZone.MaxValue">
            <summary>
            The largest possible value of TdTimeWithTimeZone.  This field is read-only.
            </summary>
            <remarks>
            The largest possible value of TdTimeWithTimeZone is equivalent to 
            <strong>23:59:59.999999+00:00</strong>.
            </remarks>
        </member>
        <member name="F:Teradata.Client.Provider.TdTimeWithTimeZone.MinValue">
            <summary>
            The smallest possible value of TdTimeWithTimeZone.  This field is read-only.
            </summary>
            <remarks>
            The smallest possible value of TdTimeWithTimeZone is equivalent to 
            <strong>00:00:00+00:00</strong>.
            </remarks>
        </member>
        <member name="F:Teradata.Client.Provider.TdTimeWithTimeZone.Null">
            <summary>
            Gets a Null TdTimeWithTimeZone instance.
            </summary>
            <value>
            Returns a TdTimeWithTimeZone instance that represents a <strong>Null</strong> value.
            </value>
            <remarks>
            Conceptually it is the constructor for <strong>Null</strong> TdTimeWithTimeZone instances.
            </remarks>
            <example>
            This example shows how to send a <strong>Null</strong> value to a Teradata database.
            <code>
            TdParameter col1 = new TdParameter();
            col1.TdType = TdType.TimeWithTimeZone;
            col1.Value = TdTimeWithTimeZone.Null;
            </code>
            </example>
        </member>
        <member name="M:Teradata.Client.Provider.TdTimeWithTimeZone.#ctor(System.Int32,System.Int32,System.Int32)">
            <summary>
            An instance of TdTimeWithTimeZone is created from the time components specified
            as integers.
            </summary>
            
            <param name="hour">The hour of the specified time.  Valid values are 0-23.</param>
            <param name="minute">The minutes of the specified time.  Valid value are 0-59.</param>
            <param name="second">The seconds of the specified time.  Valid values are 0-59.</param>
            
            <exception cref="T:System.ArgumentOutOfRangeException">A time component is out of the valid range.</exception>
            
            <remarks>
            <para>The scale will default to the minimum scale of 0.</para>
            
            <para>The UTC Offset will default to the local time zone of the machine.</para>
            </remarks>
        </member>
        <member name="M:Teradata.Client.Provider.TdTimeWithTimeZone.#ctor(System.Int32,System.Int32,System.Int32,System.Int32)">
             <summary>
             An instance of TdTimeWithTimeZone is create from the time components specfied
             as integers.
             </summary>
             
             <param name="hour">The hour of the specified time.  Valid values are 0-23.</param>
             <param name="minute">The minutes of the specified time.  Valid value are 0-59.</param>
             <param name="second">The seconds of the specified time.  Valid values are 0-59.</param>
             <param name="microsecond">The number of microseconds of the specified time.</param>
             
             <exception cref="T:System.ArgumentOutOfRangeException">A time component is out of the valid range.</exception>
             
             <remarks>
             <para>A microsecond is 10^-6 of a second (.000001).  </para>
            
             <para>The scale will default to the scale of the <paramref name="microsecond"/> parameter.</para>
             
             <para>The UTC Offset will default to the local time zone of the machine.</para>
             
             <para>When the time is created, the microsecond parameter is divided by 
             10^6 --this corresponds to a microsecond.  This becomes the fractional portion 
             of the time.  For example, if "23" is specified as the <paramref name="microsecond"/>,
             the fraction portion of the time is ".000023", and the scale will be 6.  
             A microsecond of "2000" will become ".002000", and the scale will be 3.</para> 
             </remarks>
        </member>
        <member name="M:Teradata.Client.Provider.TdTimeWithTimeZone.#ctor(System.Int32,System.Int32,System.Int32,System.Int32,System.Int32)">
            <summary>
            An instance of TdTimeWithTimeZone is created from the time components specfied
            as integers.
            </summary>
            
            <param name="hour">The hour of the specified time.  Valid values are 0-23.</param>
            <param name="minute">The minutes of the specified time.  Valid value are 0-59.</param>
            <param name="second">The seconds of the specified time.  Valid values are 0-59.</param>
            <param name="microsecond">The number of microseconds of the specified time.</param>
            <param name="scale">The scale of the time.  Valid values are 0-6.</param>
            
            <exception cref="T:System.ArgumentOutOfRangeException">A time component is out of the valid range.</exception>
            
            <remarks>
            <para>A microsecond is 10^-6 of a second (.000001).  </para>
            
            <para>When the time is created, the microsecond parameter will first be divided by 
            10^6 --this corresponds to a microsecond.  Then this fractional portion of the time
            will be truncated at the position specified by the scale.  For example, if "231" 
            were passed in as the microsecond and 6 as the scale, the fraction component will 
            be set to ".000231".  However, if the microsecond is 23145 and the scale is 
            3, the fractional component will be ".023"</para> 
            
            <para>The UTC Offset will default "+00:00".</para>
            </remarks>
        </member>
        <member name="M:Teradata.Client.Provider.TdTimeWithTimeZone.#ctor(System.Int32,System.Int32,System.Int32,System.Int32,System.TimeSpan)">
            <summary>
            An instance of TdTimeWithTimeZone is created from the time components specfied
            as integers.
            </summary>
            
            <param name="hour">The hour of the specified time.  Valid values are 0-23.</param>
            <param name="minute">The minutes of the specified time.  Valid value are 0-59.</param>
            <param name="second">The seconds of the specified time.  Valid values are 0-59.</param>
            <param name="microsecond">The number of microseconds of the specified time.</param>
            <param name="utcOffset">The UTC offset of the time.  Valid value range from "-12:59" to "13:00".</param>
            
            <exception cref="T:System.ArgumentOutOfRangeException">A time component is out of the valid range.</exception>
            <exception cref="T:System.ArgumentException">The seconds and sub-seconds of the UTC Offset must be 0.</exception>
            
            <remarks>
            <para>A microsecond is 10^-6 of a second (.000001).  </para>
            
            <para>The scale will default to the scale of the <paramref name="microsecond"/> parameter.</para>
            
            <para>When the time is created, the microsecond parameter is divided by 
            10^6 --this corresponds to a microsecond.  This becomes the fractional portion 
            of the time.  For example, if "23" is specified as the <paramref name="microsecond"/>,
            the fraction portion of the time is ".000023", and scale of 6.  A microsecond of "2000"
            will become ".002000", and the scale will be 3.</para> 
            </remarks>
        </member>
        <member name="M:Teradata.Client.Provider.TdTimeWithTimeZone.#ctor(System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.TimeSpan)">
            <summary>
            An instance of TdTimeWithTimeZone is created from the time components specified as 
            integers.
            </summary>
            
            <param name="hour">The hour of the specified time.  Valid values are 0-23.</param>
            <param name="minute">The minutes of the specified time.  Valid value are 0-59.</param>
            <param name="second">The seconds of the specified time.  Valid values are 0-59.</param>
            <param name="microsecond">The number of microseconds of the specified time.</param>
            <param name="scale">The scale of the time.  Valid values are 0-6.</param>
            <param name="utcOffset">The UTC offset of the time.  Valid value range from "-12:59" to "13:00".</param>
            
            <exception cref="T:System.ArgumentOutOfRangeException">A time component is out of the valid range.</exception>
            <exception cref="T:System.ArgumentException">The seconds and sub-seconds of the UTC Offset must be 0.</exception>
            
            <remarks>
            <para>A microsecond is 10^-6 of a second (.000001).  </para>
            
            <para>When the time is created, the microsecond parameter will first be divided by 
            10^6 --this corresponds to a microsecond.  Then this fractional portion of the time
            will be truncated at the position specified by the scale.  For example, if "231" 
            were passed in as the microsecond and 6 as the scale, the fraction component will 
            be set to ".000231".  However, if the microsecond is 23145 and the scale is 
            3, the fractional component will be ".023"</para> 
            </remarks>
        </member>
        <member name="M:Teradata.Client.Provider.TdTimeWithTimeZone.#ctor(System.TimeSpan,System.TimeSpan)">
            <summary>
            An instance of TdTimeWithTimeZone is created from the time component specified as 
            a TimeSpan structure.
            </summary>
            
            <exception cref="T:System.ArgumentOutOfRangeException">The UTC offset is not within the valid range.</exception>
            <exception cref="T:System.ArgumentException">The minutes and seconds of the UTC Offset must be 0.</exception>
            
            <param name="value">A TimeSpan structure that represents the time.  This must be specfied in 24 hour time.</param>
            <param name="utcOffset">The UTC offset of the time.  Valid value range from "-12:59" to "13:00".</param>
            <exception cref="T:System.ArgumentOutOfRangeException">The TimeSpan is out of range.</exception>
        </member>
        <member name="M:Teradata.Client.Provider.TdTimeWithTimeZone.#ctor(System.TimeSpan,System.Int32,System.TimeSpan)">
            <summary>
            An instance of TdTimeWithTimeZone is created from the time component specified as 
            a TimeSpan structure.
            </summary>
            
            <param name="value">A TimeSpan structure that represents the time.  This must be specfied in 24 hour time.</param>
            <param name="scale">The scale of the time.  The scale can range from 0-6.</param>
            <param name="utcOffset">The UTC offset of the time.  Valid value range from "-12:59" to "13:00".</param>
            
            <exception cref="T:System.ArgumentOutOfRangeException">The UTC offset or scale is not within the valid range.</exception>
            <exception cref="T:System.ArgumentException">The minutes and seconds of the UTC Offset must be 0.</exception>
            
            <remarks>
            <para>If the fraction component contained in the TimeSpan structure contains more digits
            than what has been specified in the <paramref name="scale"/>, the fraction component will
            be truncated to match the scale.</para>
            </remarks>
        </member>
        <member name="M:Teradata.Client.Provider.TdTimeWithTimeZone.op_Explicit(Teradata.Client.Provider.TdTimestampWithTimeZone)~Teradata.Client.Provider.TdTimeWithTimeZone">
            <summary>
            The TdTimestampWithTimeZone is converted into a TdTimeWithTimeZone.
            </summary>
            
            <param name="value">The TdTimestampWithTimeZone that is to be converted.</param>
            
            <returns>A TdTimeWithTimeZone is returned.</returns>
            
            <remarks>
            <para>If the TdTimestampWithTimeZone <paramref name="value"/> is <see cref="F:Teradata.Client.Provider.TdTimestampWithTimeZone.Null"/> a 
            <see cref="F:Teradata.Client.Provider.TdTimeWithTimeZone.Null"/> is returned.</para>
            </remarks>
        </member>
        <member name="M:Teradata.Client.Provider.TdTimeWithTimeZone.op_Explicit(Teradata.Client.Provider.TdTimeWithTimeZone)~Teradata.Client.Provider.TdPeriodTimeWithTimeZone">
            <summary>
            Converts a TdTime into a TdPeriodTime.
            </summary>
            
            <param name="value">The TdTime that is to be converted.</param>
            
            <returns>a TdPeriodTime is returned that has a beginning bound of 
            <paramref name="value"/> and ending bound that is one time granule
            greater than value.</returns>
            
            <exception cref="T:System.ArgumentOutOfRangeException">The ending bound could not be created because 
            the <paramref name="value"/> is set to <see cref="F:Teradata.Client.Provider.TdTime.MaxValue"/></exception>
            
            <remarks>
            <para>
            A TdTime can be cast to a TdPeriodTime.  The beginning bounds of the 
            period will be <paramref name="value"/>, and the ending bound will be
            the value plus one time granule.
            </para>
            
            <para>The scale of the period will be the same as that of value.</para>
            
            <para>The following are examples of the result of casting a TdTime 
            to a TdPeriodTime:</para>
            
            <para>
            <list type="table">
            <listheader>
            <term>TdTime</term>
            <description>TdPeriodTime</description>
            <item>
            <term>00:00:00</term>
            <description>(00:00:00, 00:00:01</description>
            </item>
            <item>
            <term>23:59:59.00001</term>
            <description>(23:59:59.00001, 23:59:59.00002)</description>
            </item>
            <item>
            <term>23:59:59.8</term>
            <description>(23:59:59.8, 23:59:59.9)</description>
            </item>
            </listheader>
            </list>
            </para>        
            </remarks>
        </member>
        <member name="M:Teradata.Client.Provider.TdTimeWithTimeZone.op_Explicit(System.TimeSpan)~Teradata.Client.Provider.TdTimeWithTimeZone">
            <summary>
            The TimeSpan that represents the time is converted into a TdTimeWithTimeZone.
            </summary>
            
            <param name="value">The TimeSpan that is to be converted.</param>
            
            <returns>A TdTimeWithTimeZone is returned.</returns>
            
            <exception cref="T:System.ArgumentOutOfRangeException">The TimeSpan is out of range.</exception>
            
            <remarks>The TimeSpan structure will contain the time in 24 hour format.</remarks>
        </member>
        <member name="M:Teradata.Client.Provider.TdTimeWithTimeZone.op_Explicit(Teradata.Client.Provider.TdTimeWithTimeZone)~Teradata.Client.Provider.TdTime">
             <summary>
             The specified TdTimeWithTimeZone is converted into a TdTime value.
             </summary>
            
             <param name="value">The TdTimeWithTimeZone value that is to be converted into a TdTime.</param>
            
             <returns>A TdTime is returned.</returns>
            
             <remarks>The UTC time of the TdTimeWithTimeZone value is calculated and is returned
             as a TdTime.</remarks>
        </member>
        <member name="M:Teradata.Client.Provider.TdTimeWithTimeZone.CompareTo(Teradata.Client.Provider.TdTimeWithTimeZone)">
             <summary>
             Compares this instance to the specified TdTimeWithTimeZone <paramref name="other"/>. 
             </summary>
            
             <returns>
             The result of the comparison is returned as an integer.
             </returns>
             <remarks>
             	<para>
                     The integer returned when this instance is compared to <paramref name="other"/>
                     indicates the following:
                 </para>
             
             	<para>
             		<list type="table">
             			<listheader>
             				<term>Return Value</term>
             				<description>Meaning</description>
             			</listheader>
             			<item>
             				<term>Less than Zero</term>
             				<description>
             					<para>
                                     This instance is less than <paramref name="other"/>.
                                 </para>
             					<para>-or-</para>
             					<para>This instance is <see cref="F:Teradata.Client.Provider.TdTimeWithTimeZone.Null"/>.</para>
             				</description>
             			</item>
             			<item>
             				<term>Zero</term>
             				<description>
             					<para>
                                     This instance is equal to <paramref name="other"/>.
                                 </para>
             					<para>-or-</para>
             					<para>This instance is <Strong>Null</Strong> and value is <Strong>Null</Strong>.</para>
             				</description>
             			</item>
             			<item>
             				<term>Greater than Zero</term>
             				<description>
             					<para>
                                     This instance is greater than
                                     <paramref name="other"/>.
                                 </para>
             					<para>-or-</para>
             					<para>
             						<paramref name="other"/> is <Strong>Null</Strong>.
                                 </para>
             				</description>
             			</item>
             		</list>
             	</para>
             
             <para>
             When a comparison is performed between TdTimeWithTimeZone values, the UTC offset
             is taken into account.  The UTC offset is subtracted from the time which results
             in the UTC Time.  It is possible that a value can roll into the 
             next or previous day.  If this should occur only the time component is considered in
             the comparison.  The following table shows the result of several comparisons between
             TdTimeWithTimeZone values:
             </para>
             <para>
             <list type="table">
             <listheader>
             <term>Comparison</term>
             <description>Result</description>
             </listheader>
             <item>
             <term>"12:21:00+01:01" compare to "09:11:00-02:10"</term>
             <description>0 -- both values are equal.</description>
             </item>
             <item>
             <term>"20:21:00-04:00" compare to "09:11:00+02:10"</term>
             <description>-1 -- the left operand is less than the right.</description>
             </item>
             <item>
             <term>"01:54:00+03:00" compare to "19:11:00-01:00"</term>
             <description>1 -- the left operand is greater than the right.</description>
             </item>
             </list>     
             </para>
             </remarks>
             
             <param name="other">The TdTimeWithTimeZone to compare against.</param>
        </member>
        <member name="M:Teradata.Client.Provider.TdTimeWithTimeZone.CompareTo(System.Object)">
            <summary>
            Compares this instance to the specified TdTimeWithTimeZone <paramref name="obj"/>. 
            </summary>
            
            <returns>
            The result of the comparison is returned as an integer.
            </returns>
            
            <remarks>
            	<para>
                    The integer returned when this instance is compared to <paramref name="obj"/>
                    indicates the following:
                </para>
            	<para>
            		<list type="table">
            			<listheader>
            				<term>Return Value</term>
            				<description>Meaning</description>
            			</listheader>
            			<item>
            				<term>Less than Zero</term>
            				<description>
            					<para>This instance is less than <paramref name="obj"/>.</para>
            					<para>-or-</para>
            					<para>This instance is <see cref="F:Teradata.Client.Provider.TdTimeWithTimeZone.Null"/>.</para>
            				</description>
            			</item>
            			<item>
            				<term>Zero</term>
            				<description>
            					<para>
                                    This instance is equal to <paramref name="obj"/>.
                                </para>
            					<para>-or-</para>
            					<para>This instance is <Strong>Null</Strong> and <paramref name="obj"/> is <Strong>Null</Strong>.</para>
            				</description>
            			</item>
            			<item>
            				<term>Greater than Zero</term>
            				<description>
            					<para>
                                    This instance is greater than <paramref name="obj"/>.
                                </para>
            					<para>-or-</para>
            					<para>
            						<paramref name="obj"/> is <Strong>Null</Strong> or a <c>null</c> reference.
                                </para>
            				</description>
            			</item>
            		</list>
            	</para>
            
              <para><paramref name="obj"/> must be an instance of TdTimeWithTimeZone type or <c>null</c> reference.</para>
            
            <para>Refer to <see cref="M:Teradata.Client.Provider.TdTimeWithTimeZone.CompareTo(Teradata.Client.Provider.TdTimeWithTimeZone)"/> for more information on comparing
            TdTimeWithTimeZone values.</para>
            </remarks>
            
            <exception cref="T:System.ArgumentException"><paramref name="obj"/> is not of type TdTimeWithTimeZone</exception>
            
            <seealso cref="M:Teradata.Client.Provider.TdTimeWithTimeZone.CompareTo(Teradata.Client.Provider.TdTimeWithTimeZone)"/>
            
            <overloads>
            Compares this instance to the supplied object and returns whether it is less
            than, equal or greater than the supplied object.
            </overloads>
            
            <param name="obj">TdTimeWithTimeZone instance to compare against.</param>
        </member>
        <member name="M:Teradata.Client.Provider.TdTimeWithTimeZone.GetHashCode">
            <summary>
            Returns the hash code for this instance. 
            </summary>
            
            <returns>The hash code is returned</returns>
        </member>
        <member name="M:Teradata.Client.Provider.TdTimeWithTimeZone.Equals(System.Object)">
            <summary>
                Compares this instance and <paramref name="obj"/> to determine whether they are equal.
            </summary>
            
            <returns><c>true</c> is returned if the two TdTimeWithTimeZone are equal, <c>false</c> otherwise.</returns>
            
            <remarks>
            	<para><c>false</c> will be returned if:</para>
            	<list type="bullet">
            		<item>
                        This instance or <paramref name="obj"/> is <see cref="F:Teradata.Client.Provider.TdTimeWithTimeZone.Null"/>.
                    </item>
            		<item>
                        This instance is not equal to <paramref name="obj"/>.
                    </item>
            		<item>
            			<paramref name="obj"/> is not of type TdTimeWithTimeZone or <c>null</c>.
                    </item>
            	</list>
            	<para><c>true</c> will be returned if:</para>
            	<list type="bullet">
            		<item>
                        This instance and <paramref name="obj"/> are <Strong>Null</Strong>.
                    </item>
            		<item>
                        This instance is equal to <paramref name="obj"/>.
                    </item>
            	</list>
            
            <para>Refer to <see cref="M:Teradata.Client.Provider.TdTimeWithTimeZone.CompareTo(Teradata.Client.Provider.TdTimeWithTimeZone)"/> for more information on comparing
            TdTimeWithTimeZone values.</para>
            </remarks>
            
            <example>
                The following code example uses various comparison methods and operators: 
                <code lang="CS">
            TdTimeWithTimeZone  later = new TdTimeWithTimeZone(new TimeSpan(20, 30, 0), new TimeSpan(-2, 0, 0));
            Object earlier = new TdTimeWithTimeZone(new TimeSpan(15, 21, 0), new TimeSpan(-2, 0, 0));
             
            // The following comparison is equivalent to using
            //    false == TdTimeWithTimeZone.Equals(later, (TdTimeWithTimeZone) earlier)
            //    later != (TdTimeWithTimeZone) earlier
            //    true == TdTimeWithTimeZone.NotEquals(later, (TdTimeWithTimeZone) earlier)
            //    
            if (false == later.Equals(earlier))
            {
               Console.WriteLine(“later does not equal earlier”);
            }
                </code>
            </example>
            
            <overloads>Returns a value indicating whether two instances of TdTimeWithTimeZone are equal.</overloads>
            
            <param name="obj">TdTimeWithTimeZone instance that will be compared to this instance of TdTimeWithTimeZone.</param>
        </member>
        <member name="M:Teradata.Client.Provider.TdTimeWithTimeZone.Equals(Teradata.Client.Provider.TdTimeWithTimeZone)">
            <summary>
            Compares this instance and another TdTimeWithTimeZone to determine whether they are equal. 
            </summary>
            
            <returns><c>true</c> if the two TdTimeWithTimeZone are equal, <c>false</c> otherwise.</returns>
            
            <remarks>
            	<para><c>false</c> will be returned if:</para>
            	<list type="bullet">
            		<item>
                        This instance or <paramref name="other"/> is <see cref="F:Teradata.Client.Provider.TdTimeWithTimeZone.Null"/>.
                    </item>
            		<item>
                        This instance is not equal to <paramref name="other"/>.
                    </item>
            	</list>
            	<para><c>true</c> will be returned if:</para>
            	<list type="bullet">
            		<item>
                        This instance and <paramref name="other"/> are <Strong>Null</Strong>.
                    </item>
            		<item>
                        This instance is equal to <paramref name="other"/>.
                    </item>
            	</list>
            
            <para>Refer to <see cref="M:Teradata.Client.Provider.TdTimeWithTimeZone.CompareTo(Teradata.Client.Provider.TdTimeWithTimeZone)"/> for more information about comparing
            TdTimeWithTimeZone values.</para>
            </remarks>
            
            <param name="other">TdTimeWithTimeZone instance that will be compared to this instance 
            of TdTimeWithTimeZone.</param>
        </member>
        <member name="M:Teradata.Client.Provider.TdTimeWithTimeZone.Compare(Teradata.Client.Provider.TdTimeWithTimeZone,Teradata.Client.Provider.TdTimeWithTimeZone)">
            <summary>
            Compares two instances of TdTimeWithTimeZone and returns a value indicating 
            whether <paramref name="left"/> is greater than, less than or equal to 
            <paramref name="right"/>.
            </summary>
            
            <returns>
            The result of the comparison is returned as an integer.
            </returns>
            
            <remarks>
            	<para>
                    The integer returned when <paramref name="left"/> is compared to <paramref name="right"/>
                    indicates the following:
                </para>
            	<para>
            	<list type="table">
            		<listheader>
            			<term>Return Value</term>
            			<description>Meaning</description>
            		</listheader>
            		<item>
            			<term>Less than zero</term>
            			<description>
                            <para><paramref name="left"/> is less than <paramref name="right"/>.</para> 
                            <para>-or-</para>
                            <para><paramref name="left"/> is <see cref="F:Teradata.Client.Provider.TdTimeWithTimeZone.Null"/>.</para>
                        </description>
            		</item>
            		<item>
            			<term>Zero</term>
            			<description>
                            <para><paramref name="left"/> is equal to <paramref name="right"/>.</para>
                            <para>-or-</para>
                            <para><paramref name="left"/> and <paramref name="right"/> are <Strong>Null</Strong>.</para>
                        </description>
            		</item>
            		<item>
            			<term>Greater than zero</term>
            			<description>
                            <para><paramref name="left"/> is greater than <paramref name="right"/>.</para>
                            <para>-or-</para>
                            <para><paramref name="right"/> is <Strong>Null.</Strong></para>
                        </description>
            		</item>
            	</list>
                </para>
            
            <para>
            Refer to <see cref="M:Teradata.Client.Provider.TdTimeWithTimeZone.CompareTo(Teradata.Client.Provider.TdTimeWithTimeZone)"/> for more information on comparing
            TdTimeWithTimeZone values.
            </para>
            </remarks>
            
            <seealso cref="M:Teradata.Client.Provider.TdTimeWithTimeZone.CompareTo(Teradata.Client.Provider.TdTimeWithTimeZone)"/>
            
            <param name="left">An instance of TdTimeWithTimeZone.</param>
            <param name="right">An instance of TdTimeWithTimeZone.</param>
        </member>
        <member name="M:Teradata.Client.Provider.TdTimeWithTimeZone.Equals(Teradata.Client.Provider.TdTimeWithTimeZone,Teradata.Client.Provider.TdTimeWithTimeZone)">
            <summary>
                Compares two <see cref="T:Teradata.Client.Provider.TdTimeWithTimeZone"/> instances to determine whether they are
                equal.
            </summary>
            
            <returns>
            A boolean is returned that indicates the result of the comparison.
            </returns>
            
            <remarks>
            	<para>
            		The value returned is <c>true</c> if the <paramref name="left"/> is 
                    equal to the <paramref name="right"/>, <c>false</c> otherwise.
                </para>
            	<para>
            		<list type="table">
            			<listheader>
            				<term>Return Value</term>
            				<description>Description</description>
            			</listheader>
            			<item>
            				<term><c>true</c></term>
                            <description>
                                <para><paramref name="left"/> and <paramref name="right"/> are <see cref="F:Teradata.Client.Provider.TdTimeWithTimeZone.Null"/></para> 
                                <para>-or-</para>
                                <para><paramref name="left"/> is equal to <paramref name="right"/>.</para>
                            </description>
            			</item>
            			<item>
            				<term><c>false</c></term>
                            <description>
                            <para><paramref name="left"/> or <paramref name="right"/> is <strong>Null</strong></para>
                            <para>-or-</para>
                            <para><paramref name="left"/> is not equal to <paramref name="right"/>.</para>
                            </description>
            			</item>
            		</list>
            	</para>
            
            <para>When comparing two time values the UTC offset is also included in the comparison.  
            The UTC offset is subtracted from the time which results in the UTC time.  
            The following table shows the result when comparing two TdTimeWtihTimeZone values:</para>
            
            <para>
            <list type="table">
            <listheader>
            <term>Equals Comparison</term>
            <description>Result</description>
            </listheader>
            <item>
            <term>"23:10:11+05:00" Equals "15:00:02-02:00"</term>
            <description>false</description>
            </item>
            <item>
            <term>"23:10:11+01:00" Equals "21:10:11-01:00"</term>
            <description>true</description>
            </item>
            <item>
            <term>"21:53:00-08:00" Equals "21:53:00-06:00"</term>
            <description>false</description>
            </item>
            <item>
            <term>"21:53:00-08:00" Equals "05:53:00+00:00"</term>
            <description>true</description>
            </item>
            </list>
            </para>
            </remarks>
            
            <example>
                The following code example uses various comparison methods and operators.
                <code lang="CS">
            TdTimeWithTimeZone  later = new TdTimeWithTimeZone(new TimeSpan(15, 45, 0), new TimeSpan(-4, 0, 0));
            TdTimeWithTimeZone earlier = new TdTimeWithTimeZone(new TimeSpan(14, 30, 0), new TimeSpan(-3, 0, 0));
             
            // The following comparison methods and operators are equivalent
            if (false == TdTimeWithTimeZone.Equals(later, earlier) ||
                later != earlier ||
                true == TdTimeWithTimeZone.NotEquals(later, earlier) )
            {
               Console.WriteLine(“later does not equal earlier”);
            }
                </code>
            </example>
            
            <param name="left">A TdTimeWithTimeZone instance.</param>
            <param name="right">A TdTimeWithTimeZone instance.</param>
        </member>
        <member name="M:Teradata.Client.Provider.TdTimeWithTimeZone.NotEquals(Teradata.Client.Provider.TdTimeWithTimeZone,Teradata.Client.Provider.TdTimeWithTimeZone)">
            <summary>
            Compares two TdTimeWithTimeZone to determine whether the <paramref name="left"/> operand is 
            not equal to the <paramref name="right"/> operand.
            </summary>
            
            <returns>
            A boolean is returned that indicates the result of the comparison.
            </returns>
            
            <remarks>
            	<para>
            		The value returned is <c>true</c> if the <paramref name="left"/> is 
                    not equal to the <paramref name="right"/>, <c>false</c> otherwise.
                </para>
            	<para>
            		<list type="table">
            			<listheader>
            				<term>Return Value</term>
            				<description>Description</description>
            			</listheader>
            			<item>
            				<term><c>true</c></term>
                            <description>
                                <para><paramref name="left"/> or <paramref name="right"/> is <see cref="F:Teradata.Client.Provider.TdTimeWithTimeZone.Null"/></para> 
                                <para>-or-</para>
                                <para><paramref name="left"/> is less than or greater than <paramref name="right"/>.</para>
                            </description>
            			</item>
            			<item>
            				<term><c>false</c></term>
                            <description>
                            <para><paramref name="left"/> and <paramref name="right"/> are <strong>Null</strong></para>
                            <para>-or-</para>
                            <para><paramref name="left"/> is equal to <paramref name="right"/>.</para>
                            </description>
            			</item>
            		</list>
            	</para>
            
            <para>When comparing two time values the UTC offset is also included in the comparison.  
            The UTC offset is subtracted from the time which results in the UTC time.  
            The following table shows the result when comparing two TdTimeWtihTimeZone values:</para>
            
            <para>
            <list type="table">
            <listheader>
            <term>NotEquals Comparison</term>
            <description>Result</description>
            </listheader>
            <item>
            <term>"23:10:11+05:00" NotEquals "15:00:02-02:00"</term>
            <description>true</description>
            </item>
            <item>
            <term>"23:10:11+01:00" NotEquals "21:10:11-01:00"</term>
            <description>false</description>
            </item>
            <item>
            <term>"21:53:00-08:00" NotEquals "21:53:00-06:00"</term>
            <description>true</description>
            </item>
            <item>
            <term>"21:53:00-08:00" NotEquals "05:53:00+00:00"</term>
            <description>false</description>
            </item>
            </list>
            </para>
            </remarks>
            
            <param name="left">An instance of TdTimeWithTimeZone.</param>
            <param name="right">An instance of TdTimeWithTimeZone.</param>     
        </member>
        <member name="M:Teradata.Client.Provider.TdTimeWithTimeZone.GreaterThan(Teradata.Client.Provider.TdTimeWithTimeZone,Teradata.Client.Provider.TdTimeWithTimeZone)">
            <summary>
            Compares two TdTimeWithTimeZone to determine whether the <paramref name="left"/> operand is 
            greater than the <paramref name="right"/> operand.
            </summary>
            
            <returns>
            A boolean is returned that indicates the result of the comparison.
            </returns>
            
            <remarks>
            	<para>
            		The value returned is <c>true</c> if the <paramref name="left"/> is greater
                    than the <paramref name="right"/>, <c>false</c> otherwise.
                </para>
            	<para>
            		<list type="table">
            			<listheader>
            				<term>Return Value</term>
            				<description>Description</description>
            			</listheader>
            			<item>
            				<term><c>true</c></term>
                            <description><paramref name="left"/> and <paramref name="right"/> are not <see cref="F:Teradata.Client.Provider.TdTimeWithTimeZone.Null"/> and
                            <paramref name="left"/> is greater than <paramref name="right"/>.
                            </description>
            			</item>
            			<item>
            				<term><c>false</c></term>
                            <description>
                            <para><paramref name="left"/> and / or <paramref name="right"/> is <strong>Null</strong> </para>
                            <para>-or-</para>
                            <para><paramref name="left"/> is less than or equal to <paramref name="right"/>.</para>
                            </description>
            			</item>
            		</list>
            	</para>
            
            <para>Comparison operators always returns <c>false</c> if one of the operands is <strong>Null</strong>. 
            Therefore, you must not assume that the reverse condition is <c>true</c>. For example you cannot 
            assume that the left operand is less than or equal to the right operand if the <c>GreaterThan</c> operator 
            returns <c>false</c>.</para> 
            
            <para>When comparing two time values the UTC offset is also included in the comparison.  
            The UTC offset is subtracted from the time which results in the UTC time.
            The following table shows the result when comparing two TdTimeWtihTimeZone values:</para>
            
            <para>
            <list type="table">
            <listheader>
            <term>GreaterThan Comparison</term>
            <description>Result</description>
            </listheader>
            <item>
            <term>"23:10:11+05:00" GreaterThan "23:00:00+05:00"</term>
            <description>true</description>
            </item>
            <item>
            <term>"23:10:11+05:00" GreaterThan "15:00:02-02:00"</term>
            <description>true</description>
            </item>
            <item>
            <term>"23:10:11+01:00" GreaterThan "21:10:11-01:00"</term>
            <description>false</description>
            </item>
            <item>
            <term>"21:53:00-08:00" GreaterThan "21:53:00-06:00"</term>
            <description>true</description>
            </item>
            <item>
            <term>"21:53:00-08:00" GreaterThan "05:53:00-02:00"</term>
            <description>false</description>
            </item>
            </list>    
            </para>
            </remarks>
            
            <param name="left">An instance of TdTimeWithTimeZone.</param>
            <param name="right">An instance of TdTimeWithTimeZone.</param>
        </member>
        <member name="M:Teradata.Client.Provider.TdTimeWithTimeZone.GreaterThanOrEqual(Teradata.Client.Provider.TdTimeWithTimeZone,Teradata.Client.Provider.TdTimeWithTimeZone)">
            <summary>
            Compares two TdTimeWithTimeZone to determine whether the <paramref name="left"/> operand is 
            greater than or equal to the <paramref name="right"/> operand.
            </summary>
            
            <returns>
            A boolean is returned that indicates the result of the comparison.
            </returns>
            
            <remarks>
            	<para>
            		The value returned is <c>true</c> if the <paramref name="left"/> is greater
                    than or equal to the <paramref name="right"/>, <c>false</c> otherwise.
                </para>
            	<para>
            		<list type="table">
            			<listheader>
            				<term>Return Value</term>
            				<description>Description</description>
            			</listheader>
            			<item>
            				<term><c>true</c></term>
                            <description><paramref name="left"/> and <paramref name="right"/> are not <see cref="F:Teradata.Client.Provider.TdTimeWithTimeZone.Null"/> and
                            <paramref name="left"/> is greater than or equal to <paramref name="right"/>.
                            </description>
            			</item>
            			<item>
            				<term><c>false</c></term>
                            <description>
                            <para><paramref name="left"/> and / or <paramref name="right"/> is <strong>Null</strong> </para>
                            <para>-or-</para>
                            <para><paramref name="left"/> is less than <paramref name="right"/>.</para>
                            </description>
            			</item>
            		</list>
            	</para>
            
            <para>Comparison operators always returns <c>false</c> if one of the operands is <strong>Null</strong>. 
            Therefore, you must not assume that the reverse condition is <c>true</c>. For example you cannot 
            assume that the left operand is less than the right operand if <c>GreaterThanOrEqual</c> operator 
            returns <c>false</c>.</para> 
            
            <para>When comparing two time values the UTC offset is also included in the comparison.  
            The UTC offset is subtracted from the time which results in the UTC time.
            The following table shows the result when comparing two TdTimeWtihTimeZone values:</para>
            
            <para>
            <list type="table">
            <listheader>
            <term>GreaterThanOrEqual Comparison</term>
            <description>Result</description>
            </listheader>
            <item>
            <term>"23:10:11+05:00" GreaterThanOrEqual "23:00:00+05:00"</term>
            <description>true</description>
            </item>
            <item>
            <term>"23:10:11+05:00" GreaterThanOrEqual "15:00:02-02:00"</term>
            <description>true</description>
            </item>
            <item>
            <term>"23:10:11+01:00" GreaterThanOrEqual "21:10:11-01:00"</term>
            <description>true</description>
            </item>
            <item>
            <term>"21:53:00-08:00" GreaterThanOrEqual "21:53:00-06:00"</term>
            <description>true</description>
            </item>
            <item>
            <term>"21:53:00-08:00" GreaterThanOrEqual "05:53:00-02:00"</term>
            <description>false</description>
            </item>
            <item>
            <term>"21:53:00-08:00" GreaterThanOrEqual "05:53:00-00:00"</term>
            <description>true</description>
            </item>
            </list>        
            </para>
            </remarks>
            
            <param name="left">An instance of TdTimeWithTimeZone.</param>
            <param name="right">An instance of TdTimeWithTimeZone.</param>
        </member>
        <member name="M:Teradata.Client.Provider.TdTimeWithTimeZone.LessThan(Teradata.Client.Provider.TdTimeWithTimeZone,Teradata.Client.Provider.TdTimeWithTimeZone)">
            <summary>
            Compares two TdTimeWithTimeZone to determine whether the <paramref name="left"/> operand is 
            less than the <paramref name="right"/> operand.
            </summary>
            
            <returns>
            A boolean is returned that indicates the result of the comparison.
            </returns>
            
            <remarks>
            	<para>
            		The value returned is <c>true</c> if the <paramref name="left"/> is less
                    than the <paramref name="right"/>, <c>false</c> otherwise.
                </para>
            	<para>
            		<list type="table">
            			<listheader>
            				<term>Return Value</term>
            				<description>Description</description>
            			</listheader>
            			<item>
            				<term><c>true</c></term>
                            <description><paramref name="left"/> and <paramref name="right"/> are not <see cref="F:Teradata.Client.Provider.TdTimeWithTimeZone.Null"/> and
                            <paramref name="left"/> is less than <paramref name="right"/>.
                            </description>
            			</item>
            			<item>
            				<term><c>false</c></term>
                            <description>
                            <para><paramref name="left"/> and / or <paramref name="right"/> is <strong>Null</strong></para>
                            <para>-or-</para>
                            <para><paramref name="left"/> is greater than or equal to <paramref name="right"/>.</para>
                            </description>
            			</item>
            		</list>
            	</para>
            
            <para>Comparison operators always returns <c>false</c> if one of the operands is <strong>Null</strong>. 
            Therefore, you must not assume that the reverse condition is <c>true</c>. For example you cannot 
            assume that the left operand is greater than or equal the right operand if the <c>LessThan</c> operator 
            returns <c>false</c>.</para> 
            
            <para>When comparing two time values the UTC offset is also included in the comparison.  
            The UTC offset is subtracted from the time which results in the UTC time.
            The following table shows the result when comparing two TdTimeWtihTimeZone values:</para>
            
            <para>
            <list type="table">
            <listheader>
            <term>LessThan Comparison</term>
            <description>Result</description>
            </listheader>
            <item>
            <term>"23:00:11+05:00" LessThan "23:10:00+05:00"</term>
            <description>true</description>
            </item>
            <item>
            <term>"20:10:11+05:00" LessThan "15:00:02-02:00"</term>
            <description>true</description>
            </item>
            <item>
            <term>"23:10:11+01:00" LessThan "21:10:11-01:00"</term>
            <description>false</description>
            </item>
            <item>
            <term>"21:53:00-08:00" LessThan "21:53:00-06:00"</term>
            <description>false</description>
            </item>
            <item>
            <term>"21:53:00-08:00" LessThan "05:53:00-02:00"</term>
            <description>true</description>
            </item>
            <item>
            <term>"21:53:00-10:00" LessThan "05:53:00-01:00"</term>
            <description>false</description>
            </item>
            </list>    
            </para>
            </remarks>
            
            <param name="left">An instance of TdTimeWithTimeZone.</param>
            <param name="right">An instance of TdTimeWithTimeZone.</param>
        </member>
        <member name="M:Teradata.Client.Provider.TdTimeWithTimeZone.LessThanOrEqual(Teradata.Client.Provider.TdTimeWithTimeZone,Teradata.Client.Provider.TdTimeWithTimeZone)">
            <summary>
            Compares two TdTimeWithTimeZone to determine whether the <paramref name="left"/> operand is 
            less than or equal to the <paramref name="right"/> operand.
            </summary>
            
            <returns>
            A boolean is returned that indicates the result of the comparison.
            </returns>
            
            <remarks>
            	<para>
            		The value returned is <c>true</c> if the <paramref name="left"/> is less
                    than or equal to the <paramref name="right"/>, <c>false</c> otherwise.
                </para>
            	<para>
            		<list type="table">
            			<listheader>
            				<term>Return Value</term>
            				<description>Description</description>
            			</listheader>
            			<item>
            				<term><c>true</c></term>
                            <description><paramref name="left"/> and <paramref name="right"/> are not <see cref="F:Teradata.Client.Provider.TdTimeWithTimeZone.Null"/> and
                            <paramref name="left"/> is less than or equal to <paramref name="right"/>.
                            </description>
            			</item>
            			<item>
            				<term><c>false</c></term>
                            <description>
                            <para><paramref name="left"/> and / or <paramref name="right"/> is <strong>Null</strong></para>
                            <para>-or-</para>
                            <para><paramref name="left"/> is greater than <paramref name="right"/>.</para>
                            </description>
            			</item>
            		</list>
            	</para>
            
            <para>Comparison operators always returns <c>false</c> if one of the operands is <strong>Null</strong>. 
            Therefore, you must not assume that the reverse condition is <c>true</c>. For example you cannot 
            assume that the left operand is greater than the right operand if the <c>LessThanOrEqual</c> operator 
            returns <c>false</c>.</para> 
            
            <para>When comparing two time values the UTC offset is also included in the comparison.  
            The UTC offset is subtracted from the time which results in the UTC time.
            The following table shows the result when comparing two TdTimeWtihTimeZone values:</para>
            
            <para>
            <list type="table">
            <listheader>
            <term>LessThanOrEqual Comparison</term>
            <description>Result</description>
            </listheader>
            <item>
            <term>"23:00:11+05:00" LessThanOrEqual "23:10:00+05:00"</term>
            <description>true</description>
            </item>
            <item>
            <term>"20:10:11+05:00" LessThanOrEqual "15:00:02-02:00"</term>
            <description>true</description>
            </item>
            <item>
            <term>"23:10:11+01:00" LessThanOrEqual "21:10:11-01:00"</term>
            <description>true</description>
            </item>
            <item>
            <term>"21:53:00-08:00" LessThanOrEqual "21:53:00-06:00"</term>
            <description>false</description>
            </item>
            <item>
            <term>"21:53:00-09:00" LessThanOrEqual "07:53:00+01:00"</term>
            <description>true</description>
            </item>
            <item>
            <term>"21:53:00-10:00" LessThanOrEqual "05:53:00-01:00"</term>
            <description>false</description>
            </item>
            </list>
            </para>
            </remarks>
            
            <param name="left">An instance of TdTimeWithTimeZone.</param>
            <param name="right">An instance of TdTimeWithTimeZone.</param>
        </member>
        <member name="M:Teradata.Client.Provider.TdTimeWithTimeZone.op_Equality(Teradata.Client.Provider.TdTimeWithTimeZone,Teradata.Client.Provider.TdTimeWithTimeZone)">
            <summary>
            Compares two TdTimeWithTimeZones to determine whether the <paramref name="left"/> operand is 
            equal to the <paramref name="right"/> operand.
            </summary>
            
            <returns>
            A boolean is returned that indicates the result of the comparison.
            </returns>
            
            <remarks>
            	<para>
            		<c>true</c> if the <paramref name="left"/> is 
                    equal to the <paramref name="right"/>, <c>false</c> otherwise.
                </para>
            	<para>
            		<list type="table">
            			<listheader>
            				<term>Return Value</term>
            				<description>Description</description>
            			</listheader>
            			<item>
            				<term><c>true</c></term>
                            <description>
                                <para><paramref name="left"/> and <paramref name="right"/> are <see cref="F:Teradata.Client.Provider.TdTimeWithTimeZone.Null"/></para> 
                                <para>-or-</para>
                                <para><paramref name="left"/> is equal to <paramref name="right"/>.</para>
                            </description>
            			</item>
            			<item>
            				<term><c>false</c></term>
                            <description>
                            <para><paramref name="left"/> or <paramref name="right"/> is <strong>Null</strong></para>
                            <para>-or-</para>
                            <para><paramref name="left"/> is not equal to <paramref name="right"/>.</para>
                            </description>
            			</item>
            		</list>
            	</para>
            
            <para>Unlike comparison operators, Equality operators do not always return 
            <c>false</c> when left and right operands are <strong>Null</strong>. Therefore 
            the reverse condition can be considered <c>true</c>. TdTimeWithTimeZone implementation
            is very similar to the <see cref="T:System.Nullable"/> class in this regard.</para>
            
            <para>Refer to <see cref="M:Teradata.Client.Provider.TdTimeWithTimeZone.Equals(Teradata.Client.Provider.TdTimeWithTimeZone)"/> for further information
            on this equality operator.</para> 
            </remarks>
            
            <param name="left">An instance of TdTimeWithTimeZones.</param>
            <param name="right">An instance of TdTimeWithTimeZones.</param> 
            
            <example>
            Following example shows that the Equality operator can safely be used in an if statement.
            <code>
            TdTimeWithTimeZone x = TdTimeWithTimeZone.Null;
            TdTimeWithTimeZone y = TdTimeWithTimeZone.MinValue;
            
            if (x == y)
            {
                // x is equal to y.
                Console.WriteLine(@"X is equal to Y").
            }
            else
            {
                // x is not equal y
                Console.WriteLine(@"X is not equal to Y").
            }
            
            y = TdTimeWithTimeZone.Null;
            
            if (x == y)
            {
                // x is equal to y.
                Console.WriteLine(@"X is equal to Y").
            }
            else
            {
                // x is not equal y
                Console.WriteLine(@"X is not equal to Y").
            }
            </code>
            </example>
        </member>
        <member name="M:Teradata.Client.Provider.TdTimeWithTimeZone.op_Inequality(Teradata.Client.Provider.TdTimeWithTimeZone,Teradata.Client.Provider.TdTimeWithTimeZone)">
            <summary>
            Compares two TdTimeWithTimeZones to determine whether the <paramref name="left"/> operand is 
            not equal to the <paramref name="right"/> operand.
            </summary>
            
            <returns>
            A boolean is returned that indicates the result of the comparison.
            </returns>
            
            <remarks>
            	<para>
            		The value returned is <c>true</c> if the <paramref name="left"/> is 
                    not equal to the <paramref name="right"/>, <c>false</c> otherwise.
                </para>
            	<para>
            		<list type="table">
            			<listheader>
            				<term>Return Value</term>
            				<description>Description</description>
            			</listheader>
            			<item>
            				<term><c>true</c></term>
                            <description>
                                <para><paramref name="left"/> or <paramref name="right"/> is <see cref="F:Teradata.Client.Provider.TdTimeWithTimeZone.Null"/></para> 
                                <para>-or-</para>
                                <para><paramref name="left"/> is less than or greater than <paramref name="right"/>.</para>
                            </description>
            			</item>
            			<item>
            				<term><c>false</c></term>
                            <description>
                            <para><paramref name="left"/> and <paramref name="right"/> are <strong>Null</strong></para>
                            <para>-or-</para>
                            <para><paramref name="left"/> is equal to <paramref name="right"/>.</para>
                            </description>
            			</item>
            		</list>
            	</para>
            
            <para>
            Refer to <see cref="M:Teradata.Client.Provider.TdTimeWithTimeZone.NotEquals(Teradata.Client.Provider.TdTimeWithTimeZone,Teradata.Client.Provider.TdTimeWithTimeZone)"/> for further information on
            this inequality operator.
            </para>
            </remarks>
            
            <param name="left">An instance of TdTimeWithTimeZone.</param>
            <param name="right">An instance of TdTimeWithTimeZone.</param>        
        </member>
        <member name="M:Teradata.Client.Provider.TdTimeWithTimeZone.op_GreaterThan(Teradata.Client.Provider.TdTimeWithTimeZone,Teradata.Client.Provider.TdTimeWithTimeZone)">
            <summary>
            Compares two TdTimeWithTimeZone to determine whether the <paramref name="left"/> operand is 
            greater than the <paramref name="right"/> operand.
            </summary>
            
            <returns>
            A boolean is returned that indicates the result of the comparison.
            </returns>
            
            <remarks>
            	<para>
            		The value returned is <c>true</c> if the <paramref name="left"/> is greater
                    than the <paramref name="right"/>, <c>false</c> otherwise.
                </para>
            	<para>
            		<list type="table">
            			<listheader>
            				<term>Return Value</term>
            				<description>Description</description>
            			</listheader>
            			<item>
            				<term><c>true</c></term>
                            <description><paramref name="left"/> and <paramref name="right"/> are not <see cref="F:Teradata.Client.Provider.TdTimeWithTimeZone.Null"/> and
                            <paramref name="left"/> is greater than <paramref name="right"/>.
                            </description>
            			</item>
            			<item>
            				<term><c>false</c></term>
                            <description>
                            <para><paramref name="left"/> and / or <paramref name="right"/> is <strong>Null</strong> </para>
                            <para>-or-</para>
                            <para><paramref name="left"/> is less than or equal to <paramref name="right"/>.</para>
                            </description>
            			</item>
            		</list>
            	</para>
            
            <para>Comparison operators always returns <c>false</c> if one of the operands is <strong>Null</strong>. 
            Therefore, you must not assume that the reverse condition is <c>true</c>. For example you cannot 
            assume that the left operand is less than or equal to the right operand if the "<c>&gt;</c>" operator 
            returns <c>false</c>.</para> 
            
            <para>Refer to <see cref="M:Teradata.Client.Provider.TdTimeWithTimeZone.GreaterThan(Teradata.Client.Provider.TdTimeWithTimeZone,Teradata.Client.Provider.TdTimeWithTimeZone)"/> for further information on
            this inequality operator.</para>
            </remarks>
            
            <param name="left">An instance of TdTimeWithTimeZone.</param>
            <param name="right">An instance of TdTimeWithTimeZone.</param>
        </member>
        <member name="M:Teradata.Client.Provider.TdTimeWithTimeZone.op_GreaterThanOrEqual(Teradata.Client.Provider.TdTimeWithTimeZone,Teradata.Client.Provider.TdTimeWithTimeZone)">
            <summary>
            Compares two TdTimeWithTimeZones to determine whether the <paramref name="left"/> operand is 
            greater than or equal to the <paramref name="right"/> operand.
            </summary>
            
            <returns>
            A boolean is returned that indicates the result of the comparison.
            </returns>
            
            <remarks>
            	<para>
            		The value returned is <c>true</c> if the <paramref name="left"/> is greater
                    than or equal to the <paramref name="right"/>, <c>false</c> otherwise.
                </para>
            	<para>
            		<list type="table">
            			<listheader>
            				<term>Return Value</term>
            				<description>Description</description>
            			</listheader>
            			<item>
            				<term><c>true</c></term>
                            <description><paramref name="left"/> and <paramref name="right"/> are not <see cref="F:Teradata.Client.Provider.TdTimeWithTimeZone.Null"/> and
                            <paramref name="left"/> is greater than or equal to <paramref name="right"/>.
                            </description>
            			</item>
            			<item>
            				<term><c>false</c></term>
                            <description>
                            <para><paramref name="left"/> and / or <paramref name="right"/> is <strong>Null</strong> </para>
                            <para>-or-</para>
                            <para><paramref name="left"/> is less than <paramref name="right"/>.</para>
                            </description>
            			</item>
            		</list>
            	</para>
            
            <para>Comparison operators always returns <c>false</c> if one of the operands is <strong>Null</strong>. 
            Therefore, you must not assume that the reverse condition is <c>true</c>. For example you cannot 
            assume that the left operand is less than the right operand if the "<c>&gt;=</c>" operator 
            returns <c>false</c>.</para> 
            
            <para>Refer to <see cref="M:Teradata.Client.Provider.TdTimeWithTimeZone.GreaterThanOrEqual(Teradata.Client.Provider.TdTimeWithTimeZone,Teradata.Client.Provider.TdTimeWithTimeZone)"/> for further information on
            this inequality operator.</para>        
            </remarks>
            
            <param name="left">An instance of TdTimeWithTimeZone.</param>
            <param name="right">An instance of TdTimeWithTimeZone.</param>
        </member>
        <member name="M:Teradata.Client.Provider.TdTimeWithTimeZone.op_LessThan(Teradata.Client.Provider.TdTimeWithTimeZone,Teradata.Client.Provider.TdTimeWithTimeZone)">
            <summary>
            Compares two TdTimeWithTimeZones to determine whether the <paramref name="left"/> operand is 
            less than the <paramref name="right"/> operand.
            </summary>
            
            <returns>
            A boolean is returned that indicates the result of the comparison.
            </returns>
            
            <remarks>
            	<para>
            		The value returned is <c>true</c> if the <paramref name="left"/> is less
                    than the <paramref name="right"/>, <c>false</c> otherwise.
                </para>
            	<para>
            		<list type="table">
            			<listheader>
            				<term>Return Value</term>
            				<description>Description</description>
            			</listheader>
            			<item>
            				<term><c>true</c></term>
                            <description><paramref name="left"/> and <paramref name="right"/> are not <see cref="F:Teradata.Client.Provider.TdTimeWithTimeZone.Null"/> and
                            <paramref name="left"/> is less than <paramref name="right"/>.
                            </description>
            			</item>
            			<item>
            				<term><c>false</c></term>
                            <description>
                            <para><paramref name="left"/> and / or <paramref name="right"/> is <strong>Null</strong></para>
                            <para>-or-</para>
                            <para><paramref name="left"/> is greater than or equal to <paramref name="right"/>.</para>
                            </description>
            			</item>
            		</list>
            	</para>
            
            <para>Comparison operators always returns <c>false</c> if one of the operands is <strong>Null</strong>. 
            Therefore, you must not assume that the reverse condition is <c>true</c>. For example you cannot 
            assume that the left operand is greater than or equal the right operand if the "<c>&lt;</c>" operator 
            returns <c>false</c>.</para> 
            
            <para>Refer to <see cref="M:Teradata.Client.Provider.TdTimeWithTimeZone.LessThan(Teradata.Client.Provider.TdTimeWithTimeZone,Teradata.Client.Provider.TdTimeWithTimeZone)"/> for further information on
            this inequality operator.</para>        
            </remarks>
            
            <param name="left">An instance of TdTimeWithTimeZone.</param>
            <param name="right">An instance of TdTimeWithTimeZone.</param>
        </member>
        <member name="M:Teradata.Client.Provider.TdTimeWithTimeZone.op_LessThanOrEqual(Teradata.Client.Provider.TdTimeWithTimeZone,Teradata.Client.Provider.TdTimeWithTimeZone)">
            <summary>
            Compares two TdTimeWithTimeZones to determine whether the <paramref name="left"/> operand is 
            less than or equal to the <paramref name="right"/> operand.
            </summary>
            
            <returns>
            A boolean is returned that indicates the result of the comparison.
            </returns>
            
            <remarks>
            	<para>
            		The value returned is <c>true</c> if the <paramref name="left"/> is less
                    than or equal to the <paramref name="right"/>, <c>false</c> otherwise.
                </para>
            	<para>
            		<list type="table">
            			<listheader>
            				<term>Return Value</term>
            				<description>Description</description>
            			</listheader>
            			<item>
            				<term><c>true</c></term>
                            <description><paramref name="left"/> and <paramref name="right"/> are not <see cref="F:Teradata.Client.Provider.TdTimeWithTimeZone.Null"/> and
                            <paramref name="left"/> is less than or equal to <paramref name="right"/>.
                            </description>
            			</item>
            			<item>
            				<term><c>false</c></term>
                            <description>
                            <para><paramref name="left"/> and / or <paramref name="right"/> is <strong>Null</strong></para>
                            <para>-or-</para>
                            <para><paramref name="left"/> is greater than <paramref name="right"/>.</para>
                            </description>
            			</item>
            		</list>
            	</para>
            
            <para>Comparison operators always returns <c>false</c> if one of the operands is <strong>Null</strong>. 
            Therefore, you must not assume that the reverse condition is <c>true</c>. For example you cannot 
            assume that the left operand is greater than the right operand if the "<c>&lt;=</c>" operator 
            returns <c>false</c>.</para> 
            
            <para>Refer to <see cref="M:Teradata.Client.Provider.TdTimeWithTimeZone.LessThanOrEqual(Teradata.Client.Provider.TdTimeWithTimeZone,Teradata.Client.Provider.TdTimeWithTimeZone)"/> for further information on
            this inequality operator.</para>
            </remarks>
            
            <param name="left">An instance of TdTimeWithTimeZone.</param>
            <param name="right">An instance of TdTimeWithTimeZone.</param>
        </member>
        <member name="M:Teradata.Client.Provider.TdTimeWithTimeZone.Add(System.TimeSpan)">
            <summary>
            The specified TimeSpan will be added to this instance of TdTimeWithTimeZone.
            </summary>
            
            <param name="timeSpan">The TimeSpan that will be added.</param>
            
            <returns>A TdTimeWithTimeZone is returned that is the result of the TimeSpan added to this 
            instance of TdTimeWithTimeZone.</returns>
            
            <remarks>
            <para>If this instance of TdTimeWithTimeZone is <strong>Null</strong> a <see cref="F:Teradata.Client.Provider.TdTimeWithTimeZone.Null"/> is returned.</para>
            
            <para>The TimeSpan object can contain data about the number of hours, 
            minutes, seconds, and fractional seconds.  If the time rolls into the next
            or previous day, the result will only contain the time component.  For example, 
            adding 2 hours to "23:54:00-08:00" will result in
            "01:54:00-08:00".</para>
            
            <para>If the scale between this instance of TdTimeWithTimeZone and the <paramref name="timeSpan"/> parameter are different
            the arithmetic operation will be performed using the different scales.  The result will then be
            <strong>truncated</strong> to match the scale of the time.  For example, the addition operation</para>
            
            <para><code>TdTime.Parse("12:48:53.2123+08:00") + TimeSpan.Parse("00:02:03.000099")</code></para>
            
            <para>results in a TdTime value of "12:50:56.2123+08:00".</para>
            
            <para>A <see cref="T:System.TimeSpan"/> can have a scale up to 7.  A TdTimeWithTimeZone has a maximum scale of 6.  
            When performing an arithmetic operation, only the first 6 digits to the right of the decimal
            point of the TimeSpan operand will be considered.  The 7th digit will be ignored.</para>
            
            </remarks>
        </member>
        <member name="M:Teradata.Client.Provider.TdTimeWithTimeZone.Add(Teradata.Client.Provider.TdIntervalDayToSecond)">
            <summary>
               Adds the specified <see cref="T:Teradata.Client.Provider.TdIntervalDayToSecond"/> to this instance of 
               <see cref="T:Teradata.Client.Provider.TdTimeWithTimeZone"/>.
            </summary>
            <returns>
               A <strong>TdTimeWithTimeZone</strong> is returned that is the result of adding the 
               <strong>TdIntervalDayToSecond</strong> to this instance of 
               <strong>TdTimeWithTimeZone</strong>.
            </returns>
            <remarks>
            <para>
               If <paramref name="interval"/> or this instance of <strong>TdTimeWithTimeZone</strong>
               is <strong>Null</strong> a <see cref="F:Teradata.Client.Provider.TdTimeWithTimeZone.Null"/> will be returned.        
            </para>
            <para>
               The <strong>TdIntervalDayToSecond</strong> interval will be added to this instance of
               <strong>TdTimeWithTimeZone</strong>. 
            </para>
            <para>
               The <strong>TdIntervalDayToSecond</strong> interval may contain data about the  
               number of days, hours, minutes, seconds, and sub-seconds.  The days will be discarded 
               during all calculations. If the time rolls into the next or previous day, the result will only 
               contain the time component.  For example, adding 2 hours to "23:54:00+08:00" 
               will result in a <strong>TdTimeWithTimeZone</strong> value of "01:54:00+08:00".
            </para>
            <para>
               If the scale between this instance of <strong>TdTimeWithTimeZone</strong> and the 
               <paramref name="interval"/> parameter are different, the arithmetic operation will be 
               performed using the different scales.  The result will then be truncated to match the
               scale of the <strong>TdTimeWithTimeZone</strong>.  For example, if the 
               <strong>TdIntervalDayToSecond</strong> value of "222 10:25:40.61234"
               (222 days, 10 hours, 25 minutes and 40.61234 seconds) is added to the
               <strong>TdTimeWithTimeZone</strong> value of "12:50:56.2123:08:00"
               the operation will result in a <strong>TdTimeWithTimeZone</strong> value 
               of "23:16:36.8246+08:00".
            </para>
            </remarks>
            <param name="interval">
               A <strong>TdIntervalDayToSecond</strong> that will be added to this 
               instance of <strong>TdTimeWithTimeZone</strong>.
            </param>
        </member>
        <member name="M:Teradata.Client.Provider.TdTimeWithTimeZone.Subtract(System.TimeSpan)">
            <summary>
            The specified TimeSpan will be subtracted from this instance of TdTimeWithTimeZone.
            </summary>
            
            <param name="timeSpan">The TimeSpan that will be subtracted.</param>
            
            <returns>A TdTimeWithTimeZone is returned that is the result of the TimeSpan subtracted from
            this instance of TdTimeWithTimeZone.</returns>
            
            <remarks>
            <para>If this instance of TdTimeWithTimeZone is <strong>Null</strong> a <see cref="F:Teradata.Client.Provider.TdTimeWithTimeZone.Null"/> is returned.</para>
            
            <para>The TimeSpan object can contain data about the number of days, hours, minutes, 
            seconds, and fractional seconds.  If the time rolls into the next
            or previous day, the result will only contain the time component.  For example, 
            subtracting 2 hours from "01:54:00-08:00" will result in
            "23:54:00-08:00".</para>
            
            <para>If the scale between this instance of TdTimeWithTimeZone and the <paramref name="timeSpan"/> parameter are different
            the arithmetic operation will be performed using the different scales.  The result will then be
            <strong>truncated</strong> to match the scale of the time.  For example, the subtraction operation</para>
            
            <para><code>TdTime.Parse("12:48:53.2123+08:00") - TimeSpan.Parse("00:02:03.00009")</code></para>
            
            <para>results in a TdTime value of "12:46:50.2122+08:00".</para>
            
            <para>A <see cref="T:System.TimeSpan"/> can have a scale up to 7.  A TdTimeWithTimeZone has a maximum scale of 6.  
            When performing an arithmetic operation, only the first 6 digits to the right of the decimal
            point of the TimeSpan operand will be considered.  The 7th digit will be ignored.</para>
            </remarks>
        </member>
        <member name="M:Teradata.Client.Provider.TdTimeWithTimeZone.Subtract(Teradata.Client.Provider.TdIntervalDayToSecond)">
            <summary>
               Subtracts the specified <see cref="T:Teradata.Client.Provider.TdIntervalDayToSecond"/> from this instance of 
               <see cref="T:Teradata.Client.Provider.TdTimeWithTimeZone"/>.
            </summary>
            <returns>
               A <strong>TdTimeWithTimeZone</strong> is returned that is the result of subtracting the 
               <strong>TdIntervalDayToSecond</strong> from this instance of 
               <strong>TdTimeWithTimeZone</strong>.
            </returns>
            <remarks>
            <para>
               If <paramref name="interval"/> or this instance of <strong>TdTimeWithTimeZone</strong>
               is <strong>Null</strong> a <see cref="F:Teradata.Client.Provider.TdTimeWithTimeZone.Null"/> will be returned.        
            </para>
            <para>
               The <strong>TdIntervalDayToSecond</strong> interval will be subtracted from this instance of
               <strong>TdTimeWithTimeZone</strong>. 
            </para>
            <para>
               The <strong>TdIntervalDayToSecond</strong> interval may contain data about the  
               number of days, hours, minutes, seconds, and sub-seconds.  The days will be discarded 
               during all calculations. If the time rolls into the next or previous day, the result will only 
               contain the time component.  For example, subtracting 2 hours from "01:54:00-08:00" 
               will result in a <strong>TdTimeWithTimeZone</strong> value of "23:54:00-08:00".
            </para>
            <para>
               If the scale between this instance of <strong>TdTimeWithTimeZone</strong> and the 
               <paramref name="interval"/> parameter are different, the arithmetic operation will be 
               performed using the different scales.  The result will then be truncated to match the
               scale of the <strong>TdTimeWithTimeZone</strong>.  For example, if the 
               <strong>TdIntervalDayToSecond</strong> value of "222 10:25:40.61234"
               (222 days, 10 hours, 25 minutes and 40.61234 seconds) is subtracted from the
               <strong>TdTimeWithTimeZone</strong> value of "12:50:56.2123:08:00"
               the operation will result in a <strong>TdTimeWithTimeZone</strong> value 
               of "02:25:15.5999+08:00".
            </para>
            </remarks>
            <param name="interval">
               A <strong>TdIntervalDayToSecond</strong> that will be subtracted from this 
               instance of <strong>TdTimeWithTimeZone</strong>.
            </param>
        </member>
        <member name="M:Teradata.Client.Provider.TdTimeWithTimeZone.op_Addition(Teradata.Client.Provider.TdTimeWithTimeZone,System.TimeSpan)">
            <summary>
            Adds the specified TimeSpan to a TdTimeWithTimeZone.
            </summary>
            
            <param name="time">A TdTimeWithTimeZone.</param>
            <param name="span">A TimeSpan that will be added to TdTimeWithTimeZone.</param>
            
            <returns>A TdTimeWithTimeZone is returned that is the result of adding the Timespan
            to TdTimeWithTimeZone.</returns>
            
            <remarks>
            <para>If the <paramref name="time"/> is <strong>Null</strong> a <see cref="F:Teradata.Client.Provider.TdTimeWithTimeZone.Null"/> is returned.</para>
            
            <para>If the scale between the <paramref name="time"/> and the <paramref name="span"/> parameter are different
            the arithmetic operation will be performed using the different scales.  The result will then be
            <strong>truncated</strong> to match the scale of the time.  For example, the addition operation</para>
            
            <para><code>TdTime.Parse("12:48:53.2123+08:00") + TimeSpan.Parse("00:02:03.000099")</code></para>
            
            <para>results in a TdTime value of "12:50:56.2123+08:00".</para>
            
            <para>A <see cref="T:System.TimeSpan"/> can have a scale up to 7.  A TdTimeWithTimeZone has a maximum scale of 6.  
            When performing an arithmetic operation, only the first 6 digits to the right of the decimal
            point of the TimeSpan operand will be considered.  The 7th digit will be ignored.</para>
            
            </remarks>
        </member>
        <member name="M:Teradata.Client.Provider.TdTimeWithTimeZone.op_Addition(Teradata.Client.Provider.TdTimeWithTimeZone,Teradata.Client.Provider.TdIntervalDayToSecond)">
            <summary>
               Adds the specified <see cref="T:Teradata.Client.Provider.TdIntervalDayToSecond"/> to a 
               <see cref="T:Teradata.Client.Provider.TdTimeWithTimeZone"/>.
            </summary>
            <returns>
               A <strong>TdTimeWithTimeZone</strong> is returned that is the result of adding a
               <strong>TdIntervalDayToSecond</strong> to a 
               <strong>TdTimeWithTimeZone</strong>.
            </returns>
            <remarks>
            <para>
               If <paramref name="interval"/> or <paramref name="time"/>
               is <strong>Null</strong> a <see cref="F:Teradata.Client.Provider.TdTimeWithTimeZone.Null"/> will be returned.        
            </para>
            <para>
               The <strong>TdIntervalDayToSecond</strong> interval will be added to a
               <strong>TdTimeWithTimeZone</strong>. 
            </para>
            <para>
               The <strong>TdIntervalDayToSecond</strong> interval may contain data about the  
               number of days, hours, minutes, seconds, and sub-seconds.  The days will be discarded 
               during all calculations. If the time rolls into the next or previous day, the result will only
               contain the time component.  For example, adding 2 hours to "23:54:00+08:00" 
               will result in a <strong>TdTimeWithTimeZone</strong> value of "01:54:00+08:00".
            </para>
            <para>
               If the scale between the <paramref name="time"/> parameter and the 
               <paramref name="interval"/> parameter are different, the arithmetic operation will be 
               performed using the different scales.  The result will then be truncated to match the
               scale of the <strong>TdTimeWithTimeZone</strong>.  For example, if the 
               <strong>TdIntervalDayToSecond</strong> value of "222 10:25:40.61234"
               (222 days, 10 hours, 25 minutes and 40.61234 seconds) is added to the
               <strong>TdTimeWithTimeZone</strong> value of "12:50:56.2123:08:00"
               the operation will result in a <strong>TdTimeWithTimeZone</strong> value 
               of "23:16:36.8246+08:00".
            </para>
            </remarks>
            <param name="time">A <strong>TdTimeWithTimeZone</strong>.</param>
            <param name="interval">
               A <strong>TdIntervalDayToSecond</strong> that will be added to
               a <strong>TdTimeWithTimeZone</strong>.
            </param>
        </member>
        <member name="M:Teradata.Client.Provider.TdTimeWithTimeZone.op_Addition(Teradata.Client.Provider.TdIntervalDayToSecond,Teradata.Client.Provider.TdTimeWithTimeZone)">
            <summary>
               Adds the specified <see cref="T:Teradata.Client.Provider.TdIntervalDayToSecond"/> to a 
               <see cref="T:Teradata.Client.Provider.TdTimeWithTimeZone"/>.
            </summary>
            <returns>
               A <strong>TdTimeWithTimeZone</strong> is returned that is the result of adding a
               <strong>TdIntervalDayToSecond</strong> to a 
               <strong>TdTimeWithTimeZone</strong>.
            </returns>
            <remarks>
            <para>
               If <paramref name="interval"/> or <paramref name="time"/>
               is <strong>Null</strong> a <see cref="F:Teradata.Client.Provider.TdTimeWithTimeZone.Null"/> will be returned.        
            </para>
            <para>
               The <strong>TdIntervalDayToSecond</strong> interval will be added to a
               <strong>TdTimeWithTimeZone</strong>. 
            </para>
            <para>
               The <strong>TdIntervalDayToSecond</strong> interval may contain data about the  
               number of days, hours, minutes, seconds, and sub-seconds.  The days will be discarded 
               during all calculations. If the time rolls into the next or previous day, the result will only
               contain the time component.  For example, adding 2 hours to "23:54:00+08:00" 
               will result in a <strong>TdTimeWithTimeZone</strong> value of "01:54:00+08:00".
            </para>
            <para>
               If the scale between the <paramref name="time"/> parameter and the 
               <paramref name="interval"/> parameter are different, the arithmetic operation will be 
               performed using the different scales.  The result will then be truncated to match the
               scale of the <strong>TdTimeWithTimeZone</strong>.  For example, if the 
               <strong>TdIntervalDayToSecond</strong> value of "222 10:25:40.61234"
               (222 days, 10 hours, 25 minutes and 40.61234 seconds) is added to the
               <strong>TdTimeWithTimeZone</strong> value of "12:50:56.2123:08:00"
               the operation will result in a <strong>TdTimeWithTimeZone</strong> value 
               of "23:16:36.8246+08:00".
            </para>
            </remarks>
            <param name="interval">
               A <strong>TdIntervalDayToSecond</strong> that will be added to
               a <strong>TdTimeWithTimeZone</strong>.
            </param>
            <param name="time">A <strong>TdTimeWithTimeZone</strong>.</param>
        </member>
        <member name="M:Teradata.Client.Provider.TdTimeWithTimeZone.op_Subtraction(Teradata.Client.Provider.TdTimeWithTimeZone,System.TimeSpan)">
            <summary>
            Subtracts the specified TimeSpan from a TdTimeWithTimeZone.
            </summary>
            
            <param name="time">A TdTimeWithTimeZone.</param>
            <param name="span">A TimeSpan that will be subtracted
            from the TdTimeWithTimeZone</param>
            
            <returns>A TdTimeWithTimeZone is returned that is the result of subtracting the TimeSpan 
            from the TdTimeWithTimeZone.</returns>
            
            <remarks>
            <para>If the <paramref name="time"/> is <strong>Null</strong> a <see cref="F:Teradata.Client.Provider.TdTimeWithTimeZone.Null"/> is returned.</para>
            
            <para>If the scale between the <paramref name="time"/> and the <paramref name="span"/> parameter are different
            the arithmetic operation will be performed using the different scales.  The result will then be
            <strong>truncated</strong> to match the scale of the time.  For example, the subtraction operation</para>
            
            <para><code>TdTime.Parse("12:48:53.2123+08:00") - TimeSpan.Parse("00:02:03.00009")</code></para>
            
            <para>results in a TdTime value of "12:46:50.2122+08:00".</para>
            
            <para>A <see cref="T:System.TimeSpan"/> can have a scale up to 7.  A TdTimeWithTimeZone has a maximum scale of 6.  
            When performing an arithmetic operation, only the first 6 digits to the right of the decimal
            point of the TimeSpan operand will be considered.  The 7th digit will be ignored.</para>
            </remarks>
        </member>
        <member name="M:Teradata.Client.Provider.TdTimeWithTimeZone.op_Subtraction(Teradata.Client.Provider.TdTimeWithTimeZone,Teradata.Client.Provider.TdTimeWithTimeZone)">
            <summary>
            The time interval between two TdTimeWithTimeZones is returned when the  
            TdTimeWithTimeZones are subtracted from each other.
            </summary>
            
            <param name="leftOperand">The left TdTimeWithTimeZone operand.</param>
            <param name="rightOperand">The right TdTimeWithTimeZone operand.</param>
            
            <returns>A TimeSpan is returned that represents the time interval
            between the left and right TdTimeWithTimeZone.</returns>
            
            <exception cref="T:System.ArgumentNullException">One of the operands is <strong>Null</strong>.</exception>
        </member>
        <member name="M:Teradata.Client.Provider.TdTimeWithTimeZone.op_Subtraction(Teradata.Client.Provider.TdTimeWithTimeZone,Teradata.Client.Provider.TdIntervalDayToSecond)">
            <summary>
               Subtracts the specified <see cref="T:Teradata.Client.Provider.TdIntervalDayToSecond"/> from a 
               <see cref="T:Teradata.Client.Provider.TdTimeWithTimeZone"/>.
            </summary>
            <returns>
               A <strong>TdTimeWithTimeZone</strong> is returned that is the result of subtracting a
               <strong>TdIntervalDayToSecond</strong> from a 
               <strong>TdTimeWithTimeZone</strong>.
            </returns>
            <remarks>
            <para>
               If <paramref name="interval"/> or <paramref name="time"/>
               is <strong>Null</strong> a <see cref="F:Teradata.Client.Provider.TdTimeWithTimeZone.Null"/> will be returned.        
            </para>
            <para>
               The <strong>TdIntervalDayToSecond</strong> interval will be subtracted from a
               <strong>TdTimeWithTimeZone</strong>. 
            </para>
            <para>
               The <strong>TdIntervalDayToSecond</strong> interval may contain data about the  
               number of days, hours, minutes, seconds, and sub-seconds.  The days will be discarded 
               during all calculations. If the time rolls into the next or previous day, the result will only 
               contain the time component.  For example, subtracting 2 hours from "01:54:00-08:00" 
               will result in a <strong>TdTimeWithTimeZone</strong> value of "23:54:00-08:00".
            </para>
            <para>
               If the scale between the <paramref name="time"/> parameter and the 
               <paramref name="interval"/> parameter are different, the arithmetic operation will be 
               performed using the different scales.  The result will then be truncated to match the
               scale of the <strong>TdTimeWithTimeZone</strong>.  For example, if the 
               <strong>TdIntervalDayToSecond</strong> value of "222 10:25:40.61234"
               (222 days, 10 hours, 25 minutes and 40.61234 seconds) is subtracted from the
               <strong>TdTimeWithTimeZone</strong> value of "12:50:56.2123:08:00"
               the operation will result in a <strong>TdTimeWithTimeZone</strong> value 
               of "02:25:15.5999+08:00".
            </para>
            </remarks>
            <param name="time">A <strong>TdTimeWithTimeZone</strong>.</param>
            <param name="interval">
               A <strong>TdIntervalDayToSecond</strong> that will be subtracted from 
               a <strong>TdTimeWithTimeZone</strong>.
            </param>
        </member>
        <member name="M:Teradata.Client.Provider.TdTimeWithTimeZone.ToUtcTime">
            <summary>
            Calculates the Universal Coordinated Time (UTC) of this instance
            of TdTimeWithTimeZone.
            </summary>
            
            <returns>A TimeSpan is returned that containes the UTC.</returns>
            
            <exception cref="T:Teradata.Client.Provider.TdException">This instance is <see cref="F:Teradata.Client.Provider.TdTimeWithTimeZone.Null"/>.</exception>
            
            <remarks>
            When a time with time zone is converted into UTC, the time may roll
            either into the next or previous day.  For example, "23:11:00-08:00"
            will roll into the next day when converted to UTC:  "07:11:00".  The
            time "06:23:21+10:00" will roll into the previous day when converted to
            UTC:  "20:23:31".
            </remarks>
        </member>
        <member name="M:Teradata.Client.Provider.TdTimeWithTimeZone.ToTimeZone(System.TimeSpan)">
            <summary>
            Converts the time zone of this instance to a different time zone.
            </summary>
            
            <param name="newUtcOffset">The time zone that will be used to convert this instance.</param>
            
            <returns>A TdTimeWithTimeZone is returned that has been converted to use <paramref name="newUtcOffset"/>.</returns>
            
            <exception cref="T:System.ArgumentOutOfRangeException">A time component is out of the valid range.</exception>
            <exception cref="T:System.ArgumentException">The seconds and sub-seconds of the UTC Offset must be 0.</exception>
            <exception cref="T:Teradata.Client.Provider.TdException">This instance of TdTimeWithTimeZone is <see cref="F:Teradata.Client.Provider.TdTimeWithTimeZone.Null"/>.</exception>
            
            <remarks>
            This method does not apply any time zone adjustment rules in the conversion.  For example, the rule associated with daylight savings
            for a particular time zone will be ignored.
            </remarks>
        </member>
        <member name="M:Teradata.Client.Provider.TdTimeWithTimeZone.ToString">
            <summary>
            The TdTimeWithTimeZone is converted to an equivalent String representation.
            </summary>
            
            <returns>The string representation of TdTimeWithTimeZone is returned.</returns>
            
            <remarks>
            <para>The string representation of the time will be in the format:  "HH:mm:ss.ffffffZ".
            For example, "23:12:45.0023-08:00".</para>
            
            <para>The number of digits that will appear in the fractional seconds is dependent
            on the <see cref="P:Teradata.Client.Provider.TdTimeWithTimeZone.Scale"/>.  For example, if the Scale is set to 4, four digits will appear 
            in the fraction.</para>
            
            <para>If this instance is <see cref="F:Teradata.Client.Provider.TdTimeWithTimeZone.Null"/>, a string that contains 
            "Null" will be returned.</para>
            </remarks>
        </member>
        <member name="M:Teradata.Client.Provider.TdTimeWithTimeZone.ToString(System.IFormatProvider)">
            <summary>
            The TdTimeWithTimeZone is converted to the equivalent ANSI string representation.
            </summary>
            
            <param name="provider">An IFormatProvider that contains the culture specific formatting information.  This parameter is ignored.</param>
            
            <returns>The ANSI string representation of TdTimeWithTimeZone is returned.</returns>
            
            <remarks>
            <para>By default this method converts this instance of TdTimeWithTimeZone using the "G" format specifier 
            (see <see cref="M:Teradata.Client.Provider.TdTimeWithTimeZone.ToString(System.String)"/>)-- the ANSI string representation.  </para>
            
            <para>The cultural information specified in the <paramref name="provider"/> parameter is ignored.</para>
            
            <para>The ANSI string representation of the time will be in the format:  
            "HH:mm:ss.ffffff&lt;+/-&gt;hh:mm".
            For example, "23:12:45.0023-08:00".</para>
            
            <para>The number of digits that will appear in the fractional seconds is dependent
            on the <see cref="P:Teradata.Client.Provider.TdTimeWithTimeZone.Scale"/>.  For example, if the Scale is set to 4, four digits will appear 
            in the fraction.</para>
            
            <para>If this instance is <see cref="F:Teradata.Client.Provider.TdTimeWithTimeZone.Null"/>, a string that contains 
            "Null" will be returned.</para>
            </remarks>
        </member>
        <member name="M:Teradata.Client.Provider.TdTimeWithTimeZone.ToString(System.String)">
            <summary>
            TdTimeWithTimeZone is converted to the equivalent String using the specified format.
            </summary>
            
            <param name="format">The format string that will be used to format the TdTimeWithTimeZone.</param>
            
            <returns>A string representation of the date in TdTimeWithTimeZone.</returns>
            
            <exception cref="T:System.FormatException">The specified format specifier is not supported.</exception>
            
            <remarks>
            <para>If the format parameter is null, the format of the string representation of the 
            time will be "HH:mm.ffffff&lt;+/-&gt;hh:mm".</para>
            
            <para>The format specifiers that will be supported are as follows:
            </para>
            <list type="table">
            <listheader>
            <term>Format Specifier</term>
            <description>Description</description>
            </listheader>
            <item>
            <term>G</term>
            <description>
            <para>The ANSI representation of the time.  "HH:mm:ss.ffffff&lt;+/-&gt;hh:mm".  
            The number of digits in the fractional seconds will depend upon the Scale of the time.</para>
            
            <para>Cultural information is ignored in this conversion.</para>
            
            <para>The number of digits that will appear in the fractional seconds is dependent
            on the <see cref="P:Teradata.Client.Provider.TdTimeWithTimeZone.Scale"/>.  For example, if the Scale is set to 4, four digits will appear 
            in the fraction.</para>
            </description>
            </item>
            <item>
            <term>l or L</term>
            <description>The Teradata literal representation of Time With Time Zone.</description>
            </item>
            <item>
            <term>t</term>
            <description>The short time pattern --"h:mm tt"</description>
            </item>
            <item>
            <term>T</term>
            <description>The long time patterm --"h:mm:ss tt"</description>
            </item>
            </list>
            
            <para>If this instance is <see cref="F:Teradata.Client.Provider.TdTimeWithTimeZone.Null"/>, a string that contains 
            "Null" will be returned.</para>
            
            <para>For additional information about the supported format specifiers refer to 
            <see cref="T:System.Globalization.DateTimeFormatInfo"/> in the MSDN documentation.
            </para>
            </remarks>
        </member>
        <member name="M:Teradata.Client.Provider.TdTimeWithTimeZone.ToString(System.String,System.IFormatProvider)">
            <summary>
            TdTimeWithTimeZone is converted into the equivalent String representation using the 
            specified format and culture information.
            </summary>
            
            <param name="format">The format string that will be used to format the TdTimeWithTimeZone.</param>
            <param name="formatProvider">The culture specific information used to generate the string equivalent of TdTimeWithTimeZone.</param>
            
            <returns>A string representation of the date in TdTimeWithTimeZone.</returns>
            
            <exception cref="T:System.FormatException">The specified format specifier is not supported.</exception>
            
            <remarks>
            <para>If the format parameter is null, the format of the string representation of the 
            time will be "HH:mm:ss.ffffff&lt;+/-&gt;HH:mm".  In addition, the number of 
            digits that will appear in the fractional seconds is dependent on the <see cref="P:Teradata.Client.Provider.TdTimeWithTimeZone.Scale"/>.  
            For example, if the Scale is set to 4, four digits will appear 
            in the fraction.</para>
            
            <para>The format specifiers that are supported are listed in 
            <see cref="M:Teradata.Client.Provider.TdTimeWithTimeZone.ToString(System.String)"/>.  For additional information about the 
            format specifiers refer to 
            <see cref="T:System.Globalization.DateTimeFormatInfo"/> in the MSDN documentation.
            </para>
            </remarks>
        </member>
        <member name="M:Teradata.Client.Provider.TdTimeWithTimeZone.Parse(System.String)">
            <summary>
            The specified string is converted into an equivalent TdTimeWithTimeZone.  
            </summary>
            
            <param name="value">The string that is to be converted into a TdTimeWithTimeZone.</param>
            
            <returns>A TdTimeWithTimeZone is returned that is equivalent to the time 
            contained in the value string.</returns>
            
            <exception cref="T:System.ArgumentNullException">Value is a null reference.</exception>
            <exception cref="T:System.FormatException">Value does not contain a valid representation of a time.</exception>
            
            <remarks>
            <para>The string is parsed using the culture information contained in the specified 
            <see cref="T:System.Globalization.DateTimeFormatInfo"/> object.</para>
            
            <para>If the time contains sub-seconds, the separator that <strong>must</strong> be used in
            the string is a <strong>decimal point</strong> (".").  For example, in the string
            "10:21:22<strong>.2321</strong>+08:00" the sub-seconds is separated from the 
            number of seconds using a decimal point.</para>
            
            <para>When the <paramref name="value"/> is parsed the <see cref="P:Teradata.Client.Provider.TdTimeWithTimeZone.Scale"/> will be set to 
            the number of digits in the sub-seconds component (digits that are to the right of the 
            decimal point).  Therefore, a TdTime of "12:32:11.0000" will have a Scale of 4, 
            and "23:43:22.121000" will have a scale of 6.</para>
            
            <para>An attempt is made to avoid throwing a FormatException.  Any unrecognized characters in 
            the string will be ignored.  An exception to this is the case when
            the number of digits to the right of the decimal point exceed the <strong>maximum scale</strong> 
            of 6.  If the number of digits exceed the maximum scale, a FormatException will get thrown.
            Trailing zeroes are ignored.</para>
            
            <para>However, when a custom culture is used it is possible that the Parse will 
            fail.  A times string that contains custom culture specific date elements is very
            difficult to parse.  The string may not match any of the implicit patterns that
            are used to parse a string.</para>
            
            <para>If a UTC offset is specified in the string it <strong>must</strong> appear at the end.</para>
            
            <para>If the <paramref name="value"/> contains a "Z" or "GMT", the UTC offset has been
            accounted for in the time.  Therefore, the UTC offset of the <strong>TdTimeWithTimeZone</strong>
            that is returned will be set to "00:00".  </para>
            
            <para>If the <paramref name="value"/> does not contain a UTC offset, "Z", or "GMT" the UTC offset
            of the <strong>TdTimeWithTimeZone</strong> that is returned will be set to the 
            local UTC offset.</para>
            
            <para>If the <paramref name="value"/> contains the string "NULL" a <see cref="F:Teradata.Client.Provider.TdTimeWithTimeZone.Null"/>
            will be returned.</para>
            </remarks>
        </member>
        <member name="M:Teradata.Client.Provider.TdTimeWithTimeZone.Parse(System.String,System.IFormatProvider)">
            <summary>
            The specified string is converted into an equivalent TdTimeWithTimeZone.  
            </summary>
            
            <param name="value">The string that is to be converted into a TdTimeWithTimeZone.</param>
            <param name="provider">An IFormatProvider that supplies culture specific information 
            about the format of value.</param>
            
            <returns>A TdTimeWithTimeZone is returned that is equivalent to the time 
            contained in the value string.</returns>
            
            <exception cref="T:System.ArgumentNullException">Value is a null reference.</exception>
            <exception cref="T:System.FormatException">Value does not contain a valid representation of a time.</exception>
            
            <remarks>
            <para>The string is parsed using the culture information contained in the specified 
            <see cref="T:System.Globalization.DateTimeFormatInfo"/> object.</para>
            
            <para>If the time contains sub-seconds, the separator that <strong>must</strong> be used in
            the string is a <strong>decimal point</strong> (".").  For example, in the string
            "10:21:22<strong>.2321</strong>+08:00" the sub-seconds is separated from the 
            number of seconds using a decimal point.</para>
            
            <para>When the <paramref name="value"/> is parsed the <see cref="P:Teradata.Client.Provider.TdTimeWithTimeZone.Scale"/> will be set to 
            the number of digits in the sub-seconds component (digits that are to the right of the 
            decimal point).  Therefore, a TdTime of "12:32:11.0000" will have a Scale of 4, 
            and "23:43:22.121000" will have a scale of 6.</para>
            
            <para>An attempt is made to avoid throwing a FormatException.  Any unrecognized characters in 
            the string will be ignored.  An exception to this is the case when
            the number of digits to the right of the decimal point exceed the <strong>maximum scale</strong> 
            of 6.  If the number of digits exceed the maximum scale, a FormatException will get thrown.
            Trailing zeroes are ignored.</para>
            
            <para>However, when a custom culture is used it is possible that the Parse will 
            fail.  A time string that contains custom culture specific date elements is very
            difficult to parse.  The string may not match any of the implicit patterns that
            are used to parse a string.</para>
            
            <para>If a UTC offset is specified in the string it <strong>must</strong> appear at the end.</para>
            
            <para>If the <paramref name="value"/> contains a "Z" or "GMT", the UTC offset has been
            accounted for in the time.  Therefore, the UTC offset of the <strong>TdTimeWithTimeZone</strong>
            that is returned will be set to "00:00".  </para>
            
            <para>If the <paramref name="value"/> does not contain a UTC offset, "Z", or "GMT" the UTC offset
            of the <strong>TdTimeWithTimeZone</strong> that is returned will be set to the 
            local UTC offset.</para>
            
            <para>If the <paramref name="value"/> contains the string "NULL" a <see cref="F:Teradata.Client.Provider.TdTimeWithTimeZone.Null"/>
            will be returned.</para>
            </remarks>
        </member>
        <member name="M:Teradata.Client.Provider.TdTimeWithTimeZone.TryParse(System.String,Teradata.Client.Provider.TdTimeWithTimeZone@)">
            <summary>
            A time with a UTC offset contained in a string is converted to a TdTimeWithTimeZone representation.
            </summary>
            
            <param name="value">The string that contains the time representation.</param>
            <param name="result">The TdTimeWithTimeZone representation of the time contained in the specified string.</param>
            
            <returns>A Boolean is returned that indicates the success of the conversion.  
            <c>true</c> indicates that the conversion was successful and that the conversion is 
            returned through the result parameter.  <c>false</c> indicates that the conversion 
            failed. </returns>
            
            <remarks>
            <para>TryParse is the same as Parse except that an exception does not get thrown 
            when the conversion fails.</para>
            
            <para>Formatting information contained in the DateTimeFormatInfo object is used to 
            parse the string.</para>
            
            <para>If the string is either null or empty, a <see cref="F:Teradata.Client.Provider.TdTimeWithTimeZone.Null"/>
            is returned .</para>
            
            <para>If the conversion fails the result parameter will be set to <see cref="F:Teradata.Client.Provider.TdTimeWithTimeZone.MinValue"/>.</para>
            
            <para>For more information refer to <see cref="M:Teradata.Client.Provider.TdTimeWithTimeZone.Parse(System.String)"/>.</para>
            </remarks>
        </member>
        <member name="M:Teradata.Client.Provider.TdTimeWithTimeZone.TryParse(System.String,System.IFormatProvider,Teradata.Client.Provider.TdTimeWithTimeZone@)">
            <summary>
            A time with a UTC offset contained in a string is converted to a TdTimeWithTimeZone representation.
            </summary>
            
            <param name="value">The string that contains the time representation.</param>
            <param name="provider">An IFormatProvider that supplies culture specific information 
            about the format of value.</param>
            <param name="result">The TdTimeWithTimeZone representation of the time contained in the specified string.</param>
            
            <returns>A Boolean is returned that indicates the success of the conversion.  
            <c>true</c> indicates that the conversion was successful and that the conversion is 
            returned through the result parameter.  <c>false</c> indicates that the conversion 
            failed. </returns>
            
            <remarks>
            <para>TryParse is the same as Parse except that an exception does not get thrown 
            when the conversion fails.</para>
            
            <para>Formatting information contained in the DateTimeFormatInfo object is used to 
            parse the string.</para>
            
            <para>If the string is either null or empty, a <see cref="F:Teradata.Client.Provider.TdTimeWithTimeZone.Null"/>
            is returned .</para>
            
            <para>If the conversion fails the result parameter will be set to <see cref="F:Teradata.Client.Provider.TdTimeWithTimeZone.MinValue"/>.</para>
            
            <para>For more information refer to <see cref="M:Teradata.Client.Provider.TdTimeWithTimeZone.Parse(System.String,System.IFormatProvider)"/>.</para>
            </remarks>
            
            <seealso cref="M:Teradata.Client.Provider.TdTimeWithTimeZone.Parse(System.String,System.IFormatProvider)"/>
        </member>
        <member name="M:Teradata.Client.Provider.TdTimeWithTimeZone.GetXmlSchema(System.Xml.Schema.XmlSchemaSet)">
             <summary>
             Specifies the XML Qualified name for <strong>TdTimeWithTimeZone</strong> XML type mapping.
             </summary>
             
             <param name="xmlSchemaSet">Holds zero or more XML Schema definition language (XSD) schemas.</param>
             
             <returns>
             Returns <strong>xs:dateTime</strong>.
             </returns>
             
             <example>
             This examples shows how to use <strong>TdTimeWithTimeZone</strong> with <see cref="T:System.Xml.Serialization.XmlSerializer"/> class.
             <see cref="T:System.Xml.Serialization.XmlElementAttribute"/> is used to indicate that the Teradata Database column can be <strong>Null</strong>.
             <code>
              public class Order
              {
                  public TdTimeWithTimeZone AtTime;
            
                  public Int32 ProductId;
            
                  public Int32 Quantity;
            
                  public Int32? BackOrderQuantity;
            
                  [XmlElementAttribute(IsNullable = true)]        
                  public TdDecimal BackOrderPrice;
              }
             
              internal class OrderWriter
              {
              
                  public static void Write()
                  {
                      // Setup the order
                      Order x = new Order();
              
                      x.AtTime = new TdTimeWithTimeZone(new TimeSpan(20, 12, 34), new TimeSpan(-08, 0, 0));
                      x.ProductId = 100;
                      x.Quantity = 2000;
                      x.BackOrderQuantity = null;
                      x.BackOrderPrice = TdDecimal.Null;
            
                      // Write out today's orders to the file.
                      //
                      // Open the file.
                      XmlWriterSettings settings = new XmlWriterSettings();
                      settings.Indent = true;
                      XmlWriter writer = XmlWriter.Create(@"C:\Temp\TodayOrders.XML", settings);
                      writer.WriteStartElement("TodayOrders");
                
                      // Write out the schema.
                      XmlSchemas schemas = new XmlSchemas();
                      XmlSchemaExporter schExporter = new XmlSchemaExporter(schemas);
                      schExporter.ExportTypeMapping(new XmlReflectionImporter().ImportTypeMapping(typeof(Order)));
                      schemas[0].Write(writer);
            
                      // Write out the orders.
                      XmlSerializer xml = new XmlSerializer(typeof(Order));
                      xml.Serialize(writer, x);
              
                      // Close the document.
                      writer.WriteEndDocument();
                      writer.Close();
                  }
              }
             
              /* Output is:
             
               &lt;TodayOrders&gt;
                &lt;xs:schema elementFormDefault="qualified" xmlns:xs="http://www.w3.org/2001/XMLSchema"&gt;
                  &lt;xs:element name="Order" nillable="true" type="Order" /&gt;
                  &lt;xs:complexType name="Order"&gt;
                    &lt;xs:sequence&gt;
                      &lt;xs:element minOccurs="1" maxOccurs="1" name="AtTime" type="xs:time" /&gt;
                      &lt;xs:element minOccurs="1" maxOccurs="1" name="ProductId" type="xs:int" /&gt;
                      &lt;xs:element minOccurs="1" maxOccurs="1" name="Quantity" type="xs:int" /&gt;
                      &lt;xs:element minOccurs="1" maxOccurs="1" name="BackOrderQuantity" nillable="true" type="xs:int" /&gt;
                      &lt;xs:element minOccurs="1" maxOccurs="1" name="BackOrderPrice" nillable="true" type="xs:decimal" /&gt;
                    &lt;/xs:sequence&gt;
                  &lt;/xs:complexType&gt;
                &lt;/xs:schema&gt;
                &lt;Order xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xmlns:xsd="http://www.w3.org/2001/XMLSchema"&gt;
                  &lt;AtTime&gt;20:12:34-08:00&lt;/AtTime&gt;
                  &lt;ProductId&gt;100&lt;/ProductId&gt;
                  &lt;Quantity&gt;2000&lt;/Quantity&gt;
                  &lt;BackOrderQuantity xsi:nil="true" /&gt;
                  &lt;BackOrderPrice xsi:nil="true" /&gt;
                &lt;/Order&gt;
              &lt;/TodayOrders&gt;
             
              */
             </code>
             </example>        
        </member>
        <member name="P:Teradata.Client.Provider.TdTimeWithTimeZone.ObjectId">
            <summary>
            Gets the Instance Object Identifier.
            </summary>
        </member>
        <member name="P:Teradata.Client.Provider.TdTimeWithTimeZone.IsNull">
            <summary>
            Indicates whether this TdTimeWithTimeZone instance is <see cref="F:Teradata.Client.Provider.TdTimeWithTimeZone.Null"/>. 
            </summary>
            <value>
            <c>true</c> if this TdTimeWithTimeZone is Null; <c>false</c> otherwise.
            </value>
        </member>
        <member name="P:Teradata.Client.Provider.TdTimeWithTimeZone.Hour">
            <summary>
            The hour of the time component in this instance of TdTimeWithTimeZone is returned.
            </summary>
            
            <remarks>
            The value that is returned represents the hour of the time component.  TdTimeWithTimeZone
            does not take into account the day light savings time.  What has been entered as the hour
            of the time component, is returned from the property.
            </remarks>
            
            <value>The hour component is returned as an Int32.</value>
            
            <exception cref="T:Teradata.Client.Provider.TdException">This instance is <see cref="F:Teradata.Client.Provider.TdTimeWithTimeZone.Null"/>.</exception>
        </member>
        <member name="P:Teradata.Client.Provider.TdTimeWithTimeZone.Minute">
            <summary>
            The number of minutes contained in the time component of this instance of
            TdTimeWithTimeZone.
            </summary>
            
            <value>The Minute component is returned as an Int32.</value>
            
            <exception cref="T:Teradata.Client.Provider.TdException">This instance is <see cref="F:Teradata.Client.Provider.TdTimeWithTimeZone.Null"/>.</exception>
        </member>
        <member name="P:Teradata.Client.Provider.TdTimeWithTimeZone.Second">
            <summary>
            The number of seconds contained in the time component in this 
            instance of TdTimeWithTimeZone is returned.
            </summary>
            
            <value>The Second component is returned as an Int32.</value>
            
            <exception cref="T:Teradata.Client.Provider.TdException">This instance is <see cref="F:Teradata.Client.Provider.TdTimeWithTimeZone.Null"/>.</exception>
        </member>
        <member name="P:Teradata.Client.Provider.TdTimeWithTimeZone.Microsecond">
            <summary>
            The sub-seconds contained in the time component is returned in microseconds.
            </summary>
            
            <exception cref="T:Teradata.Client.Provider.TdException">This instance is <see cref="F:Teradata.Client.Provider.TdTimeWithTimeZone.Null"/>.</exception>
            
            <remarks>
            <para>Teradata only supports up to 6 digits in the fractional portion
            of a second.   Therefore, TdTimeWithTimeZone also support 6 digits
            in the sub-seconds. This is represented as a Microsecond.  One microsecond is 
            equivalent to 10^-6 of a second. </para>
            
            <para>The following are examples of the fraction that is returned for
            a given time:</para>
            
            <list type="table">
            <listheader>
            <term>Time</term>
            <description>Microsecond Property</description>
            </listheader>
            <item>
            <term>23:59:59.999999+00:00, scale = 6</term>
            <description>999999</description>
            </item>
            <item>
            <term>12:45:00.349000-08:00, scale = 6</term>
            <description>349000</description>
            </item>
            <item>
            <term>12:45:00.34900-08:00, scale = 5</term>
            <description>349000</description>
            </item>
            <item>
            <term>12:45:00.3490-08:00, scale = 4</term>
            <description>349000</description>
            </item>
            <item>
            <term>12:45:00.349-08:00, scale = 3</term>
            <description>349000</description>
            </item>
            <item>
            <term>20:31:07.020000-01:30,  scale = 6</term>
            <description>20000</description>
            </item>
            <item>
            <term>20:31:07.0200-01:30,  scale = 4</term>
            <description>200000</description>
            </item>
            <item>
            <term>00:10:01.00090-01:30,  scale = 5</term>
            <description>900</description>
            </item>
            </list>
            </remarks>
            
            <value>The number of Microseconds is returned as an Int32.</value>
        </member>
        <member name="P:Teradata.Client.Provider.TdTimeWithTimeZone.UtcOffset">
            <summary>
            Returns the UTC Offset or allows the UTC offset to be set.
            </summary>
            
            <value>
            The UTC ofsset is returned as a TimeSpan.
            </value>
            
            <exception cref="T:Teradata.Client.Provider.TdException">This instance is <see cref="F:Teradata.Client.Provider.TdTimeWithTimeZone.Null"/>.</exception>
            
            <remarks>
            <para>The UTC offset is handled by TdTimeWithTimeZone as a System.TimeSpan.  If
            a day or millisecond is specified in the constructor of the TimeSpan a TdException
            will be thrown.</para>
            
            <para>The range of a valid UTC offset is -12:59 to +13:00.</para>
            
            </remarks>
            <value>The UTC Offset is returned as a <see cref="T:System.TimeSpan"/>.</value>
        </member>
        <member name="P:Teradata.Client.Provider.TdTimeWithTimeZone.Value">
            <summary>
            Gets the string representation of this TdTimeWithTimeZone instance.
            </summary>
            
            <exception cref="T:Teradata.Client.Provider.TdException">This instance is <see cref="F:Teradata.Client.Provider.TdTimeWithTimeZone.Null"/>.</exception>
        </member>
        <member name="P:Teradata.Client.Provider.TdTimeWithTimeZone.Scale">
            <summary>
            Returns the scale of this instance of TdTimeWithTimeZone.
            </summary>
            
            <value>The scale of the time is returned as an Int32.</value>
            
            <exception cref="T:Teradata.Client.Provider.TdException">This instance is <see cref="F:Teradata.Client.Provider.TdTimeWithTimeZone.Null"/>.</exception>
        </member>
        <member name="T:Teradata.Client.Provider.GeneratedDataBehavior">
            <summary>
            Generated data retrieval behavior.
            </summary>
        </member>
        <member name="F:Teradata.Client.Provider.GeneratedDataBehavior.IdentityColumn">
            <summary>
            Columns only returned 
            </summary>
        </member>
        <member name="F:Teradata.Client.Provider.GeneratedDataBehavior.AllColumns">
            <summary>
            Entire row returned
            </summary>
        </member>
        <member name="F:Teradata.Client.Provider.GeneratedDataBehavior.None">
            <summary>
            Generated data retrieval not supported
            </summary>
        </member>
        <member name="T:Teradata.Client.Provider.TdCommand">
             <summary>
             TdCommand class represents a SQL request.  The request can be either 
             a Single SQL statement or Multi-Statement SQL.
             </summary>
             
             
             
             <remarks>
             <para>TdCommand features the following methods used to execute commands synchronously:</para>
             
             <para></para>
             
             <list type="table">
             <listheader>
             <term>Method</term>
             <description>Description</description>
             </listheader>
             <item>
             <term>ExecuteReader</term>
             <description>Executes commands that return rows.</description>
             </item>
             <item>
             <term>ExecuteNonQuery</term>
             <description>
             Executes commands that do not return rows such as UPDATE, INSERT, DELETE, and all DDL statements
             </description>
             </item>
             <item>
             <term>ExecuteScalar</term>
             <description>Executes commands that only returns one value.</description>
             </item>
             <item>
             <term>ExecuteCreateProcedure</term>
             <description>Must be used when executing a "CREATE PROCEDURE" statement.</description>
             </item>
             </list>
            
             <para></para>
             
             <para>TdCommand also supports the asynchronous execution of a command.  When one of the methods 
             that supports asynchronous execution is used, it's corresponding "End" method must 
             be called to end the execution.  The following methods support asynchronous execution:</para>
             
             <para></para>
             
             <list type="table">
             <listheader>
             <term>Method</term>
             <description>Description</description>
             </listheader>
             <item>
             <term>BeginExecuteReader</term>
             <description>Asynchronously executes commands that return rows.  The corresponding 
             <see cref="M:Teradata.Client.Provider.TdCommand.EndExecuteReader(System.IAsyncResult)"/> method must be called to end the execution</description>
             </item>
             <item>
             <term>BeginExecuteNonQuery</term>
             <description>Asynchronously executes commands that do not return rows such as UPDATE, 
             INSERT, DELETE, and all DDL statements.  The corresponding <see cref="M:Teradata.Client.Provider.TdCommand.EndExecuteNonQuery(System.IAsyncResult)"/> 
             must be called to end the execution</description>
             </item>
             </list>
            
             <para></para>
             
             <para>For information on how to use LOBs in a command please refer to 
             <see cref="P:Teradata.Client.Provider.TdParameter.Value"/>.</para>
             </remarks>
             
              
             
        </member>
        <member name="M:Teradata.Client.Provider.TdCommand.#ctor">
            <summary>
            Initializes a new instance of the TdCommand class.
            </summary>
            
            <remarks>
            A new instance of the TdCommand class is initialized witht the following default property values:
            
            <list type="table">
            <listheader>
            <term>Property</term>
            <description>Initial Value</description>
            </listheader>
            <item>
            <term>CommandText</term>
            <description>empty String</description>
            </item>
            <item>
            <term>CommandTiimeout</term>
            <description>30 seconds</description>
            </item>
            <item>
            <term>CommandType</term>
            <description>Text</description>
            </item>
            <item>
            <term>Connection</term>
            <description>Null</description>
            </item>
            <item>
            <term>DesignTimeVisible</term>
            <description>False</description>
            </item>
            <item>
            <term>Transaction</term>
            <description>Null</description>
            </item>
            <item>
            <term>UpdatedRowSource</term>
            <description>Both</description>
            </item>
            </list>
            </remarks>
        </member>
        <member name="M:Teradata.Client.Provider.TdCommand.#ctor(System.String)">
             <summary>
             Initializes a new instance of the TdCommand class
             </summary>
            
             <param name="commandText">The SQL text that will be executed.  
               <c>commandText</c> is used to initialize the CommandText property.</param>
             
             <remarks>
             A new instance of the TdCommand class is initialized with the following default property values:
            
             <list type="table">
             <listheader>
             <term>Property</term>
             <description>Initial Value</description>
             </listheader>
             <item>
             <term>CommandText</term>
             <description>commandText parameter</description>
             </item>
             <item>
             <term>CommandTimeout</term>
             <description>30 seconds</description>
             </item>
             <item>
             <term>CommandType</term>
             <description>Text</description>
             </item>
             <item>
             <term>Connection</term>
             <description>Null</description>
             </item>
             <item>
             <term>DesignTimeVisible</term>
             <description>False</description>
             </item>
             <item>
             <term>Transaction</term>
             <description>Null</description>
             </item>
             <item>
             <term>UpdatedRowSource</term>
             <description>Both</description>
             </item>
             </list>
             </remarks>
            
             
        </member>
        <member name="M:Teradata.Client.Provider.TdCommand.#ctor(System.String,Teradata.Client.Provider.TdConnection)">
             <summary>
             Initializes a new instance of the TdCommand class.
             </summary>
             
             <param name="commandText">The SQL text that will be executed.  
               <c>commandText</c>used to initialize the CommandText property.</param>
             <param name="connection">An instance of the TdConnection class that is used to execute 
               SQL requests. <c>connection</c> is used to initialize the Connection property.</param>
            
             <remarks>
             <list type="table">
             <listheader>
             <term>Property</term>
             <description>Initial Value</description>
             </listheader>
             <item>
             <term>CommandText</term>
             <description>commandText parameter</description>
             </item>
             <item>
             <term>CommandTimeout</term>
             <description>30 seconds</description>
             </item>
             <item>
             <term>CommandType</term>
             <description>Text</description>
             </item>
             <item>
             <term>Connection</term>
             <description>connection parameter</description>
             </item>
             <item>
             <term>DesignTimeVisible</term>
             <description>False</description>
             </item>
             <item>
             <term>Transaction</term>
             <description>Null</description>
             </item>
             <item>
             <term>UpdatedRowSource</term>
             <description>Both</description>
             </item>
             </list>
             </remarks>
             
             >
        </member>
        <member name="M:Teradata.Client.Provider.TdCommand.#ctor(System.String,Teradata.Client.Provider.TdConnection,Teradata.Client.Provider.TdTransaction)">
             <summary>
             Initializes a new instance of the TdCommand class.
             </summary>
             
             <param name="commandText">The SQL text that will be executed.  
               <c>commandText</c> is used to initialize the CommandText property.</param>
             <param name="connection">An instance of the TdConnection class that is used to execute SQL 
               requests. <c>connection</c>is used to initialize the Connection property.</param>
             <param name="transaction">An instance of the TdTransaction class associated with the 
               connection. <c>transaction</c> is used to initialize the Transaction property.</param>
            
             <remarks>
             <list type="table">
             <listheader>
             <term>Property</term>
             <description>Initial Value</description>
             </listheader>
             <item>
             <term>CommandText</term>
             <description>commandText parameter</description>
             </item>
             <item>
             <term>CommandTimeout</term>
             <description>30 seconds</description>
             </item>
             <item>
             <term>CommandType</term>
             <description>Text</description>
             </item>
             <item>
             <term>Connection</term>
             <description>connection parameter</description>
             </item>
             <item>
             <term>DesignTimeVisible</term>
             <description>False</description>
             </item>
             <item>
             <term>Transaction</term>
             <description>transaction parameter</description>
             </item>
             <item>
             <term>UpdatedRowSource</term>
             <description>Both</description>
             </item>
             </list>
             </remarks>
             
             
        </member>
        <member name="M:Teradata.Client.Provider.TdCommand.Cancel">
             <summary>
             Cancels (Aborts) the execution of a TdCommand object.
             </summary>
             
             <exception cref="T:System.InvalidOperationException"><c>TdConnection</c> is not in Open state.</exception>
             <exception cref="T:System.ObjectDisposedException"><c>TdCommand</c> is closed / disposed.</exception>
             
             
             
             <remarks>
             Aborts or cancels the execution of a long running query or the 
             result set associated with the active <see cref="T:Teradata.Client.Provider.TdDataReader"/>.  The 
             <see cref="M:Teradata.Client.Provider.TdDataReader.Read"/> method returns false after the <c>Cancel</c> 
             returns. <c>Cancel</c> returns if <c>TdCommand</c> is not in execution 
             state or there is no active data reader. 
             </remarks>
             
             <example>
             The following example creates a <see cref="T:Teradata.Client.Provider.TdConnection"/> class and illustrates the 
             use of the Cancel method. One thread executes the command and displays 
             the result while the other thread cancels the command.
             
             <code>
             class ConsoleApp
             {
                 static void Main(string[] args)
                 {
                     // Create a new instance of cancelTest class.
                     // Note that the query will return 10,000 rows.
                     cancelTest test = 
                         new cancelTest("Data Source=Teradata1;User ID=ab;Password=ab;", 
                         "Select StatementText From AccLogTbl sample 10000");
            
                     // Start the test.
                     test.Start();
                 }
            
             }
            
             class cancelTest
             {
                 private TdConnection cn;
                 private TdCommand cmd;
            
                 public cancelTest(String connectionString, String commandText)
                 {
                     // Initialize the connection object
                     cn = new TdConnection(connectionString);
            
                     // Initialize the command object.
                     cmd = new TdCommand(commandText, cn);
                 }
            
                 public void Start()
                 {
                     Thread executeThread = new Thread(new ThreadStart(this.ExecuteQuery));
                     Thread cancelThread = new Thread(new ThreadStart(this.CancelQuery));
            	
                     executeThread.Start();
                     cancelThread.Start();
            
                     executeThread.Join();
                     cancelThread.Join();
                 }
            
                 public void ExecuteQuery()
                 {
                     try
                     {
                         // open a session to Teradata
                         cn.Open();
            
                         // Execute the query to retrieve 10,000 rows.
                         TdDataReader reader = cmd.ExecuteReader();
            
                         // write 10,000 rows to console
                         int recordNumber = 1;
                         while(reader.Read())
                         {
                             Console.WriteLine("row[{0}], column[1] = {1}", 
                                 recordNumber++, reader.GetString(0));
                         }
            
                         // Close the reader
                         reader.Close();
                     }
                     catch(TdException e)
                     {
                         Console.WriteLine(e.Message);
                     }
                     catch(SystemException e)
                     {
                         Console.WriteLine(e.Message);
                     }
                     finally
                     {
                         // close the session to Teradata
                         cn.Close();
                     }
                 }
            
                 public void CancelQuery()
                 {
                     try
                     {
                         // wait a while and let the other thread open 
                         // the session and execute the query
                         Thread.Sleep(30000);
            
                         // Cancel the command
                         cmd.Cancel();
                     }
                     catch(System.InvalidOperationException e)
                     {
                         Console.WriteLine(e.Message);
                     }
                 }
             }
             </code>
             </example>
             
             
        </member>
        <member name="M:Teradata.Client.Provider.TdCommand.ExecuteNonQuery">
             <summary>
             Executes a SQL statement and returns the number of rows affected.
             </summary>
             
             <returns>
             Returns the number of rows affected (Activity Count).  The number of
             rows affected is only returned for DELETE, INSERT, and UPDATE statements.
             For all other statements, the activity count that is returned will be -1.
             </returns>
             
             <exception cref="T:System.IndexOutOfRangeException">Can be thrown because of one of the following 
               errors:  1) The <see cref="P:Teradata.Client.Provider.TdParameter.Offset"/> is outside of 0 through array size – 1  
               2) More inout/out parameters have been specified than returned from the stored 
               procedure.</exception>
             <exception cref="T:System.InvalidCastException">One or more parameters cannot be converted to Teradata 
               Database native types.</exception>
             <exception cref="T:System.InvalidOperationException">Can be thrown because of one of the following 
               errors:  1) <c>TdConnection</c> is not in Open state or is null or 
               2) The local transaction associated with the <c>TdCommand</c> is not the same local 
               transaction associated with the <c>TdConnection</c>.  Assign the local transaction 
               to <c>Transaction</c> property. 3) <see cref="P:Teradata.Client.Provider.TdCommand.CommandText"/> is null or empty.</exception>
             <exception cref="T:System.ObjectDisposedException">The <c>TdCommand</c> is closed / disposed.</exception>
             <exception cref="T:Teradata.Client.Provider.TdException">Can be thrown because of one of the following 
               erros:  1) Teradata returned an error or 2) The Data Provider detected an error.</exception>
             
             <remarks>
             <para>Executes a SQL statement and returns the Activity Count. Teradata always 
             returns an Activity Count which reflects the number of rows affected for 
             UPDATE, DELETE and INSERT statements. <c>ExecuteNonQuery</c> returns the sum of 
             all activity counts if TdCommand represents a multi-statement request. For 
             example ExecuteNonQuery return 3 if a multi-statement request that contains 
             three INSERT statements is executed.</para>
             
             <para>If the activity count overflows Int32.MaxValue, <see cref="F:System.Int32.MaxValue"/> 
             value will be returned. The provider will post an event to <see cref="E:Teradata.Client.Provider.TdConnection.InfoMessage"/>
             when an overflow condition occurs. The event will include a warning code and message.
             The warning message will have the actual activity count. The message code is 111002 
             and the message text is "An overflow occurred while calculating the activity count, 
             actual value is [<c>ActivityCount</c>]"</para>
             
             <para><strong>NOTE:</strong> In order for an application to be aware that an overflow
             occurred, it must register for the callback with TdConnection.InfoMessage event.</para>
            
             <para>When the CommandType is set to <c>StoredProcedure</c>, any output parameters 
               are populated with data.</para>
             
             <para>Refer to <a href="DynamicResultSets.html#Output Parameters and Result Set">
             Returning Data of Output Parameters in a Result Set</a> 
             for more information on the execution of stored procedures.</para>
             
             </remarks>
             
             <example>
             The following example creates a TdConnection, sets up the TdConnection.InfoMessage 
             event and executes a SQL statement.
             
             If the activity count overflows Int32.MaxValue, Int32.MaxValue is returned and a 
             warning message with the actual activity count is exposed through the TdConnection 
             InfoMessage event. 
             
             <code>
             // This method is invoked when the TdConnection.InfoMessage is fired.
             public void OnInfoMessage(Object sender, TdInfoMessageEventArgs i)
             {
                 // The TdConnection.InfoMessage event gets fired when the activity count
                 // exceeds Int32.MaxValue. The actual activity count can be extracted
                 // from the message as below. 
                 if( i.Errors[0].Number == 111002 )
                 {
                     Decimal activityCount = 
                               Convert.ToDecimal(i.Message.Split('[')[3].Split(']')[0]);
                 
                     Console.WriteLine("Actual Activity count is : ", activityCount);
                 }
             }
             
             public int ExecuteQuery(string connectionString, string commandText)
             {
                 // Open a session to Teradata
                 TdConnection cn = new TdConnection(connectionString);
                 
                 // Setting up the event that will get fired if the activity count exceeds 
                 // the Int32.MaxValue
                 cn.InfoMessage += new TdInfoMessageEventHandler(this.OnInfoMessage);
                 
                 cn.Open();
            
                 // Execute the command
                 TdCommand cmd = new TdCommand(commandText, cn);
                 int activityCount = cmd.ExecuteNonQuery();
            
                 // Close the command and session
                 cmd.Dispose();
                 cn.Close();
            
                 // Return the activity count
                 return activityCount;
             }
             </code>
             </example>
        </member>
        <member name="M:Teradata.Client.Provider.TdCommand.ExecuteScalar">
             <summary>
             Executes the SQL statement (CommandText property) and returns 
             the first column of the first row.
             </summary>
             <returns>The first column of the first row.</returns>
             
             <exception cref="T:System.IndexOutOfRangeException">Can be thrown because of one of the following 
               errors:  1) The <see cref="P:Teradata.Client.Provider.TdParameter.Offset"/> is outside of 0 through array size – 1  
               2) More inout/out parameters have been specified than returned from the stored 
               procedure.</exception>
             <exception cref="T:System.InvalidCastException">One or more parameters cannot be converted to 
               Teradata native types.</exception>
             <exception cref="T:System.InvalidOperationException">Can be thrown because of one of the following 
               errors:  1) TdConnection is not in the Open state or is null or 
               2) The local transaction associated with TdCommand is not the same local transaction 
               associated with the TdConnection.</exception>
             <exception cref="T:System.ObjectDisposedException">The <c>TdCommand</c> is closed or disposed.</exception>
             <exception cref="T:Teradata.Client.Provider.TdException">Can be thrown because of one of the following errors:  
               1) Teradata returned an error or 2) The Data Provider detected an error.</exception>
             
             <remarks>
             <para>Executes the SQL statement and returns the first column of the first row.</para>
             
             <para></para>
             
             <para>When CommandType property is set to System.Data.CommandType.StoredProcedure, 
             any output parameters are populated with data and a null object reference is returned.</para>
             </remarks>
             
             <example>
             The following example creates a TdConnection object and executes a SQL statement. 
             
             <code>
             public Object ExecuteQuery(string connectionString, string commandText)
             {
                 Object scalar;
                 
                 using(TdConnection cn = new TdConnection(connectionString))
                 {
                     cn.Open();
            
                     TdCommand cmd = new TdCommand(commandText, cn);
                     scalar = cmd.ExecuteScalar();
                 }
            
                 return scalar;
             }
             </code>
             </example>
        </member>
        <member name="M:Teradata.Client.Provider.TdCommand.ExecuteCreateProcedure(System.Boolean)">
            <summary>
            ExecuteCreateProcedure executes an internal form of the 
            CREATE PROCEDURE statement.  
            </summary>
            
            <remarks>
            <c>ExecuteCreateProcedure</c> must be called when executing a CREATE 
            PROCEDURE statement.
            
            <para></para>
            
            Error or warning messages can be generated by the Teradata Database when compiling 
            a stored procedure.  If any error messages are returned by the Teradata Database, 
            <c>ExecuteCreateProcedure</c> will throw an exception.  However, if the 
            compiliation only produced warning messages, an <c>InfoMessage</c> event will be fired. 
            
            <para>Error messages generated during the compiliation of a stored 
            procedure are put into an error collection, and a <see cref="T:Teradata.Client.Provider.TdException"/> 
            is thrown.  All the error messages can be iterated through by accessing 
            the <see cref="P:Teradata.Client.Provider.TdException.Errors"/> property. </para>
            
            <para></para>
            
            <para>Warning messages are put into a warning collection.  These messages
            are made available through the <see cref="E:Teradata.Client.Provider.TdConnection.InfoMessage"/> event. </para>
            
            </remarks>
            
            <param name="saveSourceText">Specifies whether or not Stored Procedure source text is saved after compiliation.  
            <c>true</c> save, <c>false</c> not saved.</param>
            
            <returns> 
              Returns the number of compilation messages that are warnings.  
            </returns>
            
            <exception cref="T:Teradata.Client.Provider.TdException">Thrown when compiliation error messages are generated by 
              Teradata. Contains the collection of error messages generated during the compiliation 
              of the store procedure.</exception>
            <exception cref="T:System.ObjectDisposedException">Thrown when an operation is performed on a 
              disposed object</exception>
            <exception cref="T:System.InvalidOperationException">Can be thrown because of one of the following errors:  
              1) <c>TdConnection</c> is not in Open state or is null or 2) The local transaction associated with 
              the <c>TdCommand</c> is not the same local transaction associated with the <c>TdConnection</c>.  
              Assign the local transaction to <c>Transaction</c> property. 3) 
              <see cref="P:Teradata.Client.Provider.TdCommand.CommandText"/> is null or empty.</exception>
            
            <example>
            The following example creates a stored procedure.  If there were any compiliation
            error messages, the example routine iterates through the messages and prints information about the
            error to the console.
            
            <code>
              public void CreateProcedureExample(TdConnection conn)
              {
                cmd = new TdCommand("replace procedure sptest1 (in p1 int) begin declare d1 int; set d1 = p1 + 10; end;", conn);
                try
                {
                    Int32 xx = cmd.ExecuteCreateProcedure(true);
                }
                catch (TdException tdException)
                {
                    for (int i = 0; i &lt; tdException.Errors.Count; i++)
                    {
                        Console.WriteLine("Message = {0}, StatementNumber = {1}, Source = {2}", 
                                            tdException.Errors[i].Message, 
                                            tdException.Errors[i].StatementNumber,
                                            tdException.Errors[i].Source);
                    }
                }
              }
            </code>
            </example>
        </member>
        <member name="M:Teradata.Client.Provider.TdCommand.Prepare">
             <summary>
             Prepares the SQL statement (CommandText Property).
             </summary>
             
             <exception cref="T:System.InvalidOperationException">Indicates the <see cref="T:Teradata.Client.Provider.TdConnection"/> is 
               not in Open state or is null.</exception>
             <exception cref="T:System.ObjectDisposedException">Indicates the <c>TdCommand</c> is closed / 
               disposed.</exception>
             <exception cref="T:Teradata.Client.Provider.TdException">Can be thrown because of one of the following errors:  
               1) Teradata Database returned an error.  2) The Data Provider detected an error.</exception>
             
             <remarks>
             <para>Prepare method sends the SQL statement to Teradata Database which 
             parses the statement and returns column information. </para>
             
             <para></para>
             
             <para>When <see cref="P:Teradata.Client.Provider.TdCommand.CommandType"/> is set to CommandType.StoredProcedure, <c>TdCommand</c> generates a 
             CALL statement and utilizes the parameter collection to create the stored 
             procedure arguments. </para>
             
             <para></para>
             
             <para>If you call one of the Execute methods after calling Prepare, the 
             Data Provider will utilize the Statement Cache. However, if you call one 
             of the Execute methods without calling Prepare, the .Net Data Provider will not 
             utilize the Statement Cache.</para>
             
             <para></para>
             
             <para>If you change either the <see cref="P:Teradata.Client.Provider.TdCommand.CommandText"/> or <see cref="P:Teradata.Client.Provider.TdCommand.CommandType"/> property, the 
             TdCommand is no longer in a Prepare state.</para>
             
             <para></para>
             
             <para>We strongly recommend that you Prepare parameterized queries that are 
             executed frequently. That is first set the <see cref="P:Teradata.Client.Provider.TdCommand.CommandText"/> property, <see cref="P:Teradata.Client.Provider.TdCommand.CommandType"/> 
             property and the Parameter collections. Next, prepare the command once and set 
             parameter values and call execute method repeatedly.</para>
             </remarks>
             
             <example>
             The following example creates a <see cref="T:Teradata.Client.Provider.TdConnection"/> object and a <c>TdCommand</c> object. It 
             prepares the command and executes the command repeatedly.
             
             <code>
             public void ExecuteSingleParameterQuery(
                                                     string connectionString, 
                                                     string commandText, 
                                                     String[] parameterArray )
             {
                 // Open a session to Teradata.
                 TdConnection cn = new TdConnection(connectionString);
            
                 // Initialize a command to use the session.
                 TdCommand cmd = new TdCommand(commandText, cn);
            
                 try
                 {
                     cn.Open();
            
                     // Setup parameter information
                     TdParameter param = cmd.CreateParameter();
                     param.DbType = DbType.String;
                     param.Direction = ParameterDirection.Input;
                     cmd.Parameters.Add(param);
            
                     // Prepare the SQL statement 				
                     cmd.Prepare();
            
                     foreach (String value in parameterArray)
                     {
                         // Initialize the parameter value
                         param.Value = value;
            
                         // Execute the command.
                         cmd.ExecuteNonQuery();
                     }
                 }
                 finally
                 {
                     cmd.Dispose();
                     cn.Close();
                 }
             }
             </code>
             </example>
        </member>
        <member name="M:Teradata.Client.Provider.TdCommand.CreateParameter">
            <summary>
            Creates a new instance of the TdParameter class.
            </summary>
            
            <returns>Return a TdParameter Object.</returns>
            
            <exception cref="T:System.ObjectDisposedException">The TdCommand is closed / disposed.</exception>
            
            <remarks>
            Creates and returns an instance of <see cref="T:Teradata.Client.Provider.TdParameter"/> object. 
            </remarks>
        </member>
        <member name="M:Teradata.Client.Provider.TdCommand.ExecuteReader">
             <summary>
             Executes the SQL statement (CommandText property) and returns 
             a <see cref="T:Teradata.Client.Provider.TdDataReader"/> object.
             </summary>
             
             <returns>
             Returns a <see cref="T:Teradata.Client.Provider.TdDataReader"/> object.
             </returns>
             
             <exception cref="T:System.IndexOutOfRangeException">Can be thrown because of one of the following errors:  
               1) The <see cref="P:Teradata.Client.Provider.TdParameter.Offset"/> is outside of 0 through array size – 1  
               2) More inout/out parameters have been specified than returned from the stored procedure.</exception>
             <exception cref="T:System.InvalidCastException">Indicates one or more parameters cannot be converted 
               to Teradata native types.</exception>
             <exception cref="T:System.InvalidOperationException">Can be thrown because of one of the following errors:
               1)<c>TdConnection</c> is not in Open state or is null.  
               2) The local transaction associated with <c>TdCommand</c> is not the same local 
               transaction associated with the <c>TdConnection</c> --assign local transaction to 
               <c>Transaction</c> property. 3) <see cref="P:Teradata.Client.Provider.TdCommand.CommandText"/> is null or empty.</exception>
             <exception cref="T:System.ObjectDisposedException">The <c>TdCommand</c> is closed / disposed.</exception>
             <exception cref="T:Teradata.Client.Provider.TdException">Can be thrown because of the one of the following errors:
               1) Teradata returned an error or 2) The Data Provider detected an error.</exception>
             
             <remarks>
             <para>Executes a SQL statement and returns a static forward-only result 
             set (TdDataReader).</para>
             
             <para></para>
             
             <para>When a stored procedure is executed by setting the <see cref="P:Teradata.Client.Provider.TdCommand.CommandText"/> to the 
             stored procedure's name, and the <see cref="P:Teradata.Client.Provider.TdCommand.CommandType"/> is set to 
             <c>System.Data.CommandType.StoredProcedure</c> the provider performs the following tasks:</para>
             
             <list type="bullet">
             <item>
             <description>The <see cref="P:Teradata.Client.Provider.TdParameter.Value"/> and <see cref="P:Teradata.Client.Provider.TdParameter.ProviderSpecificValue"/>
             are populated with data</description>
             </item>
             
             <item>
             <description>The resulting <c>TdDataReader</c> contains no rows.</description>
             </item>
             
             <item>
             <description><see cref="M:Teradata.Client.Provider.TdDataReader.Read"/> returns false when invoked by an application.</description>
             </item>
             
             </list>
             
             <para>Refer to <a href="DynamicResultSets.html#Output Parameters and Result Set">Returning Data 
             of Output Parameters in a Result Set</a> for more information on the execution of stored 
             procedures.</para>
             
             <para>The .NET Data Provider allows more than one <see cref="T:Teradata.Client.Provider.TdDataReader"/> to be open 
             at any given time per <see cref="T:Teradata.Client.Provider.TdConnection"/> instance. However, there can only be one 
             <see cref="T:Teradata.Client.Provider.TdDataReader"/> per <c>TdCommand</c>. <see cref="T:Teradata.Client.Provider.TdDataReader"/> must be closed 
             before <c>TdCommand</c> can execute another SQL statement.</para>
             
             </remarks>
             
             <example>
             The following example creates a <see cref="T:Teradata.Client.Provider.TdConnection"/> and executes a SQL statement. 
             An instance of <see cref="T:Teradata.Client.Provider.TdDataReader"/> is returned. The calling method must close the 
             <see cref="T:Teradata.Client.Provider.TdDataReader"/> and the corresponding connection (cn.Close()).
             
             <code>
             public TdDataReader ExecuteQuery(string connectionString, string commandText, 
                                              out TdConnection cn)
             {
                 cn = new TdConnection(connectionString);
                 cn.Open();
            
                 TdCommand cmd = new TdCommand(commandText, cn);
                 TdDataReader reader = cmd.ExecuteReader();
            
                 return reader;
             }
             </code>
             </example>
        </member>
        <member name="M:Teradata.Client.Provider.TdCommand.ExecuteReader(System.Data.CommandBehavior)">
             <summary>
             Executes the SQL statement (<see cref="P:Teradata.Client.Provider.TdCommand.CommandText"/> property) and returns 
             a <see cref="T:Teradata.Client.Provider.TdDataReader"/> instance using one of the System.Data.CommandBehavior
             values.  Mostly used to ask for inline LOBs or close the connection 
             after DataReader is closed.
             </summary>
             
             <param name="behavior">One of the System.Data.CommandBehavior enumerations values.</param>
             
             <returns>Returns a TdDataReader object</returns>
             
             <exception cref="T:System.ArgumentException">Indicates the requested behavior is not support. 
               See the table below.</exception>
             <exception cref="T:System.IndexOutOfRangeException">Can be thrown because of one of the following 
               errors:  1) The <see cref="P:Teradata.Client.Provider.TdParameter.Offset"/> is outside of 0 through array size – 1  
               2) More inout/out parameters have been specified than returned from the stored procedure.</exception>
             <exception cref="T:System.InvalidCastException">Indicates one or more parameters cannot be converted 
               to Teradata native types.</exception>
             <exception cref="T:System.ComponentModel.InvalidEnumArgumentException">The behavior is not one of the 
               <c>System.Data.CommandBehavior</c> enumeration members.</exception>
             <exception cref="T:System.InvalidOperationException">Can be thrown because of one of the following 
               errors:  1) <see cref="T:Teradata.Client.Provider.TdConnection"/> is not in Open state or is null.  
               2) The local transaction associated with <c>TdCommand</c> is not the same local 
               transaction associated with the <see cref="T:Teradata.Client.Provider.TdConnection"/> --assign local transaction 
               to <see cref="P:Teradata.Client.Provider.TdCommand.Transaction"/> property. 3) <see cref="P:Teradata.Client.Provider.TdCommand.CommandText"/> is null or empty.</exception>
             <exception cref="T:System.ObjectDisposedException">The <c>TdCommand</c> is closed / disposed.</exception>
             <exception cref="T:Teradata.Client.Provider.TdException">Can be thrown because of one of the following 
               errors:  1) Teradata returned an error.  2) The Data Provider detected an error.</exception>
             
             <remarks>
             <para>Executes a SQL statement and returns a static forward-only 
             result set (TdDataReader).</para> 
            
             <para></para>
             
             <para>When <see cref="P:Teradata.Client.Provider.TdCommand.CommandType"/> is set to StoredProcedure, any output parameters 
             are populated with data and the resulting TdDataReader contains no rows.</para>
            
             <para></para>
             
             <para>The .NET Data Provider allows more than one TdDataReader object to be open 
             at any given time for each <see cref="T:Teradata.Client.Provider.TdConnection"/>. However, there can only be 
             one <see cref="T:Teradata.Client.Provider.TdDataReader"/> for each TdCommand. <see cref="T:Teradata.Client.Provider.TdDataReader"/> must  
             be closed before TdCommand can execute another SQL statement.</para>
            
             <para></para>
             
             <para>The .NET Data Provider supports In-Line and Deferred LOB retrievals. By default 
             LOBs are retrieved in deferred mode. If the SequentialAccess bit of behavior is turned
             on, LOBs are retrieved in In-Line mode. </para>
            
             <para></para>
             
             <para><c>behavior</c> can be set to a bit-wise combination of the following CommandBehavior values:</para>
             
             <list type="table">
             <listheader>
             <term>CommandBehavior Member Name</term>
             <description>Description</description>
             </listheader>
             <item>
             <term>CloseConnection</term>
             <description>The associated <see cref="T:Teradata.Client.Provider.TdConnection"/> object is closed when the 
             <see cref="T:Teradata.Client.Provider.TdDataReader"/> instance is closed.</description>
             </item>
             <item>
             <term>Default</term>
             <description>Sets no <c>CommandBehavior</c> flags.  Calling <c>ExecuteReader(CommandBehavior.Default)</c> 
             is equivalent to calling <c>ExecuteReader()</c>.</description>
             </item>
             <item>
             <term>KeyInfo</term>
             <description>Not supported.</description>
             </item>
             <item>
             <term>SchemaOnly</term>
             <description>The SQL statement is prepared and the resulting <see cref="T:Teradata.Client.Provider.TdDataReader"/> 
             is used to retrieve schema information (<see cref="M:Teradata.Client.Provider.TdDataReader.GetSchemaTable"/>).  
             <see cref="M:Teradata.Client.Provider.TdDataReader.Read"/> will return false (no rows).</description>
             </item>
             <item>
             <term>SequentialAccess</term>
             <description>When set, LOBs are returned in-line and they can only be accessed sequentially. 
             See Teradata Database documentation for additional information about In-line mode vs. 
             Deferred mode.</description>
             </item>
             <item>
             <term>SingleResult</term>
             <description>The SQL statement returns a single result set. <see cref="M:System.Data.IDataReader.NextResult"/> will return false.</description>
             </item>
             <item>
             <term>SingleRow</term>
             <description>SingleRow does not result in any internal optimization. However, 
             <see cref="M:Teradata.Client.Provider.TdDataReader.Read"/> returns false after the first row is read in
             each result set.</description>
             </item>
             </list>
             </remarks>
             
             <example>
             The following example creates a <c>TdConnection</c> and executes a SQL statement. 
             It returns a <c>TdDataReader</c>. When the calling method closes the <c>TdDataReader</c>, 
             the corresponding <c>TdConnection</c> is closed.
             
             <code>
             public TdDataReader ExecuteQuery(string connectionString, string commandText)
             {
                 TdConnection cn = new TdConnection(connectionString);
                 cn.Open();
            	    
                 TdCommand cmd = new TdCommand(commandText, cn);
                 TdDataReader reader = cmd.ExecuteReader(CommandBehavior.CloseConnection);
            
                 return reader;
             }
             </code>
             </example>
             
             <seealso cref="T:System.Data.CommandBehavior"/>
        </member>
        <member name="M:Teradata.Client.Provider.TdCommand.BeginExecuteNonQuery">
            <summary>
             Initiates the asynchronous request that is to be submitted to Teradata.  
             This method differs from <see cref="M:Teradata.Client.Provider.TdCommand.BeginExecuteReader"/> in that it 
             should not be used when retrieving data.  A TdDataReader object is not 
             returned when the corresponding <see cref="M:Teradata.Client.Provider.TdCommand.EndExecuteNonQuery(System.IAsyncResult)"/> 
             method is called.
            </summary>  
            
             <returns>
             Returns a <see cref="T:System.IAsyncResult"/> object.
            </returns>
            
             <exception cref="T:System.IndexOutOfRangeException">The <c>TdParameter.Offset</c> is outside of 0 
               through array size – 1.</exception>
             <exception cref="T:System.InvalidCastException">One or more parameters cannot be converted to Teradata 
               Database native types.</exception>
             <exception cref="T:System.InvalidOperationException">Can be thrown because of one of the following 
               errors:  1) <c>TdConnection</c> is not in Open state or is null or 2) The local 
               transaction associated with the <c>TdCommand</c> is not the same local transaction 
               associated with the <c>TdConnection</c>.  Assign the local transaction to <c>Transaction</c> 
               property.</exception>
             <exception cref="T:System.ObjectDisposedException">The <c>TdCommand</c> is closed / disposed.</exception>
             <exception cref="T:Teradata.Client.Provider.TdException">Can be thrown because the Data Provider detected an error.</exception>
            
            <seealso cref="M:Teradata.Client.Provider.TdCommand.ExecuteNonQuery"/>
             
             <remarks>
             <para>The call to BeginExecuteNonQuery returns after the request has been 
             successfully sent to Teradata.  Any exceptions that are generate by the 
             provider while initializing the request will be thrown during the call to 
             BeginExecuteNonQuery.   Exceptions that are generated by the provider or 
             Teradata during the processing of the request will be thrown when 
             <see cref="M:Teradata.Client.Provider.TdCommand.EndExecuteNonQuery(System.IAsyncResult)"/> is called.</para>
            
             <para>The DDL statement <c>CREATE PROCEDURE</c> cannot be specified in an 
             asynchronous execution.  If it has been specified a TdException will be 
             thrown when <see cref="M:Teradata.Client.Provider.TdCommand.EndExecuteNonQuery(System.IAsyncResult)"/> is called.</para>
            
             <para>A connection can only have one active request.  Therefore, if an 
             asynchronous request is being processed by the provider an exception will 
             be thrown when an attempt is made to start another asynchronous request.</para>
            
             <para>The <see cref="P:Teradata.Client.Provider.TdCommand.CommandTimeout"/> property is not applicable to asynchronous 
             execution and will be ignored when a command is asynchronously executed.</para>
             
             <para>Refer to <see cref="M:Teradata.Client.Provider.TdCommand.ExecuteNonQuery"/> for more information.</para>
             
            </remarks>
            
            <example>
             The following example invokes an asynchronous request.
            <code>
             public void BeginExecute(String connectionString, String CommandText)
             {
                 TdConnection cn = new TdConnection(connectionString);
                 cn.Open();
                 
                 IAsyncResult asyncResult;
            
                 TdCommand cmd = new TdCommand(commandText, cn);
            
                 //going to start asynchronous request
                 asyncResult = cmd.BeginExecuteNonQuery();
            
                 // going to perform other tasks
            
                 //waiting for asynchronous execute to finish
                 asyncResult.AsyncWaitHandle.WaitOne();
            
                 //going to end the asynchronous request
                 cmd.EndExecuteNonQuery(asyncResult);
            
                  cn.Close();
             }
            </code>
            </example>
            
        </member>
        <member name="M:Teradata.Client.Provider.TdCommand.BeginExecuteNonQuery(System.AsyncCallback,System.Object)">
            <summary>
             Initiates an asynchronous request to Teradata.  This method differs 
             from <see cref="M:Teradata.Client.Provider.TdCommand.BeginExecuteReader"/> in that it should not be used 
             when retrieving data.  A TdDataReader object is not returned when 
             the corresponding <see cref="M:Teradata.Client.Provider.TdCommand.EndExecuteNonQuery(System.IAsyncResult)"/> 
             method is called.
            </summary>        
            
            <param name="callback">Delegate that will be invoked after the processing of the request 
              has completed. If one is not required a <c>null</c> is specified.</param>
            <param name="state">User defined object.  This object is available to the callback 
              procedure by accessing the IAsyncResult.AsyncState property.</param>
            <returns>
             Returns a <see cref="T:System.IAsyncResult"/> object.
            </returns>
            
             <exception cref="T:System.IndexOutOfRangeException">The <c>TdParameter.Offset</c> is outside of 0 
               through array size – 1.</exception>
             <exception cref="T:System.InvalidCastException">One or more parameters cannot be converted to 
               Teradata Database native types.</exception>
            <exception cref="T:System.InvalidOperationException">Can be thrown because of one of the following 
              errors:  1) <c>TdConnection</c> is not in Open state or is null or 2) The local 
              transaction associated with the <c>TdCommand</c> is not the same local transaction 
              associated with the <c>TdConnection</c>.  Assign the local transaction to 
              <c>Transaction</c> property.</exception>
             <exception cref="T:System.ObjectDisposedException">The <c>TdCommand</c> is closed 
              / disposed.</exception>
             <exception cref="T:Teradata.Client.Provider.TdException">Can be thrown the Data Provider detected an error.</exception>
            
            <seealso cref="M:Teradata.Client.Provider.TdCommand.ExecuteNonQuery"/>
             
            <remarks>
             
             <para>The call to BeginExecuteNonQuery returns after the request has been 
             successfully sent to Teradata.  Any exceptions that are generated by the 
             provider while initializing the request will be thrown during the call to 
             BeginExecuteNonQuery.  Exceptions that are generated by the provider or 
             Teradata during the processing of the request will be thrown when 
             EndExecuteNonQuery is called.</para>
            
             <para>The DDL statement <c>CREATE PROCEDURE</c> cannot be specified in an 
             asynchronous execution.  If it has been specified a TdException will be 
             thrown when <see cref="M:Teradata.Client.Provider.TdCommand.EndExecuteNonQuery(System.IAsyncResult)"/> is called.</para>
            
             <para>A connection can only have one active request.  Therefore, if an 
             asynchronous request is being processed by the provider an exception will 
             be thrown when an attempt is made to start another asynchronous request.</para>
            
             <para>The <see cref="P:Teradata.Client.Provider.TdCommand.CommandTimeout"/> property is not applicable to asynchronous 
             execution and will be ignored when a command is asynchronously executed.</para>
             
             <para>Refer to <see cref="M:Teradata.Client.Provider.TdCommand.ExecuteNonQuery"/> for more information.</para>
             
            </remarks>
            
            <example>
             This example shows how BeginExecuteNonQuery can be used in a 
             Winforms Application.  
            
            <code>
            
            public partial class MainForm : Form
             {
                 // Indicates the a query is being processed
                 Boolean _processing = false;
            
                 TdConnection _cn = null;
                 String _connectionString = @"Data Source=Teradata1; " +
                            "Initial Catalog=ProdDB; " +
                            "Integrated Security=True;Pooling=False ";
            
                 public MainForm()
                 {
                     InitializeComponent();
                 }
            
                 private void WarehouseCallback(IAsyncResult result)
                 {
                     TdCommand command = (TdCommand)result.AsyncState;
            
                     try
                     {
                        command.EndExecuteNonQuery();
            
                        MessageBox.Show("Database has been updated", "Information");
                     }
                     catch (TdException t)
                     {
                        MessageBox.Show(t.Errors[0].Message, "ERROR");
                     }
                     finally
                     {
                         _processing = false;
            
                         _cn.Close();
                     }
                 }
             
                 private void buttonSubmit_Click(object sender, EventArgs e)
                 {
                     //checking whether the form is already processing 
                     //another query
                     if (true = _processing)
                     {
                         MessageBox.Show(
                             "Currently updating warehouse information");
                     }
                     else
                     {
                         String warehouseSQL = "Update ProductWarehouse " +
                                       "set ProdCount = " + textBoxProdCount.Text +
                                       where ProdNo= " + textBoxProdNo.Text;
            
                         try
                         {
                             _processing = true;
            
                             //The application has already created the
                             //connection object.  The name of the object
                             //is _cn.
            
                             TdCommand command = _cn.CreateCommand();
                             command.CommandText = warehouseSQL;
            
                             //setting up the delegate for the asynchronous call
                             AsyncCallback callback = 
                                      new AsyncCallback(WarehouseCallback);
            
                             //asynchronous call.  The WarehouseCallback callback
                             //will be invoked by the provider after processing of 
                             //the query has been completed.
                             command.BeginExecuteNonQuery(callback, command);
                         }
                         catch (TdException t)
                         {
                             MessageBox.Show(t.Errors[0].Message);
            
                             _cn.Close();
                         }
                     }
                 }
             }
            </code>
            </example>
        </member>
        <member name="M:Teradata.Client.Provider.TdCommand.BeginExecuteReader">
            <summary>
             Initiates the asynchronous request and generates one or more result sets 
             from Teradata.
            </summary>
            
            <returns>
             Returns a <see cref="T:System.IAsyncResult"/> object.
            </returns>
            
             <exception cref="T:System.IndexOutOfRangeException">Indicates the <see cref="P:Teradata.Client.Provider.TdParameter.Offset"/> 
               is outside of 0 through array size – 1.</exception>
             <exception cref="T:System.InvalidCastException">Indicates one or more parameters cannot be converted 
               to Teradata native types.</exception>
             <exception cref="T:System.InvalidOperationException">Can be thrown because of one of the following errors:  
             1) <c>TdConnection</c> is not in Open state or is null or 2) The local transaction associated with 
             the <c>TdCommand</c> is not the same local transaction associated with the <c>TdConnection</c>.  
             Assign the local transaction to <c>Transaction</c> property.</exception>
             <exception cref="T:System.ObjectDisposedException">The <c>TdCommand</c> is closed / disposed.</exception>
             <exception cref="T:Teradata.Client.Provider.TdException">Can be thrown because the Data Provider detected an error.</exception>
            
            <remarks>
             <para>The call to BeginExecuteReader returns after the request has been 
             successfully sent to Teradata.  Any exceptions that are generate by the 
             provider while initializing the request will be thrown during the call to 
             BeginExecuteReader.   Exceptions that are generated by the provider or 
             Teradata during the processing of the request will be thrown when 
             <see cref="M:Teradata.Client.Provider.TdCommand.EndExecuteReader(System.IAsyncResult)"/> is called.</para>
            
             <para>The DDL statement <c>CREATE PROCEDURE</c> cannot be specified in an 
             asynchronous execution.  If it has been specified a TdException will be 
             thrown when <see cref="M:Teradata.Client.Provider.TdCommand.EndExecuteReader(System.IAsyncResult)"/> is called.</para>
            
             <para>A connection can only have one active request.  Therefore, if an 
             asynchronous request is being processed by the provider an exception will 
             be thrown when an attempt is made to start another asynchronous request.</para>
            
             <para>The <see cref="P:Teradata.Client.Provider.TdCommand.CommandTimeout"/> property is not applicable to asynchronous 
             execution and will be ignored when a command is asynchronously executed.</para>
             
             
             <para>Refer to <see cref="M:Teradata.Client.Provider.TdCommand.ExecuteReader"/> for more information.</para>
             
            </remarks>
             
            <example>
             The following example invokes an asynchronous request.
            <code>
             public void BeginExecute(String connectionString, String CommandText,
            	out TdConnection cn)
             {
                 cn = new TdConnection(connectionString);
                 cn.Open();
                 
                 IAsyncResult asyncResult;
            
                 TdCommand cmd = TdCommand(commandText, cn);
            
                  //going to start asynchronous request
                  asyncResult = cmd.BeginExecuteReader();
            
                  // going to perform other tasks
            
                  //going to end the asynchronous request
                  //this will also block until processing has completed
                  TdDataReader dataReader = cmd.EndExecuteReader(asyncResult);
            
                   //RETRIEVE RESULTS FROM TERADATA
            
                   cn.Close();
             }
            </code>
            </example>
        </member>
        <member name="M:Teradata.Client.Provider.TdCommand.BeginExecuteReader(System.Data.CommandBehavior)">
            <summary>
             Initiates the asynchronous request that will use the specific 
             CommandBehavior and retrieves one or more result sets from Teradata.
            </summary>
             
             <param name="behavior">One of the System.Data.CommandBehavior enumeration values</param>
            
            <returns>
             Returns a <see cref="T:System.IAsyncResult"/> object.
            </returns>
            
            <exception cref="T:System.ArgumentException">Indicates that the requested CommandBehavior is not 
              supported.</exception>
            <exception cref="T:System.IndexOutOfRangeException">Indicates the <see cref="P:Teradata.Client.Provider.TdParameter.Offset"/> 
              is outside of 0 through array size – 1.</exception>
            <exception cref="T:System.InvalidCastException">Indicates one or more parameters cannot be converted 
              to Teradata native types.</exception>
            <exception cref="T:System.ComponentModel.InvalidEnumArgumentException">The behavior is not one of the 
              <c>System.Data.CommandBehavior</c> enumeration members.</exception>
            <exception cref="T:System.InvalidOperationException">Can be thrown because of one of the following errors:  
             1) <see cref="T:Teradata.Client.Provider.TdConnection"/> is not in Open state or is null.  2) The local transaction 
             associated with <c>TdCommand</c> is not the same local transaction associated with the 
             <see cref="T:Teradata.Client.Provider.TdConnection"/> --assign local transaction to <see cref="P:Teradata.Client.Provider.TdCommand.Transaction"/> property.</exception>
            <exception cref="T:System.ObjectDisposedException">The <c>TdCommand</c> is closed / disposed.</exception>
            <exception cref="T:Teradata.Client.Provider.TdException">Can be thrown because the Data Provider detected an error.</exception>
            
            <remarks>
             The call to BeginExecuteReader returns after the request has been 
             successfully sent to Teradata.  Any exceptions that are generate by the 
             provider while initializing the request will be thrown during the call to 
             BeginExecuteReader.   Exceptions that are generated by the provider or 
             Teradata during the processing of the request will be thrown when 
            <see cref="M:Teradata.Client.Provider.TdCommand.EndExecuteReader(System.IAsyncResult)"/> is called.
            
             <para></para>
            
             The DDL statement <c>CREATE PROCEDURE</c> cannot be specified in an 
             asynchronous execution.  If it has been specified a TdException will be 
             thrown when <see cref="M:Teradata.Client.Provider.TdCommand.EndExecuteReader(System.IAsyncResult)"/> is called.
            
            <para></para>
            
             A connection can only have one active request.  Therefore, if an 
             asynchronous request is being processed by the provider an exception will 
             be thrown when an attempt is made to start another asynchronous request.
            
            <para></para>
            
             The <see cref="P:Teradata.Client.Provider.TdCommand.CommandTimeout"/> property is not applicable to asynchronous execution and 
             will be ignored when a command is asynchronously executed.
            </remarks>
            
            <example>
            See <see cref="M:Teradata.Client.Provider.TdCommand.BeginExecuteReader"/> for a code example.
            </example>
        </member>
        <member name="M:Teradata.Client.Provider.TdCommand.BeginExecuteReader(System.AsyncCallback,System.Object)">
            <summary>
             Initiates the asynchronous request and generates one ore more result sets 
             from Teradata.
            </summary>
            
             <param name="callback"> Delegate that will be invoked after the processing of 
             the request has completed. If one is not required a <c>null</c> is specified.</param>
            <param name="state"> User defined object.  This object is available to the 
             callback procedure by accessing the IAsyncResult.AsyncState property.</param>
            
            <returns>
             Returns a <see cref="T:System.IAsyncResult"/> object.
            </returns>
            
             <exception cref="T:System.IndexOutOfRangeException">Indicates the <see cref="P:Teradata.Client.Provider.TdParameter.Offset"/> 
               is outside of 0 through array size – 1.</exception>
            <exception cref="T:System.InvalidCastException">Indicates one or more parameters cannot be converted 
              to Teradata native types.</exception>
            <exception cref="T:System.ComponentModel.InvalidEnumArgumentException">The behavior is not one of the 
              <c>System.Data.CommandBehavior</c> enumeration members.</exception>
            <exception cref="T:System.InvalidOperationException">Can be thrown because of one of the following errors:  
             1) <see cref="T:Teradata.Client.Provider.TdConnection"/> is not in Open state or is null.  2) The local transaction associated 
             with <c>TdCommand</c> is not the same local transaction associated with the 
             <see cref="T:Teradata.Client.Provider.TdConnection"/> --assign local transaction to <see cref="P:Teradata.Client.Provider.TdCommand.Transaction"/> property.</exception>
            <exception cref="T:System.ObjectDisposedException">The <c>TdCommand</c> is closed / disposed.</exception>
            <exception cref="T:Teradata.Client.Provider.TdException">Can be thrown because the Data Provider detected an error.</exception>
            
            <remarks>
             <para>The call to BeginExecuteReader returns after the request has been 
             successfully sent to Teradata.  Any exceptions that are generate by the 
             provider while initializing the request will be thrown during the call to 
             BeginExecuteReader.   Exceptions that are generated by the provider or 
             Teradata during the processing of the request will be thrown when 
            <see cref="M:Teradata.Client.Provider.TdCommand.EndExecuteReader(System.IAsyncResult)"/> is called.</para>
            
             
            
             <para>The DDL statement <c>CREATE PROCEDURE</c> cannot be specified in an 
             asynchronous execution.  If it has been specified a TdException will be 
             thrown when <see cref="M:Teradata.Client.Provider.TdCommand.EndExecuteReader(System.IAsyncResult)"/> is called.</para>
            
            
            
             <para>A connection can only have one active request.  Therefore, if an 
             asynchronous request is being processed by the provider an exception will 
             be thrown when an attempt is made to start another asynchronous request.</para>
            
             <para>The <see cref="P:Teradata.Client.Provider.TdCommand.CommandTimeout"/> property is not applicable to asynchronous execution and 
             will be ignored when a command is asynchronously executed.</para>
             
             <para>Refer to <see cref="M:Teradata.Client.Provider.TdCommand.ExecuteReader"/> for more information.</para>
             
            </remarks>
            
            <example>
             <para>This example shows how BeginExecuteReader can be used in a 
             Winforms Application.  </para>
            
             <para>When the Callback has been invoked by the provider, it will not
             be executing on the Application’s thread.  Therefore, the callback
             cannot have any interaction with the form or any of it’s 
             components.  One way to solve this problem is to call the form’s Invoke
             method to invoke a callback on the application’s thread.</para>
             
            <code>
             public partial class MainForm : Form
             {
                 //
                 // Indicates the a query is being processed
                 //
                 Boolean _processing = false;
            
                 TdConnection _cn = null;
                 String _connectionString = @"Data Source=Teradata1; " +
                            "Initial Catalog=ProdDB; " +
                            "Integrated Security=True;Pooling=False";
            
                 private delegate void WarehouseGridDelegate(TdDataReader warehouseReader);
            
                 public MainForm()
                 {
                     InitializeComponent();
                 }
            
                 private void WarehouseGrid(TdDataReader warehouseReader)
                 {
                     try
                     {
                         //setting up the data table that will be 
                         //passed onto the DataGrid to display the 
                         //warehouse locations.
                         DataTable warehouseTable = new DataTable();
                         warehouseTable.Load(warehouseReader);
            
                         //populating the data grid.
                         this.dataGridWarehouse.DataSource = warehouseTable;
                     }
                     catch (Exception e)
                     {
                         MessageBox.Show(e.Message, "ERROR");
                     }
                     finally
                     {
                         warehouseReader.Close();
                         _cn.Close();
                     }
                 }
            
                 private void WarehouseCallback(IAsyncResult result)
                 {
                     TdCommand command = (TdCommand)result.AsyncState;
            
                     TdDataReader warehouseReader = command.EndExecuteReader();
            
                     _processing = false;
            
                     //Need to setup a delegate that will be invoked by 
                     //the form's Invoke method.  The reason for this is that
                     //this callback will be running on a different thread than the
                     //form's thread. Interaction of the form and its contents 
                     //can only be done from the main thread, not from a 
                     //worker thread.
                     WarehouseGridDelegate wg = 
                               new WarehouseGridDelegate(WarehouseGrid);
            
                     this.Invoke(wg, warehouseReader);
                 }
             
                 private void buttonSubmit_Click(object sender, EventArgs e)
                 {
                     //checking whether the form is already processing another query
                     if (true = _processing)
                     {
                         MessageBox.Show("Currently retrieving warehouse information");
                     }
                     else
                     {
                         String warehouseSQL = "select ProdCount, WarehouseName, " +
                                                 "WarehouseCity, WarehouseState " +
                                                 "from ProductWarehouse " +
                                                 "where ProdNo= " + textBoxProdNo.Text";
            
                         try
                         {
                             _processing = true;
            
                             _cn = new TdConnection(_connectionString);
            
                             TdCommand command = _cn.CreateCommand();
                             command.CommandText = warehouseSQL;
            
                             //setting up the delegate for the asynchronous call
                             AsyncCallback callback = 
                                      new AsyncCallback(WarehouseCallback);
            
                             //asynchronous call.  The WarehouseCallback callback will be
                             //invoked by the provider after processing of the query has
                             //been completed.
                             command.BeginExecuteReader(callback, command);
                         }
                         catch (TdException t)
                         {
                             MessageBox.Show(t.Errors[0].Message);
            
                             _cn.Close();
                         }
                     }
                 }
             }
            </code>
            </example>
        </member>
        <member name="M:Teradata.Client.Provider.TdCommand.BeginExecuteReader(System.AsyncCallback,System.Object,System.Data.CommandBehavior)">
            <summary>
             Initiates the asynchronous request that will use the specific 
             CommandBehavior and retrieves one or more result sets from Teradata.
            </summary>
            
             <param name="callback">Delegate that will be invoked after the processing 
             of the request has completed. If one is not required a <c>null</c> is specified.</param>
            <param name="state">User defined object.  This object is available to 
             the callback procedure by accessing the IAsyncResult.AsyncState property.</param>
             <param name="behavior">One of the System.Data.CommandBehavior enumeration 
             values</param>
            
            <returns>
             Returns a <see cref="T:System.IAsyncResult"/> object.
            </returns>
            
            <exception cref="T:System.ArgumentException">Indicates the requested behavior is not supported.</exception>
            <exception cref="T:System.IndexOutOfRangeException">Indicates the <see cref="P:Teradata.Client.Provider.TdParameter.Offset"/> 
              is outside of 0 through array size – 1.</exception>
            <exception cref="T:System.InvalidCastException">Indicates one or more parameters cannot be converted 
              to Teradata native types.</exception>
            <exception cref="T:System.InvalidOperationException">Can be thrown because of one of the following errors:  
             1) <see cref="T:Teradata.Client.Provider.TdConnection"/> is not in Open state or is null.  
             2) The local transaction associated with <c>TdCommand</c> is not the 
             same local transaction associated with the <see cref="T:Teradata.Client.Provider.TdConnection"/> 
             --assign local transaction to <see cref="P:Teradata.Client.Provider.TdCommand.Transaction"/> property.</exception>
            <exception cref="T:System.ObjectDisposedException">The <c>TdCommand</c> is closed / disposed.</exception>
            <exception cref="T:Teradata.Client.Provider.TdException">Can be thrown because the Data Provider detected an error.</exception>
            
            <remarks>
             <para>The call to BeginExecuteReader returns after the request has been 
             successfully sent to Teradata.  Any exceptions that are generated by the 
             provider while initializing the request will be thrown during the call to 
             BeginExecuteReader.   Exceptions that are generated by the provider or 
             Teradata during the processing of the request will be thrown when 
            <see cref="M:Teradata.Client.Provider.TdCommand.EndExecuteReader(System.IAsyncResult)"/> is called.</para>
            
             <para>The DDL statement <c>CREATE PROCEDURE</c> cannot be specified in an 
             asynchronous execution.  If it has been specified a TdException will be 
             thrown when <see cref="M:Teradata.Client.Provider.TdCommand.EndExecuteReader(System.IAsyncResult)"/> is called.</para>
            
             <para>A connection can only have one active request.  Therefore, if an 
             asynchronous request is being processed by the provider an exception will 
             be thrown when an attempt is made to start another asynchronous request.</para>
            
             <para>The <see cref="P:Teradata.Client.Provider.TdCommand.CommandTimeout"/> property is not applicable to 
             asynchronous execution and 
             will be ignored when a command is asynchronously executed.</para>
             
             <para>Refer to <see cref="M:Teradata.Client.Provider.TdCommand.ExecuteReader"/> for more information.</para>
             
            </remarks>
            
             <example>
             See <see cref="M:Teradata.Client.Provider.TdCommand.BeginExecuteReader(System.AsyncCallback,System.Object)"/> for 
             a coding example.
             </example>
        </member>
        <member name="M:Teradata.Client.Provider.TdCommand.EndExecuteNonQuery(System.IAsyncResult)">
            <summary>
             Ends the asynchronous execution.
            </summary>
            
            <param name="asyncResult">IAsyncResult object returned from the corresponding BeginExecuteQuery</param>
            
            <returns>
             The number of rows that are affected.
            </returns>
            
             <exception cref="T:System.ArgumentException">Can be thrown because of one of the following:  
               1) The parameter for asyncResult is null, 2) asyncResult parameter is not associated with 
               execution.</exception>
             <exception cref="T:System.IndexOutOfRangeException">Can be thrown because more inout/out parameters 
               have been specified than returned from the stored procedure.</exception>
             <exception cref="T:System.InvalidOperationException">Can be thrown because of one of the following:  
               1) EndExecuteNonQuery was called more than once for the corresponding BeginExecuteNonQuery, 
               2) EndExecuteNonQuery does not match the call to the corresponding method  used for execution.  
               For example, EndExecuteNonQuery was called to end execution of a call to BeginExecuteReader.   
               3) The command has been  disposed.</exception>
             <exception cref="T:Teradata.Client.Provider.TdException">Can be thrown because of one of the following erros:  
               1) Teradata returned an error  2) The Data Provider detected an error.</exception>
            
            <remarks>
             An EndExecuteNonQuery must follow a BeginExecuteNonQuery.  
             
             <para></para>
             
             <para>If the activity count overflows Int32.MaxValue, <see cref="F:System.Int32.MaxValue"/>
             value will be returned. The provider will post an event to <see cref="E:Teradata.Client.Provider.TdConnection.InfoMessage"/>
             when an overflow condition occurs. The event will include a warning code and message.
             The warning message will have the actual activity count. The message code is 111002 
             and the message text is "An overflow occurred while calculating the activity count, 
             actual value is [<c>ActivityCount</c>]"</para>
             
             <para><strong>NOTE:</strong> In order for an application to be aware that an overflow
             occurred, it must register for the callback with TdConnection.InfoMessage event.</para>
              
             <para></para>
             
             When a stored procedure is executed the <see cref="P:Teradata.Client.Provider.TdParameter.Value"/> 
             property is set with the corresponding data retrieved from Teradata.
            
             <para></para>
            
             Exceptions that have been generated by the provider or Teradata during the processing of the 
             request will be thrown when EndExecuteNonQuery is called.
            
            <para></para>
            
             If EndExecuteNonQuery is called before the command has completed processing
             it will block until the database operation is finished.
            </remarks>
            
            <example>
             For a coding example please see <see cref="M:Teradata.Client.Provider.TdCommand.BeginExecuteNonQuery"/>
            </example>
            
        </member>
        <member name="M:Teradata.Client.Provider.TdCommand.EndExecuteReader(System.IAsyncResult)">
            <summary>
             Completes the asynchronous execution of a corresponding BeginExecuteReader.
            </summary>
            
            <param name="asyncResult">IAsyncResult object returned from the corresponding 
             BeginExecuteReader</param>
            
             <returns>
             The <see cref="T:Teradata.Client.Provider.TdDataReader"/> object that is used to retrieve the data.
             </returns>
            
             <exception cref="T:System.IndexOutOfRangeException">Can be thrown because more inout/out parameters 
               have been specified than returned from the stored procedure.</exception>
             <exception cref="T:System.InvalidOperationException">Can be thrown because of one of the following:  
             1) EndExecuteReader was called more than once for the corresponding BeginExecuteReader, 
             2) EndExecuteReader does not match the call to the corresponding method  used for execution.  
             For example, EndExecuteReader was called to end execution of a call to BeginExecuteNonQuery.  
             3) The command has been  disposed.</exception>
            <exception cref="T:Teradata.Client.Provider.TdException">Can be thrown because of one of the following errors:  
             1) Teradata returned an error.  2) The Data Provider detected an error.  .</exception>
            
            <remarks>
             An EndExecuteReader must follow a BeginExecuteReader in order to retrieve 
             the data reader object, initialize the out/inout parameter for stored 
             procedures, or catch TdExceptions that may have been thrown by the provider 
             or Teradata.
            
            <para></para>
            
             If EndExecuteReader is called before the command has completed processing
             it will block until the database operation is finished.
            </remarks>
            
            <example>
             See <see cref="M:Teradata.Client.Provider.TdCommand.BeginExecuteReader"/> for a coding example.
            </example>
        </member>
        <member name="M:Teradata.Client.Provider.TdCommand.ResetCommandTimeout">
            <summary>
            Resets the CommandTimeout property to the default value.
            </summary>
            
            <exception cref="T:System.InvalidOperationException">Indicates the 
              <see cref="P:Teradata.Client.Provider.TdCommand.CommandTimeout"/> property was changed while the command was in 
              the execute state.</exception>
            <exception cref="T:System.ObjectDisposedException">Indicates the <c>TdCommand</c> 
              is disposed.</exception>
            
            <remarks>
            <c>ResetCommandTimeout</c> method resets the CommandTimeout property to the default 
            value of 30 seconds.
            </remarks>
        </member>
        <member name="P:Teradata.Client.Provider.TdCommand.ObjectId">
            <summary>
            Gets the Instance Object Identifier.
            </summary>
        </member>
        <member name="P:Teradata.Client.Provider.TdCommand.CommandText">
             <summary>
             Gets or Sets the SQL request to execute.
             </summary>
             <value>
             The SQL request (Single or Multi-statement, DML or DDL) to execute. The default 
             value is an empty string.
             </value>
             <exception cref="T:System.InvalidOperationException">The <c>CommandText</c> property was changed
                while the command was in execute state or there is an outstanding associated 
                <c>TdDataReader</c>.</exception>
             <exception cref="T:System.ObjectDisposedException">The <c>TdCommand</c> is disposed.</exception>
             <remarks>
             	<para>The <c>CommandText</c> property represents the SQL request sent to the
                 Teradata Database. The .NET Data Provider does not modify or parse the
             <c>CommandText</c> in most cases.</para>
                 <para>When the <c>CommandType</c> property is set to 
                 <c>System.Data.CommandType.StoredProcedure</c>, the <c>CommandText</c> property can 
                 either be set to the name of the stored procedure or the entire CALL statement.
                 When the <c>CommandType</c> property is set to <c>System.Data.CommandType.StoredProcedure</c>
                 ,the .NET Data Provider will verify if the <c>CommandText</c> is a valid
                 CALL statement. The provider will not validate if the object names in the CALL statement
                 follow Teradata DBS object naming conventions. The user defined CALL statement
                 set in the <c>CommandText</c> property also should not include any comments anywhere within
                 the statement. If the <c>CommandText</c> is not a valid CALL statement,
                 the .NET Data Provider will assume the <c>CommandText</c> to be set with the stored procedure
                 name and will generate the stored procedure CALL Statement. 
                 For example, if the <c>CommandText</c> is set to "SPNAME", .NET Data Provider will generate
                 the CALL statement as <strong>CALL "SPNAME"(?, ?, outparm3)</strong>. It surrounds the Stored 
                 Procedure name with Double Quotes (U0022) to allow for special characters like SPACE (U0020). 
                 The exception to this rule is when there are one or more DOTs (U002E) in the Stored 
                 Procedure name. DOT is ambiguous, that is it can separate a Database Name from a Stored 
                 Procedure Name (e.g. DatabaseName.SP) or it can be part of the Stored Procedure name. 
                 Double Quotes must not be added to the former while it can be added to the latter. The
                 .Net Data Provider for Teradata does not add Double Quotes to the CommandText
                 (Stored Procedure Name) when it contains one or more DOTs. Application must add
                 Double Quotes when required by Teradata Database Object Names Syntax and
                 Lexicon.</para>
             	<para>The .NET Data Provider optimizes stored procedure handling by utilizing
                 Output Parameter Names (<c>TdParameter.ParameterName</c>) when specified.</para>
             	<para>The Teradata Database and the .NET Data Provider do not support Named
                 Parameters. In addition, Teradata V2R6.0 and earlier releases requires that the
                 names for all Output Parameters be specified in the CALL statement. The .NET Data
                 Provider will utilize the Output Parameter Name if it has been specified in the
                 <c>TdParameter.ParameterName</c> property. Otherwise, it will need to retrieve the
                 parameters names for out arguments from the Teradata Database. Therefore, it is
                 highly recommended to provide Output Parameter Names to minimize the round-trips to
                 Teradata and back.</para>
             	<para>The .NET Data Provider does not support
                 <c>System.Data.CommandType.TableDirect</c> CommandType.</para>
             </remarks>
             <example>
             The example below shows how to set the CommandType to StoredProcedure and set the
             CommandText to either the Stored Procedure name or user defined CALL statement. 
             
             If the CommandText is set to the Stored Procedure name, .NET Data Provider will
             generate the CALL statement. 
             
             The example creates an instance of TdConnection class, and executes a LookupCustomerName 
             stored procedure which accepts as input a customer ID and returns customer name as an 
             output parameter. 
             
             <code lang="CS">
              public void Setup()
              {
                 TdConnection cn = new TdConnection();
                 cn.ConnectionString = "Data Source=Teradata1;User ID=ab;Password=ab;";
            
                 String empTable = "CREATE TABLE EmployeeTable(CustID char(6), CustName char(50))";
                 String spText   = "REPLACE PROCEDURE LookupCustomerName " + 
                                   "( in varCustID char(6), out varCustName char(50))" +
                                   "BEGIN" +
                                   "Select CustName into varCustName from EmployeeTable where CustID = varCustID;" +
                                   "END;";
                 try
                 {
                     cn.Open();
                     TdCommand cmd = cn.CreateCommand();
            
                     cmd.CommandText = empTable;
                     cmd.ExecuteNonQuery();
            
                     cmd.CommandText = spText;
                     cmd.ExecuteNonQuery();
                 }
                 finally
                 {
                     // Close the session to Teradata
                     cn.Close();
                 }
              }
             </code>
             
             <code lang="CS">
             public String LookupCustomerName(String customerId)
             {
                 String customerName = null;
                 TdConnection cn = new TdConnection();
                 cn.ConnectionString = "Data Source=Teradata1;User ID=ab;Password=ab;";
                 
                 Setup();
                 
                 try
                 {
                     cn.Open();
                     
                     // Initialize TdCommand
                     TdCommand cmd = cn.CreateCommand();
                     
                     //CommandText is set to Stored Procedure name, in this case,
                     //.NET Data Provider will generate the CALL statement.
                     cmd.CommandText = "LookupCustomerName";
                     
                     //CommandText is set below to user specified CALL statement. To run the
                     //example with the below CALL statement, uncomment the below line where 
                     //CommandText is set to the CALL statement and comment out the previous 
                     //CommandText set to the Stored Procedure name.
                     //cmd.CommandText = "Call LookupCustomerName (?,?)";
                     
                     cmd.CommandType = CommandType.StoredProcedure;
                     
                     // Create Input Parameter
                     TdParameter InParm = cmd.CreateParameter();
                     InParm.Direction = ParameterDirection.Input;
                     InParm.DbType = DbType.String;
                     InParm.Size = 6;
                     InParm.Value = customerId;
                     cmd.Parameters.Add(InParm);
                     
                     // Create Output Parameter.
                     TdParameter OutParm = cmd.CreateParameter();
                     OutParm.Direction = ParameterDirection.Output;
                     
                     // Specify the output parameter name.
                     
                     // If parameter name is not specified, then 
                     // the .NET Data Provider will retrieve the
                     // name of out arguments from the Teradata RDMS
                     OutParm.ParameterName = "CustomerName";
                     OutParm.DbType = DbType.String; 
                     OutParm.Size = 50; 
                     cmd.Parameters.Add(OutParm); 
                     
                     cmd.ExecuteNonQuery();
                     
                     customerName = OutParm.Value;
                 } 
                 finally
                 {
                     // Close the session to Teradata
                     cn.Close();
                 }
                 
                 return customerName;
             }
             </code>
             </example>
        </member>
        <member name="P:Teradata.Client.Provider.TdCommand.CommandTimeout">
            <summary>
            Gets or sets the wait time before aborting the execution of the command.
            </summary>
            
            <value>
            The time to wait for the command to execute. The default value is 30 seconds.
            </value>
            <exception cref="T:System.ArgumentOutOfRangeException">The property value is less than 0.</exception>
            <exception cref="T:System.InvalidOperationException">The <b>CommandTimeout</b> property was changed 
              while the command was in execute state.</exception>
            <exception cref="T:System.ObjectDisposedException">The <b>TdCommand</b> is disposed.</exception>
            
            <remarks>
            <para>
                The <b>CommandTimeout</b> property represents the amount of time in seconds that 
                the .NET Data Provider waits for a response from Teradata. If the request 
                is not processed within the specified <b>CommandTimeout</b> the request is aborted 
                and the transaction is rolled back. A zero value indicates that the .NET 
                Data Provider should wait indefinitely for the SQL statement to execute. 
            </para>
            <para>
                The default <b>CommandTimeout</b> may be changed through support in our application
                configuration file <a href="ConfigurationFileProviderSection.html#CommandTimeout"> 
                Application Configuration File CommandTimeout</a>.
            </para>
            <para>
                With the introduction of <a href="RedriveAndRecoverableNetworkProtocol.html">Redrive 
                and Recoverable Network Protocol</a>, the <b>CommandTimeout</b> will determine the
                <a href="ConfigurationFileProviderSection.html#RecoveryTimeout"> 
                Application Configuration File RecoveryTimeout</a> value while reconnecting a session. 
                The following table applies while
                the <see cref="P:Teradata.Client.Provider.TdConnectionStringBuilder.Recovery"/> is set to <c>Redrive</c>,
                <c>Reconnect</c> or <c>Default</c> and the database has enabled Recoverable Network
                Protocol.
            </para>
            <list type="table">
            <listheader>
            <term>CommandTimeout</term>
            <description>RecoveryTimeout</description>
            </listheader>
            <item>
                <term>0</term>
                <description>
                    The <b>RecoveryTimeout</b> will be supplied during reconnection.
                </description>
            </item>
            <item>
            <term>Non-zero</term>
            <description>
                <para>
                    The <b>RecoveryTimeout</b> will be supplied during reconnection when 
                    the <see cref="P:Teradata.Client.Provider.TdConnectionStringBuilder.RecoveryCommandTimeoutOverride"/> 
                    is true. This is the default value for the <b>RecoveryCommandTimeoutOverride</b>.
                </para>
                <para>
                    The non-zero <b>CommandTimeout</b> will not be extended by the <b>RecoveryTimeout</b>
                    when <b>RecoveryCommandTimeoutOverride</b> is false. Any reconnection efforts
                    will utilize the remaining time from the <b>CommandTimeout</b>.
                </para>
            </description>
            </item>
            </list>
            </remarks>
            <seealso cref="!:PeriodArithmetic.html#UNTIL_CHANGED">Period Type Arithmetic Operations:  UNTIL_CHANGED</seealso>
        </member>
        <member name="P:Teradata.Client.Provider.TdCommand.CommandType">
            <summary>
            Gets or sets how the <c>CommandText</c> property is interpreted.
            </summary>
            
            <value>
            One of the <c>System.Data.CommandType</c> enumeration values. The default value is 
            <c>System.Data.CommandType.Text</c>.
            </value>
            
            <exception cref="T:System.ArgumentOutOfRangeException">Provider does not support the specified 
              CommandType.</exception>
            <exception cref="T:System.ComponentModel.InvalidEnumArgumentException">The <c>CommandType</c> is not one of the 
              <c>System.Data.CommandType</c> enumeration members.</exception>
            <exception cref="T:System.InvalidOperationException">The <c>CommandType</c> property was changed 
              while the command was in execute state or there is an outstanding associated 
              <c>TdDataReader</c>.</exception>
            <exception cref="T:System.ObjectDisposedException">The TdCommand is closed / disposed.</exception>
            
            <remarks>
            The .NET Data Provider only supports <c>System.Data.CommandType.StoredProcedure</c> 
            and <c>System.Data.CommandType.Text</c> values. The .NET Data Provider does not support 
            <c>System.Data.CommandType.TableDirect</c>. 
            When the <c>CommandType</c> property is set to StoredProcedure, the <c>CommandText</c> 
            property can either be set to the name of the stored procedure or user defined CALL statement.
            When the <c>CommandType</c> property is set to <c>System.Data.CommandType.StoredProcedure</c>
            ,the .NET Data Provider will verify if the <c>CommandText</c> is a valid
            CALL statement. If the <c>CommandText</c> is not a valid CALL statement,
            the .NET Data Provider will assume the <c>CommandText</c> to be set with the stored procedure
            name and generate the stored procedure CALL Statement, that includes the stored procedure name and 
            corresponding parameters. 
            </remarks>
            
            <seealso cref="T:Teradata.Client.Provider.TdCommand"/>
        </member>
        <member name="P:Teradata.Client.Provider.TdCommand.UpdatedRowSource">
            <summary>
            Gets or sets how command results are applied to the DataRow when 
            used by the Update method of the <see cref="T:Teradata.Client.Provider.TdDataAdapter"/>.
            </summary>
            
            <value>
            One of the System.Data.UpdateRowSource enumeration values. The default 
            value is System.Data.UpdateRowSource.OutputParameters.
            </value>
            
            <exception cref="T:System.ArgumentException">Valid values are None and Output Parameters.</exception>
            <exception cref="T:System.ObjectDisposedException">The <c>TdCommand</c> is closed / disposed.</exception>
            
            <remarks>
            Teradata Stored Procedures only return output parameters (No result set 
            or return values). Therefore, output parameters can be mapped back to 
            the <c>DataTable</c> within a <c>DataSet</c>.
            </remarks>
        </member>
        <member name="P:Teradata.Client.Provider.TdCommand.DbConnection">
            <summary>
            TdCommand implements System.Data.IDbCommand interface. 
            Therefore it supports the following property. 
            However, it is only exposed when TdCommand is cast to IDbCommand. 
            </summary>
            
            <exception cref="T:System.ObjectDisposedException">The <c>TdCommand</c> is disposed.</exception>
            
            <remarks>
            See also TdCommand.Connection Property.
            </remarks>
            
            <seealso cref="T:System.Data.IDbCommand"/>
        </member>
        <member name="P:Teradata.Client.Provider.TdCommand.DbParameterCollection">
            <summary>
            TdCommand implements System.Data.IDbCommand interface. 
            Therefore it supports the following property. 
            However, it is only exposed when TdCommand is cast to IDbCommand. 
            </summary>
            
            <exception cref="T:System.ObjectDisposedException">The <c>TdCommand</c> is closed / disposed.</exception>
            
            <remarks>
            See TdCommand.Parameters Property.
            </remarks>
            
            <seealso cref="T:System.Data.IDbCommand"/>
        </member>
        <member name="P:Teradata.Client.Provider.TdCommand.DbTransaction">
            <summary>
            TdCommand implements System.Data.IDbCommand interface. 
            Therefore it supports the following property. 
            However, it is only exposed when TdCommand is cast to IDbCommand. 
            </summary>
            
            <exception cref="T:System.ObjectDisposedException">The <c>TdCommand</c> is closed / disposed.</exception>
            
            <remarks>
            See <see cref="P:Teradata.Client.Provider.TdCommand.Transaction"/> Property.
            </remarks>
            
            <seealso cref="T:System.Data.IDbCommand"/>
        </member>
        <member name="P:Teradata.Client.Provider.TdCommand.Connection">
            <summary>
            Gets or sets the TdConnection instance used to execute the command.
            </summary>
            
            <value>
            The connection to Teradata Database. The default value is null.
            </value>
            
            <exception cref="T:System.InvalidOperationException">The <c>Connection</c> property was changed while 
            the <c>TdCommand</c> was in execute state or there is an outstanding associated <c>TdDataReader</c>.
            </exception>
            
            <exception cref="T:System.ObjectDisposedException">The <c>TdCommand</c> is closed / disposed.</exception>
            
            <remarks>
            <para>You cannot set the <c>Connection</c>, <c>CommandType</c> or <c>CommandText</c> properties 
            if <c>TdCommand</c> is executing a SQL statement or if there is an outstanding <c>TdDataReader</c> 
            instance. <c>TdDataReader</c> should be closed before <c>Connection</c> property is changed. </para>
            
            <para>The <c>Transaction</c> property is set to null when the <c>Transaction</c> property 
            is not null and has already been committed or rolled back.</para>
            </remarks>
        </member>
        <member name="P:Teradata.Client.Provider.TdCommand.DesignTimeVisible">
             <summary>
             Gets or sets a value indicating that the command object is 
             visible in a customized Windows Forms Designer control.
             </summary>
             
             
             
             <exception cref="T:System.ObjectDisposedException">The <c>TdCommand</c> is closed / disposed.</exception>
             
             
        </member>
        <member name="P:Teradata.Client.Provider.TdCommand.Parameters">
             <summary>
             Gets the TdParameterCollection object.
             </summary>
             
             
             
             <exception cref="T:System.ObjectDisposedException">The <c>TdCommand</c> is closed / disposed.</exception>
             
             <remarks>
             <para>The .NET Data Provider does not support named parameters. 
             <c>TdParameterCollection</c> dictates the sequence of the data (parameters) 
             passed to Teradata Database. The first element of the collection 
             is written to the Data stream followed by the second parameter and so forth.</para>
             
             <para></para>
             
             <para>The .NET Data Provider does not support SQL statements with USING Row 
             Descriptor. The SQL Statement must use parameter markers (For example:  Select * from 
             Customers where CustomerID = ?).</para>
             </remarks>
             
             <example>
             The following example creates a TdConnection object and a TdCommand object. 
             The example creates the last name and first name parameters, then prepares the command and 
             executes the insert command repeatedly.
             
             <code>
             public void ExecuteParameterizedQuery(
                     string connectionString, 
                     String[] firstNameArray, 
                     String[] lastNameArray)
             {
                 //Open a session to Teradata.
                 TdConnection cn = new TdConnection(connectionString);
            
                 try
                 {
                     cn.Open();
            
                     // Initialize a command.	
                     TdCommand cmd = new TdCommand(
                         "Insert into Customers (FirstName, LastName) values (?, ?)", 
                         cn);
            
                     // Set the first name parameter.
                     TdParameter firstName = cmd.CreateParameter();
                     firstName.DbType = DbType.String;
                     firstName.Direction = ParameterDirection.Input;
                     cmd.Parameters.Add(firstName);
            
                     // Set the last name parameter.
                     TdParameter lastName = cmd.CreateParameter();
                     lastName.DbType = DbType.String;
                     lastName.Direction = ParameterDirection.Input;
                     cmd.Parameters.Add(lastName);
            
                     // Prepare the query.			
                     cmd.Prepare();
            
                     for (Int32 index = 0; (index &lt; firstNameArray.Length) &amp;&amp; 
                         (index &lt; lastNameArray.Length); index++)
                     {
                         // Initialize the parameter values.
                         firstName.Value = firstNameArray[index];
                         lastName.Value = lastNameArray[index];
            
                         // Execute the command.
                         cmd.ExecuteNonQuery();
                     }
            
                     cmd.Dispose()
                 }
                 finally
                 {
                     cn.Close();
                 }
             </code>
             </example>
        </member>
        <member name="P:Teradata.Client.Provider.TdCommand.Transaction">
            <summary>
            Gets or sets the explicit transaction in which the TdCommand executes.
            </summary>
            
            <value>
            <see cref="T:Teradata.Client.Provider.TdTransaction"/> object. The default value is a null reference.
            </value>
            
            <exception cref="T:System.InvalidOperationException">The <c>Transaction</c> property was changed 
            while the <c>TdCommand</c> was in execute-state or there is an outstanding associated
            TdDataReader.
            </exception>
            <exception cref="T:System.ObjectDisposedException">The <c>TdCommand</c> is closed / disposed.</exception>
            
            <remarks>
            The <see cref="M:Teradata.Client.Provider.TdConnection.BeginTransaction"/> method must be used to create a <c>TdTransaction</c> 
            object. Furthermore, the <see cref="T:Teradata.Client.Provider.TdConnection"/> associated with the TdCommand (Connection property) 
            must be used to create the transaction. The methods used to execute a SQL request will throw an 
            exception if the transaction associated with the command does not match the transaction associated 
            with the connection (Connection property).
            </remarks>
            
            <example>
            The following example starts an explicit transaction.
            
            <code>
            pulic void StartTransaction( TdConnection cn, TdCommand cmd)
            {
                cmd.Connection = cn;
            
                cmd.Transaction = cn.BeginTransaction();
            }
            </code>
            </example>
        </member>
        <member name="P:Teradata.Client.Provider.TdCommand.GeneratedDataBehavior">
            <summary>
            Gets or sets the generated data retrieval behavior.
            </summary>
        </member>
        <member name="P:Teradata.Client.Provider.TdCommand.Request">
            <summary>
            Property that is used to access the _request field.
            </summary>
        </member>
        <member name="P:Teradata.Client.Provider.TdCommand.CommandBehavior">
            <summary>
            Sets the internal _commandBehavior field and also changes state (Prepared vs. UnPrepared) if 
            CommandBehavior is changed.
            </summary>
        </member>
        <member name="P:Teradata.Client.Provider.TdCommand.InternalCommandTimeoutMillis">
            <summary>
            A CommandTimeout of zero is mapped to Infinite. 
            </summary>
        </member>
        <member name="P:Teradata.Client.Provider.TdCommand.EnableUnicodeEncoding">
            <summary>
            Enable Unicode encoding for the request.
            </summary>
        </member>
        <member name="P:Teradata.Client.Provider.TdCommand.IsPrepared">
            <summary>
            Gets and Sets the CommandText Prepared State.
            </summary>
        </member>
        <member name="T:Teradata.Client.Provider.TdCommandBuilder">
             <summary>
             The TdCommandBuilder generates DML statements (UPDATE, INSERT and DELETE) which are used 
             by TdDataAdapter. The TdDataAdapter applies changes to a DataSet (or DataTable) back to 
             the Teradata Database.
             </summary>
             
             <remarks>
             <para>TdCommandBuilder can generate DML (UPDATE, DELETE and INSERT) statements 
             for a single table SELECT statement. TdCommandBuilder uses the SelectCommand 
             property of the associated TdDataAdapter to retrieve column information. Later, 
             column information is used to generate UPDATE, DELETE or INSERT statements. 
             The target-row for an UPDATE or a DELETE statement is identified by The WHERE 
             clause. </para>
             <para></para>
             <para>If it is included in the SELECT statement, the TdCommandBuilder will use 
             the primary key column(s) to uniquely identify the target-row for an UPDATE or 
             a DELETE statement. Otherwise, all columns returned by the SELECT statement are 
             added to the WHERE clause</para>
             <para></para>
             <para>TdCommandBuilder will register as a listener for RowUpdating events 
             generated by the associated TdDataAdapter (TdCommandBuilder.DataAdapter property). 
             TdCommandBuilder will generate a new DML statement and set the TdRowUpdatingEventArgs.
             Command property. DML statements are generated based on the columns that are changed 
             (UPDATE) in an updated row or columns that are inserted (INSERT) into a brand new row 
             (TdRowUpdatingEventArgs.Row). Therefore, UPDATE and INSERT statements are generated 
             for each RowUpdating event while the DELETE statement is static until the next call to 
             TdCommandBuilder.RefreshSchema method.</para>
             <para></para>
             <para>You should call TdCommandBuilder.RefreshSchema if the SelectCommand property 
             of the associated TdDataAdapter (TdCommandBuilder.DataAdapter property) has changed. 
             RefreshSchema method updates the column information used to generate UPDATE, DELETE 
             and INSERT statements in addition to updating the TdConnection and TdTransaction 
             used for the Update. </para>
             </remarks>
             <example>
             <code>
             public void DisplayUpdateCustomersTable(String connectionString, String commandText)
            {
                TdConnection cn = new TdConnection(connectionString);
                  
                try
                {
                // Open a connection to Teradata
                cn.Open();
                 
                // Create a new adapter.
                TdDataAdapter adapter = new TdAdapter(commandText, cn);
                         
                // Create a new command builder to generate DML statements.
                TdCommandBuilder cmdBuilder = new TdCommandBuilder(adapter);
                           
                // Cache the results in a dataset
                DataSet ds = new DataSet();
                adapter.fill(ds, “Call_Log”);
                          
                         
                // Display the table to user using DataGrid or other interfaces
                // Finally apply the changes back to the Teradata
                // Note that TdDataAdapter.UpdateCommand, InsertCommand and 
                // DeleteCommand is generated by TdCommandBuilder.
                adapter.Update(ds, “Call_Log”);
                }
                finally
                {
                 cn.Close();
                }
                
            }
             </code>
             </example>
        </member>
        <member name="M:Teradata.Client.Provider.TdCommandBuilder.#ctor">
            <summary>
            Initializes a new instance of the TdCommandBuilder class.
            </summary>
            <remarks>
            A new instance of TdCommandBuilder class is initialized with the 
            following default property values.
            <list type="table">
            <listheader>
            <term>Property</term>
            <description>Initial Value</description>
            </listheader>
            <item><term>DataAdapter</term>
            <description>null</description></item>
            <item><term>QuotePrefix</term>
            <description>&quot;</description></item>
            <item><term>QuoteSuffix</term>
            <description>&quot;</description></item>
            </list>
            </remarks>
        </member>
        <member name="M:Teradata.Client.Provider.TdCommandBuilder.#ctor(Teradata.Client.Provider.TdDataAdapter)">
            <summary>
            Initializes a new instance of the TdCommandBuilder class.
            </summary>
            <param name="adapter">An instance of TdDataAdapter to attach to and generate TdCommand objects for.</param>
            <remarks>
            A new instance of TdCommandBuilder class is initialized with the 
            following default property values.
            <list type="table">
            <listheader>
            <term>Property</term>
            <description>Initial Value</description>
            </listheader>
            <item><term>DataAdapter</term>
            <description>null</description></item>
            <item><term>QuotePrefix</term>
            <description>&quot;</description></item>
            <item><term>QuoteSuffix</term>
            <description>&quot;</description></item>
            <para></para>
            <para>TdCommandBuilder registers an event handler with adapter.RowUpdating 
            event. TdCommandBuilder will dynamically generate a new TdCommand (CommandText 
            and Parameters properties) for every row that it receives a RowUpdating 
            event for. </para>
            </list>
            </remarks>
        </member>
        <member name="M:Teradata.Client.Provider.TdCommandBuilder.DeriveParameters(Teradata.Client.Provider.TdCommand)">
             <summary>
                 Retrieves parameter information from the Teradata Database and 
                 populates the Parameters collection of the passed in TdCommand object.
             </summary>
             <exception cref="T:System.InvalidOperationException">CommandType property of the 
                 <paramref name="command"/> object is not set to 
                 <see cref="F:System.Data.CommandType.StoredProcedure"/> or 
                 <see cref="F:System.Data.CommandType.Text"/>.
             </exception>
             <exception cref="T:Teradata.Client.Provider.TdException">The Teradata Database generated an error.</exception>
             <remarks>
                 <para>
                     The Data Provider will send a HELP PROCEDURE statement to retrieve the 
                     stored procedure parameter information from the Teradata Database when 
                     <see cref="P:Teradata.Client.Provider.TdCommand.CommandType"/> is set to StoredProcedure and 
                     <see cref="P:Teradata.Client.Provider.TdCommand.CommandText"/> is a Stored Procedure name. 
                     The information is used to populate the command. The parameters collection is populated with 
                     TdParameter objects, one for each stored procedure parameter. TdParameter  
                     Direction, IsNullable, ParameterName, Precision, Scale, Size and TdType properties will
                     be set.
                 </para>
                 <para>
                     When the TdParameter.TdType property is set as a TdType.AnyType, the
                     Precision, Scale and Size are not available.  The TdType.AnyType indicates
                     that the actual TdType and value will be supplied during execution of the stored
                     procedure, enabling selection of a dynamic TdType to the stored procedure.
                 </para>
                 <para>
                     When OUT parameter types are defined as TdType.AnyType, the parameter information
                     ordinarily supplied by the HELP PROCEDURE statement must be supplied in the
                     parameter collection by the program. <see cref="P:Teradata.Client.Provider.TdParameter.SecondaryTdType"/> must
                     be defined to indicate the actual TdType supplied during execution
                     of the stored procedure.  The Precision, Scale, Size and Value must also be supplied
                     additionally if applicable.
                 </para>
                 <para>
                     The Data Provider will Prepare the command when <see cref="P:Teradata.Client.Provider.TdCommand.CommandType"/> is set to 
                     Text. The <see cref="P:Teradata.Client.Provider.TdCommand.Parameters"/> properties is populated from the Metadata.
                     CommandType.Text must not be used with CALL statements.
                 </para>
             </remarks>
             <example>
             The following example illustrates setting up a parameter collection, given the following
             definition of an external stored procedure:
             <code>REPLACE PROCEDURE xspAnyType02(IN param2 INTEGER, OUT result2 TD_ANYTYPE)</code>
             <code>
             public static void DeriveTdAnyTypeParameters(TdCommand myCommand) 
             {
                 myCommand.CommandType = CommandType.StoredProcedure;
                 TdCommandBuilder.DeriveParameters(myCommand);
                 
                 Debug.Assert(2 == myCommand.Parameters.Count);
                 Debug.Assert(ParameterDirection.Input == myCommand.Parameters[0].Direction);
                 Debug.Assert(TdType.Integer == myCommand.Parameters[0].TdType);
                 Debug.Assert(ParameterDirection.Output == myCommand.Parameters[1].Direction);
                 Debug.Assert(TdType.AnyType == myCommand.Parameters[1].TdType);
            
                 myCommand.Parameters[0].Value = 20;
            
                 myCommand.Parameters[1].SecondaryTdType = TdType.VarChar;
                 myCommand.Parameters[1].Size = 20;
                 
                 myCommand.ExecuteReader();
                 Console.WriteLine("Result is {0}", myCommand.Parameters[1].Value);
             }
             </code>
             </example>
             <param name="command">The TdCommand object to derive parameters. </param>
        </member>
        <member name="M:Teradata.Client.Provider.TdCommandBuilder.GetDeleteCommand">
             <summary>
             Gets the TdCommand object with the required CommandText and Parameters properties 
             to delete a row from a Teradata table.
             </summary>
             <returns>A TdCommand object with required CommandText property and Parameters collection 
             properly set for a delete operation.</returns>
             <exception cref="T:System.InvalidOperationException">The DataAdapter property is not set, SelectCommand of 
               the associated TdDataAdapter is not set or there is no TdConnection associated with 
               DataAdapter.SelectCommand.
             </exception>
             <exception cref="T:System.ObjectDisposedException">The TdCommandBuilder is closed / disposed.</exception>
            <remarks>
            <para>The invocation of the GetDeleteCommand method can result in one or more calls to 
            the Teradata Database to retrieve metadata (Column and Table information). The metadata is 
            cached in order to minimize roundtrips to the Teradata Database. The cache is purged only 
            when the DataAdapter property is set or the Refresh method is called</para>
            <para></para>
            <para>The TdCommand object returned will contain the DELETE statement required to delete a 
            row from the table specified in DataAdapter.SelectCommand.CommandText property. The 
            DataAdapter.SelectCommand.CommandText must be a single table SELECT statement. The 
            TdCommandBuilder cannot generate a DELETE statement for a SELECT statement that contains 
            implicit or explicit Joins.</para>
            </remarks>
        </member>
        <member name="M:Teradata.Client.Provider.TdCommandBuilder.GetInsertCommand">
             <summary>
             Gets the TdCommand object with the required CommandText and Parameters properties 
             to insert a row. 
             </summary>
             <returns>A TdCommand object with required CommandText property and Parameters collection 
             properly set for a insert operation.</returns>
             <exception cref="T:System.InvalidOperationException">The DataAdapter property is not set, SelectCommand of the associated TdDataAdapter is not set or No TdConnection is associated with DataAdapter.SelectCommand</exception>
            <exception cref="T:System.ObjectDisposedException">The TdCommandBuilder is closed / disposed.</exception>
            <remarks>
            <para>The invocation of GetInsertCommand method can result in one or more calls to the Teradata 
            Database to retrieve metadata (Column and Table information). The metadata is cached in order to 
            minimize roundtrips to Teradata Database. The cache is purged only when the DataAdapter 
            property is set or the Refresh method is called</para>
            <para></para>
            <para>The TdCommand object returned will contain the INSERT statement required to insert a 
            row into the table specified in DataAdapter.SelectCommand.CommandText property. The 
            DataAdapter.SelectCommand.CommandText must be a single table SELECT statement. The 
            TdCommandBuilder cannot generate a INSERT statement for a SELECT statement that contains 
            implicit or explicit Joins</para>
            </remarks>
        </member>
        <member name="M:Teradata.Client.Provider.TdCommandBuilder.GetUpdateCommand">
             <summary>
                 Gets the TdCommand object with the required CommandText and parameters properties to 
                 update a row.
             </summary>
             <returns>
                 Returns a TdCommand object with required CommandText property and parameters collection 
                 properly set for a update operation.
             </returns>
             <exception cref="T:System.InvalidOperationException">
                 The DataAdapter property is not set, SelectCommand of the associated TdDataAdapter is not 
                 set or No TdConnection is associated with DataAdapter.SelectCommand.
            </exception>
            <exception cref="T:System.ObjectDisposedException">The TdCommandBuilder is closed / disposed.</exception>
            <remarks>
            <para>
                 The invocation of GetUpdateCommand method can result in one or more calls to Teradata 
                 Database to retrieve metadata (column and table information). The metadata is cached in 
                 order to minimize roundtrips to Teradata Database. The cache is purged only when the 
                 DataAdapter property is set or the Refresh method is called.
            </para>
            <para></para>
            <para>
                 The TdCommand object returned will contain the UPDATE statement required to update a 
                 row in the table specified in DataAdapter.SelectCommand.CommandText property. The 
                 DataAdapter.SelectCommand.CommandText must be a single table SELECT statement. The 
                 TdCommandBuilder cannot generate an UPDATE statement for a SELECT statement that contains 
                 implicit or explicit joins.
            </para>
            </remarks>
        </member>
        <member name="M:Teradata.Client.Provider.TdCommandBuilder.RefreshSchema">
             <summary>
             Retrieves the metadata used to generate DML (INSERT, UPDATE and DELETE) statements.
             </summary>
             <exception cref="T:System.InvalidOperationException">
                 The DataAdapter property is not set, SelectCommand of the associated TdDataAdapter 
                 is not set or no TdConnection is associated with DataAdapter.SelectCommand.
             </exception>
             <exception cref="T:System.ObjectDisposedException">
                 The TdCommandBuilder is closed/disposed.
             </exception>
            <remarks>
                 The invocation of RefreshSchema method can result in one or more calls to 
                 Teradata Database to retrieve metadata (Column and Table information). The  
                 metadata is cached in order to minimize roundtrips to Teradata Database. The  
                 cache is purged only when the DataAdapter property is set or the RefreshSchema  
                 method is called. Therefore, you should call RefreshSchema when there are changes the 
                 to the SelectCommand property of associated TdDataAdapter.
            </remarks>
        </member>
        <member name="M:Teradata.Client.Provider.TdCommandBuilder.QuoteIdentifier(System.String)">
            <summary>
                Returns a properly formatted identifier by properly escaping imbedded quotes.
            </summary>
            <remarks>
                This method supports different prefix and suffix values, but Teradata does not 
                support different values such as [ and ]. <see cref="P:Teradata.Client.Provider.TdCommandBuilder.QuotePrefix"/> and 
                <see cref="P:Teradata.Client.Provider.TdCommandBuilder.QuoteSuffix"/> are both equal and only permit setting the values
                to the double quote character value.
            </remarks>
            <exception cref="T:System.ArgumentNullException">The <paramref name="unquotedIdentifier"/> is null.</exception>
            <param name="unquotedIdentifier">Unquoted identifier to escape imbedded quotes.</param>
            <returns>The quoted identifier.</returns>
        </member>
        <member name="M:Teradata.Client.Provider.TdCommandBuilder.UnquoteIdentifier(System.String)">
            <summary>
                Returns the unquoted form of the identifier by unescaping any imbedded quotes.
            </summary>
            <remarks>
                This method supports different prefix and suffix values, but Teradata does not 
                support different values such as [ and ]. <see cref="P:Teradata.Client.Provider.TdCommandBuilder.QuotePrefix"/> and 
                <see cref="P:Teradata.Client.Provider.TdCommandBuilder.QuoteSuffix"/> are both equal and only permit setting the values
                to the double quote character value.
            </remarks>
            <exception cref="T:System.ArgumentNullException">The <paramref name="quotedIdentifier"/> is null.</exception>
            <param name="quotedIdentifier">The quoted identifier to unescape imbedded quotes.</param>
            <returns>The unquoted identifier.</returns>
        </member>
        <member name="P:Teradata.Client.Provider.TdCommandBuilder.ObjectId">
            <summary>
            Gets the Instance Object Identifier.
            </summary>
        </member>
        <member name="P:Teradata.Client.Provider.TdCommandBuilder.DataAdapter">
            <summary>
            Gets or Sets the associated TdDataAdapter object.
            </summary>
            <value>An instance of TdDataAdapter class. The default value is null.</value>
            <exception cref="T:System.ObjectDisposedException">The TdCommandBuilder is closed / disposed.</exception>
            <remarks>When DataAdapter property is set, TdCommandBuilder will register with 
            the TdDataAdapter object for RowUpdating events. It is this association using RowUpdating 
            event that enables TdCommandBuilder to generate UPDATE, DELETE and INSERT SQL statements 
            and correctly map the DataTable columns to the Teradata Columns. TdCommandBuilder will 
            also generate parameters associated with all DML statements</remarks>
        </member>
        <member name="P:Teradata.Client.Provider.TdCommandBuilder.QuotePrefix">
            <summary>
            Gets the beginning character to use when specifying Teradata Database object names.
            </summary>
            <remarks>
            Enclosing Teradata Database object names in QUOTATION MARK character (U+0022) greatly 
            increases the valid set of characters for defining names.
            </remarks>
        </member>
        <member name="P:Teradata.Client.Provider.TdCommandBuilder.QuoteSuffix">
            <summary>
            Gets the ending character to use when specifying Teradata Database object names.
            </summary>
            <remarks>
            Enclosing Teradata Database object names in QUOTATION MARK character (U+0022) greatly 
            increases the valid set of characters for defining names.
            </remarks>
        </member>
        <member name="T:Teradata.Client.Provider.TdConnection">
             <summary>TdConnection class represents a connection or session to Teradata. 
             It is used to specify the session characteristics such as Session Character Set or User Id when
             including a <see cref="P:Teradata.Client.Provider.TdConnection.ConnectionString"/> in the constructor.
             </summary>
             
             <remarks>
             Represents a public connection object to Teradata. See ADO.NET documentation on 
             implementation requirements. It implements <see cref="T:System.Data.IDbConnection"/> which is part
             of the ADO.NET specification. TdConnection derives from the Component class so that it can
             eventually be used on a design surface (e.g. Visual Studio .NET). Also note that the Component is
             marshaled by reference which indicates TdConnection also will be marshaled by reference.
             <para></para>
             <para>
             TdConnection is a Component and therefore implements the <see cref="T:System.IDisposable"/> interface. It is
             highly recommended that <see cref="M:Teradata.Client.Provider.TdConnection.Dispose(System.Boolean)"/> or <see cref="M:Teradata.Client.Provider.TdConnection.Close"/> be 
             called before an instance of this class is released for garbage collection. Garbage collection is 
             not deterministic and therefore valuable Teradata resources (i.e. session) might not be released 
             immediately. Also TdConnection.Dispose or TdConnection.Close returns the Teradata session back to 
             the pool if connection pooling is enabled. See 
             <see cref="P:Teradata.Client.Provider.TdConnection.ConnectionString"/> for details on 
             connection pooling.
             </para>
             <para></para>
             <para>
             TdConnection also allows for explicit transactions via the <see cref="M:Teradata.Client.Provider.TdConnection.BeginTransaction"/> 
             method.
             </para>
             </remarks>
             <example>
             The following example creates a TdConnection class and opens a session to Teradata. 
             The "Show Table Customers" SQL statement is executed and the result is assigned to 
             the customers variable.
             <para></para>
             <code>
             class Example
             {
                static void Main(String[] args)
                {
                   TdConnection cn = null;
            
                   try
                   {
                      cn = new TdConnection("Data Source=Teradata1;User Id=ab;Password=ab;");
                      cn.Open();
            			
                      TdCommand cmd = new TdCommand("Show Table Customers", cn);
            
                      String customers = (String) cmd.ExecuteScalar();
            
                      cmd.Dispose();
                   }
                   catch(TdException e)
                   {
                      Debug.WriteLine(e.Message);
                   }
                   finally
                   {
                      if (null != cn)
                      {
                         cn.Close();
                      }
                   }
                }
             }
            
             </code>
             </example>
             <seealso cref="T:Teradata.Client.Provider.TdCommand"/>
             <seealso cref="T:Teradata.Client.Provider.TdDataReader"/>
             <seealso cref="T:Teradata.Client.Provider.TdDataAdapter"/>
        </member>
        <member name="M:Teradata.Client.Provider.TdConnection.#ctor">
            <summary>
            Initializes a new instance of <see cref="T:Teradata.Client.Provider.TdConnection"/>.
            </summary>
            <remarks>
            A new instance of TdConnection class is initialized with the followiing properties values:
            <list type="table">
            <listheader>
            <term>Property</term>
            <description>Initial Value</description>
            </listheader>
            <item>
            <term>ConnectionString</term>
            <description>empty string</description>
            </item>
            <item>
            <term>ConnectionTimeout</term>
            <description>20</description>
            </item>
            <item>
            <term>Database</term>
            <description>empty string</description>
            </item>
            <item>
            <term>DataSource</term>
            <description>empty string</description>
            </item>
            <item>
            <term>ServerVersion</term>
            <description>empty string</description>
            </item>
            <item>
            <term>State</term>
            <description>System.Data.ConnectionState.Closed</description>
            </item>
            </list>        
            </remarks>
            <example>
            The following example creates a new instance of the TdConnection class, 
            sets the ConnectionString property and opens a connection to the Teradata database.
            <code>
            public TdConnection CreateConnection()
            {
               TdConnection cn = new TdConnection();
                
               cn.ConnectionString = "Data Source=Teradata1;User Id=ca;Password=ca;";
               
               cn.Open();
               
               return cn;
            }
            </code>
            </example>
        </member>
        <member name="M:Teradata.Client.Provider.TdConnection.#ctor(System.String)">
             <summary>
             Initializes a new instance of <see cref="T:Teradata.Client.Provider.TdConnection"/> given a connection string.
             </summary>
             <remarks>
             A new instance of the TdConnection class is created. The input parameter connectionString is 
             validated and properties such as <see cref="P:Teradata.Client.Provider.TdConnection.Database"/> and 
             <see cref="P:Teradata.Client.Provider.TdConnection.DataSource"/> are set to the corresponding ConnectionString 
             initial values.
             <list type="table">
             <listheader>
             <term>Property</term>
             <description>Initial Value</description>
             </listheader>
             <item>
             <term>ConnectionString</term>
             <description>Input parameter connectionString</description>
             </item>
             <item>
             <term>ConnectionTimeout</term>
             <description>20 or value supplied in connectionString</description>
             </item>
             <item>
             <term>Database</term>
             <description>empty string or value supplied in connectionString</description>
             </item>
             <item>
             <term>DataSource</term>
             <description>empty string or value supplied in connectionString</description>
             </item>
             <item>
             <term>ServerVersion</term>
             <description>empty string</description>
             </item>
             <item>
             <term>State</term>
             <description>System.Data.ConnectionState.Closed</description>
             </item>
             </list>
             </remarks>
             <exception cref="T:System.ArgumentException">An invalid connection string is passed in. 
             See <see cref="T:Teradata.Client.Provider.TdDataReader"/> for valid attribute names and values.
             </exception>
             <example>
             The following example creates an instance of the TdConnection class, 
             sets the <see cref="P:Teradata.Client.Provider.TdConnection.ConnectionString"/> property and opens a connection 
             to the Teradata database.
             <para></para>
             <code>
             public TdConnection CreateConnection()
             {
                 TdConnection cn = 
                        new TdConnection(“Data Source=Teradata1;User Id=ab;Password=ab;”);
            
                 cn.Open();
            
                 return cn;
             }
             </code>
             </example>
             <param name="connectionString">Identifies session attributes like User Id and Password.</param>
        </member>
        <member name="M:Teradata.Client.Provider.TdConnection.ChangeDatabase(System.String)">
            <summary>
            Changes the default database associated with this Teradata connection.
            </summary>
            <exception cref="T:System.ArgumentException">Input parameter value is invalid.  See remarks.</exception>
            <exception cref="T:System.InvalidOperationException">TdConnection is not in the open state.</exception>
            <exception cref="T:Teradata.Client.Provider.TdException">Teradata returned an error.</exception>
            <remarks>
            The Data Provider generates and executes a DATABASE command (See Teradata documentation) when the 
            connection is in the open state. An ArgumentException is thrown if the input parameter value is either 
            null, an empty string or made up of all space characters.
            <para></para>
            <para>
            Note that if a transaction (<see cref="T:Teradata.Client.Provider.TdTransaction"/>) is active, you are required to 
            commit the transaction after the ChangeDatabase method returns control back to the
            application. Otherwise Teradata will return a 3932 error code. This error code indicates
            a DDL statement is required to be the last statement within an explicit transaction.
            </para>
            </remarks>
            <param name="databaseName">The default database name</param>
        </member>
        <member name="M:Teradata.Client.Provider.TdConnection.Open">
             <summary>
                 Opens a Teradata session using the attributes specified via the 
                 <see cref="P:Teradata.Client.Provider.TdConnection.ConnectionString"/>.
             </summary>
             <exception cref="T:System.InvalidOperationException">
                 TdConnection is not in the Closed state.
             </exception>
             <exception cref="T:Teradata.Client.Provider.TdException">
                 The Teradata Database returned an error or the .NET Data Provider for Teradata returned an error.
             </exception>
             <remarks>
                 If connection pooling is turned off, <see cref="T:Teradata.Client.Provider.TdConnection"/> attempts to 
                 establish a new Teradata session. Otherwise, the <see cref="T:Teradata.Client.Provider.ConnectionPool"/>
                 either returns an existing Teradata Session or creates a new Teradata session 
                 if the number of pooled sessions is less than Max Pooled Size.
             <para></para>
             <para>
                 If the connection string has a Database attribute, the 
                 <see cref="M:Teradata.Client.Provider.TdConnection.ChangeDatabase(System.String)"/> method is called immediately after a 
                 session is opened to Teradata. This will result in additional roundtrips to the
                 Teradata Database.  We strongly recommend that you modify the User (See Teradata 
                 manual for information on Create User or Alter User) and add a default database.
                 This will enhance the overall performance of opening a connection to the 
                 Teradata Database. Please note that <strong>ChangeDatabase</strong> method is 
                 called independently of whether the connection pooling is turned on or off and
                 errors generated as a result of an invalid supplied ConnectionString Database
                 attribute are ignored.
             </para>
             <para></para>
             <para>
                 If the password has expired and pooling is turned off, then an 
                 <see cref="E:Teradata.Client.Provider.TdConnection.InfoMessage"/> event is triggered. The application should 
                 respond to the event by:
             <para></para>
             <para>
                1) Change the password
             </para>
             <para>
                2) Close the TdConnection
             </para>
             <para>
                3) Open the TdConnection
             </para>
             <para></para>
             <para>
                 Alternatively, the application can set the ‘New Password’ attribute in the 
                 connection string.
             </para>
             </para>
             </remarks>
             <example> The following example creates a <see cref="T:Teradata.Client.Provider.TdConnection"/> class and illustrates 
             the use of Open and Close methods.
             <code>
             public Boolean TestConnectivity(String connectionString)
             {	
                Boolean connectivity = false;
            
                TdConnection cn = new  TdConnection(connectionString);;
            	
                try
                {
                   cn.Open();
                   connectivity = true;
                }
                catch(Exception e)
                {
                   connectivity = false;
                }
            
                cn.Close();
                return connectivity;
             }
             </code>
             </example>
        </member>
        <member name="M:Teradata.Client.Provider.TdConnection.Close">
             <summary>
                 Closes the connection to Teradata. 
             </summary>
             <remarks>
             <para>
                 If the connection is in closed state, the method simply returns. However, if the connection 
                 is open, the Close method either disconnects (logs off) from Teradata or returns the Teradata 
                 session back to the pool. In either case, any active explicit transaction is rolled back by 
                 Teradata or the .NET Data Provider for Teradata.  See <see cref="E:Teradata.Client.Provider.TdConnection.StateChange"/> 
                 event for additional information about events generated by the Close method.
             </para>
             <para>
                 Before calling Close, it is important that the command object is closed 
                 (<see cref="M:Teradata.Client.Provider.TdCommand.Dispose(System.Boolean)"/>) first before closing the connection to Teradata.  However,
                 if the Close is called before the command object is closed, the provider will perform 
                 the following actions:
             <list type="bullet">
             <item>
                 <description>
                     The request will be aborted if Teradata is actively processing the request.
                 </description>
             </item>
             <item>
                 <description>
                     The Teradata spool file associated with the request will be deleted if Teradata has
                     completed processing the request.
                 </description>
             </item>
             <item>
                 <description>The provider will perform cleanup of internal objects.</description>
             </item>
             </list>
             </para>
             <para>
                 With the introduction of <a href="RedriveAndRecoverableNetworkProtocol.html">Redrive 
                 and Recoverable Network Protocol</a>, the <b>TdConnection.Close</b> may be used to cancel a
                 reconnection that may not be completed.
             </para>
             <para>
                 If the <see cref="P:Teradata.Client.Provider.TdConnection.State"/> is <c>Connecting</c> while <b>TdConnection.Close</b>
                 is executed, the reconnection will be scheduled for cancellation. During reconnection
                 the acknowledgement of the <b>TdConnection.Close</b> may be delayed a maximum of period 
                 of time defined in <see cref="P:Teradata.Client.Provider.TdConnectionStringBuilder.RecoveryMaximumInterval"/>.
             </para>
             </remarks>
             <example>
             The following example creates a <see cref="T:Teradata.Client.Provider.TdConnection"/> class and illustrates the use of Open and Close methods:
             <para></para>
             <code>
             public Boolean TestConnectivity(String connectionString)
             {	
                 Boolean connectivity = false;
            
                 TdConnection cn = new  TdConnection(connectionString);;
            
                 try
                 {
                    cn.Open();
                    connectivity = true;
                 }
                 catch(Exception e)
                 {
                    connectivity = false;
                 }
            
                 cn.Close();
            
                 return connectivity;	
             }
             </code>
             
             </example>
        </member>
        <member name="M:Teradata.Client.Provider.TdConnection.BeginTransaction">
             <summary>
             Begins an explicit transaction. Applications call <see cref="M:Teradata.Client.Provider.TdTransaction.Commit"/> to commit 
             the transaction or <see cref="M:Teradata.Client.Provider.TdTransaction.Rollback"/> to rollback the transaction. 
             The Teradata session goes back into an auto-commit mode after the Commit or the Rollback
             method is called.
             </summary>
             <returns>TdTransaction representing the explicit transaction.</returns>
             <example>
             The following example creates a <see cref="T:Teradata.Client.Provider.TdConnection"/>, a <see cref="T:Teradata.Client.Provider.TdCommand"/> 
             and a <see cref="T:Teradata.Client.Provider.TdTransaction"/> class. It illustrates how to open an explicit transaction, 
             perform DML operations and commit the result.
             <code>
             public void UpdateCustomerID(Int32 newId, Int32 oldId, String connectionString)
             {
                TdConnection cn = null;
                TdTransaction tran = null;
                try
                {
                    // Open a session to Teradata.
                    cn = new TdConnection(connectionString);
                    cn.Open();
            
                    // Begin an explicit transaction.
                    tran = cn.BeginTransaction();
             
                    // Create a command to execute DML statements.  
                    TdCommand cmd = cn.CreateCommand();
                    cmd.Transaction = tran;
            
                    // Update the customer table.
                    cmd.CommandText = String.Format(“Update Customer Set CustomerID = ‘{0}’ "
                                                    “where CustomerID = ‘{1}’”, newId, oldId);
                    cmd.ExecuteNonQuery();
            
                    // Update the order table.
                    cmd.CommandText = String.Format(“Update Order Set CustomerID = ‘{0}’ “
                                                   “where CusomerID = ‘{1}’”, newId, oldId);
                    cmd.ExecuteNonQuery();
            
                    // Commit the transaction.
                    tran.Commit();
                    tran.Dispose();
                    tran = null;
            
                    // Close the command.
                    cmd.Dispose();
                }
                catch(TdException e)
                {
                    if (null != tran)
                    {
                        tran.Rollback();
                        tran.Dispose();
                        tran = null;
                    }
                }
                finally
                {
                    if (null != cn)
                    {
                        cn.Close();
                        cn = null;
                    }
                }
             }
             </code>
             </example>
        </member>
        <member name="M:Teradata.Client.Provider.TdConnection.BeginTransaction(System.Data.IsolationLevel)">
            <summary>
            Begins an explicit transaction.
            </summary>
            <remarks>
            By default a <see cref="T:Teradata.Client.Provider.TdConnection"/> operates in auto-commit mode. This simply means that all SQL commands 
            are immediately committed irrespective of the Session Mode (See Teradata SQL manuals). 
            <para></para>
            <para>
            To wrap two or more SQL statements in one transaction, call BeginTransaction to start an explicit transaction. 
            Use the <see cref="T:Teradata.Client.Provider.TdTransaction"/> object to Commit or Rollback the transaction.
            </para>
            </remarks>
            <exception cref="T:System.ArgumentOutOfRangeException">Teradata does not directly support IsolationLevels. 
            Therefore, the only acceptable value is System.Data.IsolationLevel.Serializable.</exception>
            <exception cref="T:System.InvalidOperationException">There is an open transaction and Teradata does not 
            support parallel transactions or <see cref="T:Teradata.Client.Provider.TdConnection"/> is in the Closed state.</exception>
            <returns>BeginTransaction returns an instance of the <see cref="T:Teradata.Client.Provider.TdTransaction"/> class which 
            can be used to explicitly commit or rollback a transaction.</returns>
            <param name="isolationLevel">Isolation Level</param>
        </member>
        <member name="M:Teradata.Client.Provider.TdConnection.BeginTransaction(Teradata.Client.Provider.TdQueryBand)">
            <summary>
            Begins an explicit transaction.
            </summary>
            <param name="queryBand">The Query Bands that will be defined at the Transaction Level.</param>
            <exception cref="T:Teradata.Client.Provider.TdException">The Teradata Database does not support Query Bands.</exception>
            <exception cref="T:System.InvalidOperationException">There is an open transaction and Teradata does not 
            support parallel transactions or <see cref="T:Teradata.Client.Provider.TdConnection"/> is in the Closed state.</exception>
            <remarks>
            <para>
            The <paramref name="queryBand"/> parameter contains the Query Bands that will be defined at the 
            Transaction level.  For more information refer to <a href="QueryBandOverview.html">Query Banding and Trusted Sessions</a>
            in the Developer's Guide, and <see cref="M:Teradata.Client.Provider.TdConnection.BeginTransaction(System.Data.IsolationLevel,Teradata.Client.Provider.TdQueryBand)"/>.
            </para>
            
            <para>
            Refer to <see cref="M:Teradata.Client.Provider.TdConnection.BeginTransaction(System.Data.IsolationLevel,Teradata.Client.Provider.TdQueryBand)"/> for more information.
            </para>
            </remarks>
            <seealso cref="T:Teradata.Client.Provider.TdQueryBand"/>
        </member>
        <member name="M:Teradata.Client.Provider.TdConnection.BeginTransaction(System.Data.IsolationLevel,Teradata.Client.Provider.TdQueryBand)">
            <summary>
            Begins an explicit transaction.
            </summary>
            <param name="isolationLevel">Isolation Level</param>
            <param name="queryBand">The Query Bands that will be defined at the Transaction Level.</param>
            <exception cref="T:System.ArgumentOutOfRangeException">Teradata does not directly support IsolationLevels. 
            Therefore, the only acceptable value is System.Data.IsolationLevel.Serializable.</exception>
            <exception cref="T:System.InvalidOperationException">There is an open transaction and Teradata does not support 
            parallel transactions or <see cref="T:Teradata.Client.Provider.TdConnection"/> is in the Closed state.</exception>
            <exception cref="T:Teradata.Client.Provider.TdException">The Teradata Database does not support Query Bands.</exception>
            <remarks>
            <para>
            The <paramref name="queryBand"/> parameter contains the Query Bands that will be defined at the Transaction
            level.  For more information refer to <a href="QueryBandOverview.html">Query Bands and Trusted Session</a> in the
            Developer's Guide.
            </para>
            
            <para>
            The Teradata Database supports Query Banding beginning with the <strong>12.0</strong> release.  
            If an attempt is made to use Query Banding when connected to a Teradata Database prior 
            to 12.0, a <see cref="T:Teradata.Client.Provider.TdException"/> will be thrown.
            </para>
            
            <para>
            When the transaction is closed, the associated Transaction level Query Bands are no longer
            valid.
            </para>
            
            <para>
            By default a <see cref="T:Teradata.Client.Provider.TdConnection"/> operates in auto-commit mode. This simply means that all SQL commands 
            are immediately committed irrespective of the Session Mode (See Teradata SQL manuals). 
            </para>
            
            <para>
            To wrap two or more SQL statements in one transaction, call BeginTransaction to start an explicit transaction. 
            Use the <see cref="T:Teradata.Client.Provider.TdTransaction"/> object to Commit or Rollback the transaction.
            </para>
            
            <para>
            The Query Bands well be defined at the Transaction Level.  If a Query Band is defined at both
            the Connection and Transaction levels, the Query Band at the Transaction Level has precedence.
            </para>
            
            </remarks>
            <seealso cref="T:Teradata.Client.Provider.TdQueryBand"/>
        </member>
        <member name="M:Teradata.Client.Provider.TdConnection.CreateCommand">
            <summary>
            Creates and returns a <see cref="T:Teradata.Client.Provider.TdCommand"/> object.
            </summary>
            <remarks>
            This method creates and returns a <see cref="T:Teradata.Client.Provider.TdCommand"/> object. The <see cref="P:Teradata.Client.Provider.TdCommand.Connection"/> 
            property is set to reference the <see cref="T:Teradata.Client.Provider.TdConnection"/> object.
            </remarks>
            <returns>TdCommand</returns>
        </member>
        <member name="M:Teradata.Client.Provider.TdConnection.GetSchema">
            <summary>
            Returns the <a href="SchemaMetaDataCollectionsCollection.html">MetaDataCollections Schema collection</a>.
            </summary>
            
            <returns>A <see cref="T:System.Data.DataTable"/> containing MetaDataCollections schema collection information.</returns>
            
            <remarks>
            <para>
            Common and Provider-Specific collections are documented in <a href="SchemaCollectionsOverview.html">Schema Collections</a>
            section of the Developers Guide.
            </para>
            </remarks>
            
            <seealso cref="M:System.Data.Common.DbConnection.GetSchema">DbConnection.GetSchema</seealso>
        </member>
        <member name="M:Teradata.Client.Provider.TdConnection.GetSchema(System.String)">
            <summary>
            Returns the requested schema collection information.        
            </summary>
            
            <param name="collectionName">The name of the Schema Collection to return.</param>
            
            <returns>A <see cref="T:System.Data.DataTable"/> that contains schema collection information.</returns>
            
            <exception cref="T:Teradata.Client.Provider.TdException">Teradata Database returned an error or the .NET Data Provider 
            for Teradata detected an error.</exception>
            
            <remarks>
            <para>This method will return <a href="SchemaMetaDataCollectionsCollection.html">MetaDataCollections schema collection</a> when 
            <paramref name="collectionName"/> is <c>null</c> or <c>Empty</c>.
            </para>
            <para>
            Common and Provider-Specific collections are documented in <a href="SchemaCollectionsOverview.html">Schema Collections</a>
            section of the Developers Guide.
            </para>
            </remarks>
            
            <seealso cref="M:System.Data.Common.DbConnection.GetSchema">DbConnection.GetSchema</seealso>
        </member>
        <member name="M:Teradata.Client.Provider.TdConnection.GetSchema(System.String,System.String[])">
            <summary>
            Returns the requested schema collection information. The resulting <see cref="T:System.Data.DataTable"/> is  
            filtered to the specified restrictions.
            </summary>
            
            <param name="collectionName">The name of the Schema Collection to return.</param>
            <param name="restrictionValues">A set of restriction values for the requested schema collection.</param>
            
            <returns>A DataTable that contains schema collection information.</returns>
            
            <exception cref="T:Teradata.Client.Provider.TdException">Teradata Database returned an error or the .NET Data Provider 
            for Teradata detected an error.</exception>
            
            <remarks>
            <para>This method will return <a href="SchemaMetaDataCollectionsCollection.html">MetaDataCollections schema collection</a> 
            when <paramref name="collectionName"/> is <c>null</c> or <c>Empty</c>.
            </para>
            <para>
            Common and Provider-Specific collections are documented in <a href="SchemaCollectionsOverview.html">Schema Collections</a>
            section of the Developers Guide. <paramref name="restrictionValues"/> must correspond to the list of Restrictions documented
            in the Developers Guide. 
            </para>
            </remarks>
            
            <seealso cref="M:System.Data.Common.DbConnection.GetSchema">DbConnection.GetSchema</seealso>
        </member>
        <member name="M:Teradata.Client.Provider.TdConnection.ChangeQueryBand(Teradata.Client.Provider.TdQueryBand)">
            <summary>
            The Connection Level Query Bands are modified to those defined in <paramref name="queryBand"/>.
            </summary>
            <param name="queryBand">The Query Bands that will be defined at the Connection Level.</param>
            <exception cref="T:Teradata.Client.Provider.TdException">This version of the Teradata Database does not support Query Banding.</exception>
            <exception cref="T:System.InvalidOperationException">Connection is not open.</exception>
            <exception cref="T:System.ArgumentNullException"><paramref name="queryBand"/> is null.</exception>
            <remarks>
            <para>
            Query Bands are only supported when connecting to a Teradata Database 12.00 or later releases. 
            </para>
            
            <para>
            When this method is called, a "SET QUERY_BAND .. FOR SESSION" statement is submitted to the 
            Teradata Datbase. The "old" settings are removed, and the "new" settings are created. 
            </para>
            
            <para>The Connection Level Query Band is set to NONE when the <paramref name="queryBand"/> input 
            parameter has Zero (<see cref="P:Teradata.Client.Provider.TdQueryBand.Count"/> is equal to zero) Key-Value pairs.</para>
            
            <para>
            If this method is called before <see cref="M:Teradata.Client.Provider.TdConnection.Open"/>, an <see cref="T:System.InvalidOperationException"/>
            will get thrown indicating that the connection is not in an open state.
            </para>
            </remarks>
        </member>
        <member name="P:Teradata.Client.Provider.TdConnection.ObjectId">
            <summary>
            Gets the Instance Object Identifier.
            </summary>
        </member>
        <member name="P:Teradata.Client.Provider.TdConnection.ConnectionString">
             <summary>
             Gets or sets the string used to open a connection to Teradata. The ConnectionString 
             identifies session attributes like User Id, Password, Data Source etc.
             </summary>
             <value>
             Value is a string representing the attributes (e.g. Teradata server name, User Id, 
             and Password) used to open a connection to Teradata. The default value is an empty string.
             </value>
             <exception cref="T:System.ArgumentException">An invalid connection string is entered.</exception>
             <exception cref="T:System.InvalidOperationException"><see cref="T:Teradata.Client.Provider.TdConnection"/> is already in 
             the open state.
             </exception>
             <remarks>
             ConnectionString property is used to set specific Teradata session attributes. The required 
             format for the ConnectionString is: Attribute=Value;Attribute=Value;....
             <para></para>
             <para>
             An example of a typical valid connection string is: Data Source=Teradata1;
             User Id=myName;Password=myPassword;
             </para>
             <para></para>
             <para>
             The attribute name is separated from the value with an equal sign. A semicolon is used to separate 
             Attribute-Value pairs.  The value is required to be enclosed in double quotes (i.e. ") or 
             single quotes when containing a leading space, an equal sign, a leading double quote, a leading single quote, 
             a semicolon or trailing space. These are all valid characters for the value. The value should be enclosed
             in single quotes when containing leading double quotes or conversely it should be enclosed in double quotes
             when containing leading single quotes. The delimiting character (single or double quote) must be doubled every 
             time it occurs within the value.<para/>
             <para></para>
             <para>
             For example given a password "my'pass containing special characters " and '.
             </para>
             <para>
             Applying the above rules to the password will result in '"my''pass' .
             </para>
             <para></para>
             <para>We recommend using <see cref="T:Teradata.Client.Provider.TdConnectionStringBuilder"/> as it applies all the rules mentioned above.
             </para>
             <para>
             An ArgumentException exception is thrown when an error in the connection string is detected. For 
             example, an exception is thrown if an invalid attribute is specified.
             </para>
             <para></para>
             The following table lists all the valid attributes and the corresponding acceptable values:
             <list type="table">
             <listheader>
                 <term>Attribute / Values / Default Value</term>
                 <description>Description</description>
             </listheader>
             <item>
                 <term>
                     Account String
                     <para>Values - 1 to 30 characters String</para>
                     <para>Default Value - Empty String</para>
                 </term>
                 <description> 
                     Please see <see cref="P:Teradata.Client.Provider.TdConnectionStringBuilder.AccountString"/>
                 </description>
             </item>
             <item>
                 <term>
                     Authentication Mechanism
                     <para>Values - 1 to 8 characters String</para>
                     <para>Default Value - Please see the Teradata Security Administration User Manual 
                         discussion on the Teradata Database Generic Security Services Library (TDGSS) 
                         - Managing Network Security
                     </para>
                 </term>
                 <description>
                     Please see <see cref="P:Teradata.Client.Provider.TdConnectionStringBuilder.AuthenticationMechanism"/>
                 </description>
             </item>
             <item>
                 <term>
                     Authentication String
                     <para>Values - String</para>
                     <para>Default Value - Empty String</para>
                 </term>
                 <description>
                     Please see <see cref="P:Teradata.Client.Provider.TdConnectionStringBuilder.AuthenticationString"/>
                 </description>
             </item>
             <item>
                 <term>
                     Command Timeout
                     <para>Values - integer</para>
                     <para>Default Value - 30 seconds</para>
                 </term>
                 <description>
                     Please see <see cref="P:Teradata.Client.Provider.TdConnectionStringBuilder.CommandTimeout"/>
                 </description>
             </item>
             <item>
                 <term>
                     Connection Pooling
                     <para>Values - True or False</para>
                     <para>Default Value - True</para>
                 </term>
                 <description>
                     Please see <see cref="P:Teradata.Client.Provider.TdConnectionStringBuilder.ConnectionPooling"/>
                 </description>
             </item>
             <item>
                 <term>
                     Connection Pooling Timeout
                     <para>Values - integer</para>
                     <para>Default Value - 60 seconds</para>
                 </term>
                 <description>
                     Please see <see cref="P:Teradata.Client.Provider.TdConnectionStringBuilder.ConnectionPoolingTimeout"/>
                 </description>
             </item>
             <item>
                 <term>
                     Connection Timeout
                     <para>Values - integer</para>
                     <para>Default Value - 20 seconds</para>
                 </term>
                 <description>
                     Please see <see cref="P:Teradata.Client.Provider.TdConnectionStringBuilder.ConnectionTimeout"/>
                 </description>
             </item>
             <item>
                 <term>
                     Connect Max Retry Count
                     <para>Values - Int32</para>
                     <para>Default Value - 200</para>
                 </term>
                 <description>
                     Please see <see cref="P:Teradata.Client.Provider.TdConnectionStringBuilder.ConnectMaxRetryCount"/>
                 </description>
             </item>
             <item>
                 <term>
                     Database
                     <para>Values - String</para>
                     <para>Default Value - empty string</para>
                 </term>
                 <description>
                     Please see <see cref="P:Teradata.Client.Provider.TdConnectionStringBuilder.Database"/>
                 </description>
             </item>
             <item>
                 <term>
                     Data Encryption
                     <para>Values - Boolean</para>
                     <para>Default Value - false</para>
                 </term>
                 <description>
                     Please see <see cref="P:Teradata.Client.Provider.TdConnectionStringBuilder.DataEncryption"/>
                 </description>
             </item>
             <item>
                 <term>
                     Data Integrity
                     <para>Values - Boolean</para>
                     <para>Default Value - false</para>
                 </term>
                 <description>
                     Please see <see cref="P:Teradata.Client.Provider.TdConnectionStringBuilder.DataIntegrity"/>
                 </description>
             </item>
             <item>
                 <term>
                     Data Source
                     <para>Values - String</para>
                     <para>Default Value - Empty String</para>
                 </term>
                 <description>
                     Please see <see cref="P:Teradata.Client.Provider.TdConnectionStringBuilder.DataSource"/>
                 </description>
             </item>
             <item>
                 <term>
                     Data Source Dns Entries
                     <para>Values - integer</para>
                     <para>Default Value - undefined</para>
                 </term>
                 <description>
                     Please see <see cref="P:Teradata.Client.Provider.TdConnectionStringBuilder.DataSourceDnsEntries"/>
                 </description>
             </item>
             <item>
                 <term>
                     Enable DateTimeOffset
                     <para>Values - Boolean</para>
                     <para>Default Values - true</para>
                 </term>
                 <description>
                     Please see <see cref="P:Teradata.Client.Provider.TdConnectionStringBuilder.EnableDateTimeOffset"/>
                 </description>
             </item>
             <item>
                 <term>
                     Enable TdDateTime
                     <para>Values - Boolean</para>
                     <para>Default Value - true</para>
                 </term>
                 <description>
                     Please see <see cref="P:Teradata.Client.Provider.TdConnectionStringBuilder.EnableTdDateTime"/>
                 </description>
             </item>
             <item>
                 <term>
                     Enable TdDecimal
                     <para>Values - Boolean</para>
                     <para>Default Value - true</para>
                 </term>
                 <description>
                     Please see <see cref="P:Teradata.Client.Provider.TdConnectionStringBuilder.EnableTdDecimal"/>
                 </description>
             </item>
             <item>
                 <term>
                     Integated Security
                     <para>Values - Boolean</para>
                     <para>Default Value - false</para>
                 </term>
                 <description>
                     Please see <see cref="P:Teradata.Client.Provider.TdConnectionStringBuilder.IntegratedSecurity"/>
                 </description>
             </item>
             <item>
                 <term>
                     Max Decimal Precision
                     <para>Values - integer</para>
                     <para>Default Value - 38</para>
                 </term>
                 <description>
                     Please see <see cref="P:Teradata.Client.Provider.TdConnectionStringBuilder.MaxDecimalPrecision"/>
                 </description>
             </item>
             <item>
                 <term>
                     Max Pool Size
                     <para>Values - integer</para>
                     <para>Default Value - 100</para>
                 </term>
                 <description>
                     Please see <see cref="P:Teradata.Client.Provider.TdConnectionStringBuilder.MaxPoolSize"/>
                 </description>
             </item>
             <item>
                 <term>
                     Min Pool Size
                     <para>Values - integer</para>
                     <para>Default Value - 0</para>
                 </term>
                 <description>
                     Please see <see cref="P:Teradata.Client.Provider.TdConnectionStringBuilder.MinPoolSize"/>
                 </description>
             </item>
             <item>
                 <term>
                     New Password
                     <para>Values - String</para>
                     <para>Default Value - empty string</para>
                 </term>
                 <description>
                     Please see <see cref="P:Teradata.Client.Provider.TdConnectionStringBuilder.NewPassword"/>
                 </description>
             </item>
             <item>
                 <term>
                     Node Down Timeout
                     <para>Values - integer</para>
                     <para>Default Value - 90 seconds</para>
                 </term>
                 <description>
                     Please see <see cref="P:Teradata.Client.Provider.TdConnectionStringBuilder.NodeDownTimeout"/>
                 </description>
             </item>
             <item>
                 <term>
                     Password
                     <para>Values - String</para>
                     <para>Default Value - empty string</para>
                 </term>
                 <description>
                     Please see <see cref="P:Teradata.Client.Provider.TdConnectionStringBuilder.Password"/>
                 </description>
             </item>
             <item>
                 <term>
                     Persist Security Info
                     <para>Values - Y or N</para>
                     <para>Default Value - N</para>
                 </term>
                 <description>
                     Please see <see cref="P:Teradata.Client.Provider.TdConnectionStringBuilder.PersistSecurityInfo"/>
                 </description>
             </item>
             <item>
                 <term>
                     Port Number
                     <para>Values - 1 - 65,535</para>
                     <para>Default Value - 1025</para>
                 </term>
                 <description>
                     Please see <see cref="P:Teradata.Client.Provider.TdConnectionStringBuilder.PortNumber"/>
                 </description>
             </item>
             <item>
                 <term>
                     Profile Name
                     <para>Values - String</para>
                     <para>Default Value - empty string</para>
                 </term>
                 <description>
                     Please see <see cref="P:Teradata.Client.Provider.TdConnectionStringBuilder.ProfileName"/>
                 </description>
             </item>
             <item>
                 <term>
                     Query Band
                     <para>Values - Query Band definitions</para>
                     <para>Default Value - empty TdQueryBand instance</para>
                 </term>
                 <description>
                     Please see <see cref="P:Teradata.Client.Provider.TdConnectionStringBuilder.QueryBand"/>
                 </description>
             </item>
             <item>
                 <term>
                     Read Ahead
                     <para>Values - Boolean</para>
                     <para>Default Value - true</para>
                 </term>
                 <description>
                     Please see <see cref="P:Teradata.Client.Provider.TdConnectionStringBuilder.ReadAhead"/>
                 </description>
             </item>
             <item>
                 <term>
                     Recovery
                     <para>Values - 1) DEFAULT 2) RNP 3) REDRIVE 4) OFF</para>
                     <para>Default Value - DEFAULT</para>
                 </term>
                 <description>
                     Please see <see cref="P:Teradata.Client.Provider.TdConnectionStringBuilder.Recovery"/>
                 </description>
             </item>
             <item>
                 <term>
                     Recovery Command Timeout Override
                     <para>Values - Boolean</para>
                     <para>Default Value - true</para>
                 </term>
                 <description>
                     Please see <see cref="P:Teradata.Client.Provider.TdConnectionStringBuilder.RecoveryCommandTimeoutOverride"/>
                 </description>
             </item>
             <item>
                 <term>
                     Recovery Interval Factor
                     <para>Values - Int32</para>
                     <para>Default Value - 2</para>
                 </term>
                 <description>
                     Please see <see cref="P:Teradata.Client.Provider.TdConnectionStringBuilder.RecoveryIntervalFactor"/>
                 </description>
             </item>
             <item>
                 <term>
                     Recovery Maximum Interval
                     <para>Values - Int32</para>
                     <para>Default Value - 32 seconds</para>
                 </term>
                 <description>
                     Please see <see cref="P:Teradata.Client.Provider.TdConnectionStringBuilder.RecoveryMaximumInterval"/>
                 </description>
             </item>
             <item>
                 <term>
                     Recovery Start Interval
                     <para>Values - Int32</para>
                     <para>Default Value - 2 seconds</para>
                 </term>
                 <description>
                     Please see <see cref="P:Teradata.Client.Provider.TdConnectionStringBuilder.RecoveryStartInterval"/>
                 </description>
             </item>
             <item>
                 <term>
                     Recovery Timeout
                     <para>Values - Int32</para>
                     <para>Default Value - 1200 seconds</para>
                 </term>
                 <description>
                     Please see <see cref="P:Teradata.Client.Provider.TdConnectionStringBuilder.RecoveryTimeout"/>
                 </description>
             </item>
             <item>
                 <term>
                     Response Buffer Size
                     <para>Values - 400 to 1000000</para>
                     <para>Default Value - 64000</para>
                 </term>
                 <description>
                     Please see <see cref="P:Teradata.Client.Provider.TdConnectionStringBuilder.ResponseBufferSize"/>
                 </description>
             </item>
             <item>
                 <term>
                     Restrict to Default Database
                     <para>Values - Boolean</para>
                     <para>Default Value - false</para>
                 </term>
                 <description>
                     Please see <see cref="P:Teradata.Client.Provider.TdConnectionStringBuilder.RestrictToDefaultDatabase"/>
                 </description>
             </item>
             <item>
                 <term>
                     Session Character Set
                         <para>
                             Values - 1) ASCII 2) KANJISJIS_0S (see note below)
                             3) UTF16 or 4) UTF8
                         </para>
                         <para>Default Value - ASCII</para>
                         <para>Note: (0 is zero, not letter O)</para>
                 </term>
                 <description>
                     Please see <see cref="P:Teradata.Client.Provider.TdConnectionStringBuilder.SessionCharacterSet"/>
                 </description>
             </item>
             <item>
                 <term>
                     Session Mode
                         <para>Values - 1) ANSI 2) TERADATA or 3) DEFAULT</para>
                         <para>Default Value - DEFAULT</para>
                 </term>
                 <description>
                     Please see <see cref="P:Teradata.Client.Provider.TdConnectionStringBuilder.SessionMode"/>
                 </description>
             </item>
             <item>
                 <term>
                     Use Enhanced Schema Table
                     <para>Values - Boolean</para>
                     <para>Default Value - true</para></term>
                 <description>
                     Please see <see cref="P:Teradata.Client.Provider.TdConnectionStringBuilder.UseEnhancedSchemaTable"/>
                 </description>
             </item>
             <item>
                 <term>
                     User ID
                         <para>Values - String</para>
                         <para>Default Value - empty string</para>
                 </term>
                 <description>
                     Please see <see cref="P:Teradata.Client.Provider.TdConnectionStringBuilder.UserId"/>
                 </description>
             </item>
             <item>
                 <term>
                     Use XViews
                     <para>Values - Boolean</para>
                     <para>Default Value - true</para>
                 </term>
                 <description>Please see <see cref="P:Teradata.Client.Provider.TdConnectionStringBuilder.UseXViews"/></description>
             </item>
             </list>
             </para>
             </remarks>
             <example> The following example creates an instance of <see cref="T:Teradata.Client.Provider.TdConnection"/> class, sets the 
             <see cref="P:Teradata.Client.Provider.TdConnection.ConnectionTimeout"/> property and opens the connection to Teradata Database.
             <code>
             public TdConnection CreateTdConnection()
             {
                 TdConnection cn = new TdConnection();
            
                 cn.ConnectionString = “Data Source=Teradata1;User Id=ca;Password=ca;”;
            
                 cn.ConnectionTimeout = 30;
            
                 cn.Open();
            
                 return cn;
             }
             </code>
             </example>
        </member>
        <member name="P:Teradata.Client.Provider.TdConnection.ConnectionTimeout">
             <summary>
                 Returns connection timeout value set in the connection
                 string. Zero indicates an indefinite timeout period.
             </summary>
             <value>
                 Specifies the maximum amount of time in seconds for establishment
                 of a Teradata session.  The default value is 20 seconds.
             </value>
             <remarks>
             <para>
                 This property is set via the <see cref="P:Teradata.Client.Provider.TdConnection.ConnectionString"/>. It can be 
                 set to any positive value including 0. If it is set to zero, the <see cref="T:Teradata.Client.Provider.TdConnection"/> 
                 instance will wait indefinitely for a session to be established. However, we don’t recommend 
                 setting this number to 0 because it can block the application indefinitely. The application 
                 should set this number to an appropriate value.
             </para>
             <para>
                 The default <b>ConnectionTimeout</b> may be changed through support in our application
                 configuration file <a href="ConfigurationFileProviderSection.html#ConnectionTimeout"> 
                 Application Configuration File ConnectionTimeout</a>. The
                 <see cref="P:Teradata.Client.Provider.TdConnectionStringBuilder.ConnectionTimeout"/> will have priority over the
                 Application Configuration file <strong>ConnectionTimeout</strong> property.
             </para>
             </remarks>
             <example>
             The following example creates an instance of the TdConnection class, sets the 
             ConnectionTimeout property and opens a connection to the Teradata Database.
             <para></para>
             <code>
             public TdConnection CreateTdConnection()
             {
                 TdConnection cn = new TdConnection();
            
                 cn.ConnectionString = “Data Source=Teradata1;User ID=ca;Password=ca;Connection Timeout=30;”;
            
                 cn.Open();
            
                 return cn;
             }
             </code>
             </example>
        </member>
        <member name="P:Teradata.Client.Provider.TdConnection.Database">
             <summary>
             Gets the default database name.
             </summary>
             <value>The default database name or the default database name to be set once 
             the connection (Teradata session) is opened. The default value is an empty 
             string before a connection is opened.</value>
             <remarks>
             If the <see cref="T:Teradata.Client.Provider.TdConnection"/> is not open, this property returns the value specified in 
             the <see cref="P:Teradata.Client.Provider.TdConnection.ConnectionString"/> or an empty string if the ConnectionString
             does not include a database attribute.
             <para></para>
             <para>
             If the connection is open, this property returns an internally cached representation 
             of last known default database. If the default database is changed via a
             <see cref="M:Teradata.Client.Provider.TdConnection.ChangeDatabase(System.String)"/> 
             method, a Teradata DATABASE command is issued, an informational message  
             (<see cref="E:Teradata.Client.Provider.TdConnection.InfoMessage"/>) is sent and the internally cached representation 
             of last known default database is updated. <see cref="T:Teradata.Client.Provider.TdConnection"/> caches the last 
             known default database to avoid additional roundtrips to the Teradata Database and back. We highly 
             recommend setting the default database 
             via the <see cref="P:Teradata.Client.Provider.TdConnection.ConnectionString"/> property. This will ensure that
             the last known default database is always correct for pooled connections.
             </para>
             </remarks>
             <example> The following example creates an instance of TdConnection class, sets the 
             Database property via the ConnectionString and opens a connection to Teradata.
             <para></para>
             <code>
             public TdConnection CreateTdConnection()
             {
                 TdConnection cn = new TdConnection();
            
                 cn.ConnectionString = 
                    “Data Source=Teradata1;User Id=ab;Password=ab;Database=Retail;”;
            
                 cn.Open();
            
                 return cn;
             }
             </code>
             
             </example>
        </member>
        <member name="P:Teradata.Client.Provider.TdConnection.State">
            <summary>
                 Gets the current state of the data source connection.
             </summary>
            <value>One of the System.Data.ConnectionState enumeration values.</value>
            <remarks>
            	<para>The following states are supported:</para>
            	<para></para>
            	<para>
            		<list type="table">
            			<listheader>
            				<term>State</term>
            				<description>Description</description>
            			</listheader>
            			<item>
            				<term>Closed</term>
            				<description>
            					<para>The connection to the data source is closed.</para>
            				</description>
            			</item>
            			<item>
            				<term>Open</term>
            				<description>
            					<para>The connection to the data source is open.</para>
            				</description>
            			</item>
            			<item>
            				<term>Broken</term>
            				<description>
            					<para>The connection to the data source is broken. This state may
                                occur only after the connection has been opened. The connection
                                must be closed first before attempting to reopen the
                                connection.</para>
            				</description>
            			</item>
            			<item>
            				<term>Connecting</term>
            				<description>
            					<para>The connection to the data source is reconnecting. This state may
                                occur only after the connection has been opened and lost due to a
                                database or network error.
                                </para>
            				</description>
            			</item>
            		</list>
            	</para>
            	<para>
                    The connection state change occurs during the following conditions:
                </para>
            	<list type="number">
            		<item>
                        When <see cref="T:Teradata.Client.Provider.TdConnection"/> is first created, the state is set to Closed.
                    </item>
            		<item>
            		    When a connection is opened the state transitions from Closed to Open, 
            		    generating a <see cref="E:Teradata.Client.Provider.TdConnection.StateChange"/> event.
                    </item>
            		<item>
            		    The state transitions from Open to Broken when a data source connection
                        encounters an error, generating a <strong>StateChange</strong> event.
                    </item>
            		<item>
            		    The connection state will transition from Open to Closed, generating a
            		    <strong>StateChange</strong> event during connection closure.
                    </item>
            		<item>
            		    The connection state will transition from Open to Connecting, generating a
            		    <strong>StateChange</strong> event during reconnection.
                    </item>
            		<item>
            		    The connection state will transition from Connecting to Open during a
            		    successful reconnection, generating a <strong>StateChange</strong> event.
                    </item>
            		<item>
            		    The connection state will transition from Connecting to Closed during a
            		    reconnection cancellation, generating a <strong>StateChange</strong>
            		    event.
                    </item>
            		<item>
            		    The connection state will transition from Connecting to Broken during a
            		    reconnection failure, generating a <strong>StateChange</strong> event.
                    </item>
            	</list>
            </remarks>
            <example> The following example creates an instance of TdConnection class, sets the 
             <see cref="P:Teradata.Client.Provider.TdConnection.ConnectionString"/> property and opens a connection to the 
             Teradata Database. It later displays the State property.
             <para></para>
             <code>
             public TdConnection CreateTdConnection()
             {
                TdConnection cn = new TdConnection();
                cn.ConnectionString = “Data Source=Teradata1;User ID=ab;Password=ab;”;
                cn.Open();
                Console.WriteLine(“Connection  is {0}”, cn.State);
                return cn;
             }
             </code>
             
            </example>
        </member>
        <member name="P:Teradata.Client.Provider.TdConnection.DbProviderFactory">
            <summary>
            Returns a TdFactory object
            </summary>
        </member>
        <member name="P:Teradata.Client.Provider.TdConnection.DataSource">
             <summary>
             Gets the Teradata server (a.k.a DBC Name TDPID) name.
             </summary>
             <value>The Teradata server name utilized during a <see cref="M:Teradata.Client.Provider.TdConnection.Open"/>. This value is 
             also the Teradata server name utilized during the establishment of a Teradata connection. 
             The default value is an empty string.
             </value>
             <remarks>
             DataSource is required and is set via the <see cref="P:Teradata.Client.Provider.TdConnection.ConnectionString"/> property.
             The DataSource is the Teradata server name. 
             </remarks>
             <example> The following example creates an instance of the <see cref="T:Teradata.Client.Provider.TdConnection"/> class, sets the 
             DataSource property via the ConnectionString property and opens a connection to the Teradata Database.
             It later displays the DataSource property.
             <para></para>
             <code>
             public TdConnection CreateTdConnection()
             {
                 TdConnection cn = new TdConnection();
            
                 cn.ConnectionString = “Data Source=Teradata1;User Id=ca;Password=ca;”;
            
                 cn.Open();
            
                 Console.WriteLine(“Opened a Teradata session to {0}”, cn.DataSource);
            
                 return cn;
             }
             </code>
             </example>
        </member>
        <member name="P:Teradata.Client.Provider.TdConnection.ServerVersion">
             <summary>
             Gets the Teradata server version after a connection is established.
             </summary>
             <value>The Teradata server version (e.g. 06.00.00.00).</value>
             <exception cref="T:System.InvalidOperationException"><c>TdConnection</c> is not in the open state.</exception>
             <remarks>
             This property returns the Teradata server version when a <see cref="T:Teradata.Client.Provider.TdConnection"/> is in an open 
             state. Otherwise it will return an empty string. 
             </remarks>
             <example> The following example creates an instance of <see cref="T:Teradata.Client.Provider.TdConnection"/> class, sets the 
             <see cref="P:Teradata.Client.Provider.TdConnection.ConnectionString"/> property and opens a connection to the Teradata Database. 
             It later displays the ServerVersion property.
             <para></para>
             <code>
             public TdConnection CreateTdConnection()
             {
                TdConnection cn = new TdConnection();
            
                cn.ConnectionString = “Data Source=Teradata1;User ID=ab;Password=ab;”;
            
                cn.Open();
            
                Console.WriteLine(“Teradata server version: {0}”, cn.ServerVersion);
            
                return cn;
             }
             </code>
             
             </example>
        </member>
        <member name="P:Teradata.Client.Provider.TdConnection.IsolationLevel">
            <summary>
            Gets and sets the isolation level of the current connection
            </summary>
            <exception cref="T:System.NotSupportedException">Teradata database only support read UnCommited and Serializable</exception>
            <exception cref="T:System.InvalidOperationException">Can not change islation level in the middle of a transaction</exception>
            <remarks>
            This property returns or sets the current isolation level for the connection.
            This isolation level will apply to all the transactions unless a different isolation is specified
            at the transaction level. 
            </remarks>
            
        </member>
        <member name="P:Teradata.Client.Provider.TdConnection.QueryBand">
            <summary>
            Gets the TdQueryBand object that contains the Query Bands defined at Connection Level.
            </summary>
            <remarks>
            <para>
            Query Bands are only supported when connecting to a Teradata Database 12.00 or later releases. 
            </para>
            </remarks>
        </member>
        <member name="P:Teradata.Client.Provider.TdConnection.ProfileName">
            <summary>
            Return the profile name from the ConnectionString.
            </summary>
        </member>
        <member name="P:Teradata.Client.Provider.TdConnection.CommandTimeout">
            <summary>
            Return the default or the application configurtion file CommandTimeout
            property.
            </summary>
        </member>
        <member name="E:Teradata.Client.Provider.TdConnection.OpenFile">
             <summary>
             The .Net Data Provider for Teradata generates events when the Teradata Database requests
             the contents of a file.
             </summary>
            
             <remarks>
             <para>
             The Teradata Database will request the contents of a file when a DDL statement is
             executed to create a function (e.g. stored procedure, UDF, UDT) and a file that resides
             on the client machine is specified.  An example of a Teradata command that specifies
             an external file is as follows:
             </para>
             <code>
                 CREATE PROCEDURE ExternalProcedure(INOUT region VARCHAR(64))
                 LANGUAGE C NO SQL
                 EXTERNAL NAME 'CS!ExternalProcedure!c:\xsp.c!F!ExternalProcedure' 
                 PARAMETER STYLE SQL;
             </code>
             <para>
             An Application can only register with this event once.  An <see cref="T:System.InvalidOperationException"/>
             will be thrown if an applcation attempts to register with this event more than once.
             </para>
             <para>
             An application <strong>must</strong> register with this event if the Teradata command that is to be 
             executed requires the application to provide the contents of a file.  The data provider
             will require that the file be opened using a <see cref="T:System.IO.Stream"/> and sent 
             back to the provider by setting the <see cref="P:Teradata.Client.Provider.TdFileEventArgs.FileStream"/> property.
             </para>
             
             <para>
             Refer to the Teradata Database documentation, SQL Data Definition Language - Syntax and Examples,
             for more information on "creating external functions".
             </para>
             </remarks>
            
             <exception cref="T:System.InvalidOperationException">An application attempted to register with this event more 
             than once.</exception>
            
             <example>
             <code>
             // Contains the delegate used for the "read file" event that creates
             // a stream to the external file and the delegate that registers 
             // with the "read complete" event to close the stream.  
             public class ExternalFileHandler
             {
                 // the stream that will be used to read the file that contains 
                 // the stored procedure
                 FileStream _internalStream;
            
                 // Delegate that is invoked when the TdConnection.OpenFile 
                 // event gets invoked by the provider
                 public void OnFile(Object sender, TdSourceFileEventArgs eventArgs)
                 {
                     String FileName = eventArgs.FileName;
            
                     // creating a stream to the file.
                     _internalStream = new FileStream(FileName, FileMode.Open);
            
                     // sending stream back to provider
                     eventArgs.ExternalFileObject = _internalStream;
                 }
             
                 // Delegate that is invoked when the TdConnection.CloseFile
                 // event gets invoked by the provider.
                 public void OnCloseFile(Object sender, TdSourceFileEventArgs eventArgs)
                 {
                     _internalStream.Close();
                 }
              }
            
            
             public void CreateExternalProcedure(TdConnection cn)
             {
                 TdCommand cmd = cn.CreateCommand();
            
                 // Creating the type that contains the callbacks that will be used by the 
                 // ExternalFile and ExternalFileReadCompleted events
                 ExternalFileHandler fh = new ExternalFileHandler();
            
                cmd.CommandText = "CREATE PROCEDURE provider_sp(INOUT region VARCHAR(64)) " +
                                   "LANGUAGE C NO SQL EXTERNAL NAME 'CS!provider_sp!c:\xsp.c!F!provider_sp' " +
                                   "PARAMETER STYLE SQL";
            
                // creating delegates for the OpenFile and CloseFile events
                TdOpenFileEventHandler extFile = new TdOpenFileEventHandler(fh.OnFile);
                TdCloseFileEventHandler extReadCompleted = 
                         new TdCloseFileEventHandler(fh.OnCloseFile);
            
                 // this event will get raised when Teradata requests the source code of the 
                 // stored procedure.  Registration to this event is required if a DDL is 
                 // executed that specifies data is to be read from a file that resides
                 // on the client machine.
                 cn.OpenFile += extFile;
            
                 // this event will get raised after Teradata has received all the source code 
                 // for the stored procedure.  Registering to this event is optional.
                 cn.CloseFile += extReadCompleted;
            
                 try
                 {
                     // going to read through the compiler messages sent from Teradata
                     using (TdDataReader dr = cmd.ExecuteReader())
                     {
                         String result;
            
                         while (dr.Read() == true)
                         {
                             result = dr.GetString(0);
            
                             Console.WriteLine(result);
                         }
                     }
                 }
                 finally
                 {
                     // need to remove delegates from the events.
                     cn.OpenFile -= extFile;
                     cn.CloseFile -= extReadCompleted;
                 }
             } 
             </code>
             </example>
        </member>
        <member name="E:Teradata.Client.Provider.TdConnection.CloseFile">
             <summary>
             The .Net Data Provider for Teradata will raise this event after it has completed sending
             the contents of a file to the Teradata Database.  The Teradata Database will
             request the contents of a file when a DDL statement is executed to create/replace
             a function (e.g. stored procedure, UDF, UDT) and a file that resides on the client machine
             is specified.
             </summary>
            
             <remarks>
             <para>
             An Application can only register with this event once.  An <see cref="T:System.InvalidOperationException"/>
             will be thrown if an applcation attempts to register with this event more than once.
             </para>
             <para>
             An application <strong>is not</strong> required to register with this event when executing a 
             DDL statement that requires data to be read from a file.
             </para>
             <para>
             The provider will raise this event after each file is read.  This will enable the application
             to perform cleanup tasks related to the external file that was processed.
             </para>
             <para>
             Refer to <see cref="E:Teradata.Client.Provider.TdConnection.OpenFile"/> for more information.
             </para>
             </remarks>
            
             <exception cref="T:System.InvalidOperationException">An application attempted to register with this event more 
             than once.</exception>
        </member>
        <member name="E:Teradata.Client.Provider.TdConnection.InfoMessage">
            <summary>
            The .NET Data Provider for Teradata generates events to convey informational or warning messages.
            </summary>
            <value>The event handler receives an argument of type TdInfoMessageEventArgs containing 
            data related to this event.</value>
            <remarks> 
            <para>
            Warnings that are generated by the Teradata Database during the execution of 
            command and compilation warnings of stored procedures are exposed through the InfoMessage Event.  An
            application can create a <see cref="T:Teradata.Client.Provider.TdInfoMessageEventHandler"/> to receive these warnings.   
            </para>
            
            <para>
            Default database change events are exposed through the InfoMessage Event. That is, the application 
            can create a TdInfoMessageEventHandler to receive notification of default database change events.
            </para>
            
            <para>
            Expired password warnings are exposed through the InfoMessage Event. Note that Password Expired 
            connections are not compatible with Connection Pooling. ConnectionPooling will generate an error
            if the password is expired. 
            </para>
            
            <para>
            The Teradata Database returns the activity count as a 64 bit unsigned integer
            to the Data Provider. Some properties and methods return a 32 bit signed integer.  This can cause an 
            overflow condition to occur when one of the following methods and properties are used:
            
            <list type="bullet">
            <item><description>TdCommand.ExecuteNonQuery</description></item>
            <item><description>TdDataReader.RecordsAffected</description></item>
            <item><description>TdDataReader.RecordsAffected64 (returns signed 64 bit integer)
            </description></item>
            <item><description>TdDataReader.RecordsReturned</description></item>
            <item><description>TdDataReader.RecordsReturned64 (returns signed 64 bit integer)
            </description></item>
            </list>
            </para>
            
            <para>The provider will post an event to InfoMessage when an overflow condition occurs. 
            The event will include a warning message and the actual activity count. An application 
            can create a TdInfoMessageEventHandler to receive these data items. </para>
            
            <para>If an overflow condition occurs when TdCommand.ExecuteNonQuery is used, a warning 
            message with code 111002 and text "An overflow occurred while calculating the 
            activity count, actual value is [<c>ActivityCount</c>]" will be posted. 
            Refer to <see cref="M:Teradata.Client.Provider.TdCommand.ExecuteNonQuery"/> for an example.
            </para>
            
            <para>If an overflow condition occurs when TdDataReader.RecordsAffected or 
            TdDataReader.RecordsAffected64 is used, a warning message with code 114004 and 
            text "An overflow occurred while calculating the number of records affected, 
            actual value is [<c>RecordsAffected</c>]" will be posted.
            Refer to <see cref="P:Teradata.Client.Provider.TdDataReader.RecordsAffected"/> for an example.
            </para>
            
            <para>If an overflow condition occurs when TdDataReader.RecordsReturned or 
            TdDataReader.RecordsReturned64 is used, a warning message with code 114003 and 
            text "An overflow occurred while calculating the number of records returned, 
            actual value is [<c>RecordsAffected</c>]" will be posted.
            Refer to <see cref="P:Teradata.Client.Provider.TdDataReader.RecordsReturned"/> for an example.
            </para>
            </remarks>
        </member>
        <member name="E:Teradata.Client.Provider.TdConnection.StateChange">
            <summary>
                Occurs when the state of the <see cref="T:Teradata.Client.Provider.TdConnection"/> changes.
            </summary>
            <value>
                The event handler receives an argument of type StateChangeEventArgs containing 
                data related to this event.
            </value>
            <remarks>
                <para>
                    The StateChange event is raised immediately during the following transitions:
                </para>
                <list type="number">
                    <item>
                        When a connection is opened the state transitions from Closed to Open.
                    </item>
                    <item>
                        When a connection transitions from Open to Closed during connection closure.
                    </item>
                </list>
            </remarks>
        </member>
        <member name="E:Teradata.Client.Provider.TdConnection.RecoverConnection">
             <summary>
                 The .Net Data Provider for Teradata will raise this event to add additional time 
                 for reconnection.
             </summary>
             <value>
                 The event handler receives an argument of type <see cref="T:Teradata.Client.Provider.TdRecoveryEventArgs"/> 
                 containing data related to this event.
             </value>
             <remarks>
             <para>
                 The Data Provider will raise this event entering reconnection and after subsequent
                 attempts to reconnect. There is a delay period that is defined by 
                 <see cref="P:Teradata.Client.Provider.TdConnectionStringBuilder.RecoveryStartInterval"/> between attempts
                 and modified by <see cref="P:Teradata.Client.Provider.TdConnectionStringBuilder.RecoveryIntervalFactor"/>. 
                 The event will be raised while there are active listeners.
             </para>
             <para>
                 Applications may subscribe to this event to change the initial 
                 <see cref="P:Teradata.Client.Provider.TdConnectionStringBuilder.RecoveryTimeout"/> value being supplied
                 while the Data Provider is attempting to reconnect to the database. Or an
                 application may wish to terminate an attempt at reconnection, due to an excessive
                 long wait. By supplying a <see cref="P:Teradata.Client.Provider.TdRecoveryEventArgs.RecoveryTimeout"/> of 0 to
                 the event, the reconnection attempt will be terminated.
             </para>
             <para>
                 After the first <b>RecoveryTime</b> is supplied, and this time expires, the  
                 next <b>RecoveryTimeout</b> will by default be supplied as 0, unless a listener supplies
                 a change to this value to extend the <b>RecoveryTimeout</b> again.
             </para>
             </remarks>
             <example>
             <code>
            
             public void RecoveryEventExample (TdConnection cn)
             {
                 TdCommand cmd = cn.CreateCommand();
            
                 cmd.CommandText = "Select col1 from TestTable"; 
            
                 // register with this event
                 EventHandler&lt;TdRecoveryEventArgs&gt; recoveryEvent =
                     new EventHandler&lt;TdRecoveryEventArgs&gt;(OnTimeoutExpired);
                     
                 cn.RecoverConnection += recoveryEvent;
            
                 try
                 {
                     // going to read through the compiler messages sent from Teradata
                     using (TdDataReader dr = cmd.ExecuteReader())
                     {
                         String result;
            
                         while (dr.Read() == true)
                         {
                             result = dr.GetString(0);
            
                             Console.WriteLine(result);
                         }
                     }
                 }
                 finally
                 {
                     // need to remove delegates from the events.
                     cn.RecoverConnection -= recoveryEvent;
                     cn.Close;
                 }
             } 
             
             public void OnTimeoutExpired(Object sendor, TdRecoveryEventArgs args)
             {
                 // assign additional time to complete reconnection
                 args.RecoveryTimeout = 300;
             }
             </code>
             </example>
        </member>
        <member name="E:Teradata.Client.Provider.TdConnection.CancelReconnectEvent">
            <summary>
            Advertise the new CancelReconnectEvent. TODO chris supply comments or remove.
            </summary>
        </member>
        <member name="P:Teradata.Client.Provider.TdConnection.InternalConnection">
            <summary>
            Gets the Connection object; It is used by TdCommand, TdTransaction
            and etc. to obtain access to the Teradata wire protocol.
            </summary>
        </member>
        <member name="P:Teradata.Client.Provider.TdConnection.XViews">
            <summary>
            Return XView property value indicating user only views and column information.
            </summary>
            <value>Boolean</value>
            <remarks>
            Returning schema information from the Teradata database may return information regarding tables
            and views concerning system tables and views.  This boolean switch is provided to limit the data 
            to tables and views owned by the Teradata user id.
            </remarks>
        </member>
        <member name="P:Teradata.Client.Provider.TdConnection.OpenCloseFileCallbacks">
            <summary>
            Contains the callbacks that are used to invoke the OpenFile
            and CloseFile events.
            </summary>
        </member>
        <member name="P:Teradata.Client.Provider.TdConnection.RecoveryCallback">
            <summary>
                Contains the callbacks that are used to invoke the TdConnection TdRecoveryTimeoutEvent.
            </summary>
        </member>
        <member name="P:Teradata.Client.Provider.TdConnection.ImmediatelyStopBatchProcessingAfterException">
            <summary>
            Indicates whether Statement Independence will be turned on when batching commands.
            </summary>
        </member>
        <member name="T:Teradata.Client.Provider.FileType">
            <summary>
            The File Types that are supported by the Teradata Database when
            compiling a function.
            </summary>
        </member>
        <member name="F:Teradata.Client.Provider.FileType.NotSupplied">
            <summary>
            The file type was not supplied.
            </summary>
        </member>
        <member name="F:Teradata.Client.Provider.FileType.Source">
            <summary>
            The file contains the source of the function.
            </summary>
        </member>
        <member name="F:Teradata.Client.Provider.FileType.Include">
            <summary>
            The file is an include file.
            </summary>
        </member>
        <member name="F:Teradata.Client.Provider.FileType.Object">
            <summary>
            The file is an object file.
            </summary>
        </member>
        <member name="F:Teradata.Client.Provider.FileType.Unknown">
            <summary>
            The file could not be determined.
            </summary>
        </member>
        <member name="T:Teradata.Client.Provider.SourceLanguage">
            <summary>
            The Source Languages that are supported by the Teradata Database to write
            a function.
            </summary>
        </member>
        <member name="F:Teradata.Client.Provider.SourceLanguage.NotSupplied">
            <summary>
            The source language was not supplied.
            </summary>
        </member>
        <member name="F:Teradata.Client.Provider.SourceLanguage.C">
            <summary>
            C is used as the source language of the function.
            </summary>
        </member>
        <member name="F:Teradata.Client.Provider.SourceLanguage.CPlusPlus">
            <summary>
            C++ is used as the source language of the function.
            </summary>
        </member>
        <member name="F:Teradata.Client.Provider.SourceLanguage.Java">
            <summary>
            Java is used as the source language of the function.
            </summary>
        </member>
        <member name="F:Teradata.Client.Provider.SourceLanguage.Unknown">
            <summary>
            The source language of the function could not be determined.
            </summary>
        </member>
        <member name="T:Teradata.Client.Provider.TdFileEventArgs">
            <summary>
            This class contains information about the file that was specified
            in the DDL statement to create a function (e.g. stored procedure, UDF, UDT).
            The information that it contains are: name of file, type of file, source 
            language of function.
            </summary>
            <remarks>
            <para>
            This class is a required parameter for the signature of the callback that is used
            when declaring the <see cref="T:Teradata.Client.Provider.TdOpenFileEventHandler"/> and <see cref="T:Teradata.Client.Provider.TdCloseFileEventHandler"/>
            delegates.  It provides the application the name of the file 
            (<see cref="P:Teradata.Client.Provider.TdFileEventArgs.FileName"/>) that was specified in the DDL.
            </para>
            <para>
            It is the responsibility of the application to open the file as an 
            <see cref="T:System.IO.Stream"/> object.  The stream is passed back to the provider
            by setting the <see cref="P:Teradata.Client.Provider.TdFileEventArgs.FileStream"/> property.
            </para>
            <para>
            For an example on how this class is used refer to <see cref="E:Teradata.Client.Provider.TdConnection.OpenFile"/>.
            </para>
            </remarks>
        </member>
        <member name="P:Teradata.Client.Provider.TdFileEventArgs.FileName">
            <summary>
            The name of the file that is requested by the 
            Teradata Database.  The name includes the path.
            </summary>
        </member>
        <member name="P:Teradata.Client.Provider.TdFileEventArgs.FileType">
            <summary>
            The type of file that was sent to Teradata (e.g. Source, Include, Object).
            </summary>
        </member>
        <member name="P:Teradata.Client.Provider.TdFileEventArgs.SourceLanguage">
            <summary>
            The type of language that was used to write the function(e.g. C, CPP, Java).
            </summary>
            <remarks>
            A null is returned if there is no source language associated with the file.
            </remarks>
        </member>
        <member name="P:Teradata.Client.Provider.TdFileEventArgs.FileStream">
            <summary>
            The <see cref="T:System.IO.Stream"/> that was used to open the file.
            </summary>
            <remarks>
            It is the responsibility of the application to use an object of type <strong>System.IO.Stream</strong>
            to open the file and to use this property to send the object to the provider.
            </remarks>
        </member>
        <member name="T:Teradata.Client.Provider.TdRecoveryEventArgs">
            <summary>
                Class to change the <see cref="P:Teradata.Client.Provider.TdConnectionStringBuilder.RecoveryTimeout"/>, when the 
                <see cref="E:Teradata.Client.Provider.TdConnection.RecoverConnection"/> event is activated during reconnection.
            </summary>
        </member>
        <member name="P:Teradata.Client.Provider.TdRecoveryEventArgs.RecoveryTimeout">
            <summary>
                Application sets the timeout for recovery.
            </summary>
            <remarks>
                <para>
                    The <see cref="E:Teradata.Client.Provider.TdConnection.RecoverConnection"/> event enables an application 
                    to either extend the original <see cref="P:Teradata.Client.Provider.TdConnectionStringBuilder.RecoveryTimeout"/>, 
                    change the defined <b>RecoveryTimeout</b> or to terminate a reconnection by 
                    supplying a <b>TdRecoveryEventArgs.RecoveryTimeout</b> of 0. 
                </para>
            </remarks>
        </member>
        <member name="T:Teradata.Client.Provider.TdOpenFileEventHandler">
            <summary>
            Represents the method that will handle the OpenFile event.
            </summary>
            <remarks>
            For an example on using this delegate refer to the <see cref="E:Teradata.Client.Provider.TdConnection.OpenFile"/> event.
            </remarks>
        </member>
        <member name="T:Teradata.Client.Provider.TdCloseFileEventHandler">
            <summary>
            Represents the method that will handle the CloseFile event.
            </summary>
            <remarks>
            For an example on using this delegate refer to the <see cref="E:Teradata.Client.Provider.TdConnection.OpenFile"/> event.
            </remarks>
        </member>
        <member name="T:Teradata.Client.Provider.TdDataAdapter">
            <summary>
            TdDataAdpater fills a DataSet with the data from the Teradata Database and 
            conversely updates the Teradata Database with the data in a DataSet.
            </summary>
            
            
            
            <remarks>
            <para>The TdDataAdapter retrieves data from Teradata Database and fills a single 
            DataTable within a DataSet. It is also capable of reconciling changes 
            (UPDATE, INSERT, DELETE) to the DataTable to the Teradata Database. </para>
            
            <para>TdDataAdapter can create the DataTable(s) from SELECT statement’s 
            metadata, or it can map the result set(s) to an existing DataTable(s). In 
            either case, data is retrieved from the Teradata Database and inserted / merged into the
            DataTable.  For additional information on naming conventions see 
            DbDataAdapter.Fill method.</para>
            
            <para>TdDataAdapter, working in conjunction with TdCommandBuilder, is capable
            of automatically generating DML (UPDATE, INSERT and DELETE) statements for 
            reconciling updates to a DataSet. However, UpdateCommand, InsertCommand and 
            DeleteCommand properties can be manually setup as needed or alternatively registered
            to listen for RowUpdating events and to modify the DML generated by the 
            TdCommandBuilder.</para>
            
            <para>The Data Provider will detect a Parameter declaration discrepancy when 
            Batch Update (<see cref="P:Teradata.Client.Provider.TdDataAdapter.UpdateBatchSize"/>  &gt; 1) is enabled and  
            <see cref="P:System.Data.Common.DataAdapter.ContinueUpdateOnError"/> is set to true. The Data Provider 
            detects that the <see cref="P:Teradata.Client.Provider.TdParameter.IsNullable"/> property is set to false but the 
            <see cref="P:Teradata.Client.Provider.TdParameter.Value"/> is set to DBNull.Value. The Data Provider sets the 
            <see cref="P:System.Data.DataRow.HasErrors"/> property to true and <see cref="P:System.Data.DataRow.RowError"/> property to 
            Error # 121007 when it detects this issue. The Teradata Database will detect this 
            discrepancy when Batch Update (UpdateBatchSize == 1) is turned off or ContinueUpdateOnError
            is set to false. The Teradata Database will return error # 2869.</para>
            
            </remarks>
            
            <example>
            The following example fills a DataSet with result set(s) returned from Teradata 
            Database. 
            
            <code>
            public DataSet CreateDataSet(String connectionString, String commandText)
            {
               TdDataAdapter adapter = new TdDataAdapter(connectionString, commandText);
                       
               DataSet ds = new DataSet();
               adapter.Fill(ds);
               return ds;
            }
            </code>
            </example>
        </member>
        <member name="M:Teradata.Client.Provider.TdDataAdapter.#ctor">
             <summary>
             Initializes a new instance of the TdDataAdapter class.
             </summary>
            
             <remarks>
             A new instance of TdDataAdapter class is initialized with the following
             default property values.
             
             <list type="table">
             <listheader>
             <term>Property</term>
             <description>Initial Value</description>
             </listheader>
             <item><term>AcceptChangesDuringFill</term>
             <description>true</description></item>
             <item><term>ContinueUpdateOnError</term>
             <description>false</description></item>
             <item><term>DeleteCommand</term>
             <description>null</description></item>
             <item><term>InsertCommand</term>
             <description>null</description></item>
             <item><term>MissingMappingAction</term>
             <description>MissingMappingAction.Passthrough</description></item>
             <item><term>MissingSchemaAction</term>
             <description>MissingSchemaAction.Add</description></item>
             <item><term>SelectCommand</term>
             <description>null</description></item>
             <item><term>UpdateCommand</term>
             <description>null</description></item>
             </list>
             </remarks>
             <example>
             The following example creates an instance of TdDataAdapter class, 
             sets some of the properties and fills a DataSet
             
             <code>
             public DataSet ExecuteQuery(TdCommand selectCmd)
             {
                 DataSet ds = new DataSet();
                 TdDataAdapter adapter = new TdDataAdapter();
                 adapter.SelectCommand = selectCmd;
                 adapter.Fill(ds);   
                 return ds;
             }
             </code>
             </example>
        </member>
        <member name="M:Teradata.Client.Provider.TdDataAdapter.#ctor(Teradata.Client.Provider.TdCommand)">
            <summary>
            Initializes a new instance of the TdDataAdapter class and sets the SelectCommand
            property to the passed in TdCommand.
            </summary>
            <param name="command">An instance of TdCommand. SelectCommand property is 
              initialized to this value and is used to fill a DataSet.</param>
            
            <remarks>
            A new instance of TdDataAdapter class is initialized with the following 
            default property values.
            
            <list type="table">
            <listheader>
            <term>Property</term>
            <description>Initial Value</description>
            </listheader>
            <item><term>AcceptChangesDuringFill</term>
            <description>true</description></item>
            <item><term>ContinueUpdateOnError</term>
            <description>false</description></item>
            <item><term>DeleteCommand</term>
            <description>null</description></item>
            <item><term>InsertCommand</term>
            <description>null</description></item>
            <item><term>MissingMappingAction</term>
            <description>MissingMappingAction.Passthrough</description></item>
            <item><term>MissingSchemaAction</term>
            <description>MissingSchemaAction.Add</description></item>
            <item><term>SelectCommand</term>
            <description>selectCommand parameter</description></item>
            <item><term>UpdateCommand</term>
            <description>null</description></item>
            </list>
            <para></para> 
            <para>The selectCommand parameter initializes the SelectCommand 
            property. See the SelectCommand property to determine how it is used to fill the 
            DataSet. SelectCommand is also used by the TdCommandBuilder to generate 
            DML statements.</para>
            </remarks>
            <example>
            The following example creates an instance of TdDataAdapter
            class, sets some of the properties and fills a DataSet. 
            
            <code>
            public DataSet ExecuteQuery(TdCommand selectCmd)
            {
                DataSet ds = new DataSet();
                TdDataAdapter adapter = new TdDataAdapter(selectCmd);
                adapter.Fill(ds);
                return ds;
            }
            </code>
            </example>
            
        </member>
        <member name="M:Teradata.Client.Provider.TdDataAdapter.#ctor(System.String,Teradata.Client.Provider.TdConnection)">
            <summary>
            Initializes a new instance of the TdDataAdapter class and sets the SelectCommand property.
            </summary>
            <param name="commandText">Specifies a string representing a query 
              (TdCommand.CommandText) used to fill a DataSet. </param>
            <param name="connection">Contains an instance of TdConnection class.</param>
            <remarks>
            A new instance of TdDataAdapter class is initialized with the following 
            default property values.
            
            <list type="table">
            <listheader>
            <term>Property</term>
            <description>Initial Value</description>
            </listheader>
            <item><term>AcceptChangesDuringFill</term>
            <description>true</description></item>
            <item><term>ContinueUpdateOnError</term>
            <description>false</description></item>
            <item><term>DeleteCommand</term>
            <description>null</description></item>
            <item><term>InsertCommand</term>
            <description>null</description></item>
            <item><term>MissingMappingAction</term>
            <description>MissingMappingAction.Passthrough</description></item>
            <item><term>MissingSchemaAction</term>
            <description>MissingSchemaAction.Add</description></item>
            <item><term>SelectCommand</term>
            <description>New instance of TdCommand(selectCommandText, selectConnection) class</description></item>
            <item><term>UpdateCommand</term>
            <description>null</description></item>
            </list>
            <para></para> 
            <para>The selectCommandText and selectConnection parameters  
            initialize the SelectCommand property with a new instance of the TdCommand
            class. See the SelectCommand property to determine how it is used to fill the DataSet.
            SelectCommand is also used by the TdCommandBuilder to generate DML statements.</para>
            </remarks>
            <example>
            The following example creates an instance of TdDataAdapter
            class, sets some of the properties and fills a DataSet. 
            
            <code>
            public DataSet ExecuteQuery(TdCommand selectCmd)
            {
                DataSet ds = new DataSet();
                TdDataAdapter adapter = new TdDataAdapter(selectCmdText, connection);
                                                                         
                adapter.Fill(ds);
                         
                return ds;
            }
            </code>
            </example>
            
        </member>
        <member name="M:Teradata.Client.Provider.TdDataAdapter.#ctor(System.String,System.String)">
            <summary>
            Initialize a new instance of the TdDataAdapter class and sets the SelectCommand property.
            </summary>
            <param name="commandText">A string representing a query (TdCommand.CommandText) 
              used to fill a DataSet. </param>
            <param name="connectionString">The Connection String used to create an instance 
              of the TdConnection class.</param>
            <remarks>
            A new instance of TdDataAdapter class is initialized with the following 
            default property values.
            
            <list type="table">
            <listheader>
            <term>Property</term>
            <description>Initial Value</description>
            </listheader>
            <item><term>AcceptChangesDuringFill</term>
            <description>true</description></item>
            <item><term>ContinueUpdateOnError</term>
            <description>false</description></item>
            <item><term>DeleteCommand</term>
            <description>null</description></item>
            <item><term>InsertCommand</term>
            <description>null</description></item>
            <item><term>MissingMappingAction</term>
            <description>MissingMappingAction.Passthrough</description></item>
            <item><term>MissingSchemaAction</term>
            <description>MissingSchemaAction.Add</description></item>
            <item><term>SelectCommand</term>
            <description>New instance of TdCommand(selectCommandText, selectConnection) class</description></item>
            <item><term>UpdateCommand</term>
            <description>null</description></item>
            </list>
            <para></para> 
            <para>The selectCommandText parameter initializes the 
            SelectCommand property with a new instance of the TdCommand class. 
            The active connection of the SelectCommand property is
            set to a new instance of the TdConnection class initialized with 
            the selectConectionString parameter.</para>
            <para></para> 
            <para>See the SelectCommand property as to how it is used to fill the 
            DataSet. The SelectCommand is also used by the TdCommandBuilder to 
            generate DML statements</para>
            </remarks>
            <example>
            The following example creates an instance of TdDataAdapter
            class, sets some of the properties and fills a DataSet. 
            
            <code>
            public DataSet ExecuteQuery(String selectCmdText, String connectionString)
            {
                DataSet ds = new DataSet();
                TdDataAdapter adapter = new TdDataAdapter(selectCmdText, connectionString);
                adapter.Fill(ds);
                return ds;
            }
            </code>
            </example>
            
        </member>
        <member name="P:Teradata.Client.Provider.TdDataAdapter.ObjectId">
            <summary>
            Gets the Instance Object Identifier.
            </summary>
        </member>
        <member name="P:Teradata.Client.Provider.TdDataAdapter.System#Data#IDbDataAdapter#DeleteCommand">
            <summary>
            TdDataAdapter implements System.Data.IDbDataAdapter interface. Therefore
             it supports the following property. However, it is only exposed when 
             TdDataAdapter is cast to IDbDataAdapter. 
            </summary>
        </member>
        <member name="P:Teradata.Client.Provider.TdDataAdapter.System#Data#IDbDataAdapter#InsertCommand">
            <summary>
            TdDataAdapter implements System.Data.IDbDataAdapter interface. Therefore
            it supports the following property. However, it is only exposed when 
            TdDataAdapter is cast to IDbDataAdapter. 
            </summary>
        </member>
        <member name="P:Teradata.Client.Provider.TdDataAdapter.System#Data#IDbDataAdapter#SelectCommand">
            <summary>
            TdDataAdapter implements System.Data.IDbDataAdapter interface. Therefore
             it supports the following property. However, it is only exposed when 
             TdDataAdapter is cast to IDbDataAdapter. 
            </summary>
        </member>
        <member name="P:Teradata.Client.Provider.TdDataAdapter.System#Data#IDbDataAdapter#UpdateCommand">
            <summary>
            TdDataAdapter implements System.Data.IDbDataAdapter interface. 
            Therefore it supports the following property. However, it is 
            only exposed when TdDataAdapter is cast to IDbDataAdapter. 
            </summary>
        </member>
        <member name="P:Teradata.Client.Provider.TdDataAdapter.DeleteCommand">
            <summary>
            Gets or sets a TdCommand used to delete a row from a Teradata Table 
            corresponding to a row in a DataTable..
            </summary>
            <value>Specified a TdCommand object used to delete a row from the Teradata 
            Database table which corresponds to the deleted row in the DataTable. The 
            default value is null.</value>
            <remarks>
            <para>The DeleteCommand property is used to delete a row from the Teradata
            Database. The data adapter does not modify the TdCommand object 
            (DeleteCommand) but it maps the DataRow to the TdCommand.Parameters 
            collection and executes the resulting command. See the TdParameter.
            SourceColumn for additional information on how the columns in the 
            DataTable and how the DataRow are mapped to the parameters.</para>
            <para></para>
            <para>It is your responsibility to map the columns in DataTable to 
            the parameters. Alternatively, you can use TdCommandBuilder to 
            dynamically generate the TdCommand used to delete a row from the
            Teradata Database.</para>
            <para></para>
            <para>When you set the DeleteCommand property, the TdCommand object
            passed in is not cloned but rather a reference to the object is 
            maintained by the TdDataAdapter.</para>
            </remarks>
        </member>
        <member name="P:Teradata.Client.Provider.TdDataAdapter.InsertCommand">
            <summary>
            Gets or sets a TdCommand used to insert a row into a Teradata Table
            corresponding to a row in a DataTable.
            </summary>
            <value>Specifies a TdCommand object used to insert a row into the Teradata Database table
            which corresponds to the inserted row in the DataTable. The default 
            value is null.</value>
            <remarks>The InsertCommand property is used to insert a row into the Teradata
             Database. The data adapter does not modify the TdCommand object 
             (InsertCommand) but it maps the DataRow to the TdCommand.Parameters 
             collection and executes the resulting command. See TdParameter.
             SourceColumn for additional information on how the columns in the 
             DataTable and how the DataRow are mapped to the parameters.
             <para></para>
             <para>It is your responsibility to map the columns in DataTable to the parameters.
             Alternatively, TdCommandBuilder is used to dynamically generate the 
             TdCommand used to insert a row into Teradata Database.</para>
             <para></para>
             <para>When the InsertCommand property is set, the passed in TdCommand object
             is not cloned but rather a reference to the object is maintained by 
             the TdDataAdapter.</para>
             </remarks>
        </member>
        <member name="P:Teradata.Client.Provider.TdDataAdapter.SelectCommand">
            <summary>
            Gets or sets a TdCommand used to fill a DataTable(s) with the
            corresponding result set(s) from Teradata Database.
            </summary>
            <value>Spedifies a TdCommand used to fill a DataTable(s) with the corresponding 
            result set(s) from the Teradata Database. The default value is null.</value>
            <remarks><para>SelectCommand property is used to fill a DataTable(s) with 
            the corresponding result set(s) from the Teradata Database. See “Setting Up 
            DataTable and DataColumn Mappings” for additional information on how 
            Teradata columns are mapped to DataColumns.</para>
            <para></para>
            <para>When the SelectCommand property is set, the TdCommand object passed
             in is not cloned but rather a reference to the object is maintained by 
             the TdDataAdapter.</para></remarks>
        </member>
        <member name="P:Teradata.Client.Provider.TdDataAdapter.UpdateCommand">
            <summary>
            Gets or sets a TdCommand used to update a Teradata Database table row
            corresponding to a row in a DataTable.
            </summary>
            <value>Spedifies TdCommand used to update a row in a Teradata Database table corresponding 
            to a DataRow in a DataTable. The default value is null.</value>
            <remarks>
            <para>The UpdateCommand property updates a row in the Teradata 
            database. The data adapter does not modify the TdCommand object (UpdateCommand), 
            but it maps the DataRow to TdCommand.Parameters collection,  and executes the 
            resulting command. See TdParameter.SourceColumn for additional information on 
            how the columns in the DataTable and therefore DataRow are mapped to the 
            parameters.</para>
            <para></para>
            <para>It is your responsibility to map the columns in DataTable to the 
            parameters. Alternatively, the TdCommandBuilder can dynamically 
            generate the TdCommand used to update a row into Teradata database.</para>
            <para></para>
            <para>When you set the UpdateCommand property, the TdCommand object passed 
            in is not cloned but rather a reference to the object is maintained by the 
            TdDataAdapter.</para>
            </remarks>
        </member>
        <member name="P:Teradata.Client.Provider.TdDataAdapter.KeepCommandBatchSequence">
            <summary>
            When commands are batched, the sequence should be kept or not. The default is false.
            </summary>
        </member>
        <member name="P:Teradata.Client.Provider.TdDataAdapter.UpdateBatchSize">
            <summary>
            Gets or sets a value that specifies the number of rows that can be executed in a batch.
            </summary>
            <exception cref="T:System.ArgumentOutOfRangeException">The property value is set to a number 
            less than 0.</exception>
            <remarks>
            <para>For more information on UpdateBatchSize refer to the 
            <a href="AdapterBatchUpdate.html">Batch Update</a> Section of the Developer's Guide.</para>
            </remarks>
            <seealso cref="!:DataAdapterOverview.html">TdDataAdapter And TdCommandBuilder</seealso>
            <seealso cref="!:AdapterBatchUpdate.html">Batch Update</seealso>
        </member>
        <member name="E:Teradata.Client.Provider.TdDataAdapter.RowUpdated">
            <summary>
            Occurs during an Update operation after a TdCommand is executed for any one DataRow.
            </summary>
            <remarks>If UpdateBatchsize is set to 1, the RowUpdated event is raised after changes 
            to a single DataRow are applied to the Teradata Database. RowUpdated is called for every 
            DataRow changed in a DataTable unless ContinueUpdateOnError is set to false or 
            arguments (TdRowUpdatingEventArgs.Status) to RowUpdating and / or RowUpdated event 
            specifies that remaining rows will be skipped. If UpdateBatchSize is set to greater
            than zero, this event is fired for every batch size of changes. For detail, refer to the
            .NET Framework 2.0 online help</remarks>
        </member>
        <member name="E:Teradata.Client.Provider.TdDataAdapter.RowUpdating">
            <summary>
            Occurs during an Update operation before a TdCommand is executed for any one DataRow.
            </summary>
            <remarks>The RowUpdating event is raised before changes to a single DataRow are applied
            to Teradata database. RowUpdating is called for every DataRow changed in a DataTable 
            unless ContinueUpdateOnError is set to false or argument (TdRowUpdatingEventArgs.Status) 
            to RowUpdating and / or RowUpdated event specifies that remaining rows will be 
            skipped. 
            </remarks>
        </member>
        <member name="T:Teradata.Client.Provider.TdRowUpdatedEventHandler">
            <summary>
            Delegate that will handle the TdDataAdapter.RowUpdated event.
            </summary>
            <param name="sender">The source of the event. In this case an instance of 
            TdDataAdatper class.</param>
            <param name="e">An instance of TdRowUpdatedEventArgs class.</param>
            <remarks>
            <para>By the time the RowUpdated event is raised, the changes to a DataRow have been 
            applied to the Teradata database. Therefore you cannot affect the current DataRow update, 
            but you can affect the reconciliation of the remaining DataRows. If 
            TdDataAdapter.ContinueUpdateOnError is set to true, then any updates to e.Errors and 
            or e.Status are applied to the DataRow and the TdDataAdapter.Update operation continues. 
            However, if TdDataAdapter.ContinueUpdateOnError is set to false, TdDataAdapter.Update 
            generates an exception and the remaining DataRows are not reconciled back to the 
            Teradata database.</para>
            </remarks>
        </member>
        <member name="T:Teradata.Client.Provider.TdRowUpdatingEventHandler">
            <summary>
            Delegate that will handle the TdDataAdapter.RowUpdating event.
            </summary>
            <param name="sender">The source of the event. In this case an instance of 
            TdDataAdatper class. </param>
            <param name="e">An instance of TdRowUpdatingEventArgs class.</param>
            <remarks>
            <para>RowUpdating event is raised before the changes to a DataRow are applied to the 
            Teradata database. Therefore you can affect the current DataRow update in addition to the 
            reconciliation of the remaining DataRows</para>
            <para></para>
            <para>Command, Errors or Status properties of the e parameter can be updated which in turn 
            affects the reconciliation. For example e.Status can be set to 
            System.Data.UpdateStatus.SkipCurrentRow which results in current row not being updated.</para>
            <para></para>
            <para>If TdDataAdapter.ContinueUpdateOnError is set to true, then any updates to 
            e.Errors and or e.Status are applied to the DataRow and the TdDataAdapter.Update 
            operation continues. However, if TdDataAdapter.ContinueUpdateOnError is set to false, 
            TdDataAdapter.Update generates an exception and the remaining DataRows are not reconciled 
            back to the Teradata database.</para>
            </remarks>
        </member>
        <member name="T:Teradata.Client.Provider.TdRowUpdatingEventArgs">
             <summary>
             Arguments to the TdRowUpdatingEventHandler delegate. It provides data for
             the TdDataAdapter.RowUpdating event.
             </summary>
             <remarks>
             <para>TdDataAdapter raises the RowUpdating event when TdDataAdapter.Update 
             is called and before changes to a DataRow are applied to Teradata. 
             TdRowUpdatingEventArgs provides data about the event (e.g. SQL statement 
             type like UPDATE, INSERT, DELETE). You can affect the result of the update 
             by setting the Command, Errors and / or the Status property. </para> 
            </remarks>
        </member>
        <member name="M:Teradata.Client.Provider.TdRowUpdatingEventArgs.#ctor(System.Data.DataRow,Teradata.Client.Provider.TdCommand,System.Data.StatementType,System.Data.Common.DataTableMapping)">
            <summary>
            Initialize a new instance of the TdRowUpdatingEventArgs class.
            </summary>
            <param name="dataRow">A System.Data.DataRow that is targeted for an update via 
            a call to TdDataAdapter.Update. </param>
            <param name="command">A command executed to reconcile DataRow changes back to 
            Teradata database.</param>
            <param name="statementType">Specifies the SQL statement type 
            (e.g. UPDATE, INSERT or DELETE).</param>
            <param name="tableMapping">Shows how DataRow columns are mapped to Teradata 
            database columns.</param>
            <remarks>The command parameter is defined as an instance of IDbCommand interface. But 
            please note that the Command property returns a TdCommand object. This simply means 
            that command parameter object should be a TdCommand instance which also 
            supports IDbCommand interface. </remarks>
        </member>
        <member name="P:Teradata.Client.Provider.TdRowUpdatingEventArgs.ObjectId">
            <summary>
            Gets the Instance Object Identifier.
            </summary>
        </member>
        <member name="P:Teradata.Client.Provider.TdRowUpdatingEventArgs.Command">
            <summary>
            Gets or sets the TdCommand object associated with the event.
            </summary>
            <value>A TdCommand object used to update (i.e. UPDATE, INSERT or DELETE) a row in the 
            Teradata table which corresponds to the DataRow.</value>
            <exception cref="T:System.InvalidCastException">The command parameter passed to the 
            constructor is not of type TdCommand.</exception>
            <remarks>Command property reflects the TdCommand instance used to update 
            (INSERT, UPDATE and DELETE) 
            the Teradata database. TdCommand instance encapsulates the DML statement, parameters (data), 
            TdConnection, and whether output parameters are applied to the DataRow.
            </remarks>
        </member>
        <member name="T:Teradata.Client.Provider.TdRowUpdatedEventArgs">
            <summary>
            Arguments to the TdRowUpdatingEventHandler delegate. It provides data for 
            the TdDataAdapter.RowUpdating event.
            </summary>
        </member>
        <member name="M:Teradata.Client.Provider.TdRowUpdatedEventArgs.#ctor(System.Data.DataRow,Teradata.Client.Provider.TdCommand,System.Data.StatementType,System.Data.Common.DataTableMapping)">
            <summary>
            Initialize a new instance of the TdRowUpdatedEventArgs class.
            </summary>
            <param name="dataRow">A System.Data.DataRow that is targeted for an update via a 
            call to TdDataAdapter.Update. </param>
            <param name="command">A command executed to reconcile DataRow changes back to 
            Teradata database.</param>
            <param name="statementType">Specifies the SQL statement type 
            (e.g. UPDATE, INSERT or DELETE).</param>
            <param name="tableMapping">Show how DataRow columns are mapped to Teradata 
            database columns.</param>
            <remarks>The command parameter is defined as an instance of IDbCommand interface. 
            But please note that the Command property returns a TdCommand object. This simply 
            means that command /// parameter object should be a TdCommand instance which also 
            supports IDbCommand interface. </remarks>
        </member>
        <member name="P:Teradata.Client.Provider.TdRowUpdatedEventArgs.ObjectId">
            <summary>
            Gets the Instance Object Identifier.
            </summary>
        </member>
        <member name="P:Teradata.Client.Provider.TdRowUpdatedEventArgs.Command">
            <summary>
            Gets the TdCommand object associated with the event.
            </summary>
            <value>A TdCommand object used to update (i.e. UPDATE, INSERT or DELETE) a row in the 
            Teradata table which corresponds to the DataRow.</value>
            <exception cref="T:System.InvalidCastException">The command parameter passed to the 
            constructor is not of type TdCommand.</exception>
            <remarks>Command property reflects the TdCommand instance used to update (INSERT, UPDATE 
            and DELETE) the Teradata database. TdCommand instance encapsulates the DML statement, 
            parameters (data), TdConnection, and whether output parameters are applied to the DataRow
            </remarks>
        </member>
        <member name="T:Teradata.Client.Provider.TdDataReader">
             <summary>
             Represents a static forward-only cursor where the individual fields within 
             the current row are accessible using the supported accessor methods.
             </summary>
             
             
             
             <remarks>
             TdDataReader does not expose a public constructor and therefore cannot be created 
             by the end-user or application. An application must call the factory method, 
             <see cref="M:Teradata.Client.Provider.TdCommand.ExecuteReader"/>, to execute a query and retrieve an instance of 
             TdDataReader. TdDataReader encapsulates the data stream returned by the Teradata Database
             and exposes the values for each field within a row in addition to column 
             metadata like column name, data type, size and precision.
             <para></para>
             <para>
             The Teradata Database supports multiple open result sets per session, allowing multiple 
             TdDataReader objects to be open at the same time. The Teradata Database supports up 
             to 16 open result sets per session. Once TdDataReader is closed, the corresponding 
             Teradata Database result set is released and resources are freed.
             </para>
             <para></para>
             <para>
             It is highly recommended to close the TdDataReader object. You should not rely 
             on garbage collection because it is nondeterministic, and valuable Teradata Database and 
             client resources would be left open. IsClosed and RecordsAffected are the only 
             properties that you can call after the TdDataReader is closed. All other methods 
             will throw an ObjectDisposdedException. 
             </para>
             </remarks>
             
             <example>
             The following example executes a query and displays the results.
             <code>
             public void DisplayDataReader(TdCommand cmd)
             {
                 TdDataReader reader = cmd.ExecuteReader();
                 
                 Console.WriteLine("{0} records affected.", reader.RecordsAffected);
                 
                 int currentRow = 1;
                 while(reader.Read())
                 {
                     for (int columnIndex = 0; columnIndex &lt; reader.FieldCount; columnIndex++)
                     {
                         Console.WriteLine("Field [{0,4}] [{1,30}] = {2}", 
                                 currentRow, reader.GetName(columnIndex), 
                                 reader.GetValue(columnIndex)); 
                     }
                     
                     Console.WriteLine();
                     
                     currentRow++;
                 }
                 
                 reader.Close();
             }
             </code>
             </example>
             
             
        </member>
        <member name="M:Teradata.Client.Provider.TdDataReader.GetBoolean(System.Int32)">
             <summary>
             Gets the value of the specified field (column) as a Boolean.
             </summary>
             
             <param name="ordinal">Column ordinal (see <see cref="M:Teradata.Client.Provider.TdDataReader.GetOrdinal(System.String)"/>).</param>
             
             <returns>
             Returns the value of the specified field represented as a System.Boolean type.
             </returns>
             
             <exception cref="T:System.IndexOutOfRangeException"><paramref name="ordinal"/> is less than zero or 
             <paramref name="ordinal"/> is equal to or greater than <see cref="P:Teradata.Client.Provider.TdDataReader.FieldCount"/>.</exception>
             <exception cref="T:System.InvalidCastException">The field cannot be converted into System.Boolean. A null 
             field will result in an exception.</exception>
             <exception cref="T:System.InvalidOperationException">CommandBehavior is set to SchemaOnly, or there 
             is no data for the row or column, or preceding columns are no longer accessible.</exception>
             <exception cref="T:System.ObjectDisposedException">The TdDataReader is closed.</exception>
             <exception cref="T:Teradata.Client.Provider.TdException">The Teradata Database returned an error, or .NET Data Provider 
             for Teradata detected an error.</exception>
             
             <remarks>
             Teradata does not directly support the Boolean data type. Therefore, the 
             .NET Data Provider for Teradata uses the .NET Framework class libraries to 
             convert the underlying field to System.Boolean. 
             </remarks>
            
        </member>
        <member name="M:Teradata.Client.Provider.TdDataReader.GetByte(System.Int32)">
            <summary>
            Gets the value of the specified field (column) as a Byte.
            </summary>
            
            <param name="ordinal">Column ordinal (see <see cref="M:Teradata.Client.Provider.TdDataReader.GetOrdinal(System.String)"/>).</param>
            
            <returns>
            Returns the value of the specified field represented as a System.Byte type.
            </returns>
            
            <exception cref="T:System.IndexOutOfRangeException"><paramref name="ordinal"/> is less than zero 
            or <paramref name="ordinal"/> is equal to or greater than <see cref="P:Teradata.Client.Provider.TdDataReader.FieldCount"/>.</exception>
            <exception cref="T:System.InvalidCastException">The field cannot be converted into System.Byte. A 
            null field will result in an exception.</exception>
            <exception cref="T:System.InvalidOperationException">CommandBehavior is set to SchemaOnly, or there 
            is no data for the row or column, or preceding columns are no longer accessible.</exception>
            <exception cref="T:System.ObjectDisposedException">The TdDataReader is closed.</exception>
            <exception cref="T:Teradata.Client.Provider.TdException">The Teradata Database returned an error, or .NET Data Provider for 
            Teradata detected an error.</exception>
            
            <remarks>
            Use this method to retrieve columns of type BYTE or VARBYTE. 
            If the column is of type binary, then the first byte of the field is returned. 
            </remarks>
            
        </member>
        <member name="M:Teradata.Client.Provider.TdDataReader.GetBytes(System.Int32,System.Int64,System.Byte[],System.Int32,System.Int32)">
            <summary>
            Gets the value of the specified field (column) as a byte array.
            </summary>
            
            <param name="ordinal">Column ordinal (see <see cref="M:Teradata.Client.Provider.TdDataReader.GetOrdinal(System.String)"/>).</param>
            <param name="dataOffset">The index within the field from which to begin the read operation.</param>
            <param name="buffer">The buffer into which to copy the field.</param>
            <param name="bufferOffset">The index for the buffer to begin the copy operation.</param>
            <param name="length">The maximum length to copy into the buffer.</param>
            
            <returns>Returns the number of bytes read and stored into the buffer.</returns>
            
            
            <exception cref="T:System.ArgumentOutOfRangeException"><paramref name="dataOffset"/> is less 
            than zero or <paramref name="length"/> is less than zero or <paramref name="bufferOffset"/> is less 
            than zero or <paramref name="bufferOffset"/> is greater than <paramref name="buffer"/> length.</exception>
            <exception cref="T:System.IndexOutOfRangeException"><paramref name="ordinal"/> is less than zero 
            or <paramref name="ordinal"/> is equal to or greater than <see cref="P:Teradata.Client.Provider.TdDataReader.FieldCount"/>.</exception>
            <exception cref="T:System.InvalidCastException">The field cannot be converted into System.Byte. A null 
            field will result in an exception.</exception>
            <exception cref="T:System.InvalidOperationException">CommandBehavior is set to SchemaOnly, or there is 
            no data for the row or column, or preceding columns are no longer accessible.</exception>
            <exception cref="T:System.ObjectDisposedException">The TdDataReader is closed.</exception>
            <exception cref="T:Teradata.Client.Provider.TdException">The Teradata Database returned an error, or .NET Data Provider for 
            Teradata detected an error.</exception>
            
            <remarks>
            Use this method to retrieve columns of type BYTE, VARBYTE or BLOB. 
            GetBytes method supports the concept of chunking. Applications can call 
            GetBytes method to retrieve the field in smaller manageable chunks. For example 
            a 10 MB BLOB field can be retrieved in 32KB chunks. The number of bytes 
            copied into the buffer can be less the length specified. 
            A null <paramref name="buffer"/> reference should be passed to retrieve the size of the field, 
            as opposed to the maximum size of the column retrieved using the GetSchemaTable method.
            </remarks>
        </member>
        <member name="M:Teradata.Client.Provider.TdDataReader.GetChar(System.Int32)">
            <summary>
            Gets the value of the specified field (column) as a character.
            </summary>
            
            <param name="ordinal">Column ordinal (see <see cref="M:Teradata.Client.Provider.TdDataReader.GetOrdinal(System.String)"/>).</param>
            
            <returns>
            The value of the specified field represented as a System.Char type.
            </returns>
            
            <exception cref="T:System.IndexOutOfRangeException"><paramref name="ordinal"/> is less than zero or 
              <paramref name="ordinal"/> is equal to or greater than <see cref="P:Teradata.Client.Provider.TdDataReader.FieldCount"/>.</exception>
            <exception cref="T:System.InvalidCastException">The field cannot be converted into System.Char. A null 
              field will result in an exception.</exception>
            <exception cref="T:System.InvalidOperationException">CommandBehavior is set to SchemaOnly, or there is 
              no data for the row or column, or preceding columns are no longer accessible.</exception>
            <exception cref="T:System.ObjectDisposedException">The TdDataReader is closed.</exception>
            <exception cref="T:Teradata.Client.Provider.TdException">The Teradata Database returned an error, or .NET Data Provider for 
              Teradata detected an error.</exception>
            
            <remarks>
            Use this method to retrieve columns of type CHAR or VARCHAR. 
            If the column is of type character, then the first character of the 
            field is returned. 
            </remarks>
            
        </member>
        <member name="M:Teradata.Client.Provider.TdDataReader.GetChars(System.Int32,System.Int64,System.Char[],System.Int32,System.Int32)">
            <summary>
            Gets the value of the specified field (column) as a Char array.
            </summary>
            
            <param name="ordinal">Column ordinal (see <see cref="M:Teradata.Client.Provider.TdDataReader.GetOrdinal(System.String)"/>).</param>
            <param name="dataOffset">Specifies the index within the field from which to begin the read operation.</param>
            <param name="buffer">Indicates the buffer into which to copy the field.</param>
            <param name="bufferOffset">Specifies the index for the buffer to begin the copy operation.</param>
            <param name="length">Specifies the maximum number of characters to copy into the buffer.</param>
            
            <returns>
            Returns the number of characters read and stored into the buffer.
            </returns>
            
            <exception cref="T:System.ArgumentOutOfRangeException"><paramref name="dataOffset"/> is less than 
            zero or <paramref name="length"/> is less than zero or <paramref name="bufferOffset"/> is less 
            than zero or <paramref name="bufferOffset"/> is greater than <paramref name="buffer"/> length.</exception>
            <exception cref="T:System.IndexOutOfRangeException"><paramref name="ordinal"/> is less than zero 
            or <paramref name="ordinal"/> is equal to or greater than <see cref="P:Teradata.Client.Provider.TdDataReader.FieldCount"/>.</exception>
            <exception cref="T:System.InvalidCastException">The field cannot be converted into System.Char. 
            Note that a null field will result in an exception.</exception>
            <exception cref="T:System.InvalidOperationException">CommandBehavior is set to SchemaOnly, or there 
            is no data for the row or column, or preceding columns are no longer accessible.</exception>
            <exception cref="T:System.ObjectDisposedException">The TdDataReader is closed.</exception>
            <exception cref="T:Teradata.Client.Provider.TdException">The Teradata Database returned an error, or .NET Data Provider for 
            Teradata detected an error.</exception>
            
            <remarks>
            Use this method to retrieve columns of type CHAR, VARCHAR, CLOB, or XML. 
            GetChars method supports the concept of chunking. It can be called 
            to retrieve the field in smaller manageable chunks. 
            For example a 10 MB CLOB field can be retrieved in 32KB chunks. The 
            number of characters copied into the <paramref name="buffer"/> can be less the 
            <paramref name="length"/> specified. 
            </remarks>
        </member>
        <member name="M:Teradata.Client.Provider.TdDataReader.GetDataTypeName(System.Int32)">
            <summary>
            Gets the name of the Teradata data type for the specified column.
            </summary>
            
            <param name="ordinal">Column ordinal (see <see cref="M:Teradata.Client.Provider.TdDataReader.GetOrdinal(System.String)"/>).</param>
            
            <returns>
            Returns the name of the Teradata data type.
            </returns>
            
            <exception cref="T:System.IndexOutOfRangeException"><paramref name="ordinal"/> is less than zero or <paramref name="ordinal"/> is equal to or greater than <see cref="P:Teradata.Client.Provider.TdDataReader.FieldCount"/>.</exception>
            <exception cref="T:System.InvalidOperationException">CommandBehavior is set to SchemaOnly, or there is no data for the row or column, or preceding columns are no longer accessible.</exception>
            <exception cref="T:System.ObjectDisposedException">The TdDataReader is closed.</exception>
            
            <remarks>
            Use GetDataTypeName to retrieve the Teradata data type name.  
            <see cref="T:Teradata.Client.Provider.TdType"/> section in this manual lists the Teradata type names.
            </remarks>
        </member>
        <member name="M:Teradata.Client.Provider.TdDataReader.GetDateTime(System.Int32)">
            <summary>
            Gets the value of the specified field (column) as a DateTime.
            </summary>
            
            <param name="ordinal">Column ordinal (see <see cref="M:Teradata.Client.Provider.TdDataReader.GetOrdinal(System.String)"/>).</param>
            
            <returns>
            Returns the value of the specified field represented as a System.DateTime type.
            </returns>
            
            <exception cref="T:System.IndexOutOfRangeException"><paramref name="ordinal"/> is less than zero 
            or <paramref name="ordinal"/> is equal to or greater than <see cref="P:Teradata.Client.Provider.TdDataReader.FieldCount"/>.</exception>
            <exception cref="T:System.InvalidCastException">The field cannot be converted into System.DateTime. 
            A null field will result in an exception.</exception>
            <exception cref="T:System.InvalidOperationException">CommandBehavior is set to SchemaOnly, or there 
            is no data for the row or column, or preceding columns are no longer accessible.</exception>
            <exception cref="T:System.ObjectDisposedException">The TdDataReader is closed.</exception>
            <exception cref="T:Teradata.Client.Provider.TdException">The Teradata Database returned an error, or .NET Data Provider for 
            Teradata detected an error.</exception>
            
            <remarks>
            Use this method to retrieve columns of type DATE, TIMESTAMP or 
            TIMESTAMP WITH TIME ZONE. 
            </remarks>
        </member>
        <member name="M:Teradata.Client.Provider.TdDataReader.GetDecimal(System.Int32)">
            <summary>
            Gets the value of the specified field (column) as a Decimal.
            </summary>
            
            <param name="ordinal">Column ordinal (see <see cref="M:Teradata.Client.Provider.TdDataReader.GetOrdinal(System.String)"/>).</param>
            
            <returns>
            Returns the value of the specified field represented as a System.Decimal type.
            </returns>
            
            <exception cref="T:System.IndexOutOfRangeException"><paramref name="ordinal"/> is less than zero 
            or <paramref name="ordinal"/> is equal to or greater than <see cref="P:Teradata.Client.Provider.TdDataReader.FieldCount"/>.</exception>
            <exception cref="T:System.InvalidCastException">The field cannot be converted into System.Decimal. 
            A null field will result in an exception.</exception>
            <exception cref="T:System.OverflowException">Conversion overflow. For example Teradata DECIMAL(38) 
            might result in Overflow when converted to <see cref="T:System.Decimal"/>.</exception>
            <exception cref="T:System.InvalidOperationException">CommandBehavior is set to SchemaOnly, or there 
            is no data for the row or column, or preceding columns are no longer accessible.</exception>
            <exception cref="T:System.ObjectDisposedException">The TdDataReader is closed.</exception>
            <exception cref="T:Teradata.Client.Provider.TdException">The Teradata Database returned an error, or .NET Data Provider for 
            Teradata detected an error.</exception>
            
            <remarks>
            Use this method to retrieve columns of type DECIMAL.
            </remarks>
            
        </member>
        <member name="M:Teradata.Client.Provider.TdDataReader.GetTdDecimal(System.Int32)">
            <summary>
            Gets the value of the specified field (column) as a <see cref="T:Teradata.Client.Provider.TdDecimal"/>.
            </summary>
            
            <param name="ordinal">Column ordinal (see <see cref="M:Teradata.Client.Provider.TdDataReader.GetOrdinal(System.String)"/>).</param>
            
            <returns>
            Returns the value of the specified field as a <strong>TdDecimal</strong> type.
            </returns>
            
            <exception cref="T:System.IndexOutOfRangeException"><paramref name="ordinal"/> is less than zero 
            or <paramref name="ordinal"/> is equal to or greater than <see cref="P:Teradata.Client.Provider.TdDataReader.FieldCount"/>.</exception>
            <exception cref="T:System.InvalidCastException">The field cannot be converted into <Strong>TdDecimal</Strong>.</exception>
            <exception cref="T:System.InvalidOperationException">CommandBehavior is set to SchemaOnly, or there is 
            no data for the row or column, or preceding columns are no longer accessible.</exception>
            <exception cref="T:System.ObjectDisposedException">The <Strong>TdDataReader</Strong> is closed.</exception>
            <exception cref="T:Teradata.Client.Provider.TdException">The Teradata Database returned an error, or .NET Data Provider for 
            Teradata detected an error.</exception>
            
            <remarks>
            Use this method to retrieve columns of type DECIMAL.
            A Null column will return TdDecimal.Null
            </remarks>
            
        </member>
        <member name="M:Teradata.Client.Provider.TdDataReader.GetTdNumber(System.Int32)">
            <summary>
            Gets the value of the specified field (column) as a <see cref="T:Teradata.Client.Provider.TdNumber"/>.
            </summary>
            
            <param name="ordinal">Column ordinal (see <see cref="M:Teradata.Client.Provider.TdDataReader.GetOrdinal(System.String)"/>).</param>
            
            <returns>
            Returns the value of the specified field as a <strong>TdNumber</strong> type.
            </returns>
            
            <exception cref="T:System.IndexOutOfRangeException"><paramref name="ordinal"/> is less than zero 
            or <paramref name="ordinal"/> is equal to or greater than <see cref="P:Teradata.Client.Provider.TdDataReader.FieldCount"/>.</exception>
            <exception cref="T:System.InvalidCastException">The field cannot be converted into <Strong>TdDecimal</Strong>.</exception>
            <exception cref="T:System.InvalidOperationException">CommandBehavior is set to SchemaOnly, or there is 
            no data for the row or column, or preceding columns are no longer accessible.</exception>
            <exception cref="T:System.ObjectDisposedException">The <Strong>TdDataReader</Strong> is closed.</exception>
            <exception cref="T:Teradata.Client.Provider.TdException">The Teradata Database returned an error, or .NET Data Provider for 
            Teradata detected an error.</exception>
            
            <remarks>
            Use this method to retrieve columns of type NUMBER.
            A Null column will return TdNumber.Null
            </remarks>
            
        </member>
        <member name="M:Teradata.Client.Provider.TdDataReader.GetTdPeriodDate(System.Int32)">
            <summary>
            Gets the value of the specified field (column) as a <see cref="T:Teradata.Client.Provider.TdPeriodDate"/>.
            </summary>
            
            <param name="ordinal">Column ordinal (see <see cref="M:Teradata.Client.Provider.TdDataReader.GetOrdinal(System.String)"/>).</param>
            
            <returns>
            Returns the value of the specified field represented as a TdPeriodDate type.
            </returns>
            
            <exception cref="T:System.IndexOutOfRangeException">
                <paramref name="ordinal"/> is less than zero or <paramref name="ordinal"/> is equal to or greater 
                than <see cref="P:Teradata.Client.Provider.TdDataReader.FieldCount"/>.
            </exception>
            <exception cref="T:System.InvalidCastException">
                The field cannot be converted into <Strong>TdPeriodDate</Strong>.
            </exception>
            <exception cref="T:System.InvalidOperationException">
                CommandBehavior is set to SchemaOnly, or there is no data for the row or column, 
                or preceding columns are no longer accessible.
            </exception>
            <exception cref="T:System.ObjectDisposedException">
                The <Strong>TdDataReader</Strong> is closed.
            </exception>
            <exception cref="T:Teradata.Client.Provider.TdException">
                The Teradata Database returned an error, or .NET Data Provider for Teradata 
                detected an error.
            </exception>
            
            <remarks>
            Use this method to retrieve columns of type PERIOD(DATE).
            A Null column will return TdPeriodDate.Null
            </remarks>
        </member>
        <member name="M:Teradata.Client.Provider.TdDataReader.GetTdPeriodTime(System.Int32)">
            <summary>
            Gets the value of the specified field (column) as a <see cref="T:Teradata.Client.Provider.TdPeriodTime"/>.
            </summary>
            
            <param name="ordinal">Column ordinal (see <see cref="M:Teradata.Client.Provider.TdDataReader.GetOrdinal(System.String)"/>).</param>
            
            <returns>
            Returns the value of the specified field represented as a TdPeriodTime type.
            </returns>
            
            <exception cref="T:System.IndexOutOfRangeException">
                <paramref name="ordinal"/> is less than zero or <paramref name="ordinal"/> is equal to or 
                greater than <see cref="P:Teradata.Client.Provider.TdDataReader.FieldCount"/>.
            </exception>
            <exception cref="T:System.InvalidCastException">
                The field cannot be converted into <Strong>TdPeriodTime</Strong>.
            </exception>
            <exception cref="T:System.InvalidOperationException">
                CommandBehavior is set to SchemaOnly, or there is no data for the row 
                or column, or preceding columns are no longer accessible.
            </exception>
            <exception cref="T:System.ObjectDisposedException">
                The <Strong>TdDataReader</Strong> is closed.
            </exception>
            <exception cref="T:Teradata.Client.Provider.TdException">
                The Teradata Database returned an error, or .NET Data Provider for 
                Teradata detected an error.
            </exception>
            
            <remarks>
            Use this method to retrieve columns of type PERIOD(TIME).
            A Null column will return TdPeriodTime.Null.
            </remarks>
        </member>
        <member name="M:Teradata.Client.Provider.TdDataReader.GetTdPeriodTimeWithTimeZone(System.Int32)">
            <summary>
            Gets the value of the specified field (column) as a <see cref="T:Teradata.Client.Provider.TdPeriodTimeWithTimeZone"/>.
            </summary>
            
            <param name="ordinal">Column ordinal (see <see cref="M:Teradata.Client.Provider.TdDataReader.GetOrdinal(System.String)"/>).</param>
            
            <returns>
            Returns the value of the specified field represented as a TdPeriodTimeWithTimeZone type.
            </returns>
            
            <exception cref="T:System.IndexOutOfRangeException">
                <paramref name="ordinal"/> is less than zero or <paramref name="ordinal"/> is equal to or 
                greater than <see cref="P:Teradata.Client.Provider.TdDataReader.FieldCount"/>.
            </exception>
            <exception cref="T:System.InvalidCastException">
                The field cannot be converted into <Strong>TdPeriodTimeWithTimeZone</Strong>.
            </exception>
            <exception cref="T:System.InvalidOperationException">
                CommandBehavior is set to SchemaOnly, or there is no data for the row or column, 
                or preceding columns are no longer accessible.
            </exception>
            <exception cref="T:System.ObjectDisposedException">
                The <Strong>TdDataReader</Strong> is closed.
            </exception>
            <exception cref="T:Teradata.Client.Provider.TdException">
                The Teradata Database returned an error, or .NET Data Provider for Teradata
                detected an error.
            </exception>
            
            <remarks>
            Use this method to retrieve columns of type PERIOD(TIME WITH TIME ZONE).
            A Null column will return TdPeriodTimeWithTimeZone.Null.
            </remarks>
        </member>
        <member name="M:Teradata.Client.Provider.TdDataReader.GetTdPeriodTimestamp(System.Int32)">
            <summary>
            Gets the value of the specified field (column) as a <see cref="T:Teradata.Client.Provider.TdPeriodTimestamp"/>.
            </summary>
            
            <param name="ordinal">Column ordinal (see <see cref="M:Teradata.Client.Provider.TdDataReader.GetOrdinal(System.String)"/>).</param>
            
            <returns>
            Returns the value of the specified field represented as a TdPeriodTimestamp type.
            </returns>
            
            <exception cref="T:System.IndexOutOfRangeException">
                <paramref name="ordinal"/> is less than zero or <paramref name="ordinal"/> is equal to or 
                greater than <see cref="P:Teradata.Client.Provider.TdDataReader.FieldCount"/>.
            </exception>
            <exception cref="T:System.InvalidCastException">
                The field cannot be converted into <Strong>TdPeriodTimestamp</Strong>.
            </exception>
            <exception cref="T:System.InvalidOperationException">
                CommandBehavior is set to SchemaOnly, or there is no data for the row or 
                column, or preceding columns are no longer accessible.
            </exception>
            <exception cref="T:System.ObjectDisposedException">
                The <Strong>TdDataReader</Strong> is closed.
            </exception>
            <exception cref="T:Teradata.Client.Provider.TdException">
                The Teradata Database returned an error, or .NET Data Provider for 
                Teradata detected an error.
            </exception>
            
            <remarks>
            Use this method to retrieve columns of type PERIOD(TIMESTAMP).
            A Null column will return TdPeriodTimestamp.Null
            </remarks>
        </member>
        <member name="M:Teradata.Client.Provider.TdDataReader.GetTdPeriodTimestampWithTimeZone(System.Int32)">
            <summary>
            Gets the value of the specified field (column) as a <see cref="T:Teradata.Client.Provider.TdPeriodTimestampWithTimeZone"/>.
            </summary>
            
            <param name="ordinal">Column ordinal (see <see cref="M:Teradata.Client.Provider.TdDataReader.GetOrdinal(System.String)"/>).</param>
            
            <returns>
            Returns the value of the specified field represented as a TdPeriodTimestampWithTimeZone type.
            </returns>
            
            <exception cref="T:System.IndexOutOfRangeException">
                <paramref name="ordinal"/> is less than zero or <paramref name="ordinal"/> is equal 
                to or greater than <see cref="P:Teradata.Client.Provider.TdDataReader.FieldCount"/>.
            </exception>
            <exception cref="T:System.InvalidCastException">
                The field cannot be converted into <Strong>TdPeriodTimestampWithTimeZone</Strong>.
            </exception>
            <exception cref="T:System.InvalidOperationException">
                CommandBehavior is set to SchemaOnly, or there is no data for the row 
                or column, or preceding columns are no longer accessible.
            </exception>
            <exception cref="T:System.ObjectDisposedException">
                The <Strong>TdDataReader</Strong> is closed.
            </exception>
            <exception cref="T:Teradata.Client.Provider.TdException">
                The Teradata Database returned an error, or .NET Data Provider for 
                Teradata detected an error.
            </exception>
            
            <remarks>
            Use this method to retrieve columns of type PERIOD(TIMESTAMP WITH TIME ZONE).
            A Null column will return TdPeriodTimestampWithTimeZone.Null
            </remarks>
        </member>
        <member name="M:Teradata.Client.Provider.TdDataReader.GetTdXml(System.Int32)">
            <summary>
            Gets the value of the specified field (column) as a <see cref="T:Teradata.Client.Provider.TdXml"/> object.
            </summary>
            
            <param name="ordinal">Column ordinal (see <see cref="M:Teradata.Client.Provider.TdDataReader.GetOrdinal(System.String)"/>).</param>
            
            <returns>
            Returns the value of the specified field represented as a TdXml type.
            </returns>
            
            <exception cref="T:System.IndexOutOfRangeException"><paramref name="ordinal"/> is less than 
            zero or <paramref name="ordinal"/> is equal to or greater than <see cref="P:Teradata.Client.Provider.TdDataReader.FieldCount"/>.</exception>
            <exception cref="T:System.InvalidCastException">The field cannot be converted into <see cref="T:Teradata.Client.Provider.TdXml"/>.</exception>
            <exception cref="T:System.InvalidOperationException">CommandBehavior is set to SchemaOnly, or there 
            is no data for the row or column, or preceding columns are no longer accessible.</exception>
            <exception cref="T:System.ObjectDisposedException">The TdDataReader is closed.</exception>
            <exception cref="T:Teradata.Client.Provider.TdException">The Teradata Database returned an error, or .NET Data Provider for 
            Teradata detected an error.</exception>
            
            <remarks>
            
            <para>
            The provider represents a Teradata Xml column as a TdXml object.  In order to retrieve the 
            Xml data, a call to <see cref="M:Teradata.Client.Provider.TdXml.CreateXmlReader"/> must be made to create a
            <see cref="T:System.Xml.XmlReader"/>.  The <c>XmlReader</c> is then used to navigate the Xml
            data that is retrieved from the Teradata Database.
            </para>
            
            <para>
            Refer to <see cref="T:Teradata.Client.Provider.TdXml"/> for an example on using this method.
            </para>
            </remarks>
            
        </member>
        <member name="M:Teradata.Client.Provider.TdDataReader.GetDouble(System.Int32)">
            <summary>
            Gets the value of the specified field (column) as a Double.
            </summary>
            
            <param name="ordinal">Column ordinal (see <see cref="M:Teradata.Client.Provider.TdDataReader.GetOrdinal(System.String)"/>).</param>
            
            <returns>
            Returns the value of the specified field represented as a System.Double type.
            </returns>
            
            <exception cref="T:System.IndexOutOfRangeException"><paramref name="ordinal"/> is less than 
            zero or <paramref name="ordinal"/> is equal to or greater than <see cref="P:Teradata.Client.Provider.TdDataReader.FieldCount"/>.</exception>
            <exception cref="T:System.InvalidCastException">The field cannot be converted into System.Double. 
            A null field will result in an exception.</exception>
            <exception cref="T:System.InvalidOperationException">CommandBehavior is set to SchemaOnly, or there 
            is no data for the row or column, or preceding columns are no longer accessible.</exception>
            <exception cref="T:System.ObjectDisposedException">The TdDataReader is closed.</exception>
            <exception cref="T:Teradata.Client.Provider.TdException">The Teradata Database returned an error, or .NET Data Provider for 
            Teradata detected an error.</exception>
            
            <remarks>
            Use this method to retrieve columns of type FLOAT, REAL or DOUBLE PRECISION.
            </remarks>
            
        </member>
        <member name="M:Teradata.Client.Provider.TdDataReader.GetFieldType(System.Int32)">
            <summary>
            Gets the .NET data type (System.Type) of the column.
            </summary>
            
            <param name="ordinal">Column ordinal (see <see cref="M:Teradata.Client.Provider.TdDataReader.GetOrdinal(System.String)"/>).</param>
            
            <returns>
            Returns the Type of the column.
            </returns>
            <exception cref="T:System.IndexOutOfRangeException"><paramref name="ordinal"/> is less than 
            zero or <paramref name="ordinal"/> is equal to or greater than <see cref="P:Teradata.Client.Provider.TdDataReader.FieldCount"/>.</exception>
            <exception cref="T:System.InvalidOperationException">CommandBehavior is set to SchemaOnly, or 
            there is no data for the row or column, or preceding columns are no longer accessible.</exception>
            <exception cref="T:System.ObjectDisposedException">The TdDataReader is closed.</exception>
            
            <remarks>
            GetFieldType specifies the .NET Framework data type of the column. The information 
            can be used to call the corresponding strongly typed Get method (for example, GetInt32 or 
            GetDouble) to retrieve the field value.    
            </remarks>
            
        </member>
        <member name="M:Teradata.Client.Provider.TdDataReader.GetProviderSpecificFieldType(System.Int32)">
             <summary>
             Gets the .NET data type (System.Type) of the column.
             </summary>
             
             <param name="ordinal">Column ordinal (see <see cref="M:Teradata.Client.Provider.TdDataReader.GetOrdinal(System.String)"/>).</param>
             
             <returns>
             Returns the .NET Data Provider for Teradata Type of the column.
             </returns>
             
             <exception cref="T:System.IndexOutOfRangeException"><paramref name="ordinal"/> is less than zero 
             or <paramref name="ordinal"/> is equal to or greater than <see cref="P:Teradata.Client.Provider.TdDataReader.FieldCount"/>.</exception>
             <exception cref="T:System.InvalidOperationException">CommandBehavior is set to SchemaOnly, or there 
             is no data for the row or column, or preceding columns are no longer accessible.</exception>
             <exception cref="T:System.ObjectDisposedException">The TdDataReader is closed.</exception>
             
             <remarks>
                 <para>GetProviderSpecificFieldType specifies the .NET Framework data type of the
                 column.</para>
             
                 <para>For those Teradata Data Types that have a corresponding Provider Specific Types, the following Type
                 is returned depending upon the setting of the corresponding <i>ENABLE Provider Type
                 Connection String Attribute</i>.  Refer to the 
                 <a href="EnableProviderSpecificTypes.htm">Enabling Provider Specific Types</a> page in
                 the Developer's Guide for more information.  </para>
            
                 <list type="table">
                     <listheader>
                         <term>Teradata Data Type of Column</term>
                         <description>Type Returned<br/>
                             <i>Connection String Attribute, Type Returned</i></description>
                     </listheader>
                     <item>
                         <term>DECIMAL</term>
                         <description>
                             <para style="margin-top=5px">
                                 <see cref="P:Teradata.Client.Provider.TdConnectionStringBuilder.EnableTdDecimal">EnableTdDecimal</see> = true, <see cref="T:Teradata.Client.Provider.TdDecimal">TdDecimal</see>
                             </para>
                             <para>
                                 <strong>EnableTdDecimal</strong> = false, <see cref="T:System.Decimal">System.Decimal</see>
                             </para>
                         </description>
                     </item>
                     <item>
                         <term>DATE</term>
                         <description>
                             <para style="margin-top=5px">
                                 <see cref="P:Teradata.Client.Provider.TdConnectionStringBuilder.EnableTdDateTime">EnableTdDateTime</see> = true, <see cref="T:Teradata.Client.Provider.TdDate">TdDate</see>
                             </para>
                             <para>
                                 <strong>EnableTdDateTime</strong> = false, <see cref="T:System.DateTime">System.DateTime</see>
                             </para>
                         </description>
                     </item>
             
                     <item>
                         <term>TIME</term>
                         <description>
                             <para style="margin-top=5px">
                                 <strong>EnableTdDateTime</strong> = true, <see cref="T:Teradata.Client.Provider.TdTime">TdTime</see>
                             </para>
                             <para>
                                 <strong>EnableTdDateTime</strong> = false, <see cref="T:System.TimeSpan">System.TimeSpan</see>
                             </para>
                         </description>
                     </item>
             
                     <item>
                         <term>TIME WITH TIME ZONE</term>
                         <description>
                             <para style="margin-top=5px">
                                 <strong>EnableTdDateTime</strong> = true, <see cref="T:Teradata.Client.Provider.TdTimeWithTimeZone">TdTimeWithTimeZone</see>
                             </para>
                             <para>
                                 <strong>EnableTdDateTime</strong> = false, <see cref="T:System.String"/>
                             </para>
                         </description>
                     </item>
             
                     <item>
                         <term>TIMESTAMP</term>
                         <description>
                             <para style="margin-top=5px">
                                 <strong>EnableTdDateTime</strong> = true, <see cref="T:Teradata.Client.Provider.TdTimestamp">TdTimestamp</see>
                             </para>
                             <para>
                                 <strong>EnableTdDateTime</strong> = false, <strong>System.DateTime</strong>
                             </para>
                         </description>
                     </item>
             
                     <item>
                         <term>TIMESTAMP WITH TIME ZONE</term>
                         <description>
                             <para style="margin-top=5px">
                                 <strong>EnableTdDateTime</strong> = true, <see cref="T:Teradata.Client.Provider.TdTimestampWithTimeZone">
                                 TdTimestampWithTimeZone</see>
                             </para>
                             <para>
                                <para>
                                   <strong>EnableTdDateTime</strong> = false, the value will depend 
                                   upon the setting of EnableDateTimeOffset.
                                </para>
                                <para style="margin-left=25px">
                                   <strong>EnableDateTimeOffset</strong> = true, <see cref="T:System.DateTimeOffset">System.DateTimeOffset</see>
                                </para>
                                <para style="margin-left=25px">
                                   <strong>EnableDateTimeOffset</strong> = false, <strong>System.String</strong>
                                </para>
                             </para>
                         </description>
                     </item>
             
                     <item>
                         <term>PERIOD(DATE)</term>
                         <description>
                             <para style="margin-top=5px">
                                 <see cref="T:Teradata.Client.Provider.TdPeriodDate">TdPeriodDate</see>
                             </para>
                         </description>
                     </item>
             
                     <item>
                         <term>PERIOD(TIME)</term>
                         <description>
                             <para style="margin-top=5px">
                                 <see cref="T:Teradata.Client.Provider.TdPeriodTime">TdPeriodTime</see>
                             </para>
                         </description>
                     </item>
             
                     <item>
                         <term>PERIOD(TIME WITH TIME ZONE)</term>
                         <description>
                             <para style="margin-top=5px">
                                 <see cref="T:Teradata.Client.Provider.TdPeriodTimeWithTimeZone">TdPeriodTimeWithTimeZone</see>
                             </para>
                         </description>
                     </item>
             
                     <item>
                         <term>PERIOD(TIMESTAMP)</term>
                         <description>
                             <para style="margin-top=5px">
                                 <see cref="T:Teradata.Client.Provider.TdPeriodTimestamp">TdPeriodTimestamp</see>
                             </para>
                         </description>
                     </item>
             
                     <item>
                         <term>PERIOD(TIMESTAMP WITH TIME ZONE</term>
                         <description>
                             <para style="margin-top=5px">
                                 <see cref="T:Teradata.Client.Provider.TdPeriodTimestampWithTimeZone">TdPeriodTimestampWithTimeZone</see>
                             </para>
                         </description>
                     </item>
             
                     <item>
                         <term>BLOB</term>
                         <description>
                             <para style="margin-top:5px">
                                 <see cref="T:Teradata.Client.Provider.TdBlob">TdBlob</see>
                             </para>
                         </description>
                     </item>
             
                     <item>
                         <term>CLOB</term>
                         <description>
                             <para style="margin-top:5px">
                                 <see cref="T:Teradata.Client.Provider.TdClob">TdClob</see>
                             </para>
                         </description>
                     </item>
                     
                     <item>
                         <term>INTERVAL</term>
                         <description>
                             <para style="margin-top=5px">
                                 <see cref="P:Teradata.Client.Provider.TdConnectionStringBuilder.EnableTdIntervals">EnableTdIntervals</see>
                                 = true, the INTERVAL types will be returned depending upon the
                                 INTERVAL column type as <see cref="T:Teradata.Client.Provider.TdIntervalYear"/>, 
                                 <see cref="T:Teradata.Client.Provider.TdIntervalMonth"/>, <see cref="T:Teradata.Client.Provider.TdIntervalYearToMonth"/>,
                                 <see cref="T:Teradata.Client.Provider.TdIntervalDay"/>, <see cref="T:Teradata.Client.Provider.TdIntervalDayToSecond"/>,
                                 <see cref="T:Teradata.Client.Provider.TdIntervalDayToMinute"/>, <see cref="T:Teradata.Client.Provider.TdIntervalDayToHour"/>,
                                 <see cref="T:Teradata.Client.Provider.TdIntervalHour"/>, <see cref="T:Teradata.Client.Provider.TdIntervalHourToSecond"/>,
                                 <see cref="T:Teradata.Client.Provider.TdIntervalHourToMinute"/>, <see cref="T:Teradata.Client.Provider.TdIntervalMinute"/>,
                                 <see cref="T:Teradata.Client.Provider.TdIntervalMinuteToSecond"/> and <see cref="T:Teradata.Client.Provider.TdIntervalSecond"/>
                             </para>
                             <para>
                                 <strong>EnableTdIntervals</strong> = false, <strong>System.String</strong>
                             </para>
                         </description>
                     </item>
                 </list>
             
                 <para>There is no corresponding ENABLE Connection String Attribute for 
                 LOB or Period types.</para>
             
                 <para>The <strong>TdBlob</strong> and <strong>TdClob</strong> Provider Specific
                 Types are returned when the data from a BLOB and CLOB columns are retrieved
                 in deferred mode.</para>
             </remarks>
             
             <seealso cref="!:EnableProviderSpecificTypes.html">Enabling Provider Specific Types</seealso>
             <seealso cref="P:Teradata.Client.Provider.TdConnectionStringBuilder.EnableTdDecimal">EnableTdDecimal</seealso>
             <seealso cref="P:Teradata.Client.Provider.TdConnectionStringBuilder.EnableTdDateTime">EnableTdDateTime</seealso>
        </member>
        <member name="M:Teradata.Client.Provider.TdDataReader.GetFloat(System.Int32)">
            <summary>
            Gets the value of the specified field (column) as a Float.
            </summary>
            
            <param name="ordinal">Column ordinal (see <see cref="M:Teradata.Client.Provider.TdDataReader.GetOrdinal(System.String)"/>).</param>
            
            <returns>
            Returns the value of the specified field represented as a System.Float type.
            </returns>
            
            <exception cref="T:System.IndexOutOfRangeException"><paramref name="ordinal"/> is less than 
            zero or <paramref name="ordinal"/> is equal to or greater than <see cref="P:Teradata.Client.Provider.TdDataReader.FieldCount"/>.</exception>
            <exception cref="T:System.InvalidCastException">The field cannot be converted into System.Float. 
            A null field will result in an exception.</exception>
            <exception cref="T:System.InvalidOperationException">CommandBehavior is set to SchemaOnly, 
            or there is no data for the row or column, or preceding columns are no longer accessible.</exception>
            <exception cref="T:System.ObjectDisposedException">The TdDataReader is closed.</exception>
            <exception cref="T:Teradata.Client.Provider.TdException">The Teradata Database returned an error, or .NET Data Provider for 
            Teradata detected an error.</exception>
            
            <remarks>
            Teradata FLOAT data type is synonymous with REAL and DOUBLE PRECISION. It is 
            strongly recommended that you use GetDouble to retrieve columns of type FLOAT (DOUBLE PRECISION).
            </remarks>
            
        </member>
        <member name="M:Teradata.Client.Provider.TdDataReader.GetGuid(System.Int32)">
            <summary>
            Teradata Database does not support globally-unique identifiers.
            This method will always throw and exception.        
            </summary>
            
            <param name="ordinal">Column ordinal (see <see cref="M:Teradata.Client.Provider.TdDataReader.GetOrdinal(System.String)"/>).</param>
            
            <returns>
            Returns the value of the specified field represented as a System.Guid type.
            </returns>
            
            <exception cref="T:System.IndexOutOfRangeException"><paramref name="ordinal"/> is less than 
            zero or <paramref name="ordinal"/> is equal to or greater than <see cref="P:Teradata.Client.Provider.TdDataReader.FieldCount"/>.</exception>
            <exception cref="T:System.InvalidCastException">The field cannot be converted into System.String. 
            A null field will result in an exception.</exception>
            <exception cref="T:System.InvalidOperationException">CommandBehavior is set to SchemaOnly, or 
            there is no data for the row or column, or preceding columns are no longer accessible.</exception>
            <exception cref="T:System.ObjectDisposedException">The TdDataReader is closed.</exception>
            <exception cref="T:Teradata.Client.Provider.TdException">The Teradata Database returned an error, or .NET Data Provider for 
            Teradata detected an error.</exception>
        </member>
        <member name="M:Teradata.Client.Provider.TdDataReader.GetInt16(System.Int32)">
            <summary>
            Gets the value of the specified field (column) as an Int16.
            </summary>
            
            <param name="ordinal">Column ordinal (see <see cref="M:Teradata.Client.Provider.TdDataReader.GetOrdinal(System.String)"/>).</param>
            
            <returns>
            Returns the value of the specified field represented as a System.Int16 type.
            </returns>
            
            <exception cref="T:System.IndexOutOfRangeException"><paramref name="ordinal"/> is less than 
            zero or <paramref name="ordinal"/> is equal to or greater than <see cref="P:Teradata.Client.Provider.TdDataReader.FieldCount"/>.</exception>
            <exception cref="T:System.InvalidCastException">The field cannot be converted into System.Int16. 
            A null field will result in an exception.</exception>
            <exception cref="T:System.InvalidOperationException">CommandBehavior is set to SchemaOnly, or there 
            is no data for the row or column, or preceding columns are no longer accessible.</exception>
            <exception cref="T:System.ObjectDisposedException">The TdDataReader is closed.</exception>
            <exception cref="T:Teradata.Client.Provider.TdException">The Teradata Database returned an error, or .NET Data Provider for 
            Teradata detected an error.</exception>
            
            <remarks>
            Use this method to retrieve columns of type BYTEINT or SMALLINT. 
            <para></para>
            <para>If the column is not of type BYTEINT or SMALLINT, the .NET Data Provider 
            for Teradata uses the .NET Framework class libraries to convert the underlying 
            field to a System.Int16.</para>
            </remarks>
            
        </member>
        <member name="M:Teradata.Client.Provider.TdDataReader.GetInt32(System.Int32)">
            <summary>
            Gets the value of the specified field (column) as an Int32.
            </summary>
            
            <param name="ordinal">Column ordinal (see <see cref="M:Teradata.Client.Provider.TdDataReader.GetOrdinal(System.String)"/>).</param>
            
            <returns>
            Returns the value of the specified field represented as a System.Int32 type.
            </returns>
            
            <exception cref="T:System.IndexOutOfRangeException"><paramref name="ordinal"/> is less than 
            zero or <paramref name="ordinal"/> is equal to or greater than <see cref="P:Teradata.Client.Provider.TdDataReader.FieldCount"/>.</exception>
            <exception cref="T:System.InvalidCastException">The field cannot be converted into System.Int32. 
            A null field will result in an exception.</exception>
            <exception cref="T:System.InvalidOperationException">CommandBehavior is set to SchemaOnly, or 
            there is no data for the row or column, or preceding columns are no longer accessible.</exception>
            <exception cref="T:System.ObjectDisposedException">The TdDataReader is closed.</exception>
            <exception cref="T:Teradata.Client.Provider.TdException">The Teradata Database returned an error, or .NET Data Provider for 
            Teradata detected an error.</exception>
            
            <remarks>
            Use this method to retrieve columns of type INTEGER. 
            <para></para>
            <para>If the column is not of type INTEGER, the .NET Data Provider 
            for Teradata uses the .NET Framework class libraries to convert the underlying 
            field to a System.Int32.</para>
            </remarks>
            
        </member>
        <member name="M:Teradata.Client.Provider.TdDataReader.GetInt64(System.Int32)">
            <summary>
            Gets the value of the specified field (column) as an Int64.
            </summary>
            
            <param name="ordinal">Column ordinal (see <see cref="M:Teradata.Client.Provider.TdDataReader.GetOrdinal(System.String)"/>).</param>
            
            <returns>
            Returns the value of the specified field represented as a System.Int64 type.
            </returns>
            
            <exception cref="T:System.IndexOutOfRangeException"><paramref name="ordinal"/> is less than 
            zero or <paramref name="ordinal"/> is equal to or greater than <see cref="P:Teradata.Client.Provider.TdDataReader.FieldCount"/>.</exception>
            <exception cref="T:System.InvalidCastException">The field cannot be converted into System.Int64. 
            A null field will result in an exception.</exception>
            <exception cref="T:System.OverflowException">Conversion overflow. For example Teradata DECIMAL(38) 
            might result in Overflow when converted to <see cref="T:System.Decimal"/>.</exception>
            <exception cref="T:System.InvalidOperationException">CommandBehavior is set to SchemaOnly, or 
            there is no data for the row or column, or preceding columns are no longer accessible.</exception>
            <exception cref="T:System.ObjectDisposedException">The TdDataReader is closed.</exception>
            <exception cref="T:Teradata.Client.Provider.TdException">The Teradata Database returned an error, or .NET Data Provider for 
            Teradata detected an error.</exception>
            
            <remarks>
            The .NET Data Provider for Teradata uses the .NET Framework class libraries to 
            convert the underlying field to a System.Int64.   
            <para></para>
            
            <para>The Teradata Database does not have direct support for an eight-byte 
            singed integer. The closest Teradata data type is DECIMAL(18,0).</para>
            </remarks>
        </member>
        <member name="M:Teradata.Client.Provider.TdDataReader.GetName(System.Int32)">
            <summary>
            Gets the name of the specified column.
            </summary>
            
            <param name="ordinal">Column ordinal (see <see cref="M:Teradata.Client.Provider.TdDataReader.GetOrdinal(System.String)"/>).</param>
            
            <returns>
            Returns the name fo the specified column.
            </returns>
            <exception cref="T:System.IndexOutOfRangeException"><paramref name="ordinal"/> is less than 
            zero or <paramref name="ordinal"/> is equal to or greater than <see cref="P:Teradata.Client.Provider.TdDataReader.FieldCount"/>.</exception>
            <exception cref="T:System.InvalidOperationException">CommandBehavior is set to SchemaOnly, or there 
            is no data for the row or column, or preceding columns are no longer accessible.</exception>
            <exception cref="T:System.ObjectDisposedException">The TdDataReader is closed.</exception>
            
            <remarks>
            The .NET Data Provider for Teradata returns the name of the specified column. 
            If name is not available the title is returned to the application.
            </remarks>
            
        </member>
        <member name="M:Teradata.Client.Provider.TdDataReader.GetOrdinal(System.String)">
            <summary>
            Gets the index of the specified column.
            </summary>
            
            <param name="name">The name of the column.</param>
            
            <returns>
            Returns the index of the named column.
            </returns>
            <exception cref="T:System.IndexOutOfRangeException"><paramref name="name"/>does not match any of the columns in TdDataReader.</exception>
            <exception cref="T:System.InvalidOperationException">CommandBehavior is set to SchemaOnly, or there is no data for the row or column, or preceding columns are no longer accessible.</exception>
            <exception cref="T:System.ObjectDisposedException">The TdDataReader is closed.</exception>
            
            <remarks>
            GetOrdinal returns the ordinal (the index of the array) of the specified column. 
            See IDataRecord.GetOrdinal for string comparison rules 
            (case sensitive / insensitive). Since column names might not be unique,  
            the ordinal of first matching column is returned.
            </remarks>
            
        </member>
        <member name="M:Teradata.Client.Provider.TdDataReader.GetString(System.Int32)">
            <summary>
            Gets the value of the specified field (column) as a String.
            </summary>
            
            <param name="ordinal">Column ordinal (see <see cref="M:Teradata.Client.Provider.TdDataReader.GetOrdinal(System.String)"/>).</param>
            
            <returns>
            Returns the value of the specified field represented as a System.String type.
            </returns>
            
            <exception cref="T:System.IndexOutOfRangeException"><paramref name="ordinal"/> is less than 
            zero or <paramref name="ordinal"/> is equal to or greater than <see cref="P:Teradata.Client.Provider.TdDataReader.FieldCount"/>.</exception>
            <exception cref="T:System.InvalidCastException">The field cannot be converted into System.String. 
            A null field will result in an exception.</exception>
            <exception cref="T:System.InvalidOperationException">CommandBehavior is set to SchemaOnly, or 
            there is no data for the row or column, or preceding columns are no longer accessible.</exception>
            <exception cref="T:System.ObjectDisposedException">The TdDataReader is closed.</exception>
            <exception cref="T:Teradata.Client.Provider.TdException">The Teradata Database returned an error, or .NET Data Provider for 
            Teradata detected an error.</exception>
            
            <remarks>
            use this method to retrieve columns of type CHAR and VARCHAR.
            <para></para>
            <para>The .NET Data Provider for Teradata uses the .NET Framework class 
            libraries to convert the underlying field to a System.String.</para>
            </remarks>
            
        </member>
        <member name="M:Teradata.Client.Provider.TdDataReader.GetValue(System.Int32)">
            <summary>
            Gets the value of the specified field (column) as an Object.
            </summary>
            
            <param name="ordinal">Column ordinal (see <see cref="M:Teradata.Client.Provider.TdDataReader.GetOrdinal(System.String)"/>).</param>
            
            <returns>
            Returns the value of the specified field represented as a System.Object type.
            </returns>
            
            <exception cref="T:System.IndexOutOfRangeException"><paramref name="ordinal"/> is less than 
            zero or <paramref name="ordinal"/> is equal to or greater than <see cref="P:Teradata.Client.Provider.TdDataReader.FieldCount"/> or operating in <see cref="F:System.Data.CommandBehavior.SequentialAccess"/> mode and specified column is not accessible.</exception>
            <exception cref="T:System.InvalidOperationException">CommandBehavior is set to SchemaOnly, or 
            there is no data for the row or column, or preceding columns are no longer accessible.</exception>
            <exception cref="T:System.OverflowException">Conversion overflow. For example Teradata DECIMAL(38) 
            might result in Overflow when converted to <see cref="T:System.Decimal"/>.</exception>
            <exception cref="T:System.ObjectDisposedException">The TdDataReader is closed.</exception>
            <exception cref="T:Teradata.Client.Provider.TdException">Teradata Database returned an error or .NET Data Provider for 
            Teradata detected an error.</exception>
            
            <remarks>
            GetValue returns a System.Object (It is the root of all types) and therefore  
            is used to retrieve any Teradata data type. The Data Provider maps the Teradata data 
            types to .NET Framework types and returns a reference 
            to the .NET Framework instance. 
            <para></para>
            <para>GetValue is the most flexible field retrieval method and is also the slowest 
            field retrieval method. It is strongly recommended to use the other 
            strongly typed field retrieval methods (for example, GetInt32).</para>
            <para></para>
            <para>This method does not throw an exception for null 
            database fields. It returns an instance of DBNull.</para>
            </remarks>
        </member>
        <member name="M:Teradata.Client.Provider.TdDataReader.GetProviderSpecificValue(System.Int32)">
            <summary>
            Gets the value of the specified field (column) as an Object.
            </summary>
            
            <param name="ordinal">Column ordinal (see <see cref="M:Teradata.Client.Provider.TdDataReader.GetOrdinal(System.String)"/>).</param>
            
            <returns>
            Returns the value of the specified field represented as a System.Object type.
            </returns>
            
            <exception cref="T:System.IndexOutOfRangeException"><paramref name="ordinal"/> is less than 
            zero or <paramref name="ordinal"/> is equal to or greater than <see cref="P:Teradata.Client.Provider.TdDataReader.FieldCount"/> or 
            operating in <see cref="F:System.Data.CommandBehavior.SequentialAccess"/> mode and specified 
            column is not accessible.</exception>
            <exception cref="T:System.InvalidOperationException">CommandBehavior is set to SchemaOnly, or there 
            is no data for the row or column, or preceding columns are no longer accessible.</exception>
            <exception cref="T:System.ObjectDisposedException">The TdDataReader is closed.</exception>
            <exception cref="T:Teradata.Client.Provider.TdException">Teradata Database returned an error or .NET Data Provider for 
            Teradata detected an error.</exception>
            
            <remarks>
            GetProviderSpecificValue returns a System.Object (It is the root of all types) and therefore  
            is used to retrieve any Teradata data type. The Data Provider maps the Teradata data 
            types to .NET Framework types and returns a reference to the .NET Framework instance. 
            It returns <see cref="T:Teradata.Client.Provider.TdBlob"/> and <see cref="T:Teradata.Client.Provider.TdClob"/> 
            instances when BLOB and CLOB columns are retrieved in deferred mode.
            <para></para>
            <para>GetProviderSpecificValue is the most flexible field retrieval method and is also 
            the slowest field retrieval method. It is strongly recommended to use the other 
            strongly typed field retrieval methods (for example, GetInt32).</para>
            <para></para>
            <para>This method does not throw an exception for null database fields. It returns 
            an instance of DBNull.</para>
            </remarks>
        </member>
        <member name="M:Teradata.Client.Provider.TdDataReader.GetValues(System.Object[])">
            <summary>
            Gets the value of the specified field (column) as an Object.
            </summary>
            
            <param name="values">An array of System.Object.</param>
            
            <returns>
            Returns the number of fields returned using the object array (<paramref name="values"/>).
            </returns>
            
            <exception cref="T:System.InvalidOperationException">CommandBehavior is set to SchemaOnly, or there is no data for the row or column, or preceding columns are no longer accessible.</exception>
            <exception cref="T:System.ObjectDisposedException">The TdDataReader is closed.</exception>
            <exception cref="T:Teradata.Client.Provider.TdException">The Teradata Database returned an error, or .NET Data Provider for Teradata detected an error.</exception>
            
            <remarks>
            GetValues is used to retrieve the first N fields where N is less than or equal 
            to the number of columns.
            <para></para>
            <para>System.Object is the root of all types and therefore can be used to retrieve 
            any Teradata data type. The Data Provider maps the Teradata data types to .NET 
            Framework types and returns references to the .NET Framework instance. 
            </para>
            <para></para>
            <para>GetValues is the most flexible field retrieval method. However all 
            value types (for example, Int32) are boxed which results in higher resource 
            utilization and are subject to garbage collection.</para>
            <para></para>
            <para>This method does not throw an exception for null 
            database fields. It returns an instance of DBNull.</para>
            <para></para>
            <para>GetValues supports sequential access by simply returning the remaining fields.
            It returns values for fields M through N where M is the last field retrieved plus one and 
            N is either number of fields or the length of <paramref name="values"/>, 
            whichever is smaller. For example it would return values for fields 2 through 5 
            if the first field was already retrieved and there are 5 columns per row.</para>
            </remarks>
        </member>
        <member name="M:Teradata.Client.Provider.TdDataReader.GetProviderSpecificValues(System.Object[])">
            <summary>
            Gets the value of the specified fields (column) as an Object.
            </summary>
            
            <param name="values">An array of System.Object.</param>
            
            <returns>
            Returns the number of fields returned using the object array (<paramref name="values"/>).
            </returns>
            
            <exception cref="T:System.InvalidOperationException">CommandBehavior is set to SchemaOnly, or there is no data for the row or column, or preceding columns are no longer accessible.</exception>
            <exception cref="T:System.ObjectDisposedException">The TdDataReader is closed.</exception>
            <exception cref="T:Teradata.Client.Provider.TdException">The Teradata Database returned an error, or .NET Data Provider for Teradata detected an error.</exception>
            
            <remarks>
            GetProviderSpecificValues is used to retrieve the first N fields where N is less than or equal 
            to the number of columns.
            <para></para>
            <para>System.Object is the root of all types and therefore can be used to retrieve 
            any Teradata data type. The Data Provider maps the Teradata data types to .NET 
            Framework types and returns references to the .NET Framework instance. 
            It returns <see cref="T:Teradata.Client.Provider.TdBlob"/> and <see cref="T:Teradata.Client.Provider.TdClob"/> 
            instances when BLOB and CLOB columns are retrieved in deferred mode.
            </para>
            <para></para>
            <para>GetValues is the most flexible field retrieval method. However all 
            value types (for example, Int32) are boxed which results in higher resource 
            utilization and are subject to garbage collection.</para>
            <para></para>
            <para>This method does not throw an exception for null 
            database fields. It returns an instance of DBNull.</para>
            <para></para>
            <para>GetProviderSpecificValues supports sequential access by simply returning the remaining fields.
            It returns values for fields M through N where M is the last field retrieved plus one and 
            N is either number of fields or the length of <paramref name="values"/>, 
            whichever is smaller. For example it would return values for fields 2 through 5 
            if the first field was already retrieved and there are 5 columns per row.</para>
            </remarks>
            
        </member>
        <member name="M:Teradata.Client.Provider.TdDataReader.IsDBNull(System.Int32)">
            <summary>
            Indicates whether the field is null.
            </summary>
            
            <param name="ordinal">Column ordinal (see <see cref="M:Teradata.Client.Provider.TdDataReader.GetOrdinal(System.String)"/>).</param>
            
            <value>
            Returns <c>true</c> if  the value of the specified field (i) is null.
            </value>
            
            <exception cref="T:System.IndexOutOfRangeException"><paramref name="ordinal"/> is less than 
            zero or <paramref name="ordinal"/> is equal to or greater than <see cref="P:Teradata.Client.Provider.TdDataReader.FieldCount"/>.</exception>
            <exception cref="T:System.InvalidOperationException">CommandBehavior is set to SchemaOnly, or 
            there is no data for the row or column, or preceding columns are no longer accessible.</exception>
            <exception cref="T:System.ObjectDisposedException">The TdDataReader is closed.</exception>
            <exception cref="T:Teradata.Client.Provider.TdException">The Teradata Database returned an error, or .NET Data Provider for 
            Teradata detected an error.</exception>
            <remarks>
            Call this method to check whether the field is null. The primitive data 
            types cannot represent null values. Therefore the typed get methods (for example, GetInt32) 
            will throw an exception when the field is null.
            </remarks>
            
        </member>
        <member name="M:Teradata.Client.Provider.TdDataReader.Close">
            <summary>
            Closes the TdDataReader object and releases all associated resources.
            </summary>
            <remarks>
            Closes the TdDataReader object and releases all associated Teradata and client 
            resources. The Teradata Database limits the number of open TdDataReader objects per session. 
            Therefore it is very important to close the TdDataReader object. Doing this  
            closes the corresponding Teradata result set (spool).
            </remarks>
            
        </member>
        <member name="M:Teradata.Client.Provider.TdDataReader.GetSchemaTable">
            <summary>
            Returns a DataTable that has one row (DataRow) for each column. 
            The rows describe the column metadata.
            </summary>
            <returns>
            It returns a DataTable for data returning statements (SQL). The DataTable has one row 
            of metadata for each column. It returns <c>null</c> when there is no column metadata.
            </returns>
            <exception cref="T:System.ObjectDisposedException">The TdDataReader is closed.</exception>
            <remarks>
                <para>The GetSchemaTable returns the following metadata about each column in the
                TdDataReader:</para>
                <list type="table">
                    <listheader>
                        <term>Column Name</term>
                        <description>Type and Description</description>
                    </listheader>
                    <item>
                        <term>
                            <para>ColumnName</para>
                        </term>
                        <description>
                            <para>Type: String</para>
                            <para>The name of the column which may not be unique. The title of the
                            column is returned if the name is null.</para>
                        </description>
                    </item>
                    <item>
                        <term>
                            <para>ColumnOrdinal</para>
                        </term>
                        <description>
                            <para>Type: Int32</para>
                            <para>The ordinal (index of array) of the column. Columns are numbered
                            starting from zero.</para>
                        </description>
                    </item>
                    <item>
                        <term>
                            <para>ColumnSize</para>
                        </term>
                        <description>
                            <para>Type: Int32</para>
                            <para>The maximum possible length of the column in bytes or
                            characters.</para>
                            <list type="bullet">
                                <item>
                                    <description>
                                        <para>Numeric Data Types: This is the size of the data type
                                        in bytes (for example, 4 for INTEGER).</para>
                                    </description>
                                </item>
                                <item>
                                    <description>
                                        <para>Character and CLOB Data Types: The maximum length of
                                        the column in characters for LATIN, UNICODE and GRAPHIC.
                                        The maximum length of the column in bytes (single-byte
                                        character) for KANJI1 and KANJISJIS.</para>
                                    </description>
                                </item>
                                <item>
                                    <description>
                                        <para>Byte and BLOB Data Types: The maximum length of the
                                        column in bytes.</para>
                                    </description>
                                </item>
                                <item>
                                    <description>
                                        <para>DateTime and Interval Data Types: The maximum length
                                        of the column in characters.</para>
                                    </description>
                                </item>
                                <item>
                                    <description>
                                      <para>JSON Data Type: The maximum length of the column in characters.</para>
                                    </description>
                                </item>
                            </list>
                        </description>
                    </item>
                    <item>
                        <term>
                            <para>NumericPrecision</para>
                        </term>
                        <description>
                            <para>Type: Int16</para>
                            <list type="bullet">
                                <item>
                                    <description>
                                        <para>NUMERIC Data Types: This is the maximum precision of
                                        the column. The range of precision for DECIMAL Data type is
                                        from 1 to 38 and it depends on the column definition (for
                                        example, Decimal(13,2)).</para>
                                    </description>
                                </item>
                                <item>
                                    <description>
                                        <para>DateTime Data Types: This is the maximum length in
                                        characters.</para>
                                    </description>
                                </item>
                                <item>
                                    <description>
                                        <para>
                                            Interval Data Types: This is the number of digits in
                                            the most significant field of the interval. For example
                                            a <see cref="T:Teradata.Client.Provider.TdIntervalDayToHour"/> value of '400
                                            10' would contain a NumericPrecision of 3.
                                        </para>
                                    </description>
                                </item>
                                <item>
                                    <description>
                                        <para>All other Data Types: This field is set to
                                        255.</para>
                                    </description>
                                </item>
                            </list>
                        </description>
                    </item>
                    <item>
                        <term>
                            <para>NumericScale</para>
                        </term>
                        <description>
                            <para>Type: Int16</para>
                            <list type="bullet">
                                <item>
                                    <description>
                                        <para>Decimal Data Types: This is the maximum number of
                                        digits to the right of the decimal point.</para>
                                    </description>
                                </item>
                                <item>
                                    <description>
                                        <para>Time, Time With Time Zone, Timestamp and Timestamp
                                        With Time Zone Data Types: This is the maximum number of
                                        digits to the right of the decimal point.</para>
                                    </description>
                                </item>
                                <item>
                                    <description>
                                        <para>
                                            Interval Data Types: This is the maximum number of
                                            digits to the right of the decimal point for all
                                            intervals that contain seconds - <see cref="T:Teradata.Client.Provider.TdIntervalDayToSecond"/>, 
                                            <see cref="T:Teradata.Client.Provider.TdIntervalHourToSecond"/>, 
                                            <see cref="T:Teradata.Client.Provider.TdIntervalMinuteToSecond"/> and 
                                            <see cref="T:Teradata.Client.Provider.TdIntervalSecond"/>.
                                        </para>
                                    </description>
                                </item>
                                <item>
                                    <description>
                                        <para>All other Data Types: This field is set to
                                        255.</para>
                                    </description>
                                </item>
                            </list>
                        </description>
                    </item>
                    <item>
                        <term>
                            <para>DataType</para>
                        </term>
                        <description>
                            <para>Type: Type</para>
                            <para>The .NET Framework data type of the column.</para>
                        </description>
                    </item>
                    <item>
                        <term>
                            <para>ProviderType</para>
                        </term>
                        <description>
                            <para>Type: Int32</para>
                            <para>Teradata data type of the column. See TdType Enumeration.</para>
                        </description>
                    </item>
                    <item>
                        <term>
                            <para>IsLong</para>
                        </term>
                        <description>
                            <para>Type: Boolean</para>
                                <list type="bullet">
                                    <item>
                                        <description>
                                            CLOB, BLOB, XML and JSON Data Types: This column is set to true.
                                        </description>
                                    </item>
                                    <item>
                                        <description>
                                            All other Data Types: This column is set to false.
                                        </description>
                                    </item>
                                </list>
                        </description>
                    </item>
                    <item>
                        <term>
                            <para>AllowDBNull</para>
                        </term>
                        <description>
                            <para>Type: Boolean</para>
                            <para>Set to true if column does not have a ‘NOT NULL’ attribute. See
                            Teradata Database SQL Reference – Data Types and Literals.</para>
                        </description>
                    </item>
                    <item>
                        <term>
                            <para>IsReadOnly</para>
                        </term>
                        <description>
                            <para>Type: Boolean</para>
                                <list type="bullet">
                                    <item>
                                        <description>
                                            <para>Teradata Database 6.1 or earlier: This column is
                                            always set to false.</para>
                                        </description>
                                    </item>
                                    <item>
                                        <description>
                                            <para>
                                                Teradata Database 6.2 or higher and <see cref="P:Teradata.Client.Provider.TdConnectionStringBuilder.UseEnhancedSchemaTable"/>
                                                option is set to true: This DataTable column is set
                                                to true if any of the following conditions are
                                                true:
                                            </para>
                                            <list type="number">
                                                <item>
                                                    <description>
                                                        Teradata column is defined as "GENERATED ALWAYS AS IDENTITY".
                                                    </description>
                                                </item>
                                                <item>
                                                    <description>Teradata column is the result of an expression.</description>
                                                </item>
                                                <item>
                                                    <description>User does not have UPDATE privilege/permission to the column.
                                                    </description>
                                                </item>
                                            </list>
                                        </description>
                                    </item>
                                </list>
                        </description>
                    </item>
                    <item>
                        <term>
                            <para>IsRowVersion</para>
                        </term>
                        <description>
                            <para>Type: Boolean</para>
                            <para>This column is always set to false.</para>
                        </description>
                    </item>
                    <item>
                        <term>
                            <para>IsUnique</para>
                        </term>
                        <description>
                            <para>Type: Boolean</para>
                                <list type="bullet">
                                    <item>
                                        <description>
                                            <para>Teradata Database 6.1 or earlier: This column is
                                            always set to false.</para>
                                        </description>
                                    </item>
                                    <item>
                                        <description>
                                            <para>Teradata Database 6.2 or higher and
                                            <strong>UseEnhancedSchemaTable</strong> option is set
                                            to true: This DataTable column is set to true if any of
                                            the following conditions are true for the base table
                                            (BaseTableName):</para>
                                            <list type="number">
                                                <item>
                                                    <description>
                                                        <para>The Teradata column represents a
                                                        Primary Key by itself.</para>
                                                    </description>
                                                </item>
                                                <item>
                                                    <description>
                                                        <para>The Teradata column is the one and
                                                        only column of a Unique Constraint.</para>
                                                    </description>
                                                </item>
                                                <item>
                                                    <description>
                                                        <para>The Teradata column is the one and
                                                        only column of a Unique Index.</para>
                                                    </description>
                                                </item>
                                            </list>
                                        </description>
                                    </item>
                                </list>
                        </description>
                    </item>
                    <item>
                        <term>
                            <para>IsKey</para>
                        </term>
                        <description>
                            <para>Type: Boolean</para>
                                <list type="bullet">
                                    <item>
                                        <description>
                                            <para>Teradata Database 6.1 or earlier: This column is
                                            always set to false.</para>
                                        </description>
                                    </item>
                                    <item>
                                        <description>
                                            <para>Teradata Database 6.2 or higher and
                                            <strong>UseEnhancedSchemaTable</strong> option is set
                                            to true:</para>
                                            <list type="bullet">
                                                <item>
                                                    <description>
                                                        <para><strong>true</strong>: The column is
                                                        one of a set of columns (one or more) in
                                                        the DataReader that, taken together,
                                                        uniquely identify the row in the base-table
                                                        (see BaseTableName).</para>
                                                    </description>
                                                </item>
                                                <item>
                                                    <description>
                                                        <para><strong>false</strong>: The column is
                                                        not part of a Key.</para>
                                                    </description>
                                                </item>
                                            </list>
                                            <para>Note: IsKey and IsUnique columns are set to true
                                            for a Primary Key with one column.</para>
                                        </description>
                                    </item>
                                </list>
                        </description>
                    </item>
                    <item>
                        <term>
                            <para>IsAutoIncrement</para>
                        </term>
                        <description>
                            <para>Type: Boolean</para>
                                <list type="bullet">
                                    <item>
                                        <description>
                                            <para>Teradata Database 6.1 or earlier: This column is
                                            always set to false.</para>
                                        </description>
                                    </item>
                                    <item>
                                        <description>
                                            <para>Teradata Database 6.2 or higher and
                                            <strong>UseEnhancedSchemaTable</strong> option is set
                                            to true: This field is set to <strong>true</strong> if
                                            the column is declared as a "GENERATED ALWAYS" Identity
                                            column; otherwise it is set to false.</para>
                                        </description>
                                    </item>
                                </list>
                        </description>
                    </item>
                    <item>
                        <term>
                            <para>BaseSchemaName</para>
                        </term>
                        <description>
                            <para>Type: String</para>
                                <list type="bullet">
                                    <item>
                                        <description>
                                            <para>Teradata Database 6.1 or earlier: This column is
                                            always set to null.</para>
                                        </description>
                                    </item>
                                    <item>
                                        <description>
                                            <para>Teradata Database 6.2 or higher and
                                            <strong>UseEnhancedSchemaTable</strong> option is set
                                            to true: This field is set to the name of the Database
                                            that contains the base table. It is set to null if the
                                            Database name cannot be determined.</para>
                                        </description>
                                    </item>
                                </list>
                        </description>
                    </item>
                    <item>
                        <term>
                            <para>BaseCatalogName</para>
                        </term>
                        <description>
                            <para>Type: String</para>
                            <para>This column is always set to null.</para>
                        </description>
                    </item>
                    <item>
                        <term>
                            <para>BaseTableName</para>
                        </term>
                        <description>
                            <para>Type: String</para>
                                <list type="bullet">
                                    <item>
                                        <description>
                                            <para>Teradata Database 6.1 or earlier: This column is
                                            always set to null.</para>
                                        </description>
                                    </item>
                                    <item>
                                        <description>
                                            <para>Teradata Database 6.2 or higher and
                                            <strong>UseEnhancedSchemaTable</strong> option is set
                                            to true: This field is set to the name of the Table or
                                            View that contains the base column. It is set to null
                                            if the Table or View name cannot be determined.</para>
                                        </description>
                                    </item>
                                </list>
                        </description>
                    </item>
                    <item>
                        <term>
                            <para>BaseColumnName</para>
                        </term>
                        <description>
                            <para>Type: String</para>
                                <list type="bullet">
                                    <item>
                                        <description>
                                            <para>Teradata Database 6.1 or earlier: This column is
                                            always set to null.</para>
                                        </description>
                                    </item>
                                    <item>
                                        <description>
                                            <para>Teradata Database 6.2 or higher and
                                            <strong>UseEnhancedSchemaTable</strong> option is set
                                            to true: This field is set to the name of the Column in
                                            Teradata Database. It will not match the ColumnName
                                            when an Alias (AS) is used. It is set to null if the
                                            Column name cannot be determined.</para>
                                        </description>
                                    </item>
                                </list>
                        </description>
                    </item>
                    <item>
                        <term>
                            <para>Title</para>
                        </term>
                        <description>
                            <para>Type: String</para>
                            <para>Teradata TITLE defines a heading for the column that can be
                            different from the column name. For additional information refer to
                            Data Types and Literals SQL Reference manual for Teradata.</para>
                        </description>
                    </item>
                    <item>
                        <term>
                            <para>Format</para>
                        </term>
                        <description>
                            <para>Type: String</para>
                            <para>Teradata FORMAT controls the display of expressions and column
                            data. It has no affect on Numeric, DateTime and Interval columns
                            retrieved through methods like GetInt32, GetDecimal, GetDate. However
                            CHAR and VARCHAR columns are affected by the FORMAT; as Teradata
                            Database applies the FORMAT to the data before it is send to the .NET
                            Data Provider for Teradata. For additional information refer to Data
                            Types and Literals SQL Reference manual for Teradata.</para>
                        </description>
                    </item>
                    <item>
                        <term>
                            <para>ProviderSpecificDataType</para>
                        </term>
                        <description>
                            <para>Type: System.Type</para>
                            <para>
                                .NET Data Provider for Teradata Provider Specific Type. Refer to
                                <see cref="M:Teradata.Client.Provider.TdDataReader.GetProviderSpecificFieldType(System.Int32)"/> for additional
                                information.
                            </para>
                        </description>
                    </item>
                    <item>
                        <term>
                            <para>IsAliased</para>
                        </term>
                        <description>
                            <para>Type: Boolean</para>
                                <list type="bullet">
                                    <item>
                                        <description>
                                            <para>Teradata Database 6.1 or earlier: This column is
                                            always set to false.</para>
                                        </description>
                                    </item>
                                    <item>
                                        <description>
                                            <para>Teradata Database 6.2 or higher and
                                            <strong>UseEnhancedSchemaTable</strong> option is set
                                            to true: This field is set to true if the ColumnName is
                                            an alias; otherwise it is set to false.</para>
                                        </description>
                                    </item>
                                </list>
                        </description>
                    </item>
                    <item>
                        <term>
                            <para>IsExpression</para>
                        </term>
                        <description>
                            <para>Type: Boolean</para>
                                <list type="bullet">
                                    <item>
                                        <description>
                                            <para>Teradata Database 6.1 or earlier: This column is
                                            always set to false.</para>
                                        </description>
                                    </item>
                                    <item>
                                        <description>
                                            <para>Teradata Database 6.2 or higher and
                                            <strong>UseEnhancedSchemaTable</strong> option is set
                                            to true: This field is set to true if the column is a
                                            result of an expression; otherwise it is set to
                                            false.</para>
                                        </description>
                                    </item>
                                </list>
                        </description>
                    </item>
                    <item>
                        <term>
                            <para>IsIdentity</para>
                        </term>
                        <description>
                            <para>Type: Boolean</para>
                                <list type="bullet">
                                    <item>
                                        <description>
                                            <para>Teradata Database 6.1 or earlier: This column is
                                            always set to false.</para>
                                        </description>
                                    </item>
                                    <item>
                                        <description>
                                            <para>Teradata Database 6.2 or higher and
                                            <strong>UseEnhancedSchemaTable</strong> option is set
                                            to true: This field is set to true if the column is an
                                            Identity column; otherwise it is set to false.</para>
                                        </description>
                                    </item>
                                </list>
                        </description>
                    </item>
                    <item>
                        <term>
                            <para>TemporalType</para>
                        </term>
                        <description>
                            <para>Type: Byte</para>
                                <list type="bullet">
                                    <item>
                                        <description>
                                            <para>Teradata Database 13.0 or earlier: This column is 
                                              always set to 255.</para>
                                        </description>
                                    </item>
                                    <item>
                                        <description>
                                            <para>Teradata Database 13.10 or higher and
                                                <strong>UseEnhancedSchemaTable</strong> option is set
                                                to true:
                                            </para>
                                            <list type="bullet">
                                                <item>
                                                    <description>
                                                        <para>
                                                            <strong>0</strong>: The column is
                                                            a non-temporal column.
                                                        </para>
                                                    </description>
                                                </item>
                                                <item>
                                                    <description>
                                                        <para>
                                                            <strong>1</strong>: The column is
                                                            a ValidTime temporal column.
                                                        </para>
                                                    </description>
                                                </item>
                                                <item>
                                                    <description>
                                                        <para>
                                                            <strong>2</strong>: The column is
                                                            a TransactionTime temporal column.
                                                        </para>
                                                    </description>
                                                </item>
                                            </list>
                                        </description>
                                    </item>
                                    <item>
                                        <description>
                                            <para>Teradata Database 13.10 or higher and
                                                <strong>UseEnhancedSchemaTable</strong> option is set
                                                to false: This column is always set to 255.
                                            </para>
                                        </description>
                                    </item>
                                </list>
                        </description>
                    </item>
                    <item>
                        <term>
                            <para>ColumnInfo</para>
                        </term>
                        <description>
                            <para>Type:  String</para>
                            <para>Teradata Database 13.10 or earlier: This column is always set to null.</para>
                            <para>Teradata Database 14.0 or higher: </para>
                            <list type="table">
                                <item>
                                    <term>FIXED</term>
                                    <description>The NUMBER represents a fixed decimal point number.
                                    </description>
                                </item>
                                <item>
                                    <term>FLOAT</term>
                                    <description>The NUMBER represents a floating decimal point number.
                                    </description>
                                </item>
                                <item>
                                    <term>TEXT</term>
                                    <description>JSON storage format.</description>
                                </item>
                                <item>
                                    <term>BSON</term>
                                    <description>JSON storage format.</description>
                                </item>
                                <item>
                                    <term>UBJSON</term>
                                    <description>JSON storage format.</description>
                                </item>
                            </list>
                        </description>
                    </item>
                    <item>
                        <term>
                            <para>DefaultValue</para>
                        </term>
                        <description>
                            <para>Type: String</para>
                                <list type="bullet">
                                    <item>
                                        <description>
                                            <para>Teradata Database 6.1 or earlier: This column is
                                            always set to null.</para>
                                        </description>
                                    </item>
                                    <item>
                                        <description>
                                            <para>Teradata Database 6.2 or higher and
                                            <strong>UseEnhancedSchemaTable</strong> option is set
                                            to true: This field is set to the default value assigned to the Column in
                                            Teradata Database. It is set to null if the column does not have
                                            a default value associated with it.</para>
                                        </description>
                                    </item>
                                </list>
                        </description>
                    </item>
                    <item>
                        <term>
                            <para>UDTName</para>
                        </term>
                        <description>
                            <para>Type: String</para>
                                <list type="bullet">
                                    <item>
                                        <description>
                                            <para>Teradata Database 6.1 or earlier: This column is
                                            always set to null.</para>
                                        </description>
                                    </item>
                                    <item>
                                        <description>
                                            <para>Teradata Database 6.2 or higher and
                                            <strong>UseEnhancedSchemaTable</strong> option is set
                                            to true: This field is set to the fully qualified UDT name if the column 
                                            is a user defined type. It is set to null if the column is not a 
                                            user defined type.</para>
                                        </description>
                                    </item>
                                </list>
                        </description>
                    </item>
                    <item>
                        <term>
                            <para>UDTType</para>
                        </term>
                        <description>
                            <para>Type: Byte</para>
                            Specifies the Type of the User-Defined-Type:
                            <list type="table">
                                <item>
                                    <term>1</term>
                                    <description>Structured</description>
                                </item>
                                <item>
                                    <term>2</term>
                                    <description>Distinct</description>
                                </item>
                                <item>
                                    <term>3</term>
                                    <description>Internal</description>
                                </item>
                                <item>
                                    <term>DBNull</term>
                                    <description>Undefined or Not a User-Defined-Type column.</description>
                                </item>
                            </list>
                        </description>
                    </item>
                    <item>
                        <term>
                            <para>CharacterSet</para>
                        </term>
                        <description>
                            <para>Type: Byte</para>
                            Specifies the server character set for a character column:
                            <list type="table">
                                <item>
                                    <term>1</term>
                                    <description>Latin</description>
                                </item>
                                <item>
                                    <term>2</term>
                                    <description>Unicode</description>
                                </item>
                                <item>
                                    <term>3</term>
                                    <description>KanjiSJIS</description>
                                </item>
                                <item>
                                    <term>4</term>
                                    <description>Graphic</description>
                                </item>
                                <item>
                                    <term>5</term>
                                    <description>Kanji1</description>
                                </item>
                                <item>
                                    <term>DBNull</term>
                                    <description>Undefined or not a Character column.</description>
                                </item>
                            </list>
                        </description>
                    </item>
                </list>
            </remarks>
        </member>
        <member name="M:Teradata.Client.Provider.TdDataReader.NextResult">
            <summary>
            Advances the data reader to the next result set.
            </summary>
            
            <returns>Returns <c>true</c> if the reader is advanced to the next result set. 
            Returns <c>false</c> if there are no additional result sets.</returns>
            
            <exception cref="T:System.ObjectDisposedException">The TdDataReader is closed.</exception>
            <exception cref="T:Teradata.Client.Provider.TdException">The Teradata Database returned an error, or .NET Data Provider for Teradata detected an error.</exception>
            
            <remarks>
            The data reader allows access to one result set at a time. NextResult is used 
            to advance to the next result set generated by a multi-statement request. 
            </remarks>
            
        </member>
        <member name="M:Teradata.Client.Provider.TdDataReader.Read">
            <summary>
            Advances the data reader to the next record / row.
            </summary>
            
            <returns>Returns <c>true</c> if reader is advanced to the next record. 
            Returns <c>false</c> if the end of the result set is reached.</returns>
            
            <exception cref="T:System.ObjectDisposedException">The TdDataReader is closed.</exception>
            <exception cref="T:Teradata.Client.Provider.TdException">The Teradata Database returned an error, or .NET Data Provider for Teradata detected an error.</exception>
            
            <remarks>
            TdDataReader is conceptually a static forward-only cursor. Read method advances the 
            current position by one record. When data reader is first created, or when NextResult 
            method is called, the current position is set prior to the first record. 
            Therefore, you must call Read method to get access to the first record and 
            subsequent records. This maintains consistent semantics throughout 
            the interface at all times.
            </remarks>
            
        </member>
        <member name="M:Teradata.Client.Provider.TdDataReader.GetEnumerator">
            <summary>
            [To be supplied]
            </summary>
        </member>
        <member name="M:Teradata.Client.Provider.TdDataReader.GetDate(System.Int32)">
            <summary>
            Gets the value of the specified field (column) as a DateTime.
            </summary>
            
            <param name="ordinal">Column Ordinal</param>
            
            <returns>
            Returns the value of the specified field represented as a System.DateTime type.
            </returns>
            
            <exception cref="T:System.IndexOutOfRangeException"><paramref name="ordinal"/> is less than 
            zero or <paramref name="ordinal"/> is equal to or greater than <see cref="P:Teradata.Client.Provider.TdDataReader.FieldCount"/>.</exception>
            <exception cref="T:System.InvalidCastException">The field cannot be converted into System.DateTime. 
            A null field will result in an exception.</exception>
            <exception cref="T:System.InvalidOperationException">CommandBehavior is set to SchemaOnly, or 
            there is no data for the row or column, or preceding columns are no longer accessible.</exception>
            <exception cref="T:System.ObjectDisposedException">The TdDataReader is closed.</exception>
            <exception cref="T:Teradata.Client.Provider.TdException">The Teradata Database returned an error, or .NET Data Provider for 
            Teradata detected an error.</exception>
            
            <remarks>
            Use this method to retrieve columns of type DATE.
            </remarks>
            
        </member>
        <member name="M:Teradata.Client.Provider.TdDataReader.GetDateTimeOffset(System.Int32)">
            <summary>
            Gets the value of the specified field (column) as a DateTimeOffset.
            </summary>
            
            <param name="ordinal">Column ordinal (see <see cref="M:Teradata.Client.Provider.TdDataReader.GetOrdinal(System.String)"/>).</param>
            
            <returns>
            Returns the value of the specified field represented as a System.DateTimeOffset type.
            </returns>
            
            <exception cref="T:System.IndexOutOfRangeException"><paramref name="ordinal"/> is less than zero 
            or <paramref name="ordinal"/> is equal to or greater than <see cref="P:Teradata.Client.Provider.TdDataReader.FieldCount"/>.</exception>
            <exception cref="T:System.InvalidCastException">The field cannot be converted into System.DateTimeOffset. 
            A null field will result in an exception.</exception>
            <exception cref="T:System.InvalidOperationException">CommandBehavior is set to SchemaOnly, or there 
            is no data for the row or column, or preceding columns are no longer accessible.</exception>
            <exception cref="T:System.ObjectDisposedException">The TdDataReader is closed.</exception>
            <exception cref="T:Teradata.Client.Provider.TdException">The Teradata Database returned an error, or .NET Data Provider for 
            Teradata detected an error.</exception>
            
            <remarks>
            Use this method to retrieve columns of type TIMESTAMP WITH TIME ZONE. 
            </remarks>
        </member>
        <member name="M:Teradata.Client.Provider.TdDataReader.GetTdDate(System.Int32)">
            <summary>
            Gets the value of the specified field (column) as a TdDate.
            </summary>
            
            <param name="ordinal">Column Ordinal</param>
            
            <returns>
            Returns the value of the specified field represented as a TdDate type.
            </returns>
            
            
            <exception cref="T:System.IndexOutOfRangeException"><paramref name="ordinal"/> is less than 
            zero or <paramref name="ordinal"/> is equal to or greater than <see cref="P:Teradata.Client.Provider.TdDataReader.FieldCount"/>.</exception>
            <exception cref="T:System.InvalidCastException">The field cannot be converted into TdDate.</exception>
            <exception cref="T:System.InvalidOperationException">CommandBehavior is set to SchemaOnly, or 
            there is no data for the row or column, or preceding columns are no longer accessible.</exception>
            <exception cref="T:System.ObjectDisposedException">The TdDataReader is closed.</exception>
            <exception cref="T:Teradata.Client.Provider.TdException">The Teradata Database returned an error, or .NET Data Provider for 
            Teradata detected an error.</exception>
            
            <remarks>
            Use this method to retrieve columns of type DATE.
            </remarks>
            
        </member>
        <member name="M:Teradata.Client.Provider.TdDataReader.GetTdTimestampWithTimeZone(System.Int32)">
            <summary>
            Gets the value of the specified field (column) as a TdTimestampWithTimeZone.
            </summary>
            
            <param name="ordinal">Column Ordinal</param>
            
            <returns>
            Returns the value of the specified field represented as a TdTimestampWithTimeZone type.
            </returns>
            
            
            <exception cref="T:System.IndexOutOfRangeException"><paramref name="ordinal"/> is less than 
            zero or <paramref name="ordinal"/> is equal to or greater than <see cref="P:Teradata.Client.Provider.TdDataReader.FieldCount"/>.</exception>
            <exception cref="T:System.InvalidCastException">The field cannot be converted into TdTimestampWithTimeZone.</exception>
            <exception cref="T:System.InvalidOperationException">CommandBehavior is set to SchemaOnly, or 
              there is no data for the row or column, or preceding columns are no longer accessible.</exception>
            <exception cref="T:System.ObjectDisposedException">The TdDataReader is closed.</exception>
            <exception cref="T:Teradata.Client.Provider.TdException">The Teradata Database returned an error, or .NET Data Provider 
              for Teradata detected an error.</exception>
            
            <remarks>
            Use this method to retrieve columns of type TIMESTAMP WITH TIME ZONE.
            </remarks>
            
        </member>
        <member name="M:Teradata.Client.Provider.TdDataReader.GetTdTimestamp(System.Int32)">
            <summary>
            Gets the value of the specified field (column) as a TdTimestamp.
            </summary>
            
            <param name="ordinal">Column Ordinal</param>
            
            <returns>
            Returns the value of the specified field represented as a TdTimestamp type.
            </returns>
            
            
            <exception cref="T:System.IndexOutOfRangeException"><paramref name="ordinal"/> is less than 
            zero or <paramref name="ordinal"/> is equal to or greater than <see cref="P:Teradata.Client.Provider.TdDataReader.FieldCount"/>.</exception>
            <exception cref="T:System.InvalidCastException">The field cannot be converted into TdTimestamp.</exception>
            <exception cref="T:System.InvalidOperationException">CommandBehavior is set to SchemaOnly, or 
            there is no data for the row or column, or preceding columns are no longer accessible.</exception>
            <exception cref="T:System.ObjectDisposedException">The TdDataReader is closed.</exception>
            <exception cref="T:Teradata.Client.Provider.TdException">The Teradata Database returned an error, or .NET Data Provider 
            for Teradata detected an error.</exception>
            
            <remarks>
            Use this method to retrieve columns of type TIMESTAMP.
            </remarks>
            
        </member>
        <member name="M:Teradata.Client.Provider.TdDataReader.GetTdTimeWithTimeZone(System.Int32)">
            <summary>
            Gets the value of the specified field (column) as a TdTimeWithTimeZone.
            </summary>
            
            <param name="ordinal">Column Ordinal</param>
            
            <returns>
            Returns the value of the specified field represented as a TdTimeWithTimeZone type.
            </returns>
            
            
            <exception cref="T:System.IndexOutOfRangeException"><paramref name="ordinal"/> is less than 
            zero or <paramref name="ordinal"/> is equal to or greater than <see cref="P:Teradata.Client.Provider.TdDataReader.FieldCount"/>.</exception>
            <exception cref="T:System.InvalidCastException">The field cannot be converted into TdTimeWithTimeZone.</exception>
            <exception cref="T:System.InvalidOperationException">CommandBehavior is set to SchemaOnly, or 
            there is no data for the row or column, or preceding columns are no longer accessible.</exception>
            <exception cref="T:System.ObjectDisposedException">The TdDataReader is closed.</exception>
            <exception cref="T:Teradata.Client.Provider.TdException">The Teradata Database returned an error, or .NET Data Provider 
            for Teradata detected an error.</exception>
            
            <remarks>
            Use this method to retrieve columns of type TIME WITH TIME ZONE.
            </remarks>
            
        </member>
        <member name="M:Teradata.Client.Provider.TdDataReader.GetTdTime(System.Int32)">
            <summary>
            Gets the value of the specified field (column) as a TdTime.
            </summary>
            
            <param name="ordinal">Column Ordinal</param>
            
            <returns>
            Returns the value of the specified field represented as a TdTime type.
            </returns>
            
            
            <exception cref="T:System.IndexOutOfRangeException"><paramref name="ordinal"/> is less than 
            zero or <paramref name="ordinal"/> is equal to or greater than <see cref="P:Teradata.Client.Provider.TdDataReader.FieldCount"/>.</exception>
            <exception cref="T:System.InvalidCastException">The field cannot be converted into TdTime.</exception>
            <exception cref="T:System.InvalidOperationException">CommandBehavior is set to SchemaOnly, or 
            there is no data for the row or column, or preceding columns are no longer accessible.</exception>
            <exception cref="T:System.ObjectDisposedException">The TdDataReader is closed.</exception>
            <exception cref="T:Teradata.Client.Provider.TdException">The Teradata Database returned an error, or .NET Data Provider 
            for Teradata detected an error.</exception>
            
            <remarks>
            Use this method to retrieve columns of type TIME.
            </remarks>
            
        </member>
        <member name="M:Teradata.Client.Provider.TdDataReader.GetBytes(System.Int32)">
            <summary>
            Gets the value of the specified field (column) as an array of bytes.
            </summary>
            
            <param name="ordinal">Column ordinal (see <see cref="M:Teradata.Client.Provider.TdDataReader.GetOrdinal(System.String)"/>).</param>
            
            <returns>Returns the value of the specified field represented as a System.Byte[] type.</returns>
            
            
            <exception cref="T:System.IndexOutOfRangeException"><paramref name="ordinal"/> is less than 
            zero or <paramref name="ordinal"/> is equal to or greater than <see cref="P:Teradata.Client.Provider.TdDataReader.FieldCount"/>.</exception>
            <exception cref="T:System.InvalidCastException">The field cannot be converted into System.Byte. A 
            null field will result in an exception.</exception>
            <exception cref="T:System.InvalidOperationException">CommandBehavior is set to SchemaOnly, 
            or there is no data for the row or column, or preceding columns are no longer accessible.</exception>
            <exception cref="T:System.ObjectDisposedException">The TdDataReader is closed.</exception>
            <exception cref="T:Teradata.Client.Provider.TdException">The Teradata Database returned an error, or .NET Data Provider for 
            Teradata detected an error.</exception>
            
            <remarks>
            Use this method to retrieve columns of type BYTE, VARBYTE or BLOB. 
            The .NET Data Provider for Teradata will create a Byte array and it copies the content
            of the field into the Byte array. 
            </remarks>
            
        </member>
        <member name="M:Teradata.Client.Provider.TdDataReader.GetTdBlob(System.Int32)">
            <summary>
            Gets the value of the specified field (column) as a <c>TdBlob</c> object.
            </summary>
            
            <param name="ordinal">Column ordinal (see <see cref="M:Teradata.Client.Provider.TdDataReader.GetOrdinal(System.String)"/>).</param>
            
            <returns>
            Returns the value of the specified field represented as a TdBlob type.
            </returns>
            
            
            <exception cref="T:System.IndexOutOfRangeException"><paramref name="ordinal"/> is less than 
            zero or <paramref name="ordinal"/> is equal to or greater than <see cref="P:Teradata.Client.Provider.TdDataReader.FieldCount"/>.</exception>
            <exception cref="T:System.InvalidCastException">The field cannot be converted into <see cref="T:Teradata.Client.Provider.TdBlob"/>.</exception>
            <exception cref="T:System.InvalidOperationException">CommandBehavior is set to SchemaOnly, or there 
            is no data for the row or column, or preceding columns are no longer accessible.</exception>
            <exception cref="T:System.ObjectDisposedException">The TdDataReader is closed.</exception>
            <exception cref="T:Teradata.Client.Provider.TdException">The Teradata Database returned an error, or .NET Data Provider for 
            Teradata detected an error.</exception>
            
            <remarks>
            Use this method to retrieve columns of type BLOB.
            </remarks>
            
        </member>
        <member name="M:Teradata.Client.Provider.TdDataReader.GetTdClob(System.Int32)">
            <summary>
            Gets the value of the specified field (column) as a <c>TdClob</c> object.
            </summary>
            
            <param name="ordinal">Column ordinal (see <see cref="M:Teradata.Client.Provider.TdDataReader.GetOrdinal(System.String)"/>).</param>
            
            <returns>
            Returns the value of the specified field represented as a TdClob type.
            </returns>
            
            
            <exception cref="T:System.IndexOutOfRangeException"><paramref name="ordinal"/> is less than 
            zero or <paramref name="ordinal"/> is equal to or greater than <see cref="P:Teradata.Client.Provider.TdDataReader.FieldCount"/>.</exception>
            <exception cref="T:System.InvalidCastException">The field cannot be converted into <see cref="T:Teradata.Client.Provider.TdClob"/>.</exception>
            <exception cref="T:System.InvalidOperationException">CommandBehavior is set to SchemaOnly, or 
            there is no data for the row or column, or preceding columns are no longer accessible.</exception>
            <exception cref="T:System.ObjectDisposedException">The TdDataReader is closed.</exception>
            <exception cref="T:Teradata.Client.Provider.TdException">The Teradata Database returned an error, or .NET Data Provider for 
            Teradata detected an error.</exception>
            
            <remarks>
            Use this method to retrieve columns of type CLOB.
            </remarks>
            
        </member>
        <member name="M:Teradata.Client.Provider.TdDataReader.GetTime(System.Int32)">
            <summary>
            Gets the value of the specified field (column) as a TimeSpan object.
            </summary>
            
            <param name="ordinal">Column ordinal (see <see cref="M:Teradata.Client.Provider.TdDataReader.GetOrdinal(System.String)"/>).</param>
            
            <returns>
            Returns the value of the specified field represented as a System.TimeSpan type.
            </returns>
            
            
            <exception cref="T:System.IndexOutOfRangeException"><paramref name="ordinal"/> is less than 
            zero or <paramref name="ordinal"/> is equal to or greater than <see cref="P:Teradata.Client.Provider.TdDataReader.FieldCount"/>.</exception>
            <exception cref="T:System.InvalidCastException">The field cannot be converted into System.TimeSpan. 
            A null field will result in an exception.</exception>
            <exception cref="T:System.InvalidOperationException">CommandBehavior is set to SchemaOnly, or there 
            is no data for the row or column, or preceding columns are no longer accessible.</exception>
            <exception cref="T:System.ObjectDisposedException">The TdDataReader is closed.</exception>
            <exception cref="T:Teradata.Client.Provider.TdException">The Teradata Database returned an error, or .NET Data Provider for 
            Teradata detected an error.</exception>
            
            <remarks>
            Use this method to retrieve columns of type TIME. 
            <para></para>
            <para>If the column is not of type TIME or INTERVAL, the .NET Data Provider for Teradata 
            will use the .NET Framework class libraries to convert the underlying field to a 
            System.TimeSpan.</para>
            </remarks>
            
        </member>
        <member name="M:Teradata.Client.Provider.TdDataReader.GetTimeSpan(System.Int32)">
            <summary>
            Gets the value of the specified field (column) as a TimeSpan object.
            </summary>
            
            <param name="ordinal">Column ordinal (see <see cref="M:Teradata.Client.Provider.TdDataReader.GetOrdinal(System.String)"/>).</param>
            
            <returns>
            Returns the value of the specified field represented as a System.TimeSpan type.
            </returns>
            
            
            <exception cref="T:System.IndexOutOfRangeException"><paramref name="ordinal"/> is less than 
            zero or <paramref name="ordinal"/> is equal to or greater than <see cref="P:Teradata.Client.Provider.TdDataReader.FieldCount"/>.</exception>
            <exception cref="T:System.InvalidCastException">The field cannot be converted into System.TimeSpan. 
            A null field will result in an exception.</exception>
            <exception cref="T:System.InvalidOperationException">CommandBehavior is set to SchemaOnly, or there is 
            no data for the row or column, or preceding columns are no longer accessible.</exception>
            <exception cref="T:System.ObjectDisposedException">The TdDataReader is closed.</exception>
            <exception cref="T:Teradata.Client.Provider.TdException">The Teradata Database returned an error, or .NET Data Provider for 
            Teradata detected an error.</exception>
            
            <remarks>
            Use this method to retrieve columns of type TIME. 
            <para></para>
            <para>If the column is not of type TIME or INTERVAL, the .NET Data Provider for Teradata 
            will use the .NET Framework class libraries to convert the underlying field to a 
            System.TimeSpan.</para>
            </remarks>
            
        </member>
        <member name="M:Teradata.Client.Provider.TdDataReader.GetTdIntervalYear(System.Int32)">
            <summary>
               Gets the value of the specified field (column) as a <see cref="T:Teradata.Client.Provider.TdIntervalYear"/>.
            </summary>
            <remarks>
               Use this method to retrieve columns of type INTERVAL YEAR.
            </remarks>
            <returns>
               Returns the value of the specified field represented as a 
               <strong>TdIntervalYear</strong> type.
            </returns>
            <exception cref="T:System.IndexOutOfRangeException">
                <paramref name="ordinal"/> is less than zero or <paramref name="ordinal"/> is equal 
                to or greater than <see cref="P:Teradata.Client.Provider.TdDataReader.FieldCount"/>.
            </exception>
            <exception cref="T:System.InvalidCastException">
                The field cannot be converted into <strong>TdIntervalYear</strong>.
            </exception>
            <exception cref="T:System.InvalidOperationException">
                CommandBehavior is set to SchemaOnly, or there is no data for the row or column, 
                or preceding columns are no longer accessible.
            </exception>
            <exception cref="T:System.ObjectDisposedException">
                The <see cref="T:Teradata.Client.Provider.TdDataReader"/> is closed.
            </exception>
            <exception cref="T:Teradata.Client.Provider.TdException">
                The Teradata Database returned an error, or .NET Data Provider for Teradata detected 
                an error.
            </exception>        
            <param name="ordinal">Column ordinal (see <see cref="M:Teradata.Client.Provider.TdDataReader.GetOrdinal(System.String)"/>).</param>
        </member>
        <member name="M:Teradata.Client.Provider.TdDataReader.GetTdIntervalYearToMonth(System.Int32)">
            <summary>
               Gets the value of the specified field (column) as a 
               <see cref="T:Teradata.Client.Provider.TdIntervalYearToMonth"/>.
            </summary>
            <remarks>
               Use this method to retrieve columns of type INTERVAL YEAR TO MONTH.
            </remarks>
            <returns>
               Returns the value of the specified field represented as a 
               <strong>TdIntervalYearToMonth</strong> type.
            </returns>
            <exception cref="T:System.IndexOutOfRangeException">
                <paramref name="ordinal"/> is less than zero or <paramref name="ordinal"/> is equal 
                to or greater than <see cref="P:Teradata.Client.Provider.TdDataReader.FieldCount"/>.
            </exception>
            <exception cref="T:System.InvalidCastException">
                The field cannot be converted into <strong>TdIntervalYearToMonth</strong>.
            </exception>
            <exception cref="T:System.InvalidOperationException">
                CommandBehavior is set to SchemaOnly, or there is no data for the row or column, 
                or preceding columns are no longer accessible.
            </exception>
            <exception cref="T:System.ObjectDisposedException">
                The <see cref="T:Teradata.Client.Provider.TdDataReader"/> is closed.
            </exception>
            <exception cref="T:Teradata.Client.Provider.TdException">
                The Teradata Database returned an error, or .NET Data Provider for Teradata detected 
                an error.
            </exception>        
            <param name="ordinal">Column ordinal (see <see cref="M:Teradata.Client.Provider.TdDataReader.GetOrdinal(System.String)"/>).</param>
        </member>
        <member name="M:Teradata.Client.Provider.TdDataReader.GetTdIntervalMonth(System.Int32)">
            <summary>
               Gets the value of the specified field (column) as a <see cref="T:Teradata.Client.Provider.TdIntervalMonth"/>.
            </summary>
            <remarks>
               Use this method to retrieve columns of type INTERVAL MONTH.
            </remarks>
            <returns>
               Returns the value of the specified field represented as a 
               <strong>TdIntervalMonth</strong> type.
            </returns>
            <exception cref="T:System.IndexOutOfRangeException">
                <paramref name="ordinal"/> is less than zero or <paramref name="ordinal"/> is equal 
                to or greater than <see cref="P:Teradata.Client.Provider.TdDataReader.FieldCount"/>.
            </exception>
            <exception cref="T:System.InvalidCastException">
                The field cannot be converted into <strong>TdIntervalMonth</strong>.
            </exception>
            <exception cref="T:System.InvalidOperationException">
                CommandBehavior is set to SchemaOnly, or there is no data for the row or column, 
                or preceding columns are no longer accessible.
            </exception>
            <exception cref="T:System.ObjectDisposedException">
                The <see cref="T:Teradata.Client.Provider.TdDataReader"/> is closed.
            </exception>
            <exception cref="T:Teradata.Client.Provider.TdException">
                The Teradata Database returned an error, or .NET Data Provider for Teradata detected 
                an error.
            </exception>        
            <param name="ordinal">Column ordinal (see <see cref="M:Teradata.Client.Provider.TdDataReader.GetOrdinal(System.String)"/>).</param>
        </member>
        <member name="M:Teradata.Client.Provider.TdDataReader.GetTdIntervalDay(System.Int32)">
            <summary>
               Gets the value of the specified field (column) as a <see cref="T:Teradata.Client.Provider.TdIntervalDay"/>.
            </summary>
            <remarks>
               Use this method to retrieve columns of type INTERVAL DAY.
            </remarks>
            <returns>
               Returns the value of the specified field represented as a 
               <strong>TdIntervalDay</strong> type.
            </returns>
            <exception cref="T:System.IndexOutOfRangeException">
                <paramref name="ordinal"/> is less than zero or <paramref name="ordinal"/> is equal 
                to or greater than <see cref="P:Teradata.Client.Provider.TdDataReader.FieldCount"/>.
            </exception>
            <exception cref="T:System.InvalidCastException">
                The field cannot be converted into <strong>TdIntervalDay</strong>.
            </exception>
            <exception cref="T:System.InvalidOperationException">
                CommandBehavior is set to SchemaOnly, or there is no data for the row or column, 
                or preceding columns are no longer accessible.
            </exception>
            <exception cref="T:System.ObjectDisposedException">
                The <see cref="T:Teradata.Client.Provider.TdDataReader"/> is closed.
            </exception>
            <exception cref="T:Teradata.Client.Provider.TdException">
                The Teradata Database returned an error, or .NET Data Provider for Teradata detected 
                an error.
            </exception>
            <param name="ordinal">Column ordinal (see <see cref="M:Teradata.Client.Provider.TdDataReader.GetOrdinal(System.String)"/>).</param>
        </member>
        <member name="M:Teradata.Client.Provider.TdDataReader.GetTdIntervalDayToHour(System.Int32)">
            <summary>
               Gets the value of the specified field (column) as a <see cref="T:Teradata.Client.Provider.TdIntervalDayToHour"/>.
            </summary>
            <remarks>
               Use this method to retrieve columns of type INTERVAL DAY TO HOUR.
            </remarks>
            <returns>
               Returns the value of the specified field represented as a 
               <strong>TdIntervalDayToHour</strong> type.
            </returns>
            <exception cref="T:System.IndexOutOfRangeException">
                <paramref name="ordinal"/> is less than zero or <paramref name="ordinal"/> is equal 
                to or greater than <see cref="P:Teradata.Client.Provider.TdDataReader.FieldCount"/>.
            </exception>
            <exception cref="T:System.InvalidCastException">
                The field cannot be converted into <strong>TdIntervalDayToHour</strong>.
            </exception>
            <exception cref="T:System.InvalidOperationException">
                CommandBehavior is set to SchemaOnly, or there is no data for the row or column, 
                or preceding columns are no longer accessible.
            </exception>
            <exception cref="T:System.ObjectDisposedException">
                The <see cref="T:Teradata.Client.Provider.TdDataReader"/> is closed.
            </exception>
            <exception cref="T:Teradata.Client.Provider.TdException">
                The Teradata Database returned an error, or .NET Data Provider for Teradata detected 
                an error.
            </exception>        
            <param name="ordinal">Column ordinal (see <see cref="M:Teradata.Client.Provider.TdDataReader.GetOrdinal(System.String)"/>).</param>
        </member>
        <member name="M:Teradata.Client.Provider.TdDataReader.GetTdIntervalDayToMinute(System.Int32)">
            <summary>
               Gets the value of the specified field (column) as a <see cref="T:Teradata.Client.Provider.TdIntervalDayToMinute"/>.
            </summary>
            <remarks>
               Use this method to retrieve columns of type INTERVAL DAY TO MINUTE.
            </remarks>
            <returns>
               Returns the value of the specified field represented as a 
               <strong>TdIntervalDayToMinute</strong> type.
            </returns>
            <exception cref="T:System.IndexOutOfRangeException">
                <paramref name="ordinal"/> is less than zero or <paramref name="ordinal"/> is equal 
                to or greater than <see cref="P:Teradata.Client.Provider.TdDataReader.FieldCount"/>.
            </exception>
            <exception cref="T:System.InvalidCastException">
                The field cannot be converted into <strong>TdIntervalDayToMinute</strong>.
            </exception>
            <exception cref="T:System.InvalidOperationException">
                CommandBehavior is set to SchemaOnly, or there is no data for the row or column, 
                or preceding columns are no longer accessible.
            </exception>
            <exception cref="T:System.ObjectDisposedException">
                The <see cref="T:Teradata.Client.Provider.TdDataReader"/> is closed.
            </exception>
            <exception cref="T:Teradata.Client.Provider.TdException">
                The Teradata Database returned an error, or .NET Data Provider for Teradata detected 
                an error.
            </exception>        
            <param name="ordinal">Column ordinal (see <see cref="M:Teradata.Client.Provider.TdDataReader.GetOrdinal(System.String)"/>).</param>
        </member>
        <member name="M:Teradata.Client.Provider.TdDataReader.GetTdIntervalDayToSecond(System.Int32)">
            <summary>
               Gets the value of the specified field (column) as a <see cref="T:Teradata.Client.Provider.TdIntervalDayToSecond"/>.
            </summary>
            <remarks>
               Use this method to retrieve columns of type INTERVAL DAY TO SECOND.
            </remarks>
            <returns>
               Returns the value of the specified field represented as a 
               <strong>TdIntervalDayToSecond</strong> type.
            </returns>
            <exception cref="T:System.IndexOutOfRangeException">
                <paramref name="ordinal"/> is less than zero or <paramref name="ordinal"/> is equal 
                to or greater than <see cref="P:Teradata.Client.Provider.TdDataReader.FieldCount"/>.
            </exception>
            <exception cref="T:System.InvalidCastException">
                The field cannot be converted into <strong>TdIntervalDayToSecond</strong>.
            </exception>
            <exception cref="T:System.InvalidOperationException">
                CommandBehavior is set to SchemaOnly, or there is no data for the row or column, 
                or preceding columns are no longer accessible.
            </exception>
            <exception cref="T:System.ObjectDisposedException">
                The <see cref="T:Teradata.Client.Provider.TdDataReader"/> is closed.
            </exception>
            <exception cref="T:Teradata.Client.Provider.TdException">
                The Teradata Database returned an error, or .NET Data Provider for Teradata detected 
                an error.
            </exception>
            <param name="ordinal">Column ordinal (see <see cref="M:Teradata.Client.Provider.TdDataReader.GetOrdinal(System.String)"/>).</param>
        </member>
        <member name="M:Teradata.Client.Provider.TdDataReader.GetTdIntervalHour(System.Int32)">
            <summary>
               Gets the value of the specified field (column) as a <see cref="T:Teradata.Client.Provider.TdIntervalHour"/>.
            </summary>
            <remarks>
               Use this method to retrieve columns of type INTERVAL HOUR.
            </remarks>
            <returns>
               Returns the value of the specified field represented as a 
               <strong>TdIntervalHour</strong> type.
            </returns>
            <exception cref="T:System.IndexOutOfRangeException">
                <paramref name="ordinal"/> is less than zero or <paramref name="ordinal"/> is equal 
                to or greater than <see cref="P:Teradata.Client.Provider.TdDataReader.FieldCount"/>.
            </exception>
            <exception cref="T:System.InvalidCastException">
                The field cannot be converted into <strong>TdIntervalHour</strong>.
            </exception>
            <exception cref="T:System.InvalidOperationException">
                CommandBehavior is set to SchemaOnly, or there is no data for the row or column, 
                or preceding columns are no longer accessible.
            </exception>
            <exception cref="T:System.ObjectDisposedException">
                The <see cref="T:Teradata.Client.Provider.TdDataReader"/> is closed.
            </exception>
            <exception cref="T:Teradata.Client.Provider.TdException">
                The Teradata Database returned an error, or .NET Data Provider for Teradata detected 
                an error.
            </exception>        
            <param name="ordinal">Column ordinal (see <see cref="M:Teradata.Client.Provider.TdDataReader.GetOrdinal(System.String)"/>).</param>
        </member>
        <member name="M:Teradata.Client.Provider.TdDataReader.GetTdIntervalHourToMinute(System.Int32)">
            <summary>
               Gets the value of the specified field (column) as a <see cref="T:Teradata.Client.Provider.TdIntervalHourToMinute"/>.
            </summary>
            <remarks>
               Use this method to retrieve columns of type INTERVAL HOUR TO MINUTE.
            </remarks>
            <returns>
               Returns the value of the specified field represented as a 
               <strong>TdIntervalHourToMinute</strong> type.
            </returns>
            <exception cref="T:System.IndexOutOfRangeException">
                <paramref name="ordinal"/> is less than zero or <paramref name="ordinal"/> is equal 
                to or greater than <see cref="P:Teradata.Client.Provider.TdDataReader.FieldCount"/>.
            </exception>
            <exception cref="T:System.InvalidCastException">
                The field cannot be converted into <strong>TdIntervalHourToMinute</strong>.
            </exception>
            <exception cref="T:System.InvalidOperationException">
                CommandBehavior is set to SchemaOnly, or there is no data for the row or column, 
                or preceding columns are no longer accessible.
            </exception>
            <exception cref="T:System.ObjectDisposedException">
                The <see cref="T:Teradata.Client.Provider.TdDataReader"/> is closed.
            </exception>
            <exception cref="T:Teradata.Client.Provider.TdException">
                The Teradata Database returned an error, or .NET Data Provider for Teradata detected 
                an error.
            </exception>        
            <param name="ordinal">Column ordinal (see <see cref="M:Teradata.Client.Provider.TdDataReader.GetOrdinal(System.String)"/>).</param>
        </member>
        <member name="M:Teradata.Client.Provider.TdDataReader.GetTdIntervalHourToSecond(System.Int32)">
            <summary>
               Gets the value of the specified field (column) as a <see cref="T:Teradata.Client.Provider.TdIntervalHourToSecond"/>.
            </summary>
            <remarks>
               Use this method to retrieve columns of type INTERVAL HOUR TO SECOND.
            </remarks>
            <returns>
               Returns the value of the specified field represented as a 
               <strong>TdIntervalHourToSecond</strong> type.
            </returns>
            <exception cref="T:System.IndexOutOfRangeException">
                <paramref name="ordinal"/> is less than zero or <paramref name="ordinal"/> is equal 
                to or greater than <see cref="P:Teradata.Client.Provider.TdDataReader.FieldCount"/>.
            </exception>
            <exception cref="T:System.InvalidCastException">
                The field cannot be converted into <strong>TdIntervalHourToSecond</strong>.
            </exception>
            <exception cref="T:System.InvalidOperationException">
                CommandBehavior is set to SchemaOnly, or there is no data for the row or column, 
                or preceding columns are no longer accessible.
            </exception>
            <exception cref="T:System.ObjectDisposedException">
                The <see cref="T:Teradata.Client.Provider.TdDataReader"/> is closed.
            </exception>
            <exception cref="T:Teradata.Client.Provider.TdException">
                The Teradata Database returned an error, or .NET Data Provider for Teradata detected 
                an error.
            </exception>        
            <param name="ordinal">Column ordinal (see <see cref="M:Teradata.Client.Provider.TdDataReader.GetOrdinal(System.String)"/>).</param>
        </member>
        <member name="M:Teradata.Client.Provider.TdDataReader.GetTdIntervalMinute(System.Int32)">
            <summary>
               Gets the value of the specified field (column) as a <see cref="T:Teradata.Client.Provider.TdIntervalMinute"/>.
            </summary>
            <remarks>
               Use this method to retrieve columns of type INTERVAL MINUTE.
            </remarks>
            <returns>
               Returns the value of the specified field represented as a 
               <strong>TdIntervalMinute</strong> type.
            </returns>
            <exception cref="T:System.IndexOutOfRangeException">
                <paramref name="ordinal"/> is less than zero or <paramref name="ordinal"/> is equal 
                to or greater than <see cref="P:Teradata.Client.Provider.TdDataReader.FieldCount"/>.
            </exception>
            <exception cref="T:System.InvalidCastException">
                The field cannot be converted into <strong>TdIntervalMinute</strong>.
            </exception>
            <exception cref="T:System.InvalidOperationException">
                CommandBehavior is set to SchemaOnly, or there is no data for the row or column, 
                or preceding columns are no longer accessible.
            </exception>
            <exception cref="T:System.ObjectDisposedException">
                The <see cref="T:Teradata.Client.Provider.TdDataReader"/> is closed.
            </exception>
            <exception cref="T:Teradata.Client.Provider.TdException">
                The Teradata Database returned an error, or .NET Data Provider for Teradata detected 
                an error.
            </exception>        
            <param name="ordinal">Column ordinal (see <see cref="M:Teradata.Client.Provider.TdDataReader.GetOrdinal(System.String)"/>).</param>
        </member>
        <member name="M:Teradata.Client.Provider.TdDataReader.GetTdIntervalMinuteToSecond(System.Int32)">
            <summary>
               Gets the value of the specified field (column) as a 
               <see cref="T:Teradata.Client.Provider.TdIntervalMinuteToSecond"/>.
            </summary>
            <remarks>
               Use this method to retrieve columns of type INTERVAL MINUTE TO SECOND.
            </remarks>
            <returns>
               Returns the value of the specified field represented as a 
               <strong>TdIntervalMinuteToSecond</strong> type.
            </returns>
            <exception cref="T:System.IndexOutOfRangeException">
                <paramref name="ordinal"/> is less than zero or <paramref name="ordinal"/> is equal 
                to or greater than <see cref="P:Teradata.Client.Provider.TdDataReader.FieldCount"/>.
            </exception>
            <exception cref="T:System.InvalidCastException">
                The field cannot be converted into <strong>TdIntervalMinuteToSecond</strong>.
            </exception>
            <exception cref="T:System.InvalidOperationException">
                CommandBehavior is set to SchemaOnly, or there is no data for the row or column, 
                or preceding columns are no longer accessible.
            </exception>
            <exception cref="T:System.ObjectDisposedException">
                The <see cref="T:Teradata.Client.Provider.TdDataReader"/> is closed.
            </exception>
            <exception cref="T:Teradata.Client.Provider.TdException">
                The Teradata Database returned an error, or .NET Data Provider for Teradata detected 
                an error.
            </exception>        
            <param name="ordinal">Column ordinal (see <see cref="M:Teradata.Client.Provider.TdDataReader.GetOrdinal(System.String)"/>).</param>
        </member>
        <member name="M:Teradata.Client.Provider.TdDataReader.GetTdIntervalSecond(System.Int32)">
            <summary>
               Gets the value of the specified field (column) as a <see cref="T:Teradata.Client.Provider.TdIntervalSecond"/>.
            </summary>
            <remarks>
               Use this method to retrieve columns of type INTERVAL SECOND.
            </remarks>
            <returns>
               Returns the value of the specified field represented as a 
               <strong>TdIntervalSecond</strong> type.
            </returns>
            <exception cref="T:System.IndexOutOfRangeException">
                <paramref name="ordinal"/> is less than zero or <paramref name="ordinal"/> is equal 
                to or greater than <see cref="P:Teradata.Client.Provider.TdDataReader.FieldCount"/>.
            </exception>
            <exception cref="T:System.InvalidCastException">
                The field cannot be converted into <strong>TdIntervalSecond</strong>.
            </exception>
            <exception cref="T:System.InvalidOperationException">
                CommandBehavior is set to SchemaOnly, or there is no data for the row or column, 
                or preceding columns are no longer accessible.
            </exception>
            <exception cref="T:System.ObjectDisposedException">
                The <see cref="T:Teradata.Client.Provider.TdDataReader"/> is closed.
            </exception>
            <exception cref="T:Teradata.Client.Provider.TdException">
                The Teradata Database returned an error, or .NET Data Provider for Teradata detected 
                an error.
            </exception>        
            <param name="ordinal">Column ordinal (see <see cref="M:Teradata.Client.Provider.TdDataReader.GetOrdinal(System.String)"/>).</param>
        </member>
        <member name="P:Teradata.Client.Provider.TdDataReader.FieldCount">
            <summary>
            Gets the number of fields (columns) in the current result set.
            </summary>
            
            <value>
            The number of fields (columns) in the current result set.
            </value>
            
            <exception cref="T:System.ObjectDisposedException">The TdDataReader is closed.</exception>
            
            <remarks>
            FieldCount returns the number of fields in the current result set. 
            Values range from 0 to the maximum number of columns allowed within a 
            result set (for example, 2048 for V2R5). 
            </remarks>
        </member>
        <member name="P:Teradata.Client.Provider.TdDataReader.Item(System.String)">
            <summary>
            Gets the value of the specified field (column) as an Object.
            </summary>
            
            <param name="name">Specifies the column name.</param>
            
            <value>
            The value of the specified field represented as a System.Object type.
            </value>
            
            <exception cref="T:System.IndexOutOfRangeException">No column with the specified name was found.</exception>
            <exception cref="T:System.InvalidOperationException">CommandBehavior is set to SchemaOnly, or there is 
            no data for the row or column, or preceding columns are no longer accessible.</exception>
            <exception cref="T:System.ObjectDisposedException">The TdDataReader is closed.</exception>
            <exception cref="T:Teradata.Client.Provider.TdException">Teradata Database returned an error or .NET Data Provider for 
            Teradata detected an error.</exception>
            
            <remarks>
            Item returns a System.Object that is the root of all types. It is used  
            to retrieve any Teradata data type. The .NET Data Provider for Teradata maps the Teradata data 
            types to .NET Framework types and returns an Object reference. 
            <para></para>
            <para>Item is the most flexible field retrieval method, but is also the slowest 
            field retrieval method. It is strongly recommended to use the other 
            strongly typed field retrieval methods (for example, GetInt32).</para>
            <para></para>
            <para>This method does not throw an exception for null 
            database fields. It returns an instance of DBNull.</para>
            </remarks>
        </member>
        <member name="P:Teradata.Client.Provider.TdDataReader.Item(System.Int32)">
            <summary>
            Gets the value of the specified field (column) as an Object.
            </summary>
            
            <param name="ordinal">Column ordinal (see <see cref="M:Teradata.Client.Provider.TdDataReader.GetOrdinal(System.String)"/>).</param>
            
            <value>
            The value of the specified field represented as a System.Object type.
            </value>
            
            <exception cref="T:System.IndexOutOfRangeException"><paramref name="ordinal"/> is less than 
            zero or <paramref name="ordinal"/> is equal to or greater than <see cref="P:Teradata.Client.Provider.TdDataReader.FieldCount"/>.</exception>
            <exception cref="T:System.InvalidOperationException">CommandBehavior is set to SchemaOnly, or 
            there is no data for the row or column, or preceding columns are no longer accessible.</exception>
            <exception cref="T:System.ObjectDisposedException">The TdDataReader is closed.</exception>
            <exception cref="T:Teradata.Client.Provider.TdException">Teradata Database returned an error or .NET Data Provider for 
            Teradata detected an error.</exception>
            
            <remarks>
            Item returns a System.Object that is the root of all types. It is  
            used to retrieve any Teradata data type. The .NET Data Provider for Teradata 
            maps the Teradata data 
            types to .NET Framework types and returns a reference 
            to the .NET Framework instance. 
            <para></para>
            <para>Item is the most flexible field retrieval method, but is also the slowest 
            field retrieval method. It is strongly recommended that to use the other 
            strongly typed field retrieval methods (for example, GetInt32).</para>
            <para></para>
            <para>This method does not throw an exception for null 
            database fields. It returns an instance of DBNull.</para>
            </remarks>
            
        </member>
        <member name="P:Teradata.Client.Provider.TdDataReader.Depth">
            <summary>
            Gets a value indicating the depth of nesting for the current row.
            </summary>
            <value>It always returns zero.</value>
            <exception cref="T:System.ObjectDisposedException">The TdDataReader is closed.</exception>
        </member>
        <member name="P:Teradata.Client.Provider.TdDataReader.HasRows">
            <summary>
            Gets a value indicating whether the TdDataReader contains one or more rows. 
            </summary>
            
            <value>
            <c>true</c> if the TdDataReader contains one or more rows, otherwise it is <c>false</c>. 
            </value>
            
            <exception cref="T:System.ObjectDisposedException">The TdDataReader is closed.</exception>
            
        </member>
        <member name="P:Teradata.Client.Provider.TdDataReader.IsClosed">
            <summary>
            Gets a value indicating whether the data reader is closed.
            </summary>
            
            <value><c>True</c> if the instance of TdDataReader is closed, otherwise it is <c>false</c>.</value>
            
        </member>
        <member name="P:Teradata.Client.Provider.TdDataReader.RecordsReturned">
             <summary>
             Gets the number of rows returned from the execution of a SELECT statement.
             </summary>
             
             <value>
             The records returned from a select statement 
             </value>
             
             <remarks>
             The RecordsReturned property reflects the activity count of a SELECT statement. The 
             activity count is the number of rows selected.  For all other statements this 
             property will be 0.
             
             <para></para>
             
             <para>If the number of rows returned from the execution of select statement 
             overflows Int32.MaxValue, <see cref="F:System.Int32.MaxValue"/> value will be returned. 
             The provider will post an event to <see cref="E:Teradata.Client.Provider.TdConnection.InfoMessage"/> when an overflow 
             condition occurs. The event will include a warning code and message. The warning message 
             will have the actual number of records returned. The message code is 114003 and the message
             text is "An overflow occurred while calculating the number of records returned, 
             actual value is [<c>RecordsReturned</c>]"
             </para>
             
             <para><strong>NOTE:</strong> In order for an application to be aware that an overflow
             occurred, it must register for the callback with TdConnection.InfoMessage event.</para>
             
             <para></para>
             
             This property is not cumulative.  If multiple SELECT statements are contained in a 
             multi-statement request, the RecordsReturned will only contain the activity count 
             of the current result set.
             </remarks>
             
             <example>
             <para>
             The following example creates a TdConnection, sets up the TdConnection.InfoMessage 
             event and executes a SQL statement.
             </para>
             <para>
             When TdDataReader.RecordsReturned is used and if the number of records returned 
             overflows Int32.MaxValue, Int32.MaxValue is returned and a warning message with 
             the actual records returned is exposed through the TdConnection InfoMessage event. 
             </para>
             <para>
             When TdDataReader.RecordsReturned64 is used and if the number of records returned 
             overflows Int64.MaxValue, Int64.MaxValue is returned and a warning message with 
             the actual records returned is exposed through the TdConnection InfoMessage event.        
             </para>
             <code>
             // This method is invoked when the TdConnection.InfoMessage is fired.
             public void OnInfoMessage(Object sender, TdInfoMessageEventArgs i)
             {
                 // The TdConnection.InfoMessage event gets fired when the records returned
                 // overflows Int32.MaxValue for RecordsReturned and when the records returned
                 // overflows Int64.MaxValue for RecordsReturned64. The actual number of
                 // records returned can be extracted from the message as below. 
                 if( i.Errors[0].Number == 114003 )
                 {
                     Decimal recordsReturned = 
                               Convert.ToDecimal(i.Message.Split('[')[3].Split(']')[0]);
                 
                     Console.WriteLine("Actual records returned is : ", recordsReturned);
                 }
             }
             
             public void ExecuteDataReader(string connectionString, string commandText)
             {
                 // Open a session to Teradata
                 TdConnection cn = new TdConnection(connectionString);
                 
                 // Setting up the event 
                 cn.InfoMessage += new TdInfoMessageEventHandler(this.OnInfoMessage);
                 
                 cn.Open();
            
                 // Execute the command
                 TdCommand cmd = new TdCommand(commandText, cn);
                 TdDataReader reader = cmd.ExecuteReader();
                 Console.WriteLine("{0} records returned.", reader.RecordsReturned);
              
                 // Close the command and session
                 reader.close();
                 cmd.Dispose();
                 cn.Close();
            
             }
             </code>
             </example>
        </member>
        <member name="P:Teradata.Client.Provider.TdDataReader.RecordsReturned64">
            <summary>
            Gets the number of rows returned from the execution of a SELECT statement. 
            </summary>
            
            <value>
            The records returned from a select statement. 
            </value>
            
            <remarks>
            The RecordsReturned64 property reflects the activity count of a SELECT statement. 
            The activity count is the number of rows selected.  For all other statements this 
            property will be 0.
            
            <para></para>
            
            If the number of rows returned is less than or equal to Int32.MaxValue, both
            RecordsReturned and RecordsReturned64 properties will return the same value.
            
            <para></para>
            
            <para>If the number of rows returned from the execution of select statement 
            overflows Int64.MaxValue, <see cref="F:System.Int64.MaxValue"/> value will be returned. 
            The provider will post an event to <see cref="E:Teradata.Client.Provider.TdConnection.InfoMessage"/> when an overflow 
            condition occurs. The event will include a warning code and message. The warning message 
            will have the actual number of records returned. The message code is 114003 and the message 
            text is "An overflow occurred while calculating the number of records returned, 
            actual value is [<c>RecordsReturned</c>]"
            </para>
            
            <para><strong>NOTE:</strong> In order for an application to be aware that an overflow
            occurred, it must register for the callback with TdConnection.InfoMessage event. Refer to
            <see cref="P:Teradata.Client.Provider.TdDataReader.RecordsReturned"/> for an example.
            </para>
            
            This property is not cumulative.  If multiple SELECT statements are contained in a 
            multi-statement request, the RecordsReturned64 will only contain the activity 
            count of the current result set.
            </remarks>
        </member>
        <member name="P:Teradata.Client.Provider.TdDataReader.RecordsAffected">
             <summary>
             Gets the number of rows changed, inserted, deleted or updated by 
             execution of the SQL statement.
             </summary>
             <remarks>
             <para>The records affected is cumulative.  For example, if a request contains
             two insert statements the RecordsAffected will be 2.
             </para>
             
             A -1 will be returned for statements that are not DELETE, INSERT, or UPDATE.
              
             <para></para>
             
             <para>If the number of rows affected from the execution of the SQL statements 
             overflows Int32.MaxValue, <see cref="F:System.Int32.MaxValue"/> value will be returned. 
             The provider will post an event to <see cref="E:Teradata.Client.Provider.TdConnection.InfoMessage"/> when an overflow 
             condition occurs. The event will include a warning code and message. The warning message 
             will have the actual number of records affected. The message code is 114004 and the message 
             text is  "An overflow occurred while calculating the number of records affected, 
             actual value is [<c>RecordsAffected</c>]"
             </para>
             
             <para><strong>NOTE:</strong> In order for an application to be aware that an overflow
             occurred, it must register for the callback with TdConnection.InfoMessage event.</para>
             
             </remarks>
             
             
             <example>
             <para>
             The following example creates a TdConnection, sets up the TdConnection.InfoMessage 
             event and executes a SQL statement.
             </para>
             <para>
             When TdDataReader.RecordsAffected is used and if the number of records affected 
             overflows Int32.MaxValue, Int32.MaxValue is returned and a warning message with 
             the actual records affected is exposed through the TdConnection InfoMessage event. 
             </para>
             <para>
             When TdDataReader.RecordsAffected64 is used and if the number of records affected 
             overflows Int64.MaxValue, Int64.MaxValue is returned and a warning message with 
             the actual records affected is exposed through the TdConnection InfoMessage event.        
             </para>
             <code>
             // This method is invoked when the TdConnection.InfoMessage is fired.
             public void OnInfoMessage(Object sender, TdInfoMessageEventArgs i)
             {
                 // The TdConnection.InfoMessage event gets fired when the records affected
                 // overflows Int32.MaxValue for RecordsAffected and when the records affected
                 // overflows Int64.MaxValue for RecordsAffected64. The actual number of
                 // records affected can be extracted from the message as below. 
                 if( i.Errors[0].Number == 114004 )
                 {
                     Decimal recordsAffected = 
                               Convert.ToDecimal(i.Message.Split('[')[3].Split(']')[0]);
                 
                     Console.WriteLine("Actual records affected is : ", recordsAffected);
                 }
             }
             
             public void ExecuteDataReader(string connectionString, string commandText)
             {
                 // Open a session to Teradata
                 TdConnection cn = new TdConnection(connectionString);
                 
                 // Setting up the event 
                 cn.InfoMessage += new TdInfoMessageEventHandler(this.OnInfoMessage);
                 
                 cn.Open();
            
                 // Execute the command
                 TdCommand cmd = new TdCommand(commandText, cn);
                 TdDataReader reader = cmd.ExecuteReader();
                 Console.WriteLine("{0} records affected.", reader.RecordsAffected);
              
                 // Close the command and session
                 reader.close();
                 cmd.Dispose();
                 cn.Close();
            
             }
             </code>
             </example>
        </member>
        <member name="P:Teradata.Client.Provider.TdDataReader.RecordsAffected64">
            <summary>
            Gets the number of rows changed, inserted, deleted or updated by 
            execution of the SQL statement.
            </summary>
            <remarks>
            <para>The records affected is cumulative.  For example, if a request contains
            two insert statements the RecordsAffected will be 2.
            </para>
            
            A -1 will be returned for statements that are not DELETE, INSERT, or UPDATE.
            
            <para></para>
            
            <para>If the number of rows affected is less than Int32.MaxValue, both
            RecordsAffected and RecordsAffected64 properties will return the same value.
            </para>
            
            <para>If the number of rows affected from the execution of the SQL statements 
            overflows Int64.MaxValue, <see cref="F:System.Int64.MaxValue"/> value will be returned. 
            The provider will post an event to <see cref="E:Teradata.Client.Provider.TdConnection.InfoMessage"/> when an overflow 
            condition occurs. The event will include a warning code and message. The warning message 
            will have the actual number of records affected. The message code is 114004 and the message 
            text is "An overflow occurred while calculating the number of records affected, 
            actual value is [<c>RecordsAffected</c>]"
            </para>
            
            <para><strong>NOTE:</strong> In order for an application to be aware that an overflow
            occurred, it must register for the callback with TdConnection.InfoMessage event. Refer to
            <see cref="P:Teradata.Client.Provider.TdDataReader.RecordsAffected"/> for an example.
            </para>
            
            </remarks>
        </member>
        <member name="T:Teradata.Client.Provider.TdDecimal">
            <summary>
             Teradata can support decimals that have a precision/scale up to 38.  The .NET Framework 
             can only support a decimal that has a scale of up to 28.  TdDecimal enables an application 
             to receive and send Large Decimals from and to Teradata.  It also contains arithmetic, 
             comparison, and conversion methods that can be used to operate on Large Decimals.
             
             A numeric value between - 10^38 +1 and 10^38 - 1 is supported.
            </summary>
            <remarks>
            	<para>An application can use the TdDecimal structure the same way that a
                System.Decimal is used. TdDecimal can be used with decimals of any precision/scale
                and can be used with any version of Teradata supported by the .NET Data Provider
                for Teradata. However, the maximum precision of the Decimal that can either be
                retrieved or sent to Teradata is dependent upon the version of Teradata that is
                being accessed.</para>
            
            <para>A TdDecimal value can also be specified as an In, Out, or InOut parameter to a Stored 
            Procedure.  In order to maintain backward compatibility with previous versions of the 
            provider --versions earlier than 2.0--, the Connection String Attribute 
            <a href="ConnectionString.htm"><strong>Enable TdDecimal</strong></a> 
            must be set to <strong>false</strong>, and the precision of the Decimal returned from Teradata must
            have a precision that is 18 or less.  When these two conditions are satisfied, a TdDecimal is only 
            returned to an application using the <see cref="P:Teradata.Client.Provider.TdParameter.ProviderSpecificValue"/> property.
            The object that is returned by accessing the <see cref="P:Teradata.Client.Provider.TdParameter.Value"/> property remains a 
            System.Decimal.</para>
            
            <para>If the attribute <strong>Enable TdDecimal</strong> is set to <strong>true</strong> or
            the precision of the Decimal returned from the Teradata database has a precision greater than 18,
            a TdDecimal object <strong>is</strong> returned from either TdParameter.Value or 
            TdParameter.ProviderSpecificValue.</para>
            </remarks>
            
            <example>
            <para>EXAMPLE 1</para>
            
            <para>
                The following coding example retrieves Large Decimals from Teradata, modifies the
                Large Decimal, and then sends the results back to Teradata. The simplified tables that are 
                used in this example have the following definition:
            </para>
            
            <code>
                CREATE TABLE DetailedSales (TransId INTEGER, RegionId INTEGER, SalesAmt DECIMIAL(38,2))
                
                CRETE TABLE RankSalesByRegion (RegionId INTEGER, TotalSales DECIMAL(38,2), RegionRank INTEGER)
            </code>
            
            <code lang="CS">
            public void ManipulateLargeDecimal(TdConnection cn)
            {
                // creating commands that will be used to execute SQL statements
                TdCommand cmd1 = cn.CreateCommand();
                TdCommand cmd2 = cn.CreateCommand();
             
                // query to rank the sales by region
                cmd1.CommandText = "select RegionId, TotalSales, Rank(TotalSales) " +
                   "from (select RegionId, sum(SalesAmt) as TotalSales " +
                           "from DetailedSales group by RegionId) as SalesByRegion";
               
                TdDataReader reader = cmd1.ExecuteReader();
             
                // setting up command that will insert rows returned from query into
                // the RankSalesByRegion table
                cmd2.CommandText = "insert into RankSalesByRegion (RegionId, " +
                   "TotalSales, RegionRank) values (?, ?, ?)";
                   
                cmd2.Parameters.Add(null, TdType.BigInt, 0, 
                   System.Data.ParameterDirection.Input, 
                   true, 0, 0, null, System.Data.DataRowVersion.Default, null);
                   
                cmd2.Parameters.Add(null, TdType.Decimal, 0, 
                   System.Data.ParameterDirection.Input, 
                   true, 38, 2, null, System.Data.DataRowVersion.Default, null);
                   
                cmd2.Parameters.Add(null, TdType.Integer, 0, 
                   System.Data.ParameterDirection.Input,
                   true, 0, 0, null, System.Data.DataRowVersion.Default, null);
             
                // TdDecimal sumOfSales = new TdDecimal(0);
                // could also have been used
                TdDecimal sumOfSales = 0;
                TdDecimal avgSalesByRegion = 0;
             
                // Loop through the result set:
                //   Read data returned, and set the Value property of the corresponding
                //   TdParameter with the data returned for each column.
                while (true == reader.Read())
                {
                    // Reading a BIGINT and
                    // Setting the RegionId parameter
                    cmd2.Parameters[0].Value = reader.GetInt64(0);
             
                    // Reading a Large Decimal and
                    // Setting the TotalSales parameter
                    cmd2.Parameters[1].Value = reader.GetTdDecimal(1);
             
                    // Seting the RegionRank parameter
                    cmd2.Parameters[2].Value = reader.GetInt32(2);
             
                    // Summing up on the total sales
                    sumOfSales += (TdDecimal)(cmd2.Parameters[1].Value);
             
                    cmd2.ExecuteNonQuery();
                }
             
                // Calculating the avg sales by region
                // The reader.RecordsReturned is explicitly converted to TdDecimal
                avgSalesByRegion = sumOfSales / (TdDecimal)(reader.RecordsReturned);
             
                reader.Close();
             
                cmd1.Dispose();
                cmd2.Dispose();
            }
            </code>
            </example> 
            
            <example>
            <para>EXAMPLE 2</para>
            
            <para>
            The following example shows how a TdDecimal is used when calling a Stored Procedure: 
            </para>
            
            <code lang="CS">
            public void CalculateSalesForRegion(TdConnection cn, Int32 RegionId)
            {
                // Creating commands that will be used to execute SQL statements
                TdCommand cmd1 = cn.CreateCommand();
             
                // The CalculateSalesForRegion stored procedure has the 
                // following parameters:
                //     in RegionId Integer
                //     out Rank    Integer
                //     out SalesForRegion Decimal(38, 2)
                //     out PercentOfTotalSales Decimal(7, 4)
                cmd1.CommandText = "CaculateSalesForRegion";
                cmd1.CommandType = System.Data.CommandType.StoredProcedure;
               
                // Setting up parameters to return sales information for the 
                // specified region
                // 
                // Parameter for the RegionId
                Cmd1.Parameters.Add(null, TdType.Integer, 0, 
                   System.Data.ParameterDirection.Input, 
                   true, 0, 0, null, System.Data.DataRowVersion.Default, RegionId);
             
                // Parameter for the Rank
                cmd1.Parameters.Add(null, TdType.Integer, 0, 
                   System.Data.ParameterDirection.Output, 
                   true, 0, 0, null, System.Data.DataRowVersion.Default, null);
             
                // Parameter for the SalesForRegion
                cmd1.Parameters.Add(null, TdType.Decimal, 0, 
                   System.Data.ParameterDirection.Output,
                   true, 38, 2, null, System.Data.DataRowVersion.Default, null);
             
                // Parameter for the PercentOfTotalSales
                cmd1.Parameters.Add(null, TdType.Decimal, 0, 
                   System.Data.ParameterDirection.Output,
                   true, 7, 4, null, System.Data.DataRowVersion.Default, null);
             
                // Execute the Stored Procedure
                cmd1.ExecuteNonQuery();
             
                // Retrieve the data for each of the out parameters
               
                // Getting the data returned for the Rank
                Int32 rank = cmd1.Parameters[1].Value;
             
                // Getting the data returned for the SalesForRegion
                //    In the instance this parameter was defined as a 
                //    DECIMAL(38,2).  If the TdParameter.Value property is
                //    accessed an OverFlowException will be thrown.
                TdDecimal salesForRegion = cmd1.Parameters[2].ProviderSpecificValue;
             
                // Getting the data returned for the PercentOfTotalSales
                //    Since the parameter is defined as a Decimal(7,4) an
                //    application can either retrieve the data using the
                //    TdParameter.ProviderSpecificValue or TdParameter.Value property.  
                //    ProviderSpecificValue will contain a TdDecimal structure. 
                //    Value will contains a System.Decimal structure.
                TdDecimal tdPercentOfTotalSales = cmdl.Parameters[3].TdValue;
                System.Decimal sysPercentOfTotalSales = cmd1.Parameters[3].Value;
             
                //
                // CONTINUE PROCESSING THE DATA RETURNED FROM THE STORED PROCEDURE
                //
             
                cmd1.Dispose();
            }
                </code>
            </example>
        </member>
        <member name="F:Teradata.Client.Provider.TdDecimal.MaxPrecision">
            <summary>
            The largest possible value for Precision. The value is 38.
            </summary>
        </member>
        <member name="F:Teradata.Client.Provider.TdDecimal.MaxScale">
            <summary>
            The largest possible value for Scale. The value is 38.
            </summary>
        </member>
        <member name="F:Teradata.Client.Provider.TdDecimal.MaxValue">
            <summary>
            The largest possible value for TdDecimal. The value is 
            99,999,999,999,999,999,999,999,999,999,999,999,999.
            </summary>
        </member>
        <member name="F:Teradata.Client.Provider.TdDecimal.MinValue">
            <summary>
            The smallest possible value for TdDecimal. 
            The value is is -99,999,999,999,999,999,999,999,999,999,999,999,999.
            </summary>
        </member>
        <member name="F:Teradata.Client.Provider.TdDecimal.Null">
            <summary>
            Gets a Null TdDecimal instance. 
            </summary>
            <value>
            Returns a TdDecimal instance that represents a <strong>Null</strong> value.
            </value>
            <remarks>
            Conceptually it is the constructor for <strong>Null</strong> TdDecimal instances.
            </remarks>
            <example>
            This example shows how to send a <strong>Null</strong> value to Teradata Database.
            <code>
            TdParameter colX = new TdParameter();
            colX.TdType = TdType.Decimal;
            colX.Value = TdDecimal.Null;
            </code>
            </example>
        </member>
        <member name="M:Teradata.Client.Provider.TdDecimal.#ctor(System.Int32)">
            <summary>
            Initializes a new instance of the TdDecimal structure using the specified integer value.
            </summary>
            <param name="input">A 32 bit integer</param>
            <overloads>
            Initializes a new instance of TdDecimal.
            </overloads>
        </member>
        <member name="M:Teradata.Client.Provider.TdDecimal.#ctor(System.Int64)">
            <summary>
            Initializes a new instance of the TdDecimal structure using the supplied 64 bit integer value.
            </summary>
            <param name="input">A 64 bit integer</param>
        </member>
        <member name="M:Teradata.Client.Provider.TdDecimal.#ctor(System.Decimal)">
            <summary>
            Initializes a new instance of the TdDecimal structure using the specified Decimal value.
            </summary>
            <param name="input">The Decimal</param>
        </member>
        <member name="M:Teradata.Client.Provider.TdDecimal.#ctor(System.Int32,System.Int32,System.Int32,System.Int32,System.Byte,System.Byte)">
            <summary>
            Initializes a new instance of TdDecimal from parameters specifying the instance's constituent parts. 
            </summary>
            <param name="data1">Low number component.  The 0-31 bits of the internal representation</param>
            <param name="data2">Middle-low number component.  The 32-63 bits of the internal representation</param>
            <param name="data3">Middle-high number component.  The 64-95 bits of the internal representation</param>
            <param name="data4">His number component.  The 96-127 bits of the internal representation</param>
            <param name="precision">The precision of the TdDecimal</param>
            <param name="scale">The scale of the TdDecimal</param>
            <remarks>
            	<para>TdDecimal uses four 32 bit integers to internally store the number. The four
                integers will represent the decimal as a scaled 128 bit integer --the decimal point
                has been removed by multiplying the number by 10 to the power of the scale. This
                decimal is stored this way because it is very easy to perform operation on the
                decimal. The precision and scale are stored separately within TdDecimal.</para>
            	<para>The four number components that are passed in consist of the following:</para>
            	
            		<para class="xmldocbulletlist"></para>
            		<list type="bullet">
            			<item><c>data1</c> contains the low order bits</item>
            			<item><c>data2</c> and <c>data3</c> consist of the middle order bits</item>
            			<item><c>data4</c> contains the high order bits</item>
            		</list>
            </remarks>
            <example>
            	<para>The following is an example of setting up the number components, and then
                invoking the constructor.</para>
            	<code lang="CS" title="Constructor Example">
            // Decimal Number:  82985000914920.733988
            // Hex Representation:      4 7FA5F2A8 A350FD24
            TdDecimal value01 = new TdDecimal(unchecked((Int32)0xA350FD24), (Int32)0x7FA5F2A8, (Int32)0x00000004, 0, 20, 6);
            
            // Decimal Number:      -4352.68
            // Hex Representation:  ffffffff ffffffff ffffffff fff95bbc (represented in two's compliment form)
            TdDecimal value02 = new TdDecimal(
                                        unchecked((Int32)0xfff95bbc), 
                                        unchecked((Int32)0xffffffff, 
                                        unchecked((Int32)0xffffffff, 
                                        unchecked((Int32)0xffffffff, 
                                        6, 2);
                </code>
            </example>
        </member>
        <member name="M:Teradata.Client.Provider.TdDecimal.#ctor(System.Int32[],System.Byte,System.Byte)">
            <summary>
            This constructor will initialize a new instance of TdDecimal based on the supplied internal
            representation of a TdDecimal contained in the specified array.
            </summary>
            <remarks>
            	<para>TdDecimal uses four 32 bit integers to internally store the number. The four
                integers will represent the decimal as a scaled 128 bit integer --the decimal point
                has been removed by multiplying the number by 10 to the power of the scale. This
                decimal is stored this way because it is very easy to perform operation on the
                decimal. The precision and scale are stored separately within TdDecimal.</para>
            	<para>The array that is passed in will have 4 elements which are the number
                components of the internal representation of the TdDecimal:</para>
                
            		<para class="xmldocbulletlist"></para>
            		<list type="bullet">
            			<item>data[0] will contain the low order bits</item>
            			<item>data[2 and 3] consist of the middle order bits</item>
            			<item>data[4] contains the high order bits</item>
            		</list>
            		
            </remarks>
            <example>
            	<para>The following is an example of setting up the array with a number, and then
                invoking the constructor.</para>
            	<code lang="CS" title="Constructor Example">
            // Decimal Number:          82985000914920.733988
            // Hex Representation:      4 7FA5F2A8 A350FD24
            Int32 [] numberComponents01 = {unchecked((Int32)0xA350FD24), (Int32)0x7FA5F2A8, (Int32)0x00000004, 0};
            TdDecimal value01 = new TdDecimal(numberComponents01, 20, 6);
            
            // Decimal Number:      -1
            // Hex Representation:  FFFFFFFF FFFFFFFF FFFFFFFF FFFFFFFF (two's compliment form)
            Int32 [] numberComponents02 = {unchecked((Int32)0xFFFFFFFF), unchecked((Int32)0xFFFFFFFF),
                                           unchecked((Int32)0xFFFFFFFF), unchecked((Int32)0xFFFFFFFF)};
            TdDecimal value02 = new TdDecimal(numberComponents02, 1, 0);
                            
                </code>
            </example>
            <exception cref="T:System.ArgumentNullException"><paramref name="input"/> is null.</exception>
            <exception cref="T:System.ArgumentException">There are too many items in the <paramref name="input"/> array.</exception>
            <param name="input">Array that contains the internal representation of the number.</param>
            <param name="precision">Precision of the number.</param>
            <param name="scale">Scale of the number.</param>
        </member>
        <member name="M:Teradata.Client.Provider.TdDecimal.#ctor(System.Double)">
            <summary>
            Initializes a new instance of TdDecimal from the specified System.Double value. 
            </summary>
            <param name="input">The double that will be converted to a TdDecimal.</param>
            <remarks>When converting a value that is a double to a TdDecimal, there may
            be a loss of precision. </remarks>
            <exception cref="T:System.OverflowException">The Double could not be converted to a TdDecimal.</exception>
        </member>
        <member name="M:Teradata.Client.Provider.TdDecimal.#ctor(System.Single)">
            <summary>
            Initializes a new instance of TdDecimal from the specified System.Single value. 
            </summary>
            <param name="input">The Single that will be converted to a TdDecimal.</param>
            <remarks>When converting a value that is a Single to a TdDecimal there may be
            be a loss of precision.</remarks>
            <exception cref="T:System.OverflowException">The <paramref name="input"/> cannot be Infinity or NaN.</exception>
        </member>
        <member name="M:Teradata.Client.Provider.TdDecimal.GetBytes">
            <summary>
            The binary representation of the value of this TdDecimal structure is returned 
            as an array of bytes.  The most significant byte will be the last byte in the array.
            </summary>
            <remarks>
            TdDecimal uses four unsigned 32 bit integers to internally store the number.  The four 
            integers will represent the decimal as a scaled integer –the decimal point has been 
            removed by multiplying the number by 10 to the power of the scale.  
            </remarks>
            <returns>An array of bytes is returned that is the binary representation of the value of this TdDecimal.</returns>
            <exception cref="T:Teradata.Client.Provider.TdException">The value of the TdDecimal is Null.</exception>
            <example>
                The following example shows the output when GetBytes is called: 
                <code lang="CS">
            // The M indicates that the literal is a System.Decimal.
            TdDecimal original = new TdDecimal(983726465.23235M);
             
            Byte[] result = original.GetBytes();
             
            //The scaled integer representation of 983726465.23235 is 98372646523235
            //The hex representation of 98372646523235 is 0x59782AA6D163
            //
            //result = {0x63, 0xD1, 0xA6, 0x2A, 0x78, 0x59, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00}
            
            // This following example shows how a negative number will be represented.  Internally,
            // negative numbers are stored in Two's Complement representation.
            
            original = TdDecimal.Parse("-4321.91");
            
            result = original.GetBytes();
            
            // The scaled integer representation of -4321.91 is -432191.
            // The Two's Complement of represenation of -42191 in hex is 0xFFF967C1.
            //
            // result = {0xC1, 0x67, 0xF9, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF}
                </code>
            </example>
        </member>
        <member name="M:Teradata.Client.Provider.TdDecimal.GetBits">
             <summary>
             The binary representation of the value of this TdDecimal structure is returned as 
             an array of signed integers. 
             </summary>
             <returns>An array that contains the number components and meta-data is returned</returns>
             <remarks>
             The array that is returned will contain 5 elements:
             <list type="bullet">
             <item>
             <description>data[0] contains the low order bits.</description>
             </item>
             <item>
             <description>data[1 and 2] contains the middle order bits.</description>
             </item>
             <item>
             <description>data[3] contains the high order bits</description>
             </item>
             <item>
             <description>data[4] contains information on the precision, scale, and sign.
             <list type="bullet">
             <item>
             <description>Bits 0-7 will contain the scale.</description>
             </item>
             <item>
             <description>Bits 8-15 will contain the precision.</description>
             </item>
             <item>
             <description>Bit 16 will contain the sign.  0 for negative, 1 for positive. </description>
             </item>
             </list>
             </description>
             </item>
             </list>
            </remarks>
            <example>
             <code>
             TdDecimal original = TdDecimal.Parse("945398372646587542.2323");
             
             Int32[] result = original.GetBits();
             
             //The scaled integer representation of 945398372646587542.2323 
             //   is 9453983726465875422323
             //The precision is 22 or 0x16
             //The scale is 4 or 0x04
             //The hex representation of 9453983726465875422323 is 0x20080614DDE423BAC73
             //
             //The array that will be returned that contains the internal representation will be
             //     (0x423BAC73, 0x80614DDE, 0x00000200, 0x00000000, 0x00011604}
             //
             // Sign = 0x00011604 &amp; 0x00010000 = 0x00010000
             // Precision = 0x00011604 &amp; 0x0000FF00 = 0x1600
             // Scale = 0x00011604 &amp; 0x000000FF = 0x04
             </code>
            </example>
        </member>
        <member name="M:Teradata.Client.Provider.TdDecimal.Abs(Teradata.Client.Provider.TdDecimal)">
            <summary>
            The absolute value of the specified TdDecimal is returned.
            </summary>
            <param name="input">A TdDecimal structure</param>
            <returns>A TdDecimal is returned that contains the result.</returns>
            <remarks>A TdDecimal of TdDecimal.Null will return as TdDecimal.Null</remarks>
        </member>
        <member name="M:Teradata.Client.Provider.TdDecimal.Add(Teradata.Client.Provider.TdDecimal,Teradata.Client.Provider.TdDecimal)">
            <summary>
            Calculates the sum of the two TdDecimal operands.
            </summary>
            <returns>A TdDecimal containing the sum.</returns>
            <exception cref="T:System.OverflowException" caption="">
            	<para>The precision of the result exceeds the maximum precision (38) of a TdDecimal or</para>
            	<para>the scale of an operand could not be adjusted to match the other operand's scale.</para></exception>
            <remarks>
            	<para>If one of the parameter is <see cref="F:Teradata.Client.Provider.TdDecimal.Null"/>, the result will be
                <c>TdDecimal.Null</c>.</para>
            
                <para>Please refer to <see cref="M:Teradata.Client.Provider.TdDecimal.op_Addition(Teradata.Client.Provider.TdDecimal,Teradata.Client.Provider.TdDecimal)"/> for more information.</para>
            
            </remarks>
            <example>
            <para>Please refer to <see cref="M:Teradata.Client.Provider.TdDecimal.op_Addition(Teradata.Client.Provider.TdDecimal,Teradata.Client.Provider.TdDecimal)"/> for an example of adding two TdDecimals.</para>
            </example>
            <param name="left">The left operand.</param>
            <param name="right">The right operand.</param>        
            
        </member>
        <member name="M:Teradata.Client.Provider.TdDecimal.op_Addition(Teradata.Client.Provider.TdDecimal,Teradata.Client.Provider.TdDecimal)">
            <summary>
            Calculates the sum of the two TdDecimal operands.
            </summary>
            <returns>A TdDecimal containing the sum.</returns>
            <exception cref="T:System.OverflowException" caption="">
            	<para>The precision of the result exceeds the maximum precision (38) of a TdDecimal.</para>
            	<para>The scale of an operand could not be adjusted to match the other operand's scale.</para></exception>
            <remarks>
            	<para>If one of the parameter is <see cref="F:Teradata.Client.Provider.TdDecimal.Null"/>, the result will be
                <c>TdDecimal.Null</c>.</para>
            
                <para>There are two cases when an OverflowException will be thrown:</para>
            
            	<para>When two numbers with different scales are added, an attempt is made to
                adjust the scale of one of the operands so that the scale of both operands are the
                same. The operand that has the least scale is always adjusted upward to match the
                operand that has the greatest scale. When adjusting the operand, a check is done to
                make sure that the new precision will not be greater than the <see cref="F:Teradata.Client.Provider.TdDecimal.MaxPrecision"/>. If this
                occurs an <see cref="T:System.OverflowException"/> will be thrown.</para>
            
                <para>When two number are added and the precision of the result will be greater than the <c>MaxPrecision</c>
                an Overflow exception will be thrown.</para>
            </remarks>
            <example>
            	<code lang="CS" description="The following example creates pairs of TdDecimals and adds them using the + operator.">
            // 1  + (-0.00000000000000000000000000000000000001) = 0.99999999999999999999999999999999999999
            TdDecimal left01 = new TdDecimal(1, 0, 0, 0, 1, 0);      // left01 = 1
            TdDecimal right01 = 
                 new TdDecimal(unchecked((Int32)0xFFFFFFFF), 
                               unchecked((Int32)0xFFFFFFFF), 
                               unchecked((Int32)0xFFFFFFFF), 
                               unchecked((Int32)0xFFFFFFFF), 
                               38, 38);                              // right01 = -0.00000000000000000000000000000000000001
            TdDecimal result01 = left01 + right01;
            Console.WriteLine("{0} + {1} = {2}", left01, right01, result01);
             
            // 3.4538475968734 + (-0.4538475968734) = 3
            TdDecimal left02 = TdDecimal.Parse("3.4538475968734");
            TdDecimal right02 = TdDecimal.Parse("-0.4538475968734");
            TdDecimal result02 = left02 + right02;
            Console.WriteLine("{0} + {1} = {2}", left02, right02, result02);
             
            // In the following examples, an OverflowException will be thrown when adding the numbers
             
            // 99.357683940586721368475978471096874567 + 10 
            // An OverflowException is thrown because the result will have a precision greater than MaxPrecision.
            TdDecimal except01 = TdDecimal.Parse("99.357683940586721368475978471096874567") + TdDecimal.Parse("10");
             
            // 15.98798734398453 + 100,445,234,554,774,908,493,123,496,675
            // An OverflowException is thrown because when the scale of the right operand is adjusted to
            // match the scale of the left operand, the precision of the right will be greater than the MaxPrecision
            TdDecimal except02 = TdDecimal.Parse("15.98798734398453") + TdDecimal.Parse("100,445,234,554,774,908,493,123,496,675");
                </code>
            </example>
            <param name="left">The operand that appears to the left of the '+' sign.</param>
            <param name="right">The operand that appears to the right of the '+' sign.</param>
        </member>
        <member name="M:Teradata.Client.Provider.TdDecimal.Subtract(Teradata.Client.Provider.TdDecimal,Teradata.Client.Provider.TdDecimal)">
            <summary>
            Calculates the result of subtracting two TdDecimal operands. 
            </summary>
            <param name="left">The left operand.</param>
            <param name="right">The right operand.</param>
            <returns>A TdDecimal containing the result</returns>
            
            <exception cref="T:System.OverflowException" caption="">
            	The scale of an operand could not be adjusted to match the other operand's scale.</exception>
            <remarks>
            	<para>If one of the parameter is <see cref="F:Teradata.Client.Provider.TdDecimal.Null"/>, the result will be
                <c>TdDecimal.Null</c>.</para>
            
            	Please refer to <see cref="M:Teradata.Client.Provider.TdDecimal.op_Subtraction(Teradata.Client.Provider.TdDecimal,Teradata.Client.Provider.TdDecimal)"/> for more information.
            </remarks>
            <example>
            <para>Please refer to <see cref="M:Teradata.Client.Provider.TdDecimal.op_Subtraction(Teradata.Client.Provider.TdDecimal,Teradata.Client.Provider.TdDecimal)"/> for an example of subtracting two TdDecimals.</para>
            </example>
                    
        </member>
        <member name="M:Teradata.Client.Provider.TdDecimal.op_Subtraction(Teradata.Client.Provider.TdDecimal,Teradata.Client.Provider.TdDecimal)">
            <summary>
            Calculates the result of subtracting two TdDecimal operands. 
            </summary>
            <param name="left">The operand that appears to the left of the '-' sign.</param>
            <param name="right">The operand that appears to the right of the '-' sign.</param>
            <returns>A TdDecimal containing the result</returns>
            
            <exception cref="T:System.OverflowException" caption="">
            	The scale of an operand could not be adjusted to match the other operand's scale.</exception>
            <remarks>
            	<para>If one of the parameter is <see cref="F:Teradata.Client.Provider.TdDecimal.Null"/>, the result will be
                <c>TdDecimal.Null</c>.</para>
            
            	<para>When two numbers with different scales are added, an attempt is made to
                adjust the scale of one of the operands so that the scale of both operands are the
                same. The operand that has the least scale is always adjusted upward to match the
                operand that has the greatest scale. When adjusting the operand, a check is done to
                make sure that the new precision will not be greater than the <see cref="F:Teradata.Client.Provider.TdDecimal.MaxPrecision"/>. If this
                occurs an <see cref="T:System.OverflowException"/> will be thrown.</para>
            </remarks>
            <example>
            	<code lang="CS" description="The following example creates pairs of TdDecimals and subtracts them using the - operator.">
            // 1 - 0.00000000000000000000000000000000000001 = 0.99999999999999999999999999999999999999
            TdDecimal left01 = new TdDecimal(1, 0, 0, 0, 1, 0);      // left01 = 1
            TdDecimal right01 = new TdDecimal(1, 0, 0, 0, 38, 38);   // right01 = 0.00000000000000000000000000000000000001
            TdDecimal result01 = left01 - right01;
            Console.WriteLine("{0} - {1} = {2}", left01, right01, result01);
             
            // 3.4538475968734 - 0.4538475968734 = 3
            TdDecimal left02 = TdDecimal.Parse("3.4538475968734");
            TdDecimal right02 = TdDecimal.Parse("0.4538475968734");
            TdDecimal result02 = left02 + right02;
            Console.WriteLine("{0} - {1} = {2}", left02, right02, result02);
             
            // In the following example, an OverflowException will be thrown when subtracting the numbers
             
            // 15.98798734398453 - 100,445,234,554,774,908,493,123,496,675
            // An OverflowException is thrown because when the scale of the right operand is adjusted to
            // match the scale of the left operand, the precision of the right will be greater than the MaxPrecision
            TdDecimal except02 = TdDecimal.Parse("15.98798734398453") + TdDecimal.Parse("100445234554774908493123496675");
                </code>
            </example>
            
        </member>
        <member name="M:Teradata.Client.Provider.TdDecimal.Negate(Teradata.Client.Provider.TdDecimal)">
            <summary>
            Calculates the negation of the TdDecimal operand. 
            </summary>
            <param name="input">The TdDecimal.</param>
            <returns>A TdDecimal containing the result.</returns>
            <remarks>If <paramref name="input"/> is TdDecimal.Null, the result will be TdDecimal.Null; 
            otherwise the result will have the opposite sign. </remarks>
        </member>
        <member name="M:Teradata.Client.Provider.TdDecimal.op_UnaryNegation(Teradata.Client.Provider.TdDecimal)">
            <summary>
            Calculates the negation of the TdDecimal operand. 
            </summary>
            <param name="input">The TdDecimal.</param>
            <returns>A TdDecimal containing the result.</returns>
            <remarks>If <paramref name="input"/> is TdDecimal.Null, the result will be TdDecimal.Null; 
            otherwise the result will have the opposite sign. </remarks>
        </member>
        <member name="M:Teradata.Client.Provider.TdDecimal.AdjustScale(Teradata.Client.Provider.TdDecimal,System.Int32,System.Boolean)">
            <summary>
            The scale of the TdDecimal operand will be adjusted to the number of digits 
            indicated by the digits parameter. 
            </summary>
            <param name="input">The TdDecimal whose scale will be adjusted.</param>
            <param name="digits">The number of digits that will be added to the scale and precision.</param>
            <param name="round">Indicates whether the number will be rounded after being adjusted.</param>
            <exception cref="T:System.OverflowException">Either the Precision of 
            TdDecimal will be greater than the MaxPrecision, or the integer part of TdDecimal 
            will be affected by this operation.</exception>
            <exception cref="T:Teradata.Client.Provider.TdException">The new scale will cause an illegal
            truncation of TdDecimal.</exception>
            <exception cref="T:System.ArgumentOutOfRangeException">Either the precision or scale is out of Range.</exception>
            <exception cref="T:Teradata.Client.Provider.TdException">The value of <paramref name="digits"/> will cause an invalid adjustment to be made.</exception>
            <remarks>
            <paramref name="digits"/> can be either be a positive or negative number.  The number passed in 
            for <code>digits</code> will affect both the precision and scale.  The value of digits is 
            added to the Precision and Scale of the TdDecimal.  
            <para></para>
            Therefore, digits cannot exceed "MaxPrecision – Precision".  For example, if 
            the Precision of the TdDecimal is 20 then digits cannot be greater than 38 – 20 = 18.  
            If digits were greater than 18, the TdDecimal will have a precision greater than the 
            MaxPrecision.
            <para></para>
            In addition, if a negative value is specified for digits, the absolute value cannot exceed 
            the Scale of the TdDecimal.  For example, if the TdDecimal has a Scale of 5, the value of 
            digits cannot be less than -5.  A value that is less indicates that the integer part of the 
            decimal (the numbers to the left of the decimal point) is to be either rounded or truncated.  
            AdjustScale does not allow the integer part of the decimal to be rounded or truncated. 
            <para></para>
            Depending upon the value of the <paramref name="round"/> parameter, the value will either be rounded to the 
            appropriate number of digits or truncated.  If fRound is <code>true</code>, the TdDecimal will be rounded.  
            <code>false</code> the value will be truncated.
            </remarks>
            <returns>A TdDecimal that contains the result is returned.</returns>
            <example>
                The following is an example of the use of AdjustScale: 
            <code>
            //The M is used to indicate that the numeric literal is a System.Decimal
             
            //Precision = 12, Scale = 5
            TdDecimal decimal1 = new TdDecimal(3243167.43633M);
             
            // newDecimal1 = 3243167.43633, Precision = 15, Scale = 8
            TdDecimal newDecimal1 = TdDecimal.AdjustScale(decimal1, 3, false);
             
            // newDecimal2 = 3243167.43, Precision = 9, Scale = 2
            //   Result was truncated.
            TdDecimal newDecimal2 = TdDecimal.AdjustScale(decimal1, -3, false);
             
            // newDecimal2 = 3243167.44, Precision = 9, Scale = 2
            //   Result was rounded.
            TdDecimal newDecimal2 = TdDecimal.AdjustScale(decimal1, -3, true);
             
            // A TdException will be thrown because the value passed in for the
            // digits parameter will affect the integer part of the decimal number.
            TdDecimal newDecimal2 = TdDecimal.AdjustScale(decimal1, -7, true);
            </code>
            </example>
        </member>
        <member name="M:Teradata.Client.Provider.TdDecimal.Ceiling(Teradata.Client.Provider.TdDecimal)">
            <summary>
            The smallest whole number greater than or equal to the specified TdDecimal structure.
            </summary>
            <param name="input">The TdDecimal structure</param>
            <returns>The TdDecimal containing the result</returns>
            <remarks>A TdDecimal of TdDecimal.Null will return as TdDecimal.Null</remarks>
        </member>
        <member name="M:Teradata.Client.Provider.TdDecimal.Divide(Teradata.Client.Provider.TdDecimal,Teradata.Client.Provider.TdDecimal)">
            <summary>
            Calculates the results of dividing the first TdDecimal operand by the second.
            </summary>
            <param name="enumerator">A TdDecimal.</param>
            <param name="denominator">A TdDecimal.</param>
            <returns>The TdDecimal containing the result</returns>
            <exception cref="T:System.DivideByZeroException">An attempt to divide by 0 was made.</exception>
            <exception cref="T:System.OverflowException">The result has a precision greater than the 
            <see cref="F:Teradata.Client.Provider.TdDecimal.MaxPrecision"/>.</exception>
            <remarks>If one of the parameter is TdDecimal.Null, the result will be <see cref="F:Teradata.Client.Provider.TdDecimal.Null"/>.
            <para></para>
            <para>Please refer to <see cref="M:Teradata.Client.Provider.TdDecimal.op_Division(Teradata.Client.Provider.TdDecimal,Teradata.Client.Provider.TdDecimal)"/> for more information.</para>
            </remarks>
            <example>Please refer to the <see cref="M:Teradata.Client.Provider.TdDecimal.op_Division(Teradata.Client.Provider.TdDecimal,Teradata.Client.Provider.TdDecimal)"/> for divide examples.</example>
        </member>
        <member name="M:Teradata.Client.Provider.TdDecimal.op_Division(Teradata.Client.Provider.TdDecimal,Teradata.Client.Provider.TdDecimal)">
            <summary>
            Calculates the division of two TdDecimals.
            </summary>
            <param name="enumerator">The TdDecimal that will be the enumerator.</param>
            <param name="denominator">The TdDecimal that will be the denominator.</param>
            <returns>The TdDecimal containing the result</returns>
            <exception cref="T:System.DivideByZeroException">An attempt to divide by 0 was made.</exception>
            <exception cref="T:System.OverflowException">The result has a precision greater than the <see cref="F:Teradata.Client.Provider.TdDecimal.MaxPrecision"/>.</exception>
            <remarks>If one of the parameter is TdDecimal.Null, the result will be <see cref="F:Teradata.Client.Provider.TdDecimal.Null"/>.
            <para></para>
            The result of this operation will have its <see cref="P:Teradata.Client.Provider.TdDecimal.Scale"/> set to the maximum scale between the 
            enumerator and denominator.  For example, the result of "4 / 5" will be 0.  In order to 
            increase the scale of the result, the scale of one of the operands will need to be increased.  In this 
            example the scale for either the numerator or denominator can be increased.  If <see cref="M:Teradata.Client.Provider.TdDecimal.AdjustScale(Teradata.Client.Provider.TdDecimal,System.Int32,System.Boolean)"/> 
            were called to increase the scale of the enumerator by 1, the result of "4.0 / 5" will be 
            0.8.
            </remarks>
            <example>
            The following are examples using the division operator.
            <code>
            TdDecimal enumerator;
            TdDecimal denominator;
            TdDecimal result;
            
            enumerator = TdDecimal.Parse("1");
            denominator = TdDecimal.Parse("3");
            // Going to perform the operation 1 / 3.  
            // result = 0, Precision = 38, Scale = 0.  
            // The reason for this is that both the enumerator and denominator have a scale of 0.
            result = enumerator / denominator;
            Console.WriteLine("{0} / {1} = {3}", enumerator, denominator, result);
            
            enumerator = new TdDecimal(1, 0, 0, 0, 4, 3);
            denominator = new TdDecimal(3, 0, 0, 0, 3, 2);
            // Going to perform the operation 1.000 / 2.00.
            // result = 0.333, Precision = 38, Scale = 3
            // The enumerator has the largest scale.
            result = enumerator / denominator
            Console.WriteLine("{0} / {1} = {3}", enumerator, denominator, result);
            
            enumerator = new TdDecimal(1, 0, 0, 0, 1, 0);
            denominator = new TdDecimal(4, 0, 0, 0, 2, 1);
            // Going to perform the operation 1 / 4.0.
            // result = 0.2, Precision = 38, Scale = 1
            // The largest scale between the enumerator and denominator is 1.  
            // Therefore, the result will only have a scale of 1.  
            // The result has been truncated.
            result = enumerator / denominator;
            Console.WriteLine("{0} / {1} = {3}", enumerator, denominator, result);
            
            enumerator = new TdDecimal(1, 0, 0, 0, 10, 5);
            denominator = new TdDecimal(4, 0, 0, 0, 10, 7);
            // Going to perform the operation 1.00000 / 4.0000000
            // result = 0.2500000, Precision = 38, Scale = 7
            // The largest scale between the enumerator and denominator is 7.
            result = enumerator / denominator;
            Console.WriteLine("{0} / {1} = {3}", enumerator, denominator, result);
            </code>
            </example>
        </member>
        <member name="M:Teradata.Client.Provider.TdDecimal.GetHashCode">
            <summary>
            Returns the hash code for this instance. 
            </summary>
            <returns>The hash code is returned</returns>
        </member>
        <member name="M:Teradata.Client.Provider.TdDecimal.Floor(Teradata.Client.Provider.TdDecimal)">
            <summary>
            Determines the largest whole number less than or equal to the specified TdDecimal structure.
            </summary>
            <param name="input">A TdDecimal structure</param>
            <returns>The TdDecimal containing the result is returned.</returns>
            <remarks>A TdDecimal.Null will be returned if the value is TdDecimal.Null.</remarks>
        </member>
        <member name="M:Teradata.Client.Provider.TdDecimal.Multiply(Teradata.Client.Provider.TdDecimal,Teradata.Client.Provider.TdDecimal)">
            <summary>
            The arithmetic product of two TdDecimals is calculated.
            </summary>
            <param name="left">A TdDecimal structure</param>
            <param name="right">A TdDecimal structure</param>
            <returns>A TdDecimal structure is returned whose value property contains the product of
            the left and right operands.</returns>
            <exception cref="T:System.OverflowException">
                <para>The scale of the result is greater than the <see cref="F:Teradata.Client.Provider.TdDecimal.MaxScale"/>.</para>
                <para>The result is greater than <see cref="F:Teradata.Client.Provider.TdDecimal.MaxValue"/>.</para>
                <para>The result is less than <see cref="F:Teradata.Client.Provider.TdDecimal.MinValue"/>.</para>
            </exception>
            <remarks><para>The result will be TdDecimal.Null if one of the parameter is TdDecimal.Null. </para>
                <para>Please refer to <see cref="M:Teradata.Client.Provider.TdDecimal.op_Multiply(Teradata.Client.Provider.TdDecimal,Teradata.Client.Provider.TdDecimal)"/> for more information.</para>
            </remarks>
            <example> Please refer to <see cref="M:Teradata.Client.Provider.TdDecimal.op_Multiply(Teradata.Client.Provider.TdDecimal,Teradata.Client.Provider.TdDecimal)"/> for an example on the use of the multiplication operator.</example>
        </member>
        <member name="M:Teradata.Client.Provider.TdDecimal.op_Multiply(Teradata.Client.Provider.TdDecimal,Teradata.Client.Provider.TdDecimal)">
            <summary>
            The arithmetic product of two TdDecimals is calculated.
            </summary>
            <param name="left">A TdDecimal structure</param>
            <param name="right">A TdDecimal structure</param>
            <returns>A TdDecimal structure is returned whose value property contains the product of
            the left and right operands.</returns>
            <exception cref="T:System.OverflowException">
                <para>The scale of the result is greater than the <see cref="F:Teradata.Client.Provider.TdDecimal.MaxScale"/>.</para>
                <para>The result is greater than <see cref="F:Teradata.Client.Provider.TdDecimal.MaxValue"/>.</para>
                <para>The result is less than <see cref="F:Teradata.Client.Provider.TdDecimal.MinValue"/>.</para>
            </exception>
            <remarks>
            <para>The result will be TdDecimal.Null if one of the parameter is TdDecimal.Null. </para>
            <para>The <c>Precision</c> of the result will be set to the mininum value between <c>TdDecimal.MaxPrecision</c>
            and the sum of the precisions between the left and right operands.  </para>
            <para>The <c>Scale</c> of the result will be the sum of the scales of the left and right operands.  An 
            <see cref="T:System.OverflowException"/> will be thrown if the sum of the scales are greater than the <c>TdDecimal.MaxScale</c>.</para>
            </remarks>
            <example>
            The following are multiplication examples:
            <code>
            // left = TdDecimal.MaxValue, right = 0.00000000000000000000000000000000000001
            // result = 0.99999999999999999999999999999999999999
            TdDecimal right01 = new TdDecimal(1, 0, 0, 0, 38, 38);
            TdDecimal result01 = TdDecimal.MaxValue * right01;
            Console.WriteLine("{0} * {1} = {2}", TdDecimal.MaxValue, right01, result01);
            
            // left = 7922816253271108167.1548469249, right = 50
            // result = 396140812663555408357.742346245
            TdDecimal left02 = new TdDecimal(0x00000001, 0x00000001, 0x00000001, 0x00000001, 38, 10);
            TdDecimal right02 = new TdDecimal(0x00000032, 0, 0, 0, 10, 0);
            TdDecimal result02 = left02 * right02;
            Console.WriteLine("{0} * {1} = {2}", left02, right02, result02);
            
            // left = 1001056.454, right = 89583732.32
            // result = 89678373412344.39328
            TdDecimal left03 = new TdDecimal(0x3BAAE8C6, 0, 0, 0, 38, 3);
            TdDecimal right03 = new TdDecimal(0x15F5ED70, 0x00000002, 0, 0, 38, 2);
            TdDecimal result03 = left03 * right03;
            Console.WriteLine("{0} * {1} = {2}", left03, right03, result03);
            
            // The following examples will throw OverflowExceptions
            
            // left = 0.0000000000347685438, right = 3.04857693086438675947
            // An Exception will be thrown because left03.Scale + right03.Scale is greater than the MaxScale.
            TdDecimal left04 = new TdDecimal(0x14B9423E, 0, 0, 0, 19, 19);
            TdDecimal right04 = new TdDecimal(0x263C55EB, 0x86C018A8, 0x00000010, 0, 21, 20);
            TdDecimal result04 = left04 * right04;
            
            // left = 45698476950985.76239, right = 5649658503494856.7545 
            TdDecimal left05 = new TdDecimal(0x3FFCFD6F, 0x3F6B5C44 , 0, 0, 19, 5);
            TdDecimal right05 = new TdDecimal(0xEEC261F9, 0x100C30C1 , 0x00000003, 0, 20, 4);
            // An OverflowException will be thrown because the result will be greater than MaxValue.
            TdDecimal result05 = left05 * right05;
            
            </code>
            </example>
        </member>
        <member name="M:Teradata.Client.Provider.TdDecimal.ToSingle(Teradata.Client.Provider.TdDecimal)">
            <summary>
            Converts the value of the specified TdDecimal into the equivalent <see cref="T:System.Single"/>.
            </summary>
            <param name="input">The TdDecimal that is to be converted to a single precision number.</param>
            <returns>A single precision value is returned that has the equivalent value as 
            the specified TdDecimal.</returns>
            <exception cref="T:Teradata.Client.Provider.TdException">The value in the TdDecimal 
            is Null.</exception>
            <remarks>A rounding error can occur because a single precision floating point number contains fewer 
            significant digits than a TdDecimal.</remarks>
        </member>
        <member name="M:Teradata.Client.Provider.TdDecimal.ToDouble(Teradata.Client.Provider.TdDecimal)">
            <summary>
            Converts the value of the specified TdDecimal into a <see cref="T:System.Double"/> .
            </summary>
            <param name="input">The TdDecimal that is to be converted to a double precision number.</param>
            <returns>A double precision value that is equivalent to the specified TdDecimal is returned.</returns>
            <exception cref="T:Teradata.Client.Provider.TdException">The value of the TdDecimal is Null.</exception>
            <remarks>A rounding error can occur because a Double precision floating point number contains fewer 
            significant digits than a TdDecimal.</remarks>
        </member>
        <member name="M:Teradata.Client.Provider.TdDecimal.ToInt16(Teradata.Client.Provider.TdDecimal)">
            <summary>
            Converts the value of the specified TdDecimal into the equivalent <see cref="T:System.Int16"/>.
            </summary>
            <param name="input">The TdDecimal that is to be converted to a 16-bit signed integer.</param>
            <returns>A 16-bit signed integer value that is equivalent to the TdDecimal is returned. </returns>
            <exception cref="T:Teradata.Client.Provider.TdException">The value is the TdDecimal is Null.</exception>
            <exception cref="T:System.OverflowException">The TdDecimal could not be converted to Int16</exception>
            <remarks>When a TdDecimal that has a <see cref="P:Teradata.Client.Provider.TdDecimal.Scale"/> greater than 0 is converted to a 16-bit signed integer
            the fractional part of the number will be truncated.</remarks>
        </member>
        <member name="M:Teradata.Client.Provider.TdDecimal.ToUInt16(Teradata.Client.Provider.TdDecimal)">
            <summary>
            Converts the value of the specified TdDecimal to the equivalent <see cref="T:System.UInt16"/>. 
            </summary>
            <param name="input">The TdDecimal that is to be converted to a 16-bit unsigned integer.</param>
            <returns>A 16-bit unsigned integer value that is equivalent to the specified TdDecimal is returned.</returns>
            <exception cref="T:Teradata.Client.Provider.TdException">The value of the TdDecimal 
            is Null.</exception>
            <exception cref="T:System.OverflowException">The TdDecimal could not be converted to UInt16</exception>
            <remarks>When a TdDecimal that has a <see cref="P:Teradata.Client.Provider.TdDecimal.Scale"/> greater than 0 is converted to a 16-bit unsigned integer
            the fractional part of the number will be truncated.</remarks>
        </member>
        <member name="M:Teradata.Client.Provider.TdDecimal.ToInt32(Teradata.Client.Provider.TdDecimal)">
            <summary>Converts the value of the specified TdDecimal into a <see cref="T:System.Int32"/>.</summary>
            <returns>A 32-bit signed integer value that is equivalent to the specified TdDecimal is returned. </returns>
            <exception cref="T:Teradata.Client.Provider.TdException">The value of the TdDecimal is Null.</exception>
            <exception cref="T:System.OverflowException">The TdDecimal could not be converted to Int32</exception>
            <remarks>When a TdDecimal that has a <see cref="P:Teradata.Client.Provider.TdDecimal.Scale"/> greater than 0 is converted to a 32-bit signed integer
            the fractional part of the number will be truncated.</remarks>
            <param name="input">The TdDecimal that is to be converted to a 32-bit signed integer.</param>
        </member>
        <member name="M:Teradata.Client.Provider.TdDecimal.ToUInt32(Teradata.Client.Provider.TdDecimal)">
            <summary>
                Converts the value of the specfied TdDecimal into a
                <see cref="T:System.UInt32"/>.
            </summary>
            <returns>A 32-bit unsigned integer value that is equivalent to the specified TdDecimal is returned.</returns>
            <exception cref="T:Teradata.Client.Provider.TdException">The value is the TdDecimal is Null.</exception>
            <exception cref="T:System.OverflowException">The TdDecimal is too big for an UInt32</exception>
            <remarks>When a TdDecimal that has a <see cref="P:Teradata.Client.Provider.TdDecimal.Scale"/> greater than 0 is converted to a 32-bit unsigned integer
            the fractional part of the number will be truncated.</remarks>
            <param name="input">The TdDecimal that is to be converted to a 32-bit unsigned integer.</param>
        </member>
        <member name="M:Teradata.Client.Provider.TdDecimal.ToBoolean(Teradata.Client.Provider.TdDecimal)">
            <summary>
            Converts the value of the specified TdDecimal to a <see cref="T:System.Boolean"/>. 
            </summary>
            <param name="input">The TdDecimal that is to be converted to a boolean.</param>
            <returns><c>true</c> if The TdDecimal is non-zero.  <c>false</c> if the TdDecimal is zero.</returns>
            <exception cref="T:Teradata.Client.Provider.TdException">The value of the TdDecimal is Null.</exception>
        </member>
        <member name="M:Teradata.Client.Provider.TdDecimal.ToByte(Teradata.Client.Provider.TdDecimal)">
            <summary>
            Converts the value of the specified TdDecimal to the equivalent <see cref="T:System.Byte"/>. 
            </summary>
            <param name="input">The TdDecimal that is to be converted to a 8-bit unsigned integer.</param>
            <returns>An 8-bit unsigned integer value that is equivalent to the specified TdDecimal is returned. </returns>
            <exception cref="T:Teradata.Client.Provider.TdException">The value is the TdDecimal is Null.</exception>
            <exception cref="T:System.OverflowException">The TdDecimal could not be converted Byte</exception>
            <remarks>When a TdDecimal that has a <see cref="P:Teradata.Client.Provider.TdDecimal.Scale"/> greater than 0 is converted to a 8-bit unsigned integer
            the fractional part of the number will be truncated.</remarks>
        </member>
        <member name="M:Teradata.Client.Provider.TdDecimal.ToSByte(Teradata.Client.Provider.TdDecimal)">
            <summary>
            Converts the value of the specified TdDecimal to the equivalent <see cref="T:System.SByte"/>. 
            </summary>
            <param name="input">The TdDecimal that is to be converted to a 8-bit signed integer.</param>
            <returns>An 8-bit signed integer equivalent to the specified TdDecimal is returned. </returns>
            <exception cref="T:Teradata.Client.Provider.TdException">The value is the TdDecimal is Null.</exception>
            <exception cref="T:System.OverflowException">The TdDecimal could not be converted to a SByte</exception>
            <remarks>When a TdDecimal that has a <see cref="P:Teradata.Client.Provider.TdDecimal.Scale"/> greater than 0 is converted to a 8-bit signed integer
            the fractional part of the number will be truncated.</remarks>
        </member>
        <member name="M:Teradata.Client.Provider.TdDecimal.ToInt64(Teradata.Client.Provider.TdDecimal)">
            <summary>
            Converts the value of the specified TdDecimal to the equivalent <see cref="T:System.Int64"/>. 
            </summary>
            <param name="input">The TdDecimal that is to be converted to a 64-bit signed integer.</param>
            <returns>A 64-bit signed integer equivalent to the specified TdDecimal is returned. </returns>
            <exception cref="T:Teradata.Client.Provider.TdException">The value is the TdDecimal is Null.</exception>
            <exception cref="T:System.OverflowException">The TdDecimal could not be converted an Int64</exception>
            <remarks>When a TdDecimal that has a <see cref="P:Teradata.Client.Provider.TdDecimal.Scale"/> greater than 0 is converted to a 64-bit signed integer
            the fractional part of the number will be truncated.</remarks>
        </member>
        <member name="M:Teradata.Client.Provider.TdDecimal.ToUInt64(Teradata.Client.Provider.TdDecimal)">
            <summary>
            Converts the value of the specified TdDecimal to the equivalent <see cref="T:System.UInt64"/>. 
            </summary>
            <param name="input">The TdDecimal that is to be converted to a 64-bit unsigned integer.</param>
            <returns>A 64-bit unsigned integer equivalent to the specified TdDecimal is returned. </returns>
            <exception cref="T:Teradata.Client.Provider.TdException">The value is the TdDecimal is Null.</exception>
            <exception cref="T:System.OverflowException">The TdDecimal could not be converted an UInt64</exception>
            <remarks>When a TdDecimal that has a <see cref="P:Teradata.Client.Provider.TdDecimal.Scale"/> greater than 0 is converted to a 64-bit unsigned integer
            the fractional part of the number will be truncated.</remarks>
        </member>
        <member name="M:Teradata.Client.Provider.TdDecimal.ToDecimal(Teradata.Client.Provider.TdDecimal)">
            <summary>
            Converts the value of the specified TdDecimal to the equivalent <see cref="T:System.Decimal"/>. 
            </summary>
            <param name="input">The TdDecimal that is to be converted to a <c>System.Decimal</c> value.</param>
            <returns>A <c>System.Decimal</c> value that is equivalent to the TdDecimal is returned. </returns>
            <exception cref="T:Teradata.Client.Provider.TdException">The TdDecimal value is Null.</exception>
            <exception cref="T:System.OverflowException">The TdDecimal could not be converted to a System.Decimal</exception>
            <remarks>When a TdDecimal has a precision greater than the maximum precision (29) of a <c>System.Decimal</c>
            it will be converted into a <c>System.Decimal</c> if the TdDecimal can be adjusted
            so the following are true:
            <para></para>
            <list type="bullet">
                    <item>
                        <description>The <c>actual precision</c> of the number will be less than or equal to the 
            maximum precision of <c>System.Decimal</c>.</description>
                    </item>
                    <item>
                        <description>The <c>Scale</c> will be less than or equal to the maximum scale of <c>System.Decimal</c></description>
                    </item>
            </list>
            <para></para>
            When TdDecimal is adjusted, the fractional part that will not fit into the <c>System.Decimal</c> will be truncated.
            <para></para>
            <para>The <c>actual precision</c> refers to the precision of the number contained in the TdDecimal structure, not the
            precision that was specified when creating the TdDecimal.  For example, the number <c>3.8432</c> has an
            actual precision of 5 and a scale of 4.  A TdDecimal can be initialized with this number with a precision
            defined as 38 and a scale of 4 using the constructor:</para>
            
            <para></para>
            <code>new TdDecimal(38432, 0, 0, 0, 38, 4)</code>
            <para></para>
            
            <para><c>System.Decimal</c> stores numbers as a <c>scaled integer</c>.  It can support a number with a maximum
            precision of 29, maximum scale of 28, and number in the range of minus or plus 79,228,162,514,264,337,593,543,950,335.  
            A <c>scaled integer</c> representation of a number is the number without any decimal separator.  For example, the 
            scale integer representation of 43567.90843 is 4356790843.  The range of valid numbers also applies to the numbers'
            scaled integer representation.</para>
            
            <para>Due to these characteristics of a System.Decimal, numbers that have valid precision/scale and are in the valid 
            range may not fit into a System.Decimal.  They will need to be truncated one decimal place.  These numbers will have 
            an actual precision of 29 and a scale greater than 0.  These numbers will also have a scaled integer representation 
            outside the valid range of a <c>System.Decimal</c>.  The following are examples of some of these numbers:</para>
            
            <list type="table">
            <listheader>
            <term>Number</term>
            <description>Scaled Integer Representation</description>
            </listheader>
            <item>
            <term>7.9228162514264337593543950336</term>
            <description>79228162514264337593543950336</description>
            </item>
            <item>
            <term>8922816251.4264337593543950335</term>
            <description>89228162514264337593543950335</description>
            </item>
            </list>
            
            <para>In order to perform a conversion to <c>System.Decimal</c>, these numbers will be truncated one
            decimal place.  </para>
            
            <list type="table">
            <listheader>
            <term>Number To Be Converted</term>
            <description>Result of ToDecimal Conversion</description>
            </listheader>
            <item>
            <term>7.9228162514264337593543950336</term>
            <description>7.922816251426433759354395033</description>
            </item>
            <item>
            <term>8922816251.4264337593543950335</term>
            <description>8922816251.426433759354395033</description>
            </item>
            <item>
            <term>7922816251426433759354959678.5</term>
            <description>7922816251426433759354959678</description>
            </item>
            <item>
            <term>9922816251426433759354395033.2</term>
            <description>9922816251426433759354395033</description>
            </item>
            </list>
            </remarks>
            <example>
            The following are examples of converting a TdDecimal to System.Decimal.
            <code>
            TdDecimal number;
            System.Decimal decimalConversion;
            
            // number = 98038.32    Precision = 7, Scale = 2
            number = new TdDecimal(0x00959838, 0, 0, 0, 7, 2);
            decimalConversion = TdDecimal.ToDecimal(number01);
            Console.WriteLine("TdDecimal {0} converted to System.Decimal {1}", number, decimalConversion);
            
            // number = 463748376236258608968456.45890325899806   Precision = 38, Scale = 14
            //     The System.Decimal will contain the value 463748376236258608968456.4589
            number01 = new TdDecimal(0x9B24EA1E, 0x9E6968B4, 0x322E08AD, 0x22E37806, 38, 14);
            decimalConversion = TdDecimal.ToDecimal(number);
            Console.WriteLine(TdDecimal {0} converted to System.Decimal {1}", number, decimalConversion);
            
            // The following example will throw an overflow exception because the TdDecimal cannot be 
            // adjusted to a Precision less than 29.
            // number = 46374837623625860896845645890325899.806   Precision = 38, Scale = 3
            number = new TdDecimal(0x9B24EA1E, 0x9E6968B4, 0x322E08AD, 0x22E37806, 38, 3);
            decimalConversion = TdDecimal.ToDecimal(number);
            </code>
            </example>
        </member>
        <member name="M:Teradata.Client.Provider.TdDecimal.ToString">
            <summary>
            Returns the string representation of the TdDecimal based on the current 
            culture of the running thread.
            </summary>
            <exception cref="T:System.FormatException">An incorrect format specifier is contained in the format string.</exception>
            <returns>The string representation for the TdDecimal is returned.</returns>
            <overloads>
            Converts this instance of TdDecimal into its corresponding String representation.  
            </overloads>
        </member>
        <member name="M:Teradata.Client.Provider.TdDecimal.ToString(System.String)">
            <summary>
            Returns the string representation of the TdDecimal based on the format string and current 
            culture of the running thread.
            </summary>
            <param name="format">The format string</param>
            <exception cref="T:System.FormatException">An incorrect format specifier is contained in the format string.</exception>
            <returns>The string representation of the TdDecimal in the format specified in the format string.</returns>
            <remarks>Refer to <see cref="M:Teradata.Client.Provider.TdDecimal.ToString(System.String,System.IFormatProvider)"/> for more information on the 
            format string.</remarks>
            <seealso cref="M:Teradata.Client.Provider.TdDecimal.ToString(System.String,System.IFormatProvider)"/>
        </member>
        <member name="M:Teradata.Client.Provider.TdDecimal.ToString(System.IFormatProvider)">
            <summary>
            Returns the string representation of the TdDecimal using the 
            culture-specific format information.
            </summary>
            <exception cref="T:System.FormatException">An incorrect format specifier is contained in the format string.</exception>
            <param name="provider">An IFormatProvider that supplies culture-specific 
            formatting information. </param>
            <returns>The String representation of this instance as specified by the culture 
            specific information provided by the format provider. </returns>
            <example>
            Refer to <see cref="M:Teradata.Client.Provider.TdDecimal.ToString(System.String,System.IFormatProvider)"/> for an example.
            </example>
        </member>
        <member name="M:Teradata.Client.Provider.TdDecimal.ToString(System.String,System.IFormatProvider)">
             <summary>
             Converts this instance to its equivalent String representation using the 
             specified format and culture-specific format information. 
             </summary>
             <param name="format">The format information</param>
             <param name="formatProvider">An IFormatProvider that supplies culture-specific formatting information. </param>
             <exception cref="T:System.FormatException">An incorrect format specifier is contained in the format string.</exception>
             <returns>The String representation of this instance as specified by format and provider. </returns>
             <exception cref="T:System.FormatException">An incorrect format specifier is contained in the format string.</exception>
             <remarks>
             <para>The format string is specified as</para> 
             <para><code>&lt;Format Specifier&gt;&lt;Precision Specifier&gt;</code></para>
             <para>A <code>null</code> can be passed in as the format string.  When this is done, the 'G' is 
             used as the Format Specifier.</para>
             <para>The following Format Specifiers are supported:</para>
             <list type="table">
             <listheader>
             <term>Format Specifier</term>
             <description>Description</description>
             </listheader>
             <item>
             <term>c or C</term>
             <description><para>Currency.</para></description>
             </item>
             <item>
             <term>e or E</term>
             <description><para>Exponential notation. </para></description>
             </item>
             <item>
             <term>f or F</term>
             <description><para>Fixed numeric Format.  </para></description>
             </item>
             <item>
             <term>g or G</term>
             <description><para>General numeric format.</para></description>
             </item>
             <item>
             <term>n or N</term>
             <description><para>Number format.</para></description>
             </item>
             <item>
             <term>p or P</term>
             <description><para>Percent format.</para></description>
             </item>
             </list>
             <para>The <strong>Precision Specifier</strong> indicates how many decimal places will appear in the 
             string.  It does not have to be specified.  A valid Precision Specifier is between 0 - 99.</para>
             
             <para>For more information on each of the supported Format Specifiers please refer to 
             <a href="http://msdn2.microsoft.com/en-us/library/dwhawy9k.aspx">Standard Numeric Format Strings</a>
             in MSDN.</para>
             
             <para>When a number is converted to a string, its format is controlled by the <see cref="T:System.Globalization.NumberFormatInfo"/>.
             For each specifier, this object contains formatting information that will be used when 
             constructing the numeric string.</para>
             
             <para><a href="http://msdn2.microsoft.com/en-us/library/0c899ak8.aspx">Custom format strings</a> are 
             not currently supported by TdDecimal.</para>
             </remarks>
             <example>
             <para>The following is an example on formatting a TdDecimal when converting to a String.</para> 
             
             <code>
             public void ToStringExample()
             {
                 TdDecimal value;
                 String result;
             
                 System.Globalization.NumberFormatInfo formatInfo;
             
                 value = TdDecimal.Parse("99873654.22318132");
             
                 // FIXED FORMAT
                 
                 // Using Default FormatProvider.
             
                 // result will be 99873654.22
                 result = value.ToString("f2");
             
                 // result will be 99873654.2232
                 result= value.ToString("f4");
             
                 // Going to change the the Decimal Separator
                 formatInfo.NumberDecimalSeparator = "##";
                
                 // result will be 99873654##223218
                 result = value.ToString("f6");
             
                 // CURRENCY FORMAT
             
                 // result will be $99,873,654.22
                 result = value.ToString("C2");
             
                 // Going to change the Currency Group Separator
                 numberFormat.CurrencyGroupSeparator = @"@@";
                 
                 // Going to chage the Currency Symbol
                 numberFormat.CurrencySymbol = "?";
             
                 // result will be ?99@@873@@654.22
                 //     NOTE:  There is a property, CurrencyDecimalSeparator,
                 //            that is used only for currency.  Therefore,
                 //            NumberDecimalSeparator has no affect 
                 //            on a string formatted with a "c".
                 result = value.ToString("c4");
             }
             </code>
            </example>
        </member>
        <member name="M:Teradata.Client.Provider.TdDecimal.Truncate(Teradata.Client.Provider.TdDecimal,System.Int32)">
            <summary>
            Truncates the specified TdDecimal structure to a specified decimal position. 
            </summary>
            <param name="input">The TdDecimal structure to be truncated.</param>
            <param name="position">The decimal position to which the number will be truncated.</param>
            <returns>The truncated number</returns>
            <exception cref="T:System.ArgumentOutOfRangeException">The position is out of the range of valid values.</exception>
            <remarks><para>A TdDecimal of TdDecimal.Null will return as TdDecimal.Null.</para>
            <para></para>
            <para>Truncation will only occur in the fractional part (digits to the left of decimal point) of
            a number.  Therefore, <paramref name="position"/> must be greater than or equal to 0.</para>
            </remarks>
            <example>
            <para>The following is an example of truncating a number:</para>
            <code>
                TdDecimal value = TdDecimal.Parse("10242954.9352");
              
                // Truncating at position 2 results in 10242954.93
                TdDecimal result = TdDecimal.Truncate(value, 2);
            
                // Truncating at position 0 reslts in 10242954
                result = TdDecimal.Truncate(value, 0);
            
                try
                {
                    // An ArgumentOutOfRangeException will be thrown if a negative value for position is specified.
                    result = TdDecimal.Truncate(value, -1);
                }
                catch (ArgumentOutOfRangeException)
                {
                    Console.WriteLine("A negative number cannot be specified for the position");
                }
            
            </code>
            </example>
        </member>
        <member name="M:Teradata.Client.Provider.TdDecimal.Round(Teradata.Client.Provider.TdDecimal,System.Int32)">
            <summary>
             The number nearest the specified TdDecimal’s value and position is calculated.
             </summary>
            <returns>The result of the round operation is returned as a TdDecimal.</returns>
            <param name="input">The TdDecimal that will be rounded.</param>
            <param name="position">The decimal place where rounding will occur.</param>\
            <remarks>
             <para>The <paramref name="position"/> can only be a positive value.  A positive position moves to the right of 
             the decimal.  For example, 328.5563 rounded at position 3 results in 328.556.  If a 
             position of 1 is specified a value of 328.6 is returned.</para>
            
            <para>By default, the behavior is to round to <see cref="T:System.MidpointRounding"/>.ToEven.
            For example, the following are the results of rounding the following numbers at the <c>third</c> decimal position: </para>
            
            <para></para>
            <list type="table">
            <listheader>
            <term>Value</term>
            <description>Result</description>
            </listheader>
            <item>
            <term>12343.2343434</term>
            <description>12343.234</description>
            </item>
            <item>
            <term>12343.234534</term>
            <description>12343.235</description>
            </item>
            <item>
            <term>12343.2355</term>
            <description>12343.236</description>
            </item>
            <item>
            <term>12343.2365</term>
            <description>12343.236</description>
            </item>
            </list>
             </remarks>
            <exception cref="T:System.ArgumentOutOfRangeException">Position is less than 0 or greater than 38.</exception>
            <exception cref="T:System.OverflowException">The result is not supported by TdDecimal.</exception>
            <example>
                The following is an example that rounds a TdDecimal at various positions: 
            <code lang="CS">
            //M indicates that the numeric literal is a System.Decimal
            
            TdDecimal original = new TdDecimal(867498.23535M);
             
            TdDecimal result1 = TdDecimal.Round(original, 2);
            TdDecimal result2 = TdDecimal.Round(original, 4);
             
            //The results will be as follows:
            //  result1 = 867498.24
            //  result2 = 867498.2354
            
            original = new TdDecimal(867498.646525M);
            
            TdDecimal result3 = TdDecimal.Round(original, 3);
            TdDecimal result4 = TdDecimal.Round(original, 5);
            
            //The results will be as follows:
            //  result3 = 867498.647
            //  result4 = 867498.64652
            </code>
            </example>
            <overloads>
            Rounds the value of a TdDecimal to a specified decimal position or to the nearest integer.  
            </overloads>
        </member>
        <member name="M:Teradata.Client.Provider.TdDecimal.Round(Teradata.Client.Provider.TdDecimal)">
            <summary>
            The integer nearest the TdDecimal’s value is calculated. 
            </summary>
            <param name="input">The TdDecimal that is to be rounded.</param>
            <exception cref="T:System.ArgumentOutOfRangeException">Position is less than 0 or greater than 38.</exception>
            <exception cref="T:System.OverflowException">The result is not supported by TdDecimal.</exception>
            <returns>The result of the round operation is returned as a TdDecimal</returns>
            <remarks>
            By default, the behavior of the rounding is to round <see cref="T:System.MidpointRounding"/>.ToEven.
            Refer to <see cref="M:Teradata.Client.Provider.TdDecimal.Round(Teradata.Client.Provider.TdDecimal,System.Int32)"/> for more information on rounding behavior.
            </remarks>
            <exception cref="T:System.OverflowException">The result is not supported by TdDecimal.</exception>
        </member>
        <member name="M:Teradata.Client.Provider.TdDecimal.Round(Teradata.Client.Provider.TdDecimal,System.MidpointRounding)">
            <summary>
            This method calculates the integer nearest the specified input.  
            A parameter is used to specify how the number is rounded if the result
            is between two numbers.
            </summary>
            <param name="input">The TdDecimal that is to be rounded.</param>
            <param name="mode">Indicates how to round the input if it is midway between two numbers.</param>
            <returns>The result of the round operation is returned as a TdDecimal</returns>
            <remarks>
            Refer to <see cref="T:System.MidpointRounding"/> and <see cref="M:Teradata.Client.Provider.TdDecimal.Round(Teradata.Client.Provider.TdDecimal,System.Int32)"/>
            for more information on rounding behavior.
            </remarks>
            <exception cref="T:System.ArgumentException">mode is not a MidPointRounding value.</exception>
            <exception cref="T:System.OverflowException">The result is not supported by TdDecimal.</exception>
        </member>
        <member name="M:Teradata.Client.Provider.TdDecimal.Round(Teradata.Client.Provider.TdDecimal,System.Int32,System.MidpointRounding)">
            <summary>
            The number nearest the specified TdDecimal’s value and position is calculated.  The mode is 
            used to determine how the reslt will be rounded if it is midway between two other numbers.
            </summary>
            <param name="input">The TdDecimal that is to be rounded.</param>
            <param name="position">Decimal position where the rounding is to occurr.</param>
            <param name="mode">Indicates how to round the input if it is midway between two numbers.</param>
            <returns>The result of the round operation is returned as a TdDecimal</returns>
            <remarks>
            Please refer to <see cref="T:System.MidpointRounding"/> and <see cref="M:Teradata.Client.Provider.TdDecimal.Round(Teradata.Client.Provider.TdDecimal,System.Int32)"/>
            for more information on rounding behavior.
            </remarks>
            <exception cref="T:System.ArgumentOutOfRangeException">Position is less than 0 or greater than 38.</exception>
            <exception cref="T:System.ArgumentException">mode is not a MidPointRounding value.</exception>
            <exception cref="T:System.OverflowException">The result is not supported by TdDecimal.</exception>
        </member>
        <member name="M:Teradata.Client.Provider.TdDecimal.Parse(System.String)">
            <summary>
            Converts the String representation of a number to its TdDecimal equivalent. 
            </summary>
            <param name="input">The numeric string that is to be converted to a TdDecimal.</param>
            <returns>The TdDecimal representation of the specified numeric string</returns>
            <remarks>
            <para>The numeric string that is to be converted to a TdDecimal must have the following
            format:</para>
            
            <para></para>
                 [white space][sign]digits.[fractional digits][sign][white space]
            <para></para>
            
            <para>The items in brackets are optional.  The <c>sign</c> can appear at the beginning of the digits
            or the end. However it cannot appear at both locations. The <c>digits</c> can also be grouped by 
            a group separator. The number in each group is not checked.  However, if a group separator is specified 
            it must be followed by digits.  For example,</para>
            
            <para>
            <list type="table">
            <listheader>
                <term>String</term>
                <description>Result</description>
            </listheader>
            <item>
            <term>1234562546908.23442</term>
            <description>is a <c>valid</c> string</description>
            </item>
            <item>
            <term>1,234,562,546,908.23442</term>
            <description>is a <c>valid</c> string</description>
            </item>
            <item>
            <term>1234,562546,9,08.23442</term>
            <description>is a <c>valid</c> string</description>
            </item>
            <item>
            <term>+1234562546908.23442</term>
            <description>is a <c>valid</c> string</description>
            </item>
            <item>
            <term>1234562546908.23442-</term>
            <description>is a <c>valid</c> string</description>
            </item>
            <item>
            <term>-1234562546908.23442-</term>
            <description>is an <c>invalid</c> string</description>
            </item>
            <item>
            <term>1,234,562,546,908,</term>
            <description>is an <c>invalid</c> string</description>
            </item>
            <item>
            <term>1,234,562,546,908.23,442</term>
            <description>is an <c>invalid</c> string</description>
            </item>
            </list>
            </para>
            
            <para>Both the group separator and decimal separator are culture specific.</para>
            
            <para>If the <paramref name="input"/> contains the string "NULL" a <see cref="F:Teradata.Client.Provider.TdDecimal.Null"/>
            will be returned.</para> 
            
            </remarks>
            
            <exception cref="T:System.FormatException">The format of the numeric string is invalid.</exception>
            <exception cref="T:System.OverflowException">The specified numeric string could not be converted to a TdDecimal</exception>
            <exception cref="T:System.ArgumentNullException">The numeric string is null.</exception>
            
            <overloads>
            Converts a numeric string into an equivalent instance of a TdDecimal.
            </overloads>
        </member>
        <member name="M:Teradata.Client.Provider.TdDecimal.Parse(System.String,System.IFormatProvider)">
            <summary>
            Converts the String representation of a number to its TdDecimal equivalent 
            using the specified culture-specific format information. 
            </summary>
            <param name="input">The numeric string that is to be converted to a TdDecimal.</param>
            <param name="provider">An IFormatProvider that supplies culture-specific formatting information. </param>
            <returns>The TdDecimal representation of the specified numeric string.</returns>
            <remarks>
            <para>A reference to the <see cref="T:System.Globalization.NumberFormatInfo"/> associated with the specified
            <paramref name="provider"/> is retrieved.  The properties of the <c>NumberFormatInfo</c> are used
            when parsing the numeric string.  However, the only culture specific properties that are supported
            are as follows:</para>
            
            <para>
            <list type="bullet">
            <item>
            <description>Negative Sign</description>
            </item>
            <item>
            <description>Positive Sign</description>
            </item>
            <item>
            <description>Number Group Separator</description>
            </item>
            <item>
            <description>Number Decimal Separator</description>
            </item>
            </list>
            </para>
            
            <para>If the <paramref name="input"/> contains the string "NULL" a <see cref="F:Teradata.Client.Provider.TdDecimal.Null"/>
            will be returned.</para>
            
            <para>Refer to <see cref="M:Teradata.Client.Provider.TdDecimal.Parse(System.String)"/> for further information about the
            format of the numeric string.</para>
            
            </remarks>
            <exception cref="T:System.FormatException">The format of the numeric string is invalid.</exception>
            <exception cref="T:System.OverflowException">The specified numeric string could not be converted to a TdDecimal</exception>
            <exception cref="T:System.ArgumentNullException">The numeric string is null.</exception>
        </member>
        <member name="M:Teradata.Client.Provider.TdDecimal.TryParse(System.String,Teradata.Client.Provider.TdDecimal@)">
            <summary>
            Converts the String representation of a number to its TdDecimal equivalent.
            A boolean is returned that indicates whether the conversion succeeded.
            </summary>
            <param name="input">The string to be converted.</param>
            <param name="result">The TdDecimal representation of the string</param>
            <returns><c>true</c> if value was converted successfully, <c>false</c> otherwise.</returns>
            <remarks>
            Please refer to <see cref="M:Teradata.Client.Provider.TdDecimal.Parse(System.String)"/> for more information.
            </remarks>
        </member>
        <member name="M:Teradata.Client.Provider.TdDecimal.TryParse(System.String,System.IFormatProvider,Teradata.Client.Provider.TdDecimal@)">
            <summary>
            Converts the String representation of a number to its TdDecimal equivalent using
            culture specific information.
            </summary>
            <param name="input">The string to be converted</param>
            <param name="provider">Contains the culture specific information.</param>
            <param name="result">The TdDecimal representation of value.</param>
            <returns><c>true</c> if value was converted successfully, <c>false</c> otherwise.</returns>
            <remarks>
            Please refer to <see cref="M:Teradata.Client.Provider.TdDecimal.Parse(System.String,System.IFormatProvider)"/> for more information.
            </remarks>
            <overloads>
            Converts a numeric string to an equivalent instance of a TdDecimal.  A <c>true</c> is returned
            if the conversion succeeded, <c>false</c> otherwise.
            </overloads>
        </member>
        <member name="M:Teradata.Client.Provider.TdDecimal.op_Explicit(Teradata.Client.Provider.TdDecimal)~System.Byte">
            <summary>
            Converts a TdDecimal to a System.Byte. 
            </summary>
            <param name="input">A TdDecimal</param>
            <returns>A Byte</returns>
            <exception cref="T:Teradata.Client.Provider.TdException">The value of the TdDecimal is Null.</exception>
            <exception cref="T:System.OverflowException"></exception>
        </member>
        <member name="M:Teradata.Client.Provider.TdDecimal.op_Explicit(Teradata.Client.Provider.TdDecimal)~System.Char">
            <summary>
            Converts a TdDecimal to A System.Char
            </summary>
            <exception cref="T:System.OverflowException">The TdDecimal could not be converted to Char</exception>
            <param name="input">A TdDecimal</param>
            <returns>A Char</returns>
        </member>
        <member name="M:Teradata.Client.Provider.TdDecimal.op_Explicit(Teradata.Client.Provider.TdDecimal)~System.Double">
            <summary>
            Converts a TdDecimal to a System.Double
            </summary>
            <param name="input">A TdDecimal</param>
            <returns>A Double</returns>
            <exception cref="T:Teradata.Client.Provider.TdException">The value of the TdDecimal is Null.</exception>
            <exception cref="T:System.OverflowException"></exception>
        </member>
        <member name="M:Teradata.Client.Provider.TdDecimal.op_Explicit(Teradata.Client.Provider.TdDecimal)~System.Int16">
            <summary>
            Converts a TdDecimal to a System.Int16
            </summary>
            <param name="input">A TdDecimal</param>
            <returns>A Int16</returns>
            <exception cref="T:Teradata.Client.Provider.TdException">The value of the TdDecimal is Null.</exception>
            <exception cref="T:System.OverflowException"></exception>
        </member>
        <member name="M:Teradata.Client.Provider.TdDecimal.op_Explicit(Teradata.Client.Provider.TdDecimal)~System.Int32">
            <summary>
            Converts a TdDecimal to a System.Int32
            </summary>
            <param name="input">A TdDecimal</param>
            <returns>A Int32</returns>
            <exception cref="T:Teradata.Client.Provider.TdException">The value of the TdDecimal is Null.</exception>
            <exception cref="T:System.OverflowException"></exception>
        </member>
        <member name="M:Teradata.Client.Provider.TdDecimal.op_Explicit(Teradata.Client.Provider.TdDecimal)~System.Int64">
            <summary>
            Converts a TdDecimal to a System.Int64
            </summary>
            <param name="input">A TdDecimal</param>
            <returns>A Int64</returns>
            <exception cref="T:Teradata.Client.Provider.TdException">The value of the TdDecimal is Null.</exception>
            <exception cref="T:System.OverflowException"></exception>
        </member>
        <member name="M:Teradata.Client.Provider.TdDecimal.op_Explicit(Teradata.Client.Provider.TdDecimal)~System.Decimal">
            <summary>
            Converts a TdDecimal to a System.Decimal
            </summary>
            <param name="input">A TdDecimal</param>
            <returns>A System.Decimal</returns>
            <exception cref="T:Teradata.Client.Provider.TdException">The value of the TdDecimal is Null.</exception>
            <exception cref="T:System.OverflowException"></exception>
        </member>
        <member name="M:Teradata.Client.Provider.TdDecimal.op_Explicit(Teradata.Client.Provider.TdDecimal)~System.SByte">
            <summary>
            Converts a TdDecimal to a System.SByte
            </summary>
            <param name="input">A TdDecimal</param>
            <returns>A SByte</returns>
            <exception cref="T:Teradata.Client.Provider.TdException">The value of the TdDecimal is Null.</exception>
            <exception cref="T:System.OverflowException"></exception>
        </member>
        <member name="M:Teradata.Client.Provider.TdDecimal.op_Explicit(Teradata.Client.Provider.TdDecimal)~System.Single">
            <summary>
            Converts a TdDecimal to a System.Single
            </summary>
            <param name="input">A TdDecimal</param>
            <returns>A Single</returns>
            <exception cref="T:Teradata.Client.Provider.TdException">The value of the TdDecimal is Null.</exception>
            <exception cref="T:System.OverflowException"></exception>
        </member>
        <member name="M:Teradata.Client.Provider.TdDecimal.op_Explicit(Teradata.Client.Provider.TdDecimal)~System.UInt16">
            <summary>
            Converts a TdDecimal to a System.UInt16
            </summary>
            <param name="input">A TdDecimal</param>
            <returns>A UInt16</returns>
            <exception cref="T:Teradata.Client.Provider.TdException">The value of the TdDecimal is Null.</exception>
            <exception cref="T:System.OverflowException"></exception>
        </member>
        <member name="M:Teradata.Client.Provider.TdDecimal.op_Explicit(Teradata.Client.Provider.TdDecimal)~System.UInt32">
            <summary>
            Converts a TdDecimal to a System.UInt32
            </summary>
            <param name="input">A TdDecimal</param>
            <returns>A UInt32</returns>
            <exception cref="T:Teradata.Client.Provider.TdException">The value of the TdDecimal is Null.</exception>
            <exception cref="T:System.OverflowException"></exception>
        </member>
        <member name="M:Teradata.Client.Provider.TdDecimal.op_Explicit(Teradata.Client.Provider.TdDecimal)~System.UInt64">
            <summary>
            Converts a TdDecimal to a System.UInt64
            </summary>
            <param name="input">A TdDecimal</param>
            <returns>A UInt64</returns>
            <exception cref="T:Teradata.Client.Provider.TdException">The value of the TdDecimal is Null.</exception>
            <exception cref="T:System.OverflowException"></exception>
        </member>
        <member name="M:Teradata.Client.Provider.TdDecimal.op_Explicit(System.Double)~Teradata.Client.Provider.TdDecimal">
            <summary>
            Converts a System.Double to a TdDecimal.
            </summary>
            <param name="input">A Double</param>
            <returns>A TdDecimal</returns>
        </member>
        <member name="M:Teradata.Client.Provider.TdDecimal.op_Explicit(System.Single)~Teradata.Client.Provider.TdDecimal">
            <summary>
            Converts a System.Single to a TdDecimal.
            </summary>
            <param name="input">A Single</param>
            <returns>A TdDecimal</returns>
        </member>
        <member name="M:Teradata.Client.Provider.TdDecimal.op_Implicit(System.Byte)~Teradata.Client.Provider.TdDecimal">
            <summary>
            Converts a System.Byte to a TdDecimal.
            </summary>
            <param name="input">A Byte</param>
            <returns>A TdDecimal</returns>
        </member>
        <member name="M:Teradata.Client.Provider.TdDecimal.op_Implicit(System.Char)~Teradata.Client.Provider.TdDecimal">
            <summary>
            Converts a System.Char to a TdDecimal.
            </summary>
            <param name="input">A Char</param>
            <returns>A TdDecimal</returns>
        </member>
        <member name="M:Teradata.Client.Provider.TdDecimal.op_Implicit(System.Int16)~Teradata.Client.Provider.TdDecimal">
            <summary>
            Converts a System.Int16 to a TdDecimal.
            </summary>
            <param name="input">A Int16</param>
            <returns>A TdDecimal</returns>
        </member>
        <member name="M:Teradata.Client.Provider.TdDecimal.op_Implicit(System.Int32)~Teradata.Client.Provider.TdDecimal">
            <summary>
            Converts a System.Int32 to a TdDecimal.
            </summary>
            <param name="input">A Int32</param>
            <returns>A TdDecimal</returns>
        </member>
        <member name="M:Teradata.Client.Provider.TdDecimal.op_Implicit(System.Int64)~Teradata.Client.Provider.TdDecimal">
            <summary>
            Converts a System.Int64 to a TdDecimal.
            </summary>
            <param name="input">A Int64</param>
            <returns>A TdDecimal</returns>
        </member>
        <member name="M:Teradata.Client.Provider.TdDecimal.op_Implicit(System.Decimal)~Teradata.Client.Provider.TdDecimal">
            <summary>
            Converts a System.Decimal to a TdDecimal
            </summary>
            <param name="input">A System.Decimal</param>
            <returns>A TdDecimal</returns>
        </member>
        <member name="M:Teradata.Client.Provider.TdDecimal.op_Implicit(System.SByte)~Teradata.Client.Provider.TdDecimal">
            <summary>
            Converts a System.SByte to a TdDecimal.
            </summary>
            <param name="input">A SByte</param>
            <returns>A TdDecimal</returns>
        </member>
        <member name="M:Teradata.Client.Provider.TdDecimal.op_Implicit(System.UInt16)~Teradata.Client.Provider.TdDecimal">
            <summary>
            Converts a System.UInt16 to a TdDecimal.
            </summary>
            <param name="input">A UInt16</param>
            <returns>A TdDecimal</returns>
        </member>
        <member name="M:Teradata.Client.Provider.TdDecimal.op_Implicit(System.UInt32)~Teradata.Client.Provider.TdDecimal">
            <summary>
            Converts a System.UInt32 to a TdDecimal.
            </summary>
            <param name="input">A UInt32</param>
            <returns>A TdDecimal</returns>
        </member>
        <member name="M:Teradata.Client.Provider.TdDecimal.op_Implicit(Teradata.Client.Provider.TdDecimal)~Teradata.Client.Provider.TdNumber">
            <summary>
            Converts a TdDecimal to a TdNumber.
            </summary>
            <param name="input">The TdDecimal that is to be converted to a TdNumber.</param>
            <returns>A TdNumber is returned that is equivalent to the <paramref name="input"/>.</returns>
        </member>
        <member name="M:Teradata.Client.Provider.TdDecimal.op_Implicit(System.UInt64)~Teradata.Client.Provider.TdDecimal">
            <summary>
            Converts a System.UInt64 to a TdDecimal.
            </summary>
            <param name="input">A UInt64</param>
            <returns>A TdDecimal</returns>
        </member>
        <member name="M:Teradata.Client.Provider.TdDecimal.Equals(System.Object)">
            <summary>
                Compares this instance and <paramref name="obj"/> to determine whether they are equal.
            </summary>
            <returns><c>true</c> is returned if the two TdDecimals are equal, <c>false</c> otherwise.</returns>
            <remarks>
            	<para><c>false</c> will be returned if:</para>
            	<list type="bullet">
            		<item>
                        This instance or <paramref name="obj"/> is <see cref="F:Teradata.Client.Provider.TdDecimal.Null"/>.
                    </item>
            		<item>
                        This instance is not equal to <paramref name="obj"/>.
                    </item>
            		<item>
            			<paramref name="obj"/> is not of type TdDecimal or <c>null</c>.
                    </item>
            	</list>
            	<para><c>true</c> will be returned if:</para>
            	<list type="bullet">
            		<item>
                        This instance and <paramref name="obj"/> are <Strong>Null</Strong>.
                    </item>
            		<item>
                        This instance is equal to <paramref name="obj"/>.
                    </item>
            	</list>
            </remarks>
            <example>
                The following code example uses various comparison methods and operators: 
                <code lang="CS">
            // The M is used to indicate that the numeric literal is a System.Decimal
            TdDecimal  large = new TdDecimal(32425643243167.43433M);
            Object medium = new TdDecimal(89732.4543M);
             
            // The following comparison is equivalent to using
            //    false == TdDecimal.Equals(large, (TdDecimal) medium)
            //    large != (TdDecimal) medium
            //    true == TdDecimal.NotEquals(large, (TdDecimal) medium)
            //    
            if (false == large.Equals(medium))
            {
               Console.WriteLine("large does not equal medium");
            }
                </code>
            </example>
            <overloads>Returns a value indicating whether two instances of TdDecimal are equal.</overloads>
            <param name="obj">TdDecimal instance that will be compared to this instance of TdDecimal.</param>
        </member>
        <member name="M:Teradata.Client.Provider.TdDecimal.Equals(Teradata.Client.Provider.TdDecimal)">
            <summary>
            Compares this instance and another TdDecimal to determine whether they are equal. 
            </summary>
            <returns><c>true</c> if the two TdDecimals are equal, <c>false</c> otherwise.</returns>
            <remarks>
            	<para><c>false</c> will be returned if:</para>
            	<list type="bullet">
            		<item>
                        This instance or <paramref name="other"/> is <see cref="F:Teradata.Client.Provider.TdDecimal.Null"/>.
                    </item>
            		<item>
                        This instance is not equal to <paramref name="other"/>.
                    </item>
            	</list>
            	<para><c>true</c> will be returned if:</para>
            	<list type="bullet">
            		<item>
                        This instance and <paramref name="other"/> are <Strong>Null</Strong>.
                    </item>
            		<item>
                        This instance is equal to <paramref name="other"/>.
                    </item>
            	</list>
            </remarks>
            <param name="other">TdDecimal instance that will be compared to this instance of TdDecimal.</param>
        </member>
        <member name="M:Teradata.Client.Provider.TdDecimal.CompareTo(System.Object)">
            <summary>
            Compares this instance to the specified TdDecimal <paramref name="obj"/>. 
            </summary>
            <returns>
            	<para>
                    A signed number indicating how this instance compares to <paramref name="obj"/>.
                </para>
            	<para>
            		<list type="table">
            			<listheader>
            				<term>Return Value</term>
            				<description>Meaning</description>
            			</listheader>
            			<item>
            				<term>Less than Zero</term>
            				<description>
            					<para>This instance is less than <paramref name="obj"/>.</para>
            					<para>-or-</para>
            					<para>This instance is <see cref="F:Teradata.Client.Provider.TdDecimal.Null"/>.</para>
            				</description>
            			</item>
            			<item>
            				<term>Zero</term>
            				<description>
            					<para>
                                    This instance is equal to <paramref name="obj"/>.
                                </para>
            					<para>-or-</para>
            					<para>This instance is <Strong>Null</Strong> and <paramref name="obj"/> is <Strong>Null</Strong>.</para>
            				</description>
            			</item>
            			<item>
            				<term>Greater than Zero</term>
            				<description>
            					<para>
                                    This instance is greater than <paramref name="obj"/>.
                                </para>
            					<para>-or-</para>
            					<para>
            						<paramref name="obj"/> is <Strong>Null</Strong> or a <c>null</c> reference.
                                </para>
            				</description>
            			</item>
            		</list>
            	</para>
            </returns>
            <remarks>
              <para><paramref name="obj"/> must be an instance of TdDecimal type or <c>null</c> reference.</para>
            </remarks>
            <exception cref="T:System.ArgumentException"><paramref name="obj"/> is not of type TdDecimal</exception>
            <seealso cref="M:Teradata.Client.Provider.TdDecimal.CompareTo(Teradata.Client.Provider.TdDecimal)"/>
            <overloads>
            Compares this instance to the supplied object and returns whether it is less
            than, equal or greater than the supplied object.
            </overloads>
            <param name="obj">TdDecimal instance to compare against.</param>
        </member>
        <member name="M:Teradata.Client.Provider.TdDecimal.CompareTo(Teradata.Client.Provider.TdDecimal)">
            <summary>
            Compares this instance to the specified TdDecimal <paramref name="other"/>. 
            </summary>
            <returns>
            	<para>
                    A signed number indicating how this instance compares to
                    <paramref name="other"/>.
                </para>
            	<para>
            		<list type="table">
            			<listheader>
            				<term>Return Value</term>
            				<description>Meaning</description>
            			</listheader>
            			<item>
            				<term>Less than Zero</term>
            				<description>
            					<para>
                                    This instance is less than <paramref name="other"/>.
                                </para>
            					<para>-or-</para>
            					<para>This instance is <see cref="F:Teradata.Client.Provider.TdDecimal.Null"/>.</para>
            				</description>
            			</item>
            			<item>
            				<term>Zero</term>
            				<description>
            					<para>
                                    This instance is equal to <paramref name="other"/>.
                                </para>
            					<para>-or-</para>
            					<para>This instance is <Strong>Null</Strong> and value is <Strong>Null</Strong>.</para>
            				</description>
            			</item>
            			<item>
            				<term>Greater than Zero</term>
            				<description>
            					<para>
                                    This instance is greater than
                                    <paramref name="other"/>.
                                </para>
            					<para>-or-</para>
            					<para>
            						<paramref name="other"/> is <Strong>Null</Strong>.
                                </para>
            				</description>
            			</item>
            		</list>
            	</para>
            </returns>
            <param name="other">The TdDecimal to compare against.</param>
        </member>
        <member name="M:Teradata.Client.Provider.TdDecimal.GetXmlSchema(System.Xml.Schema.XmlSchemaSet)">
             <summary>
             Specifies the XML Qualified name for <strong>TdDecimal</strong> XML type mapping.
             </summary>
             <param name="xmlSchemaSet">Holds zero or more XML Schema definition language (XSD) schemas.</param>
             <returns>
             Returns <strong>xs:decimal</strong> since it can support large decimals with 38 precision.
             </returns>
             <example>
             This examples shows how to use <strong>TdDecimal</strong> with <see cref="T:System.Xml.Serialization.XmlSerializer"/> class.
             <see cref="T:System.Xml.Serialization.XmlElementAttribute"/> is used to indicate that the Teradata Database column can be <strong>Null</strong>.
             <code>
              public class Order
              {
                  public DateTime Date;
            
                  public Int32 ProductId;
            
                  public Int32 Quantity;
            
                  public Int32? BackOrderQuantity;
            
                  [XmlElementAttribute(IsNullable = true)]        
                  public TdDecimal BackOrderPrice;
              }
             
              internal class OrderWriter
              {
              
                  public static void Write()
                  {
                      // Setup the order
                      Order x = new Order();
              
                      x.Date = DateTime.Today;
                      x.ProductId = 100;
                      x.Quantity = 2000;
                      x.BackOrderQuantity = null;
                      x.BackOrderPrice = TdDecimal.Null;
            
                      // Write out today's orders to the file.
                      //
                      // Open the file.
                      XmlWriterSettings settings = new XmlWriterSettings();
                      settings.Indent = true;
                      XmlWriter writer = XmlWriter.Create(@"C:\Temp\TodayOrders.XML", settings);
                      writer.WriteStartElement("TodayOrders");
                
                      // Write out the schema.
                      XmlSchemas schemas = new XmlSchemas();
                      XmlSchemaExporter schExporter = new XmlSchemaExporter(schemas);
                      schExporter.ExportTypeMapping(new XmlReflectionImporter().ImportTypeMapping(typeof(Order)));
                      schemas[0].Write(writer);
            
                      // Write out the orders.
                      XmlSerializer xml = new XmlSerializer(typeof(Order));
                      xml.Serialize(writer, x);
              
                      // Close the document.
                      writer.WriteEndDocument();
                      writer.Close();
                  }
              }
             
              /* Output is:
             
              &lt;TodayOrders&gt;
                &lt;xs:schema elementFormDefault="qualified" xmlns:xs="http://www.w3.org/2001/XMLSchema"&gt;
                  &lt;xs:element name="Order" nillable="true" type="Order" /&gt;
                  &lt;xs:complexType name="Order"&gt;
                    &lt;xs:sequence&gt;
                      &lt;xs:element minOccurs="1" maxOccurs="1" name="Date" type="xs:dateTime" /&gt;
                      &lt;xs:element minOccurs="1" maxOccurs="1" name="ProductId" type="xs:int" /&gt;
                      &lt;xs:element minOccurs="1" maxOccurs="1" name="Quantity" type="xs:int" /&gt;
                      &lt;xs:element minOccurs="1" maxOccurs="1" name="BackOrderQuantity" nillable="true" type="xs:int" /&gt;
                      &lt;xs:element minOccurs="1" maxOccurs="1" name="BackOrderPrice" nillable="true" type="xs:decimal" /&gt;
                    &lt;/xs:sequence&gt;
                  &lt;/xs:complexType&gt;
                &lt;/xs:schema&gt;
                &lt;Order xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xmlns:xsd="http://www.w3.org/2001/XMLSchema"&gt;
                  &lt;Date&gt;2007-02-01T00:00:00-08:00&lt;/Date&gt;
                  &lt;ProductId&gt;100&lt;/ProductId&gt;
                  &lt;Quantity&gt;2000&lt;/Quantity&gt;
                  &lt;BackOrderQuantity xsi:nil="true" /&gt;
                  &lt;BackOrderPrice xsi:nil="true" /&gt;
                &lt;/Order&gt;
              &lt;/TodayOrders&gt;
             
              */
             </code>
             </example>
        </member>
        <member name="M:Teradata.Client.Provider.TdDecimal.Compare(Teradata.Client.Provider.TdDecimal,Teradata.Client.Provider.TdDecimal)">
            <summary>
            Compares two instances of TdDecimal and returns a value indicating whether <paramref name="left"/> is
            greater than, less than or equal to <paramref name="right"/>.
            </summary>
            <returns>
            	<list type="table">
            		<listheader>
            			<term>Return Value</term>
            			<description>Meaning</description>
            		</listheader>
            		<item>
            			<term>Less than zero</term>
            			<description>
                            <para><paramref name="left"/> is less than <paramref name="right"/>.</para> 
                            <para>-or-</para>
                            <para><paramref name="left"/> is <see cref="F:Teradata.Client.Provider.TdDecimal.Null"/>.</para>
                        </description>
            		</item>
            		<item>
            			<term>Zero</term>
            			<description>
                            <para><paramref name="left"/> is equal to <paramref name="right"/>.</para>
                            <para>-or-</para>
                            <para><paramref name="left"/> and <paramref name="right"/> are <Strong>Null</Strong>.</para>
                        </description>
            		</item>
            		<item>
            			<term>Greater than zero</term>
            			<description>
                            <para><paramref name="left"/> is greater than <paramref name="right"/>.</para>
                            <para>-or-</para>
                            <para><paramref name="right"/> is <Strong>Null.</Strong></para>
                        </description>
            		</item>
            	</list>
            </returns>
            <seealso cref="M:Teradata.Client.Provider.TdDecimal.CompareTo(Teradata.Client.Provider.TdDecimal)"/>
            <param name="left">An instance of TdDecimal.</param>
            <param name="right">An instance of TdDecimal.</param>
        </member>
        <member name="M:Teradata.Client.Provider.TdDecimal.Equals(Teradata.Client.Provider.TdDecimal,Teradata.Client.Provider.TdDecimal)">
            <summary>
                Compares two <see cref="T:Teradata.Client.Provider.TdDecimal"/> instances to determine whether they are
                equal.
            </summary>
            <returns>
            	<para>
            		<c>true</c> if the <paramref name="left"/> is 
                    equal to the <paramref name="right"/>, <c>false</c> otherwise.
                </para>
            	<para>
            		<list type="table">
            			<listheader>
            				<term>Return Value</term>
            				<description>Description</description>
            			</listheader>
            			<item>
            				<term><c>true</c></term>
                            <description>
                                <para><paramref name="left"/> and <paramref name="right"/> are <see cref="F:Teradata.Client.Provider.TdDecimal.Null"/></para> 
                                <para>-or-</para>
                                <para><paramref name="left"/> is equal to <paramref name="right"/>.</para>
                            </description>
            			</item>
            			<item>
            				<term><c>false</c></term>
                            <description>
                            <para><paramref name="left"/> or <paramref name="right"/> is <strong>Null</strong></para>
                            <para>-or-</para>
                            <para><paramref name="left"/> is not equal to <paramref name="right"/>.</para>
                            </description>
            			</item>
            		</list>
            	</para>
            </returns>
            <example>
                The following code example uses various comparison methods and operators.
                <code lang="CS">
            // The M is used to indicate that the numeric literal is a System.Decimal
            TdDecimal  large = new TdDecimal(32425643243167.43433M);
            TdDecimal medium = new TdDecimal(89732.4543M);
             
            // The following comparison methods and operators are equivalent
            if (false == TdDecimal.Equals(large, medium) ||
                large != medium ||
                true == TdDecimal.NotEquals(large, medium) )
            {
               Console.WriteLine("large does not equal medium");
            }
                </code>
            </example>
            <param name="left">A TdDecimal instance.</param>
            <param name="right">A TdDecimal instance.</param>
        </member>
        <member name="M:Teradata.Client.Provider.TdDecimal.NotEquals(Teradata.Client.Provider.TdDecimal,Teradata.Client.Provider.TdDecimal)">
            <summary>
            Compares two TdDecimals to determine whether the <paramref name="left"/> operand is 
            not equal to the <paramref name="right"/> operand.
            </summary>
            <returns>
            	<para>
            		<c>true</c> if the <paramref name="left"/> is 
                    not equal to the <paramref name="right"/>, <c>false</c> otherwise.
                </para>
            	<para>
            		<list type="table">
            			<listheader>
            				<term>Return Value</term>
            				<description>Description</description>
            			</listheader>
            			<item>
            				<term><c>true</c></term>
                            <description>
                                <para><paramref name="left"/> or <paramref name="right"/> is <see cref="F:Teradata.Client.Provider.TdDecimal.Null"/></para> 
                                <para>-or-</para>
                                <para><paramref name="left"/> is less than or greater than <paramref name="right"/>.</para>
                            </description>
            			</item>
            			<item>
            				<term><c>false</c></term>
                            <description>
                            <para><paramref name="left"/> and <paramref name="right"/> are <strong>Null</strong></para>
                            <para>-or-</para>
                            <para><paramref name="left"/> is equal to <paramref name="right"/>.</para>
                            </description>
            			</item>
            		</list>
            	</para>
            </returns>
            <param name="left">An instance of TdDecimal.</param>
            <param name="right">An instance of TdDecimal.</param>        
        </member>
        <member name="M:Teradata.Client.Provider.TdDecimal.GreaterThan(Teradata.Client.Provider.TdDecimal,Teradata.Client.Provider.TdDecimal)">
            <summary>
            Compares two TdDecimals to determine whether the <paramref name="left"/> operand is 
            greater than the <paramref name="right"/> operand.
            </summary>
            <returns>
            	<para>
            		<c>true</c> if the <paramref name="left"/> is greater
                    than the <paramref name="right"/>, <c>false</c> otherwise.
                </para>
            	<para>
            		<list type="table">
            			<listheader>
            				<term>Return Value</term>
            				<description>Description</description>
            			</listheader>
            			<item>
            				<term><c>true</c></term>
                            <description><paramref name="left"/> and <paramref name="right"/> are not <see cref="F:Teradata.Client.Provider.TdDecimal.Null"/> and
                            <paramref name="left"/> is greater than <paramref name="right"/>.
                            </description>
            			</item>
            			<item>
            				<term><c>false</c></term>
                            <description>
                            <para><paramref name="left"/> and / or <paramref name="right"/> is <strong>Null</strong> </para>
                            <para>-or-</para>
                            <para><paramref name="left"/> is less than or equal to <paramref name="right"/>.</para>
                            </description>
            			</item>
            		</list>
            	</para>
            </returns>
            <param name="left">An instance of TdDecimal.</param>
            <param name="right">An instance of TdDecimal.</param>
            <remarks>
            <para>Comparison operators always returns <c>false</c> if one of the operands is <strong>Null</strong>. 
            Therefore, you must not assume that the reverse condition is <c>true</c>. For example you cannot 
            assume that the left operand is less than or equal to the right operand if the <c>GreaterThan</c> operator 
            returns <c>false</c>.</para> 
            
            <para>The reverse condition is <c>true</c> when left and right operands are not <strong>Null</strong>.</para>
            </remarks>
        </member>
        <member name="M:Teradata.Client.Provider.TdDecimal.GreaterThanOrEqual(Teradata.Client.Provider.TdDecimal,Teradata.Client.Provider.TdDecimal)">
            <summary>
            Compares two TdDecimals to determine whether the <paramref name="left"/> operand is 
            greater than or equal to the <paramref name="right"/> operand.
            </summary>
            <returns>
            	<para>
            		<c>true</c> if the <paramref name="left"/> is greater
                    than or equal to the <paramref name="right"/>, <c>false</c> otherwise.
                </para>
            	<para>
            		<list type="table">
            			<listheader>
            				<term>Return Value</term>
            				<description>Description</description>
            			</listheader>
            			<item>
            				<term><c>true</c></term>
                            <description><paramref name="left"/> and <paramref name="right"/> are not <see cref="F:Teradata.Client.Provider.TdDecimal.Null"/> and
                            <paramref name="left"/> is greater than or equal to <paramref name="right"/>.
                            </description>
            			</item>
            			<item>
            				<term><c>false</c></term>
                            <description>
                            <para><paramref name="left"/> and / or <paramref name="right"/> is <strong>Null</strong> </para>
                            <para>-or-</para>
                            <para><paramref name="left"/> is less than <paramref name="right"/>.</para>
                            </description>
            			</item>
            		</list>
            	</para>
            </returns>
            <param name="left">An instance of TdDecimal.</param>
            <param name="right">An instance of TdDecimal.</param>
            <remarks>
            <para>Comparison operators always returns <c>false</c> if one of the operands is <strong>Null</strong>. 
            Therefore, you must not assume that the reverse condition is <c>true</c>. For example you cannot 
            assume that the left operand is less than the right operand if <c>GreaterThanOrEqual</c> operator 
            returns <c>false</c>.</para> 
            
            <para>The reverse condition is <c>true</c> when left and right operands are not <strong>Null</strong>.</para>
            </remarks>
        </member>
        <member name="M:Teradata.Client.Provider.TdDecimal.LessThan(Teradata.Client.Provider.TdDecimal,Teradata.Client.Provider.TdDecimal)">
            <summary>
            Compares two TdDecimals to determine whether the <paramref name="left"/> operand is 
            less than the <paramref name="right"/> operand.
            </summary>
            <returns>
            	<para>
            		<c>true</c> if the <paramref name="left"/> is less
                    than the <paramref name="right"/>, <c>false</c> otherwise.
                </para>
            	<para>
            		<list type="table">
            			<listheader>
            				<term>Return Value</term>
            				<description>Description</description>
            			</listheader>
            			<item>
            				<term><c>true</c></term>
                            <description><paramref name="left"/> and <paramref name="right"/> are not <see cref="F:Teradata.Client.Provider.TdDecimal.Null"/> and
                            <paramref name="left"/> is less than <paramref name="right"/>.
                            </description>
            			</item>
            			<item>
            				<term><c>false</c></term>
                            <description>
                            <para><paramref name="left"/> and / or <paramref name="right"/> is <strong>Null</strong></para>
                            <para>-or-</para>
                            <para><paramref name="left"/> is greater than or equal to <paramref name="right"/>.</para>
                            </description>
            			</item>
            		</list>
            	</para>
            </returns>
            <param name="left">An instance of TdDecimal.</param>
            <param name="right">An instance of TdDecimal.</param>
            <remarks>
            <para>Comparison operators always returns <c>false</c> if one of the operands is <strong>Null</strong>. 
            Therefore, you must not assume that the reverse condition is <c>true</c>. For example you cannot 
            assume that the left operand is greater than or equal the right operand if the <c>LessThan</c> operator 
            returns <c>false</c>.</para> 
            
            <para>The reverse condition is <c>true</c> when left and right operands are not <strong>Null</strong>.</para>
            </remarks>
        </member>
        <member name="M:Teradata.Client.Provider.TdDecimal.LessThanOrEqual(Teradata.Client.Provider.TdDecimal,Teradata.Client.Provider.TdDecimal)">
            <summary>
            Compares two TdDecimals to determine whether the <paramref name="left"/> operand is 
            less than or equal to the <paramref name="right"/> operand.
            </summary>
            <returns>
            	<para>
            		<c>true</c> if the <paramref name="left"/> is less
                    than or equal to the <paramref name="right"/>, <c>false</c> otherwise.
                </para>
            	<para>
            		<list type="table">
            			<listheader>
            				<term>Return Value</term>
            				<description>Description</description>
            			</listheader>
            			<item>
            				<term><c>true</c></term>
                            <description><paramref name="left"/> and <paramref name="right"/> are not <see cref="F:Teradata.Client.Provider.TdDecimal.Null"/> and
                            <paramref name="left"/> is less than or equal to <paramref name="right"/>.
                            </description>
            			</item>
            			<item>
            				<term><c>false</c></term>
                            <description>
                            <para><paramref name="left"/> and / or <paramref name="right"/> is <strong>Null</strong></para>
                            <para>-or-</para>
                            <para><paramref name="left"/> is greater than <paramref name="right"/>.</para>
                            </description>
            			</item>
            		</list>
            	</para>
            </returns>
            <param name="left">An instance of TdDecimal.</param>
            <param name="right">An instance of TdDecimal.</param>
            <remarks>
            <para>Comparison operators always returns <c>false</c> if one of the operands is <strong>Null</strong>. 
            Therefore, you must not assume that the reverse condition is <c>true</c>. For example you cannot 
            assume that the left operand is greater than the right operand if the <c>LessThanOrEqual</c> operator 
            returns <c>false</c>.</para> 
            
            <para>The reverse condition is <c>true</c> when left and right operands are not <strong>Null</strong>.</para>
            </remarks>
        </member>
        <member name="M:Teradata.Client.Provider.TdDecimal.op_Equality(Teradata.Client.Provider.TdDecimal,Teradata.Client.Provider.TdDecimal)">
            <summary>
            Compares two TdDecimals to determine whether the <paramref name="left"/> operand is 
            equal to the <paramref name="right"/> operand.
            </summary>
            <returns>
            	<para>
            		<c>true</c> if the <paramref name="left"/> is 
                    equal to the <paramref name="right"/>, <c>false</c> otherwise.
                </para>
            	<para>
            		<list type="table">
            			<listheader>
            				<term>Return Value</term>
            				<description>Description</description>
            			</listheader>
            			<item>
            				<term><c>true</c></term>
                            <description>
                                <para><paramref name="left"/> and <paramref name="right"/> are <see cref="F:Teradata.Client.Provider.TdDecimal.Null"/></para> 
                                <para>-or-</para>
                                <para><paramref name="left"/> is equal to <paramref name="right"/>.</para>
                            </description>
            			</item>
            			<item>
            				<term><c>false</c></term>
                            <description>
                            <para><paramref name="left"/> or <paramref name="right"/> is <strong>Null</strong></para>
                            <para>-or-</para>
                            <para><paramref name="left"/> is not equal to <paramref name="right"/>.</para>
                            </description>
            			</item>
            		</list>
            	</para>
            </returns>
            <param name="left">An instance of TdDecimal.</param>
            <param name="right">An instance of TdDecimal.</param>        
            <remarks>
            Unlike comparison operators, Equality operators do not always return <c>false</c> when left and right operands 
            are <strong>Null</strong>. Therefore the reverse condition can be considered <c>true</c>. TdDecimal implementation
            is very similar to the <see cref="T:System.Nullable"/> class in this regard.
            </remarks>
            <example>
            Following example shows that the Equality operator can safely be used in an if statement.
            <code>
            TdDecimal x = TdDecimal.Null;
            TdDecimal y = new TdDecimal(1.0M);
            
            if (x == y)
            {
                // x is equal to y.
                Console.WriteLine(@"X is equal to Y").
            }
            else
            {
                // x is not equal y
                Console.WriteLine(@"X is not equal to Y").
            }
            
            TdDecimal y = TdDecimal.Null;
            
            if (x == y)
            {
                // x is equal to y.
                Console.WriteLine(@"X is equal to Y").
            }
            else
            {
                // x is not equal y
                Console.WriteLine(@"X is not equal to Y").
            }
            </code>
            </example>
        </member>
        <member name="M:Teradata.Client.Provider.TdDecimal.op_Inequality(Teradata.Client.Provider.TdDecimal,Teradata.Client.Provider.TdDecimal)">
            <summary>
            Compares two TdDecimals to determine whether the <paramref name="left"/> operand is 
            not equal to the <paramref name="right"/> operand.
            </summary>
            <returns>
            	<para>
            		<c>true</c> if the <paramref name="left"/> is 
                    not equal to the <paramref name="right"/>, <c>false</c> otherwise.
                </para>
            	<para>
            		<list type="table">
            			<listheader>
            				<term>Return Value</term>
            				<description>Description</description>
            			</listheader>
            			<item>
            				<term><c>true</c></term>
                            <description>
                                <para><paramref name="left"/> or <paramref name="right"/> is <see cref="F:Teradata.Client.Provider.TdDecimal.Null"/></para> 
                                <para>-or-</para>
                                <para><paramref name="left"/> is less than or greater than <paramref name="right"/>.</para>
                            </description>
            			</item>
            			<item>
            				<term><c>false</c></term>
                            <description>
                            <para><paramref name="left"/> and <paramref name="right"/> are <strong>Null</strong></para>
                            <para>-or-</para>
                            <para><paramref name="left"/> is equal to <paramref name="right"/>.</para>
                            </description>
            			</item>
            		</list>
            	</para>
            </returns>
            <param name="left">An instance of TdDecimal.</param>
            <param name="right">An instance of TdDecimal.</param>        
        </member>
        <member name="M:Teradata.Client.Provider.TdDecimal.op_GreaterThan(Teradata.Client.Provider.TdDecimal,Teradata.Client.Provider.TdDecimal)">
            <summary>
            Compares two TdDecimals to determine whether the <paramref name="left"/> operand is 
            greater than the <paramref name="right"/> operand.
            </summary>
            <returns>
            	<para>
            		<c>true</c> if the <paramref name="left"/> is greater
                    than the <paramref name="right"/>, <c>false</c> otherwise.
                </para>
            	<para>
            		<list type="table">
            			<listheader>
            				<term>Return Value</term>
            				<description>Description</description>
            			</listheader>
            			<item>
            				<term><c>true</c></term>
                            <description><paramref name="left"/> and <paramref name="right"/> are not <see cref="F:Teradata.Client.Provider.TdDecimal.Null"/> and
                            <paramref name="left"/> is greater than <paramref name="right"/>.
                            </description>
            			</item>
            			<item>
            				<term><c>false</c></term>
                            <description>
                            <para><paramref name="left"/> and / or <paramref name="right"/> is <strong>Null</strong> </para>
                            <para>-or-</para>
                            <para><paramref name="left"/> is less than or equal to <paramref name="right"/>.</para>
                            </description>
            			</item>
            		</list>
            	</para>
            </returns>
            <param name="left">An instance of TdDecimal.</param>
            <param name="right">An instance of TdDecimal.</param>
            <remarks>
            <para>Comparison operators always returns <c>false</c> if one of the operands is <strong>Null</strong>. 
            Therefore, you must not assume that the reverse condition is <c>true</c>. For example you cannot 
            assume that the left operand is less than or equal to the right operand if the "<c>&gt;</c>" operator 
            returns <c>false</c>.</para> 
            
            <para>The reverse condition is <c>true</c> when left and right operands are not <strong>Null</strong>.</para>
            </remarks>
        </member>
        <member name="M:Teradata.Client.Provider.TdDecimal.op_GreaterThanOrEqual(Teradata.Client.Provider.TdDecimal,Teradata.Client.Provider.TdDecimal)">
            <summary>
            Compares two TdDecimals to determine whether the <paramref name="left"/> operand is 
            greater than or equal to the <paramref name="right"/> operand.
            </summary>
            <returns>
            	<para>
            		<c>true</c> if the <paramref name="left"/> is greater
                    than or equal to the <paramref name="right"/>, <c>false</c> otherwise.
                </para>
            	<para>
            		<list type="table">
            			<listheader>
            				<term>Return Value</term>
            				<description>Description</description>
            			</listheader>
            			<item>
            				<term><c>true</c></term>
                            <description><paramref name="left"/> and <paramref name="right"/> are not <see cref="F:Teradata.Client.Provider.TdDecimal.Null"/> and
                            <paramref name="left"/> is greater than or equal to <paramref name="right"/>.
                            </description>
            			</item>
            			<item>
            				<term><c>false</c></term>
                            <description>
                            <para><paramref name="left"/> and / or <paramref name="right"/> is <strong>Null</strong> </para>
                            <para>-or-</para>
                            <para><paramref name="left"/> is less than <paramref name="right"/>.</para>
                            </description>
            			</item>
            		</list>
            	</para>
            </returns>
            <param name="left">An instance of TdDecimal.</param>
            <param name="right">An instance of TdDecimal.</param>
            <remarks>
            <para>Comparison operators always returns <c>false</c> if one of the operands is <strong>Null</strong>. 
            Therefore, you must not assume that the reverse condition is <c>true</c>. For example you cannot 
            assume that the left operand is less than the right operand if the "<c>&gt;=</c>" operator 
            returns <c>false</c>.</para> 
            
            <para>The reverse condition is <c>true</c> when left and right operands are not <strong>Null</strong>.</para>
            </remarks>
        </member>
        <member name="M:Teradata.Client.Provider.TdDecimal.op_LessThan(Teradata.Client.Provider.TdDecimal,Teradata.Client.Provider.TdDecimal)">
            <summary>
            Compares two TdDecimals to determine whether the <paramref name="left"/> operand is 
            less than the <paramref name="right"/> operand.
            </summary>
            <returns>
            	<para>
            		<c>true</c> if the <paramref name="left"/> is less
                    than the <paramref name="right"/>, <c>false</c> otherwise.
                </para>
            	<para>
            		<list type="table">
            			<listheader>
            				<term>Return Value</term>
            				<description>Description</description>
            			</listheader>
            			<item>
            				<term><c>true</c></term>
                            <description><paramref name="left"/> and <paramref name="right"/> are not <see cref="F:Teradata.Client.Provider.TdDecimal.Null"/> and
                            <paramref name="left"/> is less than <paramref name="right"/>.
                            </description>
            			</item>
            			<item>
            				<term><c>false</c></term>
                            <description>
                            <para><paramref name="left"/> and / or <paramref name="right"/> is <strong>Null</strong></para>
                            <para>-or-</para>
                            <para><paramref name="left"/> is greater than or equal to <paramref name="right"/>.</para>
                            </description>
            			</item>
            		</list>
            	</para>
            </returns>
            <param name="left">An instance of TdDecimal.</param>
            <param name="right">An instance of TdDecimal.</param>
            <remarks>
            <para>Comparison operators always returns <c>false</c> if one of the operands is <strong>Null</strong>. 
            Therefore, you must not assume that the reverse condition is <c>true</c>. For example you cannot 
            assume that the left operand is greater than or equal the right operand if the "<c>&lt;</c>" operator 
            returns <c>false</c>.</para> 
            
            <para>The reverse condition is <c>true</c> when left and right operands are not <strong>Null</strong>.</para>
            </remarks>
        </member>
        <member name="M:Teradata.Client.Provider.TdDecimal.op_LessThanOrEqual(Teradata.Client.Provider.TdDecimal,Teradata.Client.Provider.TdDecimal)">
            <summary>
            Compares two TdDecimals to determine whether the <paramref name="left"/> operand is 
            less than or equal to the <paramref name="right"/> operand.
            </summary>
            <returns>
            	<para>
            		<c>true</c> if the <paramref name="left"/> is less
                    than or equal to the <paramref name="right"/>, <c>false</c> otherwise.
                </para>
            	<para>
            		<list type="table">
            			<listheader>
            				<term>Return Value</term>
            				<description>Description</description>
            			</listheader>
            			<item>
            				<term><c>true</c></term>
                            <description><paramref name="left"/> and <paramref name="right"/> are not <see cref="F:Teradata.Client.Provider.TdDecimal.Null"/> and
                            <paramref name="left"/> is less than or equal to <paramref name="right"/>.
                            </description>
            			</item>
            			<item>
            				<term><c>false</c></term>
                            <description>
                            <para><paramref name="left"/> and / or <paramref name="right"/> is <strong>Null</strong></para>
                            <para>-or-</para>
                            <para><paramref name="left"/> is greater than <paramref name="right"/>.</para>
                            </description>
            			</item>
            		</list>
            	</para>
            </returns>
            <param name="left">An instance of TdDecimal.</param>
            <param name="right">An instance of TdDecimal.</param>
            <remarks>
            <para>Comparison operators always returns <c>false</c> if one of the operands is <strong>Null</strong>. 
            Therefore, you must not assume that the reverse condition is <c>true</c>. For example you cannot 
            assume that the left operand is greater than the right operand if the "<c>&lt;=</c>" operator 
            returns <c>false</c>.</para> 
            
            <para>The reverse condition is <c>true</c> when left and right operands are not <strong>Null</strong>.</para>
            </remarks>
        </member>
        <member name="P:Teradata.Client.Provider.TdDecimal.IsZero">
            <summary>
            Indicates that the TdDecimal is zero.
            </summary>
        </member>
        <member name="P:Teradata.Client.Provider.TdDecimal.ActualPrecision">
            <summary>
            The actual precision of the decimal -- the number of dgits contained in the
            number components.
            </summary>
            <remarks>
            The actual precision is different from precision in that it is the actual
            precision of the number contained in the number components, adjusted for
            the scale.
            </remarks>
            
        </member>
        <member name="P:Teradata.Client.Provider.TdDecimal.ObjectId">
            <summary>
            Retrieves the object Id of this instance of TdDecimal.
            </summary>
        </member>
        <member name="P:Teradata.Client.Provider.TdDecimal.IsNull">
            <summary>
            Indicates whether this TdDecimal instance is <see cref="F:Teradata.Client.Provider.TdDecimal.Null"/>. 
            </summary>
            <value>
            <c>true</c> if this TdDecimal is Null; <c>false</c> otherwise.
            </value>
        </member>
        <member name="P:Teradata.Client.Provider.TdDecimal.IsPositive">
            <summary>
             Indicates whether this TdDecimal instance is greater than or equal to zero. 
            </summary>
            <value>
             <c>true</c> if this instance is greater than or equal to zero; 
             <c>false</c> otherwise.
            </value>
            <remarks>
             <c>IsPositive</c> returns <c>false</c> if this instance is <strong>Null</strong>. 
            </remarks>
            <example>
            This example shows how to check for positive and negative numbers.
            <code>
            TdDecimal x = new TdDecimal(-1);
            
            if (x.IsPositive == true)
            {
                Console.WriteLine("x is a positive number.");
            }
            else
            {
                if (x.IsNull == false)
                {
                    Console.WriteLine("x is a negative number.");
                }
                else
                {
                    Console.WriteLine("x is Null.");
                }
            }
            </code>
            </example>
        </member>
        <member name="P:Teradata.Client.Provider.TdDecimal.Precision">
            <summary>
            The maximum number of possible digits in this TdDecimal instance. 
            </summary>
            <value>
            A number ranging from 1 through 38. 
            </value>
            <remarks>
            It represents the maximum number of digits. This is very similar to Teradata
            Database <strong>Decimal(n, m)</strong> where n represents the maximum number of digits
            and m is the scale.
            </remarks>
        </member>
        <member name="P:Teradata.Client.Provider.TdDecimal.Scale">
            <summary>
            The number of decimal places to which this TdDecimal is resolved. 
            </summary>
            <value>
            The value returned will range from 0 through <see cref="P:Teradata.Client.Provider.TdDecimal.Precision"/>.
            </value>
        </member>
        <member name="P:Teradata.Client.Provider.TdDecimal.Value">
            <summary>
             Gets the <see cref="T:System.Decimal"/> representation of this TdDecimal instance.
            </summary>
            <value>
             A <c>Decimal</c> in the range of <see cref="F:System.Decimal.MinValue"/> 
             through <see cref="F:System.Decimal.MaxValue"/>.
            </value>
            <exception cref="T:Teradata.Client.Provider.TdException">
             The value of the TdDecimal is Null.
            </exception>
            <exception cref="T:System.OverflowException">
             This <c>TdDecimal</c> is greater than <see cref="F:System.Decimal.MaxValue"/> or it is less than 
             <see cref="F:System.Decimal.MinValue"/>.
            </exception>
            <remarks>
             <c>TdDecimal</c> can represent numbers up to 38 precision. Therefore not all TdDecimal 
             instances can be converted / represented as <c>Decimal</c>. This property in concept 
             parallels <see cref="M:Teradata.Client.Provider.TdDataReader.GetValue(System.Int32)"/> and <see cref="P:Teradata.Client.Provider.TdParameter.Value"/>. That is 
             they all represent the .NET Framework Class Library (FCL) primitive data type that 
             correspond to Teradata Decimal data type.
            </remarks>
        </member>
        <member name="T:Teradata.Client.Provider.TdError">
            <summary>
            Represents a warning or error returned by Teradata Database, the 
            .Net Data Provider for Teradata or TeraGSS. 
            </summary>
            
            
            
            <remarks>
            The data provider returns errors and warnings using TdError class. 
            <para></para>
            <para>TdException class encapsulates one or more instances of the TdError class.</para>
            <para></para> 
            <para>Warnings are not exceptions and therefore are reported using 
            <see cref="E:Teradata.Client.Provider.TdConnection.InfoMessage"/> event.</para>
            </remarks>
            
            <example>
            <code>
            public TdConnection OpenConnection(String connectionString)
            {
                try
                {
                    TdConnection cn = new TdConnection(connectionString);
                    cn.Open();
                    
                    return cn;
                }
                catch(TdException e)
                {
                    for (int index = 0; index &lt; e.Errors.Count; index++)
                    {
                        Console.WriteLine(“ERROR: {0} ({1})”, e.Errors[0].Message,
                                                              e.Errors[0].Number);
                    }
                    
                    throw;
                }
                
                return null;
            }
            </code>
            </example>
            
            
            <seealso cref="!:ErrorMessages.html">Error Messages</seealso>/&gt;
        </member>
        <member name="M:Teradata.Client.Provider.TdError.ToString">
            <summary>
                String representation of TdError class.
            </summary>
            <returns>Returns a string in "[Source] [Number] Error Text" format. </returns>
        </member>
        <member name="P:Teradata.Client.Provider.TdError.Info">
            <summary>
            Gets the value of the info field.
            </summary>
            
            <value>
            An integer value whose use depends upon the error code returned. 
            </value>
            
            <remarks>
            This Info property is generated by Teradata Database.  Info Property value depends upon
            the error code returned.  For it contents, look up the error code in Teradata Database Messages manual.
            </remarks>
        </member>
        <member name="P:Teradata.Client.Provider.TdError.Message">
            <summary>
                Gets the error message text.
            </summary>
            <value>
                The message text describing the error.
            </value>
            <remarks>
                Teradata Database error messages are described in Teradata Database Messages
                manual. The .NET Data Provider for Teradata messages are described in the
                <a href="ErrorMessages.html">ErrorMessages</a> table of the Product Support,
                Trouble Shooting, and Error Message section within the Developers Guide.
            </remarks>
        </member>
        <member name="P:Teradata.Client.Provider.TdError.Number">
            <summary>
                Gets the error number.
            </summary>
            <value>
                The error number or error code.
            </value>
            <remarks>
                Teradata Database error messages are described in Teradata Database Messages 
                manual. The .NET Data Provider for Teradata messages are described in the
                <a href="ErrorMessages.html">ErrorMessages</a> table of the Product Support,
                Trouble Shooting, and Error Message section within the Developers Guide.
            </remarks>
        </member>
        <member name="P:Teradata.Client.Provider.TdError.Source">
            <summary>
                Get the source of the error.
            </summary>
            <value>
                &quot;.NET Data Provider for Teradata&quot;, &quot;Teradata Database&quot;, or
                &quot;TeraGSS&quot;.
            </value>
            <remarks>
                Teradata Database error messages and TeraGSS error messages are described in 
                Teradata Database Messages manual. The .NET Data Provider for Teradata messages
                are described in the <a href="ErrorMessages.html">ErrorMessages</a> table of the 
                Product Support, Trouble Shooting, and Error Message section within the Developers 
                Guide.
            </remarks>
        </member>
        <member name="P:Teradata.Client.Provider.TdError.StatementNumber">
            <summary>
                Gets the number of the SQL statement in a Multi-Statement request that failed.
            </summary>
            <value>
                The statement number in a multi-statement request that failed.
            </value>
        </member>
        <member name="P:Teradata.Client.Provider.TdError.TxRolledBack">
            <summary>
                Indicates whether the transaction was rolled back by the Teradata Database.
            </summary>
            <value>
                <c>true</c> if the Teradata Database rolled back the transaction; 
                otherwise <c>false</c>.
            </value>
            <remarks>
                Teradata Database error messages are described in Teradata Database 
                Messages manual. 
            </remarks>
        </member>
        <member name="T:Teradata.Client.Provider.TdErrorCollection">
            <summary>
            Holds zero or more instances of the <see cref="T:Teradata.Client.Provider.TdError"/> class.
            </summary>
            
            
            
            <remarks>
            .NET Data Provider for Teradata returns errors and warnings using the 
            <see cref="T:Teradata.Client.Provider.TdError"/> class.
            <para></para>
            <para>TdException.<see cref="P:Teradata.Client.Provider.TdException.Errors"/> property is an instance of 
            the TdErrorCollection class and holds at least one instance of the 
            <see cref="T:Teradata.Client.Provider.TdError"/> class.</para>
            <para></para>
            <para>TdInfoMessageEventArgs.<see cref="P:Teradata.Client.Provider.TdInfoMessageEventArgs.Errors"/> property is an 
            instance of TdErrorCollecation class and holds at least zero or more instances of the 
            <see cref="T:Teradata.Client.Provider.TdError"/> class. </para>
            </remarks>
            
            <example>
            <code>
            public TdConnection OpenConnection(String connectionString)
            {
                try
                {
                    TdConnection cn = new TdConnection(connectionString);
                    cn.Open();
                    
                    return cn;
                }
                catch(TdException e)
                {
                    for (int index = 0; index &lt; e.Errors.Count; index++)
                    {
                        Console.WriteLine(“ERROR: {0} ({1})”, e.Errors[index].Message, 
                                                              e.Errors[index].Number);
                    }   
                    
                    throw;
                }
                
                return null;
            }
            </code>
            </example>
            
        </member>
        <member name="M:Teradata.Client.Provider.TdErrorCollection.CopyTo(System.Array,System.Int32)">
            <summary>
            Copies the elements of the TdErrorCollection to the specified array.
            </summary>
            
            <param name="array">Target array.</param>
            <param name="index">The starting point in array at which copying begins.</param>
            
            <exception cref="T:System.ArgumentNullException"><paramref name="array"/> is a null 
            reference (nothing in Visual Basic).</exception>
            <exception cref="T:System.ArgumentOutOfRangeException"><paramref name="index"/> is less than zero.</exception>
            <exception cref="T:System.ArgumentException">Indicates that <paramref name="array"/> is multidimensional, 
            or <paramref name="index"/> is equal to or greater than the length, or the number of elements in 
            TdErrorCollection is greater than the available space from <paramref name="index"/> to the 
            end of the destination <paramref name="array"/>.</exception>
            <exception cref="T:System.ArgumentException"><paramref name="array"/> cannot be cast to an array of type TdError (TdError[]).</exception>
        </member>
        <member name="M:Teradata.Client.Provider.TdErrorCollection.CopyTo(Teradata.Client.Provider.TdError[],System.Int32)">
            <summary>
            Copies the elements of the TdErrorCollection to the specified array.
            </summary>
            
            <param name="array">Target array.</param>
            <param name="index">The starting point in array at which copying begins.</param>
            
            <exception cref="T:System.ArgumentNullException"><paramref name="array"/> is a null 
            reference (nothing in Visual Basic).</exception>
            <exception cref="T:System.ArgumentOutOfRangeException"><paramref name="index"/> is less than zero.</exception>
            <exception cref="T:System.ArgumentException">Indicates that <paramref name="array"/> is multidimensional, 
            or <paramref name="index"/> is equal to or greater than the length, or the number of elements in 
            TdErrorCollection is greater than the available space from <paramref name="index"/> to the 
            end of the destination <paramref name="array"/>.</exception>
        </member>
        <member name="M:Teradata.Client.Provider.TdErrorCollection.GetEnumerator">
            <summary>
            Returns an enumerator that can iterate through TdErrorCollection.
            </summary>
            
            <returns>
            Returns an enumerator that can iterate through the TdErrorCollection.
            </returns>
            
            
        </member>
        <member name="P:Teradata.Client.Provider.TdErrorCollection.Count">
             <summary>
             Gets the number of elements in the TdErrorCollection.
             </summary>
            
             <value>
             Indicates the total number of errors or warnings.
             </value>
        </member>
        <member name="P:Teradata.Client.Provider.TdErrorCollection.Item(System.Int32)">
             <summary>
             Gets the TdError at the specified index.
             </summary>
            
            <param name="index">Zero-based index of the error.</param>
            
             <value>
             A <see cref="T:Teradata.Client.Provider.TdError"/> instance at the specified <paramref name="index"/>.
             </value>
             
             <exception cref="T:System.ArgumentOutOfRangeException"><paramref name="index"/> is less than zero or <paramref name="index"/> is equal to or greater than <see cref="P:Teradata.Client.Provider.TdErrorCollection.Count"/>.</exception>
        </member>
        <member name="P:Teradata.Client.Provider.TdErrorCollection.System#Collections#ICollection#IsSynchronized">
            <summary>
            Gets a value indicating whether the collection is synchronized.
            </summary>
        </member>
        <member name="P:Teradata.Client.Provider.TdErrorCollection.System#Collections#ICollection#SyncRoot">
            <summary>
            Gets an object that can be used to synchronize access to TdErrorCollection.
            </summary>
        </member>
        <member name="T:Teradata.Client.Provider.TdInfoMessageEventArgs">
            <summary>
            Arguments for the TdInfoMessage event 
            </summary>
        </member>
        <member name="P:Teradata.Client.Provider.TdInfoMessageEventArgs.Errors">
            <summary>
            Gets the collection of one or more TdError objects.
            </summary>
        </member>
        <member name="P:Teradata.Client.Provider.TdInfoMessageEventArgs.Message">
            <summary>
            Get the warning message text.
            </summary>
        </member>
        <member name="P:Teradata.Client.Provider.TdInfoMessageEventArgs.Number">
            <summary>
            Gets the warning number.
            </summary>
        </member>
        <member name="P:Teradata.Client.Provider.TdInfoMessageEventArgs.Source">
            <summary>
            Indicates the source of the warning or informational message.
            </summary>
        </member>
        <member name="T:Teradata.Client.Provider.TdInfoMessageEventHandler">
            <summary>
            Represents the method that will handle the TdInfoMessage event.
            </summary>
        </member>
        <member name="T:Teradata.Client.Provider.TdException">
            <summary>
            TdException is a custom exception class reporting errors detected by 
            the .NET Data Provider for Teradata or the Teradata Database.
            </summary>
            
            
            
            <remarks>
            All errors are reported as an instance of the TdException class. The 
            TdException.<see cref="P:Teradata.Client.Provider.TdException.Errors"/> collection reflects the actual 
            errors generated by the Teradata Database, .NET Data Provider for Teradata or 
            the TeraGSS.
            <para></para>
            <para>Warnings are reported using <see cref="E:Teradata.Client.Provider.TdConnection.InfoMessage"/> event.</para>
            </remarks>
            
            <example>
            <code>
            public TdConnection OpenConnection(String connectionString)
            {
                try
                {
                    TdConnection cn = new TdConnection(connectionString);
                    cn.Open();
                    
                    return cn;
                }
                catch(TdException e)
                {
                    for (int index = 0; index &lt; e.Errors.Count; index++)
                    {
                        Console.WriteLine(“ERROR: {0} ({1})”, e.Errors[index].Message, 
                                                              e.Errors[index].Number);
                    }   
                    
                    throw;
                }
                
                return null;
            }
            </code>
            </example>
            
        </member>
        <member name="M:Teradata.Client.Provider.TdException.GetObjectData(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            Populates a System.Runtime.Serialization.SerializationInfo with the data needed to serialize 
            the TdException object.
            </summary>
            
            <param name="info">SerializationInfo to hold the state of this object.</param>
            <param name="context">Describes the destinatin context for this serialization.</param>
        </member>
        <member name="P:Teradata.Client.Provider.TdException.Errors">
            <summary>
            Gets the <see cref="T:Teradata.Client.Provider.TdErrorCollection"/> with one or more <see cref="T:Teradata.Client.Provider.TdError"/> objects.
            </summary>
            
            <value>
            A typed collection of TdError objects.
            </value>
            
            <seealso cref="T:Teradata.Client.Provider.TdError"/>
            <seealso cref="T:Teradata.Client.Provider.TdErrorCollection"/>
        </member>
        <member name="P:Teradata.Client.Provider.TdException.Message">
            <summary>
            Gets the message text which describes the exception / error.
            </summary>
            
            <value>
            Contains The message text describing the exception.
            </value>
            
            <remarks>
            Returns the most recent error message. Applications should enumerate through
            all TdError objects in <see cref="P:Teradata.Client.Provider.TdException.Errors"/> in order to retieve
            all error messages.
            </remarks>
        </member>
        <member name="P:Teradata.Client.Provider.TdException.Source">
            <summary>
            Gets the error source.
            </summary>
            
            <value>
            Contains a string that uniquely identifies the source of most recent error.
            </value>
            
        </member>
        <member name="P:Teradata.Client.Provider.TdException.TxRolledBack">
            <summary>
            Indicates whether the transaction was rolled back by the Teradata Database.
            </summary>
            
            <value>
            <c>true</c> if the Teradata Database rolled back the transaction; otherwise it is <c>false</c>.
            </value>
            
            <remarks>
            Teradata Database error messages are described in Teradata Database 
            Messages manual. 
            </remarks>
        </member>
        <member name="T:Teradata.Client.Provider.TdFactory">
            <summary>
            Creates instances of TdCommand, TdCommandBuilder, TdConnection, TdDataAdapter and
            TdParameter classes.
            </summary>
            <remarks>
            TdFactory implements the required methods of System.Data.Common.DbProviderFactory class.
            
            For additional information see System.Data.Common.DbProviderFactory class.
            </remarks>
        </member>
        <member name="M:Teradata.Client.Provider.TdFactory.#ctor">
            <summary>
            Initializes a new instance of the TdFactory.
            </summary>
            
            <remarks>
            TdFactory is the class factory for TdCommand, TdCommandBuilder, TdConnection,
            TdDataAdapter and TdParameter classes.
            </remarks>
        </member>
        <member name="F:Teradata.Client.Provider.TdFactory.Instance">
            <summary>
            A static instance of the TdFactory class.
            </summary>
        </member>
        <member name="M:Teradata.Client.Provider.TdFactory.CreateCommand">
            <summary>
            Creates a TdCommand object.
            </summary>
            <returns>Returns a TdCommand object that derives from DbCommand.</returns>
        </member>
        <member name="M:Teradata.Client.Provider.TdFactory.CreateCommandBuilder">
            <summary>
            Creates a TdCommandBuilder object.
            </summary>
            <returns>Returns a TdCommandBuilder object that derives from DbCommandBuilder.</returns>
        </member>
        <member name="M:Teradata.Client.Provider.TdFactory.CreateConnection">
            <summary>
            Creates a TdConnection object.
            </summary>
            <returns>Returns a TdConnection object that derives from DbConnection.</returns>
        </member>
        <member name="M:Teradata.Client.Provider.TdFactory.CreateConnectionStringBuilder">
            <summary>
            Creates a TdConnectionStringBuilder object.
            </summary>
            <returns>Returns a TdConnectionStringBuilder object that derices from DbConnectionStringBuilder.</returns>
        </member>
        <member name="M:Teradata.Client.Provider.TdFactory.CreateDataAdapter">
            <summary>
            Creates a TdDataAdapter object.
            </summary>
            <returns>Returns a TdDataAdapter object that derives from DbDataAdapter.</returns>
        </member>
        <member name="M:Teradata.Client.Provider.TdFactory.CreateParameter">
            <summary>
            Creates a TdParameter object.
            </summary>
            <returns>Returns a TdParameter Object that derives from DbParameter.</returns>
        </member>
        <member name="T:Teradata.Client.Provider.TdConnectionStringBuilder">
            <summary>
            Facilitates creation of a connection string for the .NET Data Provider for Teradata.
            </summary>
            <remarks>
            TdConnectionStringBuilder has properties for all valid connection string attributes.
            For example, property <see cref="P:Teradata.Client.Provider.TdConnectionStringBuilder.DataSource"/> corresponds to 
            the "Data Source" connection string attribute. Simply set the properties and later retrieve a 
            complete connection string from the ConnectionString propety.
            </remarks>
        </member>
        <member name="M:Teradata.Client.Provider.TdConnectionStringBuilder.#ctor(System.String)">
            <summary>
            Initializes a new instance of the TdConnectionStringBuilder class.
            </summary>
            <param name="connectionString">Valid connection string for the .NET Data Provider for Teradata.</param>
            <exception cref="T:System.ArgumentException"><paramref name="connectionString"/> contains invalid values.</exception>
            <remarks>
            All connection string attributes / properties are initialized to their
            default values.
            </remarks>
        </member>
        <member name="M:Teradata.Client.Provider.TdConnectionStringBuilder.#ctor">
            <summary>
            Initializes a new instance of the TdConnectionStringBuilder class.
            </summary>
            <remarks>
            All connection string attributes / properties are initialized to their
            default values.
            </remarks>
        </member>
        <member name="M:Teradata.Client.Provider.TdConnectionStringBuilder.Clear">
            <summary>
            Resets all properties to default values.
            </summary>
        </member>
        <member name="M:Teradata.Client.Provider.TdConnectionStringBuilder.ContainsKey(System.String)">
            <summary>
            Determines whether the keyword is a valid connection string attribute.
            </summary>
            <param name="keyword">The key to locate in the <see cref="T:Teradata.Client.Provider.TdConnectionStringBuilder"/>.</param>
            <exception cref="T:System.ArgumentNullException"><paramref name="keyword"/> is null.</exception>
            <returns><c>true</c> if the <paramref name="keyword"/> is a valid connection string attribute/keyword, <c>false</c> otherwise.</returns>
        </member>
        <member name="M:Teradata.Client.Provider.TdConnectionStringBuilder.TryGetValue(System.String,System.Object@)">
            <summary>
            Gets the value of the specified connection string keyword.
            </summary>
            <param name="keyword">Connection String keyword</param>
            <param name="value"><c>null</c> if it is an invalid key, otherwise the value or default-value corresponding to the specified keyword.</param>
            <returns><c>true</c> if <paramref name="keyword"/> is a valid Connection string keyword, <c>false</c> otherwise.</returns>
        </member>
        <member name="M:Teradata.Client.Provider.TdConnectionStringBuilder.Remove(System.String)">
            <summary>
            Removes the value for the specified keyword.
            </summary>
            <param name="keyword">Valid connection string keyword.</param>
            <exception cref="T:System.ArgumentNullException"><paramref name="keyword"/> is null.</exception>
            <exception cref="T:System.ArgumentException"><paramref name="keyword"/> is not a valid connection string keyword.</exception>
            <returns><c>true</c> if the key was removed, <c>false</c> if the key did not exist.</returns>
        </member>
        <member name="M:Teradata.Client.Provider.TdConnectionStringBuilder.ShouldSerialize(System.String)">
            <summary>
            Indicates whether the specified key exists in this TdConnectionStringBuilder instance. 
            </summary>
            <param name="keyword">Valid connection string keyword.</param>
            <exception cref="T:System.ArgumentNullException"><paramref name="keyword"/> is null.</exception>
            <exception cref="T:System.ArgumentException"><paramref name="keyword"/> is not a valid connection string keyword.</exception>
            <returns><c>true</c> if the TdConnectionStringBuilder contains an entry with the specified key; otherwise <c>false</c>.</returns>
        </member>
        <member name="P:Teradata.Client.Provider.TdConnectionStringBuilder.IsFixedSize">
            <summary>
            Gets a value that indicates whether the TdConnectionStringBuilder has a fixed size.
            </summary>
            <value>
            	<strong>true</strong> since .NET Data Provider for Teradata has a fixed set of
            Connection String attributes.
            </value>
            <seealso cref="P:Teradata.Client.Provider.TdConnectionStringBuilder.Keys">Keys Property</seealso>
            <seealso cref="P:Teradata.Client.Provider.TdConnectionStringBuilder.Values">Values Property</seealso>
        </member>
        <member name="P:Teradata.Client.Provider.TdConnectionStringBuilder.Keys">
            <summary>
            Gets a collection of valid connection string keywords for the .NET Data Provider for Teradata.
            </summary>
            <value>An ICollection that contains the valid connection string keys for the .NET Data Provider for Teradata.</value>
            <remarks>
            The size of the collection is always fixed. Furthermore the order of the
            <see cref="P:Teradata.Client.Provider.TdConnectionStringBuilder.Values"/> property collection matches the order of the <c>Keys</c>
            property collection.
            </remarks>
            <seealso cref="P:Teradata.Client.Provider.TdConnectionStringBuilder.Values">Values Property</seealso>
        </member>
        <member name="P:Teradata.Client.Provider.TdConnectionStringBuilder.Values">
            <summary>
            Gets a collection of connection string values for the <c>TdConnectionStringBuilder</c>.
            </summary>
            <value>An ICollection that contains the connection string values.</value>
            <remarks>
            The size of the collection is always fixed. Furthermore the order of the
            <c>Values</c> property collection matches the order of the <see cref="P:Teradata.Client.Provider.TdConnectionStringBuilder.Keys"/>
            property collection.
            </remarks>
            <seealso cref="P:Teradata.Client.Provider.TdConnectionStringBuilder.Keys">Keys Property</seealso>
        </member>
        <member name="P:Teradata.Client.Provider.TdConnectionStringBuilder.Item(System.String)">
            <summary>
            Gets or sets the value associated with the specified connection string keyword.
            </summary>
            <param name="keyword">Valid connection string keyword for the .NET Data Provider for Teradata.</param>
            <exception cref="T:System.ArgumentNullException"><paramref name="keyword"/> is null.</exception>
            <exception cref="T:System.ArgumentException"><paramref name="keyword"/> is not a valid connection string keyword.</exception>
            <value>values associated with the specified <paramref name="keyword"/>.</value>
        </member>
        <member name="P:Teradata.Client.Provider.TdConnectionStringBuilder.DataSource">
            <summary>
            The Teradata server name, or equivalently the DBC Name or TDPID.
            </summary>
            <remarks>
            Default Value:  empty string
            </remarks>
        </member>
        <member name="P:Teradata.Client.Provider.TdConnectionStringBuilder.ConnectionTimeout">
            <summary>
            Specifies the time to wait for a Teradata session to be opened 
            or established.
            </summary>
            <remarks>
                <para>
                    This represents the time to wait for establishment of a connection  
                    before terminating the attempt and generating
                    an error.  Connection timeout is typically used for an application
                    waiting for a connection from a connection pool, when the maximum
                    number of connections have been established.
                </para>
                <para>
                    ConnectionTimeout is specified in seconds and may range from 0
                    to the maximum supported timeout value of 2147483.  Connection 
                    timeout specified as 0, is a special case, and internally the
                    provider will set the value to the maximum value.
                </para>
                <para>Default Value:  20 seconds</para>
            </remarks>
        </member>
        <member name="P:Teradata.Client.Provider.TdConnectionStringBuilder.AccountString">
            <summary>
            Identifies an individual user account, and is associated with a specific User Id. 
            The account identifier can be up to 30 characters long.
            </summary>
            <remarks>
            <para>If an invalid account string is specified, Teradata behaves differently under the following 
            circumstances:</para>
            <para>1) If the application specifies an invalid account string without any leading spaces, 
            provider throws an exception when <see cref="M:Teradata.Client.Provider.TdConnection.Open"/> is called. The exception message returned 
            is: [Teradata Database] Invalid logon account.</para>
            <para></para>
            <para>2) If the account string is not valid and there are leading spaces, TdConnection opens the 
            connection. However, the account assigned to the user is the default account specified when 
            the user was created in Teradata. The default account is not reflected in the provider string. 
            The account that is not valid still appears in the connection string.</para>
            
            <para>Default Value:  empty string</para>
            </remarks>
        </member>
        <member name="P:Teradata.Client.Provider.TdConnectionStringBuilder.Database">
            <summary>
            The database selected as the default database when a Teradata connection is opened.
            </summary>
            <remarks>
            If the provider string does not include Default Database, the Teradata Database uses the 
            default database specified when the Teradata user was created.
            <para></para>
            <para>If Default Database specifies an invalid database, the .NET Data Provider for Teradata still opens the 
            Teradata connection. However, the Teradata Database uses the database specified when the user was 
            created. The invalid database name still appears in the connection string. However, 
            the Database property correctly reflects the default database used by the Teradata Database.</para>
            
            <para>Default Value:  empty string</para>
            </remarks>
        </member>
        <member name="P:Teradata.Client.Provider.TdConnectionStringBuilder.DataEncryption">
            <summary>
            Session level encryption is enabled, encrypting all messages bidirectionally to Teradata.
            </summary>
            <remarks>
            <para>Default Value:  false</para>
            </remarks>
        </member>
        <member name="P:Teradata.Client.Provider.TdConnectionStringBuilder.DataIntegrity">
            <summary>
            Session level integrity is enabled, performing integrity checking on all messages bidirectionally to Teradata.
            </summary>
            <remarks>
            Default Value:  false
            </remarks>
        </member>
        <member name="P:Teradata.Client.Provider.TdConnectionStringBuilder.AuthenticationMechanism">
            <summary>
            A session security context enabling data encryption and authentication.
            </summary>
            <remarks>
            <para>
            The .NET Data Provider currently supports the following session authentication mechanisms -
            TD2 (Teradata method 2), SPNEGO, and LDAP.
            For a full description of these mechanisms, please reference the Teradata Security Administration
            chapter on Teradata Database Generic Security Services Library (TDGSS) - Managing Network Security.
            The default mechanism will be supplied from a client TeraGSS configuration file if defined and
            secondarily from a server TDGSS configuration file.  The default installation of the TDGSS
            server configuration file sets the value to TD2.  The client default TeraGSS configuration file
            does not set a default value.
            </para>
            
            <para>Default Value:  Please see the Teradata Security Administration User Manual discussion
            on the Teradata Database Generic Security Services Library (TDGSS) - Managing Network 
            Security</para>
            </remarks>
        </member>
        <member name="P:Teradata.Client.Provider.TdConnectionStringBuilder.AuthenticationString">
            <summary>
            AuthenticationString supports mechanisms that require additional authentication information.
            </summary>
            <remarks>
            <para>
            All mechanisms use this information except for the TD2 mechanism.  
            The TD2 mechanism only encrypts the logon information and does not
            perform authentication.  The AuthenticationString will be constructed by the .NET Data Provider
            for Teradata using the UserId and Password properties if the mechanism supports the 
            automatic generation of credentials.  If UserId, Password and AuthenticationString have 
            all been specified, the constructed AuthenticationString will consist of a concatenation of
            UserId@@Password and the original AuthenticationString. This allows an application to specify
            a UserId and Password and still supply additional authentication data.
            For examples of Authentication Strings, please reference the Teradata
            Security Administration chapter on Teradata Database Generic Security Services 
            Library (TDGSS) - Managing Network Security.
            If IntegratedSecurity is set true, any value supplied in this field is ignored.
            </para>
            
            <para>Default Value:  empty string</para>
            </remarks>
        </member>
        <member name="P:Teradata.Client.Provider.TdConnectionStringBuilder.ResponseBufferSize">
            <summary>
            Gets and Sets the initial size of the internal communication data buffers.
            </summary>
            <value>
            Range of permissible values are from 400 to 1000000, the default value is 65000.
            </value>
            <remarks>
            <para>
            The Data Provider allocates data buffers for the purpose of receiving data from the 
            Teradata Database.</para> 
            <para>
            The buffer size is adjusted higher when a response message size from the Teradata Database 
            exceeds the initial size.</para>
            <para>
            The Teradata Database packs as many rows as possible into a single response message. 
            For example, the Teradata Database packs 16 rows of size 512 bytes into a response buffer 
            of size 8192 bytes (8192 = 16 * 512).</para>
            
            <para>Also refer to <a href="ResponseBufferSize.html">Performance Considerations: Response Buffer Size</a> 
            for additional information.</para>
            </remarks>
        </member>
        <member name="P:Teradata.Client.Provider.TdConnectionStringBuilder.ReadAhead">
            <summary>
            Enables additional buffering of results, while the current buffer is consumed by an 
            application.  This is useful when executing queries that return large result sets.
            </summary>
            <remarks>
            <para>
            This behavior is enabled by default. If an application wishes to disable this setting,
            ReadAhead should be set to false.
            </para>
            
            <para>Default Value:  true</para>
            </remarks>
        </member>
        <member name="P:Teradata.Client.Provider.TdConnectionStringBuilder.MaxDecimalPrecision">
            <summary>
            Used to set the maximum precision of a decimal that can be retrieved from Teradata.  
            </summary>
            <remarks>
            <para>When this attribute is set by an application, Decimal data that is retrieved
             from Teradata cannot have a precision greater than the specified value.</para>
            
            <para>Teradata V2R6.2 and above support decimal precision up to 38.  Versions
            below V2R6.2 only can support a precision up to 18.</para>
            
            <para>When a connection is going to be made to a V2R6.2 or above version of Teradata
            the MaxDecimalPrecision can be set to any value between 18 and 38.</para>
            
            <para>When a connection is made to a a version that is below V2R6.2, the MaxDecimalPrecision
            is ignored.  In this situation, the maximum precision of Decimal data that is retrieved is 18.</para>
            
            <para>Default Value:  38</para>
            </remarks>
        </member>
        <member name="P:Teradata.Client.Provider.TdConnectionStringBuilder.UserId">
            <summary>
            The Teradata user id.
            </summary>
            <remarks>
            <para>
            If IntegratedSecurity is true, any value in this field is ignored.
            </para>
            
            <para>Default Value:  empty string</para>
            </remarks>
        </member>
        <member name="P:Teradata.Client.Provider.TdConnectionStringBuilder.Password">
            <summary>
            The Teradata database password.
            </summary>
            <remarks>
            <para>
            If IntegratedSecurity is true, any value in this field is ignored.
            </para>
            
            <para>Default Value:  empty string</para>
            </remarks>
        </member>
        <member name="P:Teradata.Client.Provider.TdConnectionStringBuilder.PersistSecurityInfo">
            <summary>
            The data source object can persist sensitive authentication information 
            such as a password along with other authentication information.
            </summary>
            <remarks>
            Default Value:  N
            </remarks>
        </member>
        <member name="P:Teradata.Client.Provider.TdConnectionStringBuilder.NewPassword">
            <summary>Gets or sets a string that contains a new password to be supplied during logons 
            that contain expired passwords.
            </summary>
            <remarks>
            <para>When the .NET Data Provider for Teradata detects that the original password has expired, it does 
            the following:</para>
            
            <list type="number">
             <item>Logs into the Teradata Database using the original password.</item>
             <item>Detects that the original password has expired.</item>
             <item>Resets the password using the New Password.</item>
             <item>Logs off.</item>
             <item>Logs back into the Teradata Database using the New Password.</item>
             <item>Generates an <see cref="E:Teradata.Client.Provider.TdConnection.InfoMessage"/> event indicating that 
             password was changed.</item>
            </list>
            
            <para>When the Data Provider detects that that the original password is invalid, it does 
            the following:</para>
            
            <list type="number">
             <item>Logs into the Teradata Database using the New Password.</item>
             <item>Generates an InfoMessage event indicating that old password is invalid 
             and the New Password is used.</item>
            </list>
            
            <para>If the connection string does not specify a New Password and the original password 
            expires, <see cref="M:Teradata.Client.Provider.TdConnection.Open"/> method generates an InfoMessage event
            with the following message: <strong>[Teradata Database] Password has expired, please use
            MODIFY USER statement to generate a new password</strong></para>
            
            <para>
            Default Value:  Empty string
            </para>
            </remarks>
        </member>
        <member name="P:Teradata.Client.Provider.TdConnectionStringBuilder.SessionCharacterSet">
            <summary>
            Gets or sets the character encoding (<see cref="T:System.Text.Encoding"/>) for the connection. 
            </summary>
            
            <value><para>Default value is ASCII.</para></value>
            
            <exception cref="T:System.ArgumentOutOfRangeException">
            <para>Invalid session character set.</para>
            <para>Valid values are: ASCII, ARABIC1256_6A0, CYRILLIC1251_2A0, HANGUL949_7R0, 
            HEBREW1255_5A0, KANJI932_1S0, KANJISJIS_0S, LATIN1250_1A0, LATIN1252_3A0,
            LATIN1254_7A0, LATIN1258_8A0, SCHINESE936_6R0, TCHINESE950_8R0, THAI874_4A0,
            UTF8 and UTF16.</para></exception>
            <remarks>
            <para>Data Provider encodes Unicode characters to bytes before it sends character data 
            to Teradata Database. Data Provider also decodes bytes to Unicode characters when it receives 
            character data from Teradata Database. Data Provider will create an instance of 
            <see cref="T:System.Text.Encoding"/> class initialized with Windows Code Page corresponding
            to Teradata Session Character set as described below.
            </para>
            
            <para>Data Provider supports the following Session Character Sets and the corresponding
            Windows Code Pages:
            <list type="table">
                <listheader>
                    <term>Session Character Set Name</term>
                    <description>Windows Code Page</description>
                </listheader>
                <item>
                    <term>ASCII</term>
                    <description>ANSI Code page associated with the current thread of execution 
                        (<see cref="P:System.Globalization.TextInfo.ANSICodePage"/>).
                    </description>
                </item>
                <item>
                    <term>ARABIC1256_6A0</term>
                    <description>1256</description>
                </item>
                <item>
                    <term>CYRILLIC1251_2A0</term>
                    <description>1251</description>
                </item>
                <item>
                    <term>HANGUL949_7R0</term>
                    <description>949</description>
                </item>
                <item>
                    <term>HEBREW1255_5A0</term>
                    <description>1255</description>
                </item>
                <item>
                    <term><strong>KANJI932_1S0</strong></term>
                    <description><strong>932</strong></description>
                </item>
                <item>
                    <term>KANJISJIS_0S</term>
                    <description>932</description>
                </item>
                <item>
                    <term>LATIN1250_1A0</term>
                    <description>1250</description>
                </item>
                <item>
                    <term><strong>LATIN1252_3A0</strong></term>
                    <description><strong>1252</strong></description>
                </item>
                <item>
                    <term>LATIN1254_7A0</term>
                    <description>1254</description>
                </item>
                <item>
                    <term>LATIN1258_8A0</term>
                    <description>1258</description>
                </item>
                <item>
                    <term>SCHINESE936_6R0</term>
                    <description>936</description>
                </item>
                <item>
                    <term>TCHINESE950_8R0</term>
                    <description>950</description>
                </item>
                <item>
                    <term>THAI874_4A0</term>
                    <description>874</description>
                </item>
                <item>
                    <term><strong>UTF8</strong></term>
                    <description><strong>65001</strong></description>
                </item>
                <item>
                    <term><strong>UTF16</strong></term>
                    <description><strong>1200</strong></description>
                </item>
            </list>
            </para>
            
            <para>Teradata Database supports <strong>LATIN, UNICODE and KANJISJIS Server Character 
            Sets</strong>. UTF8 and UTF16 Session Character Sets are compatible with all Server 
            Character Sets. LATIN1252_3A0 is compatible with LATIN and UNICODE Server Character Sets. 
            KANJI932_1S0 Session Character Set is compatible with UNICODE Server Character 
            Sets. The remaining Session Character Sets are compatible with UNICODE Sever Character Set. 
            ASCII is compatible with LATIN, UNICODE and KANJISJIS as long as character code-points are 
            within the ASCII range.</para>
            
            <para>
            The KANJISJIS_0S character set includes all the characters in the JIS X 0201 and 
            JIS X 0208 standards, plus extensions, including single-byte Hankaku Katakana characters 
            and multi-byte Kanji characters. KANJISJIS_0S is not 100% compatible with the latest Windows 
            code page 932 as the mapping to Unicode is different for several Japanese characters including 
            the Yen symbol. Therefore, the best practice is to use KANJI932_1S0, UTF8 or UTF16 Session 
            Character Sets with the UNICODE Server Character Set.
            </para>
            
            <para>
            Teradata Database International Character Set Support manual has additional information 
            about Windows compatible session character sets. The manual describes how to enable one or more 
            of the session character sets. Windows compatible session character sets are disabled 
            by default.     
            </para>
            
            
            </remarks>
        </member>
        <member name="P:Teradata.Client.Provider.TdConnectionStringBuilder.SessionMode">
            <summary>
            Specifies the session mode on a Teradata Database V2R2.0 or later system. The 
            selected mode applies for the duration of the session.
            </summary>
            <remarks>
            The DEFAULT mode is used to indicate that the system default will be used.
            <para></para>
            <para>Although the Teradata Database implicitly starts a transaction when the session is in ANSI mode, 
            the .NET Data Provider for Teradata immediately commits each request submitted to the Teradata Database
            (Auto-Commit mode or Implicit Transaction).</para>
            <para></para>
            <para>An application can explicitly control the transaction lifespan by opening a transaction 
            via <see cref="M:Teradata.Client.Provider.TdConnection.BeginTransaction"/> method. For more information about the Teradata Database 
            and ANSI modes, see Teradata RDBMS SQL Reference Volume 2, Statement and Transaction Processing</para>
            
            <para>Default Value:  DEFAULT</para>
            </remarks>
        </member>
        <member name="P:Teradata.Client.Provider.TdConnectionStringBuilder.PortNumber">
            <summary>
            Specifies the TCP/IP port number that the .NET Data Provider for Teradata
            uses for connection to the Teradata Gateway.
            </summary>
            <remarks>
            <para>
            You must coordinate changes to this value with accompanying changes to the Gateway program.
            </para>
            
            <para>Default Value:  1025</para>
            </remarks>
        </member>
        <member name="P:Teradata.Client.Provider.TdConnectionStringBuilder.ConnectionPooling">
            <summary>
            Enables or disables connection pooling.
            </summary>
            <remarks>
            <para>
            When set to true, actual Teradata sessions are pooled and shared across instances of
            the TdConnection class. If the pool is empty or a Teradata session is not available,
            then a Teradata session is created and returned to the application, if the number of
            sessions does not exceed the <see cref="P:Teradata.Client.Provider.TdConnectionStringBuilder.MaxPoolSize"/>.
            </para>
            
            <para>Default Value:  True</para>
            </remarks>
        </member>
        <member name="P:Teradata.Client.Provider.TdConnectionStringBuilder.ConnectionPoolingTimeout">
            <summary>
            Specifies the time a connection may stay idle inside the pool.
            </summary>
            <remarks>
            <para>
            If a connection stays idle longer than the time specified, and the number of connections 
            exceeds the minimum pool size, the Teradata session is closed and valuable resources are released.
            </para>
            
            <para>Default Value:  60 seconds</para>
            </remarks>
        </member>
        <member name="P:Teradata.Client.Provider.TdConnectionStringBuilder.MaxPoolSize">
            <summary>
            Maximum number of Teradata sessions allowed in the pool.
            </summary>
            <remarks>
            <para>
            Once the MaxPool Size is reached, all requests for new Teradata sessions are queued.
            </para>
            
            <para>Default Value:  100</para>
            </remarks>
        </member>
        <member name="P:Teradata.Client.Provider.TdConnectionStringBuilder.MinPoolSize">
            <summary>
            Minimum number of Teradata sessions allowed in the pool.
            </summary>
            <remarks>
            <para>
            These sessions never timeout and are always active.
            </para>
            
            <para>
            Default Value:  0
            </para>
            </remarks>
        </member>
        <member name="P:Teradata.Client.Provider.TdConnectionStringBuilder.IntegratedSecurity">
            <summary>
            Single Sign On is supported by setting this value.  The User Id, Password, and
            Authentication String values are ignored.  
            </summary>
            <remarks>
            <para>
            The Account field may still be supplied.
            The .NET Data Provider for Teradata will choose the AuthenticationMechanism by selecting 
            the highest ranked mechanism configured in TeraGSS that supports SingleSignOn.  
            The application may override this behavior by providing a value for AuthenticationMechanism.
            </para>
            
            <para>Default Value:  false</para>
            </remarks> 
        </member>
        <member name="P:Teradata.Client.Provider.TdConnectionStringBuilder.UseXViews">
            <summary>
            All schema queries will return only user owned data.
            </summary>
            <remarks>
            <para>
            For example a tables schema query will access the dbc.tablesx table, in replacement
            of the dbc.tables table.  The dbc.tables table is a system table that may contain many
            Teradata user id tables, where the dbc.tablesx will contain only a users privately owned tables.
            </para>
            
            <para>Default Value:  true</para>
            </remarks>
        </member>
        <member name="P:Teradata.Client.Provider.TdConnectionStringBuilder.EnableTdDecimal">
            <summary>
            Enables and disables mapping of Decimal(18) to <see cref="T:Teradata.Client.Provider.TdDecimal"/> provider
            specific type.
            </summary>
            <value>
            Defaults to <c>true</c>. It can be set to <c>false</c> to disable creation of 
            <strong>TdDecimal</strong> provider specific value type for Teradata 
            Decimal data type with precision less than or equal to 18. It does not 
            affect Teradata Decimal data type with precision greater than 18 (Large Decimal).
            </value>
            <remarks>
            <para><see cref="M:Teradata.Client.Provider.TdDataReader.GetProviderSpecificFieldType(System.Int32)"/> will always return 
            <strong>TdDecimal</strong> type when <strong>EnableTdDecimal</strong> is set to <strong>true</strong>. 
            It will return <see cref="T:System.Decimal"/> when <strong>EnableTdDecimal</strong> is 
            set to <strong>false</strong> and the data returned by Teradata Database has a 
            precision less than or equal to 18.
            </para>
            <para>This feature has been added for backward compatibility with older applications.
            For example an older application, with no need for Large Decimal, might have set 
            <see cref="P:System.Data.Common.DataAdapter.ReturnProviderSpecificTypes"/> to <strong>true</strong> and 
            later assumed that the resulting columns in <see cref="T:System.Data.DataTable"/> are of 
            <strong>System.Decimal</strong> type.</para>
            
            <para>Default Value:  true</para>
            </remarks>
        </member>
        <member name="P:Teradata.Client.Provider.TdConnectionStringBuilder.EnableTdDateTime">
            <summary>
            Enables and disables mapping of DATE, TIME, TIME WITH ZONE, TIMESTAMP and TIMESTAMP WITH ZONE 
            to <see cref="T:Teradata.Client.Provider.TdDate"/>, <see cref="T:Teradata.Client.Provider.TdTime"/>, <see cref="T:Teradata.Client.Provider.TdTimeWithTimeZone"/>, <see cref="T:Teradata.Client.Provider.TdTimestamp"/> and 
            <see cref="T:Teradata.Client.Provider.TdTimestampWithTimeZone"/> provider specific types.
            </summary>
            <value>
            Defaults to <c>true</c>. It can be set to <c>false</c> to disable creation of 
            provider specific DateTime value types for the corresponding Teradata 
            DateTime data types.
            </value>
            <remarks>
            <para><see cref="M:Teradata.Client.Provider.TdDataReader.GetProviderSpecificFieldType(System.Int32)"/> will always return 
            <strong>TdDate</strong>, <strong>TdTime</strong>, <strong>TdTimeWithTimeZone</strong>, 
            <strong>TdTimestamp</strong> or <strong>TdTimestampWithTimeZone</strong> type corresponding 
            To Teradata Database data type when <strong>EnableTdDateTime</strong> is set to <strong>true</strong>.
            It will return <see cref="T:System.DateTime"/>, <see cref="T:System.TimeSpan"/> or <see cref="T:System.DateTimeOffset"/>
            <see cref="T:System.String"/> when <strong>EnableTdDateTime</strong> is 
            set to <strong>false</strong>.
            </para>
            <para>This feature has been added for backward compatibility with older applications.
            For example an older application, might have set 
            <see cref="P:System.Data.Common.DataAdapter.ReturnProviderSpecificTypes"/> to <strong>true</strong> and 
            later assumed that the resulting columns in <see cref="T:System.Data.DataTable"/> are of 
            <strong>System.DateTime</strong> type.</para>
            
            <para>Default Value:  true</para>
            </remarks>
        </member>
        <member name="P:Teradata.Client.Provider.TdConnectionStringBuilder.EnableDateTimeOffset">
            <summary>
            Enables and disables mapping of TIMESTAMP WITH ZONE to <see cref="T:System.DateTimeOffset"/>
            </summary>
            <value>
            Defaults to <c>true</c>. It can be set to <c>false</c> to disable creation of 
            System.DateTimeOffset value types for Teradata Timestamp With Zone data type.
            </value>
            <remarks>
            <para>If set to false, Teradata Timestamp With Zone date types will be mapped to System.String.</para>
            
            <para>Default Value:  true</para>
            </remarks>
            <seealso cref="P:Teradata.Client.Provider.TdParameter.Value">TdParameter.Value</seealso>
        </member>
        <member name="P:Teradata.Client.Provider.TdConnectionStringBuilder.EnableTdIntervals">
            <summary>
               Enables and disables mapping of all Teradata Database Interval data types to
               the corresponding Provider Specific Interval types.
            </summary>
            <value>
               Defaults to <c>true</c>. It can be set to <c>false</c> to disable creation of 
               provider specific interval value types for the corresponding Teradata 
               Interval data types.
            </value>
            <remarks>
            	<para>The Day-Time intervals supported by the provider are:</para>
            	<list type="bullet">
            		<item>
            			<see cref="T:Teradata.Client.Provider.TdIntervalDay"/>
            		</item>
            		<item>
            			<see cref="T:Teradata.Client.Provider.TdIntervalDayToSecond"/>
            		</item>
            		<item>
            			<see cref="T:Teradata.Client.Provider.TdIntervalDayToMinute"/>
            		</item>
            		<item>
            			<see cref="T:Teradata.Client.Provider.TdIntervalDayToHour"/>
            		</item>
            		<item>
            			<see cref="T:Teradata.Client.Provider.TdIntervalHour"/>
            		</item>
            		<item>
            			<see cref="T:Teradata.Client.Provider.TdIntervalHourToSecond"/>
            		</item>
            		<item>
            			<see cref="T:Teradata.Client.Provider.TdIntervalHourToMinute"/>
            		</item>
            		<item>
            			<see cref="T:Teradata.Client.Provider.TdIntervalMinute"/>
            		</item>
            		<item>
            			<see cref="T:Teradata.Client.Provider.TdIntervalMinuteToSecond"/>
            		</item>
            		<item>
            			<see cref="T:Teradata.Client.Provider.TdIntervalSecond"/>
            		</item>
            	</list>
            	<para>and the Year-Month intervals supported by the provider are:</para>
            	<list type="bullet">
            		<item>
            			<see cref="T:Teradata.Client.Provider.TdIntervalYear"/>
            		</item>
            		<item>
            			<see cref="T:Teradata.Client.Provider.TdIntervalMonth"/>
            		</item>
            		<item>
            			<see cref="T:Teradata.Client.Provider.TdIntervalYearToMonth"/>
            		</item>
            	</list>
            	<para>
            	    The setting of EnableTdIntervals affects the behavior of the following methods:
                </para>
            	<para>
            		<list type="table">
            			<listheader>
            				<term>Method</term>
            				<description>Behavior</description>
            			</listheader>
            			<item>
            				<term>
            					<see cref="M:Teradata.Client.Provider.TdDataReader.GetProviderSpecificFieldType(System.Int32)"/>
            				</term>
            				<description>
            				    <para><strong>Setting</strong> is <c>true</c></para>
            					<para>
                                    Returns the Provider Specific Interval data type corresponding
                                    to the Teradata Database Interval data type.
                                </para>
                                <para><strong>Setting</strong> is <c>false</c></para>
            					<para>
                                    All intervals will return the .NET Framework Class Library data
                                    type of <see cref="T:System.String"/>.
                                </para>
            				</description>
            			</item>
            			<item>
            				<term>
            					<see cref="M:Teradata.Client.Provider.TdDataReader.GetFieldType(System.Int32)"/>
            				</term>
            				<description>
            				    <para><strong>Setting</strong> is <c>true</c></para>
            					<para>
                                    All Day-Time intervals will return the .NET Framework Class
                                    Library data type of <see cref="T:System.TimeSpan"/>.
                                </para>
            					<para>
                                    All Year-Month intervals will return the .NET Framework Class
                                    Library data type of <see cref="T:System.String"/>.
                                </para>
                                <para><strong>Setting</strong> is <c>false</c></para>
            					<para>
                                    All intervals will return the .NET Framework Class Library data
                                    type of <see cref="T:System.String"/>.
                                </para>
            				</description>
            			</item>
            			<item>
            				<term>
            					<see cref="M:Teradata.Client.Provider.TdDataReader.GetValue(System.Int32)"/>
            				</term>
            				<description>
            					<strong>Setting</strong> is <c>true</c>
            					<para>
                                    All Day-Time intervals will return the .NET Framework Class
                                    Library data type of <see cref="T:System.TimeSpan"/>.
                                </para>
            					<para>
                                    All Year-Month intervals will return the .NET Framework Class
                                    Library data type of <see cref="T:System.String"/>.
                                </para><strong>Setting</strong> is <c>false</c>
            					<para>
                                    All intervals will return the .NET Framework Class Library data
                                    type of <see cref="T:System.String"/>.
                                </para>
            				</description>
            			</item>
            			<item>
            				<term>
            					<see cref="M:Teradata.Client.Provider.TdDataReader.GetProviderSpecificValue(System.Int32)"/>
            				</term>
            				<description>
            				    <para><strong>Setting</strong> is <c>true</c></para>
            					<para>
                                    Returns the Provider Specific Interval data value corresponding
                                    to the Teradata Database Interval data type.
                                </para>
                                <para><strong>Setting</strong> is <c>false</c></para>
            					<para>
                                    All intervals will return the .NET Framework Class Library data
                                    value of a <see cref="T:System.String"/>.
                                </para>
            				</description>
            			</item>
            			<item>
            				<term>
            					<see cref="P:Teradata.Client.Provider.TdParameter.Value"/> Property
            				</term>
            				<description>
            					<strong>Setting</strong> is <c>true</c>
            					<para>
                                    All Day-Time intervals will return the .NET Framework Class
                                    Library data value of a <see cref="T:System.TimeSpan"/>.
                                </para>
            					<para>
                                    All Year-Month intervals will return the .NET Framework Class
                                    Library data value of a <see cref="T:System.String"/>.
                                </para><strong>Setting</strong> is <c>false</c>
            					<para>
                                    All intervals will return the .NET Framework Class Library data
                                    value of a <see cref="T:System.String"/>.
                                </para>
            				</description>
            			</item>
            			<item>
            				<term>
            					<see cref="P:Teradata.Client.Provider.TdParameter.ProviderSpecificValue"/> Property
            				</term>
            				<description>
            				    <para><strong>Setting</strong> is <c>true</c></para>
            					<para>
                                    Returns the Provider Specific Interval data value corresponding
                                    to the Teradata Database Interval data type.
                                </para>
                                <para><strong>Setting</strong> is <c>false</c></para>
            					<para>
                                    All intervals will return the .NET Framework Class Library data
                                    value of a <see cref="T:System.String"/>.
                                </para>
            				</description>
            			</item>
            		</list>
            	</para>
            	<para>
                    This feature has been added for backward compatibility with older applications.
                    For example an older application, might have set <see cref="P:System.Data.Common.DataAdapter.ReturnProviderSpecificTypes"/> to <strong>true</strong> and
                    later assumed that the resulting columns in <see cref="T:System.Data.DataTable"/> are of
                    <strong>System.String</strong> type.
                </para>
            </remarks>
        </member>
        <member name="P:Teradata.Client.Provider.TdConnectionStringBuilder.RestrictToDefaultDatabase">
            <summary>
            Indicates whether Schema queries <see cref="M:Teradata.Client.Provider.TdConnection.GetSchema(System.String)"/> should be restricted
            to the Default Database.
            </summary>
            <value><c>true</c> restricts schema queries to the Default Database. Default value is <c>false</c>.</value>
            <remarks>
            <para>
            All Schema Collection queries are restricted to the Default Database (<see cref="P:Teradata.Client.Provider.TdConnectionStringBuilder.Database"/>) when this property 
            is set to <c>true</c>. The Default Database can be set through the connection string and 
            <see cref="M:Teradata.Client.Provider.TdConnection.ChangeDatabase(System.String)"/> method.
            </para>
            
            <para>Default Value:  false</para>
            </remarks>
        </member>
        <member name="P:Teradata.Client.Provider.TdConnectionStringBuilder.DataSourceDnsEntries">
            <summary>
            The number of entries defined in DNS for the DataSource.
            </summary>
            <remarks>
            <para>
            The .NET Data Provider will load balance between the DataSource entries found
            in DNS.  The first connection attempt will choose a random number between
            1 and DataSourceDnsEntries.
            </para>
            
            <para>Default Value:  undefined</para>
            </remarks>
        </member>
        <member name="P:Teradata.Client.Provider.TdConnectionStringBuilder.NodeDownTimeout">
            <summary>
            <strong>Obsolete</strong>. The number of seconds that must elapse before a connection attempt is made to
            a node previously marked as unavailable.
            </summary>
            <remarks>
            <para><strong>NOTE: This API is now obsolete.</strong> .NET Data Provider for Teradata uses a new 
            algorithm to detect and bypass down nodes.</para>
            <para>
            As the .NET Data Provider for Teradata load balances across the nodes, a node is 
            marked unavailable if a connection attempt fails.  The load balancing algorithm will 
            skip a node that is marked unavailable until the timeout has expired.
            </para>
            
            <para>Default Value:  900 seconds</para>
            </remarks>
        </member>
        <member name="P:Teradata.Client.Provider.TdConnectionStringBuilder.UseEnhancedSchemaTable">
            <summary>
            Gets or sets a Boolean value that indicates whether <see cref="M:Teradata.Client.Provider.TdDataReader.GetSchemaTable"/> method should return 
            additional metadata information (e.g. IsKey and IsUnique). 
            </summary>
            <value>The current value of UseEnhancedSchemaTable property, or the default value of <strong>true</strong> if 
            none has been supplied.</value>
            <remarks>
            <para>
            This property controls whether the Data Provider should retrieve additional result set metadata from 
            Teradata Database. This feature is available when connected to Teradata Database 6.2 or higher. 
            </para>
            
            <para>
            TdDataAdapter class can use the metadata to set properties and constraints on the DataTable.
            For example IsKey and IsUnique metadata fields are used to set constraints on a DataTable.
            </para>
            
            <para>
            The TdDataAdapter.SelectCommand must return a Key in order for <see cref="T:Teradata.Client.Provider.TdCommandBuilder"/> to generate 
            UPDATE, INSERT and DELETE SQL commands when UseEnhancedSchemaTable is set to true and 
            Teradata Database version is 6.2 or Higher. TdCommandBuilder will not require a Key when 
            UseEnhancedSchemaTable is set to false or Teradata Database version 6.1 or earlier.
            </para>
            
            <para>
            UseEnhancedSchemaTable property must be set to false for backward compatibility with Data Provider
            version 12.0 or earlier.
            </para>
            
            <para>Default Value:  true</para>
            </remarks>
        </member>
        <member name="P:Teradata.Client.Provider.TdConnectionStringBuilder.QueryBand">
            <summary>
            Gets or Sets the Query Bands that are to be defined at the Connection Level.
            </summary>
            <value>The current Query Band settings.</value>
            <remarks>
            <para>
            This property is used to define Query Bands at the Connection level.  Refer to <see cref="T:Teradata.Client.Provider.TdQueryBand"/>
            for more information.
            </para>
            
            <para>
            The Query Banding feature is available when connected to Teradata Database 12.0 or higher.
            </para>
            
            <para>Default Value:  empty TdQueryBand instance</para>
            </remarks>
        </member>
        <member name="P:Teradata.Client.Provider.TdConnectionStringBuilder.Recovery">
            <summary>
                Sets Recoverable Network Protocol (RNP) and Redrive properties used during a network 
                error or database failure.
            </summary>
            <remarks>
            <para>There are 4 acceptable values:</para>
            <list type="table">
                <listheader>
                    <term>Recovery Property</term>
                    <description>Description</description>
                </listheader>
                <item>
                    <term>OFF</term>
                    <description>
                        Disables RNP and Redrive.
                    </description>
                </item>
                <item>
                    <term>DEFAULT</term>
                    <description>
                        Enables Redrive participation as determined from the Teradata Active System Management (TASM) 
                        Redrive setting. 
                    </description>
                </item>
                <item>
                    <term>RNP</term>
                    <description>
                        Enables the connection to reconnect in the event of a network error or database
                        failure. Commands may be re-executed and results retrieved after reconnection 
                        from a network failure only.
                    </description>
                </item>
                <item>
                    <term>REDRIVE</term>
                    <description>
                        Enables Redrive. The connection will participate in redriving commands after 
                        reconnection. Redrive enhances the <c>RNP</c> option, as the Teradata 
                        Database spool files are preserved after a database restart when <c>REDRIVE</c> 
                        is selected. Commands will be re-executed or restarted automatically from the 
                        Data Provider.
                    </description>
                </item>
            </list>
            <para></para>
            <para>Default Value:  DEFAULT</para>
            </remarks>
        </member>
        <member name="P:Teradata.Client.Provider.TdConnectionStringBuilder.RecoveryTimeout">
            <summary>
                Recovery timeout in seconds used to re-establish a connection.
            </summary>
            <remarks>
                <para>
                    The <b>RecoveryTimeout</b> is used if the CommandTimeout is infinite or the 
                    <see cref="P:Teradata.Client.Provider.TdConnectionStringBuilder.RecoveryCommandTimeoutOverride"/> is enabled 
                    while the <see cref="P:Teradata.Client.Provider.TdCommand.CommandTimeout"/> is non-zero. 
                </para>
                <para>
                    If the <b>CommandTimeout</b> is 0, the reconnection timeout will always be extended by 
                    the <b>RecoveryTimeout</b> value in the application configuration file or the default 
                    value if not provided in the application configuration file. 
                </para>
                <para>
                    If the <b>CommandTimeout</b> is non-zero, the reconnection timeout will be extended by 
                    the <b>RecoveryTimeout</b> value when <b>RecoveryCommandTimeoutOverride</b> is true. 
                    Otherwise if the <b>RecoveryCommandTimeoutOverride</b> is false and the 
                    <b>CommandTimeout</b> is finite, only the time remaining in the <b>CommandTimeout</b>
                    will be used to reconnect.
                </para>
                <para>
                    Asynchronous commands do not contain or use CommandTimeouts. Asynchronous commands will
                    always be use the <b>RecoveryTimeout</b> in reconnection.
                </para>
                <para>
                    The value of the <b>RecoveryTimeout</b> is determined based upon :
                    <list type="bullet">
                        <item>The <b>RecoveryTimeout</b> defined here</item>
                        <item>The <b>RecoveryTimeout</b> obtained from evaluating the 
                            <see cref="P:Teradata.Client.Provider.TdConnectionStringBuilder.ProfileName"/>
                        </item>
                        <item>The default value</item>
                    </list>
                </para>
                <para>
                    The <see cref="E:Teradata.Client.Provider.TdConnection.RecoverConnection"/> event enables applications to
                    change the <b>RecoveryTimeout</b> value that has been determined from the
                    above hierarchy. The <see cref="P:Teradata.Client.Provider.TdRecoveryEventArgs.RecoveryTimeout"/> may be 
                    supplied by an application listening for the <b>TdConnection.RecoverConnection</b>
                    event. It will always be activated during recovery in the initial attempt and during 
                    subsequent attempts after a calculated delay period. The 
                    <b>TdConnection.RecoverConnection</b> event is activated when either of the 
                    following is true during reconnection:
                    <list type="bullet">
                        <item><b>CommandTimeout</b> is infinite</item>
                        <item><b>CommandTimeoutOverride</b> is true</item>
                        <item>The command is asynchronous</item>
                    </list>
                    If the event is activated again because the initial <b>RecoveryTimeout</b> expired, 
                    and the application is not listening, no additional time will be provided for 
                    reconnection and the reconnection will fail.
                </para>
                <para>Default Value:  1200 seconds</para>
            </remarks>
        </member>
        <member name="P:Teradata.Client.Provider.TdConnectionStringBuilder.ProfileName">
            <summary>
                Specifies the profile name to access the appropriate properties from the application
                configuration file.
            </summary>
            <remarks>
                <para>
                    The profile name is used to set the supported <see cref="P:Teradata.Client.Provider.TdConnection.ConnectionString"/> 
                    properties from the application configuration file during execution. The supported
                    <b>TdConnection.ConnectionString</b> properties are found in the  
                    <a href="ConfigurationFileProviderSection.html">Configuration
                    File Provider Section</a>.
                </para>
                <para>
                    The profile name must exist in the application configuration file. If the profile name
                    does not exist the following error message will be returned - 
                    "Invalid connection string attribute: <i>supplied profile name</i> is not a valid 
                    value for Profile Name.", preventing a successful opening of the connection.
                </para>
                <para>Default Value:  null</para>
            </remarks>
        </member>
        <member name="P:Teradata.Client.Provider.TdConnectionStringBuilder.CommandTimeout">
            <summary>
                This sets the default command timeout. 
            </summary>
            <remarks>
                <para>
                    The CommandTimeout property represents the amount of time in seconds that the Data 
                    Provider waits for a response from Teradata. If the request is not processed within 
                    the specified CommandTimeout the request is aborted and the transaction is rolled back. 
                    A zero value indicates that the Data Provider should wait indefinitely for the SQL 
                    statement to execute.
                </para>
                    The CommandTimeout property will be used during Redrive and Recoverable Network
                    Protocol (RNP) support to determine additional time required to support Redrive and
                    RNP. For more details see <see cref="P:Teradata.Client.Provider.TdCommand.CommandTimeout"/>.
                <para>
                </para>
                <para>Default Value:  30 seconds</para>
            </remarks>
        </member>
        <member name="P:Teradata.Client.Provider.TdConnectionStringBuilder.RecoveryCommandTimeoutOverride">
            <summary>
                Enables a <see cref="P:Teradata.Client.Provider.TdConnectionStringBuilder.RecoveryTimeout"/> value to be supplied 
                during reconnection for commands that contain a finite CommandTimeout.
            </summary>
            <remarks>
                <para>
                    All synchronous commands that contain a zero (infinite) 
                    <see cref="P:Teradata.Client.Provider.TdCommand.CommandTimeout"/> will always extend the reconnection time 
                    by the <b>RecoveryTimeout</b>. If the <b>CommandTimeout</b> is 
                    non-zero, this new override property (when true) will set the reconnection 
                    timeout to the <b>RecoveryTimeout</b> value.
                </para>
                <para>Default Value:  <code>true</code></para>
            </remarks>
        </member>
        <member name="P:Teradata.Client.Provider.TdConnectionStringBuilder.RecoveryStartInterval">
            <summary>
                The starting time interval (in seconds) after which an attempt to retry a  
                reconnection is performed.
            </summary>
            <remarks>
                <para>
                    The <b>RecoveryStartInterval</b> is used to retry a reconnection that have 
                    encountered reconnectable errors. The <b>RecoveryStartInterval</b> is defined 
                    as the first time period to wait between unsuccessful efforts to reconnect. 
                    It is used to retry reconnection attempts. 
                </para>
                <para>
                    The <see cref="P:Teradata.Client.Provider.TdConnectionStringBuilder.RecoveryIntervalFactor"/> is used to
                    modify the <b>RecoveryStartInterval</b> after the first retry is attempted,
                    by adding the <b>RecoveryIntervalFactor</b> to the initial delay period. Each
                    successive delay period will be modified by the <b>RecoveryIntervalFactor</b> 
                    until the delay period exceeds the 
                    <see cref="P:Teradata.Client.Provider.TdConnectionStringBuilder.RecoveryMaximumInterval"/>. The
                    <b>RecoveryMaximumInterval</b> is used to set the upper limit on the 
                    calculated delay period, until <see cref="P:Teradata.Client.Provider.TdConnectionStringBuilder.RecoveryTimeout"/>
                    expires or the reconnection fails.
                </para>
                <para>
                    For example if the <b>RecoveryStartInterval</b> is 2 seconds, the 
                    <b>RecoveryMaximumInterval</b> is 16 and the <b>RecoveryIntervalFactor</b> is 2. 
                    The delay time between each retry attempt will be calculated as 2, 4, 6, 8, 10 
                    12, 14, 16, 16, 16, etc. If the <b>RecoveryIntervalFactor</b> is 0, the 
                    <b>RecoveryStartInterval</b> will be used as the delay period for all retryable
                    attempts, as the <b>RecoveryIntervalFactor</b> will not change the delay period.
                </para>
                <para>Default Value:  2 seconds</para>
            </remarks>
        </member>
        <member name="P:Teradata.Client.Provider.TdConnectionStringBuilder.RecoveryIntervalFactor">
            <summary>
                This represents the adjustment in the recovery interval period from the preceeding
            	interval period. The factor is an additive factor in seconds.
            </summary>
            <remarks>
                <para>
                    The <b>RecoveryIntervalFactor</b> will be added to the 
                    <see cref="P:Teradata.Client.Provider.TdConnectionStringBuilder.RecoveryStartInterval"/> to create a new 
                    period of time to delay attempts to reconnect to the Teradata 
                    database.
                </para>
                <para>
                    The <see cref="P:Teradata.Client.Provider.TdConnectionStringBuilder.RecoveryMaximumInterval"/> will limit the 
                    upper value of this period of time. For example, if the <b>RecoveryStartInterval</b> 
                    is 2, the <b>RecoveryIntervalFactor</b> is 2 and the <b>RecoveryMaximumInterval</b> 
                    is 32, the time periods generated internally will be 2, 4, 6, 8, until the 
                    maximum delay period of 32 is reached.
                </para>
                <para>Default Value: 2</para>
            </remarks>
        </member>
        <member name="P:Teradata.Client.Provider.TdConnectionStringBuilder.ConnectMaxRetryCount">
            <summary>
                This represents the maximum number of attempts of a retryable error during
                <see cref="M:Teradata.Client.Provider.TdConnection.Open"/> before an error is returned to the application.
            </summary>
            <remarks>
                <para>
                    The <b>ConnectMaxRetryCount</b> will set the maximum number of retries
                    for a connection attempt. Once this limit is reached, the connection
                    will fail. For example if the value is set to 200, the Data Provider will
                    retry 200 times before failing the connection attempt and the 
                    <see cref="P:Teradata.Client.Provider.TdConnectionStringBuilder.ConnectionTimeout"/> has not
                    expired.
                </para>
                <para>Default Value:  200</para>
            </remarks>
        </member>
        <member name="P:Teradata.Client.Provider.TdConnectionStringBuilder.RecoveryMaximumInterval">
            <summary>
                This represents the maximum interval time in seconds, used to limit the retry interval 
            	time adjusted by the <see cref="P:Teradata.Client.Provider.TdConnectionStringBuilder.RecoveryIntervalFactor"/>.
            </summary>
            <remarks>
                <para>
                    The <b>RecoveryMaximumInterval</b> is the maximum interval of time to wait while 
                    attempting to reconnect to the database. If a <b>RecoveryIntervalFactor</b> is
                    greater than 0, the <b>RecoveryMaximumInterval</b> will set the upper limit
                    that may be used to delay attempts. When the <b>RecoveryIntervalFactor</b>
                    is 0, the delay will always use the 
                    <see cref="P:Teradata.Client.Provider.TdConnectionStringBuilder.RecoveryStartInterval"/>.
                </para>
                <para>Default Value:  32 seconds </para>
            </remarks>
        </member>
        <member name="P:Teradata.Client.Provider.TdConnectionStringBuilder.EnforcePersistSecurityInfo">
            <summary>
            Gets the ConnectionString; it removes the Password, New Password and Authentication String
            if the "Persist Security Info" is set to false.
            </summary>
        </member>
        <member name="T:Teradata.Client.Provider.TdStream">
             <summary>
                 TdStream is used to retrieve a BLOB from Teradata Database. 
             </summary>
             
             <remarks>
             <para>
                 TdStream represents a System.IO.Stream through which raw data (bytes) associated 
                 with a BLOB field can be read. Optionally, System.IO.BinaryReader and 
                 System.IO.StreamReader is used in conjunction with TdStream for reading of primitive 
                 .NET data types. TdStream does not support seeking; an application cannot modify 
                 the current position within the stream. 
             </para> 
             <para>
                 TdStream represents a read-only BLOB and an open query against the Teradata Database 
                 when CommandBehavior.SequentialAccess is not requested by the application. This query 
                 is separate and distinct from the query associated with the TdDataReader. Therefore 
                 the maximum number of open Teradata Database queries (16) limit applies to TdDataReader 
                 and TdStream. See TdBlob for additional information.
             </para>
             <para>
                 TdStream implements IDisposable interface. It is highly recommended that Dispose or 
                 Close be called before an instance of this class is released for garbage collection. 
                 Since garbage collection is not deterministic, valuable Teradata Database resources 
                 might not be released immediately. The TdStream is disposed when a TdBlob object 
                 is disposed.
             </para>
             </remarks>
             <example>
             The following example returns a TdStream (TdBlob.BaseStream property) representing an 
             Employee picture. It uses a connection to Teradata to execute a query against the 
             Employee table.
             
             <code>
             public void TdStream GetEmployeePicture(String employeeId, TdConnection cn)
             {
                 TdCommand cmd = new TdCommand(“Select Pic from Employee Where ID = ?”, cn);
            
                 // Initialize the parameter with employee ID.
                 TdParameter id = cmd.CreateParameter();
                 id.ParameterName = “EmployeeID”;
                 id.Direction = System.Data.ParameterDirection.Input;
                 id.Value = employeeId;
            
                 // Execute the query. Note This example will not work if 
                 // CommandBehavior.SequentialAccess is specified since 
                 // the reader is Closed/Disposed before the call returns.
                 TdDataReader rd = cmd.ExecuteReader();
            
                 // Retrieve the picture
                 TdBlob employeePicture = rd.GetTdBlob(0);
            
                 // Dispose of the reader and command
                 rd.Close();
                 cmd.Dispose();
                 	
                 // return the employee picture stream.
                 return employeePicture.BaseStream;	
             }
             </code>
             </example>
             <seealso cref="T:Teradata.Client.Provider.TdBlob"/>
        </member>
        <member name="M:Teradata.Client.Provider.TdStream.Close">
            <summary>
                Closes the TdStream object and frees all resources.
            </summary>
            <exception cref="T:Teradata.Client.Provider.TdException">
                The Teradata Database returned an error, or the .NET Data Provider for Teradata 
                detected an error.
            </exception>
            <remarks>
                It frees all managed and unmanaged resource used by the TdStream object.
            </remarks>
        </member>
        <member name="M:Teradata.Client.Provider.TdStream.Flush">
            <summary>
                Not supported.
            </summary>
            <exception cref="T:System.NotSupportedException">
                The Flush method is not supported.
            </exception>
            <remarks>
                TdStream is read-only and does not support the <c>Flush</c> method.
            </remarks>
        </member>
        <member name="M:Teradata.Client.Provider.TdStream.Read(System.Byte[],System.Int32,System.Int32)">
            <summary>
                Reads data into the application provided buffer and advances the 
                current position of the stream.
            </summary>
            <param name="buffer">Specifies a Byte array to read data into.</param>
            <param name="offset">Specifies the location within the buffer to read data into.</param>
            <param name="count">Specifies the number of bytes to read into the buffer</param>
            <returns>
                Returns the number of bytes read from Teradata Database and written into 
                the <paramref name="buffer"/>. The number will be equal or less than 
                <paramref name="count"/>.
            </returns>
            <exception cref="T:System.ArgumentNullException">
                <paramref name="buffer"/> is null.
            </exception>
            <exception cref="T:System.ArgumentOutOfRangeException">
                <para>
                    <paramref name="count"/> or <paramref name="offset"/> is negative or the sum of 
                    <paramref name="offset"/> and <paramref name="count"/> is larger than the 
                    <paramref name="buffer"/> length.
                 </para>
            </exception>
            <exception cref="T:System.InvalidOperationException">
                The <see cref="T:Teradata.Client.Provider.TdConnection"/> is closed.
            </exception>
            <exception cref="T:System.ObjectDisposedException">
                The <c>TdStream</c> is closed / dispose.
            </exception>
            <exception cref="T:Teradata.Client.Provider.TdException">
                The Teradata Database returned an error, or the .NET Data Provider for Teradata 
                detected an error.
            </exception>
            <remarks>
                The .NET Data Provider for Teradata reads the LOB from Teradata 
                and transfers it to the application provided buffer.
            </remarks> 
        </member>
        <member name="M:Teradata.Client.Provider.TdStream.Seek(System.Int64,System.IO.SeekOrigin)">
            <summary>
                TdStream does not support seeking.
            </summary>
            <param name="offset">Specifies the number of bytes relative to origin.</param>
            <param name="origin">Designates a reference point within the stream.</param>
            <exception cref="T:System.NotSupportedException">
                The TdStream does not support seeking.
            </exception>
            <returns>
                Returns a new position within the stream
            </returns>
        </member>
        <member name="M:Teradata.Client.Provider.TdStream.SetLength(System.Int64)">
            <summary>
                TdStream does not support seeking.
            </summary>
            <param name="value">Specifies the length of TdStream in bytes.</param>
            <exception cref="T:System.NotSupportedException">
                The TdStream does not support seeking.
            </exception>
        </member>
        <member name="M:Teradata.Client.Provider.TdStream.Write(System.Byte[],System.Int32,System.Int32)">
            <summary>
                TdStream does not support writing.
            </summary>
            <param name="buffer">Specifies the Byte array to read data from.</param>
            <param name="offset">Specifies the location within the <paramref name="buffer"/> to read data from.</param>
            <param name="count">Specifies the number of bytes to read from the <paramref name="buffer"/>.</param>
            <exception cref="T:System.NotSupportedException">
                TdStream does not support writing.
            </exception>
        </member>
        <member name="M:Teradata.Client.Provider.TdStream.WriteByte(System.Byte)">
            <summary>
                TdStream does not support writing.
            </summary>
            <param name="value">Byte of data to write to the stream.</param>
            <exception cref="T:System.NotSupportedException">
                TdStream does not support writing.
            </exception>
        </member>
        <member name="P:Teradata.Client.Provider.TdStream.CanRead">
            <summary>
            Gets a value indicating whether data can be read from the TdStream.
            </summary>
            
            <value>
            <c>true</c> if TdStream is open and <c>false</c> otherwise.
            </value>
            
            <remarks>
            TdStream is a read-only stream. Therefore CanRead property returns 
            <c>true</c> while the TdStream object is open. It returns <c>false</c> after a 
            call to <see cref="M:Teradata.Client.Provider.TdStream.Close"/> method.
            </remarks>
        </member>
        <member name="P:Teradata.Client.Provider.TdStream.CanSeek">
            <summary>
                Gets a value indicating whether the TdStream object supports seeking.
            </summary>
            <value>
                Seeking is not currently supported. Therefore, it will always return <c>false</c>.
            </value>
            <remarks>
                TdStream does not currently support seeking. Therefore, CanSeek property  
                always returns <c>false</c>.
            </remarks>
        </member>
        <member name="P:Teradata.Client.Provider.TdStream.CanWrite">
            <summary>
                Gets a value indicating whether the TdStream object supports writing.
            </summary>
            <value>
                It always returns <c>false</c>.
            </value>
            <remarks>
                TdStream is a read-only stream. Therefore, CanWrite property always 
                returns <c>false</c>. A Call to <see cref="M:System.IO.Stream.BeginWrite(System.Byte[],System.Int32,System.Int32,System.AsyncCallback,System.Object)"/>,
                <see cref="M:System.IO.Stream.EndWrite(System.IAsyncResult)"/>,
                <see cref="M:Teradata.Client.Provider.TdStream.SetLength(System.Int64)"/>,
                <see cref="M:Teradata.Client.Provider.TdStream.Write(System.Byte[],System.Int32,System.Int32)"/>
                or <see cref="M:Teradata.Client.Provider.TdStream.WriteByte(System.Byte)"/> 
                throws a NotSupportedException.
            </remarks>
        </member>
        <member name="P:Teradata.Client.Provider.TdStream.Length">
            <summary>
                Gets the size of the TdStream (BLOB) in bytes.
            </summary>
            <value>
                The size of the TdStream (BLOB) in bytes.
            </value>
            <exception cref="T:System.ObjectDisposedException">
                The TdStream is closed / disposed.
            </exception>
        </member>
        <member name="P:Teradata.Client.Provider.TdStream.Position">
            <summary>
                Gets the current position within the TdStream object.
            </summary>
            <value>
                The current position within the TdStream.
            </value>
            <exception cref="T:System.ObjectDisposedException">
                The TdStream is closed / disposed.
            </exception>
            <exception cref="T:System.NotSupportedException">
                TdStream does not support seeking.
            </exception>
            <remarks>
                TdStream does not support seeking. Therefore Position cannot be set.
            </remarks>
        </member>
        <member name="T:Teradata.Client.Provider.TdBlob">
             <summary>
                 TdBlob represents a BLOB (Binary Large Object) data type instance. 
                 It is used to retrieve a BLOB from the Teradata database.
             </summary>
             
             <remarks>
             <para>
                 TdBlob does not expose any public constructor.  It's primary purpose is to retrieve 
                 BLOB data from the Teradata database.  
             </para>       
             <para>
                 In order to create an instance of TdBlob, <see cref="M:Teradata.Client.Provider.TdDataReader.GetTdBlob(System.Int32)"/> method
                  must be called when the data contained in a BLOB column is to be retrieved.
             </para>
             <para>
                 When a TdBlob is created, the provider will open a request on the existing connection.
                 This request is separate and independent from the request that was opened to process
                 the query.  The Teradata Database has a maximum number of open requests that it can  
                 support per connection. The limit is <strong>16</strong>.  
             </para>
             <para>
                 It is important that <see cref="M:Teradata.Client.Provider.TdBlob.Close"/> or <see cref="M:Teradata.Client.Provider.TdBlob.Dispose"/> is 
                 called after the TdBlob has been used to process the BLOB.  This will free up the 
                 resources and the request that was used to retrieve the BLOB from the Teradata Database. 
                 After a TdBlob is disposed, an application can only call the Close, Dispose or the 
                 IsClosed. All other methods and properties will throw a ObjectDisposedException exception.
             </para>
             <para>
                 A TdBlob instance can only be created when the BLOB data is retrieved using 
                 <strong>deferred</strong> mode.  This allows the data to be <strong>streamed</strong> 
                 from the Teradata Database to the Data Provider, and allows an application to retrieve 
                 the data in chunks from one or more LOBs.
             </para>
             <para>
                 BLOB data is returned using deferred mode when 
                 <see cref="F:System.Data.CommandBehavior.SequentialAccess"/> has <strong>not</strong> been
                 specified in the call to <see cref="M:Teradata.Client.Provider.TdCommand.ExecuteReader"/>.
             </para>
             <para>
                 <see cref="P:Teradata.Client.Provider.TdBlob.BaseStream"/> returns a stream. 
                 An application can read primitve .NET Framework data types from a <see cref="T:Teradata.Client.Provider.TdStream"/>  
                 using a <see cref="T:System.IO.BinaryReader"/>. TdStream does not support seeking. 
             </para>
             </remarks>
             <example>
             The following example returns a <c>TdBlob</c> representing a picture. 
             
             <code>
             public void DisplayEmployeePicture(String employeeId, TdConnection cn)
             {
                 TdCommand cmd = new TdCommand(“Select Pic from Employee Where ID = ?”, cn);
            
                 // Initialize the parameter with employee ID.
                 TdParameter id = cmd.CreateParameter();
                 id.ParameterName = “EmployeeID”;
                 id.Direction = System.Data.ParameterDirection.Input;
                 id.Value = employeeId;
                 
                 cmd.Parameters.Add(id);
            
                 // Execute the query. 
                 using (TdDataReader reader = cmd.ExecuteReader())
                 {
                     if (reader.Read())
                     {
                         using (TdBlob pic = reader.GetTdBlob(0))
                         {
                             DisplayPicture(pic);
                         }
                     }
            
                 }
            
                 cmd.Dispose();
             }
             </code>
             </example>
             <seealso cref="T:Teradata.Client.Provider.TdStream"/>
        </member>
        <member name="M:Teradata.Client.Provider.TdBlob.Clone">
            <summary>
                Creates and initializes a new TdBlob object.
            </summary>
            <returns>
                Returns a <c>TdBlob</c> object capable of returning the same BLOB field.
            </returns>
            <exception cref="T:System.InvalidOperationException">
                The <see cref="T:Teradata.Client.Provider.TdConnection"/> is closed.
            </exception>
            <exception cref="T:System.ObjectDisposedException">
                The <c>TdBlob</c> is closed / dispose.
            </exception>
            <exception cref="T:Teradata.Client.Provider.TdException">
                The Teradata Database returned an error, or the .NET Data Provider for Teradata 
                detected an error.
            </exception>
            <remarks>
                The cloned <c>TdBlob</c> object will have a separate open query/request 
                against the Teradata Database. 
            </remarks>
        </member>
        <member name="M:Teradata.Client.Provider.TdBlob.Dispose">
            <summary>
                Closes the <c>TdBlob</c> object and releases all associated resources.
            </summary>
            <exception cref="T:Teradata.Client.Provider.TdException">
                The Teradata Database returned an error, or the .NET Data Provider for Teradata 
                detected an error.
            </exception>
            <remarks>
                Closes the <c>TdBlob</c> object and releases all associated Teradata Database and 
                client resources. It is identical to the <see cref="M:Teradata.Client.Provider.TdBlob.Close"/> method.
            </remarks>
        </member>
        <member name="M:Teradata.Client.Provider.TdBlob.Close">
            <summary>
                Closes the <c>TdBlob</c> object and releases all associated resources.
            </summary>
            <exception cref="T:Teradata.Client.Provider.TdException">
                Teradata Database returned an error or the .NET Data Provider for Teradata detected an error.
            </exception>
            <remarks>
                Closes the <c>TdBlob</c> object and releases all associated Teradata Database and 
                client resources. 
            </remarks>
        </member>
        <member name="M:Teradata.Client.Provider.TdBlob.Read(System.Byte[],System.Int32,System.Int32)">
            <summary>
                Reads data into the application provided buffer and advances the 
                current position of the <see cref="T:Teradata.Client.Provider.TdStream"/> object.
            </summary>
            <param name="buffer">Byte array to read data into.</param>
            <param name="offset">
                The location within the <paramref name="buffer"/> to read data into.
            </param>
            <param name="count">Number of bytes to read into the <paramref name="buffer"/>.</param>
            <returns>
                Returns the number of bytes read from Teradata Database and written into 
                the <paramref name="buffer"/> which should be equal or less than 
                <paramref name="count"/>.
            </returns>
            <exception cref="T:System.ArgumentNullException">
                <paramref name="buffer"/> is null.
            </exception>
            <exception cref="T:System.ArgumentOutOfRangeException">
                <para><paramref name="count"/> or <paramref name="offset"/> is negative or the sum
                of <paramref name="offset"/> and <paramref name="count"/> is larger than the 
                <paramref name="buffer"/> length.</para>
            </exception>
            <exception cref="T:System.InvalidOperationException">
                The <c>TdBlob</c> is null or <see cref="T:Teradata.Client.Provider.TdConnection"/> 
                is closed.
            </exception>
            <exception cref="T:System.ObjectDisposedException">
                The <c>TdBlob</c> or <see cref="T:Teradata.Client.Provider.TdStream"/> 
                is closed / disposed.
             </exception>
            <exception cref="T:Teradata.Client.Provider.TdException">
                Teradata Database returned an error -or- the .NET Data Provider for Teradata 
                detected an error.
            </exception>
            <remarks>
                The .NET Data Provider for Teradata reads the BLOB from the Teradata Database
                and transfers the Blob content to the application provided buffer.
            </remarks>         
        </member>
        <member name="M:Teradata.Client.Provider.TdBlob.ReadByte">
            <summary>
                Returns the next byte and advances the current position of the 
                <see cref="T:Teradata.Client.Provider.TdStream"/> by 1 byte.
            </summary>
            <returns>
                Returns the next byte of the BLOB.
            </returns>
            <exception cref="T:System.IO.EndOfStreamException">
                The end of <see cref="T:Teradata.Client.Provider.TdStream"/> is reached.
            </exception>
            <exception cref="T:System.InvalidOperationException">
                The <c>TdBlob</c> is null, or the <see cref="T:Teradata.Client.Provider.TdConnection"/> 
                is closed.
            </exception>
            <exception cref="T:System.ObjectDisposedException">
                The <c>TdBlob</c> or the <see cref="T:Teradata.Client.Provider.TdStream"/>
                is closed / disposed.
            </exception>
            <exception cref="T:Teradata.Client.Provider.TdException">
                The Teradata Database returned an error, or the .NET Data Provider for Teradata 
                detected an error.
            </exception>
            <remarks>
                The .NET Data Provider for Teradata reads the BLOB field from Teradata Database and
                advances the current position of the <see cref="T:Teradata.Client.Provider.TdStream"/> 
                by 1 byte.
            </remarks>
        </member>
        <member name="M:Teradata.Client.Provider.TdBlob.Read(System.Int32)">
            <summary>
                Returns a Byte array and advances the current position of the 
                <see cref="T:Teradata.Client.Provider.TdStream"/>.
            </summary>
            <param name="count">Number of bytes to read from the BLOB.</param>
            <returns>
                Returns a byte array having a maximum of <paramref name="count"/> bytes containing 
                the data read from the BLOB.
            </returns>
            <exception cref="T:System.InvalidOperationException">
                The <c>TdBlob</c> is null, or the <see cref="T:Teradata.Client.Provider.TdConnection"/> 
                is closed.
             </exception>
            <exception cref="T:System.ObjectDisposedException">
                The <c>TdBlob</c> or the <see cref="T:Teradata.Client.Provider.TdStream"/>
                is closed / disposed.
            </exception>
            <exception cref="T:Teradata.Client.Provider.TdException">
                The Teradata Database returned an error, or the .NET Data Provider for Teradata 
                detected an error.
            </exception>
            <remarks>
                The .NET Data Provider for Teradata reads the BLOB field into a byte array 
                whose size is equal to or less than <paramref name="count"/>. If the byte
                array size is less <paramref name="count"/>, then the end of the BLOB is reached.
                The current position of the <see cref="T:Teradata.Client.Provider.TdStream"/> 
                is also advanced.
            </remarks>
        </member>
        <member name="P:Teradata.Client.Provider.TdBlob.IsNull">
            <summary>
                Indicates whether <c>TdBlob</c> represents a null BLOB.
            </summary>
            <value>
                <c>true</c> if <c>TdBlob</c> represents a null BLOB; otherwise <c>false</c>.
            </value>
            <exception cref="T:System.ObjectDisposedException">
                The <c>TdBlob</c> is closed / disposed.
            </exception>
        </member>
        <member name="P:Teradata.Client.Provider.TdBlob.BaseStream">
             <summary>
                 Returns the underlying <see cref="T:Teradata.Client.Provider.TdStream"/> object,
                 or a null reference (Nothing in Visual Basic) if Teradata Database returns a null.
             </summary>
             <value>
                 Specifies the underlying <see cref="T:Teradata.Client.Provider.TdStream"/> object,
                 or a null reference (Nothing in Visual Basic) if Teradata Database returns a null.
             </value>
             <exception cref="T:System.ObjectDisposedException">
                 The <c>TdBlob</c> is closed / disposed.
             </exception>
             <remarks>
                 The underlying <see cref="T:Teradata.Client.Provider.TdStream"/> can be used in 
                 conjunction with <see cref="T:System.IO.BinaryReader"/> to read primitive 
                 .NET data types from the BLOB.
             </remarks>
             <example>
             The following example returns the size of the employee picture. It builds on 
             the example given in the TdBlob overview. There are more efficient ways to 
             retrieve the BLOB size. For example, using SQL.
             
             <code>
             public void long GetEmployeePictureSize(String employeeId, TdConnection cn)
             {
                 long pictureSize = 0;
            
                 // retrieve the picture
                 TdBlob picture = GetEmployeePicture(employeeId, cn);
            
                 if (false == picture.IsNull)
                 {
                     pictureSize = picture.BaseStream.Length;
                 }
            
                 // Close the TdBlob to release resources
                 picture.Close();
            
                 // return the size
                 return pictureSize;
             }
             </code>
             
             </example>
        </member>
        <member name="P:Teradata.Client.Provider.TdBlob.IsClosed">
            <summary>
                Indicates whether the <c>TdBlob</c> is closed.
            </summary>
            <value>
                <c>true</c> if <c>TdBlob</c> is closed; <c>false</c> otherwise.
            </value>
        </member>
        <member name="T:Teradata.Client.Provider.TdClob">
             <summary>
                 TdClob represents a CLOB (Character Large Object) data type instance. 
                 It is used to retrieve CLOB data from the Teradata Database.
             </summary>
             
             <remarks>
             <para>
                 TdClob does not expose any public constructor.  It's primary purpose is to retrieve 
                 CLOB data from the Teradata database.  
             </para>
             <para>
                 In order to create an instance of TdClob, <see cref="M:Teradata.Client.Provider.TdDataReader.GetTdClob(System.Int32)"/> method 
                 must be called when the data contained in a CLOB column is to be retrieved.
             </para>
             <para>
                 When a TdClob is created, the provider will open a request on the existing connection.
                 This request is separate and independent from the request that was opened to process the
                 query. The Teradata Database has a maximum number of open requests that it can support 
                 per connection. The limit is <strong>16</strong>.  
             </para>
             <para>
                 It is important that <see cref="M:Teradata.Client.Provider.TdClob.Close"/> or <see cref="M:Teradata.Client.Provider.TdClob.Dispose"/> is 
                 called after the TdClob has been used to process the CLOB.  This will free up the 
                 resources and the request that was used to retrieve the CLOB from the Teradata Database. 
                 After a TdClob is disposed, an application can only call the Close and Dispose methods 
                 or the IsClosed property. All other methods and properties will throw an 
                 ObjectDisposedException exception.
             </para>
             <para>
                 A TdClob instance can only be created when the CLOB data is retrieved using 
                 <strong>deferred</strong> mode.  This allows the data to be <strong>streamed</strong> 
                 from the Teradata Database to the Data Provider, and allows an application to retrieve 
                 the data in chunks from one or more LOBs.
             </para>
             <para>
                 An application is <strong>unable</strong> to access the base stream of the TdClob 
                 instance.
             </para>
             <para>
                 CLOB data is returned using deferred mode when 
                 <see cref="F:System.Data.CommandBehavior.SequentialAccess"/> has <strong>not</strong> been
                 specified in the call to <see cref="M:Teradata.Client.Provider.TdCommand.ExecuteReader"/>.
             </para>
             </remarks>
             <example>
             The following example displays a TdClob representing a resume. 
               
             <code>
             public void DisplayEmployeeResume(String employeeId, TdConnection cn)
             {
                 TdCommand cmd = new TdCommand(“Select Resume from Employee Where ID = ?”, cn);
            
                 // Initialize the parameter with employee ID.
                 TdParameter id = cmd.CreateParameter();
                 id.ParameterName = “EmployeeID”;
                 id.Direction = System.Data.ParameterDirection.Input;
                 id.Value = employeeId;
                 
                 cmd.Parameters.Add(id);
            
                 // Execute the Query
                 using (TdDataReader reader = cmd.ExecuteReader())
                 {
                     if (reader.Read())
                     {
                         // Retrieve the resume
                         using (TdClob resume = reader.GetTdClob(0))
                         {
                             DisplayResume(resume);
                         }
                     }
                 }
            
                 // Dispose of the command
                 cmd.Dispose();
             }
             </code>
             </example>
        </member>
        <member name="M:Teradata.Client.Provider.TdClob.Clone">
            <summary>
                Creates and initializes a new <c>TdClob</c> object.
            </summary>
            <returns>
                A <c>TdClob</c> object capable of returning the same CLOB field.
            </returns>
            <exception cref="T:System.InvalidOperationException">
                The <see cref="T:Teradata.Client.Provider.TdConnection"/> is closed.
            </exception>
            <exception cref="T:System.ObjectDisposedException">
                The <c>TdClob</c> is closed / dispose.
            </exception>
            <exception cref="T:Teradata.Client.Provider.TdException">
                The Teradata Database returned an error, or the .NET Data Provider for Teradata 
                detected an error.
            </exception>
            <remarks>
                The cloned <c>TdClob</c> object will have a separate open query/request 
                against the Teradata Database. 
            </remarks>        
        </member>
        <member name="M:Teradata.Client.Provider.TdClob.Dispose">
            <summary>
                Closes the <c>TdClob</c> object and releases all associated resources.
            </summary>
            <exception cref="T:Teradata.Client.Provider.TdException">
                Teradata Database returned an error or the .NET Data Provider for Teradata 
                detected an error.
            </exception>
            <remarks>
                Closes the <c>TdClob</c> object and releases all associated Teradata Database and 
                client resources. The TdClob.Dispose method is identical to the 
                <see cref="M:Teradata.Client.Provider.TdClob.Close"/> method.
            </remarks>
        </member>
        <member name="M:Teradata.Client.Provider.TdClob.Close">
            <summary>
                Closes the <c>TdClob</c> object and releases all associated resources.
            </summary>
            <exception cref="T:Teradata.Client.Provider.TdException">
                The Teradata Database returned an error, or the .NET Data Provider for Teradata 
                detected an error.
            </exception>
            <remarks>
                Closes the <c>TdClob</c> object and releases all associated Teradata Database and 
                client resources. 
            </remarks>
        </member>
        <member name="M:Teradata.Client.Provider.TdClob.Read(System.Char[],System.Int32,System.Int32)">
            <summary>
                Reads data into the application provided <paramref name="buffer"/> and advances 
                the current position of the object.
            </summary>
            <param name="buffer">Character array to read data into.</param>
            <param name="offset">
                The location within the <paramref name="buffer"/> to read data into.
            </param>
            <param name="count">
                Number of characters to read into the <paramref name="buffer"/>.
            </param>
            <returns>
                Returns the number of characters read from Teradata Database and written into 
                the <paramref name="buffer"/>. The number will be equal or less than 
                <paramref name="count"/>.
            </returns>
            <exception cref="T:System.ArgumentNullException">
                <paramref name="buffer"/> is null.
            </exception>
            <exception cref="T:System.ArgumentOutOfRangeException">
                <para>
                    <paramref name="count"/> or <paramref name="offset"/> is negative, or the sum of 
                    <paramref name="offset"/> and <paramref name="count"/> is larger than the 
                    <paramref name="buffer"/> length.
                </para>
            </exception>
            <exception cref="T:System.InvalidOperationException">
                The <c>TdClob</c> is null or <see cref="T:Teradata.Client.Provider.TdConnection"/>
                is closed.
            </exception>
            <exception cref="T:System.ObjectDisposedException">
                The <c>TdClob</c> is closed / disposed.
            </exception>
            <exception cref="T:Teradata.Client.Provider.TdException">
                The Teradata Database returned an error, or the .NET Data Provider for Teradata 
                detected an error.
            </exception>
            <remarks>
                The .NET Data Provider for Teradata reads the CLOB from Teradata Database
                and transfers the data read into the application provided <paramref name="buffer"/>.
            </remarks>         
        </member>
        <member name="M:Teradata.Client.Provider.TdClob.Read(System.Int32)">
            <summary>
                Returns a character array and advances the current position.
            </summary>
            <param name="count">Specifies the number of bytes to read from the CLOB.</param>
            <returns>
                Returns a character array having a maximum of <paramref name="count"/> characters 
                containing the data read from the CLOB field.
            </returns>
            <exception cref="T:System.InvalidOperationException">
                The <c>TdClob</c> is null, or the <see cref="T:Teradata.Client.Provider.TdConnection"/>
                is closed.
            </exception>
            <exception cref="T:System.ObjectDisposedException">
                The <c>TdClob</c> is closed / disposed.
            </exception>
            <exception cref="T:Teradata.Client.Provider.TdException">
                The Teradata Database returned an error, or the .NET Data Provider for Teradata 
                detected an error.
            </exception>
            <remarks>
                The .NET Data Provider for Teradata reads the CLOB field into a character array. 
                The character array size is equal to or less than <paramref name="count"/>. If the 
                character array size is less <paramref name="count"/>, then the end of the CLOB 
                is reached.
            </remarks>
        </member>
        <member name="P:Teradata.Client.Provider.TdClob.IsNull">
            <summary>
                Indicates the <c>TdClob</c> represents a null CLOB.
            </summary>
            <value>
                <c>true</c> if <c>TdClob</c> represents a null CLOB; otherwise <c>false</c>.
            </value>
            <exception cref="T:System.ObjectDisposedException">
                The <c>TdClob</c> is closed / disposed.
            </exception>        
        </member>
        <member name="P:Teradata.Client.Provider.TdClob.Position">
            <summary>
                Gets the character position within the TdClob object.
            </summary>
            <value>
                Returns the character position within the TdClob object.
            </value>
            <exception cref="T:System.ObjectDisposedException">
                The TdClob is closed / disposed.
            </exception>
        </member>
        <member name="P:Teradata.Client.Provider.TdClob.Length">
            <summary>
                Gets the size of the CLOB in characters.
            </summary>
            <value>
                The size of the CLOB in characters.
            </value>
            <exception cref="T:System.ObjectDisposedException">
                The TdClob is closed / disposed.
            </exception>
        </member>
        <member name="P:Teradata.Client.Provider.TdClob.IsClosed">
            <summary>
                Indicates the <c>TdClob</c> is closed.
            </summary>
            <value>
                <c>true</c> if <c>TdClob</c> is closed; <c>false</c> otherwise.
            </value>
        </member>
        <member name="P:Teradata.Client.Provider.TdClob.BaseStream">
             <summary>
                 Returns the underlying <see cref="T:Teradata.Client.Provider.TdStream"/> object.
             </summary>
             <value>
                 Specifies the underlying <see cref="T:Teradata.Client.Provider.TdStream"/> object.
             </value>
             <exception cref="T:System.ObjectDisposedException">
                 The <c>TdClob</c> is closed / disposed.
             </exception>
             <remarks>
                 The underlying <see cref="T:Teradata.Client.Provider.TdStream"/> can be used in 
                 conjunction with <see cref="T:System.IO.StreamReader"/>.
             </remarks>
             <example>
             The following example retrieves a resume from Teradata and converts the CLOB 
             into a .NET String using the specified encoding.
             
             <code>
             public void String ReadResume(String employeeId, Encoding encoding, TdConnection cn)
             {
                 String resumeStr = null;
            
                 // retrieve the resume 
                 TdClob resume = GetEmployeeResume(employeeId, cn);
            
                 if (false == resume.IsNull)
                 {
                     reader = new StreamReader(resume.BaseStream, encoding); 
             
                     resumeStr = Reader.ReadToEnd();
             
                     reader.Close(); 
                 }
             
                 // Close the TdClob to release resources
                 resume.Close();
             
                 // return the string-resume
                 return resumeStr;
             }
             </code>
             </example>
        </member>
        <member name="T:Teradata.Client.Provider.TdParameter">
             <summary>
             Represents a parameter to a SQL statement.
             </summary>
             
             
             
             <remarks>
             <para>Parameterized SQL statements accept one or more input parameters (data). 
             TdParameter represents the data value and can be associated with <see cref="T:Teradata.Client.Provider.TdCommand"/> 
             objects using <see cref="P:Teradata.Client.Provider.TdCommand.Parameters"/> property. <c>TdParameter</c> describes 
             the .NET data type and the corresponding Teradata column type. The data provider 
             converts .NET data types to Teradata data types before it is sent to Teradata Database 
             for processing. The data provider cannot derive parameter data type information from 
             Teradata when the TdCommand is prepared. Therefore, the data provider relies on information 
             provided by the <c>TdParameter</c> object or it implicitly maps the .NET data type to 
             Teradata data type. </para>
            
             <para></para>
             
             <para>Teradata Stored Procedures also support output and input-output parameters. 
             TdParameter can correctly map .NET data types to Teradata data types and back and 
             therefore fully support Input, Input-Output and Output parameters 
             to SQL statements.</para>
            
             <para></para>
             
             <para>The data provider does not support the USING CLAUSE. All SQL statements should 
             use parameter markers (Question Mark) as oppose to USING CLAUSE and parameter names 
             prefixed with the colon character.</para>
            
             <para></para>
             
             <para>It is highly recommended to use parameterized queries in order to take advantage of the 
             Teradata Statement-Cache. See the Teradata SQL manual for additional information.</para>
             
             <para></para>
             
             <para>For information on how to specify a LOB as a parameter please refer to 
             <see cref="P:Teradata.Client.Provider.TdParameter.Value"/></para>
             </remarks>
             
             <example>
             The following example inserts a row into the Order table. TdParameter objects 
             corresponding to the columns in Order table are added to the Parameters collection 
             (<see cref="T:Teradata.Client.Provider.TdParameterCollection"/>) of the <see cref="T:Teradata.Client.Provider.TdCommand"/> object before 
             it is executed using <see cref="M:Teradata.Client.Provider.TdCommand.ExecuteNonQuery"/>.
             <code>
             public void InsertOrder(TdConnection cn, String orderId, 
                                     String customerId, DateTime orderDate)
             {
                 TdCommand cmd = new TdCommand("Insert Into Order (OrderID, CustomerID, " + 
                                               "OrderDate) Values (?, ?, ?)",
                                               cn);
            
                 cmd.Parameters.Add("orderId", TdType.Char, 15);
                 cmd.Parameters.Add("customerId", TdType.Char, 10);
                 cmd.Parameters.Add("orderDate", TdType.Date);
            
                 cmd.Parameters["orderId"].Value = orderId;
                 cmd.Parameters["customerId"].Value = customerId;
                 cmd.Parameters["orderDate"].Value = orderDate;
            
                 cmd.ExecuteNonQuery();
             }
             </code>
             </example>
        </member>
        <member name="M:Teradata.Client.Provider.TdParameter.#ctor">
            <summary>
            Default Constructor. Creates a new instance of the TdParameter class.
            </summary>
            
            <remarks>
            A new instance of <c>TdParameter</c> class is initialized with the following 
            default property values.
            
            <list type="table">
            <listheader>
            <term>Property</term>   <description>Initial Value</description>
            </listheader>
            <item>
            <term>DbType</term>     <description>System.Data.DbType.String</description>
            </item>
            <item>
            <term>Direction</term>  <description>System.Data.ParameterDirection.Input</description>
            </item>
            <item>
            <term>IsNullable</term> <description>false</description>
            </item>
            <item>
            <term>Offset</term>     <description>Zero (0)</description>
            </item>
            <item>
            <term>ParameterName</term>  <description>empty string</description>
            </item>
            <item>
            <term>Precision</term>  <description>0 (will be inferred if not specified by the application)</description>
            </item>
            <item>
            <term>Scale</term>      <description>0 (will be inferred if not specified by the application)</description>
            </item>
            <item>
            <term>Size</term>       <description>0 (will be inferred if not specified by the application)</description>
            </item>
            <item>
            <term>SourceColumn</term>   <description>empty string</description>
            </item>
            <item>
            <term>SourceVersion</term>  <description>System.Data.DataRowVersion.Current</description>
            </item>
            <item>
            <term>TdType</term>     <description>TdType.VarChar</description>
            </item>
            <item>
            <term>Value</term>      <description>Null</description>
            </item>
            </list>
            </remarks>
        </member>
        <member name="M:Teradata.Client.Provider.TdParameter.#ctor(System.String,System.Object)">
            <summary>
            Creates a new instance of the TdParameter class.
            </summary>
            
            <param name="name">Specifies the name of the parameter.</param>
            <param name="value">Specifies the value of the parameter.</param>
            
            <remarks>
            A new instance of <c>TdParameter</c> class is initialized with the 
            following default property values.
            
            <list type="table">
            <listheader>
            <term>Property</term>   <description>Initial Value</description>
            </listheader>
            <item>
            <term>DbType</term>     <description>System.Data.DbType.String</description>
            </item>
            <item>
            <term>Direction</term>  <description>System.Data.ParameterDirection.Input</description>
            </item>
            <item>
            <term>IsNullable</term> <description>false</description>
            </item>
            <item>
            <term>Offset</term>     <description>Zero (0)</description>
            </item>
            <item>
            <term>ParameterName</term>  <description><c>name</c> parameter</description>
            </item>
            <item>
            <term>Precision</term>  <description>0 (will be inferred if not specified by the application)</description>
            </item>
            <item>
            <term>Scale</term>      <description>0 (will be inferred if not specified by the application)</description>
            </item>
            <item>
            <term>Size</term>       <description>0 (will be inferred if not specified by the application)</description>
            </item>
            <item>
            <term>SourceColumn</term>   <description>empty string</description>
            </item>
            <item>
            <term>SourceVersion</term>  <description>System.Data.DataRowVersion.Current</description>
            </item>
            <item>
            <term>TdType</term>     <description>TdType.VarChar</description>
            </item>
            <item>
            <term>Value</term>      <description><c>value</c> parameter</description>
            </item>
            </list>
            </remarks>
        </member>
        <member name="M:Teradata.Client.Provider.TdParameter.#ctor(System.String,Teradata.Client.Provider.TdType)">
            <summary>
            Creates a new instance of the TdParameter class.
            </summary>
            
            <param name="name">Specifies the name of the parameter.</param>
            <param name="dataType">Specifies the parameter data type. One of the TdType enumerated values.</param>
            
            <remarks>
            A new instance of <c>TdParameter</c> class is initialized with the following 
            default property values.
            
            <list type="table">
            <listheader>
            <term>Property</term>   <description>Initial Value</description>
            </listheader>
            <item>
            <term>DbType</term>     <description>System.Data.DbType corresponding to <c>dataType</c>.</description>
            </item>
            <item>
            <term>Direction</term>  <description>System.Data.ParameterDirection.Input</description>
            </item>
            <item>
            <term>IsNullable</term> <description>false</description>
            </item>
            <item>
            <term>Offset</term>     <description>Zero (0)</description>
            </item>
            <item>
            <term>ParameterName</term>  <description><c>name</c> parameter</description>
            </item>
            <item>
            <term>Precision</term>  <description>0 (will be inferred if not specified by the application)</description>
            </item>
            <item>
            <term>Scale</term>      <description>0 (will be inferred if not specified by the application)</description>
            </item>
            <item>
            <term>Size</term>       <description>0 (will be inferred if not specified by the application)</description>
            </item>
            <item>
            <term>SourceColumn</term>   <description>empty string</description>
            </item>
            <item>
            <term>SourceVersion</term>  <description>System.Data.DataRowVersion.Current</description>
            </item>
            <item>
            <term>TdType</term>     <description><c>dataType</c> parameter</description>
            </item>
            <item>
            <term>Value</term>      <description>Null</description>
            </item>
            </list>
            </remarks>
        </member>
        <member name="M:Teradata.Client.Provider.TdParameter.#ctor(System.String,Teradata.Client.Provider.TdType,System.Int32)">
             <summary>
             Creates a new instance of the TdParameter class.
             </summary>
             
             <param name="name">Specifies the name of the parameter.</param>
             <param name="dataType">Specifies the data type of the parameter. One of the TdType enumerated values.</param>
             <param name="size">Specifies the size of the parameter.</param>
             
             <remarks>
             A new instance of the <c>TdParameter</c> class is initialized with the following 
             default property values:
            
             <list type="table">
             <listheader>
             <term>Property</term>   <description>Initial Value</description>
             </listheader>
             <item>
             <term>DbType</term>     <description>System.Data.DbType corresponding to <c>dataType</c>.</description>
             </item>
             <item>
             <term>Direction</term>  <description>System.Data.ParameterDirection.Input</description>
             </item>
             <item>
             <term>IsNullable</term> <description>false</description>
             </item>
             <item>
             <term>Offset</term>     <description>Zero (0)</description>
             </item>
             <item>
             <term>ParameterName</term>  <description><c>name</c> parameter</description>
             </item>
             <item>
             <term>Precision</term>  <description>0 (will be inferred if not specified by the application)</description>
             </item>
             <item>
             <term>Scale</term>      <description>0 (will be inferred if not specified by the application)</description>
             </item>
             <item>
             <term>Size</term>       <description>0 (will be inferred if not specified by the application)</description>
             </item>
             <item>
             <term>SourceColumn</term>   <description>empty string</description>
             </item>
             <item>
             <term>SourceVersion</term>  <description>System.Data.DataRowVersion.Current</description>
             </item>
             <item>
             <term>TdType</term>     <description><c>dataType</c> name</description>
             </item>
             <item>
             <term>Value</term>      <description>Null</description>
             </item>
             </list>
            </remarks>
        </member>
        <member name="M:Teradata.Client.Provider.TdParameter.#ctor(System.String,Teradata.Client.Provider.TdType,System.Int32,System.String)">
             <summary>
             Creates a new instance of the TdParameter class.
             </summary>
             
             <param name="name">Specifies the name of the parameter.</param>
             <param name="dataType">Specifies the data type of the parameter. One of the TdType enumerated values.</param>
             <param name="size">Specifies the size of the parameter.</param>
             <param name="columnName">Specifies the name of the source column.</param>
             
             <remarks>
             A new instance of the <c>TdParameter</c> class is initialized with the following 
             default property values:
             
             <list type="table">
             <listheader>
             <term>Property</term>   <description>Initial Value</description>
             </listheader>
             <item>
             <term>DbType</term>     <description>System.Data.DbType corresponding to the <c>dataType</c> parameter.</description>
             </item>
             <item>
             <term>Direction</term>  <description>System.Data.ParameterDirection.Input</description>
             </item>
             <item>
             <term>IsNullable</term> <description>false</description>
             </item>
             <item>
             <term>Offset</term>     <description>Zero (0)</description>
             </item>
             <item>
             <term>ParameterName</term>  <description><c>name</c> parameter</description>
             </item>
             <item>
             <term>Precision</term>  <description>0 (will be inferred if not specified by the application)</description>
             </item>
             <item>
             <term>Scale</term>      <description>0 (will be inferred if not specified by the application)</description>
             </item>
             <item>
             <term>Size</term>       <description><c>size</c> parameter</description>
             </item>
             <item>
             <term>SourceColumn</term>   <description><c>columnName</c> parameter</description>
             </item>
             <item>
             <term>SourceVersion</term>  <description>System.Data.DataRowVersion.Current</description>
             </item>
             <item>
             <term>TdType</term>     <description><c>dataType</c> parameter</description>
             </item>
             <item>
             <term>Value</term>      <description>Null</description>
             </item>
             </list>
            </remarks>
        </member>
        <member name="M:Teradata.Client.Provider.TdParameter.#ctor(System.String,Teradata.Client.Provider.TdType,System.Int32,System.Data.ParameterDirection,System.Boolean,System.Byte,System.Byte,System.String,System.Data.DataRowVersion,System.Object)">
            <summary>
            Creates a new instance of the TdParameter class.
            </summary>
            
            <param name="name">Specifies the name of the parameter.</param>
            <param name="dataType">Specifies the data type of the parameter. One of the TdType 
            enumerated values.</param>
            <param name="size">Specifies the size of the parameter.</param>
            <param name="direction">Indicates the direction of data (parameter) flow. One of 
            the System.Data.ParameterDirection enumerated values.</param>
            <param name="isNullable">Indicates whether the parameter can be null.</param>
            <param name="precision">Specifies the maximum number of digits.</param>
            <param name="scale">Specifies the maximum number of digits to the right of 
            decimal point.</param>
            <param name="columnName">Specifies the name of the source column.</param>
            <param name="sourceVersion">Specifies the version of the source row. One of the 
            System.Data.DataRowVersion values.</param>
            <param name="value">The value of the parameter.</param>
            
            <remarks>
            A new instance of the <c>TdParameter</c> class is initialized with the 
            following default property values:
            
            <list type="table">
            <listheader>
            <term>Property</term>   <description>Initial Value</description>
            </listheader>
            <item>
            <term>DbType</term>     <description>System.Data.DbType corresponding to the <c>dataType</c> parameter.</description>
            </item>
            <item>
            <term>Direction</term>  <description>System.Data.ParameterDirection.Input</description>
            </item>
            <item>
            <term>IsNullable</term> <description><c>isNullable</c> parameter</description>
            </item>
            <item>
            <term>Offset</term>     <description>Zero (0)</description>
            </item>
            <item>
            <term>ParameterName</term>  <description><c>name</c> parameter</description>
            </item>
            <item>
            <term>Precision</term>  <description><c>precision</c> parameter</description>
            </item>
            <item>
            <term>Scale</term>      <description><c>scale</c> parameter</description>
            </item>
            <item>
            <term>Size</term>       <description><c>size</c> parameter</description>
            </item>
            <item>
            <term>SourceColumn</term>   <description>empty string</description>
            </item>
            <item>
            <term>SourceVersion</term>  <description><c>sourceVersion</c> parameter</description>
            </item>
            <item>
            <term>TdType</term>     <description><c>dataType</c> parameter</description>
            </item>
            <item>
            <term>Value</term>      <description><c>value</c> parameter</description>
            </item>
            </list>
            </remarks>
        </member>
        <member name="M:Teradata.Client.Provider.TdParameter.ResetDbType">
            <summary>
            Resets the DbType to the default value.
            </summary>
        </member>
        <member name="M:Teradata.Client.Provider.TdParameter.ToString">
            <summary>
            Returns a string that contains the <see cref="P:Teradata.Client.Provider.TdParameter.ParameterName"/>.
            </summary>
            <returns>A string that contains the <c>ParameterName</c> or "TdParameter" if <c>ParameterName</c> is null.</returns>
        </member>
        <member name="P:Teradata.Client.Provider.TdParameter.DbType">
            <summary>
            Gets or sets the generic (ADO.NET) data type of the parameter.
            </summary>
            
            <value>
            One of the <c>System.Data.DbType</c> enumeration values. The default is String. 
            </value>
            
            <exception cref="T:System.ArgumentOutOfRangeException">Argument is not a valid DbType.</exception>
            
            <remarks>
            <c>System.Data.DbType</c> is a generic data type enumeration.  In this 
            context it specifies the parameter type of the target column or arguments 
            to a stored procedure.  It is recommended that you use the <see cref="P:Teradata.Client.Provider.TdParameter.TdType"/> property 
            to specify the parameter data type. The data provider automatically changes 
            the TdParameter.DbType property when the <see cref="P:Teradata.Client.Provider.TdParameter.TdType"/> property is set.  
            </remarks>
        </member>
        <member name="P:Teradata.Client.Provider.TdParameter.Direction">
            <summary>
            Gets and sets the parameter direction.
            It indicates whether the parameter is passed to the Teradata Database as input, 
            returned from the Teradata Database as output, or sent to and returned from the 
            Teradata Database as input and output.
            </summary>
            
            <value>
            One of the <c>System.Data.ParameterDirection</c> enumeration values.  The default is <c>Input</c>"/&gt; 
            </value>
            
            <exception cref="T:System.ArgumentOutOfRangeException">Argument is not a valid <c>ParameterDirection</c></exception>
            
            <remarks>
            <c>ParameterDirection.InputOutput</c> and <c>ParameterDirection.Output</c> apply 
            only to Teradata stored proceduers. Output parameters reflect the stored 
            procedure results after the specific result set(s) is processed. For 
            example, the output parameters to a stored procedure represented as the 
            third statement in a multi-statement request are not available while 
            application is processing the first and the second result set. In this 
            case the output parameters are available after the second call to 
            TdDataReader.NextResult. If <see cref="M:Teradata.Client.Provider.TdCommand.ExecuteNonQuery"/> executes
            the command, then the data provider processes all result sets and populates 
            the output parameters.
            </remarks>
        </member>
        <member name="P:Teradata.Client.Provider.TdParameter.IsNullable">
            <summary>
            Indicates whether the Value property can be set to DbNull.
            </summary>
            
            <value>
            <c>true</c> if TdParameter.Value can be set to DbNull and <c>false</c> otherwise.  The default value is <c>false</c>
            </value>
            
            <remarks>
            <para>Every parameter sent to Teradata has a specific data type, for example 
            INTEGER. <c>IsNullable</c> property is used as a Teradata data_type_attribute, 
            for example INTEGER NOT NULL. </para>
            
            <para></para>
            
            <para>IsNullable attribute has no impact on the <c>Value</c> property. That is 
            <see cref="P:Teradata.Client.Provider.TdParameter.Value"/> can always be set to <c>System.DbNull.Value</c> 
            by the application or the Data Provider (output parameter).</para>
            </remarks>
        </member>
        <member name="P:Teradata.Client.Provider.TdParameter.ParameterName">
             <summary>
             Gets or sets the name of the TdParameter object.
             </summary>
             
             <value>
             The name of the TdParameter object. The default is an empty string.
             </value>
             
             <remarks>
             <para><see cref="T:Teradata.Client.Provider.TdParameterCollection"/> class uses the 
             <see cref="P:Teradata.Client.Provider.TdParameter.ParameterName"/> as an indexer. Furthermore, 
             <c>ParameterName</c> is used in Teradata Stored Procedure 
             CALL statement generation. The data provider generates a CALL SQL statement 
             when the <see cref="P:Teradata.Client.Provider.TdCommand.CommandType"/> is set to StoredProcedure. The 
             CALL statement requires output parameter names. For additional information 
             see Teradata Manipulation Statements manual. </para>
            
             <para></para>
             
             <para>The Teradata Database does not support named parameters. Therefore, the 
             position of parameters within the TdParameterCollection dictates the order in 
             which parameters are sent to Teradata.</para>
             </remarks>
        </member>
        <member name="P:Teradata.Client.Provider.TdParameter.SourceColumn">
            <summary>
            Maps a DataTable column to and from the TdParameter object.
            </summary>
            
            <value>
            Contains the name of the source column in a <see cref="T:System.Data.DataTable"/>.
            </value>
            
            <remarks>
            This is the link between the <see cref="P:Teradata.Client.Provider.TdParameter.Value"/> and a 
            <see cref="T:System.Data.DataTable"/>. For input parameters, Data is moved from the 
            <see cref="T:System.Data.DataTable"/> to the parameter before the command is executed. 
            For output parameters, data is moved /// from the parameter to the 
            <see cref="T:System.Data.DataTable"/>. See the <see cref="M:System.Data.Common.DataAdapter.Update(System.Data.DataSet)"/> method for 
            additional information on how to resolve changes to a DataSet back to 
            Teradata tables.
            </remarks>
        </member>
        <member name="P:Teradata.Client.Provider.TdParameter.SourceVersion">
             <summary>
             Gets or sets the DataRowVersion to use when loading a DataTable 
             column into the TdParameter object.
             </summary>
             
             <value>
             One of the <c>System.Data.DataRowVersion</c> enumeration values.  The default is <c>Current</c>.
             </value>
             
             <exception cref="T:System.ArgumentOutOfRangeException">Argument is not a valid <c>DataRowVersion</c>.</exception>
             
             <remarks>
             The <c>TdDataAdapter.Update</c> method uses this value to determine the corresponding 
             DataRow column value to be assigned to the <see cref="P:Teradata.Client.Provider.TdParameter.Value"/> property. Usually 
             the parameters passed to the WHERE clause of the SQL statement assigned to 
             the <see cref="P:Teradata.Client.Provider.TdDataAdapter.UpdateCommand"/> property carry the Original values. Original values 
             are used to identify the row. 
             </remarks>
             
             <example>
             The following example creates a <see cref="T:Teradata.Client.Provider.TdCommand"/> which is used as a
             <c>TdDataAdapter.UpdateCommand</c> property. The first parameter is set 
             to Current while the second parameter is set to Original. In this case, CustomerID 
             uniquely identifies the row.
             
             <code>
             public TdCommand GetUpdateCommand()
             {
                 TdCommand cmd = new TdCommand();
                 cmd.CommandText = "UPDATE Customer SET Status = ? WHERE CustomerID = ?";
            
                 TdParameter status = new TdParameter("STATUS", TdType.Char, 1);
                 status.SourceColumn = "STATUS";
                 status.SourceVersion = SourceVersion.Current;
                 cmd.Add(status);
            
                 TdParameter customerId = new TdParameter("CUSTOMERID", TdType.Char, 10);
                 customerId.SourceColumn = "CUSTOMERID";
                 customerId.SourceVersion = SourceVersion.Original;
                 cmd.Add(customerId);
            
                 return cmd;
             } 
             </code>
             </example>
        </member>
        <member name="P:Teradata.Client.Provider.TdParameter.Value">
             <summary>
             Gets or sets the value of the TdParameter object.
             </summary>
             
             <value>
             Specifies an object reference.  The default value is null.
             </value>
             
             <remarks>
             <para>For input parameters, the <c>Value</c> property is converted into the 
             <c>TdType</c> before data is transmitted to the Teradata Database. </para>
            
             <para></para>
             
             <para>The Teradata type is inferred from the Value property if <c>TdType</c> is not 
             specified by the application. .NET primitive data types are mapped and converted 
             to Teradata data types; for example <c>System.Int32</c> data type is mapped to Teradata 
             INTEGER data type by default. For additional information see Converting Data 
             from .NET to Teradata Data Types. </para>
             
             <para></para>
             
             <para>The data provider uses the <c>IConvertible</c> interface for all non-primitive 
             types assigned to the Value property. The data provider first casts the <c>Value</c> 
             property to <c>IConvertible</c> and then invokes a method corresponding to the 
             Teradata data type (for example: <c>IConvertible.ToInt32</c>). The invariant 
             culture (<c>System.Globalization.CultureInfo.InvariantCulture</c>) 
             is used for data type conversions. </para>
             
             <para></para>
             
             <para>To assign a <c>null</c> value (Teradata Database NULL as oppose to null object 
             reference) to a parameter, set the <c>Value</c> property to the <c>System.DBNull.Value</c> 
             property. A <c>null</c> object reference is not the same as <c>System.DBNull</c>. The 
             data provider does not support null object references. Therefore a <see cref="T:Teradata.Client.Provider.TdCommand"/> 
             execution results in an exception if one of the associated <see cref="P:Teradata.Client.Provider.TdParameter.Value"/> 
             properties is set to a null object reference. </para>
            
             <para></para>
             
             <para>The <c>Value</c> property is overwritten if <c>Direction</c> property is set to 
             InputOutput or Output. <c>TdType</c>, <c>Precision</c>, <c>Scale</c> and <c>Size</c> 
             properties are updated to reflect the returned parameter value.</para>
             
             <para></para>
             
             <para>When a BLOB/CLOB is specified as an Input parameter, the Value property must be set to
             an object that the provider can use to read the data of the LOB.  The provider can read the 
             data of a BLOB using one of the following objects:</para>
             
             <para></para>
             
             <list type="table">
             <listheader>
             <term>Object Type</term>
             <description>Comments</description>
             </listheader>
             <item>
             <term>System.IO.Stream</term>
             <description>Any object that derives from Stream can be used.</description>
             </item>
             <item>
             <term>System.Byte[]</term>
             <description> </description>
             </item>
             </list>
             
             <para></para>
              
             <para>When the input parameter is a CLOB, the provider can read the data when one
             of the following type of objects are used:</para>
             
             <para></para>
             
             <list type="table">
             <listheader>
             <term>Object Type</term>
             <description>Comments</description>
             </listheader>
             <item>
             <term>System.IO.TextReader</term>
             <description>Any object that derives from TextReader can be used.</description>
             </item>
             <item>
             <term>System.String</term>
             <description> </description>
             </item>
             <item>
             <term>System.Char[]</term>
             <description> </description>
             </item>
             </list>
             
             <para></para>
             
             <para>When a LOB has been specified as an output parameter, a <see cref="T:Teradata.Client.Provider.TdBlob"/>, 
             <see cref="T:Teradata.Client.Provider.TdClob"/> or <see cref="T:Teradata.Client.Provider.TdXml"/> will be returned depending upon whether the TdType 
             has been set to TdType.Blob, TdType.Clob/Json or TdType.Xml respectively.</para>
             </remarks>
             
             <example>
             The following is an example of how to specify that the provider is to read the data of a
             BLOB using a System.IO.FileStream object:
             <code>
                 System.IO.FileStream fs = new FileStream("picture.jpg", FileMode.Open, FileAccess.Read);
                 System.IO.FileInfo fi = new FileInfo("picture.jpg");
                 command.Parameters.Add(null, TdType.Blob, fi.Length);
                 command.Parameters[0].Value = fs;
             </code>
             
             This next example accesses a Clob that has been returned in an InputOutput parameter:
             <code>
                 System.IO.StreamReader sr = new StreamReader("textfile.txt");
                 System.IO.FileInfo fs = new FileInfo("textfile.txt");
             
                 //Going to setup the paramter 
                 command.Parameters.Add(null, TdType.Clob, fs.Length);
                 command.Parameters[0].Direction = ParameterDirection.InputOutput;
                 command.Parameters[0].Value = sr;
             
                 //executes a stored procedure that only contains 1 parameter
                 command.ExecuteNonQuery();
             
                 //going to access the CLOB that was returned from the stored procedure
                 TdClob clob1 = (TdClob)command.Parameter[0].Value;
                 clob1.Read(charBuffer, 0, 25);
                 
                 //Process buffer...
            
                 //need to close the CLOB object
                 clob1.Close();
             
                 //need to close command when done
                 command.Dispose();
             </code>
            </example>
        </member>
        <member name="P:Teradata.Client.Provider.TdParameter.SourceColumnNullMapping">
            <summary>
            Indicates whether the source column is nullable.
            </summary>
        </member>
        <member name="P:Teradata.Client.Provider.TdParameter.Precision">
            <summary>
                Gets and sets the precision of numeric, datetime and interval data types.
            </summary>
            <remarks>
            	<para>
                    The table below defines <see cref="P:Teradata.Client.Provider.TdParameter.Precision"/> for each data type:
                </para>
            	<para>
            		<table class="xmldoctable" cellspacing="0">
            			<tbody>
            				<tr>
            					<th>Data Type</th>
            					<th>Definition</th>
            					<th>Includes decimal point in precision?</th>
            				</tr>
            				<tr>
            					<td class="xmldoctable">Numeric</td>
            					<td class="xmldoctable">
            						<para>Precision is the number of digits before and after the
                                    decimal point.</para>
            					</td>
            					<td>No</td>
            				</tr>
            				<tr>
            					<td class="xmldoctable">Date and Time</td>
            					<td class="xmldoctable">
            						<para>
                                        Precision is total number of characters which defines a
                                        Date Time data type. For example a <see cref="T:Teradata.Client.Provider.TdTimestamp"/> 
                                        value of '1999-05-05 09:20:30.5' will contain a precision
                                        of 21.
                                    </para>
            					</td>
            					<td>Yes</td>
            				</tr>
            				<tr>
            					<td class="xmldoctable">Interval</td>
            					<td class="xmldoctable">
            						<para>
                                        Precision is defined as the number of digits within the
                                        significant field. For example a <see cref="T:Teradata.Client.Provider.TdIntervalDayToSecond"/> 
                                        value of '923 12:20:30.5' will contain a precision of 3,
                                        the number of digits contained within the day field.
                                    </para>
            					</td>
            					<td>No</td>
            				</tr>
            			</tbody>
            		</table>
            	</para>
            </remarks>
        </member>
        <member name="P:Teradata.Client.Provider.TdParameter.Scale">
            <summary>
               Indicates the scale of numeric, date time and interval data types.
            </summary>
        </member>
        <member name="P:Teradata.Client.Provider.TdParameter.Size">
             <summary>
             Gets or sets the maximum size for the transmitted data
             </summary>
             
             <remarks>
             <para>The <c>Size</c> property represents the number of bytes for nonstring data types and
             ANSI string data.  For Unicode strings, the size is used to indicate the number
             of characters.</para>
            
             <para>The <strong>Size</strong> property will have a different meaning when the
             <see cref="P:Teradata.Client.Provider.TdParameter.DbType"/> property is set to <c>DbType.AnsiString</c> or 
             <c>DbType.String</c>.  When the the DbType property is set to <c>AnsiString</c> 
             the <strong>Size</strong> represents the number of bytes of the string.  In the
             case where the <strong>DbType</strong> is <c>String</c>, the <strong>Size</strong>
             represents the number of characters contained in the string.</para>
             
             <para>When creating a parameter for character array or string, the application programmer
             must be cognizant of what the Session Character Set is being used when logging into the
             Teradata database.  In this situation it is important to understand when 
             to specify the number of bytes or number of characters  
             when using the Teradata data provider. </para>
             
             <para>For example, if a column in a table is defined with
             the server character sets Kanjisjis or Kanji1, any parameters that will refer to these
             columns must have the <strong>DbType</strong> property set to <c>DbType.AnsiString</c>.  
             The value of <c>Size</c> must represent the number of bytes of the string to be sent 
             to Teradata</para>
             
             <para>The following are descriptions of additional scenarios and their expected
             behavior:</para>
             
             <para><strong>SCENARIO 1</strong></para>
             <para><em>Scenario:</em>  A table that contains
             a column defined as <c>VARCHAR(20) CHARACTER SET KANJISJIS</c>.  The size 
             of this column is defined in terms of bytes (please refer to the "SQL
             Reference: Data Types and Literals" for more information).  The Session 
             Character Set has been set to UTF16 and the character array contains
             only ASCII data.  </para>
             
             <para><em>Expected Behavior:</em>  Each character in the array will take two 
             bytes of space after being encoded using UTF16. If the Size has been set to 4, only two 
             characters of the array will be sent to Teradata.  </para>
             
             <para><strong>SCENARIO 2</strong></para>
             <para><em>Scenario:</em>  This applies when connected to a Teradata Database
             12.0 or earlier.  A stored procedure contains a parameter 
             declared as <c>VARCHAR(20) CHARACTER SET LATIN</c>, and the session character
             set has been set to UTF8.  The session mode is ANSI.  In the application, the
             <strong>DbType</strong> is set to <strong>DbType.String</strong>
             and the character array contains ASCII characters.  The <strong>Size</strong>
             has been set to 11.  </para>
             
             <para><em>Expected Behavior:</em>  The data that will be passed to 
             Teradata will contain 22 bytes (two bytes for each ASCII character after being
             encoded using UTF8).  The Teradata database will 
             return an error indicating the string will be truncated.  </para>
             </remarks>
        </member>
        <member name="P:Teradata.Client.Provider.TdParameter.Offset">
            <summary>
            Gets or sets the index within the Value property where the 
            read / write operation is to begin. Usually used with BLOB and or CLOB.
            </summary>
            
            <value>
            Offset into the <c>Value</c> property.  The default is 0.
            </value>
            
            <remarks>
            Offset is the index into the Value property where the read (input parameter) 
            and write (output parameter) operation is to begin. It is ignored if the 
            <c>Value</c> property is of a fixed length and not an array. For example 
            <c>Offset</c> indicates the starting element within <c>Byte[]</c> type.
            </remarks>
        </member>
        <member name="P:Teradata.Client.Provider.TdParameter.TdType">
            <summary>
            Gets or sets the TdType (Teradata type) of the parameter.
            </summary>
            
            <value>
            One of the <c>TdType</c> enumeration values. The default is <c>Char</c>.
            </value>
            
            <exception cref="T:System.ArgumentOutOfRangeException">Argument is not a valid <c>TdType</c>.</exception>
            <remarks>
            <para><c>TdType</c> property specifies the data type of the target column or arguments 
            to a stored procedure.  It is strongly recommended that you use the 
            <see cref="P:Teradata.Client.Provider.TdParameter.TdType"/> property to specify the parameter data type. The data provider 
            automatically changes the <see cref="P:Teradata.Client.Provider.TdParameter.DbType"/> property when you set 
            the <c>TdParameter.TdType</c> property. The <see cref="P:Teradata.Client.Provider.TdParameter.Value"/> property 
            is converted into the <c>TdType</c> before data is transmitted 
            to the Teradata Database. </para>
            </remarks>
        </member>
        <member name="P:Teradata.Client.Provider.TdParameter.ProviderSpecificValue">
             <summary>
             Gets or sets the value of the TdParameter object.
             </summary>
             <value>
             Specifies an object reference.  The default value is null.
             </value>
             <remarks>
             	<para>
                     Returns .NET Data Provider for Teradata specific data types like
                     <see cref="T:Teradata.Client.Provider.TdDecimal"/>, <see cref="T:Teradata.Client.Provider.TdBlob"/> and
                     <see cref="T:Teradata.Client.Provider.TdClob"/>. It returns Framework Class Library (FCL) types when
                     there is no corresponding provider specific type. For example it returns
                     <see cref="T:System.Int32"/> for Teradata Integer data type.
                 </para>
             	<para>
                     .NET Data Provider for Teradata data types implement
                     <see cref="T:System.Data.SqlTypes.INullable"/> interface. <see cref="P:System.Data.SqlTypes.INullable.IsNull"/>
                     property must be used to check for <c>null</c>. FCL types do not support
                     <c>INullable</c>, therefore <c>null</c> is represented by
                     <see cref="F:System.DBNull.Value"/>.
                 </para>
             
                 <para>
                     Some of the provider specific types supported by the provider have a 
                     corresponding "Enable" Connection String Attribute.  The
                     setting of this attribute will affect the behavior of this property.
                     Refer to the <a href="EnableProviderSpecificTypes.htm">Enabling Provider Specific Types</a>
                     section of the Developers Guide for further information.
                 </para>
             </remarks>
             <example>
             This example accesses a TdDecimal that has been returned in an Output parameter.
             <code>
                 // Setup the paramters 
                 command.Parameters.Add("RegionId", TdType.Integer);
                 command.Parameters["RegionId"].Direction = ParameterDirection.Input;
                 command.Parameters["RegionId"].Value = 120;
             
                 command.Parameters.Add("TotalSales", TdType.Decimal);
                 command.Parameters["TotalSales"].Direction = ParameterDirection.Output;
             
                 // Executes a stored procedure to retrieve Total Sales for Region 120
                 command.ExecuteNonQuery();
             
                 // Access the TdDecimal that was returned from the stored procedure
                 TdDecimal totalSales = (TdDecimal) command.Parameter["TotalSales"].ProviderSpecificValue;
                 
                 // Dispose command when done
                 command.Dispose();
             </code>
            </example>
        </member>
        <member name="P:Teradata.Client.Provider.TdParameter.SecondaryTdType">
            <summary>
                Gets or sets the TdType, when the TdType value is defined as a TdType.Array or a 
                TdType.AnyType.
            </summary>
            <remarks>
                <para>
                    This property introduced by Teradata Database 14.0, defines the TdType when the
                    actual TdType property is either TdType.Array or TdType.AnyType. TdArray will 
                    contain TdType elements of this property and TdType.AnyType is an indicator that
                    the actual TdType will be defined at execution time by this property.
                </para>
                <para>
                    This property for TD_ANYTYPE OUT parameters generates a RESULT clause to define
                    the OUT parameter type to the database in generation of the CALL statement for
                    stored procedures.
                </para>
            </remarks>
        </member>
        <member name="P:Teradata.Client.Provider.TdParameter.OutValue">
            <summary>
            Used when data for an out/inout parameter is retrieved from Teradata.  It
            set the _returnBuffer to the data that is returned. 
            </summary>
        </member>
        <member name="P:Teradata.Client.Provider.TdParameter.Parent">
            <summary>
            Points back to the collection which this
            instance is a member of. 
            </summary>
        </member>
        <member name="T:Teradata.Client.Provider.TdParameterCollection">
             <summary>
             Represents a collection of <see cref="T:Teradata.Client.Provider.TdParameter"/> objects associated with a 
             <see cref="T:Teradata.Client.Provider.TdCommand"/> object.
             </summary>
             
             
             
             <remarks>
             <para>Parameterized SQL statements accept one or more input parameters 
             (<see cref="T:Teradata.Client.Provider.TdParameter"/>).  <see cref="T:Teradata.Client.Provider.TdParameter"/> represents the data value and can 
             be associated with <see cref="T:Teradata.Client.Provider.TdCommand"/> objects using <see cref="P:Teradata.Client.Provider.TdCommand.Parameters"/>
             property. <see cref="P:Teradata.Client.Provider.TdCommand.Parameters"/> 
             is an instance of TdParameterCollection and holds all input, inputoutput and 
             output parameters.</para>
            
             <para></para>
             
             <para>It is highly recommended that parameterized queries be used in order to take 
             advantage of the Teradata Statement-Cache. See the Teradata SQL 
             manual for additional information.</para>
             </remarks>
             
             <example>
             The following example inserts a row into the Order table. <see cref="T:Teradata.Client.Provider.TdParameter"/> 
             objects corresponding to the columns in Order table are added the 
             Parameters collection (TdParameterCollection) of the <see cref="T:Teradata.Client.Provider.TdCommand"/> object 
             before it is executed using <see cref="M:Teradata.Client.Provider.TdCommand.ExecuteNonQuery"/>.
             
             <code>
             public void InsertOrder(TdConnection cn, String orderId, 
                                     String customerId, DateTime orderDate)
             {
                 TdCommand cmd = new TdCommand("Insert Into Order (OrderID, CustomerID, " + 
                                               "OrderDate) Values (?, ?, ?)",
                                                cn);
            
                 cmd.Parameters.Add("orderId", TdType.Char, 15);
                 cmd.Parameters.Add("customerId", TdType.Char, 10);
                 cmd.Parameters.Add("orderDate", TdType.Date);
            
                 cmd.Parameters["orderId"].Value = orderId;
                 cmd.Parameters["customerId"].Value = customerId;
                 cmd.Parameters["orderDate"].Value = orderDate;
            
                 cmd.ExecuteNonQuery();
             }
             </code>
             </example>
        </member>
        <member name="M:Teradata.Client.Provider.TdParameterCollection.Contains(System.String)">
            <summary>
            Determines whether a <see cref="T:Teradata.Client.Provider.TdParameter"/> object with the specified 
            parameter name exists in the <c>TdParameterCollection</c>.
            </summary>
            
            <param name="parameterName">Specifies the parameter name</param>
            <returns>Returns <c>true</c> if a TdParameter object with the specified parameterName 
            is found in the <c>TdParameterCollection</c>; otherwise <c>false</c>.
            </returns>
            
            <seealso cref="T:Teradata.Client.Provider.TdParameter"/>
        </member>
        <member name="M:Teradata.Client.Provider.TdParameterCollection.IndexOf(System.String)">
            <summary>
            Returns the position of a TdParameter with the specified parameter 
            name in the TdParameterCollection.
            </summary>
            
            <param name="parameterName">Specifies the parameter name.</param>
            
            <returns>Returns the zero-based position of the TdParameter object in 
            the collection; otherwise -1.
            </returns>
            
            <seealso cref="T:Teradata.Client.Provider.TdParameter"/>
        </member>
        <member name="M:Teradata.Client.Provider.TdParameterCollection.RemoveAt(System.String)">
            <summary>
            Removes the specified TdParameter from the collection.
            </summary>
            
            <param name="parameterName">Specifies the name of the parameter to be removed.</param>
            
            <exception cref="T:System.ArgumentException">Cannot find a <see cref="T:Teradata.Client.Provider.TdParameter"/> with the specified name.</exception>
            
            <seealso cref="T:Teradata.Client.Provider.TdParameter"/>
        </member>
        <member name="M:Teradata.Client.Provider.TdParameterCollection.CopyTo(System.Array,System.Int32)">
            <summary>
            Copies the elements of TdParameterCollection to the specified array.
            </summary>
            
            <param name="array">The target one-dimensional array.</param>
            <param name="index">The zero-based index in the array where copying begins.</param>
            
            <exception cref="T:System.ArgumentException">Can be thrown by one of the following errors:  1)<paramref name="array"/> 
            is not one-dimensional, 2)<paramref name="index"/> is equal to or greater than the length of the array, or 
            3)the number of elements in the <c>TdParameterCollection</c> is greater than the available space from 
            <paramref name="index"/> to the end of the destination array.</exception>
            <exception cref="T:System.ArgumentNullException"><paramref name="array"/> is null</exception>
            <exception cref="T:System.ArgumentOutOfRangeException"><paramref name="index"/> is less than zero.</exception>
            <exception cref="T:System.InvalidCastException">The value parameter is not of type <see cref="T:Teradata.Client.Provider.TdParameter"/>.</exception>
            
            <remarks>
            This is a shallow copy. The array elements will point to the
            same object (<see cref="T:Teradata.Client.Provider.TdParameter"/> objects in <c>TdParameterCollection</c>).
            </remarks>
            
            <seealso cref="T:Teradata.Client.Provider.TdParameter"/>
        </member>
        <member name="M:Teradata.Client.Provider.TdParameterCollection.GetEnumerator">
            <summary>
            Returns an enumerator that can iterate through the <c>TdParameterCollection</c>.
            </summary>
            
            <value>
            Returns an enumerator that can iterate through the TdParameterCollection.
            </value>
            
            <seealso cref="T:Teradata.Client.Provider.TdParameter"/>
        </member>
        <member name="M:Teradata.Client.Provider.TdParameterCollection.Add(System.Object)">
            <summary>
            Adds an element to the TdParameterCollection.
            </summary>
            <param name="value">The TdParameter object to add to the collection.</param>
            <returns>Returns the index within the TdParameterCollection.</returns>
        </member>
        <member name="M:Teradata.Client.Provider.TdParameterCollection.CopyTo(Teradata.Client.Provider.TdParameter[],System.Int32)">
            <summary>
            Copies the elements of TdParameterCollection to the specified array.
            </summary>
            
            <param name="array">The target one-dimensional array.</param>
            <param name="index">The zero-based index in the array where copying begins.</param>
            
            <exception cref="T:System.ArgumentException">Can be thrown by one of the following errors:  
            1)<paramref name="array"/> is not one-dimensional, 2)<paramref name="index"/> is equal to or greater than 
            the length of the array, or 3)the number of elements in the <c>TdParameterCollection</c> is greater than 
            the available space from <paramref name="index"/> to the end of the destination array.</exception>
            <exception cref="T:System.ArgumentNullException"><paramref name="array"/> is null</exception>
            <exception cref="T:System.ArgumentOutOfRangeException"><paramref name="index"/> is less than zero.</exception>
            
            <remarks>
            This is a shallow copy. The array elements will point to the
            same object (<see cref="T:Teradata.Client.Provider.TdParameter"/> objects in <c>TdParameterCollection</c>).
            </remarks>
            
            <seealso cref="T:Teradata.Client.Provider.TdParameter"/>
        </member>
        <member name="M:Teradata.Client.Provider.TdParameterCollection.Add(Teradata.Client.Provider.TdParameter)">
            <summary>
            Adds the specified <see cref="T:Teradata.Client.Provider.TdParameter"/> object to the <c>TdParameterCollection</c>.
            </summary>
            
            <param name="value">a TdParameter object.</param>
            
            <returns>Returns the new member of the TdParameterCollection.</returns>
            
            <exception cref="T:System.ArgumentException">The <c>value</c> parameter is already a member of this 
            <c>TdParameterCollection</c> or it is a member of another <c>TdParameterCollection</c>.</exception>
            <exception cref="T:System.ArgumentNullException">The <c>value</c> parameter is null.</exception>
            <exception cref="T:System.InvalidCastException">The <c>value</c> is not of type TdParameter.</exception>
            
            <seealso cref="T:Teradata.Client.Provider.TdParameter"/>
        </member>
        <member name="M:Teradata.Client.Provider.TdParameterCollection.Add(System.String,System.Object)">
            <summary>
            Creates and adds a <see cref="T:Teradata.Client.Provider.TdParameter"/> object to the <c>TdParameterCollection</c>. 
            The <see cref="T:Teradata.Client.Provider.TdParameter"/> object is initialized with the specified parameter name and value.
            </summary>
            
            <param name="parameterName">Specifies the Parameter Name of the newly created <see cref="T:Teradata.Client.Provider.TdParameter"/> object.</param>
            <param name="value">Specifies the Value of the newly created <see cref="T:Teradata.Client.Provider.TdParameter"/> object.</param>
            
            <returns>Returns the new member of the <c>TdParameterCollection</c>.</returns>
            
            <remarks>
            For additional information see the <see cref="T:Teradata.Client.Provider.TdParameter"/> constructor
            </remarks>
            
            <seealso cref="T:Teradata.Client.Provider.TdParameter"/>
        </member>
        <member name="M:Teradata.Client.Provider.TdParameterCollection.Add(System.String,Teradata.Client.Provider.TdType)">
            <summary>
            Creates and adds a <see cref="T:Teradata.Client.Provider.TdParameter"/> object to the TdParameterCollection. 
            The <see cref="T:Teradata.Client.Provider.TdParameter"/> object is initialized with the specified parameter 
            name and Teradata data type.
            </summary>
            
            <param name="parameterName">Specifies the Parameter Name of the newly created TdParameter object.</param>
            <param name="dataType">Specifies the Teradata data type of the newly created TdParameter object.</param>
            
            <returns>Returns the new member of the TdParameterCollection.</returns>
            
            <remarks>
            For additional information see <see cref="T:Teradata.Client.Provider.TdParameter"/> constructor.
            </remarks>
            
            <seealso cref="T:Teradata.Client.Provider.TdParameter"/>
        </member>
        <member name="M:Teradata.Client.Provider.TdParameterCollection.Add(System.String,Teradata.Client.Provider.TdType,System.Int32)">
            <summary>
            Creates and adds a <see cref="T:Teradata.Client.Provider.TdParameter"/> object to the <c>TdParameterCollection</c>. 
            The <see cref="T:Teradata.Client.Provider.TdParameter"/> object is initialized with the specified parameter name, 
            Teradata data type and size.
            </summary>
            
            <param name="parameterName">Specifies the Parameter Name of the newly created <see cref="T:Teradata.Client.Provider.TdParameter"/> 
            object.</param>
            <param name="dataType">Specifies the Teradata data type of the newly created <see cref="T:Teradata.Client.Provider.TdParameter"/> 
            object.</param>
            <param name="size">Specifies the Size of the newly created <see cref="T:Teradata.Client.Provider.TdParameter"/> object.</param>
            
            <returns>Returns the new member of the TdParameterCollection.</returns>
            
            <remarks>
            For additional information see <see cref="T:Teradata.Client.Provider.TdParameter"/> constructor.
            </remarks>
            
            <seealso cref="T:Teradata.Client.Provider.TdParameter"/>
        </member>
        <member name="M:Teradata.Client.Provider.TdParameterCollection.Add(System.String,Teradata.Client.Provider.TdType,System.Int32,System.String)">
            <summary>
            Creates and adds a <see cref="T:Teradata.Client.Provider.TdParameter"/> object to the <c>TdParameterCollection</c>. 
            The <see cref="T:Teradata.Client.Provider.TdParameter"/> object is initialized with the specified parameter name, 
            Teradata data type, size and source column name.
            </summary>
            
            <param name="parameterName">Specifies the Parameter Name of the newly created <see cref="T:Teradata.Client.Provider.TdParameter"/> 
            object.</param>
            <param name="dataType">Specifies the Teradata data type of the newly created <see cref="T:Teradata.Client.Provider.TdParameter"/> 
            object.</param>
            <param name="size">Specifies the Size of the newly created <see cref="T:Teradata.Client.Provider.TdParameter"/> object.</param>
            <param name="sourceColumnName">Specifies the Source Column of the newly created <see cref="T:Teradata.Client.Provider.TdParameter"/> 
            object.</param>
            
            <returns>Returns the new member of the <c>TdParameterCollection</c>.</returns>
            
            <remarks>
            For additional information see TdParameter constructor.
            </remarks>
            
            <seealso cref="T:Teradata.Client.Provider.TdParameter"/>
        </member>
        <member name="M:Teradata.Client.Provider.TdParameterCollection.Add(System.String,Teradata.Client.Provider.TdType,System.Int32,System.Data.ParameterDirection,System.Boolean,System.Byte,System.Byte,System.String,System.Data.DataRowVersion,System.Object)">
            <summary>
            Creates and adds a <see cref="T:Teradata.Client.Provider.TdParameter"/> object to the <c>TdParameterCollection</c>. 
            <see cref="T:Teradata.Client.Provider.TdParameter"/> object is initialized with the specified parameter name, 
            Teradata data type, Size and Source Column name.
            </summary>
            <param name="parameterName">Specifies the name of the parameter.</param>
            <param name="dataType">Specifies the data type of the parameter. One of the TdType enumerated values.</param>
            <param name="size">Specifies the size of the parameter.</param>
            <param name="direction">Indicates the direction of data (parameter) flow. One of the 
            <c>System.Data.ParameterDirection</c> enumerated </param>
            <param name="isNullable">Indicates whether the parameter can be null.</param>
            <param name="precision">Indicates the precision of numeric, datetime and interval data types</param>
            <param name="scale">Indicates the scale of numeric data types</param>
            <param name="sourceColumnName">Specifies the name of the source column</param>
            <param name="sourceColumnVersion">Specifies the version of the source row. One of the 
            <c>System.Data.DataRowVersion</c> values. </param>
            <param name="value">Returns the value of the parameter</param>
            
            <returns>The new member of the TdParameterCollection.</returns>
            
            <remarks>
            For additional information see <see cref="T:Teradata.Client.Provider.TdParameter"/> constructor.
            </remarks>
            
            <seealso cref="T:Teradata.Client.Provider.TdParameter"/>
        </member>
        <member name="M:Teradata.Client.Provider.TdParameterCollection.AddRange(Teradata.Client.Provider.TdParameter[])">
            <summary>
            Creates and adds an array of <see cref="T:Teradata.Client.Provider.TdParameter"/> objects to the <c>TdParameterCollection</c>. 
            Each <see cref="T:Teradata.Client.Provider.TdParameter"/> object in the array is initialized with the specified parameter name, 
            Teradata data type, Size and Source Column name.
            </summary>
            <param name="values">The array of TdParameters that will be added to the parameter collection</param>
        </member>
        <member name="M:Teradata.Client.Provider.TdParameterCollection.AddRange(System.Array)">
            <summary>
            Creates and adds an array of <see cref="T:Teradata.Client.Provider.TdParameter"/> objects to the <c>TdParameterCollection</c>. 
            Each <see cref="T:Teradata.Client.Provider.TdParameter"/> object in the array is initialized with the specified parameter name, 
            Teradata data type, Size and Source Column name.
            </summary>
            <param name="values">The array of TdParameters that will be added to the parameter collection</param>
        </member>
        <member name="M:Teradata.Client.Provider.TdParameterCollection.Clear">
            <summary>
            Removes all <see cref="T:Teradata.Client.Provider.TdParameter"/> objects from the <c>TdParameterCollection</c>.
            </summary>
            
            <seealso cref="T:Teradata.Client.Provider.TdParameter"/>
            
        </member>
        <member name="M:Teradata.Client.Provider.TdParameterCollection.Contains(Teradata.Client.Provider.TdParameter)">
            <summary>
            Determines whether the specified <see cref="T:Teradata.Client.Provider.TdParameter"/> object exists 
            in the <c>TdParameterCollection</c>.
            </summary>
            
            <param name="value">Specifies a <see cref="T:Teradata.Client.Provider.TdParameter"/> object.</param>
            
            <returns><c>true</c> if value is found in the TdParameterCollection; otherwise <c>false</c>.</returns>
            
            <seealso cref="T:Teradata.Client.Provider.TdParameter"/>
        </member>
        <member name="M:Teradata.Client.Provider.TdParameterCollection.Contains(System.Object)">
            <summary>
            Determines whether the specified <see cref="T:Teradata.Client.Provider.TdParameter"/> object exists 
            in the <c>TdParameterCollection</c>.
            </summary>
            <param name="value">Specifies a <see cref="T:Teradata.Client.Provider.TdParameter"/> object.</param>
            <returns><c>true</c> if value is found in the TdParameterCollection.</returns>
        </member>
        <member name="M:Teradata.Client.Provider.TdParameterCollection.IndexOf(Teradata.Client.Provider.TdParameter)">
            <summary>
            Returns the position of the specified <see cref="T:Teradata.Client.Provider.TdParameter"/> object 
            in the <c>TdParameterCollection</c>.
            </summary>
            
            <param name="value">Specifies a <see cref="T:Teradata.Client.Provider.TdParameter"/> object.</param>
            
            <returns>Returns the zero-based position of the TdParameter object in the collection; otherise -1.</returns>
            
            <seealso cref="T:Teradata.Client.Provider.TdParameter"/>
        </member>
        <member name="M:Teradata.Client.Provider.TdParameterCollection.IndexOf(System.Object)">
            <summary>
            Returns the position of the specified <see cref="T:Teradata.Client.Provider.TdParameter"/> object 
            in the <c>TdParameterCollection</c>.
            </summary>
            
            <param name="value">Specifies a <see cref="T:Teradata.Client.Provider.TdParameter"/> object.</param>
            
            <returns>Returns the zero-based position of the TdParameter object in the collection; otherise -1.</returns>
            
            <seealso cref="T:Teradata.Client.Provider.TdParameter"/>
        </member>
        <member name="M:Teradata.Client.Provider.TdParameterCollection.Insert(System.Int32,Teradata.Client.Provider.TdParameter)">
            <summary>
            Inserts a TdParameter into the TdParameterCollection at the specified position.
            </summary>
            
            <param name="index">Specifies the zero-based index at which value should be inserted.</param>
            <param name="value">Specifies the TdParameter object to insert into the collection.</param>
            
            <exception cref="T:System.ArgumentException">The <paramref name="value"/> parameter is already a member of this 
            <c>TdParameterCollection</c>, or it is a member of another <c>TdParameterCollection</c>.</exception>
            <exception cref="T:System.ArgumentNullException">The <paramref name="value"/> parameter is null.</exception>
            <exception cref="T:System.IndexOutOfRangeException"><paramref name="index"/> is not between zero and 
            <see cref="P:Teradata.Client.Provider.TdParameterCollection.Count"/>.</exception>
            
            <seealso cref="T:Teradata.Client.Provider.TdParameter"/>
        </member>
        <member name="M:Teradata.Client.Provider.TdParameterCollection.Insert(System.Int32,System.Object)">
            <summary>
            Inserts an object of type TdParameter into the TdParameterCollection at the specified position.
            </summary>
            
            <param name="index">Specifies the zero-based index at which value should be inserted.</param>
            <param name="value">Specifies an object of type TdParameter to insert into the collection.</param>
            
            <exception cref="T:System.ArgumentException">The <paramref name="value"/> parameter is already a member of this 
            <c>TdParameterCollection</c>, or it is a member of another <c>TdParameterCollection</c>.</exception>
            <exception cref="T:System.ArgumentNullException">The <paramref name="value"/> parameter is null.</exception>
            <exception cref="T:System.IndexOutOfRangeException"><paramref name="index"/> is not between zero and 
            <see cref="P:Teradata.Client.Provider.TdParameterCollection.Count"/>.</exception>
            
            <seealso cref="T:Teradata.Client.Provider.TdParameter"/>
        </member>
        <member name="M:Teradata.Client.Provider.TdParameterCollection.Remove(Teradata.Client.Provider.TdParameter)">
            <summary>
            Removes the specified <see cref="T:Teradata.Client.Provider.TdParameter"/> object from the collection.
            </summary>
            <param name="value">The <see cref="T:Teradata.Client.Provider.TdParameter"/> object to remove from the collection.</param>
            
            <exception cref="T:System.ArgumentException">The <paramref name="value"/> does not exist in the 
            TdParameterCollection.</exception>
            <exception cref="T:System.ArgumentNullException">The <paramref name="value"/> parameter is null.</exception>
            
            <seealso cref="T:Teradata.Client.Provider.TdParameter"/>
        </member>
        <member name="M:Teradata.Client.Provider.TdParameterCollection.Remove(System.Object)">
            <summary>
            Removes the specified object of type <see cref="T:Teradata.Client.Provider.TdParameter"/> from the collection.
            </summary>
            <param name="value">The <see cref="T:Teradata.Client.Provider.TdParameter"/> object to remove from the collection.</param>
            
            <exception cref="T:System.ArgumentException">The <paramref name="value"/> does not exist in the 
            TdParameterCollection.</exception>
            <exception cref="T:System.ArgumentNullException">The <paramref name="value"/> parameter is null.</exception>
            <exception cref="T:System.InvalidCastException">The <paramref name="value"/> parameter is not 
            of type <see cref="T:Teradata.Client.Provider.TdParameter"/>.</exception>
            
            <seealso cref="T:Teradata.Client.Provider.TdParameter"/>
        </member>
        <member name="M:Teradata.Client.Provider.TdParameterCollection.RemoveAt(System.Int32)">
            <summary>
            Removes the specified TdParameter (index) from the collection.
            </summary>
            
            <param name="index">The specified position within the collection.</param>
            
            <exception cref="T:System.IndexOutOfRangeException">The <paramref name="index"/> is not between zero and 
            TdParameterCollection.Count - 1.</exception>
            
            <seealso cref="T:Teradata.Client.Provider.TdParameter"/>
        </member>
        <member name="P:Teradata.Client.Provider.TdParameterCollection.Count">
            <summary>
            Gets the number of TdParameter objects in the <c>TdParameterCollection</c>.
            </summary>
            
            <value>
            Returns the number of TdParameter objects in the collection.
            </value>
            
            <seealso cref="T:Teradata.Client.Provider.TdParameter"/>
        </member>
        <member name="P:Teradata.Client.Provider.TdParameterCollection.IsSynchronized">
            <summary>
            <c>TdParameterCollection</c> implements the <c>System.Collections.ICollection</c> interface. 
            Therefore it supports the following property. However, it is only exposed 
            when <c>TdParameterCollection</c> is cast to ICollection. It always returns <c>false</c>.
            </summary>
            
            <value>
            Indicates whether access to TdParameterCollection is synchronized.  Always <c>false</c>
            </value>
        </member>
        <member name="P:Teradata.Client.Provider.TdParameterCollection.SyncRoot">
            <summary>
            Returns the object that is used to synchronize access to 
            the TdParameterCollection.
            </summary>
        </member>
        <member name="P:Teradata.Client.Provider.TdParameterCollection.IsFixedSize">
            <summary>
            Gets a value indicating whether TdParameterCollection has a fixed size.
            This should always return false.
            </summary>
            
            <remarks>
            TdParameterCollection implements System.Collections.IList interface. 
            Therefore it supports the following property but always returns false. 
            </remarks>
        </member>
        <member name="P:Teradata.Client.Provider.TdParameterCollection.IsReadOnly">
            <summary>
            Indicates whether the <c>TdParameterCollection</c> is read-only.  Always returns <c>false</c>
            </summary>
            
            <remarks>
            TdParameterCollection implements the System.Collections.IList interface. Therefore 
            it supports the following property. It always returns <c>false</c>.
            </remarks>
        </member>
        <member name="P:Teradata.Client.Provider.TdParameterCollection.Item(System.String)">
            <summary>
            Gets or sets the TdParameter with the specified name.
            </summary>
            
            <remarks>
            If parameter arrays are specified, the indexer should not
            be used.  It will throw an exception if parameter arrays 
            are being used.
            </remarks>
        </member>
        <member name="P:Teradata.Client.Provider.TdParameterCollection.Item(System.Int32)">
            <summary>
            Gets or sets the TdParameter at the specified index.
            </summary>
        </member>
        <member name="P:Teradata.Client.Provider.TdParameterCollection.LobOutParameterCounter">
            <summary>
            Counts the number of Out parameters that have a TdType of Blob/Clob.
            </summary>
        </member>
        <member name="P:Teradata.Client.Provider.TdParameterCollection.OutParameterCounter">
            <summary>
            Counter for the number of Out parameters .
            </summary>
        </member>
        <member name="P:Teradata.Client.Provider.TdParameterCollection.InOutParameterCounter">
            <summary>
            Counter for the number of InOut parameters .
            </summary>
        </member>
        <member name="P:Teradata.Client.Provider.TdParameterCollection.ParameterArrayBeingUsed">
            <summary>
            Indicates whether parameter arrays are being used.
            </summary>
        </member>
        <member name="T:Teradata.Client.Provider.TdTransaction">
            <summary>
            Represents an Explicit Teradata Database Transaction. It should be 
            explicitly committed or rolled back.
            </summary>
            
            
            
            <remarks>
            By default <see cref="T:Teradata.Client.Provider.TdConnection"/> object operates in 
            Auto-Commit mode. Therefore the transaction spans the execution of one or more 
            <see cref="T:Teradata.Client.Provider.TdCommand"/> object. The application can open a 
            transaction via <see cref="M:Teradata.Client.Provider.TdConnection.BeginTransaction"/> 
            and explicitly control when the transaction is committed or rolled back.
            <para></para>
            <para>Teradata Database will rollback a transaction when a SQL statement results in 
            a specific set of errors. In this case, the .NET Data Provider for Teradata will open 
            a new explicit transaction and the TdTransaction object can be used to commit or 
            abort the remaining activities associated with the 
            <see cref="T:Teradata.Client.Provider.TdConnection"/> object.</para>
            <para></para>
            <para>The <see cref="T:Teradata.Client.Provider.TdConnection"/> object reverts back to 
            Auto-Commit mode after an explicit call by the application to 
            <see cref="M:Teradata.Client.Provider.TdTransaction.Rollback"/> 
            or <see cref="M:Teradata.Client.Provider.TdTransaction.Commit"/> method.</para>
            <para></para>
            <para>Unlike the ODBC Driver and OLE DB Provider for Teradata, the .NET Data Provider 
            for Teradata does not automatically commit a transaction after a DDL statement 
            execution. Therefore, the DDL statement has to be the last SQL statement within 
            a transaction. Furthermore the DDL statement cannot be part of a multi-statement 
            request.</para>
            </remarks>
            
            <seealso cref="T:Teradata.Client.Provider.TdConnection"/>
            
            
        </member>
        <member name="M:Teradata.Client.Provider.TdTransaction.Commit">
            <summary>
            Commits the transaction and re-enables the Auto-Commit mode.
            </summary>
            
            <exception cref="T:System.ObjectDisposedException">Object is disposed and the transaction has already been committed or rolled back.</exception>
            <exception cref="T:Teradata.Client.Provider.TdException">The Teradata Database returned an error, or .NET Data Provider for Teradata detected an error.</exception>
            
            <remarks>
            The Commit method commits the transaction (unit of work) and forces 
            the <see cref="T:Teradata.Client.Provider.TdConnection"/> back into 
            Auto-Commit mode. It also disassociates the TdTransaction from the 
            TdConnection object. The Connection property will return a Null reference 
            after the call to the Commit method.
            </remarks>
            
            
        </member>
        <member name="M:Teradata.Client.Provider.TdTransaction.Rollback">
            <summary>
            Rolls back the transaction and re-enables the Auto-Commit mode.
            </summary>
            
            <exception cref="T:System.ObjectDisposedException">Object is disposed and the transaction has already been committed or rolled back.</exception>
            <exception cref="T:Teradata.Client.Provider.TdException">The Teradata Database returned an error, or .NET Data Provider for Teradata detected an error.</exception>
            
            <remarks>
            The Rollback method aborts the transaction (unit of work) and forces the 
            <see cref="T:Teradata.Client.Provider.TdConnection"/> back into Auto-Commit mode. 
            It also disassociates the TdTransaction from the TdConnection object. The 
            Connection property will return a Null reference after the call to the 
            Rollback method.
            </remarks>
            
        </member>
        <member name="M:Teradata.Client.Provider.TdTransaction.Close">
            <summary>
            Rolls back the transaction and enables the Auto-Commit mode.
            </summary>
            
            <remarks>
            It aborts the transaction and releases all unmanaged resources.
            </remarks>
            
            <seealso cref="M:Teradata.Client.Provider.TdTransaction.Rollback"/>
            
        </member>
        <member name="M:Teradata.Client.Provider.TdTransaction.ChangeQueryBand(Teradata.Client.Provider.TdQueryBand)">
             <summary>
             The Transaction Level Query Bands are modified to those defined in <paramref name="queryBand"/>.
             </summary>
             <param name="queryBand">The Query Bands that will be defined at the Transaction Level.</param>
             <exception cref="T:Teradata.Client.Provider.TdException">Query Bands or Trusted Sessions are not supported by the Teradata Database.</exception>
             <exception cref="T:System.ObjectDisposedException">Transaction is not opened.</exception>
             <exception cref="T:System.ArgumentNullException"><paramref name="queryBand"/> is null.</exception>
             <remarks>
             <para>
             Query Bands are only supported when connecting to a Teradata Database 12.00 or later releases. 
             </para>
             
             <para>
             When this method is called, a "SET QUERY_BAND ... FOR TRANSACTION" statement is submitted to 
             the Teradata Database. The <i>old</i> settings are removed, and the <i>new</i> settings 
             are created. 
             </para>
            
             <para>The Transaction Level Query Band is set to NONE when the <paramref name="queryBand"/> input 
             parameter has Zero (<see cref="P:Teradata.Client.Provider.TdQueryBand.Count"/> is equal to zero) Key-Value pairs.</para>
             <para>
             
             The Query Bands that have been defined at the Connection level are still active
             during the transaction.
             </para>
             </remarks>
        </member>
        <member name="P:Teradata.Client.Provider.TdTransaction.System#Data#IDbTransaction#Connection">
            <summary>
            Gets the IDbConnection object associated with this transaction.
            </summary>
            
            <value>
            The IDbConnection object associated with this transaction.
            </value>
            
            <remarks>
            Connection property returns the active TdConnection associated with this 
            transaction. After a call to the Commit or Rollback method, the transaction 
            is no longer associated with a TdConnection object and TdTransaction is 
            in disposed state.
            </remarks>
            
            
            
        </member>
        <member name="P:Teradata.Client.Provider.TdTransaction.IsolationLevel">
            <summary>
            Gets the session isolation level associated with the transaction. 
            </summary>
            
            <value>
            The isolation level of the current transaction.
            </value>
            
            <exception cref="T:System.ObjectDisposedException">Object is disposed and the transaction has already been committed or rolled back.</exception>
            
            
        </member>
        <member name="P:Teradata.Client.Provider.TdTransaction.Connection">
            <summary>
            Gets the TdConnection object associated with this transaction.
            </summary>
            
            <value>
            The TdConnection object associated with this transaction or a Null reference. 
            </value>
            
            <remarks>
            Connection property returns the active <see cref="T:Teradata.Client.Provider.TdConnection"/> 
            associated with this transaction. After a call to the <see cref="M:Teradata.Client.Provider.TdTransaction.Rollback"/> 
            or <see cref="M:Teradata.Client.Provider.TdTransaction.Commit"/> methods, the transaction 
            is no longer associated with a TdConnection object and Connection returns a Null 
            reference.
            </remarks>
            
        </member>
        <member name="P:Teradata.Client.Provider.TdTransaction.QueryBand">
            <summary>
            Gets the TdQueryBand object that contains the definitions of the 
            Query Bands that have been defined at the Transaction level.
            </summary>
            <returns>
            The TdQueryBand object that contains the definitions of the Transaction level Query Bands.
            </returns>
            <remarks>
            <para>
            Query Bands are only supported in Teradata Database 12.0 or greater.
            </para>
            
            <para>
            The Query Bands that have been defined at the Connection level are still active
            during the transaction.
            </para>
            
            </remarks>
        </member>
        <member name="P:Teradata.Client.Provider.TdTransaction.DbConnection">
            <summary>
            Gets the DbConnection object associated with this transaction.
            </summary>
            
            <value>
            The DbConnection object associated with this transaction or a Null reference. 
            </value>
            
            <remarks>
            DbConnection property returns the active <see cref="T:Teradata.Client.Provider.TdConnection"/> 
            associated with this transaction. After a call to the <see cref="M:System.Data.Common.DbTransaction.Rollback"/> 
            or <see cref="M:System.Data.Common.DbTransaction.Commit"/> methods, the transaction 
            is no longer associated with a DbConnection object and DbConnection 
            returns a Null reference.
            </remarks>
        </member>
        <member name="T:Teradata.Client.Provider.TdType">
            <summary>
            TdType is an enumeration of Teradata data types. 
            </summary>
            
            <remarks>
            It is exposed by .NET Data Provider via <see cref="T:Teradata.Client.Provider.TdParameter"/>,
            <see cref="M:Teradata.Client.Provider.TdDataReader.GetSchemaTable"/> and other classes, methods
            and/or properties.
            </remarks>
        </member>
        <member name="F:Teradata.Client.Provider.TdType.BigInt">
            <summary>
                Represents 64 bit signed integer that has a range of range of 
                –9,223,372,036,854,775,808 to 9,223,372,036,854,775,807.  
            <para></para>
            <para>
                Application calls <see cref="M:Teradata.Client.Provider.TdDataReader.GetInt64(System.Int32)"/> to 
                retrieve the value.
            </para>
            <para></para>
            <para>Type Mappings:</para>
            <list type="table">
            <listheader>
            <term>DbType</term><description>Teradata Data Type</description>
            </listheader>
            <item>
            <term>DbType.Int64</term><description>BIGINT</description>
            </item>
            </list>
            </summary>
        </member>
        <member name="F:Teradata.Client.Provider.TdType.Blob">
            <summary>
                Represents a Binary Large Object BLOB(n) where n is the maximum number of 
                bytes ranging from 1 to 2G.
            <para></para>
            <para>
                Application calls <see cref="M:Teradata.Client.Provider.TdDataReader.GetTdBlob(System.Int32)"/> to retrieve 
                a <see cref="T:Teradata.Client.Provider.TdBlob"/> object. Application can also call
                <see cref="M:Teradata.Client.Provider.TdDataReader.GetBytes(System.Int32,System.Int64,System.Byte[],System.Int32,System.Int32)"/> to retrieve all or portion of the BLOB 
                when operating in CommandBehavior.SequentialAccess mode.
            </para>
            <para></para>
            <para>Type Mappings:</para>
            <list type="table">
            <listheader>
            <term>DbType</term><description>Teradata Data Type</description>
            </listheader>
            <item>
            <term>DbType.Binary</term><description>BLOB</description>
            </item>
            </list>
            </summary>
        </member>
        <member name="F:Teradata.Client.Provider.TdType.Byte">
            <summary>
                Represents a fixed-length binary data BYTE(n) where n is the number of bytes 
                ranging from 1 to 64000.
            <para></para>
            <para>
                Application calls <see cref="M:Teradata.Client.Provider.TdDataReader.GetBytes(System.Int32,System.Int64,System.Byte[],System.Int32,System.Int32)"/> to 
                retrieve all or a portion of the binary data.
            </para>
            <para></para>
            <para>Type Mappings:</para>
            <list type="table">
            <listheader>
            <term>DbType</term><description>Teradata Data Type</description>
            </listheader>
            <item>
            <term>DbType.Binary</term><description>BYTE</description>
            </item>
            </list>
            </summary>
        </member>
        <member name="F:Teradata.Client.Provider.TdType.ByteInt">
            <summary>
                8 bit signed integer ranging from -128 to 127.
            <para></para>
            <para>
                Application calls <see cref="M:Teradata.Client.Provider.TdDataReader.GetInt16(System.Int32)"/> to 
                retrieve the value.
            </para>
            <para></para>
            <para>Type Mappings:</para>
            <list type="table">
            <listheader>
            <term>DbType</term><description>Teradata Data Type</description>
            </listheader>
            <item>
            <term>DbType.SByte</term><description>BYTEINT</description>
            </item>
            </list>
            </summary>
        </member>
        <member name="F:Teradata.Client.Provider.TdType.Char">
            <summary>
                Represents a fixed-length character string CHAR(n). Teradata automatically 
                translates between the session character set and target column.
            <para></para>
            <para>
                Application calls <see cref="M:Teradata.Client.Provider.TdDataReader.GetString(System.Int32)"/> to retrieve 
                the value.
            </para>
            <para></para>
            <para>Type Mappings:</para>
            <list type="table">
            <listheader>
            <term>DbType</term><description>Teradata Data Type</description>
            </listheader>
            <item>
            <term>DbType.StringFixedLength</term><description>CHARACTER</description>
            </item>
            </list>
            </summary>
        </member>
        <member name="F:Teradata.Client.Provider.TdType.Clob">
            <summary>
                Represents a Character Large Object CLOB(n) where n is the maximum number 
                of characters ranging from 1 to 2G.
            <para></para>
            <para>
                Application calls <see cref="M:Teradata.Client.Provider.TdDataReader.GetTdClob(System.Int32)"/> to retrieve 
                a <see cref="T:Teradata.Client.Provider.TdClob"/> object. An Application can also call
                <see cref="M:Teradata.Client.Provider.TdDataReader.GetChars(System.Int32,System.Int64,System.Char[],System.Int32,System.Int32)"/> to retrieve all or a portion of the CLOB 
                when operating in CommandBehavior.SequentialAccess mode.
            </para>
            <para></para>
            <para>Type Mappings:</para>
            <list type="table">
            <listheader>
            <term>DbType</term><description>Teradata Data Type</description>
            </listheader>
            <item>
            <term>DbType.String</term><description>CLOB</description>
            </item>
            </list>
            </summary>
        </member>
        <member name="F:Teradata.Client.Provider.TdType.Date">
            <summary>
                Date value with YYYY-MM-DD format. Ranging from 1-1-1 to 9999-12-31.
            <para></para>
            <para>
                Application calls <see cref="M:Teradata.Client.Provider.TdDataReader.GetDate(System.Int32)"/> or 
                <see cref="M:Teradata.Client.Provider.TdDataReader.GetDateTime(System.Int32)"/> to retrieve the value.
            </para>
            <para></para>
            <para>
                NOTE: The time for the resulting System.DateTime is set to 
                00:00:00.0000000 (midnight).
            </para>
            <para></para>
            <para>Type Mappings:</para>
            <list type="table">
            <listheader>
            <term>DbType</term><description>Teradata Data Type</description>
            </listheader>
            <item>
            <term>DbType.Date</term><description>DATE</description>
            </item>
            </list>
            </summary>
        </member>
        <member name="F:Teradata.Client.Provider.TdType.Decimal">
            <summary>
                DECIMAL(n, m) represents a decimal number of n digits (precision), with m (scale) 
                of those n digits to the right of the decimal point. The range for n is 
                from 1 to 18. The range for m is from 0 through n.
            <para></para> 
            <para>
                Application calls <see cref="M:Teradata.Client.Provider.TdDataReader.GetDecimal(System.Int32)"/> to 
                retrieve the value.
            </para>
            <para></para>
            <para>Type Mappings:</para>
            <list type="table">
            <listheader>
            <term>DbType</term><description>Teradata Data Type</description>
            </listheader>
            <item>
            <term>DbType.Decimal</term><description>DECIMAL</description>
            </item>
            </list>
            </summary>
        </member>
        <member name="F:Teradata.Client.Provider.TdType.Double">
            <summary>
                Double Precision 64-bit number. Ranging from -1.7976E308 to 1.7976E308.
            <para></para> 
            <para>
                Application calls <see cref="M:Teradata.Client.Provider.TdDataReader.GetDouble(System.Int32)"/> to 
                retrieve the value.
            </para>
            <para></para>
            <para>Type Mappings:</para>
            <list type="table">
            <listheader>
            <term>DbType</term><description>Teradata Data Type</description>
            </listheader>
            <item>
            <term>DbType.Double</term><description>DOUBLE, FLOAT, PRECISION, REAL</description>
            </item>
            </list>
            </summary>
        </member>
        <member name="F:Teradata.Client.Provider.TdType.Graphic">
            <summary>
                Represents a fixed-length UNICODE character string. GRAPHIC represents Unicode 
                characters defined by IBM corporation for DB2.
            <para></para> 
            <para>
                Application calls <see cref="M:Teradata.Client.Provider.TdDataReader.GetString(System.Int32)"/> to 
                retrieve the value.
            </para>
            <para></para>
            <para>Type Mappings:</para>
            <list type="table">
            <listheader>
            <term>DbType</term><description>Teradata Data Type</description>
            </listheader>
            <item>
            <term>DbType.StringFixedLength</term><description>GRAPHIC</description>
            </item>
            </list>
            </summary>
        </member>
        <member name="F:Teradata.Client.Provider.TdType.Integer">
            <summary>
                32 bit signed integer. Ranging from -2,147,483,648 to 2,147,483,647.
            <para></para> 
            <para>
                Application calls <see cref="M:Teradata.Client.Provider.TdDataReader.GetInt32(System.Int32)"/> to 
                retrieve the value.
            </para>
            <para></para>
            <para>Type Mappings:</para>
            <list type="table">
            <listheader>
            <term>DbType</term><description>Teradata Data Type</description>
            </listheader>
            <item>
            <term>DbType.Int32</term><description>INTEGER</description>
            </item>
            </list>
            </summary>
        </member>
        <member name="F:Teradata.Client.Provider.TdType.IntervalDay">
            <summary>
                A time interval represented in Days. Day-Precision is from 1 to 4. 
                Precision defaults to 2. Therefore the value range of values is 
                from -'9999' to '9999'.
            <para></para> 
            <para>
                Application calls <see cref="M:Teradata.Client.Provider.TdDataReader.GetTdIntervalDay(System.Int32)"/> to retrieve the value. 
            </para>
            <para></para>
            <para>Type Mappings:</para>
            <list type="table">
            <listheader>
            <term>DbType</term><description>Teradata Data Type</description>
            </listheader>
            <item>
            <term>DbType.Object</term><description>INTERVAL DAY</description>
            </item>
            </list>
            </summary>
        </member>
        <member name="F:Teradata.Client.Provider.TdType.IntervalDayToHour">
            <summary>
                A time interval represented in Days and Hours. Day-Precision is from 1 to 4. 
                Precision defaults to 2. Therefore the range of values is from -'9999 23' 
                to '9999 23'.
            <para></para>
            <para>
                Application calls <see cref="M:Teradata.Client.Provider.TdDataReader.GetTdIntervalDayToHour(System.Int32)"/> to retrieve the value. 
            </para>
            <para></para>
            <para>Type Mappings:</para>
            <list type="table">
            <listheader>
            <term>DbType</term><description>Teradata Data Type</description>
            </listheader>
            <item>
            <term>DbType.Object</term><description>INTERVAL DAY TO HOUR</description>
            </item>
            </list>
            </summary>
        </member>
        <member name="F:Teradata.Client.Provider.TdType.IntervalDayToMinute">
            <summary>
                A time interval represented in Days, Hours and Minutes. Day-Precision is from  
                1 to 4. Precision defaults to 2. Therefore the range of values is from 
                -'9999 23:59' to '9999 23:59'.
            <para></para>
            <para>
                Application calls <see cref="M:Teradata.Client.Provider.TdDataReader.GetTdIntervalDayToMinute(System.Int32)"/> to retrieve the value. 
            </para>
            <para></para>
            <para>Type Mappings:</para>
            <list type="table">
            <listheader>
            <term>DbType</term><description>Teradata Data Type</description>
            </listheader>
            <item>
            <term>DbType.Object</term><description>INTERVAL DAY TO MINUTE</description>
            </item>
            </list>
            </summary>
        </member>
        <member name="F:Teradata.Client.Provider.TdType.IntervalDayToSecond">
            <summary>
                A time interval represented in Days, Hours, Minutes and Seconds. Day-Precision is 
                from 1 to 4. Precision defaults to 2. The fractional seconds scale is 0 to 6
                and defaults to 6. Therefore the range of values is from -'9999 23:59:59.999999'
                to '9999 23:59:59.999999'.
            <para></para>
            <para>
                Application calls <see cref="M:Teradata.Client.Provider.TdDataReader.GetTdIntervalDayToSecond(System.Int32)"/> to retrieve the value. 
            </para>
            <para></para>
            <para>Type Mappings:</para>
            <list type="table">
            <listheader>
            <term>DbType</term><description>Teradata Data Type</description>
            </listheader>
            <item>
            <term>DbType.Object</term><description>INTERVAL DAY TO SECOND</description>
            </item>
            </list>
            </summary>
        </member>
        <member name="F:Teradata.Client.Provider.TdType.IntervalHour">
            <summary>
                A time interval represented in Hours. Hour-Precision is from 1 to 4. Precision 
                defaults to 2. Therefore the range of values is from -'9999' 
                to '9999'.
            <para></para>
            <para>
                Application calls <see cref="M:Teradata.Client.Provider.TdDataReader.GetTdIntervalHour(System.Int32)"/> to retrieve the value. 
            </para>
            <para></para>
            <para>Type Mappings:</para>
            <list type="table">
            <listheader>
            <term>DbType</term><description>Teradata Data Type</description>
            </listheader>
            <item>
            <term>DbType.Object</term><description>INTERVAL HOUR</description>
            </item>
            </list>
            </summary>
        </member>
        <member name="F:Teradata.Client.Provider.TdType.IntervalHourToMinute">
            <summary>
                A time interval represented in Hours and Minutes. Hour-Precision is from 1 to 4. 
                Precision defaults to 2. Therefore the range of values is from 
                -'9999:59' to '9999:59'.
            <para></para>
            <para>
                Application calls <see cref="M:Teradata.Client.Provider.TdDataReader.GetTdIntervalHourToMinute(System.Int32)"/> to retrieve the value. 
            </para>
            <para></para>
            <para>Type Mappings:</para>
            <list type="table">
            <listheader>
            <term>DbType</term><description>Teradata Data Type</description>
            </listheader>
            <item>
            <term>DbType.Object</term><description>INTERVAL HOUR TO MINUTE</description>
            </item>
            </list>
            </summary>
        </member>
        <member name="F:Teradata.Client.Provider.TdType.IntervalHourToSecond">
            <summary>
                A time interval represented in Hours, Minutes, Seconds and fractional seconds. 
                Hour-Precision is from 1 to 4. Precision defaults to 2. The fractional seconds 
                scale is 0 to 6 and defaults to 6. Therefore the range of values is 
                from -'9999:59:59.999999' to '9999:59:59.999999'.
            <para></para>
            <para>
                Application calls <see cref="M:Teradata.Client.Provider.TdDataReader.GetTdIntervalHourToSecond(System.Int32)"/> to retrieve the value. 
            </para>
            <para></para>
            <para>Type Mappings:</para>
            <list type="table">
            <listheader>
            <term>DbType</term><description>Teradata Data Type</description>
            </listheader>
            <item>
            <term>DbType.Object</term><description>INTERVAL HOUR TO SECOND</description>
            </item>
            </list>
            </summary>
        </member>
        <member name="F:Teradata.Client.Provider.TdType.IntervalMinute">
            <summary>
                A time interval represented in Minutes. Precision is from 1 to 4 and defaults to 2. 
                Therefore the range of values is from -'9999' to '9999'.
            <para></para>
            <para>
                Application calls <see cref="M:Teradata.Client.Provider.TdDataReader.GetTdIntervalMinute(System.Int32)"/> to retrieve the value. 
            </para>
            <para></para>
            <para>Type Mappings:</para>
            <list type="table">
            <listheader>
            <term>DbType</term><description>Teradata Data Type</description>
            </listheader>
            <item>
            <term>DbType.Object</term><description>INTERVAL MINUTE</description>
            </item>
            </list>
            </summary>
        </member>
        <member name="F:Teradata.Client.Provider.TdType.IntervalMinuteToSecond">
            <summary>
                A time interval represented in Minutes and Seconds. Minute-Precision is from 
                1 to 4 and defaults to 2. The fractional scale is 0 to 6 and defaults to 6. 
                Therefore the range of values is from -'9999:59.999999' to 
                '9999:59.999999'.
            <para></para>
            <para>
                Application calls <see cref="M:Teradata.Client.Provider.TdDataReader.GetTdIntervalMinuteToSecond(System.Int32)"/> to retrieve the value. 
            </para>
            <para></para>
            <para>Type Mappings:</para>
            <list type="table">
            <listheader>
            <term>DbType</term><description>Teradata Data Type</description>
            </listheader>
            <item>
            <term>DbType.Object</term><description>INTERVAL MINUTE TO SECOND</description>
            </item>
            </list>
            </summary>
        </member>
        <member name="F:Teradata.Client.Provider.TdType.IntervalSecond">
            <summary>
                A time interval represented in Seconds. Second-Precision is from 1 to 4 and defaults 
                to 2. The fractional seconds scale is 0 to 6 and defaults to 6. Therefore the range 
                of values is from -'9999.999999' to '9999.999999'.
            <para></para>
            <para>
                Application calls <see cref="M:Teradata.Client.Provider.TdDataReader.GetTdIntervalSecond(System.Int32)"/> to retrieve the value. 
            </para>
            <para></para>
            <para>Type Mappings:</para>
            <list type="table">
            <listheader>
            <term>DbType</term><description>Teradata Data Type</description>
            </listheader>
            <item>
            <term>DbType.Object</term><description>INTERVAL SECOND</description>
            </item>
            </list>
            </summary>
        </member>
        <member name="F:Teradata.Client.Provider.TdType.IntervalYear">
            <summary>
                A time interval represented in Years. Ranging from -'9999'  
                to '9999'. Year-Precision is from 1 to 4. Precisions defaults to 2.
            <para></para>
            <para>
                Application calls <see cref="M:Teradata.Client.Provider.TdDataReader.GetTdIntervalYear(System.Int32)"/> to retrieve the value. 
            </para>
            <para></para>
            <para>Type Mappings:</para>
            <list type="table">
            <listheader>
            <term>DbType</term><description>Teradata Data Type</description>
            </listheader>
            <item>
            <term>DbType.String</term><description>INTERVAL YEAR</description>
            </item>
            </list>
            </summary>
        </member>
        <member name="F:Teradata.Client.Provider.TdType.IntervalYearToMonth">
            <summary>
                A time interval represented in Years and Months. Ranging from -'9999–12'
                to '9999–12'. Year-Precision is from 1 to 4. Precision defaults to 2.
            <para></para>
            <para>
                Application calls <see cref="M:Teradata.Client.Provider.TdDataReader.GetTdIntervalYearToMonth(System.Int32)"/> to retrieve the value. 
            </para>
            <para></para>
            <para>Type Mappings:</para>
            <list type="table">
            <listheader>
            <term>DbType</term><description>Teradata Data Type</description>
            </listheader>
            <item>
            <term>DbType.String</term><description>INTERVAL YEAR TO MONTH</description>
            </item>
            </list>
            </summary>
        </member>
        <member name="F:Teradata.Client.Provider.TdType.IntervalMonth">
            <summary>
                A time interval represented in Months. Ranging from -'9999'  
                to '9999'. Month-Precision is from 1 to 4. Precision defaults to 2.
            <para></para>
            <para>
                Application calls <see cref="M:Teradata.Client.Provider.TdDataReader.GetTdIntervalMonth(System.Int32)"/> to retrieve the value. 
            </para>
            <para></para>
            <para>Type Mappings:</para>
            <list type="table">
            <listheader>
            <term>DbType</term><description>Teradata Data Type</description>
            </listheader>
            <item>
            <term>DbType.String</term><description>INTERVAL MONTH</description>
            </item>
            </list>
            </summary>
        </member>
        <member name="F:Teradata.Client.Provider.TdType.SmallInt">
            <summary>
                16 bit signed integer. Ranging from -32,768 to 32,767.
            <para></para>
            <para>
                Application calls <see cref="M:Teradata.Client.Provider.TdDataReader.GetInt16(System.Int32)"/> to retrieve the value.
            </para>
            <para></para>
            <para>Type Mappings:</para>
            <list type="table">
            <listheader>
            <term>DbType</term><description>Teradata Data Type</description>
            </listheader>
            <item>
            <term>DbType.Int16</term><description>SMALLINT</description>
            </item>
            </list>
            </summary>
        </member>
        <member name="F:Teradata.Client.Provider.TdType.Time">
            <summary>
                Time value with HH:mm:ss.(f) format. Teradata supports up to 6 
                fractional-seconds-precision (i.e. TIME(6)). 
            <para></para>
            <para>
                Application calls <see cref="M:Teradata.Client.Provider.TdDataReader.GetTime(System.Int32)"/> to retrieve the value.
            </para>
            <para></para>
            <para>Type Mappings:</para>
            <list type="table">
            <listheader>
            <term>DbType</term><description>Teradata Data Type</description>
            </listheader>
            <item>
            <term>DbType.Time</term><description>TIME</description>
            </item>
            </list>
            </summary>
        </member>
        <member name="F:Teradata.Client.Provider.TdType.TimeWithZone">
            <summary>
                Time With Time Zone value with HH:mm:ss.(f)±HH:mm format. Teradata supports up 
                to 6 fractional-seconds-precision (i.e. TIME(6)). Note that Time with 
                Time Zone can be cast to Time and is correctly adjusted to represent local time.
            <para></para>
            <para>
                Application calls <see cref="M:Teradata.Client.Provider.TdDataReader.GetString(System.Int32)"/> to retrieve the value.
            </para>       
            <para></para>
            <para>Type Mappings:</para>
            <list type="table">
            <listheader>
            <term>DbType</term><description>Teradata Data Type</description>
            </listheader>
            <item>
            <term>DbType.String</term><description>TIME WITH TIME ZONE</description>
            </item>
            </list>
            </summary>
        </member>
        <member name="F:Teradata.Client.Provider.TdType.Timestamp">
            <summary>
                Timestamp (date + time) value with yyyy-MM-dd hh:mm:ss.(f) format. Ranging from 
                0001-01-01 00:00:00.000000 to 9999-12-31 23:59:59.999999. Teradata supports up 
                to 6 fractional-seconds-precision (i.e. TIMESTAMP(6)).
            <para></para>
            <para>
                Application calls <see cref="M:Teradata.Client.Provider.TdDataReader.GetDateTime(System.Int32)"/> to retrieve the value.
            </para>       
            <para></para>
            <para>Type Mappings:</para>
            <list type="table">
            <listheader>
            <term>DbType</term><description>Teradata Data Type</description>
            </listheader>
            <item>
            <term>DbType.DateTime</term><description>TIMESTAMP</description>
            </item>
            </list>
            </summary>
        </member>
        <member name="F:Teradata.Client.Provider.TdType.TimestampWithZone">
            <summary>
                Timestamp With Time Zone value with yyyy-MM-dd HH:mm:ss.(f)Z±HH:mm format. 
                Teradata supports up to 6 fractional-seconds-precision (i.e. TIMESTAMP(6) WITH TIME ZONE). 
                Note that Timestamp with Time Zone can be cast to Timestamp and is correctly adjusted to 
                represent local time.
            <para></para>
            <para>
                Application calls <see cref="M:Teradata.Client.Provider.TdDataReader.GetDateTimeOffset(System.Int32)"/> to retrieve the value.
            </para>
            <para></para>
            <para>Type Mappings:</para>
            <list type="table">
            <listheader>
            <term>DbType</term><description>Teradata Data Type</description>
            </listheader>
            <item>
            <term>DbType.DateTimeOffset</term><description>TIMESTAMP WITH TIME ZONE</description>
            </item>
            </list>
            </summary>
        </member>
        <member name="F:Teradata.Client.Provider.TdType.VarByte">
            <summary>
                Represents a variable-length binary data VARBYTE(n) where n is the number of 
                bytes ranging from 1 to 64000.
            <para></para>
            <para>
                Application calls <see cref="M:Teradata.Client.Provider.TdDataReader.GetBytes(System.Int32,System.Int64,System.Byte[],System.Int32,System.Int32)"/>  
                to retrieve all or a portion of the binary data.
            </para>
            <para></para>
            <para>Type Mappings:</para>
            <list type="table">
            <listheader>
            <term>DbType</term><description>Teradata Data Type</description>
            </listheader>
            <item>
            <term>DbType.Binary</term><description>VARBYTE</description>
            </item>
            </list>
            </summary>
        </member>
        <member name="F:Teradata.Client.Provider.TdType.VarChar">
            <summary>
                Represents a variable-length character string. Teradata automatically 
                translates between the session character set and target column.
            <para></para>
            <para>
                Application calls <see cref="M:Teradata.Client.Provider.TdDataReader.GetString(System.Int32)"/> to retrieve 
                the value.
            </para>
            <para></para>
            <para>Type Mappings:</para>
            <list type="table">
            <listheader>
            <term>DbType</term><description>Teradata Data Type</description>
            </listheader>
            <item>
            <term>DbType.String</term><description>VARCHAR, LONG VARCHAR</description>
            </item>
            </list>
            </summary>
        </member>
        <member name="F:Teradata.Client.Provider.TdType.VarGraphic">
            <summary>
                Represents a variable-length UNICODE character string. GRAPHIC represents 
                Unicode characters defined by IBM corporation for DB2.
            <para></para>
            <para>
                Application calls <see cref="M:Teradata.Client.Provider.TdDataReader.GetString(System.Int32)"/> to 
                retrieve the value.
            </para>
            <para></para>
            <para>Type Mappings:</para>
            <list type="table">
            <listheader>
            <term>DbType</term><description>Teradata Data Type</description>
            </listheader>
            <item>
            <term>DbType.String</term><description>VARGRAPHIC, LONG VARGRAPHIC</description>
            </item>
            </list>
            </summary>
        </member>
        <member name="F:Teradata.Client.Provider.TdType.PeriodDate">
            <summary>
            <para>
                A Period of type TdDate that has a format of ('beginning bound', 'ending bound').
                Both the beginning and ending bounds have the format <i>yyyy-MM-dd</i>.
            </para>
            <para>
                Application call <see cref="M:Teradata.Client.Provider.TdDataReader.GetTdPeriodDate(System.Int32)"/> to retrieve
                the value.
            </para>
            <para>Type Mappings:</para>
            <list type="table">
            <listheader>
            <term>DbType</term>
            <description>Teradata Data Type</description>
            </listheader>
            <item>
            <term>DbType.String</term><description>PERIOD(DATE)</description>
            </item>
            </list>
            </summary>
        </member>
        <member name="F:Teradata.Client.Provider.TdType.PeriodTime">
            <summary>
            <para>
                A Period of type TdTime that has a format of ('beginning bound', 'ending bound').
                Both the beginning and ending bounds have the format <i>HH:mm:ss.(f)</i>.  The
                scale can range from 0 to 6.
            </para>
            <para>
                Application call <see cref="M:Teradata.Client.Provider.TdDataReader.GetTdPeriodTime(System.Int32)"/> to retrieve
                the value.
            </para>
            <para>Type Mappings:</para>
            <list type="table">
            <listheader>
            <term>DbType</term>
            <description>Teradata Data Type</description>
            </listheader>
            <item>
            <term>DbType.String</term><description>PERIOD(TIME)</description>
            </item>
            </list>
            </summary>
        </member>
        <member name="F:Teradata.Client.Provider.TdType.PeriodTimestamp">
            <summary>
            <para>
                A Period of type TdTimestamp that has a format of ('beginning bound', 'ending bound').
                Both the beginning and ending bounds have the format <i>yyyy-MM-dd HH:mm:ss.(f)</i>.
                The scale can range from 0 to 6.
            </para>
            <para>
                Application call <see cref="M:Teradata.Client.Provider.TdDataReader.GetTdPeriodTimestamp(System.Int32)"/> to retrieve
                the value.
            </para>
            <para>Type Mappings:</para>
            <list type="table">
            <listheader>
            <term>DbType</term>
            <description>Teradata Data Type</description>
            </listheader>
            <item>
            <term>DbType.String</term><description>PERIOD(TIMESTAMP)</description>
            </item>
            </list>
            </summary>
        </member>
        <member name="F:Teradata.Client.Provider.TdType.PeriodTimestampWithTimeZone">
            <summary>
            <para>
                A Period of type TdTimestampWithTimeZone that has a format of ('beginning bound', 'ending bound').
                Both the beginning and ending bounds have the format <i>yyyy-MM-dd HH:mm:ss.(f)±HH:mm</i>.
                The scale can range from 0 to 6.
            </para>
            <para>
                Application call <see cref="M:Teradata.Client.Provider.TdDataReader.GetTdPeriodTimestampWithTimeZone(System.Int32)"/> to retrieve
                the value.
            </para>
            <para>Type Mappings:</para>
            <list type="table">
            <listheader>
            <term>DbType</term>
            <description>Teradata Data Type</description>
            </listheader>
            <item>
            <term>DbType.String</term><description>PERIOD(TIMESTAMP WITH TIME ZONE)</description>
            </item>
            </list>
            </summary>
        </member>
        <member name="F:Teradata.Client.Provider.TdType.PeriodTimeWithTimeZone">
            <summary>
            <para>
                A Period of type TdTimeWithTimeZone that has a format of ('beginning bound', 'ending bound').
                Both the beginning and ending bounds have the format <i>HH:mm:ss.(f)±HH:mm</i>.
                The scale can range from 0 to 6.
            </para>
            <para>
                Application call <see cref="M:Teradata.Client.Provider.TdDataReader.GetTdPeriodTimeWithTimeZone(System.Int32)"/> to retrieve
                the value.
            </para>
            <para>Type Mappings:</para>
            <list type="table">
            <listheader>
            <term>DbType</term>
            <description>Teradata Data Type</description>
            </listheader>
            <item>
            <term>DbType.String</term><description>PERIOD(TIME WITH TIME ZONE)</description>
            </item>
            </list>
            </summary>
        </member>
        <member name="F:Teradata.Client.Provider.TdType.AnyType">
            <summary>
            <para>
                Represents an object (i.e. Parameter) whose data type is defined at runtime. It is 
                conceptually similar to a Variant type.
            </para>
            <para>
                The TD_ANYTYPE type is supported as a parameter type for functions (domain specific system 
                functions and UDFs), user defined methods and external stored procedures (XSPs).
            </para>
            </summary>
        </member>
        <member name="F:Teradata.Client.Provider.TdType.Number">
             <summary>
             <para>
             Number represents a Teradata type NUMBER.  The corresponding provider specific type is TdNumber.  The range of a NUMBER 
             is ± [1E-130 to 9.99…9E125] as well as 0.  It will also support a precision of up to 40 digits.
            </para> 
             <para>
                 Application calls <see cref="M:Teradata.Client.Provider.TdDataReader.GetTdNumber(System.Int32)"/> to 
                 retrieve the value.
             </para>
             <para>Type Mappings:</para>
             <list type="table">
             <listheader>
             <term>DbType</term><description>Teradata Data Type</description>
             </listheader>
             <item>
             <term>DbType.Double</term><description>NUMBER</description>
             </item>
             </list>
             </summary>
        </member>
        <member name="F:Teradata.Client.Provider.TdType.Xml">
            <summary>
            <para>
              Xml represents a Xml document or fragment.
            </para>
             
            <para>Type Mappings:</para>
            <list type="table">
            <listheader>
            <term>DbType</term><description>Teradata Data Type</description>
            </listheader>
            <item>
            <term>DbType.Xml</term><description>XML</description>
            </item>
            </list>
            </summary>
        </member>
        <member name="F:Teradata.Client.Provider.TdType.Json">
            <summary>
            <para>
              Represents a variable length JavaScript Object Notation (JSON) object.
            </para>
            
            <para>
                Application calls <see cref="M:Teradata.Client.Provider.TdDataReader.GetString(System.Int32)"/> to retrieve 
                the value.
            </para>
            
            <para>Type Mappings:</para>
            <list type="table">
            <listheader>
            <term>DbType</term><description>Teradata Data Type</description>
            </listheader>
            <item>
            <term>DbType.String</term><description>JSON</description>
            </item>
            </list>
            </summary>
        </member>
    </members>
</doc>
